/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={873:(e,t,n)=>{"use strict";n.r(t)},156:function(e,t,n){"use strict";var r,i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(718),o=n(516);n(873);const a=(0,s.initializeApp)({apiKey:"AIzaSyBrDNbyBpmRoUSCTI-npFm1YIodzQNjIoA",authDomain:"wedding-site-c1fb0.firebaseapp.com",projectId:"wedding-site-c1fb0",storageBucket:"wedding-site-c1fb0.appspot.com",messagingSenderId:"514808349805",appId:"1:514808349805:web:59defead69d7da4e5aeb64",measurementId:"G-4HM7N72DF4"}),c=(0,o.getFirestore)(a),u=["Мохито","Базиликовый смэш","Апероль","Маргарита"],l=["Водка","Виски","Вино","Абсент","Ром"],h=["Корона","Heineken","Paulaner","Pilsner"];function d(e,t){return i(this,void 0,void 0,(function*(){var n;try{const r=(0,o.doc)(c,t,e.replace(/\s+/g,"_")),i=yield(0,o.getDoc)(r);if(i.exists()){const s=(null===(n=i.data())||void 0===n?void 0:n.count)||0;yield(0,o.updateDoc)(r,{count:s+1}),console.log(`Updated ${e} in ${t}: new count ${s+1}`)}else yield(0,o.setDoc)(r,{count:1}),console.log(`Set ${e} in ${t}: new count 1`)}catch(e){console.error("Ошибка при обновлении количества голосов:",e)}}))}function f(){return i(this,void 0,void 0,(function*(){var e;try{const t=["cocktails","luxury","beer"];for(const n of t){const t="cocktails"===n?u:"luxury"===n?l:"beer"===n?h:[];for(const r of t){const t=(0,o.doc)(c,n,r.replace(/\s+/g,"_")),i=yield(0,o.getDoc)(t);if(i.exists()){const t=(null===(e=i.data())||void 0===e?void 0:e.count)||0,n=document.getElementById(`${r.toLowerCase().replace(/\s+/g,"-")}-count`);n&&(n.innerText=`${t} человек`)}}}}catch(e){console.error("Ошибка получения результатов опроса:",e)}}))}null===(r=document.getElementById("addGuestBtn"))||void 0===r||r.addEventListener("click",(()=>i(void 0,void 0,void 0,(function*(){const e=document.getElementById("lastName").value,t=document.getElementById("firstName").value;e&&t?(yield function(e,t){return i(this,void 0,void 0,(function*(){try{const n=(0,o.doc)(c,"guests",`${e}_${t}`);(yield(0,o.getDoc)(n)).exists()?console.log(`Guest ${e} ${t} already exists`):(yield(0,o.setDoc)(n,{lastName:e,firstName:t}),console.log(`Guest ${e} ${t} added`))}catch(e){console.error("Error adding guest:",e)}}))}(e,t),document.getElementById("lastName").value="",document.getElementById("firstName").value=""):alert("Пожалуйста, введите фамилию и имя гостя")})))),function(){const e=(0,o.collection)(c,"guests");(0,o.onSnapshot)(e,(e=>{const t=document.getElementById("guestList");t&&(t.innerHTML="",e.forEach((e=>{!function(e){const t=document.getElementById("guestList");if(!t)return;const n=document.createElement("tr"),r=document.createElement("td");r.textContent=e.lastName,n.appendChild(r);const i=document.createElement("td");i.textContent=e.firstName,n.appendChild(i),t.appendChild(n)}(e.data())})))}))}(),function(){i(this,void 0,void 0,(function*(){const e={cocktails:u,luxury:l,beer:h};try{for(const[t,n]of Object.entries(e))for(const e of n){const n=(0,o.doc)(c,t,e.replace(/\s+/g,"_"));(yield(0,o.getDoc)(n)).exists()||(yield(0,o.setDoc)(n,{count:0}))}console.log("Firestore data initialized")}catch(e){console.error("Error initializing Firestore data:",e)}}))}(),f();const p=document.getElementById("survey-form");null==p||p.addEventListener("submit",(e=>i(void 0,void 0,void 0,(function*(){var t;e.preventDefault();const n=new FormData(e.target);try{const e=n.getAll("cocktail");for(const t of e)yield d(t.toString(),"cocktails");const r=n.getAll("luxury");for(const e of r)yield d(e.toString(),"luxury");const i=n.getAll("beer");for(const e of i)yield d(e.toString(),"beer");localStorage.setItem("hasVoted","true"),f(),null===(t=document.getElementById("results"))||void 0===t||t.classList.remove("hidden"),document.querySelector(".survey-button").style.display="none"}catch(e){console.error("Ошибка при обновлении количества голосов:",e)}})))),["cocktails","luxury","beer"].forEach((e=>{("cocktails"===e?u:"luxury"===e?l:"beer"===e?h:[]).forEach((t=>{const n=(0,o.doc)(c,e,t.replace(/\s+/g,"_"));(0,o.onSnapshot)(n,(e=>{var n;if(e.exists()){const r=(null===(n=e.data())||void 0===n?void 0:n.count)||0;!function(e,t){const n=document.getElementById(`${e.toLowerCase().replace(/\s+/g,"-")}-count`);n&&(n.innerText=`${t} человек`)}(t,r)}}))}))}))},782:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i,s=n(462),o=n(322),a=n(795),c=n(107),u=n(669),l=function(){function e(e){this.container=e}return e.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(e){if(function(e){var t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){var t=e.getImmediate();return"".concat(t.library,"/").concat(t.version)}return null})).filter((function(e){return e})).join(" ")},e}(),h="@firebase/app",d="0.10.6",f=new a.Logger("@firebase/app"),p="[DEFAULT]",g=((r={})[h]="fire-core",r["@firebase/app-compat"]="fire-core-compat",r["@firebase/analytics"]="fire-analytics",r["@firebase/analytics-compat"]="fire-analytics-compat",r["@firebase/app-check"]="fire-app-check",r["@firebase/app-check-compat"]="fire-app-check-compat",r["@firebase/auth"]="fire-auth",r["@firebase/auth-compat"]="fire-auth-compat",r["@firebase/database"]="fire-rtdb",r["@firebase/database-compat"]="fire-rtdb-compat",r["@firebase/functions"]="fire-fn",r["@firebase/functions-compat"]="fire-fn-compat",r["@firebase/installations"]="fire-iid",r["@firebase/installations-compat"]="fire-iid-compat",r["@firebase/messaging"]="fire-fcm",r["@firebase/messaging-compat"]="fire-fcm-compat",r["@firebase/performance"]="fire-perf",r["@firebase/performance-compat"]="fire-perf-compat",r["@firebase/remote-config"]="fire-rc",r["@firebase/remote-config-compat"]="fire-rc-compat",r["@firebase/storage"]="fire-gcs",r["@firebase/storage-compat"]="fire-gcs-compat",r["@firebase/firestore"]="fire-fst",r["@firebase/firestore-compat"]="fire-fst-compat",r["@firebase/vertexai-preview"]="fire-vertex",r["fire-js"]="fire-js",r.firebase="fire-js-all",r),m=new Map,y=new Map,v=new Map;function w(e,t){try{e.container.addComponent(t)}catch(n){f.debug("Component ".concat(t.name," failed to register with FirebaseApp ").concat(e.name),n)}}function b(e){var t,n,r,i,s=e.name;if(v.has(s))return f.debug("There were multiple attempts to register component ".concat(s,".")),!1;v.set(s,e);try{for(var a=o.__values(m.values()),c=a.next();!c.done;c=a.next())w(c.value,e)}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}try{for(var u=o.__values(y.values()),l=u.next();!l.done;l=u.next())w(l.value,e)}catch(e){r={error:e}}finally{try{l&&!l.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}return!0}function _(e,t){var n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}function I(e){return void 0!==e.options}var E=((i={})["no-app"]="No Firebase App '{$appName}' has been created - call initializeApp() first",i["bad-app-name"]="Illegal App name: '{$appName}'",i["duplicate-app"]="Firebase App named '{$appName}' already exists with different options or config",i["app-deleted"]="Firebase App named '{$appName}' already deleted",i["server-app-deleted"]="Firebase Server App has been deleted",i["no-options"]="Need to provide options, when not being deployed to hosting via source.",i["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",i["invalid-log-argument"]="First argument to `onLog` must be null or a function.",i["idb-open"]="Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",i["idb-get"]="Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",i["idb-set"]="Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",i["idb-delete"]="Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",i["finalization-registry-not-supported"]="FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.",i["invalid-server-app-environment"]="FirebaseServerApp is not for use in browser environments.",i),S=new c.ErrorFactory("app","Firebase",E),T=function(){function e(e,t,n){var r=this;this._isDeleted=!1,this._options=o.__assign({},e),this._config=o.__assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new s.Component("app",(function(){return r}),"PUBLIC"))}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed(),this._automaticDataCollectionEnabled},set:function(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed(),this._name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed(),this._options},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"config",{get:function(){return this.checkDestroyed(),this._config},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"container",{get:function(){return this._container},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isDeleted",{get:function(){return this._isDeleted},set:function(e){this._isDeleted=e},enumerable:!1,configurable:!0}),e.prototype.checkDestroyed=function(){if(this.isDeleted)throw S.create("app-deleted",{appName:this._name})},e}(),x=function(e){function t(t,n,r,i){var s=this,a=void 0!==n.automaticDataCollectionEnabled&&n.automaticDataCollectionEnabled,c={name:r,automaticDataCollectionEnabled:a};if(void 0!==t.apiKey)s=e.call(this,t,c,i)||this;else{var u=t;s=e.call(this,u.options,c,i)||this}return s._serverConfig=o.__assign({automaticDataCollectionEnabled:a},n),s._finalizationRegistry=null,"undefined"!=typeof FinalizationRegistry&&(s._finalizationRegistry=new FinalizationRegistry((function(){s.automaticCleanup()}))),s._refCount=0,s.incRefCount(s._serverConfig.releaseOnDeref),s._serverConfig.releaseOnDeref=void 0,n.releaseOnDeref=void 0,A(h,d,"serverapp"),s}return o.__extends(t,e),t.prototype.toJSON=function(){},Object.defineProperty(t.prototype,"refCount",{get:function(){return this._refCount},enumerable:!1,configurable:!0}),t.prototype.incRefCount=function(e){this.isDeleted||(this._refCount++,void 0!==e&&null!==this._finalizationRegistry&&this._finalizationRegistry.register(e,this))},t.prototype.decRefCount=function(){return this.isDeleted?0:--this._refCount},t.prototype.automaticCleanup=function(){D(this)},Object.defineProperty(t.prototype,"settings",{get:function(){return this.checkDestroyed(),this._serverConfig},enumerable:!1,configurable:!0}),t.prototype.checkDestroyed=function(){if(this.isDeleted)throw S.create("server-app-deleted")},t}(T);function C(e,t){var n,r;void 0===t&&(t={});var i=e;"object"!=typeof t&&(t={name:t});var a=o.__assign({name:p,automaticDataCollectionEnabled:!1},t),u=a.name;if("string"!=typeof u||!u)throw S.create("bad-app-name",{appName:String(u)});if(i||(i=c.getDefaultAppConfig()),!i)throw S.create("no-options");var l=m.get(u);if(l){if(c.deepEqual(i,l.options)&&c.deepEqual(a,l.config))return l;throw S.create("duplicate-app",{appName:u})}var h=new s.ComponentContainer(u);try{for(var d=o.__values(v.values()),f=d.next();!f.done;f=d.next()){var g=f.value;h.addComponent(g)}}catch(e){n={error:e}}finally{try{f&&!f.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}var y=new T(i,a,h);return m.set(u,y),y}function D(e){return o.__awaiter(this,void 0,void 0,(function(){var t,n;return o.__generator(this,(function(r){switch(r.label){case 0:return t=!1,n=e.name,m.has(n)?(t=!0,m.delete(n)):y.has(n)&&e.decRefCount()<=0&&(y.delete(n),t=!0),t?[4,Promise.all(e.container.getProviders().map((function(e){return e.delete()})))]:[3,2];case 1:r.sent(),e.isDeleted=!0,r.label=2;case 2:return[2]}}))}))}function A(e,t,n){var r,i=null!==(r=g[e])&&void 0!==r?r:e;n&&(i+="-".concat(n));var o=i.match(/\s|\//),a=t.match(/\s|\//);if(o||a){var c=['Unable to register library "'.concat(i,'" with version "').concat(t,'":')];return o&&c.push('library name "'.concat(i,'" contains illegal characters (whitespace or "/")')),o&&a&&c.push("and"),a&&c.push('version name "'.concat(t,'" contains illegal characters (whitespace or "/")')),void f.warn(c.join(" "))}b(new s.Component("".concat(i,"-version"),(function(){return{library:i,version:t}}),"VERSION"))}var N="firebase-heartbeat-database",k=1,O="firebase-heartbeat-store",L=null;function P(){return L||(L=u.openDB(N,k,{upgrade:function(e,t){if(0===t)try{e.createObjectStore(O)}catch(e){console.warn(e)}}}).catch((function(e){throw S.create("idb-open",{originalErrorMessage:e.message})}))),L}function M(e){return o.__awaiter(this,void 0,void 0,(function(){var t,n,r,i,s;return o.__generator(this,(function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),[4,P()];case 1:return t=o.sent(),[4,(n=t.transaction(O)).objectStore(O).get(F(e))];case 2:return r=o.sent(),[4,n.done];case 3:return o.sent(),[2,r];case 4:return(i=o.sent())instanceof c.FirebaseError?f.warn(i.message):(s=S.create("idb-get",{originalErrorMessage:null==i?void 0:i.message}),f.warn(s.message)),[3,5];case 5:return[2]}}))}))}function R(e,t){return o.__awaiter(this,void 0,void 0,(function(){var n,r,i,s;return o.__generator(this,(function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),[4,P()];case 1:return n=o.sent(),[4,(r=n.transaction(O,"readwrite")).objectStore(O).put(t,F(e))];case 2:return o.sent(),[4,r.done];case 3:return o.sent(),[3,5];case 4:return(i=o.sent())instanceof c.FirebaseError?f.warn(i.message):(s=S.create("idb-set",{originalErrorMessage:null==i?void 0:i.message}),f.warn(s.message)),[3,5];case 5:return[2]}}))}))}function F(e){return"".concat(e.name,"!").concat(e.options.appId)}var V=function(){function e(e){var t=this;this.container=e,this._heartbeatsCache=null;var n=this.container.getProvider("app").getImmediate();this._storage=new U(n),this._heartbeatsCachePromise=this._storage.read().then((function(e){return t._heartbeatsCache=e,e}))}return e.prototype.triggerHeartbeat=function(){var e,t;return o.__awaiter(this,void 0,void 0,(function(){var n,r,i,s;return o.__generator(this,(function(o){switch(o.label){case 0:return n=this.container.getProvider("platform-logger").getImmediate(),r=n.getPlatformInfoString(),i=B(),null!=(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)?[3,2]:(s=this,[4,this._heartbeatsCachePromise]);case 1:if(s._heartbeatsCache=o.sent(),null==(null===(t=this._heartbeatsCache)||void 0===t?void 0:t.heartbeats))return[2];o.label=2;case 2:return this._heartbeatsCache.lastSentHeartbeatDate===i||this._heartbeatsCache.heartbeats.some((function(e){return e.date===i}))?[2]:(this._heartbeatsCache.heartbeats.push({date:i,agent:r}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((function(e){var t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),[2,this._storage.overwrite(this._heartbeatsCache)])}}))}))},e.prototype.getHeartbeatsHeader=function(){var e;return o.__awaiter(this,void 0,void 0,(function(){var t,n,r,i,s;return o.__generator(this,(function(a){switch(a.label){case 0:return null!==this._heartbeatsCache?[3,2]:[4,this._heartbeatsCachePromise];case 1:a.sent(),a.label=2;case 2:return null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)||0===this._heartbeatsCache.heartbeats.length?[2,""]:(t=B(),n=function(e,t){var n,r;void 0===t&&(t=1024);var i=[],s=e.slice(),a=function(e){var n=i.find((function(t){return t.agent===e.agent}));if(n){if(n.dates.push(e.date),q(i)>t)return n.dates.pop(),"break"}else if(i.push({agent:e.agent,dates:[e.date]}),q(i)>t)return i.pop(),"break";s=s.slice(1)};try{for(var c=o.__values(e),u=c.next();!u.done&&"break"!==a(u.value);u=c.next());}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}return{heartbeatsToSend:i,unsentEntries:s}}(this._heartbeatsCache.heartbeats),r=n.heartbeatsToSend,i=n.unsentEntries,s=c.base64urlEncodeWithoutPadding(JSON.stringify({version:2,heartbeats:r})),this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,[4,this._storage.overwrite(this._heartbeatsCache)]):[3,4]);case 3:return a.sent(),[3,5];case 4:this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache),a.label=5;case 5:return[2,s]}}))}))},e}();function B(){return(new Date).toISOString().substring(0,10)}var U=function(){function e(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}return e.prototype.runIndexedDBEnvironmentCheck=function(){return o.__awaiter(this,void 0,void 0,(function(){return o.__generator(this,(function(e){return c.isIndexedDBAvailable()?[2,c.validateIndexedDBOpenable().then((function(){return!0})).catch((function(){return!1}))]:[2,!1]}))}))},e.prototype.read=function(){return o.__awaiter(this,void 0,void 0,(function(){var e;return o.__generator(this,(function(t){switch(t.label){case 0:return[4,this._canUseIndexedDBPromise];case 1:return t.sent()?[3,2]:[2,{heartbeats:[]}];case 2:return[4,M(this.app)];case 3:return(null==(e=t.sent())?void 0:e.heartbeats)?[2,e]:[2,{heartbeats:[]}];case 4:return[2]}}))}))},e.prototype.overwrite=function(e){var t;return o.__awaiter(this,void 0,void 0,(function(){var n;return o.__generator(this,(function(r){switch(r.label){case 0:return[4,this._canUseIndexedDBPromise];case 1:return r.sent()?[3,2]:[2];case 2:return[4,this.read()];case 3:return n=r.sent(),[2,R(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})]}}))}))},e.prototype.add=function(e){var t;return o.__awaiter(this,void 0,void 0,(function(){var n;return o.__generator(this,(function(r){switch(r.label){case 0:return[4,this._canUseIndexedDBPromise];case 1:return r.sent()?[3,2]:[2];case 2:return[4,this.read()];case 3:return n=r.sent(),[2,R(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:o.__spreadArray(o.__spreadArray([],o.__read(n.heartbeats),!1),o.__read(e.heartbeats),!1)})]}}))}))},e}();function q(e){return c.base64urlEncodeWithoutPadding(JSON.stringify({version:2,heartbeats:e})).length}b(new s.Component("platform-logger",(function(e){return new l(e)}),"PRIVATE")),b(new s.Component("heartbeat",(function(e){return new V(e)}),"PRIVATE")),A(h,d,"node"),A(h,d,"cjs5"),A("fire-js",""),Object.defineProperty(t,"FirebaseError",{enumerable:!0,get:function(){return c.FirebaseError}}),t.SDK_VERSION="10.12.3",t._DEFAULT_ENTRY_NAME=p,t._addComponent=w,t._addOrOverwriteComponent=function(e,t){e.container.addOrOverwriteComponent(t)},t._apps=m,t._clearComponents=function(){v.clear()},t._components=v,t._getProvider=_,t._isFirebaseApp=I,t._isFirebaseServerApp=function(e){return void 0!==e.settings},t._registerComponent=b,t._removeServiceInstance=function(e,t,n){void 0===n&&(n=p),_(e,t).clearInstance(n)},t._serverApps=y,t.deleteApp=D,t.getApp=function(e){void 0===e&&(e=p);var t=m.get(e);if(!t&&e===p&&c.getDefaultAppConfig())return C();if(!t)throw S.create("no-app",{appName:e});return t},t.getApps=function(){return Array.from(m.values())},t.initializeApp=C,t.initializeServerApp=function(e,t){var n,r,i;if(c.isBrowser()&&!c.isWebWorker())throw S.create("invalid-server-app-environment");void 0===t.automaticDataCollectionEnabled&&(t.automaticDataCollectionEnabled=!1),i=I(e)?e.options:e;var a=o.__assign(o.__assign({},t),i);if(void 0!==a.releaseOnDeref&&delete a.releaseOnDeref,void 0!==t.releaseOnDeref&&"undefined"==typeof FinalizationRegistry)throw S.create("finalization-registry-not-supported",{});var u,l=""+(u=JSON.stringify(a),o.__spreadArray([],o.__read(u),!1).reduce((function(e,t){return Math.imul(31,e)+t.charCodeAt(0)|0}),0)),h=y.get(l);if(h)return h.incRefCount(t.releaseOnDeref),h;var d=new s.ComponentContainer(l);try{for(var f=o.__values(v.values()),p=f.next();!p.done;p=f.next()){var g=p.value;d.addComponent(g)}}catch(e){n={error:e}}finally{try{p&&!p.done&&(r=f.return)&&r.call(f)}finally{if(n)throw n.error}}var m=new x(i,t,l,d);return y.set(l,m),m},t.onLog=function(e,t){if(null!==e&&"function"!=typeof e)throw S.create("invalid-log-argument");a.setUserLogHandler(e,t)},t.registerVersion=A,t.setLogLevel=function(e){a.setLogLevel(e)}},462:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(322),i=n(107),s=function(){function e(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return e.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},e.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},e.prototype.setServiceProps=function(e){return this.serviceProps=e,this},e.prototype.setInstanceCreatedCallback=function(e){return this.onInstanceCreated=e,this},e}(),o="[DEFAULT]",a=function(){function e(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}return e.prototype.get=function(e){var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new i.Deferred;if(this.instancesDeferred.set(t,n),this.isInitialized(t)||this.shouldAutoInitialize())try{var r=this.getOrInitializeService({instanceIdentifier:t});r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},e.prototype.getImmediate=function(e){var t,n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),r=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error("Service ".concat(this.name," is not available"))}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(r)return null;throw e}},e.prototype.getComponent=function(){return this.component},e.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component ".concat(e.name," for Provider ").concat(this.name,"."));if(this.component)throw Error("Component for ".concat(this.name," has already been provided"));if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:o})}catch(e){}try{for(var i=r.__values(this.instancesDeferred.entries()),s=i.next();!s.done;s=i.next()){var a=r.__read(s.value,2),c=a[0],u=a[1],l=this.normalizeInstanceIdentifier(c);try{var h=this.getOrInitializeService({instanceIdentifier:l});u.resolve(h)}catch(e){}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}}},e.prototype.clearInstance=function(e){void 0===e&&(e=o),this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)},e.prototype.delete=function(){return r.__awaiter(this,void 0,void 0,(function(){var e;return r.__generator(this,(function(t){switch(t.label){case 0:return e=Array.from(this.instances.values()),[4,Promise.all(r.__spreadArray(r.__spreadArray([],r.__read(e.filter((function(e){return"INTERNAL"in e})).map((function(e){return e.INTERNAL.delete()}))),!1),r.__read(e.filter((function(e){return"_delete"in e})).map((function(e){return e._delete()}))),!1))];case 1:return t.sent(),[2]}}))}))},e.prototype.isComponentSet=function(){return null!=this.component},e.prototype.isInitialized=function(e){return void 0===e&&(e=o),this.instances.has(e)},e.prototype.getOptions=function(e){return void 0===e&&(e=o),this.instancesOptions.get(e)||{}},e.prototype.initialize=function(e){var t,n;void 0===e&&(e={});var i=e.options,s=void 0===i?{}:i,o=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(o))throw Error("".concat(this.name,"(").concat(o,") has already been initialized"));if(!this.isComponentSet())throw Error("Component ".concat(this.name," has not been registered yet"));var a=this.getOrInitializeService({instanceIdentifier:o,options:s});try{for(var c=r.__values(this.instancesDeferred.entries()),u=c.next();!u.done;u=c.next()){var l=r.__read(u.value,2),h=l[0],d=l[1];o===this.normalizeInstanceIdentifier(h)&&d.resolve(a)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(t)throw t.error}}return a},e.prototype.onInit=function(e,t){var n,r=this.normalizeInstanceIdentifier(t),i=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;i.add(e),this.onInitCallbacks.set(r,i);var s=this.instances.get(r);return s&&e(s,r),function(){i.delete(e)}},e.prototype.invokeOnInitCallbacks=function(e,t){var n,i,s=this.onInitCallbacks.get(t);if(s)try{for(var o=r.__values(s),a=o.next();!a.done;a=o.next()){var c=a.value;try{c(e,t)}catch(e){}}}catch(e){n={error:e}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}},e.prototype.getOrInitializeService=function(e){var t,n=e.instanceIdentifier,r=e.options,i=void 0===r?{}:r,s=this.instances.get(n);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(t=n,t===o?void 0:t),options:i}),this.instances.set(n,s),this.instancesOptions.set(n,i),this.invokeOnInitCallbacks(s,n),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,n,s)}catch(e){}return s||null},e.prototype.normalizeInstanceIdentifier=function(e){return void 0===e&&(e=o),this.component?this.component.multipleInstances?e:o:e},e.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},e}(),c=function(){function e(e){this.name=e,this.providers=new Map}return e.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component ".concat(e.name," has already been registered with ").concat(this.name));t.setComponent(e)},e.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},e.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new a(e,this);return this.providers.set(e,t),t},e.prototype.getProviders=function(){return Array.from(this.providers.values())},e}();t.Component=s,t.ComponentContainer=c,t.Provider=a},100:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(782),i=n(462),s=n(795),o=n(107),a=n(293),c=n(493);const u="@firebase/firestore";class l{constructor(e){this.uid=e}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(e){return e.uid===this.uid}}l.UNAUTHENTICATED=new l(null),l.GOOGLE_CREDENTIALS=new l("google-credentials-uid"),l.FIRST_PARTY=new l("first-party-uid"),l.MOCK_USER=new l("mock-user");let h="10.12.3";const d=new s.Logger("@firebase/firestore");function f(){return d.logLevel}function p(e,...t){if(d.logLevel<=s.LogLevel.DEBUG){const n=t.map(y);d.debug(`Firestore (${h}): ${e}`,...n)}}function g(e,...t){if(d.logLevel<=s.LogLevel.ERROR){const n=t.map(y);d.error(`Firestore (${h}): ${e}`,...n)}}function m(e,...t){if(d.logLevel<=s.LogLevel.WARN){const n=t.map(y);d.warn(`Firestore (${h}): ${e}`,...n)}}function y(e){if("string"==typeof e)return e;try{return function(e){return JSON.stringify(e)}(e)}catch(t){return e}}function v(e="Unexpected state"){const t=`FIRESTORE (${h}) INTERNAL ASSERTION FAILED: `+e;throw g(t),new Error(t)}function w(e,t){e||v()}function b(e,t){return e}const _={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class I extends o.FirebaseError{constructor(e,t){super(e,t),this.code=e,this.message=t,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class E{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}class S{constructor(e,t){this.user=t,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${e}`)}}class T{getToken(){return Promise.resolve(null)}invalidateToken(){}start(e,t){e.enqueueRetryable((()=>t(l.UNAUTHENTICATED)))}shutdown(){}}class x{constructor(e){this.token=e,this.changeListener=null}getToken(){return Promise.resolve(this.token)}invalidateToken(){}start(e,t){this.changeListener=t,e.enqueueRetryable((()=>t(this.token.user)))}shutdown(){this.changeListener=null}}class C{constructor(e){this.t=e,this.currentUser=l.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(e,t){let n=this.i;const r=e=>this.i!==n?(n=this.i,t(e)):Promise.resolve();let i=new E;this.o=()=>{this.i++,this.currentUser=this.u(),i.resolve(),i=new E,e.enqueueRetryable((()=>r(this.currentUser)))};const s=()=>{const t=i;e.enqueueRetryable((async()=>{await t.promise,await r(this.currentUser)}))},o=e=>{p("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=e,this.auth.addAuthTokenListener(this.o),s()};this.t.onInit((e=>o(e))),setTimeout((()=>{if(!this.auth){const e=this.t.getImmediate({optional:!0});e?o(e):(p("FirebaseAuthCredentialsProvider","Auth not yet detected"),i.resolve(),i=new E)}}),0),s()}getToken(){const e=this.i,t=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(t).then((t=>this.i!==e?(p("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):t?(w("string"==typeof t.accessToken),new S(t.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const e=this.auth&&this.auth.getUid();return w(null===e||"string"==typeof e),new l(e)}}class D{constructor(e,t,n){this.l=e,this.h=t,this.P=n,this.type="FirstParty",this.user=l.FIRST_PARTY,this.I=new Map}T(){return this.P?this.P():null}get headers(){this.I.set("X-Goog-AuthUser",this.l);const e=this.T();return e&&this.I.set("Authorization",e),this.h&&this.I.set("X-Goog-Iam-Authorization-Token",this.h),this.I}}class A{constructor(e,t,n){this.l=e,this.h=t,this.P=n}getToken(){return Promise.resolve(new D(this.l,this.h,this.P))}start(e,t){e.enqueueRetryable((()=>t(l.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class N{constructor(e){this.value=e,this.type="AppCheck",this.headers=new Map,e&&e.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class k{constructor(e){this.A=e,this.forceRefresh=!1,this.appCheck=null,this.R=null}start(e,t){const n=e=>{null!=e.error&&p("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${e.error.message}`);const n=e.token!==this.R;return this.R=e.token,p("FirebaseAppCheckTokenProvider",`Received ${n?"new":"existing"} token.`),n?t(e.token):Promise.resolve()};this.o=t=>{e.enqueueRetryable((()=>n(t)))};const r=e=>{p("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=e,this.appCheck.addTokenListener(this.o)};this.A.onInit((e=>r(e))),setTimeout((()=>{if(!this.appCheck){const e=this.A.getImmediate({optional:!0});e?r(e):p("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const e=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(e).then((e=>e?(w("string"==typeof e.token),this.R=e.token,new N(e.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}function O(e){const t="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(e);if(t&&"function"==typeof t.getRandomValues)t.getRandomValues(n);else for(let t=0;t<e;t++)n[t]=Math.floor(256*Math.random());return n}class L{static newId(){const e=62*Math.floor(256/62);let t="";for(;t.length<20;){const n=O(40);for(let r=0;r<n.length;++r)t.length<20&&n[r]<e&&(t+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(n[r]%62))}return t}}function P(e,t){return e<t?-1:e>t?1:0}function M(e,t,n){return e.length===t.length&&e.every(((e,r)=>n(e,t[r])))}function R(e){return e+"\0"}class F{constructor(e,t){if(this.seconds=e,this.nanoseconds=t,t<0)throw new I(_.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(t>=1e9)throw new I(_.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(e<-62135596800)throw new I(_.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e);if(e>=253402300800)throw new I(_.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e)}static now(){return F.fromMillis(Date.now())}static fromDate(e){return F.fromMillis(e.getTime())}static fromMillis(e){const t=Math.floor(e/1e3),n=Math.floor(1e6*(e-1e3*t));return new F(t,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(e){return this.seconds===e.seconds?P(this.nanoseconds,e.nanoseconds):P(this.seconds,e.seconds)}isEqual(e){return e.seconds===this.seconds&&e.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const e=this.seconds- -62135596800;return String(e).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class V{constructor(e){this.timestamp=e}static fromTimestamp(e){return new V(e)}static min(){return new V(new F(0,0))}static max(){return new V(new F(253402300799,999999999))}compareTo(e){return this.timestamp._compareTo(e.timestamp)}isEqual(e){return this.timestamp.isEqual(e.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}class B{constructor(e,t,n){void 0===t?t=0:t>e.length&&v(),void 0===n?n=e.length-t:n>e.length-t&&v(),this.segments=e,this.offset=t,this.len=n}get length(){return this.len}isEqual(e){return 0===B.comparator(this,e)}child(e){const t=this.segments.slice(this.offset,this.limit());return e instanceof B?e.forEach((e=>{t.push(e)})):t.push(e),this.construct(t)}limit(){return this.offset+this.length}popFirst(e){return e=void 0===e?1:e,this.construct(this.segments,this.offset+e,this.length-e)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(e){return this.segments[this.offset+e]}isEmpty(){return 0===this.length}isPrefixOf(e){if(e.length<this.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}isImmediateParentOf(e){if(this.length+1!==e.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}forEach(e){for(let t=this.offset,n=this.limit();t<n;t++)e(this.segments[t])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(e,t){const n=Math.min(e.length,t.length);for(let r=0;r<n;r++){const n=e.get(r),i=t.get(r);if(n<i)return-1;if(n>i)return 1}return e.length<t.length?-1:e.length>t.length?1:0}}class U extends B{construct(e,t,n){return new U(e,t,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}toUriEncodedString(){return this.toArray().map(encodeURIComponent).join("/")}static fromString(...e){const t=[];for(const n of e){if(n.indexOf("//")>=0)throw new I(_.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);t.push(...n.split("/").filter((e=>e.length>0)))}return new U(t)}static emptyPath(){return new U([])}}const q=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class j extends B{construct(e,t,n){return new j(e,t,n)}static isValidIdentifier(e){return q.test(e)}canonicalString(){return this.toArray().map((e=>(e=e.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),j.isValidIdentifier(e)||(e="`"+e+"`"),e))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new j(["__name__"])}static fromServerFormat(e){const t=[];let n="",r=0;const i=()=>{if(0===n.length)throw new I(_.INVALID_ARGUMENT,`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);t.push(n),n=""};let s=!1;for(;r<e.length;){const t=e[r];if("\\"===t){if(r+1===e.length)throw new I(_.INVALID_ARGUMENT,"Path has trailing escape character: "+e);const t=e[r+1];if("\\"!==t&&"."!==t&&"`"!==t)throw new I(_.INVALID_ARGUMENT,"Path has invalid escape sequence: "+e);n+=t,r+=2}else"`"===t?(s=!s,r++):"."!==t||s?(n+=t,r++):(i(),r++)}if(i(),s)throw new I(_.INVALID_ARGUMENT,"Unterminated ` in path: "+e);return new j(t)}static emptyPath(){return new j([])}}class z{constructor(e){this.path=e}static fromPath(e){return new z(U.fromString(e))}static fromName(e){return new z(U.fromString(e).popFirst(5))}static empty(){return new z(U.emptyPath())}get collectionGroup(){return this.path.popLast().lastSegment()}hasCollectionId(e){return this.path.length>=2&&this.path.get(this.path.length-2)===e}getCollectionGroup(){return this.path.get(this.path.length-2)}getCollectionPath(){return this.path.popLast()}isEqual(e){return null!==e&&0===U.comparator(this.path,e.path)}toString(){return this.path.toString()}static comparator(e,t){return U.comparator(e.path,t.path)}static isDocumentKey(e){return e.length%2==0}static fromSegments(e){return new z(new U(e.slice()))}}class G{constructor(e,t,n,r){this.indexId=e,this.collectionGroup=t,this.fields=n,this.indexState=r}}function K(e){return e.fields.find((e=>2===e.kind))}function $(e){return e.fields.filter((e=>2!==e.kind))}function Q(e,t){let n=P(e.collectionGroup,t.collectionGroup);if(0!==n)return n;for(let r=0;r<Math.min(e.fields.length,t.fields.length);++r)if(n=W(e.fields[r],t.fields[r]),0!==n)return n;return P(e.fields.length,t.fields.length)}G.UNKNOWN_ID=-1;class H{constructor(e,t){this.fieldPath=e,this.kind=t}}function W(e,t){const n=j.comparator(e.fieldPath,t.fieldPath);return 0!==n?n:P(e.kind,t.kind)}class J{constructor(e,t){this.sequenceNumber=e,this.offset=t}static empty(){return new J(0,Z.min())}}function Y(e,t){const n=e.toTimestamp().seconds,r=e.toTimestamp().nanoseconds+1,i=V.fromTimestamp(1e9===r?new F(n+1,0):new F(n,r));return new Z(i,z.empty(),t)}function X(e){return new Z(e.readTime,e.key,-1)}class Z{constructor(e,t,n){this.readTime=e,this.documentKey=t,this.largestBatchId=n}static min(){return new Z(V.min(),z.empty(),-1)}static max(){return new Z(V.max(),z.empty(),-1)}}function ee(e,t){let n=e.readTime.compareTo(t.readTime);return 0!==n?n:(n=z.comparator(e.documentKey,t.documentKey),0!==n?n:P(e.largestBatchId,t.largestBatchId))}const te="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";class ne{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(e){this.onCommittedListeners.push(e)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((e=>e()))}}async function re(e){if(e.code!==_.FAILED_PRECONDITION||e.message!==te)throw e;p("LocalStore","Unexpectedly lost primary lease")}class ie{constructor(e){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,e((e=>{this.isDone=!0,this.result=e,this.nextCallback&&this.nextCallback(e)}),(e=>{this.isDone=!0,this.error=e,this.catchCallback&&this.catchCallback(e)}))}catch(e){return this.next(void 0,e)}next(e,t){return this.callbackAttached&&v(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(t,this.error):this.wrapSuccess(e,this.result):new ie(((n,r)=>{this.nextCallback=t=>{this.wrapSuccess(e,t).next(n,r)},this.catchCallback=e=>{this.wrapFailure(t,e).next(n,r)}}))}toPromise(){return new Promise(((e,t)=>{this.next(e,t)}))}wrapUserFunction(e){try{const t=e();return t instanceof ie?t:ie.resolve(t)}catch(e){return ie.reject(e)}}wrapSuccess(e,t){return e?this.wrapUserFunction((()=>e(t))):ie.resolve(t)}wrapFailure(e,t){return e?this.wrapUserFunction((()=>e(t))):ie.reject(t)}static resolve(e){return new ie(((t,n)=>{t(e)}))}static reject(e){return new ie(((t,n)=>{n(e)}))}static waitFor(e){return new ie(((t,n)=>{let r=0,i=0,s=!1;e.forEach((e=>{++r,e.next((()=>{++i,s&&i===r&&t()}),(e=>n(e)))})),s=!0,i===r&&t()}))}static or(e){let t=ie.resolve(!1);for(const n of e)t=t.next((e=>e?ie.resolve(e):n()));return t}static forEach(e,t){const n=[];return e.forEach(((e,r)=>{n.push(t.call(this,e,r))})),this.waitFor(n)}static mapArray(e,t){return new ie(((n,r)=>{const i=e.length,s=new Array(i);let o=0;for(let a=0;a<i;a++){const c=a;t(e[c]).next((e=>{s[c]=e,++o,o===i&&n(s)}),(e=>r(e)))}}))}static doWhile(e,t){return new ie(((n,r)=>{const i=()=>{!0===e()?t().next((()=>{i()}),r):n()};i()}))}}class se{constructor(e,t){this.action=e,this.transaction=t,this.aborted=!1,this.V=new E,this.transaction.oncomplete=()=>{this.V.resolve()},this.transaction.onabort=()=>{t.error?this.V.reject(new ue(e,t.error)):this.V.resolve()},this.transaction.onerror=t=>{const n=pe(t.target.error);this.V.reject(new ue(e,n))}}static open(e,t,n,r){try{return new se(t,e.transaction(r,n))}catch(e){throw new ue(t,e)}}get m(){return this.V.promise}abort(e){e&&this.V.reject(e),this.aborted||(p("SimpleDb","Aborting transaction:",e?e.message:"Client-initiated abort"),this.aborted=!0,this.transaction.abort())}g(){const e=this.transaction;this.aborted||"function"!=typeof e.commit||e.commit()}store(e){const t=this.transaction.objectStore(e);return new he(t)}}class oe{constructor(e,t,n){this.name=e,this.version=t,this.p=n,12.2===oe.S(o.getUA())&&g("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.")}static delete(e){return p("SimpleDb","Removing database:",e),de(window.indexedDB.deleteDatabase(e)).toPromise()}static D(){if(!o.isIndexedDBAvailable())return!1;if(oe.C())return!0;const e=o.getUA(),t=oe.S(e),n=0<t&&t<10,r=ae(e),i=0<r&&r<4.5;return!(e.indexOf("MSIE ")>0||e.indexOf("Trident/")>0||e.indexOf("Edge/")>0||n||i)}static C(){var e;return"undefined"!=typeof process&&"YES"===(null===(e=process.__PRIVATE_env)||void 0===e?void 0:e.v)}static F(e,t){return e.store(t)}static S(e){const t=e.match(/i(?:phone|pad|pod) os ([\d_]+)/i),n=t?t[1].split("_").slice(0,2).join("."):"-1";return Number(n)}async M(e){return this.db||(p("SimpleDb","Opening database:",this.name),this.db=await new Promise(((t,n)=>{const r=indexedDB.open(this.name,this.version);r.onsuccess=e=>{const n=e.target.result;t(n)},r.onblocked=()=>{n(new ue(e,"Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."))},r.onerror=t=>{const r=t.target.error;"VersionError"===r.name?n(new I(_.FAILED_PRECONDITION,"A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")):"InvalidStateError"===r.name?n(new I(_.FAILED_PRECONDITION,"Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: "+r)):n(new ue(e,r))},r.onupgradeneeded=e=>{p("SimpleDb",'Database "'+this.name+'" requires upgrade from version:',e.oldVersion);const t=e.target.result;this.p.O(t,r.transaction,e.oldVersion,this.version).next((()=>{p("SimpleDb","Database upgrade to version "+this.version+" complete")}))}}))),this.N&&(this.db.onversionchange=e=>this.N(e)),this.db}L(e){this.N=e,this.db&&(this.db.onversionchange=t=>e(t))}async runTransaction(e,t,n,r){const i="readonly"===t;let s=0;for(;;){++s;try{this.db=await this.M(e);const t=se.open(this.db,e,i?"readonly":"readwrite",n),s=r(t).next((e=>(t.g(),e))).catch((e=>(t.abort(e),ie.reject(e)))).toPromise();return s.catch((()=>{})),await t.m,s}catch(e){const t=e,n="FirebaseError"!==t.name&&s<3;if(p("SimpleDb","Transaction failed with error:",t.message,"Retrying:",n),this.close(),!n)return Promise.reject(t)}}}close(){this.db&&this.db.close(),this.db=void 0}}function ae(e){const t=e.match(/Android ([\d.]+)/i),n=t?t[1].split(".").slice(0,2).join("."):"-1";return Number(n)}class ce{constructor(e){this.B=e,this.k=!1,this.q=null}get isDone(){return this.k}get K(){return this.q}set cursor(e){this.B=e}done(){this.k=!0}$(e){this.q=e}delete(){return de(this.B.delete())}}class ue extends I{constructor(e,t){super(_.UNAVAILABLE,`IndexedDB transaction '${e}' failed: ${t}`),this.name="IndexedDbTransactionError"}}function le(e){return"IndexedDbTransactionError"===e.name}class he{constructor(e){this.store=e}put(e,t){let n;return void 0!==t?(p("SimpleDb","PUT",this.store.name,e,t),n=this.store.put(t,e)):(p("SimpleDb","PUT",this.store.name,"<auto-key>",e),n=this.store.put(e)),de(n)}add(e){return p("SimpleDb","ADD",this.store.name,e,e),de(this.store.add(e))}get(e){return de(this.store.get(e)).next((t=>(void 0===t&&(t=null),p("SimpleDb","GET",this.store.name,e,t),t)))}delete(e){return p("SimpleDb","DELETE",this.store.name,e),de(this.store.delete(e))}count(){return p("SimpleDb","COUNT",this.store.name),de(this.store.count())}U(e,t){const n=this.options(e,t),r=n.index?this.store.index(n.index):this.store;if("function"==typeof r.getAll){const e=r.getAll(n.range);return new ie(((t,n)=>{e.onerror=e=>{n(e.target.error)},e.onsuccess=e=>{t(e.target.result)}}))}{const e=this.cursor(n),t=[];return this.W(e,((e,n)=>{t.push(n)})).next((()=>t))}}G(e,t){const n=this.store.getAll(e,null===t?void 0:t);return new ie(((e,t)=>{n.onerror=e=>{t(e.target.error)},n.onsuccess=t=>{e(t.target.result)}}))}j(e,t){p("SimpleDb","DELETE ALL",this.store.name);const n=this.options(e,t);n.H=!1;const r=this.cursor(n);return this.W(r,((e,t,n)=>n.delete()))}J(e,t){let n;t?n=e:(n={},t=e);const r=this.cursor(n);return this.W(r,t)}Y(e){const t=this.cursor({});return new ie(((n,r)=>{t.onerror=e=>{const t=pe(e.target.error);r(t)},t.onsuccess=t=>{const r=t.target.result;r?e(r.primaryKey,r.value).next((e=>{e?r.continue():n()})):n()}}))}W(e,t){const n=[];return new ie(((r,i)=>{e.onerror=e=>{i(e.target.error)},e.onsuccess=e=>{const i=e.target.result;if(!i)return void r();const s=new ce(i),o=t(i.primaryKey,i.value,s);if(o instanceof ie){const e=o.catch((e=>(s.done(),ie.reject(e))));n.push(e)}s.isDone?r():null===s.K?i.continue():i.continue(s.K)}})).next((()=>ie.waitFor(n)))}options(e,t){let n;return void 0!==e&&("string"==typeof e?n=e:t=e),{index:n,range:t}}cursor(e){let t="next";if(e.reverse&&(t="prev"),e.index){const n=this.store.index(e.index);return e.H?n.openKeyCursor(e.range,t):n.openCursor(e.range,t)}return this.store.openCursor(e.range,t)}}function de(e){return new ie(((t,n)=>{e.onsuccess=e=>{const n=e.target.result;t(n)},e.onerror=e=>{const t=pe(e.target.error);n(t)}}))}let fe=!1;function pe(e){const t=oe.S(o.getUA());if(t>=12.2&&t<13){const t="An internal error was encountered in the Indexed Database server";if(e.message.indexOf(t)>=0){const e=new I("internal",`IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${t}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);return fe||(fe=!0,setTimeout((()=>{throw e}),0)),e}}return e}class ge{constructor(e,t){this.asyncQueue=e,this.Z=t,this.task=null}start(){this.X(15e3)}stop(){this.task&&(this.task.cancel(),this.task=null)}get started(){return null!==this.task}X(e){p("IndexBackfiller",`Scheduled in ${e}ms`),this.task=this.asyncQueue.enqueueAfterDelay("index_backfill",e,(async()=>{this.task=null;try{p("IndexBackfiller",`Documents written: ${await this.Z.ee()}`)}catch(e){le(e)?p("IndexBackfiller","Ignoring IndexedDB error during index backfill: ",e):await re(e)}await this.X(6e4)}))}}class me{constructor(e,t){this.localStore=e,this.persistence=t}async ee(e=50){return this.persistence.runTransaction("Backfill Indexes","readwrite-primary",(t=>this.te(t,e)))}te(e,t){const n=new Set;let r=t,i=!0;return ie.doWhile((()=>!0===i&&r>0),(()=>this.localStore.indexManager.getNextCollectionGroupToUpdate(e).next((t=>{if(null!==t&&!n.has(t))return p("IndexBackfiller",`Processing collection: ${t}`),this.ne(e,t,r).next((e=>{r-=e,n.add(t)}));i=!1})))).next((()=>t-r))}ne(e,t,n){return this.localStore.indexManager.getMinOffsetFromCollectionGroup(e,t).next((r=>this.localStore.localDocuments.getNextDocuments(e,t,r,n).next((n=>{const i=n.changes;return this.localStore.indexManager.updateIndexEntries(e,i).next((()=>this.re(r,n))).next((n=>(p("IndexBackfiller",`Updating offset: ${n}`),this.localStore.indexManager.updateCollectionGroup(e,t,n)))).next((()=>i.size))}))))}re(e,t){let n=e;return t.changes.forEach(((e,t)=>{const r=X(t);ee(r,n)>0&&(n=r)})),new Z(n.readTime,n.documentKey,Math.max(t.batchId,e.largestBatchId))}}class ye{constructor(e,t){this.previousValue=e,t&&(t.sequenceNumberHandler=e=>this.ie(e),this.se=e=>t.writeSequenceNumber(e))}ie(e){return this.previousValue=Math.max(e,this.previousValue),this.previousValue}next(){const e=++this.previousValue;return this.se&&this.se(e),e}}function ve(e){return null==e}function we(e){return 0===e&&1/e==-1/0}function be(e){return"number"==typeof e&&Number.isInteger(e)&&!we(e)&&e<=Number.MAX_SAFE_INTEGER&&e>=Number.MIN_SAFE_INTEGER}function _e(e){let t="";for(let n=0;n<e.length;n++)t.length>0&&(t=Ee(t)),t=Ie(e.get(n),t);return Ee(t)}function Ie(e,t){let n=t;const r=e.length;for(let t=0;t<r;t++){const r=e.charAt(t);switch(r){case"\0":n+="";break;case"":n+="";break;default:n+=r}}return n}function Ee(e){return e+""}function Se(e){const t=e.length;if(w(t>=2),2===t)return w(""===e.charAt(0)&&""===e.charAt(1)),U.emptyPath();const n=t-2,r=[];let i="";for(let s=0;s<t;){const t=e.indexOf("",s);switch((t<0||t>n)&&v(),e.charAt(t+1)){case"":const n=e.substring(s,t);let o;0===i.length?o=n:(i+=n,o=i,i=""),r.push(o);break;case"":i+=e.substring(s,t),i+="\0";break;case"":i+=e.substring(s,t+1);break;default:v()}s=t+2}return new U(r)}ye.oe=-1;const Te=["userId","batchId"];function xe(e,t){return[e,_e(t)]}function Ce(e,t,n){return[e,_e(t),n]}const De={},Ae=["prefixPath","collectionGroup","readTime","documentId"],Ne=["prefixPath","collectionGroup","documentId"],ke=["collectionGroup","readTime","prefixPath","documentId"],Oe=["canonicalId","targetId"],Le=["targetId","path"],Pe=["path","targetId"],Me=["collectionId","parent"],Re=["indexId","uid"],Fe=["uid","sequenceNumber"],Ve=["indexId","uid","arrayValue","directionalValue","orderedDocumentKey","documentKey"],Be=["indexId","uid","orderedDocumentKey"],Ue=["userId","collectionPath","documentId"],qe=["userId","collectionPath","largestBatchId"],je=["userId","collectionGroup","largestBatchId"],ze=["mutationQueues","mutations","documentMutations","remoteDocuments","targets","owner","targetGlobal","targetDocuments","clientMetadata","remoteDocumentGlobal","collectionParents","bundles","namedQueries"],Ge=[...ze,"documentOverlays"],Ke=["mutationQueues","mutations","documentMutations","remoteDocumentsV14","targets","owner","targetGlobal","targetDocuments","clientMetadata","remoteDocumentGlobal","collectionParents","bundles","namedQueries","documentOverlays"],$e=Ke,Qe=[...$e,"indexConfiguration","indexState","indexEntries"],He=Qe;class We extends ne{constructor(e,t){super(),this._e=e,this.currentSequenceNumber=t}}function Je(e,t){const n=b(e);return oe.F(n._e,t)}function Ye(e){let t=0;for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t++;return t}function Xe(e,t){for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])}function Ze(e,t){const n=[];for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.push(t(e[r],r,e));return n}function et(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}class tt{constructor(e,t){this.comparator=e,this.root=t||rt.EMPTY}insert(e,t){return new tt(this.comparator,this.root.insert(e,t,this.comparator).copy(null,null,rt.BLACK,null,null))}remove(e){return new tt(this.comparator,this.root.remove(e,this.comparator).copy(null,null,rt.BLACK,null,null))}get(e){let t=this.root;for(;!t.isEmpty();){const n=this.comparator(e,t.key);if(0===n)return t.value;n<0?t=t.left:n>0&&(t=t.right)}return null}indexOf(e){let t=0,n=this.root;for(;!n.isEmpty();){const r=this.comparator(e,n.key);if(0===r)return t+n.left.size;r<0?n=n.left:(t+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(e){return this.root.inorderTraversal(e)}forEach(e){this.inorderTraversal(((t,n)=>(e(t,n),!1)))}toString(){const e=[];return this.inorderTraversal(((t,n)=>(e.push(`${t}:${n}`),!1))),`{${e.join(", ")}}`}reverseTraversal(e){return this.root.reverseTraversal(e)}getIterator(){return new nt(this.root,null,this.comparator,!1)}getIteratorFrom(e){return new nt(this.root,e,this.comparator,!1)}getReverseIterator(){return new nt(this.root,null,this.comparator,!0)}getReverseIteratorFrom(e){return new nt(this.root,e,this.comparator,!0)}}class nt{constructor(e,t,n,r){this.isReverse=r,this.nodeStack=[];let i=1;for(;!e.isEmpty();)if(i=t?n(e.key,t):1,t&&r&&(i*=-1),i<0)e=this.isReverse?e.left:e.right;else{if(0===i){this.nodeStack.push(e);break}this.nodeStack.push(e),e=this.isReverse?e.right:e.left}}getNext(){let e=this.nodeStack.pop();const t={key:e.key,value:e.value};if(this.isReverse)for(e=e.left;!e.isEmpty();)this.nodeStack.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack.push(e),e=e.left;return t}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const e=this.nodeStack[this.nodeStack.length-1];return{key:e.key,value:e.value}}}class rt{constructor(e,t,n,r,i){this.key=e,this.value=t,this.color=null!=n?n:rt.RED,this.left=null!=r?r:rt.EMPTY,this.right=null!=i?i:rt.EMPTY,this.size=this.left.size+1+this.right.size}copy(e,t,n,r,i){return new rt(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=i?i:this.right)}isEmpty(){return!1}inorderTraversal(e){return this.left.inorderTraversal(e)||e(this.key,this.value)||this.right.inorderTraversal(e)}reverseTraversal(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(e,t,n){let r=this;const i=n(e,r.key);return r=i<0?r.copy(null,null,null,r.left.insert(e,t,n),null):0===i?r.copy(null,t,null,null,null):r.copy(null,null,null,null,r.right.insert(e,t,n)),r.fixUp()}removeMin(){if(this.left.isEmpty())return rt.EMPTY;let e=this;return e.left.isRed()||e.left.left.isRed()||(e=e.moveRedLeft()),e=e.copy(null,null,null,e.left.removeMin(),null),e.fixUp()}remove(e,t){let n,r=this;if(t(e,r.key)<0)r.left.isEmpty()||r.left.isRed()||r.left.left.isRed()||(r=r.moveRedLeft()),r=r.copy(null,null,null,r.left.remove(e,t),null);else{if(r.left.isRed()&&(r=r.rotateRight()),r.right.isEmpty()||r.right.isRed()||r.right.left.isRed()||(r=r.moveRedRight()),0===t(e,r.key)){if(r.right.isEmpty())return rt.EMPTY;n=r.right.min(),r=r.copy(n.key,n.value,null,null,r.right.removeMin())}r=r.copy(null,null,null,null,r.right.remove(e,t))}return r.fixUp()}isRed(){return this.color}fixUp(){let e=this;return e.right.isRed()&&!e.left.isRed()&&(e=e.rotateLeft()),e.left.isRed()&&e.left.left.isRed()&&(e=e.rotateRight()),e.left.isRed()&&e.right.isRed()&&(e=e.colorFlip()),e}moveRedLeft(){let e=this.colorFlip();return e.right.left.isRed()&&(e=e.copy(null,null,null,null,e.right.rotateRight()),e=e.rotateLeft(),e=e.colorFlip()),e}moveRedRight(){let e=this.colorFlip();return e.left.left.isRed()&&(e=e.rotateRight(),e=e.colorFlip()),e}rotateLeft(){const e=this.copy(null,null,rt.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)}rotateRight(){const e=this.copy(null,null,rt.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)}colorFlip(){const e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)}checkMaxDepth(){const e=this.check();return Math.pow(2,e)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw v();if(this.right.isRed())throw v();const e=this.left.check();if(e!==this.right.check())throw v();return e+(this.isRed()?0:1)}}rt.EMPTY=null,rt.RED=!0,rt.BLACK=!1,rt.EMPTY=new class{constructor(){this.size=0}get key(){throw v()}get value(){throw v()}get color(){throw v()}get left(){throw v()}get right(){throw v()}copy(e,t,n,r,i){return this}insert(e,t,n){return new rt(e,t)}remove(e,t){return this}isEmpty(){return!0}inorderTraversal(e){return!1}reverseTraversal(e){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class it{constructor(e){this.comparator=e,this.data=new tt(this.comparator)}has(e){return null!==this.data.get(e)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(e){return this.data.indexOf(e)}forEach(e){this.data.inorderTraversal(((t,n)=>(e(t),!1)))}forEachInRange(e,t){const n=this.data.getIteratorFrom(e[0]);for(;n.hasNext();){const r=n.getNext();if(this.comparator(r.key,e[1])>=0)return;t(r.key)}}forEachWhile(e,t){let n;for(n=void 0!==t?this.data.getIteratorFrom(t):this.data.getIterator();n.hasNext();)if(!e(n.getNext().key))return}firstAfterOrEqual(e){const t=this.data.getIteratorFrom(e);return t.hasNext()?t.getNext().key:null}getIterator(){return new st(this.data.getIterator())}getIteratorFrom(e){return new st(this.data.getIteratorFrom(e))}add(e){return this.copy(this.data.remove(e).insert(e,!0))}delete(e){return this.has(e)?this.copy(this.data.remove(e)):this}isEmpty(){return this.data.isEmpty()}unionWith(e){let t=this;return t.size<e.size&&(t=e,e=this),e.forEach((e=>{t=t.add(e)})),t}isEqual(e){if(!(e instanceof it))return!1;if(this.size!==e.size)return!1;const t=this.data.getIterator(),n=e.data.getIterator();for(;t.hasNext();){const e=t.getNext().key,r=n.getNext().key;if(0!==this.comparator(e,r))return!1}return!0}toArray(){const e=[];return this.forEach((t=>{e.push(t)})),e}toString(){const e=[];return this.forEach((t=>e.push(t))),"SortedSet("+e.toString()+")"}copy(e){const t=new it(this.comparator);return t.data=e,t}}class st{constructor(e){this.iter=e}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}function ot(e){return e.hasNext()?e.getNext():void 0}class at{constructor(e){this.fields=e,e.sort(j.comparator)}static empty(){return new at([])}unionWith(e){let t=new it(j.comparator);for(const e of this.fields)t=t.add(e);for(const n of e)t=t.add(n);return new at(t.toArray())}covers(e){for(const t of this.fields)if(t.isPrefixOf(e))return!0;return!1}isEqual(e){return M(this.fields,e.fields,((e,t)=>e.isEqual(t)))}}class ct extends Error{constructor(){super(...arguments),this.name="Base64DecodeError"}}class ut{constructor(e){this.binaryString=e}static fromBase64String(e){const t=function(e){try{return atob(e)}catch(e){throw"undefined"!=typeof DOMException&&e instanceof DOMException?new ct("Invalid base64 string: "+e):e}}(e);return new ut(t)}static fromUint8Array(e){const t=function(e){let t="";for(let n=0;n<e.length;++n)t+=String.fromCharCode(e[n]);return t}(e);return new ut(t)}[Symbol.iterator](){let e=0;return{next:()=>e<this.binaryString.length?{value:this.binaryString.charCodeAt(e++),done:!1}:{value:void 0,done:!0}}}toBase64(){return e=this.binaryString,btoa(e);var e}toUint8Array(){return function(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(e){return P(this.binaryString,e.binaryString)}isEqual(e){return this.binaryString===e.binaryString}}ut.EMPTY_BYTE_STRING=new ut("");const lt=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function ht(e){if(w(!!e),"string"==typeof e){let t=0;const n=lt.exec(e);if(w(!!n),n[1]){let e=n[1];e=(e+"000000000").substr(0,9),t=Number(e)}const r=new Date(e);return{seconds:Math.floor(r.getTime()/1e3),nanos:t}}return{seconds:dt(e.seconds),nanos:dt(e.nanos)}}function dt(e){return"number"==typeof e?e:"string"==typeof e?Number(e):0}function ft(e){return"string"==typeof e?ut.fromBase64String(e):ut.fromUint8Array(e)}function pt(e){var t,n;return"server_timestamp"===(null===(n=((null===(t=null==e?void 0:e.mapValue)||void 0===t?void 0:t.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function gt(e){const t=e.mapValue.fields.__previous_value__;return pt(t)?gt(t):t}function mt(e){const t=ht(e.mapValue.fields.__local_write_time__.timestampValue);return new F(t.seconds,t.nanos)}class yt{constructor(e,t,n,r,i,s,o,a,c){this.databaseId=e,this.appId=t,this.persistenceKey=n,this.host=r,this.ssl=i,this.forceLongPolling=s,this.autoDetectLongPolling=o,this.longPollingOptions=a,this.useFetchStreams=c}}class vt{constructor(e,t){this.projectId=e,this.database=t||"(default)"}static empty(){return new vt("","")}get isDefaultDatabase(){return"(default)"===this.database}isEqual(e){return e instanceof vt&&e.projectId===this.projectId&&e.database===this.database}}const wt={mapValue:{fields:{__type__:{stringValue:"__max__"}}}},bt={nullValue:"NULL_VALUE"};function _t(e){return"nullValue"in e?0:"booleanValue"in e?1:"integerValue"in e||"doubleValue"in e?2:"timestampValue"in e?3:"stringValue"in e?5:"bytesValue"in e?6:"referenceValue"in e?7:"geoPointValue"in e?8:"arrayValue"in e?9:"mapValue"in e?pt(e)?4:Rt(e)?9007199254740991:10:v()}function It(e,t){if(e===t)return!0;const n=_t(e);if(n!==_t(t))return!1;switch(n){case 0:case 9007199254740991:return!0;case 1:return e.booleanValue===t.booleanValue;case 4:return mt(e).isEqual(mt(t));case 3:return function(e,t){if("string"==typeof e.timestampValue&&"string"==typeof t.timestampValue&&e.timestampValue.length===t.timestampValue.length)return e.timestampValue===t.timestampValue;const n=ht(e.timestampValue),r=ht(t.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(e,t);case 5:return e.stringValue===t.stringValue;case 6:return function(e,t){return ft(e.bytesValue).isEqual(ft(t.bytesValue))}(e,t);case 7:return e.referenceValue===t.referenceValue;case 8:return function(e,t){return dt(e.geoPointValue.latitude)===dt(t.geoPointValue.latitude)&&dt(e.geoPointValue.longitude)===dt(t.geoPointValue.longitude)}(e,t);case 2:return function(e,t){if("integerValue"in e&&"integerValue"in t)return dt(e.integerValue)===dt(t.integerValue);if("doubleValue"in e&&"doubleValue"in t){const n=dt(e.doubleValue),r=dt(t.doubleValue);return n===r?we(n)===we(r):isNaN(n)&&isNaN(r)}return!1}(e,t);case 9:return M(e.arrayValue.values||[],t.arrayValue.values||[],It);case 10:return function(e,t){const n=e.mapValue.fields||{},r=t.mapValue.fields||{};if(Ye(n)!==Ye(r))return!1;for(const e in n)if(n.hasOwnProperty(e)&&(void 0===r[e]||!It(n[e],r[e])))return!1;return!0}(e,t);default:return v()}}function Et(e,t){return void 0!==(e.values||[]).find((e=>It(e,t)))}function St(e,t){if(e===t)return 0;const n=_t(e),r=_t(t);if(n!==r)return P(n,r);switch(n){case 0:case 9007199254740991:return 0;case 1:return P(e.booleanValue,t.booleanValue);case 2:return function(e,t){const n=dt(e.integerValue||e.doubleValue),r=dt(t.integerValue||t.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(e,t);case 3:return Tt(e.timestampValue,t.timestampValue);case 4:return Tt(mt(e),mt(t));case 5:return P(e.stringValue,t.stringValue);case 6:return function(e,t){const n=ft(e),r=ft(t);return n.compareTo(r)}(e.bytesValue,t.bytesValue);case 7:return function(e,t){const n=e.split("/"),r=t.split("/");for(let e=0;e<n.length&&e<r.length;e++){const t=P(n[e],r[e]);if(0!==t)return t}return P(n.length,r.length)}(e.referenceValue,t.referenceValue);case 8:return function(e,t){const n=P(dt(e.latitude),dt(t.latitude));return 0!==n?n:P(dt(e.longitude),dt(t.longitude))}(e.geoPointValue,t.geoPointValue);case 9:return function(e,t){const n=e.values||[],r=t.values||[];for(let e=0;e<n.length&&e<r.length;++e){const t=St(n[e],r[e]);if(t)return t}return P(n.length,r.length)}(e.arrayValue,t.arrayValue);case 10:return function(e,t){if(e===wt.mapValue&&t===wt.mapValue)return 0;if(e===wt.mapValue)return 1;if(t===wt.mapValue)return-1;const n=e.fields||{},r=Object.keys(n),i=t.fields||{},s=Object.keys(i);r.sort(),s.sort();for(let e=0;e<r.length&&e<s.length;++e){const t=P(r[e],s[e]);if(0!==t)return t;const o=St(n[r[e]],i[s[e]]);if(0!==o)return o}return P(r.length,s.length)}(e.mapValue,t.mapValue);default:throw v()}}function Tt(e,t){if("string"==typeof e&&"string"==typeof t&&e.length===t.length)return P(e,t);const n=ht(e),r=ht(t),i=P(n.seconds,r.seconds);return 0!==i?i:P(n.nanos,r.nanos)}function xt(e){return Ct(e)}function Ct(e){return"nullValue"in e?"null":"booleanValue"in e?""+e.booleanValue:"integerValue"in e?""+e.integerValue:"doubleValue"in e?""+e.doubleValue:"timestampValue"in e?function(e){const t=ht(e);return`time(${t.seconds},${t.nanos})`}(e.timestampValue):"stringValue"in e?e.stringValue:"bytesValue"in e?function(e){return ft(e).toBase64()}(e.bytesValue):"referenceValue"in e?function(e){return z.fromName(e).toString()}(e.referenceValue):"geoPointValue"in e?function(e){return`geo(${e.latitude},${e.longitude})`}(e.geoPointValue):"arrayValue"in e?function(e){let t="[",n=!0;for(const r of e.values||[])n?n=!1:t+=",",t+=Ct(r);return t+"]"}(e.arrayValue):"mapValue"in e?function(e){const t=Object.keys(e.fields||{}).sort();let n="{",r=!0;for(const i of t)r?r=!1:n+=",",n+=`${i}:${Ct(e.fields[i])}`;return n+"}"}(e.mapValue):v()}function Dt(e){switch(_t(e)){case 0:case 1:return 4;case 2:return 8;case 3:case 8:return 16;case 4:const t=gt(e);return t?16+Dt(t):16;case 5:return 2*e.stringValue.length;case 6:return ft(e.bytesValue).approximateByteSize();case 7:return e.referenceValue.length;case 9:return function(e){return(e.values||[]).reduce(((e,t)=>e+Dt(t)),0)}(e.arrayValue);case 10:return function(e){let t=0;return Xe(e.fields,((e,n)=>{t+=e.length+Dt(n)})),t}(e.mapValue);default:throw v()}}function At(e,t){return{referenceValue:`projects/${e.projectId}/databases/${e.database}/documents/${t.path.canonicalString()}`}}function Nt(e){return!!e&&"integerValue"in e}function kt(e){return!!e&&"arrayValue"in e}function Ot(e){return!!e&&"nullValue"in e}function Lt(e){return!!e&&"doubleValue"in e&&isNaN(Number(e.doubleValue))}function Pt(e){return!!e&&"mapValue"in e}function Mt(e){if(e.geoPointValue)return{geoPointValue:Object.assign({},e.geoPointValue)};if(e.timestampValue&&"object"==typeof e.timestampValue)return{timestampValue:Object.assign({},e.timestampValue)};if(e.mapValue){const t={mapValue:{fields:{}}};return Xe(e.mapValue.fields,((e,n)=>t.mapValue.fields[e]=Mt(n))),t}if(e.arrayValue){const t={arrayValue:{values:[]}};for(let n=0;n<(e.arrayValue.values||[]).length;++n)t.arrayValue.values[n]=Mt(e.arrayValue.values[n]);return t}return Object.assign({},e)}function Rt(e){return"__max__"===(((e.mapValue||{}).fields||{}).__type__||{}).stringValue}function Ft(e){return"nullValue"in e?bt:"booleanValue"in e?{booleanValue:!1}:"integerValue"in e||"doubleValue"in e?{doubleValue:NaN}:"timestampValue"in e?{timestampValue:{seconds:Number.MIN_SAFE_INTEGER}}:"stringValue"in e?{stringValue:""}:"bytesValue"in e?{bytesValue:""}:"referenceValue"in e?At(vt.empty(),z.empty()):"geoPointValue"in e?{geoPointValue:{latitude:-90,longitude:-180}}:"arrayValue"in e?{arrayValue:{}}:"mapValue"in e?{mapValue:{}}:v()}function Vt(e){return"nullValue"in e?{booleanValue:!1}:"booleanValue"in e?{doubleValue:NaN}:"integerValue"in e||"doubleValue"in e?{timestampValue:{seconds:Number.MIN_SAFE_INTEGER}}:"timestampValue"in e?{stringValue:""}:"stringValue"in e?{bytesValue:""}:"bytesValue"in e?At(vt.empty(),z.empty()):"referenceValue"in e?{geoPointValue:{latitude:-90,longitude:-180}}:"geoPointValue"in e?{arrayValue:{}}:"arrayValue"in e?{mapValue:{}}:"mapValue"in e?wt:v()}function Bt(e,t){const n=St(e.value,t.value);return 0!==n?n:e.inclusive&&!t.inclusive?-1:!e.inclusive&&t.inclusive?1:0}function Ut(e,t){const n=St(e.value,t.value);return 0!==n?n:e.inclusive&&!t.inclusive?1:!e.inclusive&&t.inclusive?-1:0}class qt{constructor(e){this.value=e}static empty(){return new qt({mapValue:{}})}field(e){if(e.isEmpty())return this.value;{let t=this.value;for(let n=0;n<e.length-1;++n)if(t=(t.mapValue.fields||{})[e.get(n)],!Pt(t))return null;return t=(t.mapValue.fields||{})[e.lastSegment()],t||null}}set(e,t){this.getFieldsMap(e.popLast())[e.lastSegment()]=Mt(t)}setAll(e){let t=j.emptyPath(),n={},r=[];e.forEach(((e,i)=>{if(!t.isImmediateParentOf(i)){const e=this.getFieldsMap(t);this.applyChanges(e,n,r),n={},r=[],t=i.popLast()}e?n[i.lastSegment()]=Mt(e):r.push(i.lastSegment())}));const i=this.getFieldsMap(t);this.applyChanges(i,n,r)}delete(e){const t=this.field(e.popLast());Pt(t)&&t.mapValue.fields&&delete t.mapValue.fields[e.lastSegment()]}isEqual(e){return It(this.value,e.value)}getFieldsMap(e){let t=this.value;t.mapValue.fields||(t.mapValue={fields:{}});for(let n=0;n<e.length;++n){let r=t.mapValue.fields[e.get(n)];Pt(r)&&r.mapValue.fields||(r={mapValue:{fields:{}}},t.mapValue.fields[e.get(n)]=r),t=r}return t.mapValue.fields}applyChanges(e,t,n){Xe(t,((t,n)=>e[t]=n));for(const t of n)delete e[t]}clone(){return new qt(Mt(this.value))}}function jt(e){const t=[];return Xe(e.fields,((e,n)=>{const r=new j([e]);if(Pt(n)){const e=jt(n.mapValue).fields;if(0===e.length)t.push(r);else for(const n of e)t.push(r.child(n))}else t.push(r)})),new at(t)}class zt{constructor(e,t,n,r,i,s,o){this.key=e,this.documentType=t,this.version=n,this.readTime=r,this.createTime=i,this.data=s,this.documentState=o}static newInvalidDocument(e){return new zt(e,0,V.min(),V.min(),V.min(),qt.empty(),0)}static newFoundDocument(e,t,n,r){return new zt(e,1,t,V.min(),n,r,0)}static newNoDocument(e,t){return new zt(e,2,t,V.min(),V.min(),qt.empty(),0)}static newUnknownDocument(e,t){return new zt(e,3,t,V.min(),V.min(),qt.empty(),2)}convertToFoundDocument(e,t){return!this.createTime.isEqual(V.min())||2!==this.documentType&&0!==this.documentType||(this.createTime=e),this.version=e,this.documentType=1,this.data=t,this.documentState=0,this}convertToNoDocument(e){return this.version=e,this.documentType=2,this.data=qt.empty(),this.documentState=0,this}convertToUnknownDocument(e){return this.version=e,this.documentType=3,this.data=qt.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this.version=V.min(),this}setReadTime(e){return this.readTime=e,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(e){return e instanceof zt&&this.key.isEqual(e.key)&&this.version.isEqual(e.version)&&this.documentType===e.documentType&&this.documentState===e.documentState&&this.data.isEqual(e.data)}mutableCopy(){return new zt(this.key,this.documentType,this.version,this.readTime,this.createTime,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class Gt{constructor(e,t){this.position=e,this.inclusive=t}}function Kt(e,t,n){let r=0;for(let i=0;i<e.position.length;i++){const s=t[i],o=e.position[i];if(r=s.field.isKeyField()?z.comparator(z.fromName(o.referenceValue),n.key):St(o,n.data.field(s.field)),"desc"===s.dir&&(r*=-1),0!==r)break}return r}function $t(e,t){if(null===e)return null===t;if(null===t)return!1;if(e.inclusive!==t.inclusive||e.position.length!==t.position.length)return!1;for(let n=0;n<e.position.length;n++)if(!It(e.position[n],t.position[n]))return!1;return!0}class Qt{constructor(e,t="asc"){this.field=e,this.dir=t}}function Ht(e,t){return e.dir===t.dir&&e.field.isEqual(t.field)}class Wt{}class Jt extends Wt{constructor(e,t,n){super(),this.field=e,this.op=t,this.value=n}static create(e,t,n){return e.isKeyField()?"in"===t||"not-in"===t?this.createKeyFieldInFilter(e,t,n):new an(e,t,n):"array-contains"===t?new hn(e,n):"in"===t?new dn(e,n):"not-in"===t?new fn(e,n):"array-contains-any"===t?new pn(e,n):new Jt(e,t,n)}static createKeyFieldInFilter(e,t,n){return"in"===t?new cn(e,n):new un(e,n)}matches(e){const t=e.data.field(this.field);return"!="===this.op?null!==t&&this.matchesComparison(St(t,this.value)):null!==t&&_t(this.value)===_t(t)&&this.matchesComparison(St(t,this.value))}matchesComparison(e){switch(this.op){case"<":return e<0;case"<=":return e<=0;case"==":return 0===e;case"!=":return 0!==e;case">":return e>0;case">=":return e>=0;default:return v()}}isInequality(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}getFlattenedFilters(){return[this]}getFilters(){return[this]}}class Yt extends Wt{constructor(e,t){super(),this.filters=e,this.op=t,this.ae=null}static create(e,t){return new Yt(e,t)}matches(e){return Xt(this)?void 0===this.filters.find((t=>!t.matches(e))):void 0!==this.filters.find((t=>t.matches(e)))}getFlattenedFilters(){return null!==this.ae||(this.ae=this.filters.reduce(((e,t)=>e.concat(t.getFlattenedFilters())),[])),this.ae}getFilters(){return Object.assign([],this.filters)}}function Xt(e){return"and"===e.op}function Zt(e){return"or"===e.op}function en(e){return tn(e)&&Xt(e)}function tn(e){for(const t of e.filters)if(t instanceof Yt)return!1;return!0}function nn(e){if(e instanceof Jt)return e.field.canonicalString()+e.op.toString()+xt(e.value);if(en(e))return e.filters.map((e=>nn(e))).join(",");{const t=e.filters.map((e=>nn(e))).join(",");return`${e.op}(${t})`}}function rn(e,t){return e instanceof Jt?function(e,t){return t instanceof Jt&&e.op===t.op&&e.field.isEqual(t.field)&&It(e.value,t.value)}(e,t):e instanceof Yt?function(e,t){return t instanceof Yt&&e.op===t.op&&e.filters.length===t.filters.length&&e.filters.reduce(((e,n,r)=>e&&rn(n,t.filters[r])),!0)}(e,t):void v()}function sn(e,t){const n=e.filters.concat(t);return Yt.create(n,e.op)}function on(e){return e instanceof Jt?function(e){return`${e.field.canonicalString()} ${e.op} ${xt(e.value)}`}(e):e instanceof Yt?function(e){return e.op.toString()+" {"+e.getFilters().map(on).join(" ,")+"}"}(e):"Filter"}class an extends Jt{constructor(e,t,n){super(e,t,n),this.key=z.fromName(n.referenceValue)}matches(e){const t=z.comparator(e.key,this.key);return this.matchesComparison(t)}}class cn extends Jt{constructor(e,t){super(e,"in",t),this.keys=ln(0,t)}matches(e){return this.keys.some((t=>t.isEqual(e.key)))}}class un extends Jt{constructor(e,t){super(e,"not-in",t),this.keys=ln(0,t)}matches(e){return!this.keys.some((t=>t.isEqual(e.key)))}}function ln(e,t){var n;return((null===(n=t.arrayValue)||void 0===n?void 0:n.values)||[]).map((e=>z.fromName(e.referenceValue)))}class hn extends Jt{constructor(e,t){super(e,"array-contains",t)}matches(e){const t=e.data.field(this.field);return kt(t)&&Et(t.arrayValue,this.value)}}class dn extends Jt{constructor(e,t){super(e,"in",t)}matches(e){const t=e.data.field(this.field);return null!==t&&Et(this.value.arrayValue,t)}}class fn extends Jt{constructor(e,t){super(e,"not-in",t)}matches(e){if(Et(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const t=e.data.field(this.field);return null!==t&&!Et(this.value.arrayValue,t)}}class pn extends Jt{constructor(e,t){super(e,"array-contains-any",t)}matches(e){const t=e.data.field(this.field);return!(!kt(t)||!t.arrayValue.values)&&t.arrayValue.values.some((e=>Et(this.value.arrayValue,e)))}}class gn{constructor(e,t=null,n=[],r=[],i=null,s=null,o=null){this.path=e,this.collectionGroup=t,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=s,this.endAt=o,this.ue=null}}function mn(e,t=null,n=[],r=[],i=null,s=null,o=null){return new gn(e,t,n,r,i,s,o)}function yn(e){const t=b(e);if(null===t.ue){let e=t.path.canonicalString();null!==t.collectionGroup&&(e+="|cg:"+t.collectionGroup),e+="|f:",e+=t.filters.map((e=>nn(e))).join(","),e+="|ob:",e+=t.orderBy.map((e=>function(e){return e.field.canonicalString()+e.dir}(e))).join(","),ve(t.limit)||(e+="|l:",e+=t.limit),t.startAt&&(e+="|lb:",e+=t.startAt.inclusive?"b:":"a:",e+=t.startAt.position.map((e=>xt(e))).join(",")),t.endAt&&(e+="|ub:",e+=t.endAt.inclusive?"a:":"b:",e+=t.endAt.position.map((e=>xt(e))).join(",")),t.ue=e}return t.ue}function vn(e,t){if(e.limit!==t.limit)return!1;if(e.orderBy.length!==t.orderBy.length)return!1;for(let n=0;n<e.orderBy.length;n++)if(!Ht(e.orderBy[n],t.orderBy[n]))return!1;if(e.filters.length!==t.filters.length)return!1;for(let n=0;n<e.filters.length;n++)if(!rn(e.filters[n],t.filters[n]))return!1;return e.collectionGroup===t.collectionGroup&&!!e.path.isEqual(t.path)&&!!$t(e.startAt,t.startAt)&&$t(e.endAt,t.endAt)}function wn(e){return z.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}function bn(e,t){return e.filters.filter((e=>e instanceof Jt&&e.field.isEqual(t)))}function _n(e,t,n){let r=bt,i=!0;for(const n of bn(e,t)){let e=bt,t=!0;switch(n.op){case"<":case"<=":e=Ft(n.value);break;case"==":case"in":case">=":e=n.value;break;case">":e=n.value,t=!1;break;case"!=":case"not-in":e=bt}Bt({value:r,inclusive:i},{value:e,inclusive:t})<0&&(r=e,i=t)}if(null!==n)for(let s=0;s<e.orderBy.length;++s)if(e.orderBy[s].field.isEqual(t)){const e=n.position[s];Bt({value:r,inclusive:i},{value:e,inclusive:n.inclusive})<0&&(r=e,i=n.inclusive);break}return{value:r,inclusive:i}}function In(e,t,n){let r=wt,i=!0;for(const n of bn(e,t)){let e=wt,t=!0;switch(n.op){case">=":case">":e=Vt(n.value),t=!1;break;case"==":case"in":case"<=":e=n.value;break;case"<":e=n.value,t=!1;break;case"!=":case"not-in":e=wt}Ut({value:r,inclusive:i},{value:e,inclusive:t})>0&&(r=e,i=t)}if(null!==n)for(let s=0;s<e.orderBy.length;++s)if(e.orderBy[s].field.isEqual(t)){const e=n.position[s];Ut({value:r,inclusive:i},{value:e,inclusive:n.inclusive})>0&&(r=e,i=n.inclusive);break}return{value:r,inclusive:i}}class En{constructor(e,t=null,n=[],r=[],i=null,s="F",o=null,a=null){this.path=e,this.collectionGroup=t,this.explicitOrderBy=n,this.filters=r,this.limit=i,this.limitType=s,this.startAt=o,this.endAt=a,this.ce=null,this.le=null,this.he=null,this.startAt,this.endAt}}function Sn(e,t,n,r,i,s,o,a){return new En(e,t,n,r,i,s,o,a)}function Tn(e){return new En(e)}function xn(e){return 0===e.filters.length&&null===e.limit&&null==e.startAt&&null==e.endAt&&(0===e.explicitOrderBy.length||1===e.explicitOrderBy.length&&e.explicitOrderBy[0].field.isKeyField())}function Cn(e){return null!==e.collectionGroup}function Dn(e){const t=b(e);if(null===t.ce){t.ce=[];const e=new Set;for(const n of t.explicitOrderBy)t.ce.push(n),e.add(n.field.canonicalString());const n=t.explicitOrderBy.length>0?t.explicitOrderBy[t.explicitOrderBy.length-1].dir:"asc",r=function(e){let t=new it(j.comparator);return e.filters.forEach((e=>{e.getFlattenedFilters().forEach((e=>{e.isInequality()&&(t=t.add(e.field))}))})),t}(t);r.forEach((r=>{e.has(r.canonicalString())||r.isKeyField()||t.ce.push(new Qt(r,n))})),e.has(j.keyField().canonicalString())||t.ce.push(new Qt(j.keyField(),n))}return t.ce}function An(e){const t=b(e);return t.le||(t.le=kn(t,Dn(e))),t.le}function Nn(e){const t=b(e);return t.he||(t.he=kn(t,e.explicitOrderBy)),t.he}function kn(e,t){if("F"===e.limitType)return mn(e.path,e.collectionGroup,t,e.filters,e.limit,e.startAt,e.endAt);{t=t.map((e=>{const t="desc"===e.dir?"asc":"desc";return new Qt(e.field,t)}));const n=e.endAt?new Gt(e.endAt.position,e.endAt.inclusive):null,r=e.startAt?new Gt(e.startAt.position,e.startAt.inclusive):null;return mn(e.path,e.collectionGroup,t,e.filters,e.limit,n,r)}}function On(e,t){const n=e.filters.concat([t]);return new En(e.path,e.collectionGroup,e.explicitOrderBy.slice(),n,e.limit,e.limitType,e.startAt,e.endAt)}function Ln(e,t,n){return new En(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),t,n,e.startAt,e.endAt)}function Pn(e,t){return vn(An(e),An(t))&&e.limitType===t.limitType}function Mn(e){return`${yn(An(e))}|lt:${e.limitType}`}function Rn(e){return`Query(target=${function(e){let t=e.path.canonicalString();return null!==e.collectionGroup&&(t+=" collectionGroup="+e.collectionGroup),e.filters.length>0&&(t+=`, filters: [${e.filters.map((e=>on(e))).join(", ")}]`),ve(e.limit)||(t+=", limit: "+e.limit),e.orderBy.length>0&&(t+=`, orderBy: [${e.orderBy.map((e=>function(e){return`${e.field.canonicalString()} (${e.dir})`}(e))).join(", ")}]`),e.startAt&&(t+=", startAt: ",t+=e.startAt.inclusive?"b:":"a:",t+=e.startAt.position.map((e=>xt(e))).join(",")),e.endAt&&(t+=", endAt: ",t+=e.endAt.inclusive?"a:":"b:",t+=e.endAt.position.map((e=>xt(e))).join(",")),`Target(${t})`}(An(e))}; limitType=${e.limitType})`}function Fn(e,t){return t.isFoundDocument()&&function(e,t){const n=t.key.path;return null!==e.collectionGroup?t.key.hasCollectionId(e.collectionGroup)&&e.path.isPrefixOf(n):z.isDocumentKey(e.path)?e.path.isEqual(n):e.path.isImmediateParentOf(n)}(e,t)&&function(e,t){for(const n of Dn(e))if(!n.field.isKeyField()&&null===t.data.field(n.field))return!1;return!0}(e,t)&&function(e,t){for(const n of e.filters)if(!n.matches(t))return!1;return!0}(e,t)&&function(e,t){return!(e.startAt&&!function(e,t,n){const r=Kt(e,t,n);return e.inclusive?r<=0:r<0}(e.startAt,Dn(e),t)||e.endAt&&!function(e,t,n){const r=Kt(e,t,n);return e.inclusive?r>=0:r>0}(e.endAt,Dn(e),t))}(e,t)}function Vn(e){return e.collectionGroup||(e.path.length%2==1?e.path.lastSegment():e.path.get(e.path.length-2))}function Bn(e){return(t,n)=>{let r=!1;for(const i of Dn(e)){const e=Un(i,t,n);if(0!==e)return e;r=r||i.field.isKeyField()}return 0}}function Un(e,t,n){const r=e.field.isKeyField()?z.comparator(t.key,n.key):function(e,t,n){const r=t.data.field(e),i=n.data.field(e);return null!==r&&null!==i?St(r,i):v()}(e.field,t,n);switch(e.dir){case"asc":return r;case"desc":return-1*r;default:return v()}}class qn{constructor(e,t){this.mapKeyFn=e,this.equalsFn=t,this.inner={},this.innerSize=0}get(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0!==n)for(const[t,r]of n)if(this.equalsFn(t,e))return r}has(e){return void 0!==this.get(e)}set(e,t){const n=this.mapKeyFn(e),r=this.inner[n];if(void 0===r)return this.inner[n]=[[e,t]],void this.innerSize++;for(let n=0;n<r.length;n++)if(this.equalsFn(r[n][0],e))return void(r[n]=[e,t]);r.push([e,t]),this.innerSize++}delete(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0===n)return!1;for(let r=0;r<n.length;r++)if(this.equalsFn(n[r][0],e))return 1===n.length?delete this.inner[t]:n.splice(r,1),this.innerSize--,!0;return!1}forEach(e){Xe(this.inner,((t,n)=>{for(const[t,r]of n)e(t,r)}))}isEmpty(){return et(this.inner)}size(){return this.innerSize}}const jn=new tt(z.comparator);function zn(){return jn}const Gn=new tt(z.comparator);function Kn(...e){let t=Gn;for(const n of e)t=t.insert(n.key,n);return t}function $n(e){let t=Gn;return e.forEach(((e,n)=>t=t.insert(e,n.overlayedDocument))),t}function Qn(){return Wn()}function Hn(){return Wn()}function Wn(){return new qn((e=>e.toString()),((e,t)=>e.isEqual(t)))}const Jn=new tt(z.comparator),Yn=new it(z.comparator);function Xn(...e){let t=Yn;for(const n of e)t=t.add(n);return t}const Zn=new it(P);function er(){return Zn}function tr(e,t){if(e.useProto3Json){if(isNaN(t))return{doubleValue:"NaN"};if(t===1/0)return{doubleValue:"Infinity"};if(t===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:we(t)?"-0":t}}function nr(e){return{integerValue:""+e}}function rr(e,t){return be(t)?nr(t):tr(e,t)}class ir{constructor(){this._=void 0}}function sr(e,t,n){return e instanceof cr?function(e,t){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:e.seconds,nanos:e.nanoseconds}}}};return t&&pt(t)&&(t=gt(t)),t&&(n.fields.__previous_value__=t),{mapValue:n}}(n,t):e instanceof ur?lr(e,t):e instanceof hr?dr(e,t):function(e,t){const n=ar(e,t),r=pr(n)+pr(e.Pe);return Nt(n)&&Nt(e.Pe)?nr(r):tr(e.serializer,r)}(e,t)}function or(e,t,n){return e instanceof ur?lr(e,t):e instanceof hr?dr(e,t):n}function ar(e,t){return e instanceof fr?function(e){return Nt(e)||function(e){return!!e&&"doubleValue"in e}(e)}(t)?t:{integerValue:0}:null}class cr extends ir{}class ur extends ir{constructor(e){super(),this.elements=e}}function lr(e,t){const n=gr(t);for(const t of e.elements)n.some((e=>It(e,t)))||n.push(t);return{arrayValue:{values:n}}}class hr extends ir{constructor(e){super(),this.elements=e}}function dr(e,t){let n=gr(t);for(const t of e.elements)n=n.filter((e=>!It(e,t)));return{arrayValue:{values:n}}}class fr extends ir{constructor(e,t){super(),this.serializer=e,this.Pe=t}}function pr(e){return dt(e.integerValue||e.doubleValue)}function gr(e){return kt(e)&&e.arrayValue.values?e.arrayValue.values.slice():[]}class mr{constructor(e,t){this.field=e,this.transform=t}}class yr{constructor(e,t){this.version=e,this.transformResults=t}}class vr{constructor(e,t){this.updateTime=e,this.exists=t}static none(){return new vr}static exists(e){return new vr(void 0,e)}static updateTime(e){return new vr(e)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(e){return this.exists===e.exists&&(this.updateTime?!!e.updateTime&&this.updateTime.isEqual(e.updateTime):!e.updateTime)}}function wr(e,t){return void 0!==e.updateTime?t.isFoundDocument()&&t.version.isEqual(e.updateTime):void 0===e.exists||e.exists===t.isFoundDocument()}class br{}function _r(e,t){if(!e.hasLocalMutations||t&&0===t.fields.length)return null;if(null===t)return e.isNoDocument()?new kr(e.key,vr.none()):new xr(e.key,e.data,vr.none());{const n=e.data,r=qt.empty();let i=new it(j.comparator);for(let e of t.fields)if(!i.has(e)){let t=n.field(e);null===t&&e.length>1&&(e=e.popLast(),t=n.field(e)),null===t?r.delete(e):r.set(e,t),i=i.add(e)}return new Cr(e.key,r,new at(i.toArray()),vr.none())}}function Ir(e,t,n){e instanceof xr?function(e,t,n){const r=e.value.clone(),i=Ar(e.fieldTransforms,t,n.transformResults);r.setAll(i),t.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(e,t,n):e instanceof Cr?function(e,t,n){if(!wr(e.precondition,t))return void t.convertToUnknownDocument(n.version);const r=Ar(e.fieldTransforms,t,n.transformResults),i=t.data;i.setAll(Dr(e)),i.setAll(r),t.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(e,t,n):function(e,t,n){t.convertToNoDocument(n.version).setHasCommittedMutations()}(0,t,n)}function Er(e,t,n,r){return e instanceof xr?function(e,t,n,r){if(!wr(e.precondition,t))return n;const i=e.value.clone(),s=Nr(e.fieldTransforms,r,t);return i.setAll(s),t.convertToFoundDocument(t.version,i).setHasLocalMutations(),null}(e,t,n,r):e instanceof Cr?function(e,t,n,r){if(!wr(e.precondition,t))return n;const i=Nr(e.fieldTransforms,r,t),s=t.data;return s.setAll(Dr(e)),s.setAll(i),t.convertToFoundDocument(t.version,s).setHasLocalMutations(),null===n?null:n.unionWith(e.fieldMask.fields).unionWith(e.fieldTransforms.map((e=>e.field)))}(e,t,n,r):function(e,t,n){return wr(e.precondition,t)?(t.convertToNoDocument(t.version).setHasLocalMutations(),null):n}(e,t,n)}function Sr(e,t){let n=null;for(const r of e.fieldTransforms){const e=t.data.field(r.field),i=ar(r.transform,e||null);null!=i&&(null===n&&(n=qt.empty()),n.set(r.field,i))}return n||null}function Tr(e,t){return e.type===t.type&&!!e.key.isEqual(t.key)&&!!e.precondition.isEqual(t.precondition)&&!!function(e,t){return void 0===e&&void 0===t||!(!e||!t)&&M(e,t,((e,t)=>function(e,t){return e.field.isEqual(t.field)&&function(e,t){return e instanceof ur&&t instanceof ur||e instanceof hr&&t instanceof hr?M(e.elements,t.elements,It):e instanceof fr&&t instanceof fr?It(e.Pe,t.Pe):e instanceof cr&&t instanceof cr}(e.transform,t.transform)}(e,t)))}(e.fieldTransforms,t.fieldTransforms)&&(0===e.type?e.value.isEqual(t.value):1!==e.type||e.data.isEqual(t.data)&&e.fieldMask.isEqual(t.fieldMask))}class xr extends br{constructor(e,t,n,r=[]){super(),this.key=e,this.value=t,this.precondition=n,this.fieldTransforms=r,this.type=0}getFieldMask(){return null}}class Cr extends br{constructor(e,t,n,r,i=[]){super(),this.key=e,this.data=t,this.fieldMask=n,this.precondition=r,this.fieldTransforms=i,this.type=1}getFieldMask(){return this.fieldMask}}function Dr(e){const t=new Map;return e.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const r=e.data.field(n);t.set(n,r)}})),t}function Ar(e,t,n){const r=new Map;w(e.length===n.length);for(let i=0;i<n.length;i++){const s=e[i],o=s.transform,a=t.data.field(s.field);r.set(s.field,or(o,a,n[i]))}return r}function Nr(e,t,n){const r=new Map;for(const i of e){const e=i.transform,s=n.data.field(i.field);r.set(i.field,sr(e,s,t))}return r}class kr extends br{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=2,this.fieldTransforms=[]}getFieldMask(){return null}}class Or extends br{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=3,this.fieldTransforms=[]}getFieldMask(){return null}}class Lr{constructor(e,t,n,r){this.batchId=e,this.localWriteTime=t,this.baseMutations=n,this.mutations=r}applyToRemoteDocument(e,t){const n=t.mutationResults;for(let t=0;t<this.mutations.length;t++){const r=this.mutations[t];r.key.isEqual(e.key)&&Ir(r,e,n[t])}}applyToLocalView(e,t){for(const n of this.baseMutations)n.key.isEqual(e.key)&&(t=Er(n,e,t,this.localWriteTime));for(const n of this.mutations)n.key.isEqual(e.key)&&(t=Er(n,e,t,this.localWriteTime));return t}applyToLocalDocumentSet(e,t){const n=Hn();return this.mutations.forEach((r=>{const i=e.get(r.key),s=i.overlayedDocument;let o=this.applyToLocalView(s,i.mutatedFields);o=t.has(r.key)?null:o;const a=_r(s,o);null!==a&&n.set(r.key,a),s.isValidDocument()||s.convertToNoDocument(V.min())})),n}keys(){return this.mutations.reduce(((e,t)=>e.add(t.key)),Xn())}isEqual(e){return this.batchId===e.batchId&&M(this.mutations,e.mutations,((e,t)=>Tr(e,t)))&&M(this.baseMutations,e.baseMutations,((e,t)=>Tr(e,t)))}}class Pr{constructor(e,t,n,r){this.batch=e,this.commitVersion=t,this.mutationResults=n,this.docVersions=r}static from(e,t,n){w(e.mutations.length===n.length);let r=Jn;const i=e.mutations;for(let e=0;e<i.length;e++)r=r.insert(i[e].key,n[e].version);return new Pr(e,t,n,r)}}class Mr{constructor(e,t){this.largestBatchId=e,this.mutation=t}getKey(){return this.mutation.key}isEqual(e){return null!==e&&this.mutation===e.mutation}toString(){return`Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`}}class Rr{constructor(e,t,n){this.alias=e,this.aggregateType=t,this.fieldPath=n}}class Fr{constructor(e,t){this.count=e,this.unchangedNames=t}}var Vr,Br;function Ur(e){switch(e){default:return v();case _.CANCELLED:case _.UNKNOWN:case _.DEADLINE_EXCEEDED:case _.RESOURCE_EXHAUSTED:case _.INTERNAL:case _.UNAVAILABLE:case _.UNAUTHENTICATED:return!1;case _.INVALID_ARGUMENT:case _.NOT_FOUND:case _.ALREADY_EXISTS:case _.PERMISSION_DENIED:case _.FAILED_PRECONDITION:case _.ABORTED:case _.OUT_OF_RANGE:case _.UNIMPLEMENTED:case _.DATA_LOSS:return!0}}function qr(e){if(void 0===e)return g("GRPC error has no .code"),_.UNKNOWN;switch(e){case Vr.OK:return _.OK;case Vr.CANCELLED:return _.CANCELLED;case Vr.UNKNOWN:return _.UNKNOWN;case Vr.DEADLINE_EXCEEDED:return _.DEADLINE_EXCEEDED;case Vr.RESOURCE_EXHAUSTED:return _.RESOURCE_EXHAUSTED;case Vr.INTERNAL:return _.INTERNAL;case Vr.UNAVAILABLE:return _.UNAVAILABLE;case Vr.UNAUTHENTICATED:return _.UNAUTHENTICATED;case Vr.INVALID_ARGUMENT:return _.INVALID_ARGUMENT;case Vr.NOT_FOUND:return _.NOT_FOUND;case Vr.ALREADY_EXISTS:return _.ALREADY_EXISTS;case Vr.PERMISSION_DENIED:return _.PERMISSION_DENIED;case Vr.FAILED_PRECONDITION:return _.FAILED_PRECONDITION;case Vr.ABORTED:return _.ABORTED;case Vr.OUT_OF_RANGE:return _.OUT_OF_RANGE;case Vr.UNIMPLEMENTED:return _.UNIMPLEMENTED;case Vr.DATA_LOSS:return _.DATA_LOSS;default:return v()}}(Br=Vr||(Vr={}))[Br.OK=0]="OK",Br[Br.CANCELLED=1]="CANCELLED",Br[Br.UNKNOWN=2]="UNKNOWN",Br[Br.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",Br[Br.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",Br[Br.NOT_FOUND=5]="NOT_FOUND",Br[Br.ALREADY_EXISTS=6]="ALREADY_EXISTS",Br[Br.PERMISSION_DENIED=7]="PERMISSION_DENIED",Br[Br.UNAUTHENTICATED=16]="UNAUTHENTICATED",Br[Br.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",Br[Br.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",Br[Br.ABORTED=10]="ABORTED",Br[Br.OUT_OF_RANGE=11]="OUT_OF_RANGE",Br[Br.UNIMPLEMENTED=12]="UNIMPLEMENTED",Br[Br.INTERNAL=13]="INTERNAL",Br[Br.UNAVAILABLE=14]="UNAVAILABLE",Br[Br.DATA_LOSS=15]="DATA_LOSS";let jr=null;function zr(){return new TextEncoder}const Gr=new a.Integer([4294967295,4294967295],0);function Kr(e){const t=zr().encode(e),n=new a.Md5;return n.update(t),new Uint8Array(n.digest())}function $r(e){const t=new DataView(e.buffer),n=t.getUint32(0,!0),r=t.getUint32(4,!0),i=t.getUint32(8,!0),s=t.getUint32(12,!0);return[new a.Integer([n,r],0),new a.Integer([i,s],0)]}class Qr{constructor(e,t,n){if(this.bitmap=e,this.padding=t,this.hashCount=n,t<0||t>=8)throw new Hr(`Invalid padding: ${t}`);if(n<0)throw new Hr(`Invalid hash count: ${n}`);if(e.length>0&&0===this.hashCount)throw new Hr(`Invalid hash count: ${n}`);if(0===e.length&&0!==t)throw new Hr(`Invalid padding when bitmap length is 0: ${t}`);this.Ie=8*e.length-t,this.Te=a.Integer.fromNumber(this.Ie)}Ee(e,t,n){let r=e.add(t.multiply(a.Integer.fromNumber(n)));return 1===r.compare(Gr)&&(r=new a.Integer([r.getBits(0),r.getBits(1)],0)),r.modulo(this.Te).toNumber()}de(e){return!!(this.bitmap[Math.floor(e/8)]&1<<e%8)}mightContain(e){if(0===this.Ie)return!1;const t=Kr(e),[n,r]=$r(t);for(let e=0;e<this.hashCount;e++){const t=this.Ee(n,r,e);if(!this.de(t))return!1}return!0}static create(e,t,n){const r=e%8==0?0:8-e%8,i=new Uint8Array(Math.ceil(e/8)),s=new Qr(i,r,t);return n.forEach((e=>s.insert(e))),s}insert(e){if(0===this.Ie)return;const t=Kr(e),[n,r]=$r(t);for(let e=0;e<this.hashCount;e++){const t=this.Ee(n,r,e);this.Ae(t)}}Ae(e){const t=Math.floor(e/8),n=e%8;this.bitmap[t]|=1<<n}}class Hr extends Error{constructor(){super(...arguments),this.name="BloomFilterError"}}class Wr{constructor(e,t,n,r,i){this.snapshotVersion=e,this.targetChanges=t,this.targetMismatches=n,this.documentUpdates=r,this.resolvedLimboDocuments=i}static createSynthesizedRemoteEventForCurrentChange(e,t,n){const r=new Map;return r.set(e,Jr.createSynthesizedTargetChangeForCurrentChange(e,t,n)),new Wr(V.min(),r,new tt(P),zn(),Xn())}}class Jr{constructor(e,t,n,r,i){this.resumeToken=e,this.current=t,this.addedDocuments=n,this.modifiedDocuments=r,this.removedDocuments=i}static createSynthesizedTargetChangeForCurrentChange(e,t,n){return new Jr(n,t,Xn(),Xn(),Xn())}}class Yr{constructor(e,t,n,r){this.Re=e,this.removedTargetIds=t,this.key=n,this.Ve=r}}class Xr{constructor(e,t){this.targetId=e,this.me=t}}class Zr{constructor(e,t,n=ut.EMPTY_BYTE_STRING,r=null){this.state=e,this.targetIds=t,this.resumeToken=n,this.cause=r}}class ei{constructor(){this.fe=0,this.ge=ri(),this.pe=ut.EMPTY_BYTE_STRING,this.ye=!1,this.we=!0}get current(){return this.ye}get resumeToken(){return this.pe}get Se(){return 0!==this.fe}get be(){return this.we}De(e){e.approximateByteSize()>0&&(this.we=!0,this.pe=e)}Ce(){let e=Xn(),t=Xn(),n=Xn();return this.ge.forEach(((r,i)=>{switch(i){case 0:e=e.add(r);break;case 2:t=t.add(r);break;case 1:n=n.add(r);break;default:v()}})),new Jr(this.pe,this.ye,e,t,n)}ve(){this.we=!1,this.ge=ri()}Fe(e,t){this.we=!0,this.ge=this.ge.insert(e,t)}Me(e){this.we=!0,this.ge=this.ge.remove(e)}xe(){this.fe+=1}Oe(){this.fe-=1,w(this.fe>=0)}Ne(){this.we=!0,this.ye=!0}}class ti{constructor(e){this.Le=e,this.Be=new Map,this.ke=zn(),this.qe=ni(),this.Qe=new tt(P)}Ke(e){for(const t of e.Re)e.Ve&&e.Ve.isFoundDocument()?this.$e(t,e.Ve):this.Ue(t,e.key,e.Ve);for(const t of e.removedTargetIds)this.Ue(t,e.key,e.Ve)}We(e){this.forEachTarget(e,(t=>{const n=this.Ge(t);switch(e.state){case 0:this.ze(t)&&n.De(e.resumeToken);break;case 1:n.Oe(),n.Se||n.ve(),n.De(e.resumeToken);break;case 2:n.Oe(),n.Se||this.removeTarget(t);break;case 3:this.ze(t)&&(n.Ne(),n.De(e.resumeToken));break;case 4:this.ze(t)&&(this.je(t),n.De(e.resumeToken));break;default:v()}}))}forEachTarget(e,t){e.targetIds.length>0?e.targetIds.forEach(t):this.Be.forEach(((e,n)=>{this.ze(n)&&t(n)}))}He(e){const t=e.targetId,n=e.me.count,r=this.Je(t);if(r){const i=r.target;if(wn(i))if(0===n){const e=new z(i.path);this.Ue(t,e,zt.newNoDocument(e,V.min()))}else w(1===n);else{const r=this.Ye(t);if(r!==n){const n=this.Ze(e),i=n?this.Xe(n,e,r):1;if(0!==i){this.je(t);const e=2===i?"TargetPurposeExistenceFilterMismatchBloom":"TargetPurposeExistenceFilterMismatch";this.Qe=this.Qe.insert(t,e)}null==jr||jr.et(function(e,t,n,r,i){var s,o,a,c,u,l;const h={localCacheCount:e,existenceFilterCount:t.count,databaseId:n.database,projectId:n.projectId},d=t.unchangedNames;return d&&(h.bloomFilter={applied:0===i,hashCount:null!==(s=null==d?void 0:d.hashCount)&&void 0!==s?s:0,bitmapLength:null!==(c=null===(a=null===(o=null==d?void 0:d.bits)||void 0===o?void 0:o.bitmap)||void 0===a?void 0:a.length)&&void 0!==c?c:0,padding:null!==(l=null===(u=null==d?void 0:d.bits)||void 0===u?void 0:u.padding)&&void 0!==l?l:0,mightContain:e=>{var t;return null!==(t=null==r?void 0:r.mightContain(e))&&void 0!==t&&t}}),h}(r,e.me,this.Le.tt(),n,i))}}}}Ze(e){const t=e.me.unchangedNames;if(!t||!t.bits)return null;const{bits:{bitmap:n="",padding:r=0},hashCount:i=0}=t;let s,o;try{s=ft(n).toUint8Array()}catch(e){if(e instanceof ct)return m("Decoding the base64 bloom filter in existence filter failed ("+e.message+"); ignoring the bloom filter and falling back to full re-query."),null;throw e}try{o=new Qr(s,r,i)}catch(e){return m(e instanceof Hr?"BloomFilter error: ":"Applying bloom filter failed: ",e),null}return 0===o.Ie?null:o}Xe(e,t,n){return t.me.count===n-this.nt(e,t.targetId)?0:2}nt(e,t){const n=this.Le.getRemoteKeysForTarget(t);let r=0;return n.forEach((n=>{const i=this.Le.tt(),s=`projects/${i.projectId}/databases/${i.database}/documents/${n.path.canonicalString()}`;e.mightContain(s)||(this.Ue(t,n,null),r++)})),r}rt(e){const t=new Map;this.Be.forEach(((n,r)=>{const i=this.Je(r);if(i){if(n.current&&wn(i.target)){const t=new z(i.target.path);null!==this.ke.get(t)||this.it(r,t)||this.Ue(r,t,zt.newNoDocument(t,e))}n.be&&(t.set(r,n.Ce()),n.ve())}}));let n=Xn();this.qe.forEach(((e,t)=>{let r=!0;t.forEachWhile((e=>{const t=this.Je(e);return!t||"TargetPurposeLimboResolution"===t.purpose||(r=!1,!1)})),r&&(n=n.add(e))})),this.ke.forEach(((t,n)=>n.setReadTime(e)));const r=new Wr(e,t,this.Qe,this.ke,n);return this.ke=zn(),this.qe=ni(),this.Qe=new tt(P),r}$e(e,t){if(!this.ze(e))return;const n=this.it(e,t.key)?2:0;this.Ge(e).Fe(t.key,n),this.ke=this.ke.insert(t.key,t),this.qe=this.qe.insert(t.key,this.st(t.key).add(e))}Ue(e,t,n){if(!this.ze(e))return;const r=this.Ge(e);this.it(e,t)?r.Fe(t,1):r.Me(t),this.qe=this.qe.insert(t,this.st(t).delete(e)),n&&(this.ke=this.ke.insert(t,n))}removeTarget(e){this.Be.delete(e)}Ye(e){const t=this.Ge(e).Ce();return this.Le.getRemoteKeysForTarget(e).size+t.addedDocuments.size-t.removedDocuments.size}xe(e){this.Ge(e).xe()}Ge(e){let t=this.Be.get(e);return t||(t=new ei,this.Be.set(e,t)),t}st(e){let t=this.qe.get(e);return t||(t=new it(P),this.qe=this.qe.insert(e,t)),t}ze(e){const t=null!==this.Je(e);return t||p("WatchChangeAggregator","Detected inactive target",e),t}Je(e){const t=this.Be.get(e);return t&&t.Se?null:this.Le.ot(e)}je(e){this.Be.set(e,new ei),this.Le.getRemoteKeysForTarget(e).forEach((t=>{this.Ue(e,t,null)}))}it(e,t){return this.Le.getRemoteKeysForTarget(e).has(t)}}function ni(){return new tt(z.comparator)}function ri(){return new tt(z.comparator)}const ii={asc:"ASCENDING",desc:"DESCENDING"},si={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"},oi={and:"AND",or:"OR"};class ai{constructor(e,t){this.databaseId=e,this.useProto3Json=t}}function ci(e,t){return e.useProto3Json||ve(t)?t:{value:t}}function ui(e,t){return e.useProto3Json?`${new Date(1e3*t.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+t.nanoseconds).slice(-9)}Z`:{seconds:""+t.seconds,nanos:t.nanoseconds}}function li(e,t){return e.useProto3Json?t.toBase64():t.toUint8Array()}function hi(e,t){return ui(e,t.toTimestamp())}function di(e){return w(!!e),V.fromTimestamp(function(e){const t=ht(e);return new F(t.seconds,t.nanos)}(e))}function fi(e,t){return pi(e,t).canonicalString()}function pi(e,t){const n=function(e){return new U(["projects",e.projectId,"databases",e.database])}(e).child("documents");return void 0===t?n:n.child(t)}function gi(e){const t=U.fromString(e);return w(Vi(t)),t}function mi(e,t){return fi(e.databaseId,t.path)}function yi(e,t){const n=gi(t);if(n.get(1)!==e.databaseId.projectId)throw new I(_.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+e.databaseId.projectId);if(n.get(3)!==e.databaseId.database)throw new I(_.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+e.databaseId.database);return new z(_i(n))}function vi(e,t){return fi(e.databaseId,t)}function wi(e){const t=gi(e);return 4===t.length?U.emptyPath():_i(t)}function bi(e){return new U(["projects",e.databaseId.projectId,"databases",e.databaseId.database]).canonicalString()}function _i(e){return w(e.length>4&&"documents"===e.get(4)),e.popFirst(5)}function Ii(e,t,n){return{name:mi(e,t),fields:n.value.mapValue.fields}}function Ei(e,t,n){const r=yi(e,t.name),i=di(t.updateTime),s=t.createTime?di(t.createTime):V.min(),o=new qt({mapValue:{fields:t.fields}}),a=zt.newFoundDocument(r,i,s,o);return n&&a.setHasCommittedMutations(),n?a.setHasCommittedMutations():a}function Si(e,t){let n;if(t instanceof xr)n={update:Ii(e,t.key,t.value)};else if(t instanceof kr)n={delete:mi(e,t.key)};else if(t instanceof Cr)n={update:Ii(e,t.key,t.data),updateMask:Fi(t.fieldMask)};else{if(!(t instanceof Or))return v();n={verify:mi(e,t.key)}}return t.fieldTransforms.length>0&&(n.updateTransforms=t.fieldTransforms.map((e=>function(e,t){const n=t.transform;if(n instanceof cr)return{fieldPath:t.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof ur)return{fieldPath:t.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof hr)return{fieldPath:t.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof fr)return{fieldPath:t.field.canonicalString(),increment:n.Pe};throw v()}(0,e)))),t.precondition.isNone||(n.currentDocument=function(e,t){return void 0!==t.updateTime?{updateTime:hi(e,t.updateTime)}:void 0!==t.exists?{exists:t.exists}:v()}(e,t.precondition)),n}function Ti(e,t){const n=t.currentDocument?function(e){return void 0!==e.updateTime?vr.updateTime(di(e.updateTime)):void 0!==e.exists?vr.exists(e.exists):vr.none()}(t.currentDocument):vr.none(),r=t.updateTransforms?t.updateTransforms.map((t=>function(e,t){let n=null;if("setToServerValue"in t)w("REQUEST_TIME"===t.setToServerValue),n=new cr;else if("appendMissingElements"in t){const e=t.appendMissingElements.values||[];n=new ur(e)}else if("removeAllFromArray"in t){const e=t.removeAllFromArray.values||[];n=new hr(e)}else"increment"in t?n=new fr(e,t.increment):v();const r=j.fromServerFormat(t.fieldPath);return new mr(r,n)}(e,t))):[];if(t.update){t.update.name;const i=yi(e,t.update.name),s=new qt({mapValue:{fields:t.update.fields}});if(t.updateMask){const e=function(e){const t=e.fieldPaths||[];return new at(t.map((e=>j.fromServerFormat(e))))}(t.updateMask);return new Cr(i,s,e,n,r)}return new xr(i,s,n,r)}if(t.delete){const r=yi(e,t.delete);return new kr(r,n)}if(t.verify){const r=yi(e,t.verify);return new Or(r,n)}return v()}function xi(e,t){return{documents:[vi(e,t.path)]}}function Ci(e,t){const n={structuredQuery:{}},r=t.path;let i;null!==t.collectionGroup?(i=r,n.structuredQuery.from=[{collectionId:t.collectionGroup,allDescendants:!0}]):(i=r.popLast(),n.structuredQuery.from=[{collectionId:r.lastSegment()}]),n.parent=vi(e,i);const s=function(e){if(0!==e.length)return Ri(Yt.create(e,"and"))}(t.filters);s&&(n.structuredQuery.where=s);const o=function(e){if(0!==e.length)return e.map((e=>function(e){return{field:Pi(e.field),direction:ki(e.dir)}}(e)))}(t.orderBy);o&&(n.structuredQuery.orderBy=o);const a=ci(e,t.limit);return null!==a&&(n.structuredQuery.limit=a),t.startAt&&(n.structuredQuery.startAt=function(e){return{before:e.inclusive,values:e.position}}(t.startAt)),t.endAt&&(n.structuredQuery.endAt=function(e){return{before:!e.inclusive,values:e.position}}(t.endAt)),{_t:n,parent:i}}function Di(e,t,n,r){const{_t:i,parent:s}=Ci(e,t),o={},a=[];let c=0;return n.forEach((e=>{const t=r?e.alias:"aggregate_"+c++;o[t]=e.alias,"count"===e.aggregateType?a.push({alias:t,count:{}}):"avg"===e.aggregateType?a.push({alias:t,avg:{field:Pi(e.fieldPath)}}):"sum"===e.aggregateType&&a.push({alias:t,sum:{field:Pi(e.fieldPath)}})})),{request:{structuredAggregationQuery:{aggregations:a,structuredQuery:i.structuredQuery},parent:i.parent},ut:o,parent:s}}function Ai(e){let t=wi(e.parent);const n=e.structuredQuery,r=n.from?n.from.length:0;let i=null;if(r>0){w(1===r);const e=n.from[0];e.allDescendants?i=e.collectionId:t=t.child(e.collectionId)}let s=[];n.where&&(s=function(e){const t=Ni(e);return t instanceof Yt&&en(t)?t.getFilters():[t]}(n.where));let o=[];n.orderBy&&(o=function(e){return e.map((e=>function(e){return new Qt(Mi(e.field),function(e){switch(e){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(e.direction))}(e)))}(n.orderBy));let a=null;n.limit&&(a=function(e){let t;return t="object"==typeof e?e.value:e,ve(t)?null:t}(n.limit));let c=null;n.startAt&&(c=function(e){const t=!!e.before,n=e.values||[];return new Gt(n,t)}(n.startAt));let u=null;return n.endAt&&(u=function(e){const t=!e.before,n=e.values||[];return new Gt(n,t)}(n.endAt)),Sn(t,i,o,s,a,"F",c,u)}function Ni(e){return void 0!==e.unaryFilter?function(e){switch(e.unaryFilter.op){case"IS_NAN":const t=Mi(e.unaryFilter.field);return Jt.create(t,"==",{doubleValue:NaN});case"IS_NULL":const n=Mi(e.unaryFilter.field);return Jt.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const r=Mi(e.unaryFilter.field);return Jt.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const i=Mi(e.unaryFilter.field);return Jt.create(i,"!=",{nullValue:"NULL_VALUE"});default:return v()}}(e):void 0!==e.fieldFilter?function(e){return Jt.create(Mi(e.fieldFilter.field),function(e){switch(e){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return v()}}(e.fieldFilter.op),e.fieldFilter.value)}(e):void 0!==e.compositeFilter?function(e){return Yt.create(e.compositeFilter.filters.map((e=>Ni(e))),function(e){switch(e){case"AND":return"and";case"OR":return"or";default:return v()}}(e.compositeFilter.op))}(e):v()}function ki(e){return ii[e]}function Oi(e){return si[e]}function Li(e){return oi[e]}function Pi(e){return{fieldPath:e.canonicalString()}}function Mi(e){return j.fromServerFormat(e.fieldPath)}function Ri(e){return e instanceof Jt?function(e){if("=="===e.op){if(Lt(e.value))return{unaryFilter:{field:Pi(e.field),op:"IS_NAN"}};if(Ot(e.value))return{unaryFilter:{field:Pi(e.field),op:"IS_NULL"}}}else if("!="===e.op){if(Lt(e.value))return{unaryFilter:{field:Pi(e.field),op:"IS_NOT_NAN"}};if(Ot(e.value))return{unaryFilter:{field:Pi(e.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Pi(e.field),op:Oi(e.op),value:e.value}}}(e):e instanceof Yt?function(e){const t=e.getFilters().map((e=>Ri(e)));return 1===t.length?t[0]:{compositeFilter:{op:Li(e.op),filters:t}}}(e):v()}function Fi(e){const t=[];return e.fields.forEach((e=>t.push(e.canonicalString()))),{fieldPaths:t}}function Vi(e){return e.length>=4&&"projects"===e.get(0)&&"databases"===e.get(2)}class Bi{constructor(e,t,n,r,i=V.min(),s=V.min(),o=ut.EMPTY_BYTE_STRING,a=null){this.target=e,this.targetId=t,this.purpose=n,this.sequenceNumber=r,this.snapshotVersion=i,this.lastLimboFreeSnapshotVersion=s,this.resumeToken=o,this.expectedCount=a}withSequenceNumber(e){return new Bi(this.target,this.targetId,this.purpose,e,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken,this.expectedCount)}withResumeToken(e,t){return new Bi(this.target,this.targetId,this.purpose,this.sequenceNumber,t,this.lastLimboFreeSnapshotVersion,e,null)}withExpectedCount(e){return new Bi(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken,e)}withLastLimboFreeSnapshotVersion(e){return new Bi(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,e,this.resumeToken,this.expectedCount)}}class Ui{constructor(e){this.ct=e}}function qi(e,t){const n=t.key,r={prefixPath:n.getCollectionPath().popLast().toArray(),collectionGroup:n.collectionGroup,documentId:n.path.lastSegment(),readTime:ji(t.readTime),hasCommittedMutations:t.hasCommittedMutations};if(t.isFoundDocument())r.document=function(e,t){return{name:mi(e,t.key),fields:t.data.value.mapValue.fields,updateTime:ui(e,t.version.toTimestamp()),createTime:ui(e,t.createTime.toTimestamp())}}(e.ct,t);else if(t.isNoDocument())r.noDocument={path:n.path.toArray(),readTime:zi(t.version)};else{if(!t.isUnknownDocument())return v();r.unknownDocument={path:n.path.toArray(),version:zi(t.version)}}return r}function ji(e){const t=e.toTimestamp();return[t.seconds,t.nanoseconds]}function zi(e){const t=e.toTimestamp();return{seconds:t.seconds,nanoseconds:t.nanoseconds}}function Gi(e){const t=new F(e.seconds,e.nanoseconds);return V.fromTimestamp(t)}function Ki(e,t){const n=(t.baseMutations||[]).map((t=>Ti(e.ct,t)));for(let e=0;e<t.mutations.length-1;++e){const n=t.mutations[e];if(e+1<t.mutations.length&&void 0!==t.mutations[e+1].transform){const r=t.mutations[e+1];n.updateTransforms=r.transform.fieldTransforms,t.mutations.splice(e+1,1),++e}}const r=t.mutations.map((t=>Ti(e.ct,t))),i=F.fromMillis(t.localWriteTimeMs);return new Lr(t.batchId,i,n,r)}function $i(e){const t=Gi(e.readTime),n=void 0!==e.lastLimboFreeSnapshotVersion?Gi(e.lastLimboFreeSnapshotVersion):V.min();let r;return r=function(e){return void 0!==e.documents}(e.query)?function(e){return w(1===e.documents.length),An(Tn(wi(e.documents[0])))}(e.query):function(e){return An(Ai(e))}(e.query),new Bi(r,e.targetId,"TargetPurposeListen",e.lastListenSequenceNumber,t,n,ut.fromBase64String(e.resumeToken))}function Qi(e,t){const n=zi(t.snapshotVersion),r=zi(t.lastLimboFreeSnapshotVersion);let i;i=wn(t.target)?xi(e.ct,t.target):Ci(e.ct,t.target)._t;const s=t.resumeToken.toBase64();return{targetId:t.targetId,canonicalId:yn(t.target),readTime:n,resumeToken:s,lastListenSequenceNumber:t.sequenceNumber,lastLimboFreeSnapshotVersion:r,query:i}}function Hi(e){const t=Ai({parent:e.parent,structuredQuery:e.structuredQuery});return"LAST"===e.limitType?Ln(t,t.limit,"L"):t}function Wi(e,t){return new Mr(t.largestBatchId,Ti(e.ct,t.overlayMutation))}function Ji(e,t){const n=t.path.lastSegment();return[e,_e(t.path.popLast()),n]}function Yi(e,t,n,r){return{indexId:e,uid:t,sequenceNumber:n,readTime:zi(r.readTime),documentKey:_e(r.documentKey.path),largestBatchId:r.largestBatchId}}class Xi{getBundleMetadata(e,t){return Zi(e).get(t).next((e=>{if(e)return function(e){return{id:e.bundleId,createTime:Gi(e.createTime),version:e.version}}(e)}))}saveBundleMetadata(e,t){return Zi(e).put(function(e){return{bundleId:e.id,createTime:zi(di(e.createTime)),version:e.version}}(t))}getNamedQuery(e,t){return es(e).get(t).next((e=>{if(e)return function(e){return{name:e.name,query:Hi(e.bundledQuery),readTime:Gi(e.readTime)}}(e)}))}saveNamedQuery(e,t){return es(e).put(function(e){return{name:e.name,readTime:zi(di(e.readTime)),bundledQuery:e.bundledQuery}}(t))}}function Zi(e){return Je(e,"bundles")}function es(e){return Je(e,"namedQueries")}class ts{constructor(e,t){this.serializer=e,this.userId=t}static lt(e,t){const n=t.uid||"";return new ts(e,n)}getOverlay(e,t){return ns(e).get(Ji(this.userId,t)).next((e=>e?Wi(this.serializer,e):null))}getOverlays(e,t){const n=Qn();return ie.forEach(t,(t=>this.getOverlay(e,t).next((e=>{null!==e&&n.set(t,e)})))).next((()=>n))}saveOverlays(e,t,n){const r=[];return n.forEach(((n,i)=>{const s=new Mr(t,i);r.push(this.ht(e,s))})),ie.waitFor(r)}removeOverlaysForBatchId(e,t,n){const r=new Set;t.forEach((e=>r.add(_e(e.getCollectionPath()))));const i=[];return r.forEach((t=>{const r=IDBKeyRange.bound([this.userId,t,n],[this.userId,t,n+1],!1,!0);i.push(ns(e).j("collectionPathOverlayIndex",r))})),ie.waitFor(i)}getOverlaysForCollection(e,t,n){const r=Qn(),i=_e(t),s=IDBKeyRange.bound([this.userId,i,n],[this.userId,i,Number.POSITIVE_INFINITY],!0);return ns(e).U("collectionPathOverlayIndex",s).next((e=>{for(const t of e){const e=Wi(this.serializer,t);r.set(e.getKey(),e)}return r}))}getOverlaysForCollectionGroup(e,t,n,r){const i=Qn();let s;const o=IDBKeyRange.bound([this.userId,t,n],[this.userId,t,Number.POSITIVE_INFINITY],!0);return ns(e).J({index:"collectionGroupOverlayIndex",range:o},((e,t,n)=>{const o=Wi(this.serializer,t);i.size()<r||o.largestBatchId===s?(i.set(o.getKey(),o),s=o.largestBatchId):n.done()})).next((()=>i))}ht(e,t){return ns(e).put(function(e,t,n){const[r,i,s]=Ji(t,n.mutation.key);return{userId:t,collectionPath:i,documentId:s,collectionGroup:n.mutation.key.getCollectionGroup(),largestBatchId:n.largestBatchId,overlayMutation:Si(e.ct,n.mutation)}}(this.serializer,this.userId,t))}}function ns(e){return Je(e,"documentOverlays")}class rs{constructor(){}Pt(e,t){this.It(e,t),t.Tt()}It(e,t){if("nullValue"in e)this.Et(t,5);else if("booleanValue"in e)this.Et(t,10),t.dt(e.booleanValue?1:0);else if("integerValue"in e)this.Et(t,15),t.dt(dt(e.integerValue));else if("doubleValue"in e){const n=dt(e.doubleValue);isNaN(n)?this.Et(t,13):(this.Et(t,15),we(n)?t.dt(0):t.dt(n))}else if("timestampValue"in e){let n=e.timestampValue;this.Et(t,20),"string"==typeof n&&(n=ht(n)),t.At(`${n.seconds||""}`),t.dt(n.nanos||0)}else if("stringValue"in e)this.Rt(e.stringValue,t),this.Vt(t);else if("bytesValue"in e)this.Et(t,30),t.ft(ft(e.bytesValue)),this.Vt(t);else if("referenceValue"in e)this.gt(e.referenceValue,t);else if("geoPointValue"in e){const n=e.geoPointValue;this.Et(t,45),t.dt(n.latitude||0),t.dt(n.longitude||0)}else"mapValue"in e?Rt(e)?this.Et(t,Number.MAX_SAFE_INTEGER):(this.yt(e.mapValue,t),this.Vt(t)):"arrayValue"in e?(this.wt(e.arrayValue,t),this.Vt(t)):v()}Rt(e,t){this.Et(t,25),this.St(e,t)}St(e,t){t.At(e)}yt(e,t){const n=e.fields||{};this.Et(t,55);for(const e of Object.keys(n))this.Rt(e,t),this.It(n[e],t)}wt(e,t){const n=e.values||[];this.Et(t,50);for(const e of n)this.It(e,t)}gt(e,t){this.Et(t,37),z.fromName(e).path.forEach((e=>{this.Et(t,60),this.St(e,t)}))}Et(e,t){e.dt(t)}Vt(e){e.dt(2)}}function is(e){if(0===e)return 8;let t=0;return!(e>>4)&&(t+=4,e<<=4),!(e>>6)&&(t+=2,e<<=2),!(e>>7)&&(t+=1),t}function ss(e){const t=64-function(e){let t=0;for(let n=0;n<8;++n){const r=is(255&e[n]);if(t+=r,8!==r)break}return t}(e);return Math.ceil(t/8)}rs.bt=new rs;class os{constructor(){this.buffer=new Uint8Array(1024),this.position=0}Dt(e){const t=e[Symbol.iterator]();let n=t.next();for(;!n.done;)this.Ct(n.value),n=t.next();this.vt()}Ft(e){const t=e[Symbol.iterator]();let n=t.next();for(;!n.done;)this.Mt(n.value),n=t.next();this.xt()}Ot(e){for(const t of e){const e=t.charCodeAt(0);if(e<128)this.Ct(e);else if(e<2048)this.Ct(960|e>>>6),this.Ct(128|63&e);else if(t<"\ud800"||"\udbff"<t)this.Ct(480|e>>>12),this.Ct(128|63&e>>>6),this.Ct(128|63&e);else{const e=t.codePointAt(0);this.Ct(240|e>>>18),this.Ct(128|63&e>>>12),this.Ct(128|63&e>>>6),this.Ct(128|63&e)}}this.vt()}Nt(e){for(const t of e){const e=t.charCodeAt(0);if(e<128)this.Mt(e);else if(e<2048)this.Mt(960|e>>>6),this.Mt(128|63&e);else if(t<"\ud800"||"\udbff"<t)this.Mt(480|e>>>12),this.Mt(128|63&e>>>6),this.Mt(128|63&e);else{const e=t.codePointAt(0);this.Mt(240|e>>>18),this.Mt(128|63&e>>>12),this.Mt(128|63&e>>>6),this.Mt(128|63&e)}}this.xt()}Lt(e){const t=this.Bt(e),n=ss(t);this.kt(1+n),this.buffer[this.position++]=255&n;for(let e=t.length-n;e<t.length;++e)this.buffer[this.position++]=255&t[e]}qt(e){const t=this.Bt(e),n=ss(t);this.kt(1+n),this.buffer[this.position++]=~(255&n);for(let e=t.length-n;e<t.length;++e)this.buffer[this.position++]=~(255&t[e])}Qt(){this.Kt(255),this.Kt(255)}$t(){this.Ut(255),this.Ut(255)}reset(){this.position=0}seed(e){this.kt(e.length),this.buffer.set(e,this.position),this.position+=e.length}Wt(){return this.buffer.slice(0,this.position)}Bt(e){const t=function(e){const t=new DataView(new ArrayBuffer(8));return t.setFloat64(0,e,!1),new Uint8Array(t.buffer)}(e),n=!!(128&t[0]);t[0]^=n?255:128;for(let e=1;e<t.length;++e)t[e]^=n?255:0;return t}Ct(e){const t=255&e;0===t?(this.Kt(0),this.Kt(255)):255===t?(this.Kt(255),this.Kt(0)):this.Kt(t)}Mt(e){const t=255&e;0===t?(this.Ut(0),this.Ut(255)):255===t?(this.Ut(255),this.Ut(0)):this.Ut(e)}vt(){this.Kt(0),this.Kt(1)}xt(){this.Ut(0),this.Ut(1)}Kt(e){this.kt(1),this.buffer[this.position++]=e}Ut(e){this.kt(1),this.buffer[this.position++]=~e}kt(e){const t=e+this.position;if(t<=this.buffer.length)return;let n=2*this.buffer.length;n<t&&(n=t);const r=new Uint8Array(n);r.set(this.buffer),this.buffer=r}}class as{constructor(e){this.Gt=e}ft(e){this.Gt.Dt(e)}At(e){this.Gt.Ot(e)}dt(e){this.Gt.Lt(e)}Tt(){this.Gt.Qt()}}class cs{constructor(e){this.Gt=e}ft(e){this.Gt.Ft(e)}At(e){this.Gt.Nt(e)}dt(e){this.Gt.qt(e)}Tt(){this.Gt.$t()}}class us{constructor(){this.Gt=new os,this.zt=new as(this.Gt),this.jt=new cs(this.Gt)}seed(e){this.Gt.seed(e)}Ht(e){return 0===e?this.zt:this.jt}Wt(){return this.Gt.Wt()}reset(){this.Gt.reset()}}class ls{constructor(e,t,n,r){this.indexId=e,this.documentKey=t,this.arrayValue=n,this.directionalValue=r}Jt(){const e=this.directionalValue.length,t=0===e||255===this.directionalValue[e-1]?e+1:e,n=new Uint8Array(t);return n.set(this.directionalValue,0),t!==e?n.set([0],this.directionalValue.length):++n[n.length-1],new ls(this.indexId,this.documentKey,this.arrayValue,n)}}function hs(e,t){let n=e.indexId-t.indexId;return 0!==n?n:(n=ds(e.arrayValue,t.arrayValue),0!==n?n:(n=ds(e.directionalValue,t.directionalValue),0!==n?n:z.comparator(e.documentKey,t.documentKey)))}function ds(e,t){for(let n=0;n<e.length&&n<t.length;++n){const r=e[n]-t[n];if(0!==r)return r}return e.length-t.length}class fs{constructor(e){this.Yt=new it(((e,t)=>j.comparator(e.field,t.field))),this.collectionId=null!=e.collectionGroup?e.collectionGroup:e.path.lastSegment(),this.Zt=e.orderBy,this.Xt=[];for(const t of e.filters){const e=t;e.isInequality()?this.Yt=this.Yt.add(e):this.Xt.push(e)}}get en(){return this.Yt.size>1}tn(e){if(w(e.collectionGroup===this.collectionId),this.en)return!1;const t=K(e);if(void 0!==t&&!this.nn(t))return!1;const n=$(e);let r=new Set,i=0,s=0;for(;i<n.length&&this.nn(n[i]);++i)r=r.add(n[i].fieldPath.canonicalString());if(i===n.length)return!0;if(this.Yt.size>0){const e=this.Yt.getIterator().getNext();if(!r.has(e.field.canonicalString())){const t=n[i];if(!this.rn(e,t)||!this.sn(this.Zt[s++],t))return!1}++i}for(;i<n.length;++i){const e=n[i];if(s>=this.Zt.length||!this.sn(this.Zt[s++],e))return!1}return!0}on(){if(this.en)return null;let e=new it(j.comparator);const t=[];for(const n of this.Xt)if(!n.field.isKeyField())if("array-contains"===n.op||"array-contains-any"===n.op)t.push(new H(n.field,2));else{if(e.has(n.field))continue;e=e.add(n.field),t.push(new H(n.field,0))}for(const n of this.Zt)n.field.isKeyField()||e.has(n.field)||(e=e.add(n.field),t.push(new H(n.field,"asc"===n.dir?0:1)));return new G(G.UNKNOWN_ID,this.collectionId,t,J.empty())}nn(e){for(const t of this.Xt)if(this.rn(t,e))return!0;return!1}rn(e,t){if(void 0===e||!e.field.isEqual(t.fieldPath))return!1;const n="array-contains"===e.op||"array-contains-any"===e.op;return 2===t.kind===n}sn(e,t){return!!e.field.isEqual(t.fieldPath)&&(0===t.kind&&"asc"===e.dir||1===t.kind&&"desc"===e.dir)}}function ps(e){var t,n;if(w(e instanceof Jt||e instanceof Yt),e instanceof Jt){if(e instanceof dn){const r=(null===(n=null===(t=e.value.arrayValue)||void 0===t?void 0:t.values)||void 0===n?void 0:n.map((t=>Jt.create(e.field,"==",t))))||[];return Yt.create(r,"or")}return e}const r=e.filters.map((e=>ps(e)));return Yt.create(r,e.op)}function gs(e){if(0===e.getFilters().length)return[];const t=ws(ps(e));return w(vs(t)),ms(t)||ys(t)?[t]:t.getFilters()}function ms(e){return e instanceof Jt}function ys(e){return e instanceof Yt&&en(e)}function vs(e){return ms(e)||ys(e)||function(e){if(e instanceof Yt&&Zt(e)){for(const t of e.getFilters())if(!ms(t)&&!ys(t))return!1;return!0}return!1}(e)}function ws(e){if(w(e instanceof Jt||e instanceof Yt),e instanceof Jt)return e;if(1===e.filters.length)return ws(e.filters[0]);const t=e.filters.map((e=>ws(e)));let n=Yt.create(t,e.op);return n=Is(n),vs(n)?n:(w(n instanceof Yt),w(Xt(n)),w(n.filters.length>1),n.filters.reduce(((e,t)=>bs(e,t))))}function bs(e,t){let n;return w(e instanceof Jt||e instanceof Yt),w(t instanceof Jt||t instanceof Yt),n=e instanceof Jt?t instanceof Jt?function(e,t){return Yt.create([e,t],"and")}(e,t):_s(e,t):t instanceof Jt?_s(t,e):function(e,t){if(w(e.filters.length>0&&t.filters.length>0),Xt(e)&&Xt(t))return sn(e,t.getFilters());const n=Zt(e)?e:t,r=Zt(e)?t:e,i=n.filters.map((e=>bs(e,r)));return Yt.create(i,"or")}(e,t),Is(n)}function _s(e,t){if(Xt(t))return sn(t,e.getFilters());{const n=t.filters.map((t=>bs(e,t)));return Yt.create(n,"or")}}function Is(e){if(w(e instanceof Jt||e instanceof Yt),e instanceof Jt)return e;const t=e.getFilters();if(1===t.length)return Is(t[0]);if(tn(e))return e;const n=t.map((e=>Is(e))),r=[];return n.forEach((t=>{t instanceof Jt?r.push(t):t instanceof Yt&&(t.op===e.op?r.push(...t.filters):r.push(t))})),1===r.length?r[0]:Yt.create(r,e.op)}class Es{constructor(){this._n=new Ss}addToCollectionParentIndex(e,t){return this._n.add(t),ie.resolve()}getCollectionParents(e,t){return ie.resolve(this._n.getEntries(t))}addFieldIndex(e,t){return ie.resolve()}deleteFieldIndex(e,t){return ie.resolve()}deleteAllFieldIndexes(e){return ie.resolve()}createTargetIndexes(e,t){return ie.resolve()}getDocumentsMatchingTarget(e,t){return ie.resolve(null)}getIndexType(e,t){return ie.resolve(0)}getFieldIndexes(e,t){return ie.resolve([])}getNextCollectionGroupToUpdate(e){return ie.resolve(null)}getMinOffset(e,t){return ie.resolve(Z.min())}getMinOffsetFromCollectionGroup(e,t){return ie.resolve(Z.min())}updateCollectionGroup(e,t,n){return ie.resolve()}updateIndexEntries(e,t){return ie.resolve()}}class Ss{constructor(){this.index={}}add(e){const t=e.lastSegment(),n=e.popLast(),r=this.index[t]||new it(U.comparator),i=!r.has(n);return this.index[t]=r.add(n),i}has(e){const t=e.lastSegment(),n=e.popLast(),r=this.index[t];return r&&r.has(n)}getEntries(e){return(this.index[e]||new it(U.comparator)).toArray()}}const Ts=new Uint8Array(0);class xs{constructor(e,t){this.databaseId=t,this.an=new Ss,this.un=new qn((e=>yn(e)),((e,t)=>vn(e,t))),this.uid=e.uid||""}addToCollectionParentIndex(e,t){if(!this.an.has(t)){const n=t.lastSegment(),r=t.popLast();e.addOnCommittedListener((()=>{this.an.add(t)}));const i={collectionId:n,parent:_e(r)};return Cs(e).put(i)}return ie.resolve()}getCollectionParents(e,t){const n=[],r=IDBKeyRange.bound([t,""],[R(t),""],!1,!0);return Cs(e).U(r).next((e=>{for(const r of e){if(r.collectionId!==t)break;n.push(Se(r.parent))}return n}))}addFieldIndex(e,t){const n=As(e),r=function(e){return{indexId:e.indexId,collectionGroup:e.collectionGroup,fields:e.fields.map((e=>[e.fieldPath.canonicalString(),e.kind]))}}(t);delete r.indexId;const i=n.add(r);if(t.indexState){const n=Ns(e);return i.next((e=>{n.put(Yi(e,this.uid,t.indexState.sequenceNumber,t.indexState.offset))}))}return i.next()}deleteFieldIndex(e,t){const n=As(e),r=Ns(e),i=Ds(e);return n.delete(t.indexId).next((()=>r.delete(IDBKeyRange.bound([t.indexId],[t.indexId+1],!1,!0)))).next((()=>i.delete(IDBKeyRange.bound([t.indexId],[t.indexId+1],!1,!0))))}deleteAllFieldIndexes(e){const t=As(e),n=Ds(e),r=Ns(e);return t.j().next((()=>n.j())).next((()=>r.j()))}createTargetIndexes(e,t){return ie.forEach(this.cn(t),(t=>this.getIndexType(e,t).next((n=>{if(0===n||1===n){const n=new fs(t).on();if(null!=n)return this.addFieldIndex(e,n)}}))))}getDocumentsMatchingTarget(e,t){const n=Ds(e);let r=!0;const i=new Map;return ie.forEach(this.cn(t),(t=>this.ln(e,t).next((e=>{r&&(r=!!e),i.set(t,e)})))).next((()=>{if(r){let e=Xn();const r=[];return ie.forEach(i,((i,s)=>{p("IndexedDbIndexManager",`Using index ${function(e){return`id=${e.indexId}|cg=${e.collectionGroup}|f=${e.fields.map((e=>`${e.fieldPath}:${e.kind}`)).join(",")}`}(i)} to execute ${yn(t)}`);const o=function(e,t){const n=K(t);if(void 0===n)return null;for(const t of bn(e,n.fieldPath))switch(t.op){case"array-contains-any":return t.value.arrayValue.values||[];case"array-contains":return[t.value]}return null}(s,i),a=function(e,t){const n=new Map;for(const r of $(t))for(const t of bn(e,r.fieldPath))switch(t.op){case"==":case"in":n.set(r.fieldPath.canonicalString(),t.value);break;case"not-in":case"!=":return n.set(r.fieldPath.canonicalString(),t.value),Array.from(n.values())}return null}(s,i),c=function(e,t){const n=[];let r=!0;for(const i of $(t)){const t=0===i.kind?_n(e,i.fieldPath,e.startAt):In(e,i.fieldPath,e.startAt);n.push(t.value),r&&(r=t.inclusive)}return new Gt(n,r)}(s,i),u=function(e,t){const n=[];let r=!0;for(const i of $(t)){const t=0===i.kind?In(e,i.fieldPath,e.endAt):_n(e,i.fieldPath,e.endAt);n.push(t.value),r&&(r=t.inclusive)}return new Gt(n,r)}(s,i),l=this.hn(i,s,c),h=this.hn(i,s,u),d=this.Pn(i,s,a),f=this.In(i.indexId,o,l,c.inclusive,h,u.inclusive,d);return ie.forEach(f,(i=>n.G(i,t.limit).next((t=>{t.forEach((t=>{const n=z.fromSegments(t.documentKey);e.has(n)||(e=e.add(n),r.push(n))}))}))))})).next((()=>r))}return ie.resolve(null)}))}cn(e){let t=this.un.get(e);return t||(t=0===e.filters.length?[e]:gs(Yt.create(e.filters,"and")).map((t=>mn(e.path,e.collectionGroup,e.orderBy,t.getFilters(),e.limit,e.startAt,e.endAt))),this.un.set(e,t),t)}In(e,t,n,r,i,s,o){const a=(null!=t?t.length:1)*Math.max(n.length,i.length),c=a/(null!=t?t.length:1),u=[];for(let l=0;l<a;++l){const a=t?this.Tn(t[l/c]):Ts,h=this.En(e,a,n[l%c],r),d=this.dn(e,a,i[l%c],s),f=o.map((t=>this.En(e,a,t,!0)));u.push(...this.createRange(h,d,f))}return u}En(e,t,n,r){const i=new ls(e,z.empty(),t,n);return r?i:i.Jt()}dn(e,t,n,r){const i=new ls(e,z.empty(),t,n);return r?i.Jt():i}ln(e,t){const n=new fs(t),r=null!=t.collectionGroup?t.collectionGroup:t.path.lastSegment();return this.getFieldIndexes(e,r).next((e=>{let t=null;for(const r of e)n.tn(r)&&(!t||r.fields.length>t.fields.length)&&(t=r);return t}))}getIndexType(e,t){let n=2;const r=this.cn(t);return ie.forEach(r,(t=>this.ln(e,t).next((e=>{e?0!==n&&e.fields.length<function(e){let t=new it(j.comparator),n=!1;for(const r of e.filters)for(const e of r.getFlattenedFilters())e.field.isKeyField()||("array-contains"===e.op||"array-contains-any"===e.op?n=!0:t=t.add(e.field));for(const n of e.orderBy)n.field.isKeyField()||(t=t.add(n.field));return t.size+(n?1:0)}(t)&&(n=1):n=0})))).next((()=>function(e){return null!==e.limit}(t)&&r.length>1&&2===n?1:n))}An(e,t){const n=new us;for(const r of $(e)){const e=t.data.field(r.fieldPath);if(null==e)return null;const i=n.Ht(r.kind);rs.bt.Pt(e,i)}return n.Wt()}Tn(e){const t=new us;return rs.bt.Pt(e,t.Ht(0)),t.Wt()}Rn(e,t){const n=new us;return rs.bt.Pt(At(this.databaseId,t),n.Ht(function(e){const t=$(e);return 0===t.length?0:t[t.length-1].kind}(e))),n.Wt()}Pn(e,t,n){if(null===n)return[];let r=[];r.push(new us);let i=0;for(const s of $(e)){const e=n[i++];for(const n of r)if(this.Vn(t,s.fieldPath)&&kt(e))r=this.mn(r,s,e);else{const t=n.Ht(s.kind);rs.bt.Pt(e,t)}}return this.fn(r)}hn(e,t,n){return this.Pn(e,t,n.position)}fn(e){const t=[];for(let n=0;n<e.length;++n)t[n]=e[n].Wt();return t}mn(e,t,n){const r=[...e],i=[];for(const e of n.arrayValue.values||[])for(const n of r){const r=new us;r.seed(n.Wt()),rs.bt.Pt(e,r.Ht(t.kind)),i.push(r)}return i}Vn(e,t){return!!e.filters.find((e=>e instanceof Jt&&e.field.isEqual(t)&&("in"===e.op||"not-in"===e.op)))}getFieldIndexes(e,t){const n=As(e),r=Ns(e);return(t?n.U("collectionGroupIndex",IDBKeyRange.bound(t,t)):n.U()).next((e=>{const t=[];return ie.forEach(e,(e=>r.get([e.indexId,this.uid]).next((n=>{t.push(function(e,t){const n=t?new J(t.sequenceNumber,new Z(Gi(t.readTime),new z(Se(t.documentKey)),t.largestBatchId)):J.empty(),r=e.fields.map((([e,t])=>new H(j.fromServerFormat(e),t)));return new G(e.indexId,e.collectionGroup,r,n)}(e,n))})))).next((()=>t))}))}getNextCollectionGroupToUpdate(e){return this.getFieldIndexes(e).next((e=>0===e.length?null:(e.sort(((e,t)=>{const n=e.indexState.sequenceNumber-t.indexState.sequenceNumber;return 0!==n?n:P(e.collectionGroup,t.collectionGroup)})),e[0].collectionGroup)))}updateCollectionGroup(e,t,n){const r=As(e),i=Ns(e);return this.gn(e).next((e=>r.U("collectionGroupIndex",IDBKeyRange.bound(t,t)).next((t=>ie.forEach(t,(t=>i.put(Yi(t.indexId,this.uid,e,n))))))))}updateIndexEntries(e,t){const n=new Map;return ie.forEach(t,((t,r)=>{const i=n.get(t.collectionGroup);return(i?ie.resolve(i):this.getFieldIndexes(e,t.collectionGroup)).next((i=>(n.set(t.collectionGroup,i),ie.forEach(i,(n=>this.pn(e,t,n).next((t=>{const i=this.yn(r,n);return t.isEqual(i)?ie.resolve():this.wn(e,r,n,t,i)})))))))}))}Sn(e,t,n,r){return Ds(e).put({indexId:r.indexId,uid:this.uid,arrayValue:r.arrayValue,directionalValue:r.directionalValue,orderedDocumentKey:this.Rn(n,t.key),documentKey:t.key.path.toArray()})}bn(e,t,n,r){return Ds(e).delete([r.indexId,this.uid,r.arrayValue,r.directionalValue,this.Rn(n,t.key),t.key.path.toArray()])}pn(e,t,n){const r=Ds(e);let i=new it(hs);return r.J({index:"documentKeyIndex",range:IDBKeyRange.only([n.indexId,this.uid,this.Rn(n,t)])},((e,r)=>{i=i.add(new ls(n.indexId,t,r.arrayValue,r.directionalValue))})).next((()=>i))}yn(e,t){let n=new it(hs);const r=this.An(t,e);if(null==r)return n;const i=K(t);if(null!=i){const s=e.data.field(i.fieldPath);if(kt(s))for(const i of s.arrayValue.values||[])n=n.add(new ls(t.indexId,e.key,this.Tn(i),r))}else n=n.add(new ls(t.indexId,e.key,Ts,r));return n}wn(e,t,n,r,i){p("IndexedDbIndexManager","Updating index entries for document '%s'",t.key);const s=[];return function(e,t,n,r,i){const s=e.getIterator(),o=t.getIterator();let a=ot(s),c=ot(o);for(;a||c;){let e=!1,t=!1;if(a&&c){const r=n(a,c);r<0?t=!0:r>0&&(e=!0)}else null!=a?t=!0:e=!0;e?(r(c),c=ot(o)):t?(i(a),a=ot(s)):(a=ot(s),c=ot(o))}}(r,i,hs,(r=>{s.push(this.Sn(e,t,n,r))}),(r=>{s.push(this.bn(e,t,n,r))})),ie.waitFor(s)}gn(e){let t=1;return Ns(e).J({index:"sequenceNumberIndex",reverse:!0,range:IDBKeyRange.upperBound([this.uid,Number.MAX_SAFE_INTEGER])},((e,n,r)=>{r.done(),t=n.sequenceNumber+1})).next((()=>t))}createRange(e,t,n){n=n.sort(((e,t)=>hs(e,t))).filter(((e,t,n)=>!t||0!==hs(e,n[t-1])));const r=[];r.push(e);for(const i of n){const n=hs(i,e),s=hs(i,t);if(0===n)r[0]=e.Jt();else if(n>0&&s<0)r.push(i),r.push(i.Jt());else if(s>0)break}r.push(t);const i=[];for(let e=0;e<r.length;e+=2){if(this.Dn(r[e],r[e+1]))return[];const t=[r[e].indexId,this.uid,r[e].arrayValue,r[e].directionalValue,Ts,[]],n=[r[e+1].indexId,this.uid,r[e+1].arrayValue,r[e+1].directionalValue,Ts,[]];i.push(IDBKeyRange.bound(t,n))}return i}Dn(e,t){return hs(e,t)>0}getMinOffsetFromCollectionGroup(e,t){return this.getFieldIndexes(e,t).next(ks)}getMinOffset(e,t){return ie.mapArray(this.cn(t),(t=>this.ln(e,t).next((e=>e||v())))).next(ks)}}function Cs(e){return Je(e,"collectionParents")}function Ds(e){return Je(e,"indexEntries")}function As(e){return Je(e,"indexConfiguration")}function Ns(e){return Je(e,"indexState")}function ks(e){w(0!==e.length);let t=e[0].indexState.offset,n=t.largestBatchId;for(let r=1;r<e.length;r++){const i=e[r].indexState.offset;ee(i,t)<0&&(t=i),n<i.largestBatchId&&(n=i.largestBatchId)}return new Z(t.readTime,t.documentKey,n)}const Os={didRun:!1,sequenceNumbersCollected:0,targetsRemoved:0,documentsRemoved:0};class Ls{constructor(e,t,n){this.cacheSizeCollectionThreshold=e,this.percentileToCollect=t,this.maximumSequenceNumbersToCollect=n}static withCacheSize(e){return new Ls(e,Ls.DEFAULT_COLLECTION_PERCENTILE,Ls.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}function Ps(e,t,n){const r=e.store("mutations"),i=e.store("documentMutations"),s=[],o=IDBKeyRange.only(n.batchId);let a=0;const c=r.J({range:o},((e,t,n)=>(a++,n.delete())));s.push(c.next((()=>{w(1===a)})));const u=[];for(const e of n.mutations){const r=Ce(t,e.key.path,n.batchId);s.push(i.delete(r)),u.push(e.key)}return ie.waitFor(s).next((()=>u))}function Ms(e){if(!e)return 0;let t;if(e.document)t=e.document;else if(e.unknownDocument)t=e.unknownDocument;else{if(!e.noDocument)throw v();t=e.noDocument}return JSON.stringify(t).length}Ls.DEFAULT_COLLECTION_PERCENTILE=10,Ls.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,Ls.DEFAULT=new Ls(41943040,Ls.DEFAULT_COLLECTION_PERCENTILE,Ls.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),Ls.DISABLED=new Ls(-1,0,0);class Rs{constructor(e,t,n,r){this.userId=e,this.serializer=t,this.indexManager=n,this.referenceDelegate=r,this.Cn={}}static lt(e,t,n,r){w(""!==e.uid);const i=e.isAuthenticated()?e.uid:"";return new Rs(i,t,n,r)}checkEmpty(e){let t=!0;const n=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return Vs(e).J({index:"userMutationsIndex",range:n},((e,n,r)=>{t=!1,r.done()})).next((()=>t))}addMutationBatch(e,t,n,r){const i=Bs(e),s=Vs(e);return s.add({}).next((o=>{w("number"==typeof o);const a=new Lr(o,t,n,r),c=function(e,t,n){const r=n.baseMutations.map((t=>Si(e.ct,t))),i=n.mutations.map((t=>Si(e.ct,t)));return{userId:t,batchId:n.batchId,localWriteTimeMs:n.localWriteTime.toMillis(),baseMutations:r,mutations:i}}(this.serializer,this.userId,a),u=[];let l=new it(((e,t)=>P(e.canonicalString(),t.canonicalString())));for(const e of r){const t=Ce(this.userId,e.key.path,o);l=l.add(e.key.path.popLast()),u.push(s.put(c)),u.push(i.put(t,De))}return l.forEach((t=>{u.push(this.indexManager.addToCollectionParentIndex(e,t))})),e.addOnCommittedListener((()=>{this.Cn[o]=a.keys()})),ie.waitFor(u).next((()=>a))}))}lookupMutationBatch(e,t){return Vs(e).get(t).next((e=>e?(w(e.userId===this.userId),Ki(this.serializer,e)):null))}vn(e,t){return this.Cn[t]?ie.resolve(this.Cn[t]):this.lookupMutationBatch(e,t).next((e=>{if(e){const n=e.keys();return this.Cn[t]=n,n}return null}))}getNextMutationBatchAfterBatchId(e,t){const n=t+1,r=IDBKeyRange.lowerBound([this.userId,n]);let i=null;return Vs(e).J({index:"userMutationsIndex",range:r},((e,t,r)=>{t.userId===this.userId&&(w(t.batchId>=n),i=Ki(this.serializer,t)),r.done()})).next((()=>i))}getHighestUnacknowledgedBatchId(e){const t=IDBKeyRange.upperBound([this.userId,Number.POSITIVE_INFINITY]);let n=-1;return Vs(e).J({index:"userMutationsIndex",range:t,reverse:!0},((e,t,r)=>{n=t.batchId,r.done()})).next((()=>n))}getAllMutationBatches(e){const t=IDBKeyRange.bound([this.userId,-1],[this.userId,Number.POSITIVE_INFINITY]);return Vs(e).U("userMutationsIndex",t).next((e=>e.map((e=>Ki(this.serializer,e)))))}getAllMutationBatchesAffectingDocumentKey(e,t){const n=xe(this.userId,t.path),r=IDBKeyRange.lowerBound(n),i=[];return Bs(e).J({range:r},((n,r,s)=>{const[o,a,c]=n,u=Se(a);if(o===this.userId&&t.path.isEqual(u))return Vs(e).get(c).next((e=>{if(!e)throw v();w(e.userId===this.userId),i.push(Ki(this.serializer,e))}));s.done()})).next((()=>i))}getAllMutationBatchesAffectingDocumentKeys(e,t){let n=new it(P);const r=[];return t.forEach((t=>{const i=xe(this.userId,t.path),s=IDBKeyRange.lowerBound(i),o=Bs(e).J({range:s},((e,r,i)=>{const[s,o,a]=e,c=Se(o);s===this.userId&&t.path.isEqual(c)?n=n.add(a):i.done()}));r.push(o)})),ie.waitFor(r).next((()=>this.Fn(e,n)))}getAllMutationBatchesAffectingQuery(e,t){const n=t.path,r=n.length+1,i=xe(this.userId,n),s=IDBKeyRange.lowerBound(i);let o=new it(P);return Bs(e).J({range:s},((e,t,i)=>{const[s,a,c]=e,u=Se(a);s===this.userId&&n.isPrefixOf(u)?u.length===r&&(o=o.add(c)):i.done()})).next((()=>this.Fn(e,o)))}Fn(e,t){const n=[],r=[];return t.forEach((t=>{r.push(Vs(e).get(t).next((e=>{if(null===e)throw v();w(e.userId===this.userId),n.push(Ki(this.serializer,e))})))})),ie.waitFor(r).next((()=>n))}removeMutationBatch(e,t){return Ps(e._e,this.userId,t).next((n=>(e.addOnCommittedListener((()=>{this.Mn(t.batchId)})),ie.forEach(n,(t=>this.referenceDelegate.markPotentiallyOrphaned(e,t))))))}Mn(e){delete this.Cn[e]}performConsistencyCheck(e){return this.checkEmpty(e).next((t=>{if(!t)return ie.resolve();const n=IDBKeyRange.lowerBound(function(e){return[e]}(this.userId)),r=[];return Bs(e).J({range:n},((e,t,n)=>{if(e[0]===this.userId){const t=Se(e[1]);r.push(t)}else n.done()})).next((()=>{w(0===r.length)}))}))}containsKey(e,t){return Fs(e,this.userId,t)}xn(e){return Us(e).get(this.userId).next((e=>e||{userId:this.userId,lastAcknowledgedBatchId:-1,lastStreamToken:""}))}}function Fs(e,t,n){const r=xe(t,n.path),i=r[1],s=IDBKeyRange.lowerBound(r);let o=!1;return Bs(e).J({range:s,H:!0},((e,n,r)=>{const[s,a,c]=e;s===t&&a===i&&(o=!0),r.done()})).next((()=>o))}function Vs(e){return Je(e,"mutations")}function Bs(e){return Je(e,"documentMutations")}function Us(e){return Je(e,"mutationQueues")}class qs{constructor(e){this.On=e}next(){return this.On+=2,this.On}static Nn(){return new qs(0)}static Ln(){return new qs(-1)}}class js{constructor(e,t){this.referenceDelegate=e,this.serializer=t}allocateTargetId(e){return this.Bn(e).next((t=>{const n=new qs(t.highestTargetId);return t.highestTargetId=n.next(),this.kn(e,t).next((()=>t.highestTargetId))}))}getLastRemoteSnapshotVersion(e){return this.Bn(e).next((e=>V.fromTimestamp(new F(e.lastRemoteSnapshotVersion.seconds,e.lastRemoteSnapshotVersion.nanoseconds))))}getHighestSequenceNumber(e){return this.Bn(e).next((e=>e.highestListenSequenceNumber))}setTargetsMetadata(e,t,n){return this.Bn(e).next((r=>(r.highestListenSequenceNumber=t,n&&(r.lastRemoteSnapshotVersion=n.toTimestamp()),t>r.highestListenSequenceNumber&&(r.highestListenSequenceNumber=t),this.kn(e,r))))}addTargetData(e,t){return this.qn(e,t).next((()=>this.Bn(e).next((n=>(n.targetCount+=1,this.Qn(t,n),this.kn(e,n))))))}updateTargetData(e,t){return this.qn(e,t)}removeTargetData(e,t){return this.removeMatchingKeysForTargetId(e,t.targetId).next((()=>zs(e).delete(t.targetId))).next((()=>this.Bn(e))).next((t=>(w(t.targetCount>0),t.targetCount-=1,this.kn(e,t))))}removeTargets(e,t,n){let r=0;const i=[];return zs(e).J(((s,o)=>{const a=$i(o);a.sequenceNumber<=t&&null===n.get(a.targetId)&&(r++,i.push(this.removeTargetData(e,a)))})).next((()=>ie.waitFor(i))).next((()=>r))}forEachTarget(e,t){return zs(e).J(((e,n)=>{const r=$i(n);t(r)}))}Bn(e){return Gs(e).get("targetGlobalKey").next((e=>(w(null!==e),e)))}kn(e,t){return Gs(e).put("targetGlobalKey",t)}qn(e,t){return zs(e).put(Qi(this.serializer,t))}Qn(e,t){let n=!1;return e.targetId>t.highestTargetId&&(t.highestTargetId=e.targetId,n=!0),e.sequenceNumber>t.highestListenSequenceNumber&&(t.highestListenSequenceNumber=e.sequenceNumber,n=!0),n}getTargetCount(e){return this.Bn(e).next((e=>e.targetCount))}getTargetData(e,t){const n=yn(t),r=IDBKeyRange.bound([n,Number.NEGATIVE_INFINITY],[n,Number.POSITIVE_INFINITY]);let i=null;return zs(e).J({range:r,index:"queryTargetsIndex"},((e,n,r)=>{const s=$i(n);vn(t,s.target)&&(i=s,r.done())})).next((()=>i))}addMatchingKeys(e,t,n){const r=[],i=Ks(e);return t.forEach((t=>{const s=_e(t.path);r.push(i.put({targetId:n,path:s})),r.push(this.referenceDelegate.addReference(e,n,t))})),ie.waitFor(r)}removeMatchingKeys(e,t,n){const r=Ks(e);return ie.forEach(t,(t=>{const i=_e(t.path);return ie.waitFor([r.delete([n,i]),this.referenceDelegate.removeReference(e,n,t)])}))}removeMatchingKeysForTargetId(e,t){const n=Ks(e),r=IDBKeyRange.bound([t],[t+1],!1,!0);return n.delete(r)}getMatchingKeysForTargetId(e,t){const n=IDBKeyRange.bound([t],[t+1],!1,!0),r=Ks(e);let i=Xn();return r.J({range:n,H:!0},((e,t,n)=>{const r=Se(e[1]),s=new z(r);i=i.add(s)})).next((()=>i))}containsKey(e,t){const n=_e(t.path),r=IDBKeyRange.bound([n],[R(n)],!1,!0);let i=0;return Ks(e).J({index:"documentTargetsIndex",H:!0,range:r},(([e,t],n,r)=>{0!==e&&(i++,r.done())})).next((()=>i>0))}ot(e,t){return zs(e).get(t).next((e=>e?$i(e):null))}}function zs(e){return Je(e,"targets")}function Gs(e){return Je(e,"targetGlobal")}function Ks(e){return Je(e,"targetDocuments")}function $s([e,t],[n,r]){const i=P(e,n);return 0===i?P(t,r):i}class Qs{constructor(e){this.Kn=e,this.buffer=new it($s),this.$n=0}Un(){return++this.$n}Wn(e){const t=[e,this.Un()];if(this.buffer.size<this.Kn)this.buffer=this.buffer.add(t);else{const e=this.buffer.last();$s(t,e)<0&&(this.buffer=this.buffer.delete(e).add(t))}}get maxValue(){return this.buffer.last()[0]}}class Hs{constructor(e,t,n){this.garbageCollector=e,this.asyncQueue=t,this.localStore=n,this.Gn=null}start(){-1!==this.garbageCollector.params.cacheSizeCollectionThreshold&&this.zn(6e4)}stop(){this.Gn&&(this.Gn.cancel(),this.Gn=null)}get started(){return null!==this.Gn}zn(e){p("LruGarbageCollector",`Garbage collection scheduled in ${e}ms`),this.Gn=this.asyncQueue.enqueueAfterDelay("lru_garbage_collection",e,(async()=>{this.Gn=null;try{await this.localStore.collectGarbage(this.garbageCollector)}catch(e){le(e)?p("LruGarbageCollector","Ignoring IndexedDB error during garbage collection: ",e):await re(e)}await this.zn(3e5)}))}}class Ws{constructor(e,t){this.jn=e,this.params=t}calculateTargetCount(e,t){return this.jn.Hn(e).next((e=>Math.floor(t/100*e)))}nthSequenceNumber(e,t){if(0===t)return ie.resolve(ye.oe);const n=new Qs(t);return this.jn.forEachTarget(e,(e=>n.Wn(e.sequenceNumber))).next((()=>this.jn.Jn(e,(e=>n.Wn(e))))).next((()=>n.maxValue))}removeTargets(e,t,n){return this.jn.removeTargets(e,t,n)}removeOrphanedDocuments(e,t){return this.jn.removeOrphanedDocuments(e,t)}collect(e,t){return-1===this.params.cacheSizeCollectionThreshold?(p("LruGarbageCollector","Garbage collection skipped; disabled"),ie.resolve(Os)):this.getCacheSize(e).next((n=>n<this.params.cacheSizeCollectionThreshold?(p("LruGarbageCollector",`Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`),Os):this.Yn(e,t)))}getCacheSize(e){return this.jn.getCacheSize(e)}Yn(e,t){let n,r,i,o,a,c,u;const l=Date.now();return this.calculateTargetCount(e,this.params.percentileToCollect).next((t=>(t>this.params.maximumSequenceNumbersToCollect?(p("LruGarbageCollector",`Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${t}`),r=this.params.maximumSequenceNumbersToCollect):r=t,o=Date.now(),this.nthSequenceNumber(e,r)))).next((r=>(n=r,a=Date.now(),this.removeTargets(e,n,t)))).next((t=>(i=t,c=Date.now(),this.removeOrphanedDocuments(e,n)))).next((e=>(u=Date.now(),f()<=s.LogLevel.DEBUG&&p("LruGarbageCollector",`LRU Garbage Collection\n\tCounted targets in ${o-l}ms\n\tDetermined least recently used ${r} in `+(a-o)+"ms\n"+`\tRemoved ${i} targets in `+(c-a)+"ms\n"+`\tRemoved ${e} documents in `+(u-c)+"ms\n"+`Total Duration: ${u-l}ms`),ie.resolve({didRun:!0,sequenceNumbersCollected:r,targetsRemoved:i,documentsRemoved:e}))))}}function Js(e,t){return new Ws(e,t)}class Ys{constructor(e,t){this.db=e,this.garbageCollector=Js(this,t)}Hn(e){const t=this.Zn(e);return this.db.getTargetCache().getTargetCount(e).next((e=>t.next((t=>e+t))))}Zn(e){let t=0;return this.Jn(e,(e=>{t++})).next((()=>t))}forEachTarget(e,t){return this.db.getTargetCache().forEachTarget(e,t)}Jn(e,t){return this.Xn(e,((e,n)=>t(n)))}addReference(e,t,n){return Xs(e,n)}removeReference(e,t,n){return Xs(e,n)}removeTargets(e,t,n){return this.db.getTargetCache().removeTargets(e,t,n)}markPotentiallyOrphaned(e,t){return Xs(e,t)}er(e,t){return function(e,t){let n=!1;return Us(e).Y((r=>Fs(e,r,t).next((e=>(e&&(n=!0),ie.resolve(!e)))))).next((()=>n))}(e,t)}removeOrphanedDocuments(e,t){const n=this.db.getRemoteDocumentCache().newChangeBuffer(),r=[];let i=0;return this.Xn(e,((s,o)=>{if(o<=t){const t=this.er(e,s).next((t=>{if(!t)return i++,n.getEntry(e,s).next((()=>(n.removeEntry(s,V.min()),Ks(e).delete(function(e){return[0,_e(e.path)]}(s)))))}));r.push(t)}})).next((()=>ie.waitFor(r))).next((()=>n.apply(e))).next((()=>i))}removeTarget(e,t){const n=t.withSequenceNumber(e.currentSequenceNumber);return this.db.getTargetCache().updateTargetData(e,n)}updateLimboDocument(e,t){return Xs(e,t)}Xn(e,t){const n=Ks(e);let r,i=ye.oe;return n.J({index:"documentTargetsIndex"},(([e,n],{path:s,sequenceNumber:o})=>{0===e?(i!==ye.oe&&t(new z(Se(r)),i),i=o,r=s):i=ye.oe})).next((()=>{i!==ye.oe&&t(new z(Se(r)),i)}))}getCacheSize(e){return this.db.getRemoteDocumentCache().getSize(e)}}function Xs(e,t){return Ks(e).put(function(e,t){return{targetId:0,path:_e(e.path),sequenceNumber:t}}(t,e.currentSequenceNumber))}class Zs{constructor(){this.changes=new qn((e=>e.toString()),((e,t)=>e.isEqual(t))),this.changesApplied=!1}addEntry(e){this.assertNotApplied(),this.changes.set(e.key,e)}removeEntry(e,t){this.assertNotApplied(),this.changes.set(e,zt.newInvalidDocument(e).setReadTime(t))}getEntry(e,t){this.assertNotApplied();const n=this.changes.get(t);return void 0!==n?ie.resolve(n):this.getFromCache(e,t)}getEntries(e,t){return this.getAllFromCache(e,t)}apply(e){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(e)}assertNotApplied(){}}class eo{constructor(e){this.serializer=e}setIndexManager(e){this.indexManager=e}addEntry(e,t,n){return io(e).put(n)}removeEntry(e,t,n){return io(e).delete(function(e,t){const n=e.path.toArray();return[n.slice(0,n.length-2),n[n.length-2],ji(t),n[n.length-1]]}(t,n))}updateMetadata(e,t){return this.getMetadata(e).next((n=>(n.byteSize+=t,this.tr(e,n))))}getEntry(e,t){let n=zt.newInvalidDocument(t);return io(e).J({index:"documentKeyIndex",range:IDBKeyRange.only(so(t))},((e,r)=>{n=this.nr(t,r)})).next((()=>n))}rr(e,t){let n={size:0,document:zt.newInvalidDocument(t)};return io(e).J({index:"documentKeyIndex",range:IDBKeyRange.only(so(t))},((e,r)=>{n={document:this.nr(t,r),size:Ms(r)}})).next((()=>n))}getEntries(e,t){let n=zn();return this.ir(e,t,((e,t)=>{const r=this.nr(e,t);n=n.insert(e,r)})).next((()=>n))}sr(e,t){let n=zn(),r=new tt(z.comparator);return this.ir(e,t,((e,t)=>{const i=this.nr(e,t);n=n.insert(e,i),r=r.insert(e,Ms(t))})).next((()=>({documents:n,_r:r})))}ir(e,t,n){if(t.isEmpty())return ie.resolve();let r=new it(ao);t.forEach((e=>r=r.add(e)));const i=IDBKeyRange.bound(so(r.first()),so(r.last())),s=r.getIterator();let o=s.getNext();return io(e).J({index:"documentKeyIndex",range:i},((e,t,r)=>{const i=z.fromSegments([...t.prefixPath,t.collectionGroup,t.documentId]);for(;o&&ao(o,i)<0;)n(o,null),o=s.getNext();o&&o.isEqual(i)&&(n(o,t),o=s.hasNext()?s.getNext():null),o?r.$(so(o)):r.done()})).next((()=>{for(;o;)n(o,null),o=s.hasNext()?s.getNext():null}))}getDocumentsMatchingQuery(e,t,n,r,i){const s=t.path,o=[s.popLast().toArray(),s.lastSegment(),ji(n.readTime),n.documentKey.path.isEmpty()?"":n.documentKey.path.lastSegment()],a=[s.popLast().toArray(),s.lastSegment(),[Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER],""];return io(e).U(IDBKeyRange.bound(o,a,!0)).next((e=>{null==i||i.incrementDocumentReadCount(e.length);let n=zn();for(const i of e){const e=this.nr(z.fromSegments(i.prefixPath.concat(i.collectionGroup,i.documentId)),i);e.isFoundDocument()&&(Fn(t,e)||r.has(e.key))&&(n=n.insert(e.key,e))}return n}))}getAllFromCollectionGroup(e,t,n,r){let i=zn();const s=oo(t,n),o=oo(t,Z.max());return io(e).J({index:"collectionGroupIndex",range:IDBKeyRange.bound(s,o,!0)},((e,t,n)=>{const s=this.nr(z.fromSegments(t.prefixPath.concat(t.collectionGroup,t.documentId)),t);i=i.insert(s.key,s),i.size===r&&n.done()})).next((()=>i))}newChangeBuffer(e){return new no(this,!!e&&e.trackRemovals)}getSize(e){return this.getMetadata(e).next((e=>e.byteSize))}getMetadata(e){return ro(e).get("remoteDocumentGlobalKey").next((e=>(w(!!e),e)))}tr(e,t){return ro(e).put("remoteDocumentGlobalKey",t)}nr(e,t){if(t){const e=function(e,t){let n;if(t.document)n=Ei(e.ct,t.document,!!t.hasCommittedMutations);else if(t.noDocument){const e=z.fromSegments(t.noDocument.path),r=Gi(t.noDocument.readTime);n=zt.newNoDocument(e,r),t.hasCommittedMutations&&n.setHasCommittedMutations()}else{if(!t.unknownDocument)return v();{const e=z.fromSegments(t.unknownDocument.path),r=Gi(t.unknownDocument.version);n=zt.newUnknownDocument(e,r)}}return t.readTime&&n.setReadTime(function(e){const t=new F(e[0],e[1]);return V.fromTimestamp(t)}(t.readTime)),n}(this.serializer,t);if(!e.isNoDocument()||!e.version.isEqual(V.min()))return e}return zt.newInvalidDocument(e)}}function to(e){return new eo(e)}class no extends Zs{constructor(e,t){super(),this.ar=e,this.trackRemovals=t,this.ur=new qn((e=>e.toString()),((e,t)=>e.isEqual(t)))}applyChanges(e){const t=[];let n=0,r=new it(((e,t)=>P(e.canonicalString(),t.canonicalString())));return this.changes.forEach(((i,s)=>{const o=this.ur.get(i);if(t.push(this.ar.removeEntry(e,i,o.readTime)),s.isValidDocument()){const a=qi(this.ar.serializer,s);r=r.add(i.path.popLast());const c=Ms(a);n+=c-o.size,t.push(this.ar.addEntry(e,i,a))}else if(n-=o.size,this.trackRemovals){const n=qi(this.ar.serializer,s.convertToNoDocument(V.min()));t.push(this.ar.addEntry(e,i,n))}})),r.forEach((n=>{t.push(this.ar.indexManager.addToCollectionParentIndex(e,n))})),t.push(this.ar.updateMetadata(e,n)),ie.waitFor(t)}getFromCache(e,t){return this.ar.rr(e,t).next((e=>(this.ur.set(t,{size:e.size,readTime:e.document.readTime}),e.document)))}getAllFromCache(e,t){return this.ar.sr(e,t).next((({documents:e,_r:t})=>(t.forEach(((t,n)=>{this.ur.set(t,{size:n,readTime:e.get(t).readTime})})),e)))}}function ro(e){return Je(e,"remoteDocumentGlobal")}function io(e){return Je(e,"remoteDocumentsV14")}function so(e){const t=e.path.toArray();return[t.slice(0,t.length-2),t[t.length-2],t[t.length-1]]}function oo(e,t){const n=t.documentKey.path.toArray();return[e,ji(t.readTime),n.slice(0,n.length-2),n.length>0?n[n.length-1]:""]}function ao(e,t){const n=e.path.toArray(),r=t.path.toArray();let i=0;for(let e=0;e<n.length-2&&e<r.length-2;++e)if(i=P(n[e],r[e]),i)return i;return i=P(n.length,r.length),i||(i=P(n[n.length-2],r[r.length-2]),i||P(n[n.length-1],r[r.length-1]))}class co{constructor(e,t){this.overlayedDocument=e,this.mutatedFields=t}}class uo{constructor(e,t,n,r){this.remoteDocumentCache=e,this.mutationQueue=t,this.documentOverlayCache=n,this.indexManager=r}getDocument(e,t){let n=null;return this.documentOverlayCache.getOverlay(e,t).next((r=>(n=r,this.remoteDocumentCache.getEntry(e,t)))).next((e=>(null!==n&&Er(n.mutation,e,at.empty(),F.now()),e)))}getDocuments(e,t){return this.remoteDocumentCache.getEntries(e,t).next((t=>this.getLocalViewOfDocuments(e,t,Xn()).next((()=>t))))}getLocalViewOfDocuments(e,t,n=Xn()){const r=Qn();return this.populateOverlays(e,r,t).next((()=>this.computeViews(e,t,r,n).next((e=>{let t=Kn();return e.forEach(((e,n)=>{t=t.insert(e,n.overlayedDocument)})),t}))))}getOverlayedDocuments(e,t){const n=Qn();return this.populateOverlays(e,n,t).next((()=>this.computeViews(e,t,n,Xn())))}populateOverlays(e,t,n){const r=[];return n.forEach((e=>{t.has(e)||r.push(e)})),this.documentOverlayCache.getOverlays(e,r).next((e=>{e.forEach(((e,n)=>{t.set(e,n)}))}))}computeViews(e,t,n,r){let i=zn();const s=Wn(),o=Wn();return t.forEach(((e,t)=>{const o=n.get(t.key);r.has(t.key)&&(void 0===o||o.mutation instanceof Cr)?i=i.insert(t.key,t):void 0!==o?(s.set(t.key,o.mutation.getFieldMask()),Er(o.mutation,t,o.mutation.getFieldMask(),F.now())):s.set(t.key,at.empty())})),this.recalculateAndSaveOverlays(e,i).next((e=>(e.forEach(((e,t)=>s.set(e,t))),t.forEach(((e,t)=>{var n;return o.set(e,new co(t,null!==(n=s.get(e))&&void 0!==n?n:null))})),o)))}recalculateAndSaveOverlays(e,t){const n=Wn();let r=new tt(((e,t)=>e-t)),i=Xn();return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e,t).next((e=>{for(const i of e)i.keys().forEach((e=>{const s=t.get(e);if(null===s)return;let o=n.get(e)||at.empty();o=i.applyToLocalView(s,o),n.set(e,o);const a=(r.get(i.batchId)||Xn()).add(e);r=r.insert(i.batchId,a)}))})).next((()=>{const s=[],o=r.getReverseIterator();for(;o.hasNext();){const r=o.getNext(),a=r.key,c=r.value,u=Hn();c.forEach((e=>{if(!i.has(e)){const r=_r(t.get(e),n.get(e));null!==r&&u.set(e,r),i=i.add(e)}})),s.push(this.documentOverlayCache.saveOverlays(e,a,u))}return ie.waitFor(s)})).next((()=>n))}recalculateAndSaveOverlaysForDocumentKeys(e,t){return this.remoteDocumentCache.getEntries(e,t).next((t=>this.recalculateAndSaveOverlays(e,t)))}getDocumentsMatchingQuery(e,t,n,r){return function(e){return z.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}(t)?this.getDocumentsMatchingDocumentQuery(e,t.path):Cn(t)?this.getDocumentsMatchingCollectionGroupQuery(e,t,n,r):this.getDocumentsMatchingCollectionQuery(e,t,n,r)}getNextDocuments(e,t,n,r){return this.remoteDocumentCache.getAllFromCollectionGroup(e,t,n,r).next((i=>{const s=r-i.size>0?this.documentOverlayCache.getOverlaysForCollectionGroup(e,t,n.largestBatchId,r-i.size):ie.resolve(Qn());let o=-1,a=i;return s.next((t=>ie.forEach(t,((t,n)=>(o<n.largestBatchId&&(o=n.largestBatchId),i.get(t)?ie.resolve():this.remoteDocumentCache.getEntry(e,t).next((e=>{a=a.insert(t,e)}))))).next((()=>this.populateOverlays(e,t,i))).next((()=>this.computeViews(e,a,t,Xn()))).next((e=>({batchId:o,changes:$n(e)})))))}))}getDocumentsMatchingDocumentQuery(e,t){return this.getDocument(e,new z(t)).next((e=>{let t=Kn();return e.isFoundDocument()&&(t=t.insert(e.key,e)),t}))}getDocumentsMatchingCollectionGroupQuery(e,t,n,r){const i=t.collectionGroup;let s=Kn();return this.indexManager.getCollectionParents(e,i).next((o=>ie.forEach(o,(o=>{const a=function(e,t){return new En(t,null,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,e.startAt,e.endAt)}(t,o.child(i));return this.getDocumentsMatchingCollectionQuery(e,a,n,r).next((e=>{e.forEach(((e,t)=>{s=s.insert(e,t)}))}))})).next((()=>s))))}getDocumentsMatchingCollectionQuery(e,t,n,r){let i;return this.documentOverlayCache.getOverlaysForCollection(e,t.path,n.largestBatchId).next((s=>(i=s,this.remoteDocumentCache.getDocumentsMatchingQuery(e,t,n,i,r)))).next((e=>{i.forEach(((t,n)=>{const r=n.getKey();null===e.get(r)&&(e=e.insert(r,zt.newInvalidDocument(r)))}));let n=Kn();return e.forEach(((e,r)=>{const s=i.get(e);void 0!==s&&Er(s.mutation,r,at.empty(),F.now()),Fn(t,r)&&(n=n.insert(e,r))})),n}))}}class lo{constructor(e){this.serializer=e,this.cr=new Map,this.lr=new Map}getBundleMetadata(e,t){return ie.resolve(this.cr.get(t))}saveBundleMetadata(e,t){return this.cr.set(t.id,function(e){return{id:e.id,version:e.version,createTime:di(e.createTime)}}(t)),ie.resolve()}getNamedQuery(e,t){return ie.resolve(this.lr.get(t))}saveNamedQuery(e,t){return this.lr.set(t.name,function(e){return{name:e.name,query:Hi(e.bundledQuery),readTime:di(e.readTime)}}(t)),ie.resolve()}}class ho{constructor(){this.overlays=new tt(z.comparator),this.hr=new Map}getOverlay(e,t){return ie.resolve(this.overlays.get(t))}getOverlays(e,t){const n=Qn();return ie.forEach(t,(t=>this.getOverlay(e,t).next((e=>{null!==e&&n.set(t,e)})))).next((()=>n))}saveOverlays(e,t,n){return n.forEach(((n,r)=>{this.ht(e,t,r)})),ie.resolve()}removeOverlaysForBatchId(e,t,n){const r=this.hr.get(n);return void 0!==r&&(r.forEach((e=>this.overlays=this.overlays.remove(e))),this.hr.delete(n)),ie.resolve()}getOverlaysForCollection(e,t,n){const r=Qn(),i=t.length+1,s=new z(t.child("")),o=this.overlays.getIteratorFrom(s);for(;o.hasNext();){const e=o.getNext().value,s=e.getKey();if(!t.isPrefixOf(s.path))break;s.path.length===i&&e.largestBatchId>n&&r.set(e.getKey(),e)}return ie.resolve(r)}getOverlaysForCollectionGroup(e,t,n,r){let i=new tt(((e,t)=>e-t));const s=this.overlays.getIterator();for(;s.hasNext();){const e=s.getNext().value;if(e.getKey().getCollectionGroup()===t&&e.largestBatchId>n){let t=i.get(e.largestBatchId);null===t&&(t=Qn(),i=i.insert(e.largestBatchId,t)),t.set(e.getKey(),e)}}const o=Qn(),a=i.getIterator();for(;a.hasNext()&&(a.getNext().value.forEach(((e,t)=>o.set(e,t))),!(o.size()>=r)););return ie.resolve(o)}ht(e,t,n){const r=this.overlays.get(n.key);if(null!==r){const e=this.hr.get(r.largestBatchId).delete(n.key);this.hr.set(r.largestBatchId,e)}this.overlays=this.overlays.insert(n.key,new Mr(t,n));let i=this.hr.get(t);void 0===i&&(i=Xn(),this.hr.set(t,i)),this.hr.set(t,i.add(n.key))}}class fo{constructor(){this.Pr=new it(po.Ir),this.Tr=new it(po.Er)}isEmpty(){return this.Pr.isEmpty()}addReference(e,t){const n=new po(e,t);this.Pr=this.Pr.add(n),this.Tr=this.Tr.add(n)}dr(e,t){e.forEach((e=>this.addReference(e,t)))}removeReference(e,t){this.Ar(new po(e,t))}Rr(e,t){e.forEach((e=>this.removeReference(e,t)))}Vr(e){const t=new z(new U([])),n=new po(t,e),r=new po(t,e+1),i=[];return this.Tr.forEachInRange([n,r],(e=>{this.Ar(e),i.push(e.key)})),i}mr(){this.Pr.forEach((e=>this.Ar(e)))}Ar(e){this.Pr=this.Pr.delete(e),this.Tr=this.Tr.delete(e)}gr(e){const t=new z(new U([])),n=new po(t,e),r=new po(t,e+1);let i=Xn();return this.Tr.forEachInRange([n,r],(e=>{i=i.add(e.key)})),i}containsKey(e){const t=new po(e,0),n=this.Pr.firstAfterOrEqual(t);return null!==n&&e.isEqual(n.key)}}class po{constructor(e,t){this.key=e,this.pr=t}static Ir(e,t){return z.comparator(e.key,t.key)||P(e.pr,t.pr)}static Er(e,t){return P(e.pr,t.pr)||z.comparator(e.key,t.key)}}class go{constructor(e,t){this.indexManager=e,this.referenceDelegate=t,this.mutationQueue=[],this.yr=1,this.wr=new it(po.Ir)}checkEmpty(e){return ie.resolve(0===this.mutationQueue.length)}addMutationBatch(e,t,n,r){const i=this.yr;this.yr++,this.mutationQueue.length>0&&this.mutationQueue[this.mutationQueue.length-1];const s=new Lr(i,t,n,r);this.mutationQueue.push(s);for(const t of r)this.wr=this.wr.add(new po(t.key,i)),this.indexManager.addToCollectionParentIndex(e,t.key.path.popLast());return ie.resolve(s)}lookupMutationBatch(e,t){return ie.resolve(this.Sr(t))}getNextMutationBatchAfterBatchId(e,t){const n=t+1,r=this.br(n),i=r<0?0:r;return ie.resolve(this.mutationQueue.length>i?this.mutationQueue[i]:null)}getHighestUnacknowledgedBatchId(){return ie.resolve(0===this.mutationQueue.length?-1:this.yr-1)}getAllMutationBatches(e){return ie.resolve(this.mutationQueue.slice())}getAllMutationBatchesAffectingDocumentKey(e,t){const n=new po(t,0),r=new po(t,Number.POSITIVE_INFINITY),i=[];return this.wr.forEachInRange([n,r],(e=>{const t=this.Sr(e.pr);i.push(t)})),ie.resolve(i)}getAllMutationBatchesAffectingDocumentKeys(e,t){let n=new it(P);return t.forEach((e=>{const t=new po(e,0),r=new po(e,Number.POSITIVE_INFINITY);this.wr.forEachInRange([t,r],(e=>{n=n.add(e.pr)}))})),ie.resolve(this.Dr(n))}getAllMutationBatchesAffectingQuery(e,t){const n=t.path,r=n.length+1;let i=n;z.isDocumentKey(i)||(i=i.child(""));const s=new po(new z(i),0);let o=new it(P);return this.wr.forEachWhile((e=>{const t=e.key.path;return!!n.isPrefixOf(t)&&(t.length===r&&(o=o.add(e.pr)),!0)}),s),ie.resolve(this.Dr(o))}Dr(e){const t=[];return e.forEach((e=>{const n=this.Sr(e);null!==n&&t.push(n)})),t}removeMutationBatch(e,t){w(0===this.Cr(t.batchId,"removed")),this.mutationQueue.shift();let n=this.wr;return ie.forEach(t.mutations,(r=>{const i=new po(r.key,t.batchId);return n=n.delete(i),this.referenceDelegate.markPotentiallyOrphaned(e,r.key)})).next((()=>{this.wr=n}))}Mn(e){}containsKey(e,t){const n=new po(t,0),r=this.wr.firstAfterOrEqual(n);return ie.resolve(t.isEqual(r&&r.key))}performConsistencyCheck(e){return this.mutationQueue.length,ie.resolve()}Cr(e,t){return this.br(e)}br(e){return 0===this.mutationQueue.length?0:e-this.mutationQueue[0].batchId}Sr(e){const t=this.br(e);return t<0||t>=this.mutationQueue.length?null:this.mutationQueue[t]}}class mo{constructor(e){this.vr=e,this.docs=new tt(z.comparator),this.size=0}setIndexManager(e){this.indexManager=e}addEntry(e,t){const n=t.key,r=this.docs.get(n),i=r?r.size:0,s=this.vr(t);return this.docs=this.docs.insert(n,{document:t.mutableCopy(),size:s}),this.size+=s-i,this.indexManager.addToCollectionParentIndex(e,n.path.popLast())}removeEntry(e){const t=this.docs.get(e);t&&(this.docs=this.docs.remove(e),this.size-=t.size)}getEntry(e,t){const n=this.docs.get(t);return ie.resolve(n?n.document.mutableCopy():zt.newInvalidDocument(t))}getEntries(e,t){let n=zn();return t.forEach((e=>{const t=this.docs.get(e);n=n.insert(e,t?t.document.mutableCopy():zt.newInvalidDocument(e))})),ie.resolve(n)}getDocumentsMatchingQuery(e,t,n,r){let i=zn();const s=t.path,o=new z(s.child("")),a=this.docs.getIteratorFrom(o);for(;a.hasNext();){const{key:e,value:{document:o}}=a.getNext();if(!s.isPrefixOf(e.path))break;e.path.length>s.length+1||ee(X(o),n)<=0||(r.has(o.key)||Fn(t,o))&&(i=i.insert(o.key,o.mutableCopy()))}return ie.resolve(i)}getAllFromCollectionGroup(e,t,n,r){v()}Fr(e,t){return ie.forEach(this.docs,(e=>t(e)))}newChangeBuffer(e){return new yo(this)}getSize(e){return ie.resolve(this.size)}}class yo extends Zs{constructor(e){super(),this.ar=e}applyChanges(e){const t=[];return this.changes.forEach(((n,r)=>{r.isValidDocument()?t.push(this.ar.addEntry(e,r)):this.ar.removeEntry(n)})),ie.waitFor(t)}getFromCache(e,t){return this.ar.getEntry(e,t)}getAllFromCache(e,t){return this.ar.getEntries(e,t)}}class vo{constructor(e){this.persistence=e,this.Mr=new qn((e=>yn(e)),vn),this.lastRemoteSnapshotVersion=V.min(),this.highestTargetId=0,this.Or=0,this.Nr=new fo,this.targetCount=0,this.Lr=qs.Nn()}forEachTarget(e,t){return this.Mr.forEach(((e,n)=>t(n))),ie.resolve()}getLastRemoteSnapshotVersion(e){return ie.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(e){return ie.resolve(this.Or)}allocateTargetId(e){return this.highestTargetId=this.Lr.next(),ie.resolve(this.highestTargetId)}setTargetsMetadata(e,t,n){return n&&(this.lastRemoteSnapshotVersion=n),t>this.Or&&(this.Or=t),ie.resolve()}qn(e){this.Mr.set(e.target,e);const t=e.targetId;t>this.highestTargetId&&(this.Lr=new qs(t),this.highestTargetId=t),e.sequenceNumber>this.Or&&(this.Or=e.sequenceNumber)}addTargetData(e,t){return this.qn(t),this.targetCount+=1,ie.resolve()}updateTargetData(e,t){return this.qn(t),ie.resolve()}removeTargetData(e,t){return this.Mr.delete(t.target),this.Nr.Vr(t.targetId),this.targetCount-=1,ie.resolve()}removeTargets(e,t,n){let r=0;const i=[];return this.Mr.forEach(((s,o)=>{o.sequenceNumber<=t&&null===n.get(o.targetId)&&(this.Mr.delete(s),i.push(this.removeMatchingKeysForTargetId(e,o.targetId)),r++)})),ie.waitFor(i).next((()=>r))}getTargetCount(e){return ie.resolve(this.targetCount)}getTargetData(e,t){const n=this.Mr.get(t)||null;return ie.resolve(n)}addMatchingKeys(e,t,n){return this.Nr.dr(t,n),ie.resolve()}removeMatchingKeys(e,t,n){this.Nr.Rr(t,n);const r=this.persistence.referenceDelegate,i=[];return r&&t.forEach((t=>{i.push(r.markPotentiallyOrphaned(e,t))})),ie.waitFor(i)}removeMatchingKeysForTargetId(e,t){return this.Nr.Vr(t),ie.resolve()}getMatchingKeysForTargetId(e,t){const n=this.Nr.gr(t);return ie.resolve(n)}containsKey(e,t){return ie.resolve(this.Nr.containsKey(t))}}class wo{constructor(e,t){this.Br={},this.overlays={},this.kr=new ye(0),this.qr=!1,this.qr=!0,this.referenceDelegate=e(this),this.Qr=new vo(this),this.indexManager=new Es,this.remoteDocumentCache=function(e){return new mo(e)}((e=>this.referenceDelegate.Kr(e))),this.serializer=new Ui(t),this.$r=new lo(this.serializer)}start(){return Promise.resolve()}shutdown(){return this.qr=!1,Promise.resolve()}get started(){return this.qr}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(e){return this.indexManager}getDocumentOverlayCache(e){let t=this.overlays[e.toKey()];return t||(t=new ho,this.overlays[e.toKey()]=t),t}getMutationQueue(e,t){let n=this.Br[e.toKey()];return n||(n=new go(t,this.referenceDelegate),this.Br[e.toKey()]=n),n}getTargetCache(){return this.Qr}getRemoteDocumentCache(){return this.remoteDocumentCache}getBundleCache(){return this.$r}runTransaction(e,t,n){p("MemoryPersistence","Starting transaction:",e);const r=new bo(this.kr.next());return this.referenceDelegate.Ur(),n(r).next((e=>this.referenceDelegate.Wr(r).next((()=>e)))).toPromise().then((e=>(r.raiseOnCommittedEvent(),e)))}Gr(e,t){return ie.or(Object.values(this.Br).map((n=>()=>n.containsKey(e,t))))}}class bo extends ne{constructor(e){super(),this.currentSequenceNumber=e}}class _o{constructor(e){this.persistence=e,this.zr=new fo,this.jr=null}static Hr(e){return new _o(e)}get Jr(){if(this.jr)return this.jr;throw v()}addReference(e,t,n){return this.zr.addReference(n,t),this.Jr.delete(n.toString()),ie.resolve()}removeReference(e,t,n){return this.zr.removeReference(n,t),this.Jr.add(n.toString()),ie.resolve()}markPotentiallyOrphaned(e,t){return this.Jr.add(t.toString()),ie.resolve()}removeTarget(e,t){this.zr.Vr(t.targetId).forEach((e=>this.Jr.add(e.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(e,t.targetId).next((e=>{e.forEach((e=>this.Jr.add(e.toString())))})).next((()=>n.removeTargetData(e,t)))}Ur(){this.jr=new Set}Wr(e){const t=this.persistence.getRemoteDocumentCache().newChangeBuffer();return ie.forEach(this.Jr,(n=>{const r=z.fromPath(n);return this.Yr(e,r).next((e=>{e||t.removeEntry(r,V.min())}))})).next((()=>(this.jr=null,t.apply(e))))}updateLimboDocument(e,t){return this.Yr(e,t).next((e=>{e?this.Jr.delete(t.toString()):this.Jr.add(t.toString())}))}Kr(e){return 0}Yr(e,t){return ie.or([()=>ie.resolve(this.zr.containsKey(t)),()=>this.persistence.getTargetCache().containsKey(e,t),()=>this.persistence.Gr(e,t)])}}class Io{constructor(e,t){this.persistence=e,this.Zr=new qn((e=>_e(e.path)),((e,t)=>e.isEqual(t))),this.garbageCollector=Js(this,t)}static Hr(e,t){return new Io(e,t)}Ur(){}Wr(e){return ie.resolve()}forEachTarget(e,t){return this.persistence.getTargetCache().forEachTarget(e,t)}Hn(e){const t=this.Zn(e);return this.persistence.getTargetCache().getTargetCount(e).next((e=>t.next((t=>e+t))))}Zn(e){let t=0;return this.Jn(e,(e=>{t++})).next((()=>t))}Jn(e,t){return ie.forEach(this.Zr,((n,r)=>this.er(e,n,r).next((e=>e?ie.resolve():t(r)))))}removeTargets(e,t,n){return this.persistence.getTargetCache().removeTargets(e,t,n)}removeOrphanedDocuments(e,t){let n=0;const r=this.persistence.getRemoteDocumentCache(),i=r.newChangeBuffer();return r.Fr(e,(r=>this.er(e,r,t).next((e=>{e||(n++,i.removeEntry(r,V.min()))})))).next((()=>i.apply(e))).next((()=>n))}markPotentiallyOrphaned(e,t){return this.Zr.set(t,e.currentSequenceNumber),ie.resolve()}removeTarget(e,t){const n=t.withSequenceNumber(e.currentSequenceNumber);return this.persistence.getTargetCache().updateTargetData(e,n)}addReference(e,t,n){return this.Zr.set(n,e.currentSequenceNumber),ie.resolve()}removeReference(e,t,n){return this.Zr.set(n,e.currentSequenceNumber),ie.resolve()}updateLimboDocument(e,t){return this.Zr.set(t,e.currentSequenceNumber),ie.resolve()}Kr(e){let t=e.key.toString().length;return e.isFoundDocument()&&(t+=Dt(e.data.value)),t}er(e,t,n){return ie.or([()=>this.persistence.Gr(e,t),()=>this.persistence.getTargetCache().containsKey(e,t),()=>{const e=this.Zr.get(t);return ie.resolve(void 0!==e&&e>n)}])}getCacheSize(e){return this.persistence.getRemoteDocumentCache().getSize(e)}}class Eo{constructor(e){this.serializer=e}O(e,t,n,r){const i=new se("createOrUpgrade",t);n<1&&r>=1&&(function(e){e.createObjectStore("owner")}(e),function(e){e.createObjectStore("mutationQueues",{keyPath:"userId"}),e.createObjectStore("mutations",{keyPath:"batchId",autoIncrement:!0}).createIndex("userMutationsIndex",Te,{unique:!0}),e.createObjectStore("documentMutations")}(e),So(e),function(e){e.createObjectStore("remoteDocuments")}(e));let s=ie.resolve();return n<3&&r>=3&&(0!==n&&(function(e){e.deleteObjectStore("targetDocuments"),e.deleteObjectStore("targets"),e.deleteObjectStore("targetGlobal")}(e),So(e)),s=s.next((()=>function(e){const t=e.store("targetGlobal"),n={highestTargetId:0,highestListenSequenceNumber:0,lastRemoteSnapshotVersion:V.min().toTimestamp(),targetCount:0};return t.put("targetGlobalKey",n)}(i)))),n<4&&r>=4&&(0!==n&&(s=s.next((()=>function(e,t){return t.store("mutations").U().next((n=>{e.deleteObjectStore("mutations"),e.createObjectStore("mutations",{keyPath:"batchId",autoIncrement:!0}).createIndex("userMutationsIndex",Te,{unique:!0});const r=t.store("mutations"),i=n.map((e=>r.put(e)));return ie.waitFor(i)}))}(e,i)))),s=s.next((()=>{!function(e){e.createObjectStore("clientMetadata",{keyPath:"clientId"})}(e)}))),n<5&&r>=5&&(s=s.next((()=>this.Xr(i)))),n<6&&r>=6&&(s=s.next((()=>(function(e){e.createObjectStore("remoteDocumentGlobal")}(e),this.ei(i))))),n<7&&r>=7&&(s=s.next((()=>this.ti(i)))),n<8&&r>=8&&(s=s.next((()=>this.ni(e,i)))),n<9&&r>=9&&(s=s.next((()=>{!function(e){e.objectStoreNames.contains("remoteDocumentChanges")&&e.deleteObjectStore("remoteDocumentChanges")}(e)}))),n<10&&r>=10&&(s=s.next((()=>this.ri(i)))),n<11&&r>=11&&(s=s.next((()=>{!function(e){e.createObjectStore("bundles",{keyPath:"bundleId"})}(e),function(e){e.createObjectStore("namedQueries",{keyPath:"name"})}(e)}))),n<12&&r>=12&&(s=s.next((()=>{!function(e){const t=e.createObjectStore("documentOverlays",{keyPath:Ue});t.createIndex("collectionPathOverlayIndex",qe,{unique:!1}),t.createIndex("collectionGroupOverlayIndex",je,{unique:!1})}(e)}))),n<13&&r>=13&&(s=s.next((()=>function(e){const t=e.createObjectStore("remoteDocumentsV14",{keyPath:Ae});t.createIndex("documentKeyIndex",Ne),t.createIndex("collectionGroupIndex",ke)}(e))).next((()=>this.ii(e,i))).next((()=>e.deleteObjectStore("remoteDocuments")))),n<14&&r>=14&&(s=s.next((()=>this.si(e,i)))),n<15&&r>=15&&(s=s.next((()=>function(e){e.createObjectStore("indexConfiguration",{keyPath:"indexId",autoIncrement:!0}).createIndex("collectionGroupIndex","collectionGroup",{unique:!1}),e.createObjectStore("indexState",{keyPath:Re}).createIndex("sequenceNumberIndex",Fe,{unique:!1}),e.createObjectStore("indexEntries",{keyPath:Ve}).createIndex("documentKeyIndex",Be,{unique:!1})}(e)))),n<16&&r>=16&&(s=s.next((()=>{t.objectStore("indexState").clear()})).next((()=>{t.objectStore("indexEntries").clear()}))),s}ei(e){let t=0;return e.store("remoteDocuments").J(((e,n)=>{t+=Ms(n)})).next((()=>{const n={byteSize:t};return e.store("remoteDocumentGlobal").put("remoteDocumentGlobalKey",n)}))}Xr(e){const t=e.store("mutationQueues"),n=e.store("mutations");return t.U().next((t=>ie.forEach(t,(t=>{const r=IDBKeyRange.bound([t.userId,-1],[t.userId,t.lastAcknowledgedBatchId]);return n.U("userMutationsIndex",r).next((n=>ie.forEach(n,(n=>{w(n.userId===t.userId);const r=Ki(this.serializer,n);return Ps(e,t.userId,r).next((()=>{}))}))))}))))}ti(e){const t=e.store("targetDocuments"),n=e.store("remoteDocuments");return e.store("targetGlobal").get("targetGlobalKey").next((e=>{const r=[];return n.J(((n,i)=>{const s=new U(n),o=function(e){return[0,_e(e)]}(s);r.push(t.get(o).next((n=>n?ie.resolve():(n=>t.put({targetId:0,path:_e(n),sequenceNumber:e.highestListenSequenceNumber}))(s))))})).next((()=>ie.waitFor(r)))}))}ni(e,t){e.createObjectStore("collectionParents",{keyPath:Me});const n=t.store("collectionParents"),r=new Ss,i=e=>{if(r.add(e)){const t=e.lastSegment(),r=e.popLast();return n.put({collectionId:t,parent:_e(r)})}};return t.store("remoteDocuments").J({H:!0},((e,t)=>{const n=new U(e);return i(n.popLast())})).next((()=>t.store("documentMutations").J({H:!0},(([e,t,n],r)=>{const s=Se(t);return i(s.popLast())}))))}ri(e){const t=e.store("targets");return t.J(((e,n)=>{const r=$i(n),i=Qi(this.serializer,r);return t.put(i)}))}ii(e,t){const n=t.store("remoteDocuments"),r=[];return n.J(((e,n)=>{const i=t.store("remoteDocumentsV14"),s=function(e){return e.document?new z(U.fromString(e.document.name).popFirst(5)):e.noDocument?z.fromSegments(e.noDocument.path):e.unknownDocument?z.fromSegments(e.unknownDocument.path):v()}(n).path.toArray(),o={prefixPath:s.slice(0,s.length-2),collectionGroup:s[s.length-2],documentId:s[s.length-1],readTime:n.readTime||[0,0],unknownDocument:n.unknownDocument,noDocument:n.noDocument,document:n.document,hasCommittedMutations:!!n.hasCommittedMutations};r.push(i.put(o))})).next((()=>ie.waitFor(r)))}si(e,t){const n=t.store("mutations"),r=to(this.serializer),i=new wo(_o.Hr,this.serializer.ct);return n.U().next((e=>{const n=new Map;return e.forEach((e=>{var t;let r=null!==(t=n.get(e.userId))&&void 0!==t?t:Xn();Ki(this.serializer,e).keys().forEach((e=>r=r.add(e))),n.set(e.userId,r)})),ie.forEach(n,((e,n)=>{const s=new l(n),o=ts.lt(this.serializer,s),a=i.getIndexManager(s),c=Rs.lt(s,this.serializer,a,i.referenceDelegate);return new uo(r,c,o,a).recalculateAndSaveOverlaysForDocumentKeys(new We(t,ye.oe),e).next()}))}))}}function So(e){e.createObjectStore("targetDocuments",{keyPath:Le}).createIndex("documentTargetsIndex",Pe,{unique:!0}),e.createObjectStore("targets",{keyPath:"targetId"}).createIndex("queryTargetsIndex",Oe,{unique:!0}),e.createObjectStore("targetGlobal")}const To="Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";class xo{constructor(e,t,n,r,i,s,o,a,c,u,l=16){if(this.allowTabSynchronization=e,this.persistenceKey=t,this.clientId=n,this.oi=i,this.window=s,this.document=o,this._i=c,this.ai=u,this.ui=l,this.kr=null,this.qr=!1,this.isPrimary=!1,this.networkEnabled=!0,this.ci=null,this.inForeground=!1,this.li=null,this.hi=null,this.Pi=Number.NEGATIVE_INFINITY,this.Ii=e=>Promise.resolve(),!xo.D())throw new I(_.UNIMPLEMENTED,"This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");this.referenceDelegate=new Ys(this,r),this.Ti=t+"main",this.serializer=new Ui(a),this.Ei=new oe(this.Ti,this.ui,new Eo(this.serializer)),this.Qr=new js(this.referenceDelegate,this.serializer),this.remoteDocumentCache=to(this.serializer),this.$r=new Xi,this.window&&this.window.localStorage?this.di=this.window.localStorage:(this.di=null,!1===u&&g("IndexedDbPersistence","LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."))}start(){return this.Ai().then((()=>{if(!this.isPrimary&&!this.allowTabSynchronization)throw new I(_.FAILED_PRECONDITION,To);return this.Ri(),this.Vi(),this.mi(),this.runTransaction("getHighestListenSequenceNumber","readonly",(e=>this.Qr.getHighestSequenceNumber(e)))})).then((e=>{this.kr=new ye(e,this._i)})).then((()=>{this.qr=!0})).catch((e=>(this.Ei&&this.Ei.close(),Promise.reject(e))))}fi(e){return this.Ii=async t=>{if(this.started)return e(t)},e(this.isPrimary)}setDatabaseDeletedListener(e){this.Ei.L((async t=>{null===t.newVersion&&await e()}))}setNetworkEnabled(e){this.networkEnabled!==e&&(this.networkEnabled=e,this.oi.enqueueAndForget((async()=>{this.started&&await this.Ai()})))}Ai(){return this.runTransaction("updateClientMetadataAndTryBecomePrimary","readwrite",(e=>Do(e).put({clientId:this.clientId,updateTimeMs:Date.now(),networkEnabled:this.networkEnabled,inForeground:this.inForeground}).next((()=>{if(this.isPrimary)return this.gi(e).next((e=>{e||(this.isPrimary=!1,this.oi.enqueueRetryable((()=>this.Ii(!1))))}))})).next((()=>this.pi(e))).next((t=>this.isPrimary&&!t?this.yi(e).next((()=>!1)):!!t&&this.wi(e).next((()=>!0)))))).catch((e=>{if(le(e))return p("IndexedDbPersistence","Failed to extend owner lease: ",e),this.isPrimary;if(!this.allowTabSynchronization)throw e;return p("IndexedDbPersistence","Releasing owner lease after error during lease refresh",e),!1})).then((e=>{this.isPrimary!==e&&this.oi.enqueueRetryable((()=>this.Ii(e))),this.isPrimary=e}))}gi(e){return Co(e).get("owner").next((e=>ie.resolve(this.Si(e))))}bi(e){return Do(e).delete(this.clientId)}async Di(){if(this.isPrimary&&!this.Ci(this.Pi,18e5)){this.Pi=Date.now();const e=await this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",(e=>{const t=Je(e,"clientMetadata");return t.U().next((e=>{const n=this.vi(e,18e5),r=e.filter((e=>-1===n.indexOf(e)));return ie.forEach(r,(e=>t.delete(e.clientId))).next((()=>r))}))})).catch((()=>[]));if(this.di)for(const t of e)this.di.removeItem(this.Fi(t.clientId))}}mi(){this.hi=this.oi.enqueueAfterDelay("client_metadata_refresh",4e3,(()=>this.Ai().then((()=>this.Di())).then((()=>this.mi()))))}Si(e){return!!e&&e.ownerId===this.clientId}pi(e){return this.ai?ie.resolve(!0):Co(e).get("owner").next((t=>{if(null!==t&&this.Ci(t.leaseTimestampMs,5e3)&&!this.Mi(t.ownerId)){if(this.Si(t)&&this.networkEnabled)return!0;if(!this.Si(t)){if(!t.allowTabSynchronization)throw new I(_.FAILED_PRECONDITION,To);return!1}}return!(!this.networkEnabled||!this.inForeground)||Do(e).U().next((e=>void 0===this.vi(e,5e3).find((e=>{if(this.clientId!==e.clientId){const t=!this.networkEnabled&&e.networkEnabled,n=!this.inForeground&&e.inForeground,r=this.networkEnabled===e.networkEnabled;if(t||n&&r)return!0}return!1}))))})).next((e=>(this.isPrimary!==e&&p("IndexedDbPersistence",`Client ${e?"is":"is not"} eligible for a primary lease.`),e)))}async shutdown(){this.qr=!1,this.xi(),this.hi&&(this.hi.cancel(),this.hi=null),this.Oi(),this.Ni(),await this.Ei.runTransaction("shutdown","readwrite",["owner","clientMetadata"],(e=>{const t=new We(e,ye.oe);return this.yi(t).next((()=>this.bi(t)))})),this.Ei.close(),this.Li()}vi(e,t){return e.filter((e=>this.Ci(e.updateTimeMs,t)&&!this.Mi(e.clientId)))}Bi(){return this.runTransaction("getActiveClients","readonly",(e=>Do(e).U().next((e=>this.vi(e,18e5).map((e=>e.clientId))))))}get started(){return this.qr}getMutationQueue(e,t){return Rs.lt(e,this.serializer,t,this.referenceDelegate)}getTargetCache(){return this.Qr}getRemoteDocumentCache(){return this.remoteDocumentCache}getIndexManager(e){return new xs(e,this.serializer.ct.databaseId)}getDocumentOverlayCache(e){return ts.lt(this.serializer,e)}getBundleCache(){return this.$r}runTransaction(e,t,n){p("IndexedDbPersistence","Starting transaction:",e);const r="readonly"===t?"readonly":"readwrite",i=function(e){return 16===e?He:15===e?Qe:14===e?$e:13===e?Ke:12===e?Ge:11===e?ze:void v()}(this.ui);let s;return this.Ei.runTransaction(e,r,i,(r=>(s=new We(r,this.kr?this.kr.next():ye.oe),"readwrite-primary"===t?this.gi(s).next((e=>!!e||this.pi(s))).next((t=>{if(!t)throw g(`Failed to obtain primary lease for action '${e}'.`),this.isPrimary=!1,this.oi.enqueueRetryable((()=>this.Ii(!1))),new I(_.FAILED_PRECONDITION,te);return n(s)})).next((e=>this.wi(s).next((()=>e)))):this.ki(s).next((()=>n(s)))))).then((e=>(s.raiseOnCommittedEvent(),e)))}ki(e){return Co(e).get("owner").next((e=>{if(null!==e&&this.Ci(e.leaseTimestampMs,5e3)&&!this.Mi(e.ownerId)&&!this.Si(e)&&!(this.ai||this.allowTabSynchronization&&e.allowTabSynchronization))throw new I(_.FAILED_PRECONDITION,To)}))}wi(e){const t={ownerId:this.clientId,allowTabSynchronization:this.allowTabSynchronization,leaseTimestampMs:Date.now()};return Co(e).put("owner",t)}static D(){return oe.D()}yi(e){const t=Co(e);return t.get("owner").next((e=>this.Si(e)?(p("IndexedDbPersistence","Releasing primary lease."),t.delete("owner")):ie.resolve()))}Ci(e,t){const n=Date.now();return!(e<n-t||e>n&&(g(`Detected an update time that is in the future: ${e} > ${n}`),1))}Ri(){null!==this.document&&"function"==typeof this.document.addEventListener&&(this.li=()=>{this.oi.enqueueAndForget((()=>(this.inForeground="visible"===this.document.visibilityState,this.Ai())))},this.document.addEventListener("visibilitychange",this.li),this.inForeground="visible"===this.document.visibilityState)}Oi(){this.li&&(this.document.removeEventListener("visibilitychange",this.li),this.li=null)}Vi(){var e;"function"==typeof(null===(e=this.window)||void 0===e?void 0:e.addEventListener)&&(this.ci=()=>{this.xi();const e=/(?:Version|Mobile)\/1[456]/;o.isSafari()&&(navigator.appVersion.match(e)||navigator.userAgent.match(e))&&this.oi.enterRestrictedMode(!0),this.oi.enqueueAndForget((()=>this.shutdown()))},this.window.addEventListener("pagehide",this.ci))}Ni(){this.ci&&(this.window.removeEventListener("pagehide",this.ci),this.ci=null)}Mi(e){var t;try{const n=null!==(null===(t=this.di)||void 0===t?void 0:t.getItem(this.Fi(e)));return p("IndexedDbPersistence",`Client '${e}' ${n?"is":"is not"} zombied in LocalStorage`),n}catch(e){return g("IndexedDbPersistence","Failed to get zombied client id.",e),!1}}xi(){if(this.di)try{this.di.setItem(this.Fi(this.clientId),String(Date.now()))}catch(e){g("Failed to set zombie client id.",e)}}Li(){if(this.di)try{this.di.removeItem(this.Fi(this.clientId))}catch(e){}}Fi(e){return`firestore_zombie_${this.persistenceKey}_${e}`}}function Co(e){return Je(e,"owner")}function Do(e){return Je(e,"clientMetadata")}function Ao(e,t){let n=e.projectId;return e.isDefaultDatabase||(n+="."+e.database),"firestore/"+t+"/"+n+"/"}class No{constructor(e,t,n,r){this.targetId=e,this.fromCache=t,this.qi=n,this.Qi=r}static Ki(e,t){let n=Xn(),r=Xn();for(const e of t.docChanges)switch(e.type){case 0:n=n.add(e.doc.key);break;case 1:r=r.add(e.doc.key)}return new No(e,t.fromCache,n,r)}}class ko{constructor(){this._documentReadCount=0}get documentReadCount(){return this._documentReadCount}incrementDocumentReadCount(e){this._documentReadCount+=e}}class Oo{constructor(){this.$i=!1,this.Ui=!1,this.Wi=100,this.Gi=o.isSafari()?8:ae(o.getUA())>0?6:4}initialize(e,t){this.zi=e,this.indexManager=t,this.$i=!0}getDocumentsMatchingQuery(e,t,n,r){const i={result:null};return this.ji(e,t).next((e=>{i.result=e})).next((()=>{if(!i.result)return this.Hi(e,t,r,n).next((e=>{i.result=e}))})).next((()=>{if(i.result)return;const n=new ko;return this.Ji(e,t,n).next((r=>{if(i.result=r,this.Ui)return this.Yi(e,t,n,r.size)}))})).next((()=>i.result))}Yi(e,t,n,r){return n.documentReadCount<this.Wi?(f()<=s.LogLevel.DEBUG&&p("QueryEngine","SDK will not create cache indexes for query:",Rn(t),"since it only creates cache indexes for collection contains","more than or equal to",this.Wi,"documents"),ie.resolve()):(f()<=s.LogLevel.DEBUG&&p("QueryEngine","Query:",Rn(t),"scans",n.documentReadCount,"local documents and returns",r,"documents as results."),n.documentReadCount>this.Gi*r?(f()<=s.LogLevel.DEBUG&&p("QueryEngine","The SDK decides to create cache indexes for query:",Rn(t),"as using cache indexes may help improve performance."),this.indexManager.createTargetIndexes(e,An(t))):ie.resolve())}ji(e,t){if(xn(t))return ie.resolve(null);let n=An(t);return this.indexManager.getIndexType(e,n).next((r=>0===r?null:(null!==t.limit&&1===r&&(t=Ln(t,null,"F"),n=An(t)),this.indexManager.getDocumentsMatchingTarget(e,n).next((r=>{const i=Xn(...r);return this.zi.getDocuments(e,i).next((r=>this.indexManager.getMinOffset(e,n).next((n=>{const s=this.Zi(t,r);return this.Xi(t,s,i,n.readTime)?this.ji(e,Ln(t,null,"F")):this.es(e,s,t,n)}))))})))))}Hi(e,t,n,r){return xn(t)||r.isEqual(V.min())?ie.resolve(null):this.zi.getDocuments(e,n).next((i=>{const o=this.Zi(t,i);return this.Xi(t,o,n,r)?ie.resolve(null):(f()<=s.LogLevel.DEBUG&&p("QueryEngine","Re-using previous result from %s to execute query: %s",r.toString(),Rn(t)),this.es(e,o,t,Y(r,-1)).next((e=>e)))}))}Zi(e,t){let n=new it(Bn(e));return t.forEach(((t,r)=>{Fn(e,r)&&(n=n.add(r))})),n}Xi(e,t,n,r){if(null===e.limit)return!1;if(n.size!==t.size)return!0;const i="F"===e.limitType?t.last():t.first();return!!i&&(i.hasPendingWrites||i.version.compareTo(r)>0)}Ji(e,t,n){return f()<=s.LogLevel.DEBUG&&p("QueryEngine","Using full collection scan to execute query:",Rn(t)),this.zi.getDocumentsMatchingQuery(e,t,Z.min(),n)}es(e,t,n,r){return this.zi.getDocumentsMatchingQuery(e,n,r).next((e=>(t.forEach((t=>{e=e.insert(t.key,t)})),e)))}}class Lo{constructor(e,t,n,r){this.persistence=e,this.ts=t,this.serializer=r,this.ns=new tt(P),this.rs=new qn((e=>yn(e)),vn),this.ss=new Map,this.os=e.getRemoteDocumentCache(),this.Qr=e.getTargetCache(),this.$r=e.getBundleCache(),this._s(n)}_s(e){this.documentOverlayCache=this.persistence.getDocumentOverlayCache(e),this.indexManager=this.persistence.getIndexManager(e),this.mutationQueue=this.persistence.getMutationQueue(e,this.indexManager),this.localDocuments=new uo(this.os,this.mutationQueue,this.documentOverlayCache,this.indexManager),this.os.setIndexManager(this.indexManager),this.ts.initialize(this.localDocuments,this.indexManager)}collectGarbage(e){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(t=>e.collect(t,this.ns)))}}function Po(e,t,n,r){return new Lo(e,t,n,r)}async function Mo(e,t){const n=b(e);return await n.persistence.runTransaction("Handle user change","readonly",(e=>{let r;return n.mutationQueue.getAllMutationBatches(e).next((i=>(r=i,n._s(t),n.mutationQueue.getAllMutationBatches(e)))).next((t=>{const i=[],s=[];let o=Xn();for(const e of r){i.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}for(const e of t){s.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}return n.localDocuments.getDocuments(e,o).next((e=>({us:e,removedBatchIds:i,addedBatchIds:s})))}))}))}function Ro(e){const t=b(e);return t.persistence.runTransaction("Get last remote snapshot version","readonly",(e=>t.Qr.getLastRemoteSnapshotVersion(e)))}function Fo(e,t,n){let r=Xn(),i=Xn();return n.forEach((e=>r=r.add(e))),t.getEntries(e,r).next((e=>{let r=zn();return n.forEach(((n,s)=>{const o=e.get(n);s.isFoundDocument()!==o.isFoundDocument()&&(i=i.add(n)),s.isNoDocument()&&s.version.isEqual(V.min())?(t.removeEntry(n,s.readTime),r=r.insert(n,s)):!o.isValidDocument()||s.version.compareTo(o.version)>0||0===s.version.compareTo(o.version)&&o.hasPendingWrites?(t.addEntry(s),r=r.insert(n,s)):p("LocalStore","Ignoring outdated watch update for ",n,". Current version:",o.version," Watch version:",s.version)})),{cs:r,ls:i}}))}function Vo(e,t){const n=b(e);return n.persistence.runTransaction("Get next mutation batch","readonly",(e=>(void 0===t&&(t=-1),n.mutationQueue.getNextMutationBatchAfterBatchId(e,t))))}function Bo(e,t){const n=b(e);return n.persistence.runTransaction("Allocate target","readwrite",(e=>{let r;return n.Qr.getTargetData(e,t).next((i=>i?(r=i,ie.resolve(r)):n.Qr.allocateTargetId(e).next((i=>(r=new Bi(t,i,"TargetPurposeListen",e.currentSequenceNumber),n.Qr.addTargetData(e,r).next((()=>r)))))))})).then((e=>{const r=n.ns.get(e.targetId);return(null===r||e.snapshotVersion.compareTo(r.snapshotVersion)>0)&&(n.ns=n.ns.insert(e.targetId,e),n.rs.set(t,e.targetId)),e}))}async function Uo(e,t,n){const r=b(e),i=r.ns.get(t),s=n?"readwrite":"readwrite-primary";try{n||await r.persistence.runTransaction("Release target",s,(e=>r.persistence.referenceDelegate.removeTarget(e,i)))}catch(e){if(!le(e))throw e;p("LocalStore",`Failed to update sequence numbers for target ${t}: ${e}`)}r.ns=r.ns.remove(t),r.rs.delete(i.target)}function qo(e,t,n){const r=b(e);let i=V.min(),s=Xn();return r.persistence.runTransaction("Execute query","readwrite",(e=>function(e,t,n){const r=b(e),i=r.rs.get(n);return void 0!==i?ie.resolve(r.ns.get(i)):r.Qr.getTargetData(t,n)}(r,e,An(t)).next((t=>{if(t)return i=t.lastLimboFreeSnapshotVersion,r.Qr.getMatchingKeysForTargetId(e,t.targetId).next((e=>{s=e}))})).next((()=>r.ts.getDocumentsMatchingQuery(e,t,n?i:V.min(),n?s:Xn()))).next((e=>(Go(r,Vn(t),e),{documents:e,hs:s})))))}function jo(e,t){const n=b(e),r=b(n.Qr),i=n.ns.get(t);return i?Promise.resolve(i.target):n.persistence.runTransaction("Get target data","readonly",(e=>r.ot(e,t).next((e=>e?e.target:null))))}function zo(e,t){const n=b(e),r=n.ss.get(t)||V.min();return n.persistence.runTransaction("Get new document changes","readonly",(e=>n.os.getAllFromCollectionGroup(e,t,Y(r,-1),Number.MAX_SAFE_INTEGER))).then((e=>(Go(n,t,e),e)))}function Go(e,t,n){let r=e.ss.get(t)||V.min();n.forEach(((e,t)=>{t.readTime.compareTo(r)>0&&(r=t.readTime)})),e.ss.set(t,r)}async function Ko(e,t,n=Xn()){const r=await Bo(e,An(Hi(t.bundledQuery))),i=b(e);return i.persistence.runTransaction("Save named query","readwrite",(e=>{const s=di(t.readTime);if(r.snapshotVersion.compareTo(s)>=0)return i.$r.saveNamedQuery(e,t);const o=r.withResumeToken(ut.EMPTY_BYTE_STRING,s);return i.ns=i.ns.insert(o.targetId,o),i.Qr.updateTargetData(e,o).next((()=>i.Qr.removeMatchingKeysForTargetId(e,r.targetId))).next((()=>i.Qr.addMatchingKeys(e,n,r.targetId))).next((()=>i.$r.saveNamedQuery(e,t)))}))}function $o(e,t){return`firestore_clients_${e}_${t}`}function Qo(e,t,n){let r=`firestore_mutations_${e}_${n}`;return t.isAuthenticated()&&(r+=`_${t.uid}`),r}function Ho(e,t){return`firestore_targets_${e}_${t}`}class Wo{constructor(e,t,n,r){this.user=e,this.batchId=t,this.state=n,this.error=r}static Es(e,t,n){const r=JSON.parse(n);let i,s="object"==typeof r&&-1!==["pending","acknowledged","rejected"].indexOf(r.state)&&(void 0===r.error||"object"==typeof r.error);return s&&r.error&&(s="string"==typeof r.error.message&&"string"==typeof r.error.code,s&&(i=new I(r.error.code,r.error.message))),s?new Wo(e,t,r.state,i):(g("SharedClientState",`Failed to parse mutation state for ID '${t}': ${n}`),null)}ds(){const e={state:this.state,updateTimeMs:Date.now()};return this.error&&(e.error={code:this.error.code,message:this.error.message}),JSON.stringify(e)}}class Jo{constructor(e,t,n){this.targetId=e,this.state=t,this.error=n}static Es(e,t){const n=JSON.parse(t);let r,i="object"==typeof n&&-1!==["not-current","current","rejected"].indexOf(n.state)&&(void 0===n.error||"object"==typeof n.error);return i&&n.error&&(i="string"==typeof n.error.message&&"string"==typeof n.error.code,i&&(r=new I(n.error.code,n.error.message))),i?new Jo(e,n.state,r):(g("SharedClientState",`Failed to parse target state for ID '${e}': ${t}`),null)}ds(){const e={state:this.state,updateTimeMs:Date.now()};return this.error&&(e.error={code:this.error.code,message:this.error.message}),JSON.stringify(e)}}class Yo{constructor(e,t){this.clientId=e,this.activeTargetIds=t}static Es(e,t){const n=JSON.parse(t);let r="object"==typeof n&&n.activeTargetIds instanceof Array,i=er();for(let e=0;r&&e<n.activeTargetIds.length;++e)r=be(n.activeTargetIds[e]),i=i.add(n.activeTargetIds[e]);return r?new Yo(e,i):(g("SharedClientState",`Failed to parse client data for instance '${e}': ${t}`),null)}}class Xo{constructor(e,t){this.clientId=e,this.onlineState=t}static Es(e){const t=JSON.parse(e);return"object"==typeof t&&-1!==["Unknown","Online","Offline"].indexOf(t.onlineState)&&"string"==typeof t.clientId?new Xo(t.clientId,t.onlineState):(g("SharedClientState",`Failed to parse online state: ${e}`),null)}}class Zo{constructor(){this.activeTargetIds=er()}As(e){this.activeTargetIds=this.activeTargetIds.add(e)}Rs(e){this.activeTargetIds=this.activeTargetIds.delete(e)}ds(){const e={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(e)}}class ea{constructor(e,t,n,r,i){this.window=e,this.oi=t,this.persistenceKey=n,this.Vs=r,this.syncEngine=null,this.onlineStateHandler=null,this.sequenceNumberHandler=null,this.fs=this.gs.bind(this),this.ps=new tt(P),this.started=!1,this.ys=[];const s=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");this.storage=this.window.localStorage,this.currentUser=i,this.ws=$o(this.persistenceKey,this.Vs),this.Ss=function(e){return`firestore_sequence_number_${e}`}(this.persistenceKey),this.ps=this.ps.insert(this.Vs,new Zo),this.bs=new RegExp(`^firestore_clients_${s}_([^_]*)$`),this.Ds=new RegExp(`^firestore_mutations_${s}_(\\d+)(?:_(.*))?$`),this.Cs=new RegExp(`^firestore_targets_${s}_(\\d+)$`),this.vs=function(e){return`firestore_online_state_${e}`}(this.persistenceKey),this.Fs=function(e){return`firestore_bundle_loaded_v2_${e}`}(this.persistenceKey),this.window.addEventListener("storage",this.fs)}static D(e){return!(!e||!e.localStorage)}async start(){const e=await this.syncEngine.Bi();for(const t of e){if(t===this.Vs)continue;const e=this.getItem($o(this.persistenceKey,t));if(e){const n=Yo.Es(t,e);n&&(this.ps=this.ps.insert(n.clientId,n))}}this.Ms();const t=this.storage.getItem(this.vs);if(t){const e=this.xs(t);e&&this.Os(e)}for(const e of this.ys)this.gs(e);this.ys=[],this.window.addEventListener("pagehide",(()=>this.shutdown())),this.started=!0}writeSequenceNumber(e){this.setItem(this.Ss,JSON.stringify(e))}getAllActiveQueryTargets(){return this.Ns(this.ps)}isActiveQueryTarget(e){let t=!1;return this.ps.forEach(((n,r)=>{r.activeTargetIds.has(e)&&(t=!0)})),t}addPendingMutation(e){this.Ls(e,"pending")}updateMutationState(e,t,n){this.Ls(e,t,n),this.Bs(e)}addLocalQueryTarget(e){let t="not-current";if(this.isActiveQueryTarget(e)){const n=this.storage.getItem(Ho(this.persistenceKey,e));if(n){const r=Jo.Es(e,n);r&&(t=r.state)}}return this.ks.As(e),this.Ms(),t}removeLocalQueryTarget(e){this.ks.Rs(e),this.Ms()}isLocalQueryTarget(e){return this.ks.activeTargetIds.has(e)}clearQueryState(e){this.removeItem(Ho(this.persistenceKey,e))}updateQueryState(e,t,n){this.qs(e,t,n)}handleUserChange(e,t,n){t.forEach((e=>{this.Bs(e)})),this.currentUser=e,n.forEach((e=>{this.addPendingMutation(e)}))}setOnlineState(e){this.Qs(e)}notifyBundleLoaded(e){this.Ks(e)}shutdown(){this.started&&(this.window.removeEventListener("storage",this.fs),this.removeItem(this.ws),this.started=!1)}getItem(e){const t=this.storage.getItem(e);return p("SharedClientState","READ",e,t),t}setItem(e,t){p("SharedClientState","SET",e,t),this.storage.setItem(e,t)}removeItem(e){p("SharedClientState","REMOVE",e),this.storage.removeItem(e)}gs(e){const t=e;if(t.storageArea===this.storage){if(p("SharedClientState","EVENT",t.key,t.newValue),t.key===this.ws)return void g("Received WebStorage notification for local change. Another client might have garbage-collected our state");this.oi.enqueueRetryable((async()=>{if(this.started){if(null!==t.key)if(this.bs.test(t.key)){if(null==t.newValue){const e=this.$s(t.key);return this.Us(e,null)}{const e=this.Ws(t.key,t.newValue);if(e)return this.Us(e.clientId,e)}}else if(this.Ds.test(t.key)){if(null!==t.newValue){const e=this.Gs(t.key,t.newValue);if(e)return this.zs(e)}}else if(this.Cs.test(t.key)){if(null!==t.newValue){const e=this.js(t.key,t.newValue);if(e)return this.Hs(e)}}else if(t.key===this.vs){if(null!==t.newValue){const e=this.xs(t.newValue);if(e)return this.Os(e)}}else if(t.key===this.Ss){const e=function(e){let t=ye.oe;if(null!=e)try{const n=JSON.parse(e);w("number"==typeof n),t=n}catch(e){g("SharedClientState","Failed to read sequence number from WebStorage",e)}return t}(t.newValue);e!==ye.oe&&this.sequenceNumberHandler(e)}else if(t.key===this.Fs){const e=this.Js(t.newValue);await Promise.all(e.map((e=>this.syncEngine.Ys(e))))}}else this.ys.push(t)}))}}get ks(){return this.ps.get(this.Vs)}Ms(){this.setItem(this.ws,this.ks.ds())}Ls(e,t,n){const r=new Wo(this.currentUser,e,t,n),i=Qo(this.persistenceKey,this.currentUser,e);this.setItem(i,r.ds())}Bs(e){const t=Qo(this.persistenceKey,this.currentUser,e);this.removeItem(t)}Qs(e){const t={clientId:this.Vs,onlineState:e};this.storage.setItem(this.vs,JSON.stringify(t))}qs(e,t,n){const r=Ho(this.persistenceKey,e),i=new Jo(e,t,n);this.setItem(r,i.ds())}Ks(e){const t=JSON.stringify(Array.from(e));this.setItem(this.Fs,t)}$s(e){const t=this.bs.exec(e);return t?t[1]:null}Ws(e,t){const n=this.$s(e);return Yo.Es(n,t)}Gs(e,t){const n=this.Ds.exec(e),r=Number(n[1]),i=void 0!==n[2]?n[2]:null;return Wo.Es(new l(i),r,t)}js(e,t){const n=this.Cs.exec(e),r=Number(n[1]);return Jo.Es(r,t)}xs(e){return Xo.Es(e)}Js(e){return JSON.parse(e)}async zs(e){if(e.user.uid===this.currentUser.uid)return this.syncEngine.Zs(e.batchId,e.state,e.error);p("SharedClientState",`Ignoring mutation for non-active user ${e.user.uid}`)}Hs(e){return this.syncEngine.Xs(e.targetId,e.state,e.error)}Us(e,t){const n=t?this.ps.insert(e,t):this.ps.remove(e),r=this.Ns(this.ps),i=this.Ns(n),s=[],o=[];return i.forEach((e=>{r.has(e)||s.push(e)})),r.forEach((e=>{i.has(e)||o.push(e)})),this.syncEngine.eo(s,o).then((()=>{this.ps=n}))}Os(e){this.ps.get(e.clientId)&&this.onlineStateHandler(e.onlineState)}Ns(e){let t=er();return e.forEach(((e,n)=>{t=t.unionWith(n.activeTargetIds)})),t}}class ta{constructor(){this.no=new Zo,this.ro={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(e){}updateMutationState(e,t,n){}addLocalQueryTarget(e){return this.no.As(e),this.ro[e]||"not-current"}updateQueryState(e,t,n){this.ro[e]=t}removeLocalQueryTarget(e){this.no.Rs(e)}isLocalQueryTarget(e){return this.no.activeTargetIds.has(e)}clearQueryState(e){delete this.ro[e]}getAllActiveQueryTargets(){return this.no.activeTargetIds}isActiveQueryTarget(e){return this.no.activeTargetIds.has(e)}start(){return this.no=new Zo,Promise.resolve()}handleUserChange(e,t,n){}setOnlineState(e){}shutdown(){}writeSequenceNumber(e){}notifyBundleLoaded(e){}}class na{io(e){}shutdown(){}}class ra{constructor(){this.so=()=>this.oo(),this._o=()=>this.ao(),this.uo=[],this.co()}io(e){this.uo.push(e)}shutdown(){window.removeEventListener("online",this.so),window.removeEventListener("offline",this._o)}co(){window.addEventListener("online",this.so),window.addEventListener("offline",this._o)}oo(){p("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const e of this.uo)e(0)}ao(){p("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const e of this.uo)e(1)}static D(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}let ia=null;function sa(){return null===ia?ia=268435456+Math.round(2147483648*Math.random()):ia++,"0x"+ia.toString(16)}const oa={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery",RunAggregationQuery:"runAggregationQuery"};class aa{constructor(e){this.lo=e.lo,this.ho=e.ho}Po(e){this.Io=e}To(e){this.Eo=e}Ao(e){this.Ro=e}onMessage(e){this.Vo=e}close(){this.ho()}send(e){this.lo(e)}mo(){this.Io()}fo(){this.Eo()}po(e){this.Ro(e)}yo(e){this.Vo(e)}}const ca="WebChannelConnection";class ua extends class{constructor(e){this.databaseInfo=e,this.databaseId=e.databaseId;const t=e.ssl?"https":"http",n=encodeURIComponent(this.databaseId.projectId),r=encodeURIComponent(this.databaseId.database);this.wo=t+"://"+e.host,this.So=`projects/${n}/databases/${r}`,this.bo="(default)"===this.databaseId.database?`project_id=${n}`:`project_id=${n}&database_id=${r}`}get Do(){return!1}Co(e,t,n,r,i){const s=sa(),o=this.vo(e,t.toUriEncodedString());p("RestConnection",`Sending RPC '${e}' ${s}:`,o,n);const a={"google-cloud-resource-prefix":this.So,"x-goog-request-params":this.bo};return this.Fo(a,r,i),this.Mo(e,o,a,n).then((t=>(p("RestConnection",`Received RPC '${e}' ${s}: `,t),t)),(t=>{throw m("RestConnection",`RPC '${e}' ${s} failed with error: `,t,"url: ",o,"request:",n),t}))}xo(e,t,n,r,i,s){return this.Co(e,t,n,r,i)}Fo(e,t,n){e["X-Goog-Api-Client"]="gl-js/ fire/"+h,e["Content-Type"]="text/plain",this.databaseInfo.appId&&(e["X-Firebase-GMPID"]=this.databaseInfo.appId),t&&t.headers.forEach(((t,n)=>e[n]=t)),n&&n.headers.forEach(((t,n)=>e[n]=t))}vo(e,t){const n=oa[e];return`${this.wo}/v1/${t}:${n}`}terminate(){}}{constructor(e){super(e),this.forceLongPolling=e.forceLongPolling,this.autoDetectLongPolling=e.autoDetectLongPolling,this.useFetchStreams=e.useFetchStreams,this.longPollingOptions=e.longPollingOptions}Mo(e,t,n,r){const i=sa();return new Promise(((s,o)=>{const a=new c.XhrIo;a.setWithCredentials(!0),a.listenOnce(c.EventType.COMPLETE,(()=>{try{switch(a.getLastErrorCode()){case c.ErrorCode.NO_ERROR:const t=a.getResponseJson();p(ca,`XHR for RPC '${e}' ${i} received:`,JSON.stringify(t)),s(t);break;case c.ErrorCode.TIMEOUT:p(ca,`RPC '${e}' ${i} timed out`),o(new I(_.DEADLINE_EXCEEDED,"Request time out"));break;case c.ErrorCode.HTTP_ERROR:const n=a.getStatus();if(p(ca,`RPC '${e}' ${i} failed with status:`,n,"response text:",a.getResponseText()),n>0){let e=a.getResponseJson();Array.isArray(e)&&(e=e[0]);const t=null==e?void 0:e.error;if(t&&t.status&&t.message){const e=function(e){const t=e.toLowerCase().replace(/_/g,"-");return Object.values(_).indexOf(t)>=0?t:_.UNKNOWN}(t.status);o(new I(e,t.message))}else o(new I(_.UNKNOWN,"Server responded with status "+a.getStatus()))}else o(new I(_.UNAVAILABLE,"Connection failed."));break;default:v()}}finally{p(ca,`RPC '${e}' ${i} completed.`)}}));const u=JSON.stringify(r);p(ca,`RPC '${e}' ${i} sending request:`,r),a.send(t,"POST",u,n,15)}))}Oo(e,t,n){const r=sa(),i=[this.wo,"/","google.firestore.v1.Firestore","/",e,"/channel"],s=c.createWebChannelTransport(),o=c.getStatEventTarget(),a={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling},u=this.longPollingOptions.timeoutSeconds;void 0!==u&&(a.longPollingTimeout=Math.round(1e3*u)),this.useFetchStreams&&(a.xmlHttpFactory=new c.FetchXmlHttpFactory({})),this.Fo(a.initMessageHeaders,t,n),a.encodeInitMessageHeaders=!0;const l=i.join("");p(ca,`Creating RPC '${e}' stream ${r}: ${l}`,a);const h=s.createWebChannel(l,a);let d=!1,f=!1;const g=new aa({lo:t=>{f?p(ca,`Not sending because RPC '${e}' stream ${r} is closed:`,t):(d||(p(ca,`Opening RPC '${e}' stream ${r} transport.`),h.open(),d=!0),p(ca,`RPC '${e}' stream ${r} sending:`,t),h.send(t))},ho:()=>h.close()}),y=(e,t,n)=>{e.listen(t,(e=>{try{n(e)}catch(e){setTimeout((()=>{throw e}),0)}}))};return y(h,c.WebChannel.EventType.OPEN,(()=>{f||(p(ca,`RPC '${e}' stream ${r} transport opened.`),g.mo())})),y(h,c.WebChannel.EventType.CLOSE,(()=>{f||(f=!0,p(ca,`RPC '${e}' stream ${r} transport closed`),g.po())})),y(h,c.WebChannel.EventType.ERROR,(t=>{f||(f=!0,m(ca,`RPC '${e}' stream ${r} transport errored:`,t),g.po(new I(_.UNAVAILABLE,"The operation could not be completed")))})),y(h,c.WebChannel.EventType.MESSAGE,(t=>{var n;if(!f){const i=t.data[0];w(!!i);const s=i,o=s.error||(null===(n=s[0])||void 0===n?void 0:n.error);if(o){p(ca,`RPC '${e}' stream ${r} received error:`,o);const t=o.status;let n=function(e){const t=Vr[e];if(void 0!==t)return qr(t)}(t),i=o.message;void 0===n&&(n=_.INTERNAL,i="Unknown error status: "+t+" with message "+o.message),f=!0,g.po(new I(n,i)),h.close()}else p(ca,`RPC '${e}' stream ${r} received:`,i),g.yo(i)}})),y(o,c.Event.STAT_EVENT,(t=>{t.stat===c.Stat.PROXY?p(ca,`RPC '${e}' stream ${r} detected buffering proxy`):t.stat===c.Stat.NOPROXY&&p(ca,`RPC '${e}' stream ${r} detected no buffering proxy`)})),setTimeout((()=>{g.fo()}),0),g}}function la(){return"undefined"!=typeof window?window:null}function ha(){return"undefined"!=typeof document?document:null}function da(e){return new ai(e,!0)}class fa{constructor(e,t,n=1e3,r=1.5,i=6e4){this.oi=e,this.timerId=t,this.No=n,this.Lo=r,this.Bo=i,this.ko=0,this.qo=null,this.Qo=Date.now(),this.reset()}reset(){this.ko=0}Ko(){this.ko=this.Bo}$o(e){this.cancel();const t=Math.floor(this.ko+this.Uo()),n=Math.max(0,Date.now()-this.Qo),r=Math.max(0,t-n);r>0&&p("ExponentialBackoff",`Backing off for ${r} ms (base delay: ${this.ko} ms, delay with jitter: ${t} ms, last attempt: ${n} ms ago)`),this.qo=this.oi.enqueueAfterDelay(this.timerId,r,(()=>(this.Qo=Date.now(),e()))),this.ko*=this.Lo,this.ko<this.No&&(this.ko=this.No),this.ko>this.Bo&&(this.ko=this.Bo)}Wo(){null!==this.qo&&(this.qo.skipDelay(),this.qo=null)}cancel(){null!==this.qo&&(this.qo.cancel(),this.qo=null)}Uo(){return(Math.random()-.5)*this.ko}}class pa{constructor(e,t,n,r,i,s,o,a){this.oi=e,this.Go=n,this.zo=r,this.connection=i,this.authCredentialsProvider=s,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.jo=0,this.Ho=null,this.Jo=null,this.stream=null,this.Yo=new fa(e,t)}Zo(){return 1===this.state||5===this.state||this.Xo()}Xo(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.e_()}async stop(){this.Zo()&&await this.close(0)}t_(){this.state=0,this.Yo.reset()}n_(){this.Xo()&&null===this.Ho&&(this.Ho=this.oi.enqueueAfterDelay(this.Go,6e4,(()=>this.r_())))}i_(e){this.s_(),this.stream.send(e)}async r_(){if(this.Xo())return this.close(0)}s_(){this.Ho&&(this.Ho.cancel(),this.Ho=null)}o_(){this.Jo&&(this.Jo.cancel(),this.Jo=null)}async close(e,t){this.s_(),this.o_(),this.Yo.cancel(),this.jo++,4!==e?this.Yo.reset():t&&t.code===_.RESOURCE_EXHAUSTED?(g(t.toString()),g("Using maximum backoff delay to prevent overloading the backend."),this.Yo.Ko()):t&&t.code===_.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.__(),this.stream.close(),this.stream=null),this.state=e,await this.listener.Ao(t)}__(){}auth(){this.state=1;const e=this.a_(this.jo),t=this.jo;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([e,n])=>{this.jo===t&&this.u_(e,n)}),(t=>{e((()=>{const e=new I(_.UNKNOWN,"Fetching auth token failed: "+t.message);return this.c_(e)}))}))}u_(e,t){const n=this.a_(this.jo);this.stream=this.l_(e,t),this.stream.Po((()=>{n((()=>this.listener.Po()))})),this.stream.To((()=>{n((()=>(this.state=2,this.Jo=this.oi.enqueueAfterDelay(this.zo,1e4,(()=>(this.Xo()&&(this.state=3),Promise.resolve()))),this.listener.To())))})),this.stream.Ao((e=>{n((()=>this.c_(e)))})),this.stream.onMessage((e=>{n((()=>this.onMessage(e)))}))}e_(){this.state=5,this.Yo.$o((async()=>{this.state=0,this.start()}))}c_(e){return p("PersistentStream",`close with error: ${e}`),this.stream=null,this.close(4,e)}a_(e){return t=>{this.oi.enqueueAndForget((()=>this.jo===e?t():(p("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class ga extends pa{constructor(e,t,n,r,i,s){super(e,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",t,n,r,s),this.serializer=i}l_(e,t){return this.connection.Oo("Listen",e,t)}onMessage(e){this.Yo.reset();const t=function(e,t){let n;if("targetChange"in t){t.targetChange;const r=function(e){return"NO_CHANGE"===e?0:"ADD"===e?1:"REMOVE"===e?2:"CURRENT"===e?3:"RESET"===e?4:v()}(t.targetChange.targetChangeType||"NO_CHANGE"),i=t.targetChange.targetIds||[],s=function(e,t){return e.useProto3Json?(w(void 0===t||"string"==typeof t),ut.fromBase64String(t||"")):(w(void 0===t||t instanceof Buffer||t instanceof Uint8Array),ut.fromUint8Array(t||new Uint8Array))}(e,t.targetChange.resumeToken),o=t.targetChange.cause,a=o&&function(e){const t=void 0===e.code?_.UNKNOWN:qr(e.code);return new I(t,e.message||"")}(o);n=new Zr(r,i,s,a||null)}else if("documentChange"in t){t.documentChange;const r=t.documentChange;r.document,r.document.name,r.document.updateTime;const i=yi(e,r.document.name),s=di(r.document.updateTime),o=r.document.createTime?di(r.document.createTime):V.min(),a=new qt({mapValue:{fields:r.document.fields}}),c=zt.newFoundDocument(i,s,o,a),u=r.targetIds||[],l=r.removedTargetIds||[];n=new Yr(u,l,c.key,c)}else if("documentDelete"in t){t.documentDelete;const r=t.documentDelete;r.document;const i=yi(e,r.document),s=r.readTime?di(r.readTime):V.min(),o=zt.newNoDocument(i,s),a=r.removedTargetIds||[];n=new Yr([],a,o.key,o)}else if("documentRemove"in t){t.documentRemove;const r=t.documentRemove;r.document;const i=yi(e,r.document),s=r.removedTargetIds||[];n=new Yr([],s,i,null)}else{if(!("filter"in t))return v();{t.filter;const e=t.filter;e.targetId;const{count:r=0,unchangedNames:i}=e,s=new Fr(r,i),o=e.targetId;n=new Xr(o,s)}}return n}(this.serializer,e),n=function(e){if(!("targetChange"in e))return V.min();const t=e.targetChange;return t.targetIds&&t.targetIds.length?V.min():t.readTime?di(t.readTime):V.min()}(e);return this.listener.h_(t,n)}P_(e){const t={};t.database=bi(this.serializer),t.addTarget=function(e,t){let n;const r=t.target;if(n=wn(r)?{documents:xi(e,r)}:{query:Ci(e,r)._t},n.targetId=t.targetId,t.resumeToken.approximateByteSize()>0){n.resumeToken=li(e,t.resumeToken);const r=ci(e,t.expectedCount);null!==r&&(n.expectedCount=r)}else if(t.snapshotVersion.compareTo(V.min())>0){n.readTime=ui(e,t.snapshotVersion.toTimestamp());const r=ci(e,t.expectedCount);null!==r&&(n.expectedCount=r)}return n}(this.serializer,e);const n=function(e,t){const n=function(e){switch(e){case"TargetPurposeListen":return null;case"TargetPurposeExistenceFilterMismatch":return"existence-filter-mismatch";case"TargetPurposeExistenceFilterMismatchBloom":return"existence-filter-mismatch-bloom";case"TargetPurposeLimboResolution":return"limbo-document";default:return v()}}(t.purpose);return null==n?null:{"goog-listen-tags":n}}(this.serializer,e);n&&(t.labels=n),this.i_(t)}I_(e){const t={};t.database=bi(this.serializer),t.removeTarget=e,this.i_(t)}}class ma extends pa{constructor(e,t,n,r,i,s){super(e,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",t,n,r,s),this.serializer=i,this.T_=!1}get E_(){return this.T_}start(){this.T_=!1,this.lastStreamToken=void 0,super.start()}__(){this.T_&&this.d_([])}l_(e,t){return this.connection.Oo("Write",e,t)}onMessage(e){if(w(!!e.streamToken),this.lastStreamToken=e.streamToken,this.T_){this.Yo.reset();const t=function(e,t){return e&&e.length>0?(w(void 0!==t),e.map((e=>function(e,t){let n=e.updateTime?di(e.updateTime):di(t);return n.isEqual(V.min())&&(n=di(t)),new yr(n,e.transformResults||[])}(e,t)))):[]}(e.writeResults,e.commitTime),n=di(e.commitTime);return this.listener.A_(n,t)}return w(!e.writeResults||0===e.writeResults.length),this.T_=!0,this.listener.R_()}V_(){const e={};e.database=bi(this.serializer),this.i_(e)}d_(e){const t={streamToken:this.lastStreamToken,writes:e.map((e=>Si(this.serializer,e)))};this.i_(t)}}class ya extends class{}{constructor(e,t,n,r){super(),this.authCredentials=e,this.appCheckCredentials=t,this.connection=n,this.serializer=r,this.m_=!1}f_(){if(this.m_)throw new I(_.FAILED_PRECONDITION,"The client has already been terminated.")}Co(e,t,n,r){return this.f_(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([i,s])=>this.connection.Co(e,pi(t,n),r,i,s))).catch((e=>{throw"FirebaseError"===e.name?(e.code===_.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new I(_.UNKNOWN,e.toString())}))}xo(e,t,n,r,i){return this.f_(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([s,o])=>this.connection.xo(e,pi(t,n),r,s,o,i))).catch((e=>{throw"FirebaseError"===e.name?(e.code===_.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new I(_.UNKNOWN,e.toString())}))}terminate(){this.m_=!0,this.connection.terminate()}}class va{constructor(e,t){this.asyncQueue=e,this.onlineStateHandler=t,this.state="Unknown",this.g_=0,this.p_=null,this.y_=!0}w_(){0===this.g_&&(this.S_("Unknown"),this.p_=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.p_=null,this.b_("Backend didn't respond within 10 seconds."),this.S_("Offline"),Promise.resolve()))))}D_(e){"Online"===this.state?this.S_("Unknown"):(this.g_++,this.g_>=1&&(this.C_(),this.b_(`Connection failed 1 times. Most recent error: ${e.toString()}`),this.S_("Offline")))}set(e){this.C_(),this.g_=0,"Online"===e&&(this.y_=!1),this.S_(e)}S_(e){e!==this.state&&(this.state=e,this.onlineStateHandler(e))}b_(e){const t=`Could not reach Cloud Firestore backend. ${e}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.y_?(g(t),this.y_=!1):p("OnlineStateTracker",t)}C_(){null!==this.p_&&(this.p_.cancel(),this.p_=null)}}class wa{constructor(e,t,n,r,i){this.localStore=e,this.datastore=t,this.asyncQueue=n,this.remoteSyncer={},this.v_=[],this.F_=new Map,this.M_=new Set,this.x_=[],this.O_=i,this.O_.io((e=>{n.enqueueAndForget((async()=>{Da(this)&&(p("RemoteStore","Restarting streams for network reachability change."),await async function(e){const t=b(e);t.M_.add(4),await _a(t),t.N_.set("Unknown"),t.M_.delete(4),await ba(t)}(this))}))})),this.N_=new va(n,r)}}async function ba(e){if(Da(e))for(const t of e.x_)await t(!0)}async function _a(e){for(const t of e.x_)await t(!1)}function Ia(e,t){const n=b(e);n.F_.has(t.targetId)||(n.F_.set(t.targetId,t),Ca(n)?xa(n):Qa(n).Xo()&&Sa(n,t))}function Ea(e,t){const n=b(e),r=Qa(n);n.F_.delete(t),r.Xo()&&Ta(n,t),0===n.F_.size&&(r.Xo()?r.n_():Da(n)&&n.N_.set("Unknown"))}function Sa(e,t){if(e.L_.xe(t.targetId),t.resumeToken.approximateByteSize()>0||t.snapshotVersion.compareTo(V.min())>0){const n=e.remoteSyncer.getRemoteKeysForTarget(t.targetId).size;t=t.withExpectedCount(n)}Qa(e).P_(t)}function Ta(e,t){e.L_.xe(t),Qa(e).I_(t)}function xa(e){e.L_=new ti({getRemoteKeysForTarget:t=>e.remoteSyncer.getRemoteKeysForTarget(t),ot:t=>e.F_.get(t)||null,tt:()=>e.datastore.serializer.databaseId}),Qa(e).start(),e.N_.w_()}function Ca(e){return Da(e)&&!Qa(e).Zo()&&e.F_.size>0}function Da(e){return 0===b(e).M_.size}function Aa(e){e.L_=void 0}async function Na(e){e.N_.set("Online")}async function ka(e){e.F_.forEach(((t,n)=>{Sa(e,t)}))}async function Oa(e,t){Aa(e),Ca(e)?(e.N_.D_(t),xa(e)):e.N_.set("Unknown")}async function La(e,t,n){if(e.N_.set("Online"),t instanceof Zr&&2===t.state&&t.cause)try{await async function(e,t){const n=t.cause;for(const r of t.targetIds)e.F_.has(r)&&(await e.remoteSyncer.rejectListen(r,n),e.F_.delete(r),e.L_.removeTarget(r))}(e,t)}catch(n){p("RemoteStore","Failed to remove targets %s: %s ",t.targetIds.join(","),n),await Pa(e,n)}else if(t instanceof Yr?e.L_.Ke(t):t instanceof Xr?e.L_.He(t):e.L_.We(t),!n.isEqual(V.min()))try{const t=await Ro(e.localStore);n.compareTo(t)>=0&&await function(e,t){const n=e.L_.rt(t);return n.targetChanges.forEach(((n,r)=>{if(n.resumeToken.approximateByteSize()>0){const i=e.F_.get(r);i&&e.F_.set(r,i.withResumeToken(n.resumeToken,t))}})),n.targetMismatches.forEach(((t,n)=>{const r=e.F_.get(t);if(!r)return;e.F_.set(t,r.withResumeToken(ut.EMPTY_BYTE_STRING,r.snapshotVersion)),Ta(e,t);const i=new Bi(r.target,t,n,r.sequenceNumber);Sa(e,i)})),e.remoteSyncer.applyRemoteEvent(n)}(e,n)}catch(t){p("RemoteStore","Failed to raise snapshot:",t),await Pa(e,t)}}async function Pa(e,t,n){if(!le(t))throw t;e.M_.add(1),await _a(e),e.N_.set("Offline"),n||(n=()=>Ro(e.localStore)),e.asyncQueue.enqueueRetryable((async()=>{p("RemoteStore","Retrying IndexedDB access"),await n(),e.M_.delete(1),await ba(e)}))}function Ma(e,t){return t().catch((n=>Pa(e,n,t)))}async function Ra(e){const t=b(e),n=Ha(t);let r=t.v_.length>0?t.v_[t.v_.length-1].batchId:-1;for(;Fa(t);)try{const e=await Vo(t.localStore,r);if(null===e){0===t.v_.length&&n.n_();break}r=e.batchId,Va(t,e)}catch(e){await Pa(t,e)}Ba(t)&&Ua(t)}function Fa(e){return Da(e)&&e.v_.length<10}function Va(e,t){e.v_.push(t);const n=Ha(e);n.Xo()&&n.E_&&n.d_(t.mutations)}function Ba(e){return Da(e)&&!Ha(e).Zo()&&e.v_.length>0}function Ua(e){Ha(e).start()}async function qa(e){Ha(e).V_()}async function ja(e){const t=Ha(e);for(const n of e.v_)t.d_(n.mutations)}async function za(e,t,n){const r=e.v_.shift(),i=Pr.from(r,t,n);await Ma(e,(()=>e.remoteSyncer.applySuccessfulWrite(i))),await Ra(e)}async function Ga(e,t){t&&Ha(e).E_&&await async function(e,t){if(function(e){return Ur(e)&&e!==_.ABORTED}(t.code)){const n=e.v_.shift();Ha(e).t_(),await Ma(e,(()=>e.remoteSyncer.rejectFailedWrite(n.batchId,t))),await Ra(e)}}(e,t),Ba(e)&&Ua(e)}async function Ka(e,t){const n=b(e);n.asyncQueue.verifyOperationInProgress(),p("RemoteStore","RemoteStore received new credentials");const r=Da(n);n.M_.add(3),await _a(n),r&&n.N_.set("Unknown"),await n.remoteSyncer.handleCredentialChange(t),n.M_.delete(3),await ba(n)}async function $a(e,t){const n=b(e);t?(n.M_.delete(2),await ba(n)):t||(n.M_.add(2),await _a(n),n.N_.set("Unknown"))}function Qa(e){return e.B_||(e.B_=function(e,t,n){const r=b(e);return r.f_(),new ga(t,r.connection,r.authCredentials,r.appCheckCredentials,r.serializer,n)}(e.datastore,e.asyncQueue,{Po:Na.bind(null,e),To:ka.bind(null,e),Ao:Oa.bind(null,e),h_:La.bind(null,e)}),e.x_.push((async t=>{t?(e.B_.t_(),Ca(e)?xa(e):e.N_.set("Unknown")):(await e.B_.stop(),Aa(e))}))),e.B_}function Ha(e){return e.k_||(e.k_=function(e,t,n){const r=b(e);return r.f_(),new ma(t,r.connection,r.authCredentials,r.appCheckCredentials,r.serializer,n)}(e.datastore,e.asyncQueue,{Po:()=>Promise.resolve(),To:qa.bind(null,e),Ao:Ga.bind(null,e),R_:ja.bind(null,e),A_:za.bind(null,e)}),e.x_.push((async t=>{t?(e.k_.t_(),await Ra(e)):(await e.k_.stop(),e.v_.length>0&&(p("RemoteStore",`Stopping write stream with ${e.v_.length} pending writes`),e.v_=[]))}))),e.k_}class Wa{constructor(e,t,n,r,i){this.asyncQueue=e,this.timerId=t,this.targetTimeMs=n,this.op=r,this.removalCallback=i,this.deferred=new E,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((e=>{}))}get promise(){return this.deferred.promise}static createAndSchedule(e,t,n,r,i){const s=Date.now()+n,o=new Wa(e,t,s,r,i);return o.start(n),o}start(e){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),e)}skipDelay(){return this.handleDelayElapsed()}cancel(e){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new I(_.CANCELLED,"Operation cancelled"+(e?": "+e:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((e=>this.deferred.resolve(e)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function Ja(e,t){if(g("AsyncQueue",`${t}: ${e}`),le(e))return new I(_.UNAVAILABLE,`${t}: ${e}`);throw e}class Ya{constructor(e){this.comparator=e?(t,n)=>e(t,n)||z.comparator(t.key,n.key):(e,t)=>z.comparator(e.key,t.key),this.keyedMap=Kn(),this.sortedSet=new tt(this.comparator)}static emptySet(e){return new Ya(e.comparator)}has(e){return null!=this.keyedMap.get(e)}get(e){return this.keyedMap.get(e)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(e){const t=this.keyedMap.get(e);return t?this.sortedSet.indexOf(t):-1}get size(){return this.sortedSet.size}forEach(e){this.sortedSet.inorderTraversal(((t,n)=>(e(t),!1)))}add(e){const t=this.delete(e.key);return t.copy(t.keyedMap.insert(e.key,e),t.sortedSet.insert(e,null))}delete(e){const t=this.get(e);return t?this.copy(this.keyedMap.remove(e),this.sortedSet.remove(t)):this}isEqual(e){if(!(e instanceof Ya))return!1;if(this.size!==e.size)return!1;const t=this.sortedSet.getIterator(),n=e.sortedSet.getIterator();for(;t.hasNext();){const e=t.getNext().key,r=n.getNext().key;if(!e.isEqual(r))return!1}return!0}toString(){const e=[];return this.forEach((t=>{e.push(t.toString())})),0===e.length?"DocumentSet ()":"DocumentSet (\n  "+e.join("  \n")+"\n)"}copy(e,t){const n=new Ya;return n.comparator=this.comparator,n.keyedMap=e,n.sortedSet=t,n}}class Xa{constructor(){this.q_=new tt(z.comparator)}track(e){const t=e.doc.key,n=this.q_.get(t);n?0!==e.type&&3===n.type?this.q_=this.q_.insert(t,e):3===e.type&&1!==n.type?this.q_=this.q_.insert(t,{type:n.type,doc:e.doc}):2===e.type&&2===n.type?this.q_=this.q_.insert(t,{type:2,doc:e.doc}):2===e.type&&0===n.type?this.q_=this.q_.insert(t,{type:0,doc:e.doc}):1===e.type&&0===n.type?this.q_=this.q_.remove(t):1===e.type&&2===n.type?this.q_=this.q_.insert(t,{type:1,doc:n.doc}):0===e.type&&1===n.type?this.q_=this.q_.insert(t,{type:2,doc:e.doc}):v():this.q_=this.q_.insert(t,e)}Q_(){const e=[];return this.q_.inorderTraversal(((t,n)=>{e.push(n)})),e}}class Za{constructor(e,t,n,r,i,s,o,a,c){this.query=e,this.docs=t,this.oldDocs=n,this.docChanges=r,this.mutatedKeys=i,this.fromCache=s,this.syncStateChanged=o,this.excludesMetadataChanges=a,this.hasCachedResults=c}static fromInitialDocuments(e,t,n,r,i){const s=[];return t.forEach((e=>{s.push({type:0,doc:e})})),new Za(e,t,Ya.emptySet(t),s,n,r,!0,!1,i)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(e){if(!(this.fromCache===e.fromCache&&this.hasCachedResults===e.hasCachedResults&&this.syncStateChanged===e.syncStateChanged&&this.mutatedKeys.isEqual(e.mutatedKeys)&&Pn(this.query,e.query)&&this.docs.isEqual(e.docs)&&this.oldDocs.isEqual(e.oldDocs)))return!1;const t=this.docChanges,n=e.docChanges;if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++)if(t[e].type!==n[e].type||!t[e].doc.isEqual(n[e].doc))return!1;return!0}}class ec{constructor(){this.K_=void 0,this.U_=[]}W_(){return this.U_.some((e=>e.G_()))}}class tc{constructor(){this.queries=new qn((e=>Mn(e)),Pn),this.onlineState="Unknown",this.z_=new Set}}async function nc(e,t){const n=b(e);let r=3;const i=t.query;let s=n.queries.get(i);s?!s.W_()&&t.G_()&&(r=2):(s=new ec,r=t.G_()?0:1);try{switch(r){case 0:s.K_=await n.onListen(i,!0);break;case 1:s.K_=await n.onListen(i,!1);break;case 2:await n.onFirstRemoteStoreListen(i)}}catch(e){const n=Ja(e,`Initialization of query '${Rn(t.query)}' failed`);return void t.onError(n)}n.queries.set(i,s),s.U_.push(t),t.j_(n.onlineState),s.K_&&t.H_(s.K_)&&oc(n)}async function rc(e,t){const n=b(e),r=t.query;let i=3;const s=n.queries.get(r);if(s){const e=s.U_.indexOf(t);e>=0&&(s.U_.splice(e,1),0===s.U_.length?i=t.G_()?0:1:!s.W_()&&t.G_()&&(i=2))}switch(i){case 0:return n.queries.delete(r),n.onUnlisten(r,!0);case 1:return n.queries.delete(r),n.onUnlisten(r,!1);case 2:return n.onLastRemoteStoreUnlisten(r);default:return}}function ic(e,t){const n=b(e);let r=!1;for(const e of t){const t=e.query,i=n.queries.get(t);if(i){for(const t of i.U_)t.H_(e)&&(r=!0);i.K_=e}}r&&oc(n)}function sc(e,t,n){const r=b(e),i=r.queries.get(t);if(i)for(const e of i.U_)e.onError(n);r.queries.delete(t)}function oc(e){e.z_.forEach((e=>{e.next()}))}var ac,cc;(cc=ac||(ac={})).J_="default",cc.Cache="cache";class uc{constructor(e,t,n){this.query=e,this.Y_=t,this.Z_=!1,this.X_=null,this.onlineState="Unknown",this.options=n||{}}H_(e){if(!this.options.includeMetadataChanges){const t=[];for(const n of e.docChanges)3!==n.type&&t.push(n);e=new Za(e.query,e.docs,e.oldDocs,t,e.mutatedKeys,e.fromCache,e.syncStateChanged,!0,e.hasCachedResults)}let t=!1;return this.Z_?this.ea(e)&&(this.Y_.next(e),t=!0):this.ta(e,this.onlineState)&&(this.na(e),t=!0),this.X_=e,t}onError(e){this.Y_.error(e)}j_(e){this.onlineState=e;let t=!1;return this.X_&&!this.Z_&&this.ta(this.X_,e)&&(this.na(this.X_),t=!0),t}ta(e,t){if(!e.fromCache)return!0;if(!this.G_())return!0;const n="Offline"!==t;return(!this.options.ra||!n)&&(!e.docs.isEmpty()||e.hasCachedResults||"Offline"===t)}ea(e){if(e.docChanges.length>0)return!0;const t=this.X_&&this.X_.hasPendingWrites!==e.hasPendingWrites;return!(!e.syncStateChanged&&!t)&&!0===this.options.includeMetadataChanges}na(e){e=Za.fromInitialDocuments(e.query,e.docs,e.mutatedKeys,e.fromCache,e.hasCachedResults),this.Z_=!0,this.Y_.next(e)}G_(){return this.options.source!==ac.Cache}}class lc{constructor(e,t){this.ia=e,this.byteLength=t}sa(){return"metadata"in this.ia}}class hc{constructor(e){this.serializer=e}Ps(e){return yi(this.serializer,e)}Is(e){return e.metadata.exists?Ei(this.serializer,e.document,!1):zt.newNoDocument(this.Ps(e.metadata.name),this.Ts(e.metadata.readTime))}Ts(e){return di(e)}}class dc{constructor(e,t,n){this.oa=e,this.localStore=t,this.serializer=n,this.queries=[],this.documents=[],this.collectionGroups=new Set,this.progress=fc(e)}_a(e){this.progress.bytesLoaded+=e.byteLength;let t=this.progress.documentsLoaded;if(e.ia.namedQuery)this.queries.push(e.ia.namedQuery);else if(e.ia.documentMetadata){this.documents.push({metadata:e.ia.documentMetadata}),e.ia.documentMetadata.exists||++t;const n=U.fromString(e.ia.documentMetadata.name);this.collectionGroups.add(n.get(n.length-2))}else e.ia.document&&(this.documents[this.documents.length-1].document=e.ia.document,++t);return t!==this.progress.documentsLoaded?(this.progress.documentsLoaded=t,Object.assign({},this.progress)):null}aa(e){const t=new Map,n=new hc(this.serializer);for(const r of e)if(r.metadata.queries){const e=n.Ps(r.metadata.name);for(const n of r.metadata.queries){const r=(t.get(n)||Xn()).add(e);t.set(n,r)}}return t}async complete(){const e=await async function(e,t,n,r){const i=b(e);let s=Xn(),o=zn();for(const e of n){const n=t.Ps(e.metadata.name);e.document&&(s=s.add(n));const r=t.Is(e);r.setReadTime(t.Ts(e.metadata.readTime)),o=o.insert(n,r)}const a=i.os.newChangeBuffer({trackRemovals:!0}),c=await Bo(i,function(e){return An(Tn(U.fromString(`__bundle__/docs/${e}`)))}(r));return i.persistence.runTransaction("Apply bundle documents","readwrite",(e=>Fo(e,a,o).next((t=>(a.apply(e),t))).next((t=>i.Qr.removeMatchingKeysForTargetId(e,c.targetId).next((()=>i.Qr.addMatchingKeys(e,s,c.targetId))).next((()=>i.localDocuments.getLocalViewOfDocuments(e,t.cs,t.ls))).next((()=>t.cs))))))}(this.localStore,new hc(this.serializer),this.documents,this.oa.id),t=this.aa(this.documents);for(const e of this.queries)await Ko(this.localStore,e,t.get(e.name));return this.progress.taskState="Success",{progress:this.progress,ua:this.collectionGroups,ca:e}}}function fc(e){return{taskState:"Running",documentsLoaded:0,bytesLoaded:0,totalDocuments:e.totalDocuments,totalBytes:e.totalBytes}}class pc{constructor(e){this.key=e}}class gc{constructor(e){this.key=e}}class mc{constructor(e,t){this.query=e,this.la=t,this.ha=null,this.hasCachedResults=!1,this.current=!1,this.Pa=Xn(),this.mutatedKeys=Xn(),this.Ia=Bn(e),this.Ta=new Ya(this.Ia)}get Ea(){return this.la}da(e,t){const n=t?t.Aa:new Xa,r=t?t.Ta:this.Ta;let i=t?t.mutatedKeys:this.mutatedKeys,s=r,o=!1;const a="F"===this.query.limitType&&r.size===this.query.limit?r.last():null,c="L"===this.query.limitType&&r.size===this.query.limit?r.first():null;if(e.inorderTraversal(((e,t)=>{const u=r.get(e),l=Fn(this.query,t)?t:null,h=!!u&&this.mutatedKeys.has(u.key),d=!!l&&(l.hasLocalMutations||this.mutatedKeys.has(l.key)&&l.hasCommittedMutations);let f=!1;u&&l?u.data.isEqual(l.data)?h!==d&&(n.track({type:3,doc:l}),f=!0):this.Ra(u,l)||(n.track({type:2,doc:l}),f=!0,(a&&this.Ia(l,a)>0||c&&this.Ia(l,c)<0)&&(o=!0)):!u&&l?(n.track({type:0,doc:l}),f=!0):u&&!l&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(l?(s=s.add(l),i=d?i.add(e):i.delete(e)):(s=s.delete(e),i=i.delete(e)))})),null!==this.query.limit)for(;s.size>this.query.limit;){const e="F"===this.query.limitType?s.last():s.first();s=s.delete(e.key),i=i.delete(e.key),n.track({type:1,doc:e})}return{Ta:s,Aa:n,Xi:o,mutatedKeys:i}}Ra(e,t){return e.hasLocalMutations&&t.hasCommittedMutations&&!t.hasLocalMutations}applyChanges(e,t,n,r){const i=this.Ta;this.Ta=e.Ta,this.mutatedKeys=e.mutatedKeys;const s=e.Aa.Q_();s.sort(((e,t)=>function(e,t){const n=e=>{switch(e){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return v()}};return n(e)-n(t)}(e.type,t.type)||this.Ia(e.doc,t.doc))),this.Va(n),r=null!=r&&r;const o=t&&!r?this.ma():[],a=0===this.Pa.size&&this.current&&!r?1:0,c=a!==this.ha;return this.ha=a,0!==s.length||c?{snapshot:new Za(this.query,e.Ta,i,s,e.mutatedKeys,0===a,c,!1,!!n&&n.resumeToken.approximateByteSize()>0),fa:o}:{fa:o}}j_(e){return this.current&&"Offline"===e?(this.current=!1,this.applyChanges({Ta:this.Ta,Aa:new Xa,mutatedKeys:this.mutatedKeys,Xi:!1},!1)):{fa:[]}}ga(e){return!this.la.has(e)&&!!this.Ta.has(e)&&!this.Ta.get(e).hasLocalMutations}Va(e){e&&(e.addedDocuments.forEach((e=>this.la=this.la.add(e))),e.modifiedDocuments.forEach((e=>{})),e.removedDocuments.forEach((e=>this.la=this.la.delete(e))),this.current=e.current)}ma(){if(!this.current)return[];const e=this.Pa;this.Pa=Xn(),this.Ta.forEach((e=>{this.ga(e.key)&&(this.Pa=this.Pa.add(e.key))}));const t=[];return e.forEach((e=>{this.Pa.has(e)||t.push(new gc(e))})),this.Pa.forEach((n=>{e.has(n)||t.push(new pc(n))})),t}pa(e){this.la=e.hs,this.Pa=Xn();const t=this.da(e.documents);return this.applyChanges(t,!0)}ya(){return Za.fromInitialDocuments(this.query,this.Ta,this.mutatedKeys,0===this.ha,this.hasCachedResults)}}class yc{constructor(e,t,n){this.query=e,this.targetId=t,this.view=n}}class vc{constructor(e){this.key=e,this.wa=!1}}class wc{constructor(e,t,n,r,i,s){this.localStore=e,this.remoteStore=t,this.eventManager=n,this.sharedClientState=r,this.currentUser=i,this.maxConcurrentLimboResolutions=s,this.Sa={},this.ba=new qn((e=>Mn(e)),Pn),this.Da=new Map,this.Ca=new Set,this.va=new tt(z.comparator),this.Fa=new Map,this.Ma=new fo,this.xa={},this.Oa=new Map,this.Na=qs.Ln(),this.onlineState="Unknown",this.La=void 0}get isPrimaryClient(){return!0===this.La}}async function bc(e,t,n=!0){const r=Wc(e);let i;const s=r.ba.get(t);return s?(r.sharedClientState.addLocalQueryTarget(s.targetId),i=s.view.ya()):i=await Ic(r,t,n,!0),i}async function _c(e,t){const n=Wc(e);await Ic(n,t,!0,!1)}async function Ic(e,t,n,r){const i=await Bo(e.localStore,An(t)),s=i.targetId,o=n?e.sharedClientState.addLocalQueryTarget(s):"not-current";let a;return r&&(a=await Ec(e,t,s,"current"===o,i.resumeToken)),e.isPrimaryClient&&n&&Ia(e.remoteStore,i),a}async function Ec(e,t,n,r,i){e.Ba=(t,n,r)=>async function(e,t,n,r){let i=t.view.da(n);i.Xi&&(i=await qo(e.localStore,t.query,!1).then((({documents:e})=>t.view.da(e,i))));const s=r&&r.targetChanges.get(t.targetId),o=r&&null!=r.targetMismatches.get(t.targetId),a=t.view.applyChanges(i,e.isPrimaryClient,s,o);return Mc(e,t.targetId,a.fa),a.snapshot}(e,t,n,r);const s=await qo(e.localStore,t,!0),o=new mc(t,s.hs),a=o.da(s.documents),c=Jr.createSynthesizedTargetChangeForCurrentChange(n,r&&"Offline"!==e.onlineState,i),u=o.applyChanges(a,e.isPrimaryClient,c);Mc(e,n,u.fa);const l=new yc(t,n,o);return e.ba.set(t,l),e.Da.has(n)?e.Da.get(n).push(t):e.Da.set(n,[t]),u.snapshot}async function Sc(e,t,n){const r=b(e),i=r.ba.get(t),s=r.Da.get(i.targetId);if(s.length>1)return r.Da.set(i.targetId,s.filter((e=>!Pn(e,t)))),void r.ba.delete(t);r.isPrimaryClient?(r.sharedClientState.removeLocalQueryTarget(i.targetId),r.sharedClientState.isActiveQueryTarget(i.targetId)||await Uo(r.localStore,i.targetId,!1).then((()=>{r.sharedClientState.clearQueryState(i.targetId),n&&Ea(r.remoteStore,i.targetId),Lc(r,i.targetId)})).catch(re)):(Lc(r,i.targetId),await Uo(r.localStore,i.targetId,!0))}async function Tc(e,t){const n=b(e),r=n.ba.get(t),i=n.Da.get(r.targetId);n.isPrimaryClient&&1===i.length&&(n.sharedClientState.removeLocalQueryTarget(r.targetId),Ea(n.remoteStore,r.targetId))}async function xc(e,t){const n=b(e);try{const e=await function(e,t){const n=b(e),r=t.snapshotVersion;let i=n.ns;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(e=>{const s=n.os.newChangeBuffer({trackRemovals:!0});i=n.ns;const o=[];t.targetChanges.forEach(((s,a)=>{const c=i.get(a);if(!c)return;o.push(n.Qr.removeMatchingKeys(e,s.removedDocuments,a).next((()=>n.Qr.addMatchingKeys(e,s.addedDocuments,a))));let u=c.withSequenceNumber(e.currentSequenceNumber);null!==t.targetMismatches.get(a)?u=u.withResumeToken(ut.EMPTY_BYTE_STRING,V.min()).withLastLimboFreeSnapshotVersion(V.min()):s.resumeToken.approximateByteSize()>0&&(u=u.withResumeToken(s.resumeToken,r)),i=i.insert(a,u),function(e,t,n){return 0===e.resumeToken.approximateByteSize()||t.snapshotVersion.toMicroseconds()-e.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(c,u,s)&&o.push(n.Qr.updateTargetData(e,u))}));let a=zn(),c=Xn();if(t.documentUpdates.forEach((r=>{t.resolvedLimboDocuments.has(r)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(e,r))})),o.push(Fo(e,s,t.documentUpdates).next((e=>{a=e.cs,c=e.ls}))),!r.isEqual(V.min())){const t=n.Qr.getLastRemoteSnapshotVersion(e).next((t=>n.Qr.setTargetsMetadata(e,e.currentSequenceNumber,r)));o.push(t)}return ie.waitFor(o).next((()=>s.apply(e))).next((()=>n.localDocuments.getLocalViewOfDocuments(e,a,c))).next((()=>a))})).then((e=>(n.ns=i,e)))}(n.localStore,t);t.targetChanges.forEach(((e,t)=>{const r=n.Fa.get(t);r&&(w(e.addedDocuments.size+e.modifiedDocuments.size+e.removedDocuments.size<=1),e.addedDocuments.size>0?r.wa=!0:e.modifiedDocuments.size>0?w(r.wa):e.removedDocuments.size>0&&(w(r.wa),r.wa=!1))})),await Vc(n,e,t)}catch(e){await re(e)}}function Cc(e,t,n){const r=b(e);if(r.isPrimaryClient&&0===n||!r.isPrimaryClient&&1===n){const e=[];r.ba.forEach(((n,r)=>{const i=r.view.j_(t);i.snapshot&&e.push(i.snapshot)})),function(e,t){const n=b(e);n.onlineState=t;let r=!1;n.queries.forEach(((e,n)=>{for(const e of n.U_)e.j_(t)&&(r=!0)})),r&&oc(n)}(r.eventManager,t),e.length&&r.Sa.h_(e),r.onlineState=t,r.isPrimaryClient&&r.sharedClientState.setOnlineState(t)}}async function Dc(e,t,n){const r=b(e);r.sharedClientState.updateQueryState(t,"rejected",n);const i=r.Fa.get(t),s=i&&i.key;if(s){let e=new tt(z.comparator);e=e.insert(s,zt.newNoDocument(s,V.min()));const n=Xn().add(s),i=new Wr(V.min(),new Map,new tt(P),e,n);await xc(r,i),r.va=r.va.remove(s),r.Fa.delete(t),Fc(r)}else await Uo(r.localStore,t,!1).then((()=>Lc(r,t,n))).catch(re)}async function Ac(e,t){const n=b(e),r=t.batch.batchId;try{const e=await function(e,t){const n=b(e);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(e=>{const r=t.batch.keys(),i=n.os.newChangeBuffer({trackRemovals:!0});return function(e,t,n,r){const i=n.batch,s=i.keys();let o=ie.resolve();return s.forEach((e=>{o=o.next((()=>r.getEntry(t,e))).next((t=>{const s=n.docVersions.get(e);w(null!==s),t.version.compareTo(s)<0&&(i.applyToRemoteDocument(t,n),t.isValidDocument()&&(t.setReadTime(n.commitVersion),r.addEntry(t)))}))})),o.next((()=>e.mutationQueue.removeMutationBatch(t,i)))}(n,e,t,i).next((()=>i.apply(e))).next((()=>n.mutationQueue.performConsistencyCheck(e))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(e,r,t.batch.batchId))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e,function(e){let t=Xn();for(let n=0;n<e.mutationResults.length;++n)e.mutationResults[n].transformResults.length>0&&(t=t.add(e.batch.mutations[n].key));return t}(t)))).next((()=>n.localDocuments.getDocuments(e,r)))}))}(n.localStore,t);Oc(n,r,null),kc(n,r),n.sharedClientState.updateMutationState(r,"acknowledged"),await Vc(n,e)}catch(e){await re(e)}}async function Nc(e,t,n){const r=b(e);try{const e=await function(e,t){const n=b(e);return n.persistence.runTransaction("Reject batch","readwrite-primary",(e=>{let r;return n.mutationQueue.lookupMutationBatch(e,t).next((t=>(w(null!==t),r=t.keys(),n.mutationQueue.removeMutationBatch(e,t)))).next((()=>n.mutationQueue.performConsistencyCheck(e))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(e,r,t))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e,r))).next((()=>n.localDocuments.getDocuments(e,r)))}))}(r.localStore,t);Oc(r,t,n),kc(r,t),r.sharedClientState.updateMutationState(t,"rejected",n),await Vc(r,e)}catch(n){await re(n)}}function kc(e,t){(e.Oa.get(t)||[]).forEach((e=>{e.resolve()})),e.Oa.delete(t)}function Oc(e,t,n){const r=b(e);let i=r.xa[r.currentUser.toKey()];if(i){const e=i.get(t);e&&(n?e.reject(n):e.resolve(),i=i.remove(t)),r.xa[r.currentUser.toKey()]=i}}function Lc(e,t,n=null){e.sharedClientState.removeLocalQueryTarget(t);for(const r of e.Da.get(t))e.ba.delete(r),n&&e.Sa.ka(r,n);e.Da.delete(t),e.isPrimaryClient&&e.Ma.Vr(t).forEach((t=>{e.Ma.containsKey(t)||Pc(e,t)}))}function Pc(e,t){e.Ca.delete(t.path.canonicalString());const n=e.va.get(t);null!==n&&(Ea(e.remoteStore,n),e.va=e.va.remove(t),e.Fa.delete(n),Fc(e))}function Mc(e,t,n){for(const r of n)r instanceof pc?(e.Ma.addReference(r.key,t),Rc(e,r)):r instanceof gc?(p("SyncEngine","Document no longer in limbo: "+r.key),e.Ma.removeReference(r.key,t),e.Ma.containsKey(r.key)||Pc(e,r.key)):v()}function Rc(e,t){const n=t.key,r=n.path.canonicalString();e.va.get(n)||e.Ca.has(r)||(p("SyncEngine","New document in limbo: "+n),e.Ca.add(r),Fc(e))}function Fc(e){for(;e.Ca.size>0&&e.va.size<e.maxConcurrentLimboResolutions;){const t=e.Ca.values().next().value;e.Ca.delete(t);const n=new z(U.fromString(t)),r=e.Na.next();e.Fa.set(r,new vc(n)),e.va=e.va.insert(n,r),Ia(e.remoteStore,new Bi(An(Tn(n.path)),r,"TargetPurposeLimboResolution",ye.oe))}}async function Vc(e,t,n){const r=b(e),i=[],s=[],o=[];r.ba.isEmpty()||(r.ba.forEach(((e,a)=>{o.push(r.Ba(a,t,n).then((e=>{var t;if((e||n)&&r.isPrimaryClient){const i=e?!e.fromCache:null===(t=null==n?void 0:n.targetChanges.get(a.targetId))||void 0===t?void 0:t.current;r.sharedClientState.updateQueryState(a.targetId,i?"current":"not-current")}if(e){i.push(e);const t=No.Ki(a.targetId,e);s.push(t)}})))})),await Promise.all(o),r.Sa.h_(i),await async function(e,t){const n=b(e);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(e=>ie.forEach(t,(t=>ie.forEach(t.qi,(r=>n.persistence.referenceDelegate.addReference(e,t.targetId,r))).next((()=>ie.forEach(t.Qi,(r=>n.persistence.referenceDelegate.removeReference(e,t.targetId,r)))))))))}catch(e){if(!le(e))throw e;p("LocalStore","Failed to update sequence numbers: "+e)}for(const e of t){const t=e.targetId;if(!e.fromCache){const e=n.ns.get(t),r=e.snapshotVersion,i=e.withLastLimboFreeSnapshotVersion(r);n.ns=n.ns.insert(t,i)}}}(r.localStore,s))}async function Bc(e,t){const n=b(e);if(!n.currentUser.isEqual(t)){p("SyncEngine","User change. New user:",t.toKey());const e=await Mo(n.localStore,t);n.currentUser=t,function(e,t){e.Oa.forEach((e=>{e.forEach((e=>{e.reject(new I(_.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),e.Oa.clear()}(n),n.sharedClientState.handleUserChange(t,e.removedBatchIds,e.addedBatchIds),await Vc(n,e.us)}}function Uc(e,t){const n=b(e),r=n.Fa.get(t);if(r&&r.wa)return Xn().add(r.key);{let e=Xn();const r=n.Da.get(t);if(!r)return e;for(const t of r){const r=n.ba.get(t);e=e.unionWith(r.view.Ea)}return e}}async function qc(e,t){const n=b(e),r=await qo(n.localStore,t.query,!0),i=t.view.pa(r);return n.isPrimaryClient&&Mc(n,t.targetId,i.fa),i}async function jc(e,t){const n=b(e);return zo(n.localStore,t).then((e=>Vc(n,e)))}async function zc(e,t,n,r){const i=b(e),s=await function(e,t){const n=b(e),r=b(n.mutationQueue);return n.persistence.runTransaction("Lookup mutation documents","readonly",(e=>r.vn(e,t).next((t=>t?n.localDocuments.getDocuments(e,t):ie.resolve(null)))))}(i.localStore,t);null!==s?("pending"===n?await Ra(i.remoteStore):"acknowledged"===n||"rejected"===n?(Oc(i,t,r||null),kc(i,t),function(e,t){b(b(e).mutationQueue).Mn(t)}(i.localStore,t)):v(),await Vc(i,s)):p("SyncEngine","Cannot apply mutation batch with id: "+t)}async function Gc(e,t,n){const r=b(e),i=[],s=[];for(const e of t){let t;const n=r.Da.get(e);if(n&&0!==n.length){t=await Bo(r.localStore,An(n[0]));for(const e of n){const t=r.ba.get(e),n=await qc(r,t);n.snapshot&&s.push(n.snapshot)}}else{const n=await jo(r.localStore,e);t=await Bo(r.localStore,n),await Ec(r,Kc(n),e,!1,t.resumeToken)}i.push(t)}return r.Sa.h_(s),i}function Kc(e){return Sn(e.path,e.collectionGroup,e.orderBy,e.filters,e.limit,"F",e.startAt,e.endAt)}function $c(e){return function(e){return b(b(e).persistence).Bi()}(b(e).localStore)}async function Qc(e,t,n,r){const i=b(e);if(i.La)return void p("SyncEngine","Ignoring unexpected query state notification.");const s=i.Da.get(t);if(s&&s.length>0)switch(n){case"current":case"not-current":{const e=await zo(i.localStore,Vn(s[0])),r=Wr.createSynthesizedRemoteEventForCurrentChange(t,"current"===n,ut.EMPTY_BYTE_STRING);await Vc(i,e,r);break}case"rejected":await Uo(i.localStore,t,!0),Lc(i,t,r);break;default:v()}}async function Hc(e,t,n){const r=Wc(e);if(r.La){for(const e of t){if(r.Da.has(e)&&r.sharedClientState.isActiveQueryTarget(e)){p("SyncEngine","Adding an already active target "+e);continue}const t=await jo(r.localStore,e),n=await Bo(r.localStore,t);await Ec(r,Kc(t),n.targetId,!1,n.resumeToken),Ia(r.remoteStore,n)}for(const e of n)r.Da.has(e)&&await Uo(r.localStore,e,!1).then((()=>{Ea(r.remoteStore,e),Lc(r,e)})).catch(re)}}function Wc(e){const t=b(e);return t.remoteStore.remoteSyncer.applyRemoteEvent=xc.bind(null,t),t.remoteStore.remoteSyncer.getRemoteKeysForTarget=Uc.bind(null,t),t.remoteStore.remoteSyncer.rejectListen=Dc.bind(null,t),t.Sa.h_=ic.bind(null,t.eventManager),t.Sa.ka=sc.bind(null,t.eventManager),t}function Jc(e){const t=b(e);return t.remoteStore.remoteSyncer.applySuccessfulWrite=Ac.bind(null,t),t.remoteStore.remoteSyncer.rejectFailedWrite=Nc.bind(null,t),t}class Yc{constructor(){this.synchronizeTabs=!1}async initialize(e){this.serializer=da(e.databaseInfo.databaseId),this.sharedClientState=this.createSharedClientState(e),this.persistence=this.createPersistence(e),await this.persistence.start(),this.localStore=this.createLocalStore(e),this.gcScheduler=this.createGarbageCollectionScheduler(e,this.localStore),this.indexBackfillerScheduler=this.createIndexBackfillerScheduler(e,this.localStore)}createGarbageCollectionScheduler(e,t){return null}createIndexBackfillerScheduler(e,t){return null}createLocalStore(e){return Po(this.persistence,new Oo,e.initialUser,this.serializer)}createPersistence(e){return new wo(_o.Hr,this.serializer)}createSharedClientState(e){return new ta}async terminate(){var e,t;null===(e=this.gcScheduler)||void 0===e||e.stop(),null===(t=this.indexBackfillerScheduler)||void 0===t||t.stop(),this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class Xc extends Yc{constructor(e){super(),this.cacheSizeBytes=e}createGarbageCollectionScheduler(e,t){w(this.persistence.referenceDelegate instanceof Io);const n=this.persistence.referenceDelegate.garbageCollector;return new Hs(n,e.asyncQueue,t)}createPersistence(e){const t=void 0!==this.cacheSizeBytes?Ls.withCacheSize(this.cacheSizeBytes):Ls.DEFAULT;return new wo((e=>Io.Hr(e,t)),this.serializer)}}class Zc extends Yc{constructor(e,t,n){super(),this.Qa=e,this.cacheSizeBytes=t,this.forceOwnership=n,this.synchronizeTabs=!1}async initialize(e){await super.initialize(e),await this.Qa.initialize(this,e),await Jc(this.Qa.syncEngine),await Ra(this.Qa.remoteStore),await this.persistence.fi((()=>(this.gcScheduler&&!this.gcScheduler.started&&this.gcScheduler.start(),this.indexBackfillerScheduler&&!this.indexBackfillerScheduler.started&&this.indexBackfillerScheduler.start(),Promise.resolve())))}createLocalStore(e){return Po(this.persistence,new Oo,e.initialUser,this.serializer)}createGarbageCollectionScheduler(e,t){const n=this.persistence.referenceDelegate.garbageCollector;return new Hs(n,e.asyncQueue,t)}createIndexBackfillerScheduler(e,t){const n=new me(t,this.persistence);return new ge(e.asyncQueue,n)}createPersistence(e){const t=Ao(e.databaseInfo.databaseId,e.databaseInfo.persistenceKey),n=void 0!==this.cacheSizeBytes?Ls.withCacheSize(this.cacheSizeBytes):Ls.DEFAULT;return new xo(this.synchronizeTabs,t,e.clientId,n,e.asyncQueue,la(),ha(),this.serializer,this.sharedClientState,!!this.forceOwnership)}createSharedClientState(e){return new ta}}class eu extends Zc{constructor(e,t){super(e,t,!1),this.Qa=e,this.cacheSizeBytes=t,this.synchronizeTabs=!0}async initialize(e){await super.initialize(e);const t=this.Qa.syncEngine;this.sharedClientState instanceof ea&&(this.sharedClientState.syncEngine={Zs:zc.bind(null,t),Xs:Qc.bind(null,t),eo:Hc.bind(null,t),Bi:$c.bind(null,t),Ys:jc.bind(null,t)},await this.sharedClientState.start()),await this.persistence.fi((async e=>{await async function(e,t){const n=b(e);if(Wc(n),Jc(n),!0===t&&!0!==n.La){const e=n.sharedClientState.getAllActiveQueryTargets(),t=await Gc(n,e.toArray());n.La=!0,await $a(n.remoteStore,!0);for(const e of t)Ia(n.remoteStore,e)}else if(!1===t&&!1!==n.La){const e=[];let t=Promise.resolve();n.Da.forEach(((r,i)=>{n.sharedClientState.isLocalQueryTarget(i)?e.push(i):t=t.then((()=>(Lc(n,i),Uo(n.localStore,i,!0)))),Ea(n.remoteStore,i)})),await t,await Gc(n,e),function(e){const t=b(e);t.Fa.forEach(((e,n)=>{Ea(t.remoteStore,n)})),t.Ma.mr(),t.Fa=new Map,t.va=new tt(z.comparator)}(n),n.La=!1,await $a(n.remoteStore,!1)}}(this.Qa.syncEngine,e),this.gcScheduler&&(e&&!this.gcScheduler.started?this.gcScheduler.start():e||this.gcScheduler.stop()),this.indexBackfillerScheduler&&(e&&!this.indexBackfillerScheduler.started?this.indexBackfillerScheduler.start():e||this.indexBackfillerScheduler.stop())}))}createSharedClientState(e){const t=la();if(!ea.D(t))throw new I(_.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");const n=Ao(e.databaseInfo.databaseId,e.databaseInfo.persistenceKey);return new ea(t,e.asyncQueue,n,e.clientId,e.initialUser)}}class tu{async initialize(e,t){this.localStore||(this.localStore=e.localStore,this.sharedClientState=e.sharedClientState,this.datastore=this.createDatastore(t),this.remoteStore=this.createRemoteStore(t),this.eventManager=this.createEventManager(t),this.syncEngine=this.createSyncEngine(t,!e.synchronizeTabs),this.sharedClientState.onlineStateHandler=e=>Cc(this.syncEngine,e,1),this.remoteStore.remoteSyncer.handleCredentialChange=Bc.bind(null,this.syncEngine),await $a(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(e){return new tc}createDatastore(e){const t=da(e.databaseInfo.databaseId),n=function(e){return new ua(e)}(e.databaseInfo);return function(e,t,n,r){return new ya(e,t,n,r)}(e.authCredentials,e.appCheckCredentials,n,t)}createRemoteStore(e){return function(e,t,n,r,i){return new wa(e,t,n,r,i)}(this.localStore,this.datastore,e.asyncQueue,(e=>Cc(this.syncEngine,e,0)),ra.D()?new ra:new na)}createSyncEngine(e,t){return function(e,t,n,r,i,s,o){const a=new wc(e,t,n,r,i,s);return o&&(a.La=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,e.initialUser,e.maxConcurrentLimboResolutions,t)}async terminate(){var e;await async function(e){const t=b(e);p("RemoteStore","RemoteStore shutting down."),t.M_.add(5),await _a(t),t.O_.shutdown(),t.N_.set("Unknown")}(this.remoteStore),null===(e=this.datastore)||void 0===e||e.terminate()}}function nu(e,t=10240){let n=0;return{async read(){if(n<e.byteLength){const r={value:e.slice(n,n+t),done:!1};return n+=t,r}return{done:!0}},async cancel(){},releaseLock(){},closed:Promise.resolve()}}class ru{constructor(e){this.observer=e,this.muted=!1}next(e){this.observer.next&&this.Ka(this.observer.next,e)}error(e){this.observer.error?this.Ka(this.observer.error,e):g("Uncaught Error in snapshot listener:",e.toString())}$a(){this.muted=!0}Ka(e,t){this.muted||setTimeout((()=>{this.muted||e(t)}),0)}}class iu{constructor(e,t){this.Ua=e,this.serializer=t,this.metadata=new E,this.buffer=new Uint8Array,this.Wa=new TextDecoder("utf-8"),this.Ga().then((e=>{e&&e.sa()?this.metadata.resolve(e.ia.metadata):this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(null==e?void 0:e.ia)}`))}),(e=>this.metadata.reject(e)))}close(){return this.Ua.cancel()}async getMetadata(){return this.metadata.promise}async qa(){return await this.getMetadata(),this.Ga()}async Ga(){const e=await this.za();if(null===e)return null;const t=this.Wa.decode(e),n=Number(t);isNaN(n)&&this.ja(`length string (${t}) is not valid number`);const r=await this.Ha(n);return new lc(JSON.parse(r),e.length+n)}Ja(){return this.buffer.findIndex((e=>e==="{".charCodeAt(0)))}async za(){for(;this.Ja()<0&&!await this.Ya(););if(0===this.buffer.length)return null;const e=this.Ja();e<0&&this.ja("Reached the end of bundle when a length string is expected.");const t=this.buffer.slice(0,e);return this.buffer=this.buffer.slice(e),t}async Ha(e){for(;this.buffer.length<e;)await this.Ya()&&this.ja("Reached the end of bundle when more is expected.");const t=this.Wa.decode(this.buffer.slice(0,e));return this.buffer=this.buffer.slice(e),t}ja(e){throw this.Ua.cancel(),new Error(`Invalid bundle format: ${e}`)}async Ya(){const e=await this.Ua.read();if(!e.done){const t=new Uint8Array(this.buffer.length+e.value.length);t.set(this.buffer),t.set(e.value,this.buffer.length),this.buffer=t}return e.done}}class su{constructor(e){this.datastore=e,this.readVersions=new Map,this.mutations=[],this.committed=!1,this.lastTransactionError=null,this.writtenDocs=new Set}async lookup(e){if(this.ensureCommitNotCalled(),this.mutations.length>0)throw this.lastTransactionError=new I(_.INVALID_ARGUMENT,"Firestore transactions require all reads to be executed before all writes."),this.lastTransactionError;const t=await async function(e,t){const n=b(e),r={documents:t.map((e=>mi(n.serializer,e)))},i=await n.xo("BatchGetDocuments",n.serializer.databaseId,U.emptyPath(),r,t.length),s=new Map;i.forEach((e=>{const t=function(e,t){return"found"in t?function(e,t){w(!!t.found),t.found.name,t.found.updateTime;const n=yi(e,t.found.name),r=di(t.found.updateTime),i=t.found.createTime?di(t.found.createTime):V.min(),s=new qt({mapValue:{fields:t.found.fields}});return zt.newFoundDocument(n,r,i,s)}(e,t):"missing"in t?function(e,t){w(!!t.missing),w(!!t.readTime);const n=yi(e,t.missing),r=di(t.readTime);return zt.newNoDocument(n,r)}(e,t):v()}(n.serializer,e);s.set(t.key.toString(),t)}));const o=[];return t.forEach((e=>{const t=s.get(e.toString());w(!!t),o.push(t)})),o}(this.datastore,e);return t.forEach((e=>this.recordVersion(e))),t}set(e,t){this.write(t.toMutation(e,this.precondition(e))),this.writtenDocs.add(e.toString())}update(e,t){try{this.write(t.toMutation(e,this.preconditionForUpdate(e)))}catch(e){this.lastTransactionError=e}this.writtenDocs.add(e.toString())}delete(e){this.write(new kr(e,this.precondition(e))),this.writtenDocs.add(e.toString())}async commit(){if(this.ensureCommitNotCalled(),this.lastTransactionError)throw this.lastTransactionError;const e=this.readVersions;this.mutations.forEach((t=>{e.delete(t.key.toString())})),e.forEach(((e,t)=>{const n=z.fromPath(t);this.mutations.push(new Or(n,this.precondition(n)))})),await async function(e,t){const n=b(e),r={writes:t.map((e=>Si(n.serializer,e)))};await n.Co("Commit",n.serializer.databaseId,U.emptyPath(),r)}(this.datastore,this.mutations),this.committed=!0}recordVersion(e){let t;if(e.isFoundDocument())t=e.version;else{if(!e.isNoDocument())throw v();t=V.min()}const n=this.readVersions.get(e.key.toString());if(n){if(!t.isEqual(n))throw new I(_.ABORTED,"Document version changed between two reads.")}else this.readVersions.set(e.key.toString(),t)}precondition(e){const t=this.readVersions.get(e.toString());return!this.writtenDocs.has(e.toString())&&t?t.isEqual(V.min())?vr.exists(!1):vr.updateTime(t):vr.none()}preconditionForUpdate(e){const t=this.readVersions.get(e.toString());if(!this.writtenDocs.has(e.toString())&&t){if(t.isEqual(V.min()))throw new I(_.INVALID_ARGUMENT,"Can't update a document that doesn't exist.");return vr.updateTime(t)}return vr.exists(!0)}write(e){this.ensureCommitNotCalled(),this.mutations.push(e)}ensureCommitNotCalled(){}}class ou{constructor(e,t,n,r,i){this.asyncQueue=e,this.datastore=t,this.options=n,this.updateFunction=r,this.deferred=i,this.Za=n.maxAttempts,this.Yo=new fa(this.asyncQueue,"transaction_retry")}Xa(){this.Za-=1,this.eu()}eu(){this.Yo.$o((async()=>{const e=new su(this.datastore),t=this.tu(e);t&&t.then((t=>{this.asyncQueue.enqueueAndForget((()=>e.commit().then((()=>{this.deferred.resolve(t)})).catch((e=>{this.nu(e)}))))})).catch((e=>{this.nu(e)}))}))}tu(e){try{const t=this.updateFunction(e);return!ve(t)&&t.catch&&t.then?t:(this.deferred.reject(Error("Transaction callback must return a Promise")),null)}catch(e){return this.deferred.reject(e),null}}nu(e){this.Za>0&&this.ru(e)?(this.Za-=1,this.asyncQueue.enqueueAndForget((()=>(this.eu(),Promise.resolve())))):this.deferred.reject(e)}ru(e){if("FirebaseError"===e.name){const t=e.code;return"aborted"===t||"failed-precondition"===t||"already-exists"===t||!Ur(t)}return!1}}class au{constructor(e,t,n,r){this.authCredentials=e,this.appCheckCredentials=t,this.asyncQueue=n,this.databaseInfo=r,this.user=l.UNAUTHENTICATED,this.clientId=L.newId(),this.authCredentialListener=()=>Promise.resolve(),this.appCheckCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async e=>{p("FirestoreClient","Received user=",e.uid),await this.authCredentialListener(e),this.user=e})),this.appCheckCredentials.start(n,(e=>(p("FirestoreClient","Received new app check token=",e),this.appCheckCredentialListener(e,this.user))))}get configuration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(e){this.authCredentialListener=e}setAppCheckTokenChangeListener(e){this.appCheckCredentialListener=e}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new I(_.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const e=new E;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this._onlineComponents&&await this._onlineComponents.terminate(),this._offlineComponents&&await this._offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),e.resolve()}catch(t){const n=Ja(t,"Failed to shutdown persistence");e.reject(n)}})),e.promise}}async function cu(e,t){e.asyncQueue.verifyOperationInProgress(),p("FirestoreClient","Initializing OfflineComponentProvider");const n=e.configuration;await t.initialize(n);let r=n.initialUser;e.setCredentialChangeListener((async e=>{r.isEqual(e)||(await Mo(t.localStore,e),r=e)})),t.persistence.setDatabaseDeletedListener((()=>e.terminate())),e._offlineComponents=t}async function uu(e,t){e.asyncQueue.verifyOperationInProgress();const n=await hu(e);p("FirestoreClient","Initializing OnlineComponentProvider"),await t.initialize(n,e.configuration),e.setCredentialChangeListener((e=>Ka(t.remoteStore,e))),e.setAppCheckTokenChangeListener(((e,n)=>Ka(t.remoteStore,n))),e._onlineComponents=t}function lu(e){return"FirebaseError"===e.name?e.code===_.FAILED_PRECONDITION||e.code===_.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&e instanceof DOMException)||22===e.code||20===e.code||11===e.code}async function hu(e){if(!e._offlineComponents)if(e._uninitializedComponentsProvider){p("FirestoreClient","Using user provided OfflineComponentProvider");try{await cu(e,e._uninitializedComponentsProvider._offline)}catch(t){const n=t;if(!lu(n))throw n;m("Error using user provided cache. Falling back to memory cache: "+n),await cu(e,new Yc)}}else p("FirestoreClient","Using default OfflineComponentProvider"),await cu(e,new Yc);return e._offlineComponents}async function du(e){return e._onlineComponents||(e._uninitializedComponentsProvider?(p("FirestoreClient","Using user provided OnlineComponentProvider"),await uu(e,e._uninitializedComponentsProvider._online)):(p("FirestoreClient","Using default OnlineComponentProvider"),await uu(e,new tu))),e._onlineComponents}function fu(e){return hu(e).then((e=>e.persistence))}function pu(e){return hu(e).then((e=>e.localStore))}function gu(e){return du(e).then((e=>e.remoteStore))}function mu(e){return du(e).then((e=>e.syncEngine))}function yu(e){return du(e).then((e=>e.datastore))}async function vu(e){const t=await du(e),n=t.eventManager;return n.onListen=bc.bind(null,t.syncEngine),n.onUnlisten=Sc.bind(null,t.syncEngine),n.onFirstRemoteStoreListen=_c.bind(null,t.syncEngine),n.onLastRemoteStoreUnlisten=Tc.bind(null,t.syncEngine),n}function wu(e,t,n={}){const r=new E;return e.asyncQueue.enqueueAndForget((async()=>function(e,t,n,r,i){const s=new ru({next:s=>{t.enqueueAndForget((()=>rc(e,o)));const a=s.docs.has(n);!a&&s.fromCache?i.reject(new I(_.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&s.fromCache&&r&&"server"===r.source?i.reject(new I(_.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):i.resolve(s)},error:e=>i.reject(e)}),o=new uc(Tn(n.path),s,{includeMetadataChanges:!0,ra:!0});return nc(e,o)}(await vu(e),e.asyncQueue,t,n,r))),r.promise}function bu(e,t,n={}){const r=new E;return e.asyncQueue.enqueueAndForget((async()=>function(e,t,n,r,i){const s=new ru({next:n=>{t.enqueueAndForget((()=>rc(e,o))),n.fromCache&&"server"===r.source?i.reject(new I(_.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:e=>i.reject(e)}),o=new uc(n,s,{includeMetadataChanges:!0,ra:!0});return nc(e,o)}(await vu(e),e.asyncQueue,t,n,r))),r.promise}function _u(e){const t={};return void 0!==e.timeoutSeconds&&(t.timeoutSeconds=e.timeoutSeconds),t}const Iu=new Map;function Eu(e,t,n){if(!n)throw new I(_.INVALID_ARGUMENT,`Function ${e}() cannot be called with an empty ${t}.`)}function Su(e,t,n,r){if(!0===t&&!0===r)throw new I(_.INVALID_ARGUMENT,`${e} and ${n} cannot be used together.`)}function Tu(e){if(!z.isDocumentKey(e))throw new I(_.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`)}function xu(e){if(z.isDocumentKey(e))throw new I(_.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`)}function Cu(e){if(void 0===e)return"undefined";if(null===e)return"null";if("string"==typeof e)return e.length>20&&(e=`${e.substring(0,20)}...`),JSON.stringify(e);if("number"==typeof e||"boolean"==typeof e)return""+e;if("object"==typeof e){if(e instanceof Array)return"an array";{const t=function(e){return e.constructor?e.constructor.name:null}(e);return t?`a custom ${t} object`:"an object"}}return"function"==typeof e?"a function":v()}function Du(e,t){if("_delegate"in e&&(e=e._delegate),!(e instanceof t)){if(t.name===e.constructor.name)throw new I(_.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=Cu(e);throw new I(_.INVALID_ARGUMENT,`Expected type '${t.name}', but it was: ${n}`)}}return e}function Au(e,t){if(t<=0)throw new I(_.INVALID_ARGUMENT,`Function ${e}() requires a positive number, but it was: ${t}.`)}class Nu{constructor(e){var t,n;if(void 0===e.host){if(void 0!==e.ssl)throw new I(_.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=e.host,this.ssl=null===(t=e.ssl)||void 0===t||t;if(this.credentials=e.credentials,this.ignoreUndefinedProperties=!!e.ignoreUndefinedProperties,this.localCache=e.localCache,void 0===e.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==e.cacheSizeBytes&&e.cacheSizeBytes<1048576)throw new I(_.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=e.cacheSizeBytes}Su("experimentalForceLongPolling",e.experimentalForceLongPolling,"experimentalAutoDetectLongPolling",e.experimentalAutoDetectLongPolling),this.experimentalForceLongPolling=!!e.experimentalForceLongPolling,this.experimentalForceLongPolling?this.experimentalAutoDetectLongPolling=!1:void 0===e.experimentalAutoDetectLongPolling?this.experimentalAutoDetectLongPolling=!0:this.experimentalAutoDetectLongPolling=!!e.experimentalAutoDetectLongPolling,this.experimentalLongPollingOptions=_u(null!==(n=e.experimentalLongPollingOptions)&&void 0!==n?n:{}),function(e){if(void 0!==e.timeoutSeconds){if(isNaN(e.timeoutSeconds))throw new I(_.INVALID_ARGUMENT,`invalid long polling timeout: ${e.timeoutSeconds} (must not be NaN)`);if(e.timeoutSeconds<5)throw new I(_.INVALID_ARGUMENT,`invalid long polling timeout: ${e.timeoutSeconds} (minimum allowed value is 5)`);if(e.timeoutSeconds>30)throw new I(_.INVALID_ARGUMENT,`invalid long polling timeout: ${e.timeoutSeconds} (maximum allowed value is 30)`)}}(this.experimentalLongPollingOptions),this.useFetchStreams=!!e.useFetchStreams}isEqual(e){return this.host===e.host&&this.ssl===e.ssl&&this.credentials===e.credentials&&this.cacheSizeBytes===e.cacheSizeBytes&&this.experimentalForceLongPolling===e.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===e.experimentalAutoDetectLongPolling&&function(e,t){return e.timeoutSeconds===t.timeoutSeconds}(this.experimentalLongPollingOptions,e.experimentalLongPollingOptions)&&this.ignoreUndefinedProperties===e.ignoreUndefinedProperties&&this.useFetchStreams===e.useFetchStreams}}class ku{constructor(e,t,n,r){this._authCredentials=e,this._appCheckCredentials=t,this._databaseId=n,this._app=r,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new Nu({}),this._settingsFrozen=!1}get app(){if(!this._app)throw new I(_.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(e){if(this._settingsFrozen)throw new I(_.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new Nu(e),void 0!==e.credentials&&(this._authCredentials=function(e){if(!e)return new T;switch(e.type){case"firstParty":return new A(e.sessionIndex||"0",e.iamToken||null,e.authTokenFactory||null);case"provider":return e.client;default:throw new I(_.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(e.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(e){const t=Iu.get(e);t&&(p("ComponentProvider","Removing Datastore"),Iu.delete(e),t.terminate())}(this),Promise.resolve()}}function Ou(e,t,n,r={}){var i;const s=(e=Du(e,ku))._getSettings(),a=`${t}:${n}`;if("firestore.googleapis.com"!==s.host&&s.host!==a&&m("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."),e._setSettings(Object.assign(Object.assign({},s),{host:a,ssl:!1})),r.mockUserToken){let t,n;if("string"==typeof r.mockUserToken)t=r.mockUserToken,n=l.MOCK_USER;else{t=o.createMockUserToken(r.mockUserToken,null===(i=e._app)||void 0===i?void 0:i.options.projectId);const s=r.mockUserToken.sub||r.mockUserToken.user_id;if(!s)throw new I(_.INVALID_ARGUMENT,"mockUserToken must contain 'sub' or 'user_id' field!");n=new l(s)}e._authCredentials=new x(new S(t,n))}}class Lu{constructor(e,t,n){this.converter=t,this._query=n,this.type="query",this.firestore=e}withConverter(e){return new Lu(this.firestore,e,this._query)}}class Pu{constructor(e,t,n){this.converter=t,this._key=n,this.type="document",this.firestore=e}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new Mu(this.firestore,this.converter,this._key.path.popLast())}withConverter(e){return new Pu(this.firestore,e,this._key)}}class Mu extends Lu{constructor(e,t,n){super(e,t,Tn(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const e=this._path.popLast();return e.isEmpty()?null:new Pu(this.firestore,null,new z(e))}withConverter(e){return new Mu(this.firestore,e,this._path)}}function Ru(e,t,...n){if(e=o.getModularInstance(e),1===arguments.length&&(t=L.newId()),Eu("doc","path",t),e instanceof ku){const r=U.fromString(t,...n);return Tu(r),new Pu(e,null,new z(r))}{if(!(e instanceof Pu||e instanceof Mu))throw new I(_.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=e._path.child(U.fromString(t,...n));return Tu(r),new Pu(e.firestore,e instanceof Mu?e.converter:null,new z(r))}}function Fu(e,t){return e=o.getModularInstance(e),t=o.getModularInstance(t),e instanceof Lu&&t instanceof Lu&&e.firestore===t.firestore&&Pn(e._query,t._query)&&e.converter===t.converter}class Vu{constructor(){this.iu=Promise.resolve(),this.su=[],this.ou=!1,this._u=[],this.au=null,this.uu=!1,this.cu=!1,this.lu=[],this.Yo=new fa(this,"async_queue_retry"),this.hu=()=>{const e=ha();e&&p("AsyncQueue","Visibility state changed to "+e.visibilityState),this.Yo.Wo()};const e=ha();e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.hu)}get isShuttingDown(){return this.ou}enqueueAndForget(e){this.enqueue(e)}enqueueAndForgetEvenWhileRestricted(e){this.Pu(),this.Iu(e)}enterRestrictedMode(e){if(!this.ou){this.ou=!0,this.cu=e||!1;const t=ha();t&&"function"==typeof t.removeEventListener&&t.removeEventListener("visibilitychange",this.hu)}}enqueue(e){if(this.Pu(),this.ou)return new Promise((()=>{}));const t=new E;return this.Iu((()=>this.ou&&this.cu?Promise.resolve():(e().then(t.resolve,t.reject),t.promise))).then((()=>t.promise))}enqueueRetryable(e){this.enqueueAndForget((()=>(this.su.push(e),this.Tu())))}async Tu(){if(0!==this.su.length){try{await this.su[0](),this.su.shift(),this.Yo.reset()}catch(e){if(!le(e))throw e;p("AsyncQueue","Operation failed with retryable error: "+e)}this.su.length>0&&this.Yo.$o((()=>this.Tu()))}}Iu(e){const t=this.iu.then((()=>(this.uu=!0,e().catch((e=>{this.au=e,this.uu=!1;const t=function(e){let t=e.message||"";return e.stack&&(t=e.stack.includes(e.message)?e.stack:e.message+"\n"+e.stack),t}(e);throw g("INTERNAL UNHANDLED ERROR: ",t),e})).then((e=>(this.uu=!1,e))))));return this.iu=t,t}enqueueAfterDelay(e,t,n){this.Pu(),this.lu.indexOf(e)>-1&&(t=0);const r=Wa.createAndSchedule(this,e,t,n,(e=>this.Eu(e)));return this._u.push(r),r}Pu(){this.au&&v()}verifyOperationInProgress(){}async du(){let e;do{e=this.iu,await e}while(e!==this.iu)}Au(e){for(const t of this._u)if(t.timerId===e)return!0;return!1}Ru(e){return this.du().then((()=>{this._u.sort(((e,t)=>e.targetTimeMs-t.targetTimeMs));for(const t of this._u)if(t.skipDelay(),"all"!==e&&t.timerId===e)break;return this.du()}))}Vu(e){this.lu.push(e)}Eu(e){const t=this._u.indexOf(e);this._u.splice(t,1)}}function Bu(e){return function(e,t){if("object"!=typeof e||null===e)return!1;const n=e;for(const e of["next","error","complete"])if(e in n&&"function"==typeof n[e])return!0;return!1}(e)}class Uu{constructor(){this._progressObserver={},this._taskCompletionResolver=new E,this._lastProgress={taskState:"Running",totalBytes:0,totalDocuments:0,bytesLoaded:0,documentsLoaded:0}}onProgress(e,t,n){this._progressObserver={next:e,error:t,complete:n}}catch(e){return this._taskCompletionResolver.promise.catch(e)}then(e,t){return this._taskCompletionResolver.promise.then(e,t)}_completeWith(e){this._updateProgress(e),this._progressObserver.complete&&this._progressObserver.complete(),this._taskCompletionResolver.resolve(e)}_failWith(e){this._lastProgress.taskState="Error",this._progressObserver.next&&this._progressObserver.next(this._lastProgress),this._progressObserver.error&&this._progressObserver.error(e),this._taskCompletionResolver.reject(e)}_updateProgress(e){this._lastProgress=e,this._progressObserver.next&&this._progressObserver.next(e)}}class qu extends ku{constructor(e,t,n,r){super(e,t,n,r),this.type="firestore",this._queue=new Vu,this._persistenceKey=(null==r?void 0:r.name)||"[DEFAULT]"}_terminate(){return this._firestoreClient||zu(this),this._firestoreClient.terminate()}}function ju(e){return e._firestoreClient||zu(e),e._firestoreClient.verifyNotTerminated(),e._firestoreClient}function zu(e){var t,n,r;const i=e._freezeSettings(),s=function(e,t,n,r){return new yt(e,t,n,r.host,r.ssl,r.experimentalForceLongPolling,r.experimentalAutoDetectLongPolling,_u(r.experimentalLongPollingOptions),r.useFetchStreams)}(e._databaseId,(null===(t=e._app)||void 0===t?void 0:t.options.appId)||"",e._persistenceKey,i);e._firestoreClient=new au(e._authCredentials,e._appCheckCredentials,e._queue,s),(null===(n=i.localCache)||void 0===n?void 0:n._offlineComponentProvider)&&(null===(r=i.localCache)||void 0===r?void 0:r._onlineComponentProvider)&&(e._firestoreClient._uninitializedComponentsProvider={_offlineKind:i.localCache.kind,_offline:i.localCache._offlineComponentProvider,_online:i.localCache._onlineComponentProvider})}function Gu(e,t,n){const r=new E;return e.asyncQueue.enqueue((async()=>{try{await cu(e,n),await uu(e,t),r.resolve()}catch(e){const t=e;if(!lu(t))throw t;m("Error enabling indexeddb cache. Falling back to memory cache: "+t),r.reject(t)}})).then((()=>r.promise))}function Ku(e){if(e._initialized||e._terminated)throw new I(_.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.")}class $u{constructor(e="count",t){this._internalFieldPath=t,this.type="AggregateField",this.aggregateType=e}}class Qu{constructor(e,t,n){this._userDataWriter=t,this._data=n,this.type="AggregateQuerySnapshot",this.query=e}data(){return this._userDataWriter.convertObjectMap(this._data)}}class Hu{constructor(e){this._byteString=e}static fromBase64String(e){try{return new Hu(ut.fromBase64String(e))}catch(e){throw new I(_.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+e)}}static fromUint8Array(e){return new Hu(ut.fromUint8Array(e))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(e){return this._byteString.isEqual(e._byteString)}}class Wu{constructor(...e){for(let t=0;t<e.length;++t)if(0===e[t].length)throw new I(_.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new j(e)}isEqual(e){return this._internalPath.isEqual(e._internalPath)}}class Ju{constructor(e){this._methodName=e}}class Yu{constructor(e,t){if(!isFinite(e)||e<-90||e>90)throw new I(_.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+e);if(!isFinite(t)||t<-180||t>180)throw new I(_.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+t);this._lat=e,this._long=t}get latitude(){return this._lat}get longitude(){return this._long}isEqual(e){return this._lat===e._lat&&this._long===e._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(e){return P(this._lat,e._lat)||P(this._long,e._long)}}const Xu=/^__.*__$/;class Zu{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return null!==this.fieldMask?new Cr(e,this.data,this.fieldMask,t,this.fieldTransforms):new xr(e,this.data,t,this.fieldTransforms)}}class el{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return new Cr(e,this.data,this.fieldMask,t,this.fieldTransforms)}}function tl(e){switch(e){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw v()}}class nl{constructor(e,t,n,r,i,s){this.settings=e,this.databaseId=t,this.serializer=n,this.ignoreUndefinedProperties=r,void 0===i&&this.mu(),this.fieldTransforms=i||[],this.fieldMask=s||[]}get path(){return this.settings.path}get fu(){return this.settings.fu}gu(e){return new nl(Object.assign(Object.assign({},this.settings),e),this.databaseId,this.serializer,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}pu(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),r=this.gu({path:n,yu:!1});return r.wu(e),r}Su(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),r=this.gu({path:n,yu:!1});return r.mu(),r}bu(e){return this.gu({path:void 0,yu:!0})}Du(e){return Il(e,this.settings.methodName,this.settings.Cu||!1,this.path,this.settings.vu)}contains(e){return void 0!==this.fieldMask.find((t=>e.isPrefixOf(t)))||void 0!==this.fieldTransforms.find((t=>e.isPrefixOf(t.field)))}mu(){if(this.path)for(let e=0;e<this.path.length;e++)this.wu(this.path.get(e))}wu(e){if(0===e.length)throw this.Du("Document fields must not be empty");if(tl(this.fu)&&Xu.test(e))throw this.Du('Document fields cannot begin and end with "__"')}}class rl{constructor(e,t,n){this.databaseId=e,this.ignoreUndefinedProperties=t,this.serializer=n||da(e)}Fu(e,t,n,r=!1){return new nl({fu:e,methodName:t,vu:n,path:j.emptyPath(),yu:!1,Cu:r},this.databaseId,this.serializer,this.ignoreUndefinedProperties)}}function il(e){const t=e._freezeSettings(),n=da(e._databaseId);return new rl(e._databaseId,!!t.ignoreUndefinedProperties,n)}function sl(e,t,n,r,i,s={}){const o=e.Fu(s.merge||s.mergeFields?2:0,t,n,i);vl("Data must be an object, but it was:",o,r);const a=ml(r,o);let c,u;if(s.merge)c=new at(o.fieldMask),u=o.fieldTransforms;else if(s.mergeFields){const e=[];for(const r of s.mergeFields){const i=wl(t,r,n);if(!o.contains(i))throw new I(_.INVALID_ARGUMENT,`Field '${i}' is specified in your field mask but missing from your input data.`);El(e,i)||e.push(i)}c=new at(e),u=o.fieldTransforms.filter((e=>c.covers(e.field)))}else c=null,u=o.fieldTransforms;return new Zu(new qt(a),c,u)}class ol extends Ju{_toFieldTransform(e){if(2!==e.fu)throw 1===e.fu?e.Du(`${this._methodName}() can only appear at the top level of your update data`):e.Du(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return e.fieldMask.push(e.path),null}isEqual(e){return e instanceof ol}}function al(e,t,n){return new nl({fu:3,vu:t.settings.vu,methodName:e._methodName,yu:n},t.databaseId,t.serializer,t.ignoreUndefinedProperties)}class cl extends Ju{_toFieldTransform(e){return new mr(e.path,new cr)}isEqual(e){return e instanceof cl}}class ul extends Ju{constructor(e,t){super(e),this.Mu=t}_toFieldTransform(e){const t=al(this,e,!0),n=this.Mu.map((e=>gl(e,t))),r=new ur(n);return new mr(e.path,r)}isEqual(e){return e instanceof ul&&o.deepEqual(this.Mu,e.Mu)}}class ll extends Ju{constructor(e,t){super(e),this.Mu=t}_toFieldTransform(e){const t=al(this,e,!0),n=this.Mu.map((e=>gl(e,t))),r=new hr(n);return new mr(e.path,r)}isEqual(e){return e instanceof ll&&o.deepEqual(this.Mu,e.Mu)}}class hl extends Ju{constructor(e,t){super(e),this.xu=t}_toFieldTransform(e){const t=new fr(e.serializer,rr(e.serializer,this.xu));return new mr(e.path,t)}isEqual(e){return e instanceof hl&&this.xu===e.xu}}function dl(e,t,n,r){const i=e.Fu(1,t,n);vl("Data must be an object, but it was:",i,r);const s=[],a=qt.empty();Xe(r,((e,r)=>{const c=_l(t,e,n);r=o.getModularInstance(r);const u=i.Su(c);if(r instanceof ol)s.push(c);else{const e=gl(r,u);null!=e&&(s.push(c),a.set(c,e))}}));const c=new at(s);return new el(a,c,i.fieldTransforms)}function fl(e,t,n,r,i,s){const a=e.Fu(1,t,n),c=[wl(t,r,n)],u=[i];if(s.length%2!=0)throw new I(_.INVALID_ARGUMENT,`Function ${t}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let e=0;e<s.length;e+=2)c.push(wl(t,s[e])),u.push(s[e+1]);const l=[],h=qt.empty();for(let e=c.length-1;e>=0;--e)if(!El(l,c[e])){const t=c[e];let n=u[e];n=o.getModularInstance(n);const r=a.Su(t);if(n instanceof ol)l.push(t);else{const e=gl(n,r);null!=e&&(l.push(t),h.set(t,e))}}const d=new at(l);return new el(h,d,a.fieldTransforms)}function pl(e,t,n,r=!1){return gl(n,e.Fu(r?4:3,t))}function gl(e,t){if(yl(e=o.getModularInstance(e)))return vl("Unsupported field value:",t,e),ml(e,t);if(e instanceof Ju)return function(e,t){if(!tl(t.fu))throw t.Du(`${e._methodName}() can only be used with update() and set()`);if(!t.path)throw t.Du(`${e._methodName}() is not currently supported inside arrays`);const n=e._toFieldTransform(t);n&&t.fieldTransforms.push(n)}(e,t),null;if(void 0===e&&t.ignoreUndefinedProperties)return null;if(t.path&&t.fieldMask.push(t.path),e instanceof Array){if(t.settings.yu&&4!==t.fu)throw t.Du("Nested arrays are not supported");return function(e,t){const n=[];let r=0;for(const i of e){let e=gl(i,t.bu(r));null==e&&(e={nullValue:"NULL_VALUE"}),n.push(e),r++}return{arrayValue:{values:n}}}(e,t)}return function(e,t){if(null===(e=o.getModularInstance(e)))return{nullValue:"NULL_VALUE"};if("number"==typeof e)return rr(t.serializer,e);if("boolean"==typeof e)return{booleanValue:e};if("string"==typeof e)return{stringValue:e};if(e instanceof Date){const n=F.fromDate(e);return{timestampValue:ui(t.serializer,n)}}if(e instanceof F){const n=new F(e.seconds,1e3*Math.floor(e.nanoseconds/1e3));return{timestampValue:ui(t.serializer,n)}}if(e instanceof Yu)return{geoPointValue:{latitude:e.latitude,longitude:e.longitude}};if(e instanceof Hu)return{bytesValue:li(t.serializer,e._byteString)};if(e instanceof Pu){const n=t.databaseId,r=e.firestore._databaseId;if(!r.isEqual(n))throw t.Du(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:fi(e.firestore._databaseId||t.databaseId,e._key.path)}}throw t.Du(`Unsupported field value: ${Cu(e)}`)}(e,t)}function ml(e,t){const n={};return et(e)?t.path&&t.path.length>0&&t.fieldMask.push(t.path):Xe(e,((e,r)=>{const i=gl(r,t.pu(e));null!=i&&(n[e]=i)})),{mapValue:{fields:n}}}function yl(e){return!("object"!=typeof e||null===e||e instanceof Array||e instanceof Date||e instanceof F||e instanceof Yu||e instanceof Hu||e instanceof Pu||e instanceof Ju)}function vl(e,t,n){if(!yl(n)||!function(e){return"object"==typeof e&&null!==e&&(Object.getPrototypeOf(e)===Object.prototype||null===Object.getPrototypeOf(e))}(n)){const r=Cu(n);throw"an object"===r?t.Du(e+" a custom object"):t.Du(e+" "+r)}}function wl(e,t,n){if((t=o.getModularInstance(t))instanceof Wu)return t._internalPath;if("string"==typeof t)return _l(e,t);throw Il("Field path arguments must be of type string or ",e,!1,void 0,n)}const bl=new RegExp("[~\\*/\\[\\]]");function _l(e,t,n){if(t.search(bl)>=0)throw Il(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`,e,!1,void 0,n);try{return new Wu(...t.split("."))._internalPath}catch(r){throw Il(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,e,!1,void 0,n)}}function Il(e,t,n,r,i){const s=r&&!r.isEmpty(),o=void 0!==i;let a=`Function ${t}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(s||o)&&(c+=" (found",s&&(c+=` in field ${r}`),o&&(c+=` in document ${i}`),c+=")"),new I(_.INVALID_ARGUMENT,a+e+c)}function El(e,t){return e.some((e=>e.isEqual(t)))}class Sl{constructor(e,t,n,r,i){this._firestore=e,this._userDataWriter=t,this._key=n,this._document=r,this._converter=i}get id(){return this._key.path.lastSegment()}get ref(){return new Pu(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const e=new Tl(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(e)}return this._userDataWriter.convertValue(this._document.data.value)}}get(e){if(this._document){const t=this._document.data.field(xl("DocumentSnapshot.get",e));if(null!==t)return this._userDataWriter.convertValue(t)}}}class Tl extends Sl{data(){return super.data()}}function xl(e,t){return"string"==typeof t?_l(e,t):t instanceof Wu?t._internalPath:t._delegate._internalPath}function Cl(e){if("L"===e.limitType&&0===e.explicitOrderBy.length)throw new I(_.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}class Dl{}class Al extends Dl{}class Nl extends Al{constructor(e,t,n){super(),this._field=e,this._op=t,this._value=n,this.type="where"}static _create(e,t,n){return new Nl(e,t,n)}_apply(e){const t=this._parse(e);return Bl(e._query,t),new Lu(e.firestore,e.converter,On(e._query,t))}_parse(e){const t=il(e.firestore),n=function(e,t,n,r,i,s,o){let a;if(i.isKeyField()){if("array-contains"===s||"array-contains-any"===s)throw new I(_.INVALID_ARGUMENT,`Invalid Query. You can't perform '${s}' queries on documentId().`);if("in"===s||"not-in"===s){Vl(o,s);const t=[];for(const n of o)t.push(Fl(r,e,n));a={arrayValue:{values:t}}}else a=Fl(r,e,o)}else"in"!==s&&"not-in"!==s&&"array-contains-any"!==s||Vl(o,s),a=pl(n,"where",o,"in"===s||"not-in"===s);return Jt.create(i,s,a)}(e._query,0,t,e.firestore._databaseId,this._field,this._op,this._value);return n}}class kl extends Dl{constructor(e,t){super(),this.type=e,this._queryConstraints=t}static _create(e,t){return new kl(e,t)}_parse(e){const t=this._queryConstraints.map((t=>t._parse(e))).filter((e=>e.getFilters().length>0));return 1===t.length?t[0]:Yt.create(t,this._getOperator())}_apply(e){const t=this._parse(e);return 0===t.getFilters().length?e:(function(e,t){let n=e;const r=t.getFlattenedFilters();for(const e of r)Bl(n,e),n=On(n,e)}(e._query,t),new Lu(e.firestore,e.converter,On(e._query,t)))}_getQueryConstraints(){return this._queryConstraints}_getOperator(){return"and"===this.type?"and":"or"}}class Ol extends Al{constructor(e,t){super(),this._field=e,this._direction=t,this.type="orderBy"}static _create(e,t){return new Ol(e,t)}_apply(e){const t=function(e,t,n){if(null!==e.startAt)throw new I(_.INVALID_ARGUMENT,"Invalid query. You must not call startAt() or startAfter() before calling orderBy().");if(null!==e.endAt)throw new I(_.INVALID_ARGUMENT,"Invalid query. You must not call endAt() or endBefore() before calling orderBy().");return new Qt(t,n)}(e._query,this._field,this._direction);return new Lu(e.firestore,e.converter,function(e,t){const n=e.explicitOrderBy.concat([t]);return new En(e.path,e.collectionGroup,n,e.filters.slice(),e.limit,e.limitType,e.startAt,e.endAt)}(e._query,t))}}class Ll extends Al{constructor(e,t,n){super(),this.type=e,this._limit=t,this._limitType=n}static _create(e,t,n){return new Ll(e,t,n)}_apply(e){return new Lu(e.firestore,e.converter,Ln(e._query,this._limit,this._limitType))}}class Pl extends Al{constructor(e,t,n){super(),this.type=e,this._docOrFields=t,this._inclusive=n}static _create(e,t,n){return new Pl(e,t,n)}_apply(e){const t=Rl(e,this.type,this._docOrFields,this._inclusive);return new Lu(e.firestore,e.converter,function(e,t){return new En(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,t,e.endAt)}(e._query,t))}}class Ml extends Al{constructor(e,t,n){super(),this.type=e,this._docOrFields=t,this._inclusive=n}static _create(e,t,n){return new Ml(e,t,n)}_apply(e){const t=Rl(e,this.type,this._docOrFields,this._inclusive);return new Lu(e.firestore,e.converter,function(e,t){return new En(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,e.startAt,t)}(e._query,t))}}function Rl(e,t,n,r){if(n[0]=o.getModularInstance(n[0]),n[0]instanceof Sl)return function(e,t,n,r,i){if(!r)throw new I(_.NOT_FOUND,`Can't use a DocumentSnapshot that doesn't exist for ${n}().`);const s=[];for(const n of Dn(e))if(n.field.isKeyField())s.push(At(t,r.key));else{const e=r.data.field(n.field);if(pt(e))throw new I(_.INVALID_ARGUMENT,'Invalid query. You are trying to start or end a query using a document for which the field "'+n.field+'" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');if(null===e){const e=n.field.canonicalString();throw new I(_.INVALID_ARGUMENT,`Invalid query. You are trying to start or end a query using a document for which the field '${e}' (used as the orderBy) does not exist.`)}s.push(e)}return new Gt(s,i)}(e._query,e.firestore._databaseId,t,n[0]._document,r);{const i=il(e.firestore);return function(e,t,n,r,i,s){const o=e.explicitOrderBy;if(i.length>o.length)throw new I(_.INVALID_ARGUMENT,`Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);const a=[];for(let s=0;s<i.length;s++){const c=i[s];if(o[s].field.isKeyField()){if("string"!=typeof c)throw new I(_.INVALID_ARGUMENT,`Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);if(!Cn(e)&&-1!==c.indexOf("/"))throw new I(_.INVALID_ARGUMENT,`Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);const n=e.path.child(U.fromString(c));if(!z.isDocumentKey(n))throw new I(_.INVALID_ARGUMENT,`Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);const i=new z(n);a.push(At(t,i))}else{const e=pl(n,r,c);a.push(e)}}return new Gt(a,s)}(e._query,e.firestore._databaseId,i,t,n,r)}}function Fl(e,t,n){if("string"==typeof(n=o.getModularInstance(n))){if(""===n)throw new I(_.INVALID_ARGUMENT,"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");if(!Cn(t)&&-1!==n.indexOf("/"))throw new I(_.INVALID_ARGUMENT,`Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);const r=t.path.child(U.fromString(n));if(!z.isDocumentKey(r))throw new I(_.INVALID_ARGUMENT,`Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);return At(e,new z(r))}if(n instanceof Pu)return At(e,n._key);throw new I(_.INVALID_ARGUMENT,`Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${Cu(n)}.`)}function Vl(e,t){if(!Array.isArray(e)||0===e.length)throw new I(_.INVALID_ARGUMENT,`Invalid Query. A non-empty array is required for '${t.toString()}' filters.`)}function Bl(e,t){const n=function(e,t){for(const n of e)for(const e of n.getFlattenedFilters())if(t.indexOf(e.op)>=0)return e.op;return null}(e.filters,function(e){switch(e){case"!=":return["!=","not-in"];case"array-contains-any":case"in":return["not-in"];case"not-in":return["array-contains-any","in","not-in","!="];default:return[]}}(t.op));if(null!==n)throw n===t.op?new I(_.INVALID_ARGUMENT,`Invalid query. You cannot use more than one '${t.op.toString()}' filter.`):new I(_.INVALID_ARGUMENT,`Invalid query. You cannot use '${t.op.toString()}' filters with '${n.toString()}' filters.`)}function Ul(e,t){if(!(t instanceof Nl||t instanceof kl))throw new I(_.INVALID_ARGUMENT,`Function ${e}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`)}class ql{convertValue(e,t="none"){switch(_t(e)){case 0:return null;case 1:return e.booleanValue;case 2:return dt(e.integerValue||e.doubleValue);case 3:return this.convertTimestamp(e.timestampValue);case 4:return this.convertServerTimestamp(e,t);case 5:return e.stringValue;case 6:return this.convertBytes(ft(e.bytesValue));case 7:return this.convertReference(e.referenceValue);case 8:return this.convertGeoPoint(e.geoPointValue);case 9:return this.convertArray(e.arrayValue,t);case 10:return this.convertObject(e.mapValue,t);default:throw v()}}convertObject(e,t){return this.convertObjectMap(e.fields,t)}convertObjectMap(e,t="none"){const n={};return Xe(e,((e,r)=>{n[e]=this.convertValue(r,t)})),n}convertGeoPoint(e){return new Yu(dt(e.latitude),dt(e.longitude))}convertArray(e,t){return(e.values||[]).map((e=>this.convertValue(e,t)))}convertServerTimestamp(e,t){switch(t){case"previous":const n=gt(e);return null==n?null:this.convertValue(n,t);case"estimate":return this.convertTimestamp(mt(e));default:return null}}convertTimestamp(e){const t=ht(e);return new F(t.seconds,t.nanos)}convertDocumentKey(e,t){const n=U.fromString(e);w(Vi(n));const r=new vt(n.get(1),n.get(3)),i=new z(n.popFirst(5));return r.isEqual(t)||g(`Document ${i} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`),i}}function jl(e,t,n){let r;return r=e?n&&(n.merge||n.mergeFields)?e.toFirestore(t,n):e.toFirestore(t):t,r}class zl extends ql{constructor(e){super(),this.firestore=e}convertBytes(e){return new Hu(e)}convertReference(e){const t=this.convertDocumentKey(e,this.firestore._databaseId);return new Pu(this.firestore,null,t)}}function Gl(){return new $u("count")}class Kl{constructor(e,t){this.hasPendingWrites=e,this.fromCache=t}isEqual(e){return this.hasPendingWrites===e.hasPendingWrites&&this.fromCache===e.fromCache}}class $l extends Sl{constructor(e,t,n,r,i,s){super(e,t,n,r,s),this._firestore=e,this._firestoreImpl=e,this.metadata=i}exists(){return super.exists()}data(e={}){if(this._document){if(this._converter){const t=new Ql(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(t,e)}return this._userDataWriter.convertValue(this._document.data.value,e.serverTimestamps)}}get(e,t={}){if(this._document){const n=this._document.data.field(xl("DocumentSnapshot.get",e));if(null!==n)return this._userDataWriter.convertValue(n,t.serverTimestamps)}}}class Ql extends $l{data(e={}){return super.data(e)}}class Hl{constructor(e,t,n,r){this._firestore=e,this._userDataWriter=t,this._snapshot=r,this.metadata=new Kl(r.hasPendingWrites,r.fromCache),this.query=n}get docs(){const e=[];return this.forEach((t=>e.push(t))),e}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(e,t){this._snapshot.docs.forEach((n=>{e.call(t,new Ql(this._firestore,this._userDataWriter,n.key,n,new Kl(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(e={}){const t=!!e.includeMetadataChanges;if(t&&this._snapshot.excludesMetadataChanges)throw new I(_.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===t||(this._cachedChanges=function(e,t){if(e._snapshot.oldDocs.isEmpty()){let t=0;return e._snapshot.docChanges.map((n=>{const r=new Ql(e._firestore,e._userDataWriter,n.doc.key,n.doc,new Kl(e._snapshot.mutatedKeys.has(n.doc.key),e._snapshot.fromCache),e.query.converter);return n.doc,{type:"added",doc:r,oldIndex:-1,newIndex:t++}}))}{let n=e._snapshot.oldDocs;return e._snapshot.docChanges.filter((e=>t||3!==e.type)).map((t=>{const r=new Ql(e._firestore,e._userDataWriter,t.doc.key,t.doc,new Kl(e._snapshot.mutatedKeys.has(t.doc.key),e._snapshot.fromCache),e.query.converter);let i=-1,s=-1;return 0!==t.type&&(i=n.indexOf(t.doc.key),n=n.delete(t.doc.key)),1!==t.type&&(n=n.add(t.doc),s=n.indexOf(t.doc.key)),{type:Wl(t.type),doc:r,oldIndex:i,newIndex:s}}))}}(this,t),this._cachedChangesIncludeMetadataChanges=t),this._cachedChanges}}function Wl(e){switch(e){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return v()}}class Jl extends ql{constructor(e){super(),this.firestore=e}convertBytes(e){return new Hu(e)}convertReference(e){const t=this.convertDocumentKey(e,this.firestore._databaseId);return new Pu(this.firestore,null,t)}}function Yl(e,t){return function(e,t){const n=new E;return e.asyncQueue.enqueueAndForget((async()=>async function(e,t,n){const r=Jc(e);try{const e=await function(e,t){const n=b(e),r=F.now(),i=t.reduce(((e,t)=>e.add(t.key)),Xn());let s,o;return n.persistence.runTransaction("Locally write mutations","readwrite",(e=>{let a=zn(),c=Xn();return n.os.getEntries(e,i).next((e=>{a=e,a.forEach(((e,t)=>{t.isValidDocument()||(c=c.add(e))}))})).next((()=>n.localDocuments.getOverlayedDocuments(e,a))).next((i=>{s=i;const o=[];for(const e of t){const t=Sr(e,s.get(e.key).overlayedDocument);null!=t&&o.push(new Cr(e.key,t,jt(t.value.mapValue),vr.exists(!0)))}return n.mutationQueue.addMutationBatch(e,r,o,t)})).next((t=>{o=t;const r=t.applyToLocalDocumentSet(s,c);return n.documentOverlayCache.saveOverlays(e,t.batchId,r)}))})).then((()=>({batchId:o.batchId,changes:$n(s)})))}(r.localStore,t);r.sharedClientState.addPendingMutation(e.batchId),function(e,t,n){let r=e.xa[e.currentUser.toKey()];r||(r=new tt(P)),r=r.insert(t,n),e.xa[e.currentUser.toKey()]=r}(r,e.batchId,n),await Vc(r,e.changes),await Ra(r.remoteStore)}catch(e){const t=Ja(e,"Failed to persist write");n.reject(t)}}(await mu(e),t,n))),n.promise}(ju(e),t)}function Xl(e,t,n){const r=n.docs.get(t._key),i=new Jl(e);return new $l(e,i,t._key,r,new Kl(n.hasPendingWrites,n.fromCache),t.converter)}function Zl(e,t){const n=Du(e.firestore,qu),r=ju(n),i=Ze(t,((e,t)=>new Rr(t,e.aggregateType,e._internalFieldPath)));return function(e,t,n){const r=new E;return e.asyncQueue.enqueueAndForget((async()=>{try{const i=await yu(e);r.resolve(async function(e,t,n){var r;const i=b(e),{request:s,ut:o,parent:a}=Di(i.serializer,Nn(t),n);i.connection.Do||delete s.parent;const c=(await i.xo("RunAggregationQuery",i.serializer.databaseId,a,s,1)).filter((e=>!!e.result));w(1===c.length);const u=null===(r=c[0].result)||void 0===r?void 0:r.aggregateFields;return Object.keys(u).reduce(((e,t)=>(e[o[t]]=u[t],e)),{})}(i,t,n))}catch(e){r.reject(e)}})),r.promise}(r,e._query,i).then((t=>function(e,t,n){const r=new Jl(e);return new Qu(t,r,n)}(n,e,t)))}class eh{constructor(e){this.kind="memory",this._onlineComponentProvider=new tu,(null==e?void 0:e.garbageCollector)?this._offlineComponentProvider=e.garbageCollector._offlineComponentProvider:this._offlineComponentProvider=new Yc}toJSON(){return{kind:this.kind}}}class th{constructor(e){let t;this.kind="persistent",(null==e?void 0:e.tabManager)?(e.tabManager._initialize(e),t=e.tabManager):(t=oh(void 0),t._initialize(e)),this._onlineComponentProvider=t._onlineComponentProvider,this._offlineComponentProvider=t._offlineComponentProvider}toJSON(){return{kind:this.kind}}}class nh{constructor(){this.kind="memoryEager",this._offlineComponentProvider=new Yc}toJSON(){return{kind:this.kind}}}class rh{constructor(e){this.kind="memoryLru",this._offlineComponentProvider=new Xc(e)}toJSON(){return{kind:this.kind}}}class ih{constructor(e){this.forceOwnership=e,this.kind="persistentSingleTab"}toJSON(){return{kind:this.kind}}_initialize(e){this._onlineComponentProvider=new tu,this._offlineComponentProvider=new Zc(this._onlineComponentProvider,null==e?void 0:e.cacheSizeBytes,this.forceOwnership)}}class sh{constructor(){this.kind="PersistentMultipleTab"}toJSON(){return{kind:this.kind}}_initialize(e){this._onlineComponentProvider=new tu,this._offlineComponentProvider=new eu(this._onlineComponentProvider,null==e?void 0:e.cacheSizeBytes)}}function oh(e){return new ih(null==e?void 0:e.forceOwnership)}const ah={maxAttempts:5};class ch{constructor(e,t){this._firestore=e,this._commitHandler=t,this._mutations=[],this._committed=!1,this._dataReader=il(e)}set(e,t,n){this._verifyNotCommitted();const r=uh(e,this._firestore),i=jl(r.converter,t,n),s=sl(this._dataReader,"WriteBatch.set",r._key,i,null!==r.converter,n);return this._mutations.push(s.toMutation(r._key,vr.none())),this}update(e,t,n,...r){this._verifyNotCommitted();const i=uh(e,this._firestore);let s;return s="string"==typeof(t=o.getModularInstance(t))||t instanceof Wu?fl(this._dataReader,"WriteBatch.update",i._key,t,n,r):dl(this._dataReader,"WriteBatch.update",i._key,t),this._mutations.push(s.toMutation(i._key,vr.exists(!0))),this}delete(e){this._verifyNotCommitted();const t=uh(e,this._firestore);return this._mutations=this._mutations.concat(new kr(t._key,vr.none())),this}commit(){return this._verifyNotCommitted(),this._committed=!0,this._mutations.length>0?this._commitHandler(this._mutations):Promise.resolve()}_verifyNotCommitted(){if(this._committed)throw new I(_.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.")}}function uh(e,t){if((e=o.getModularInstance(e)).firestore!==t)throw new I(_.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return e}class lh extends class{constructor(e,t){this._firestore=e,this._transaction=t,this._dataReader=il(e)}get(e){const t=uh(e,this._firestore),n=new zl(this._firestore);return this._transaction.lookup([t._key]).then((e=>{if(!e||1!==e.length)return v();const r=e[0];if(r.isFoundDocument())return new Sl(this._firestore,n,r.key,r,t.converter);if(r.isNoDocument())return new Sl(this._firestore,n,t._key,null,t.converter);throw v()}))}set(e,t,n){const r=uh(e,this._firestore),i=jl(r.converter,t,n),s=sl(this._dataReader,"Transaction.set",r._key,i,null!==r.converter,n);return this._transaction.set(r._key,s),this}update(e,t,n,...r){const i=uh(e,this._firestore);let s;return s="string"==typeof(t=o.getModularInstance(t))||t instanceof Wu?fl(this._dataReader,"Transaction.update",i._key,t,n,r):dl(this._dataReader,"Transaction.update",i._key,t),this._transaction.update(i._key,s),this}delete(e){const t=uh(e,this._firestore);return this._transaction.delete(t._key),this}}{constructor(e,t){super(e,t),this._firestore=e}get(e){const t=uh(e,this._firestore),n=new Jl(this._firestore);return super.get(e).then((e=>new $l(this._firestore,n,t._key,e._document,new Kl(!1,!1),t.converter)))}}function hh(e,t){if("string"!=typeof e[t])throw new I(_.INVALID_ARGUMENT,"Missing string value for: "+t);return e[t]}class dh{constructor(e){this._client=e,this.type="PersistentCacheIndexManager"}}function fh(e,t){e._client.verifyNotTerminated(),function(e,t){return e.asyncQueue.enqueue((async()=>function(e,t){b(e).ts.Ui=t}(await pu(e),t)))}(e._client,t).then((e=>p(`setting persistent cache index auto creation isEnabled=${t} succeeded`))).catch((e=>m(`setting persistent cache index auto creation isEnabled=${t} failed`,e)))}const ph=new WeakMap;class gh{constructor(){this.Ou=new Map}static get instance(){return mh||(mh=new gh,function(e){if(jr)throw new Error("a TestingHooksSpi instance is already set");jr=e}(mh)),mh}et(e){this.Ou.forEach((t=>t(e)))}onExistenceFilterMismatch(e){const t=Symbol(),n=this.Ou;return n.set(t,e),()=>n.delete(t)}}let mh=null;!function(e,t=!0){!function(e){h=e}(r.SDK_VERSION),r._registerComponent(new i.Component("firestore",((e,{instanceIdentifier:n,options:r})=>{const i=e.getProvider("app").getImmediate(),s=new qu(new C(e.getProvider("auth-internal")),new k(e.getProvider("app-check-internal")),function(e,t){if(!Object.prototype.hasOwnProperty.apply(e.options,["projectId"]))throw new I(_.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new vt(e.options.projectId,t)}(i,n),i);return r=Object.assign({useFetchStreams:t},r),s._setSettings(r),s}),"PUBLIC").setMultipleInstances(!0)),r.registerVersion(u,"4.6.4",e),r.registerVersion(u,"4.6.4","cjs2017")}(),t.AbstractUserDataWriter=ql,t.AggregateField=$u,t.AggregateQuerySnapshot=Qu,t.Bytes=Hu,t.CACHE_SIZE_UNLIMITED=-1,t.CollectionReference=Mu,t.DocumentReference=Pu,t.DocumentSnapshot=$l,t.FieldPath=Wu,t.FieldValue=Ju,t.Firestore=qu,t.FirestoreError=I,t.GeoPoint=Yu,t.LoadBundleTask=Uu,t.PersistentCacheIndexManager=dh,t.Query=Lu,t.QueryCompositeFilterConstraint=kl,t.QueryConstraint=Al,t.QueryDocumentSnapshot=Ql,t.QueryEndAtConstraint=Ml,t.QueryFieldFilterConstraint=Nl,t.QueryLimitConstraint=Ll,t.QueryOrderByConstraint=Ol,t.QuerySnapshot=Hl,t.QueryStartAtConstraint=Pl,t.SnapshotMetadata=Kl,t.Timestamp=F,t.Transaction=lh,t.WriteBatch=ch,t._AutoId=L,t._ByteString=ut,t._DatabaseId=vt,t._DocumentKey=z,t._EmptyAppCheckTokenProvider=class{getToken(){return Promise.resolve(new N(""))}invalidateToken(){}start(e,t){}shutdown(){}},t._EmptyAuthCredentialsProvider=T,t._FieldPath=j,t._TestingHooks=class{constructor(){throw new Error("instances of this class should not be created")}static onExistenceFilterMismatch(e){return gh.instance.onExistenceFilterMismatch(e)}},t._cast=Du,t._debugAssert=function(e,t){e||v()},t._internalAggregationQueryToProtoRunAggregationQueryRequest=function(e,t){var n;const r=Ze(t,((e,t)=>new Rr(t,e.aggregateType,e._internalFieldPath))),i=null===(n=ju(Du(e.firestore,qu))._onlineComponents)||void 0===n?void 0:n.datastore.serializer;return void 0===i?null:Di(i,Nn(e._query),r,!0).request},t._internalQueryToProtoQueryTarget=function(e){var t;const n=null===(t=ju(Du(e.firestore,qu))._onlineComponents)||void 0===t?void 0:t.datastore.serializer;return void 0===n?null:Ci(n,An(e._query))._t},t._isBase64Available=function(){return"undefined"!=typeof atob},t._logWarn=m,t._validateIsNotUsedTogether=Su,t.addDoc=function(e,t){const n=Du(e.firestore,qu),r=Ru(e),i=jl(e.converter,t);return Yl(n,[sl(il(e.firestore),"addDoc",r._key,i,null!==e.converter,{}).toMutation(r._key,vr.exists(!1))]).then((()=>r))},t.aggregateFieldEqual=function(e,t){var n,r;return e instanceof $u&&t instanceof $u&&e.aggregateType===t.aggregateType&&(null===(n=e._internalFieldPath)||void 0===n?void 0:n.canonicalString())===(null===(r=t._internalFieldPath)||void 0===r?void 0:r.canonicalString())},t.aggregateQuerySnapshotEqual=function(e,t){return Fu(e.query,t.query)&&o.deepEqual(e.data(),t.data())},t.and=function(...e){return e.forEach((e=>Ul("and",e))),kl._create("and",e)},t.arrayRemove=function(...e){return new ll("arrayRemove",e)},t.arrayUnion=function(...e){return new ul("arrayUnion",e)},t.average=function(e){return new $u("avg",wl("average",e))},t.clearIndexedDbPersistence=function(e){if(e._initialized&&!e._terminated)throw new I(_.FAILED_PRECONDITION,"Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");const t=new E;return e._queue.enqueueAndForgetEvenWhileRestricted((async()=>{try{await async function(e){if(!oe.D())return Promise.resolve();const t=e+"main";await oe.delete(t)}(Ao(e._databaseId,e._persistenceKey)),t.resolve()}catch(e){t.reject(e)}})),t.promise},t.collection=function(e,t,...n){if(e=o.getModularInstance(e),Eu("collection","path",t),e instanceof ku){const r=U.fromString(t,...n);return xu(r),new Mu(e,null,r)}{if(!(e instanceof Pu||e instanceof Mu))throw new I(_.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=e._path.child(U.fromString(t,...n));return xu(r),new Mu(e.firestore,null,r)}},t.collectionGroup=function(e,t){if(e=Du(e,ku),Eu("collectionGroup","collection id",t),t.indexOf("/")>=0)throw new I(_.INVALID_ARGUMENT,`Invalid collection ID '${t}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);return new Lu(e,null,function(e){return new En(U.emptyPath(),e)}(t))},t.connectFirestoreEmulator=Ou,t.count=Gl,t.deleteAllPersistentCacheIndexes=function(e){e._client.verifyNotTerminated(),function(e){return e.asyncQueue.enqueue((async()=>function(e){const t=b(e),n=t.indexManager;return t.persistence.runTransaction("Delete All Indexes","readwrite",(e=>n.deleteAllFieldIndexes(e)))}(await pu(e))))}(e._client).then((e=>p("deleting all persistent cache indexes succeeded"))).catch((e=>m("deleting all persistent cache indexes failed",e)))},t.deleteDoc=function(e){return Yl(Du(e.firestore,qu),[new kr(e._key,vr.none())])},t.deleteField=function(){return new ol("deleteField")},t.disableNetwork=function(e){return function(e){return e.asyncQueue.enqueue((async()=>{const t=await fu(e),n=await gu(e);return t.setNetworkEnabled(!1),async function(e){const t=b(e);t.M_.add(0),await _a(t),t.N_.set("Offline")}(n)}))}(ju(e=Du(e,qu)))},t.disablePersistentCacheIndexAutoCreation=function(e){fh(e,!1)},t.doc=Ru,t.documentId=function(){return new Wu("__name__")},t.enableIndexedDbPersistence=function(e,t){Ku(e=Du(e,qu));const n=ju(e);if(n._uninitializedComponentsProvider)throw new I(_.FAILED_PRECONDITION,"SDK cache is already specified.");m("enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.");const r=e._freezeSettings(),i=new tu;return Gu(n,i,new Zc(i,r.cacheSizeBytes,null==t?void 0:t.forceOwnership))},t.enableMultiTabIndexedDbPersistence=function(e){Ku(e=Du(e,qu));const t=ju(e);if(t._uninitializedComponentsProvider)throw new I(_.FAILED_PRECONDITION,"SDK cache is already specified.");m("enableMultiTabIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.");const n=e._freezeSettings(),r=new tu;return Gu(t,r,new eu(r,n.cacheSizeBytes))},t.enableNetwork=function(e){return function(e){return e.asyncQueue.enqueue((async()=>{const t=await fu(e),n=await gu(e);return t.setNetworkEnabled(!0),function(e){const t=b(e);return t.M_.delete(0),ba(t)}(n)}))}(ju(e=Du(e,qu)))},t.enablePersistentCacheIndexAutoCreation=function(e){fh(e,!0)},t.endAt=function(...e){return Ml._create("endAt",e,!0)},t.endBefore=function(...e){return Ml._create("endBefore",e,!1)},t.ensureFirestoreConfigured=ju,t.executeWrite=Yl,t.getAggregateFromServer=Zl,t.getCountFromServer=function(e){return Zl(e,{count:Gl()})},t.getDoc=function(e){e=Du(e,Pu);const t=Du(e.firestore,qu);return wu(ju(t),e._key).then((n=>Xl(t,e,n)))},t.getDocFromCache=function(e){e=Du(e,Pu);const t=Du(e.firestore,qu),n=ju(t),r=new Jl(t);return function(e,t){const n=new E;return e.asyncQueue.enqueueAndForget((async()=>async function(e,t,n){try{const r=await function(e,t){const n=b(e);return n.persistence.runTransaction("read document","readonly",(e=>n.localDocuments.getDocument(e,t)))}(e,t);r.isFoundDocument()?n.resolve(r):r.isNoDocument()?n.resolve(null):n.reject(new I(_.UNAVAILABLE,"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"))}catch(e){const r=Ja(e,`Failed to get document '${t} from cache`);n.reject(r)}}(await pu(e),t,n))),n.promise}(n,e._key).then((n=>new $l(t,r,e._key,n,new Kl(null!==n&&n.hasLocalMutations,!0),e.converter)))},t.getDocFromServer=function(e){e=Du(e,Pu);const t=Du(e.firestore,qu);return wu(ju(t),e._key,{source:"server"}).then((n=>Xl(t,e,n)))},t.getDocs=function(e){e=Du(e,Lu);const t=Du(e.firestore,qu),n=ju(t),r=new Jl(t);return Cl(e._query),bu(n,e._query).then((n=>new Hl(t,r,e,n)))},t.getDocsFromCache=function(e){e=Du(e,Lu);const t=Du(e.firestore,qu),n=ju(t),r=new Jl(t);return function(e,t){const n=new E;return e.asyncQueue.enqueueAndForget((async()=>async function(e,t,n){try{const r=await qo(e,t,!0),i=new mc(t,r.hs),s=i.da(r.documents),o=i.applyChanges(s,!1);n.resolve(o.snapshot)}catch(e){const r=Ja(e,`Failed to execute query '${t} against cache`);n.reject(r)}}(await pu(e),t,n))),n.promise}(n,e._query).then((n=>new Hl(t,r,e,n)))},t.getDocsFromServer=function(e){e=Du(e,Lu);const t=Du(e.firestore,qu),n=ju(t),r=new Jl(t);return bu(n,e._query,{source:"server"}).then((n=>new Hl(t,r,e,n)))},t.getFirestore=function(e,t){const n="object"==typeof e?e:r.getApp(),i="string"==typeof e?e:t||"(default)",s=r._getProvider(n,"firestore").getImmediate({identifier:i});if(!s._initialized){const e=o.getDefaultEmulatorHostnameAndPort("firestore");e&&Ou(s,...e)}return s},t.getPersistentCacheIndexManager=function(e){var t;e=Du(e,qu);const n=ph.get(e);if(n)return n;const r=ju(e);if("persistent"!==(null===(t=r._uninitializedComponentsProvider)||void 0===t?void 0:t._offlineKind))return null;const i=new dh(r);return ph.set(e,i),i},t.increment=function(e){return new hl("increment",e)},t.initializeFirestore=function(e,t,n){n||(n="(default)");const i=r._getProvider(e,"firestore");if(i.isInitialized(n)){const e=i.getImmediate({identifier:n}),r=i.getOptions(n);if(o.deepEqual(r,t))return e;throw new I(_.FAILED_PRECONDITION,"initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.")}if(void 0!==t.cacheSizeBytes&&void 0!==t.localCache)throw new I(_.INVALID_ARGUMENT,"cache and cacheSizeBytes cannot be specified at the same time as cacheSizeBytes willbe deprecated. Instead, specify the cache size in the cache object");if(void 0!==t.cacheSizeBytes&&-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new I(_.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");return i.initialize({options:t,instanceIdentifier:n})},t.limit=function(e){return Au("limit",e),Ll._create("limit",e,"F")},t.limitToLast=function(e){return Au("limitToLast",e),Ll._create("limitToLast",e,"L")},t.loadBundle=function(e,t){const n=ju(e=Du(e,qu)),r=new Uu;return function(e,t,n,r){const i=function(e,t){let n;return n="string"==typeof e?zr().encode(e):e,function(e,t){return new iu(e,t)}(function(e,t){if(e instanceof Uint8Array)return nu(e,t);if(e instanceof ArrayBuffer)return nu(new Uint8Array(e),t);if(e instanceof ReadableStream)return e.getReader();throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream")}(n),t)}(n,da(t));e.asyncQueue.enqueueAndForget((async()=>{!function(e,t,n){const r=b(e);(async function(e,t,n){try{const r=await t.getMetadata();if(await function(e,t){const n=b(e),r=di(t.createTime);return n.persistence.runTransaction("hasNewerBundle","readonly",(e=>n.$r.getBundleMetadata(e,t.id))).then((e=>!!e&&e.createTime.compareTo(r)>=0))}(e.localStore,r))return await t.close(),n._completeWith(function(e){return{taskState:"Success",documentsLoaded:e.totalDocuments,bytesLoaded:e.totalBytes,totalDocuments:e.totalDocuments,totalBytes:e.totalBytes}}(r)),Promise.resolve(new Set);n._updateProgress(fc(r));const i=new dc(r,e.localStore,t.serializer);let s=await t.qa();for(;s;){const e=await i._a(s);e&&n._updateProgress(e),s=await t.qa()}const o=await i.complete();return await Vc(e,o.ca,void 0),await function(e,t){const n=b(e);return n.persistence.runTransaction("Save bundle","readwrite",(e=>n.$r.saveBundleMetadata(e,t)))}(e.localStore,r),n._completeWith(o.progress),Promise.resolve(o.ua)}catch(e){return m("SyncEngine",`Loading bundle failed with ${e}`),n._failWith(e),Promise.resolve(new Set)}})(r,t,n).then((e=>{r.sharedClientState.notifyBundleLoaded(e)}))}(await mu(e),i,r)}))}(n,e._databaseId,t,r),r},t.memoryEagerGarbageCollector=function(){return new nh},t.memoryLocalCache=function(e){return new eh(e)},t.memoryLruGarbageCollector=function(e){return new rh(null==e?void 0:e.cacheSizeBytes)},t.namedQuery=function(e,t){return function(e,t){return e.asyncQueue.enqueue((async()=>function(e,t){const n=b(e);return n.persistence.runTransaction("Get named query","readonly",(e=>n.$r.getNamedQuery(e,t)))}(await pu(e),t)))}(ju(e=Du(e,qu)),t).then((t=>t?new Lu(e,null,t.query):null))},t.onSnapshot=function(e,...t){var n,r,i;e=o.getModularInstance(e);let s={includeMetadataChanges:!1,source:"default"},a=0;"object"!=typeof t[a]||Bu(t[a])||(s=t[a],a++);const c={includeMetadataChanges:s.includeMetadataChanges,source:s.source};if(Bu(t[a])){const e=t[a];t[a]=null===(n=e.next)||void 0===n?void 0:n.bind(e),t[a+1]=null===(r=e.error)||void 0===r?void 0:r.bind(e),t[a+2]=null===(i=e.complete)||void 0===i?void 0:i.bind(e)}let u,l,h;if(e instanceof Pu)l=Du(e.firestore,qu),h=Tn(e._key.path),u={next:n=>{t[a]&&t[a](Xl(l,e,n))},error:t[a+1],complete:t[a+2]};else{const n=Du(e,Lu);l=Du(n.firestore,qu),h=n._query;const r=new Jl(l);u={next:e=>{t[a]&&t[a](new Hl(l,r,n,e))},error:t[a+1],complete:t[a+2]},Cl(e._query)}return function(e,t,n,r){const i=new ru(r),s=new uc(t,i,n);return e.asyncQueue.enqueueAndForget((async()=>nc(await vu(e),s))),()=>{i.$a(),e.asyncQueue.enqueueAndForget((async()=>rc(await vu(e),s)))}}(ju(l),h,c,u)},t.onSnapshotsInSync=function(e,t){return function(e,t){const n=new ru(t);return e.asyncQueue.enqueueAndForget((async()=>function(e,t){b(e).z_.add(t),t.next()}(await vu(e),n))),()=>{n.$a(),e.asyncQueue.enqueueAndForget((async()=>function(e,t){b(e).z_.delete(t)}(await vu(e),n)))}}(ju(e=Du(e,qu)),Bu(t)?t:{next:t})},t.or=function(...e){return e.forEach((e=>Ul("or",e))),kl._create("or",e)},t.orderBy=function(e,t="asc"){const n=t,r=xl("orderBy",e);return Ol._create(r,n)},t.persistentLocalCache=function(e){return new th(e)},t.persistentMultipleTabManager=function(){return new sh},t.persistentSingleTabManager=oh,t.query=function(e,t,...n){let r=[];t instanceof Dl&&r.push(t),r=r.concat(n),function(e){const t=e.filter((e=>e instanceof kl)).length,n=e.filter((e=>e instanceof Nl)).length;if(t>1||t>0&&n>0)throw new I(_.INVALID_ARGUMENT,"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.")}(r);for(const t of r)e=t._apply(e);return e},t.queryEqual=Fu,t.refEqual=function(e,t){return e=o.getModularInstance(e),t=o.getModularInstance(t),(e instanceof Pu||e instanceof Mu)&&(t instanceof Pu||t instanceof Mu)&&e.firestore===t.firestore&&e.path===t.path&&e.converter===t.converter},t.runTransaction=function(e,t,n){e=Du(e,qu);const r=Object.assign(Object.assign({},ah),n);return function(e){if(e.maxAttempts<1)throw new I(_.INVALID_ARGUMENT,"Max attempts must be at least 1")}(r),function(e,t,n){const r=new E;return e.asyncQueue.enqueueAndForget((async()=>{const i=await yu(e);new ou(e.asyncQueue,i,n,t,r).Xa()})),r.promise}(ju(e),(n=>t(new lh(e,n))),r)},t.serverTimestamp=function(){return new cl("serverTimestamp")},t.setDoc=function(e,t,n){e=Du(e,Pu);const r=Du(e.firestore,qu),i=jl(e.converter,t,n);return Yl(r,[sl(il(r),"setDoc",e._key,i,null!==e.converter,n).toMutation(e._key,vr.none())])},t.setIndexConfiguration=function(e,t){var n;const r=ju(e=Du(e,qu));if(!r._uninitializedComponentsProvider||"memory"===(null===(n=r._uninitializedComponentsProvider)||void 0===n?void 0:n._offlineKind))return m("Cannot enable indexes when persistence is disabled"),Promise.resolve();const i=function(e){const t="string"==typeof e?function(e){try{return JSON.parse(e)}catch(e){throw new I(_.INVALID_ARGUMENT,"Failed to parse JSON: "+(null==e?void 0:e.message))}}(e):e,n=[];if(Array.isArray(t.indexes))for(const e of t.indexes){const t=hh(e,"collectionGroup"),r=[];if(Array.isArray(e.fields))for(const t of e.fields){const e=_l("setIndexConfiguration",hh(t,"fieldPath"));"CONTAINS"===t.arrayConfig?r.push(new H(e,2)):"ASCENDING"===t.order?r.push(new H(e,0)):"DESCENDING"===t.order&&r.push(new H(e,1))}n.push(new G(G.UNKNOWN_ID,t,r,J.empty()))}return n}(t);return function(e,t){return e.asyncQueue.enqueue((async()=>async function(e,t){const n=b(e),r=n.indexManager,i=[];return n.persistence.runTransaction("Configure indexes","readwrite",(e=>r.getFieldIndexes(e).next((n=>function(e,t,n,r,i){e=[...e],t=[...t],e.sort(n),t.sort(n);const s=e.length,o=t.length;let a=0,c=0;for(;a<o&&c<s;){const s=n(e[c],t[a]);s<0?i(e[c++]):s>0?r(t[a++]):(a++,c++)}for(;a<o;)r(t[a++]);for(;c<s;)i(e[c++])}(n,t,Q,(t=>{i.push(r.addFieldIndex(e,t))}),(t=>{i.push(r.deleteFieldIndex(e,t))})))).next((()=>ie.waitFor(i)))))}(await pu(e),t)))}(r,i)},t.setLogLevel=function(e){d.setLogLevel(e)},t.snapshotEqual=function(e,t){return e instanceof $l&&t instanceof $l?e._firestore===t._firestore&&e._key.isEqual(t._key)&&(null===e._document?null===t._document:e._document.isEqual(t._document))&&e._converter===t._converter:e instanceof Hl&&t instanceof Hl&&e._firestore===t._firestore&&Fu(e.query,t.query)&&e.metadata.isEqual(t.metadata)&&e._snapshot.isEqual(t._snapshot)},t.startAfter=function(...e){return Pl._create("startAfter",e,!1)},t.startAt=function(...e){return Pl._create("startAt",e,!0)},t.sum=function(e){return new $u("sum",wl("sum",e))},t.terminate=function(e){return r._removeServiceInstance(e.app,"firestore",e._databaseId.database),e._delete()},t.updateDoc=function(e,t,n,...r){e=Du(e,Pu);const i=Du(e.firestore,qu),s=il(i);let a;return a="string"==typeof(t=o.getModularInstance(t))||t instanceof Wu?fl(s,"updateDoc",e._key,t,n,r):dl(s,"updateDoc",e._key,t),Yl(i,[a.toMutation(e._key,vr.exists(!0))])},t.waitForPendingWrites=function(e){return function(e){const t=new E;return e.asyncQueue.enqueueAndForget((async()=>async function(e,t){const n=b(e);Da(n.remoteStore)||p("SyncEngine","The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");try{const e=await function(e){const t=b(e);return t.persistence.runTransaction("Get highest unacknowledged batch id","readonly",(e=>t.mutationQueue.getHighestUnacknowledgedBatchId(e)))}(n.localStore);if(-1===e)return void t.resolve();const r=n.Oa.get(e)||[];r.push(t),n.Oa.set(e,r)}catch(e){const n=Ja(e,"Initialization of waitForPendingWrites() operation failed");t.reject(n)}}(await mu(e),t))),t.promise}(ju(e=Du(e,qu)))},t.where=function(e,t,n){const r=t,i=xl("where",e);return Nl._create(i,r,n)},t.writeBatch=function(e){return ju(e=Du(e,qu)),new ch(e,(t=>Yl(e,t)))}},795:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i,s=n(322),o=[];t.LogLevel=void 0,(i=t.LogLevel||(t.LogLevel={}))[i.DEBUG=0]="DEBUG",i[i.VERBOSE=1]="VERBOSE",i[i.INFO=2]="INFO",i[i.WARN=3]="WARN",i[i.ERROR=4]="ERROR",i[i.SILENT=5]="SILENT";var a={debug:t.LogLevel.DEBUG,verbose:t.LogLevel.VERBOSE,info:t.LogLevel.INFO,warn:t.LogLevel.WARN,error:t.LogLevel.ERROR,silent:t.LogLevel.SILENT},c=t.LogLevel.INFO,u=((r={})[t.LogLevel.DEBUG]="log",r[t.LogLevel.VERBOSE]="log",r[t.LogLevel.INFO]="info",r[t.LogLevel.WARN]="warn",r[t.LogLevel.ERROR]="error",r),l=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(!(t<e.logLevel)){var i=(new Date).toISOString(),o=u[t];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: ".concat(t,")"));console[o].apply(console,s.__spreadArray(["[".concat(i,"]  ").concat(e.name,":")],n,!1))}},h=function(){function e(e){this.name=e,this._logLevel=c,this._logHandler=l,this._userLogHandler=null,o.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in t.LogLevel))throw new TypeError('Invalid value "'.concat(e,'" assigned to `logLevel`'));this._logLevel=e},enumerable:!1,configurable:!0}),e.prototype.setLogLevel=function(e){this._logLevel="string"==typeof e?a[e]:e},Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(e){this._userLogHandler=e},enumerable:!1,configurable:!0}),e.prototype.debug=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];this._userLogHandler&&this._userLogHandler.apply(this,s.__spreadArray([this,t.LogLevel.DEBUG],e,!1)),this._logHandler.apply(this,s.__spreadArray([this,t.LogLevel.DEBUG],e,!1))},e.prototype.log=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];this._userLogHandler&&this._userLogHandler.apply(this,s.__spreadArray([this,t.LogLevel.VERBOSE],e,!1)),this._logHandler.apply(this,s.__spreadArray([this,t.LogLevel.VERBOSE],e,!1))},e.prototype.info=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];this._userLogHandler&&this._userLogHandler.apply(this,s.__spreadArray([this,t.LogLevel.INFO],e,!1)),this._logHandler.apply(this,s.__spreadArray([this,t.LogLevel.INFO],e,!1))},e.prototype.warn=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];this._userLogHandler&&this._userLogHandler.apply(this,s.__spreadArray([this,t.LogLevel.WARN],e,!1)),this._logHandler.apply(this,s.__spreadArray([this,t.LogLevel.WARN],e,!1))},e.prototype.error=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];this._userLogHandler&&this._userLogHandler.apply(this,s.__spreadArray([this,t.LogLevel.ERROR],e,!1)),this._logHandler.apply(this,s.__spreadArray([this,t.LogLevel.ERROR],e,!1))},e}();t.Logger=h,t.setLogLevel=function(e){o.forEach((function(t){t.setLogLevel(e)}))},t.setUserLogHandler=function(e,n){for(var r=function(r){var i=null;n&&n.level&&(i=a[n.level]),r.userLogHandler=null===e?null:function(n,r){for(var s=[],o=2;o<arguments.length;o++)s[o-2]=arguments[o];var a=s.map((function(e){if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((function(e){return e})).join(" ");r>=(null!=i?i:n.logLevel)&&e({level:t.LogLevel[r].toLowerCase(),message:a,args:s,type:n.name})}},i=0,s=o;i<s.length;i++)r(s[i])}},107:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},i=function(e,t){if(!e)throw s(t)},s=function(e){return new Error("Firebase Database ("+r.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},o=function(e){const t=[];let n=0;for(let r=0;r<e.length;r++){let i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},a={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[];for(let t=0;t<e.length;t+=3){const i=e[t],s=t+1<e.length,o=s?e[t+1]:0,a=t+2<e.length,c=a?e[t+2]:0,u=i>>2,l=(3&i)<<4|o>>4;let h=(15&o)<<2|c>>6,d=63&c;a||(d=64,s||(h=64)),r.push(n[u],n[l],n[h],n[d])}return r.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(o(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,r=0;for(;n<e.length;){const i=e[n++];if(i<128)t[r++]=String.fromCharCode(i);else if(i>191&&i<224){const s=e[n++];t[r++]=String.fromCharCode((31&i)<<6|63&s)}else if(i>239&&i<365){const s=((7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(s>>10)),t[r++]=String.fromCharCode(56320+(1023&s))}else{const s=e[n++],o=e[n++];t[r++]=String.fromCharCode((15&i)<<12|(63&s)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[];for(let t=0;t<e.length;){const i=n[e.charAt(t++)],s=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const a=t<e.length?n[e.charAt(t)]:64;if(++t,null==i||null==s||null==o||null==a)throw new c;const u=i<<2|s>>4;if(r.push(u),64!==o){const e=s<<4&240|o>>2;if(r.push(e),64!==a){const e=o<<6&192|a;r.push(e)}}}return r},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class c extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const u=function(e){const t=o(e);return a.encodeByteArray(t,!0)},l=function(e){return u(e).replace(/\./g,"")},h=function(e){try{return a.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function d(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const n in t)t.hasOwnProperty(n)&&"__proto__"!==n&&(e[n]=d(e[n],t[n]));return e}function f(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("Unable to locate global object.")}const p=()=>{try{return f().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process)return;const e="MISSING_ENV_VAR".__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&h(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},g=e=>{var t,n;return null===(n=null===(t=p())||void 0===t?void 0:t.emulatorHosts)||void 0===n?void 0:n[e]};class m{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function y(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function v(){var e;const t=null===(e=p())||void 0===e?void 0:e.forceEnvironment;if("node"===t)return!0;if("browser"===t)return!1;try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(e){return!1}}function w(){return"undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof self&&self instanceof WorkerGlobalScope}class b extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,b.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,_.prototype.create)}}class _{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},r=`${this.service}/${e}`,i=this.errors[e],s=i?function(e,t){return e.replace(I,((e,n)=>{const r=t[n];return null!=r?String(r):`<${n}?>`}))}(i,n):"Error",o=`${this.serviceName}: ${s} (${r}).`;return new b(r,o,n)}}const I=/\{\$([^}]+)}/g;function E(e){return JSON.parse(e)}const S=function(e){let t={},n={},r={},i="";try{const s=e.split(".");t=E(h(s[0])||""),n=E(h(s[1])||""),i=s[2],r=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:r,signature:i}};function T(e){return null!==e&&"object"==typeof e}class x{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,n){let r;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");r=function(e,t){if("object"!=typeof e||null===e)return!1;for(const t of["next","error","complete"])if(t in e&&"function"==typeof e[t])return!0;return!1}(e)?e:{next:e,error:t,complete:n},void 0===r.next&&(r.next=C),void 0===r.error&&(r.error=C),void 0===r.complete&&(r.complete=C);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?r.error(this.finalError):r.complete()}catch(e){}})),this.observers.push(r),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function C(){}function D(e,t){return`${e} failed: ${t} argument `}const A=144e5;t.CONSTANTS=r,t.DecodeBase64StringError=c,t.Deferred=m,t.ErrorFactory=_,t.FirebaseError=b,t.MAX_VALUE_MILLIS=A,t.RANDOM_FACTOR=.5,t.Sha1=class{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const n=this.W_;if("string"==typeof e)for(let r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=n[e-3]^n[e-8]^n[e-14]^n[e-16];n[e]=4294967295&(t<<1|t>>>31)}let r,i,s=this.chain_[0],o=this.chain_[1],a=this.chain_[2],c=this.chain_[3],u=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(r=c^o&(a^c),i=1518500249):(r=o^a^c,i=1859775393):e<60?(r=o&a|c&(o|a),i=2400959708):(r=o^a^c,i=3395469782);const t=(s<<5|s>>>27)+r+u+i+n[e]&4294967295;u=c,c=a,a=4294967295&(o<<30|o>>>2),o=s,s=t}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+a&4294967295,this.chain_[3]=this.chain_[3]+c&4294967295,this.chain_[4]=this.chain_[4]+u&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const n=t-this.blockSize;let r=0;const i=this.buf_;let s=this.inbuf_;for(;r<t;){if(0===s)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(i[s]=e.charCodeAt(r),++s,++r,s===this.blockSize){this.compress_(i),s=0;break}}else for(;r<t;)if(i[s]=e[r],++s,++r,s===this.blockSize){this.compress_(i),s=0;break}}this.inbuf_=s,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let n=0;for(let t=0;t<5;t++)for(let r=24;r>=0;r-=8)e[n]=this.chain_[t]>>r&255,++n;return e}},t.areCookiesEnabled=function(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)},t.assert=i,t.assertionError=s,t.async=function(e,t){return(...n)=>{Promise.resolve(!0).then((()=>{e(...n)})).catch((e=>{t&&t(e)}))}},t.base64=a,t.base64Decode=h,t.base64Encode=u,t.base64urlEncodeWithoutPadding=l,t.calculateBackoffMillis=function(e,t=1e3,n=2){const r=t*Math.pow(n,e),i=Math.round(.5*r*(Math.random()-.5)*2);return Math.min(A,r+i)},t.contains=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.createMockUserToken=function(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const n=t||"demo-project",r=e.iat||0,i=e.sub||e.user_id;if(!i)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const s=Object.assign({iss:`https://securetoken.google.com/${n}`,aud:n,iat:r,exp:r+3600,auth_time:r,sub:i,user_id:i,firebase:{sign_in_provider:"custom",identities:{}}},e);return[l(JSON.stringify({alg:"none",type:"JWT"})),l(JSON.stringify(s)),""].join(".")},t.createSubscribe=function(e,t){const n=new x(e,t);return n.subscribe.bind(n)},t.decode=S,t.deepCopy=function(e){return d(void 0,e)},t.deepEqual=function e(t,n){if(t===n)return!0;const r=Object.keys(t),i=Object.keys(n);for(const s of r){if(!i.includes(s))return!1;const r=t[s],o=n[s];if(T(r)&&T(o)){if(!e(r,o))return!1}else if(r!==o)return!1}for(const e of i)if(!r.includes(e))return!1;return!0},t.deepExtend=d,t.errorPrefix=D,t.extractQuerystring=function(e){const t=e.indexOf("?");if(!t)return"";const n=e.indexOf("#",t);return e.substring(t,n>0?n:void 0)},t.getDefaultAppConfig=()=>{var e;return null===(e=p())||void 0===e?void 0:e.config},t.getDefaultEmulatorHost=g,t.getDefaultEmulatorHostnameAndPort=e=>{const t=g(e);if(!t)return;const n=t.lastIndexOf(":");if(n<=0||n+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const r=parseInt(t.substring(n+1),10);return"["===t[0]?[t.substring(1,n-1),r]:[t.substring(0,n),r]},t.getDefaults=p,t.getExperimentalSetting=e=>{var t;return null===(t=p())||void 0===t?void 0:t[`_${e}`]},t.getGlobal=f,t.getModularInstance=function(e){return e&&e._delegate?e._delegate:e},t.getUA=y,t.isAdmin=function(e){const t=S(e).claims;return"object"==typeof t&&!0===t.admin},t.isBrowser=function(){return"undefined"!=typeof window||w()},t.isBrowserExtension=function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id},t.isElectron=function(){return y().indexOf("Electron/")>=0},t.isEmpty=function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},t.isIE=function(){const e=y();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0},t.isIndexedDBAvailable=function(){try{return"object"==typeof indexedDB}catch(e){return!1}},t.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(y())},t.isNode=v,t.isNodeSdk=function(){return!0===r.NODE_CLIENT||!0===r.NODE_ADMIN},t.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},t.isSafari=function(){return!v()&&!!navigator.userAgent&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")},t.isUWP=function(){return y().indexOf("MSAppHost/")>=0},t.isValidFormat=function(e){const t=S(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},t.isValidTimestamp=function(e){const t=S(e).claims,n=Math.floor((new Date).getTime()/1e3);let r=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?r=t.nbf:t.hasOwnProperty("iat")&&(r=t.iat),i=t.hasOwnProperty("exp")?t.exp:r+86400),!!n&&!!r&&!!i&&n>=r&&n<=i},t.isWebWorker=w,t.issuedAtTime=function(e){const t=S(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},t.jsonEval=E,t.map=function(e,t,n){const r={};for(const i in e)Object.prototype.hasOwnProperty.call(e,i)&&(r[i]=t.call(n,e[i],i,e));return r},t.ordinal=function(e){return Number.isFinite(e)?e+function(e){const t=(e=Math.abs(e))%100;if(t>=10&&t<=20)return"th";const n=e%10;return 1===n?"st":2===n?"nd":3===n?"rd":"th"}(e):`${e}`},t.promiseWithTimeout=function(e,t=2e3){const n=new m;return setTimeout((()=>n.reject("timeout!")),t),e.then(n.resolve,n.reject),n.promise},t.querystring=function(e){const t=[];for(const[n,r]of Object.entries(e))Array.isArray(r)?r.forEach((e=>{t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(n)+"="+encodeURIComponent(r));return t.length?"&"+t.join("&"):""},t.querystringDecode=function(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[n,r]=e.split("=");t[decodeURIComponent(n)]=decodeURIComponent(r)}})),t},t.safeGet=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0},t.stringLength=function(e){let t=0;for(let n=0;n<e.length;n++){const r=e.charCodeAt(n);r<128?t++:r<2048?t+=2:r>=55296&&r<=56319?(t+=4,n++):t+=3}return t},t.stringToByteArray=function(e){const t=[];let n=0;for(let r=0;r<e.length;r++){let s=e.charCodeAt(r);if(s>=55296&&s<=56319){const t=s-55296;r++,i(r<e.length,"Surrogate pair missing trail surrogate."),s=65536+(t<<10)+(e.charCodeAt(r)-56320)}s<128?t[n++]=s:s<2048?(t[n++]=s>>6|192,t[n++]=63&s|128):s<65536?(t[n++]=s>>12|224,t[n++]=s>>6&63|128,t[n++]=63&s|128):(t[n++]=s>>18|240,t[n++]=s>>12&63|128,t[n++]=s>>6&63|128,t[n++]=63&s|128)}return t},t.stringify=function(e){return JSON.stringify(e)},t.uuidv4=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},t.validateArgCount=function(e,t,n,r){let i;if(r<t?i="at least "+t:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},t.validateCallback=function(e,t,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(D(e,t)+"must be a valid function.")},t.validateContextObject=function(e,t,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(D(e,t)+"must be a valid context object.")},t.validateIndexedDBOpenable=function(){return new Promise(((e,t)=>{try{let n=!0;const r="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(r);i.onsuccess=()=>{i.result.close(),n||self.indexedDB.deleteDatabase(r),e(!0)},i.onupgradeneeded=()=>{n=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))},t.validateNamespace=function(e,t,n){if((!n||t)&&"string"!=typeof t)throw new Error(D(e,"namespace")+"must be a valid firebase namespace.")}},293:(e,t,n)=>{(function(){"use strict";var t;function n(){this.blockSize=-1,this.blockSize=64,this.g=Array(4),this.B=Array(this.blockSize),this.o=this.h=0,this.s()}function r(e,t,n){n||(n=0);var r=Array(16);if("string"==typeof t)for(var i=0;16>i;++i)r[i]=t.charCodeAt(n++)|t.charCodeAt(n++)<<8|t.charCodeAt(n++)<<16|t.charCodeAt(n++)<<24;else for(i=0;16>i;++i)r[i]=t[n++]|t[n++]<<8|t[n++]<<16|t[n++]<<24;t=e.g[0],n=e.g[1],i=e.g[2];var s=e.g[3],o=t+(s^n&(i^s))+r[0]+3614090360&4294967295;o=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=(n=(i=(s=(t=n+(o<<7&4294967295|o>>>25))+((o=s+(i^t&(n^i))+r[1]+3905402710&4294967295)<<12&4294967295|o>>>20))+((o=i+(n^s&(t^n))+r[2]+606105819&4294967295)<<17&4294967295|o>>>15))+((o=n+(t^i&(s^t))+r[3]+3250441966&4294967295)<<22&4294967295|o>>>10))+((o=t+(s^n&(i^s))+r[4]+4118548399&4294967295)<<7&4294967295|o>>>25))+((o=s+(i^t&(n^i))+r[5]+1200080426&4294967295)<<12&4294967295|o>>>20))+((o=i+(n^s&(t^n))+r[6]+2821735955&4294967295)<<17&4294967295|o>>>15))+((o=n+(t^i&(s^t))+r[7]+4249261313&4294967295)<<22&4294967295|o>>>10))+((o=t+(s^n&(i^s))+r[8]+1770035416&4294967295)<<7&4294967295|o>>>25))+((o=s+(i^t&(n^i))+r[9]+2336552879&4294967295)<<12&4294967295|o>>>20))+((o=i+(n^s&(t^n))+r[10]+4294925233&4294967295)<<17&4294967295|o>>>15))+((o=n+(t^i&(s^t))+r[11]+2304563134&4294967295)<<22&4294967295|o>>>10))+((o=t+(s^n&(i^s))+r[12]+1804603682&4294967295)<<7&4294967295|o>>>25))+((o=s+(i^t&(n^i))+r[13]+4254626195&4294967295)<<12&4294967295|o>>>20))+((o=i+(n^s&(t^n))+r[14]+2792965006&4294967295)<<17&4294967295|o>>>15))+((o=n+(t^i&(s^t))+r[15]+1236535329&4294967295)<<22&4294967295|o>>>10))+((o=t+(i^s&(n^i))+r[1]+4129170786&4294967295)<<5&4294967295|o>>>27))+((o=s+(n^i&(t^n))+r[6]+3225465664&4294967295)<<9&4294967295|o>>>23))+((o=i+(t^n&(s^t))+r[11]+643717713&4294967295)<<14&4294967295|o>>>18))+((o=n+(s^t&(i^s))+r[0]+3921069994&4294967295)<<20&4294967295|o>>>12))+((o=t+(i^s&(n^i))+r[5]+3593408605&4294967295)<<5&4294967295|o>>>27))+((o=s+(n^i&(t^n))+r[10]+38016083&4294967295)<<9&4294967295|o>>>23))+((o=i+(t^n&(s^t))+r[15]+3634488961&4294967295)<<14&4294967295|o>>>18))+((o=n+(s^t&(i^s))+r[4]+3889429448&4294967295)<<20&4294967295|o>>>12))+((o=t+(i^s&(n^i))+r[9]+568446438&4294967295)<<5&4294967295|o>>>27))+((o=s+(n^i&(t^n))+r[14]+3275163606&4294967295)<<9&4294967295|o>>>23))+((o=i+(t^n&(s^t))+r[3]+4107603335&4294967295)<<14&4294967295|o>>>18))+((o=n+(s^t&(i^s))+r[8]+1163531501&4294967295)<<20&4294967295|o>>>12))+((o=t+(i^s&(n^i))+r[13]+2850285829&4294967295)<<5&4294967295|o>>>27))+((o=s+(n^i&(t^n))+r[2]+4243563512&4294967295)<<9&4294967295|o>>>23))+((o=i+(t^n&(s^t))+r[7]+1735328473&4294967295)<<14&4294967295|o>>>18))+((o=n+(s^t&(i^s))+r[12]+2368359562&4294967295)<<20&4294967295|o>>>12))+((o=t+(n^i^s)+r[5]+4294588738&4294967295)<<4&4294967295|o>>>28))+((o=s+(t^n^i)+r[8]+2272392833&4294967295)<<11&4294967295|o>>>21))+((o=i+(s^t^n)+r[11]+1839030562&4294967295)<<16&4294967295|o>>>16))+((o=n+(i^s^t)+r[14]+4259657740&4294967295)<<23&4294967295|o>>>9))+((o=t+(n^i^s)+r[1]+2763975236&4294967295)<<4&4294967295|o>>>28))+((o=s+(t^n^i)+r[4]+1272893353&4294967295)<<11&4294967295|o>>>21))+((o=i+(s^t^n)+r[7]+4139469664&4294967295)<<16&4294967295|o>>>16))+((o=n+(i^s^t)+r[10]+3200236656&4294967295)<<23&4294967295|o>>>9))+((o=t+(n^i^s)+r[13]+681279174&4294967295)<<4&4294967295|o>>>28))+((o=s+(t^n^i)+r[0]+3936430074&4294967295)<<11&4294967295|o>>>21))+((o=i+(s^t^n)+r[3]+3572445317&4294967295)<<16&4294967295|o>>>16))+((o=n+(i^s^t)+r[6]+76029189&4294967295)<<23&4294967295|o>>>9))+((o=t+(n^i^s)+r[9]+3654602809&4294967295)<<4&4294967295|o>>>28))+((o=s+(t^n^i)+r[12]+3873151461&4294967295)<<11&4294967295|o>>>21))+((o=i+(s^t^n)+r[15]+530742520&4294967295)<<16&4294967295|o>>>16))+((o=n+(i^s^t)+r[2]+3299628645&4294967295)<<23&4294967295|o>>>9))+((o=t+(i^(n|~s))+r[0]+4096336452&4294967295)<<6&4294967295|o>>>26))+((o=s+(n^(t|~i))+r[7]+1126891415&4294967295)<<10&4294967295|o>>>22))+((o=i+(t^(s|~n))+r[14]+2878612391&4294967295)<<15&4294967295|o>>>17))+((o=n+(s^(i|~t))+r[5]+4237533241&4294967295)<<21&4294967295|o>>>11))+((o=t+(i^(n|~s))+r[12]+1700485571&4294967295)<<6&4294967295|o>>>26))+((o=s+(n^(t|~i))+r[3]+2399980690&4294967295)<<10&4294967295|o>>>22))+((o=i+(t^(s|~n))+r[10]+4293915773&4294967295)<<15&4294967295|o>>>17))+((o=n+(s^(i|~t))+r[1]+2240044497&4294967295)<<21&4294967295|o>>>11))+((o=t+(i^(n|~s))+r[8]+1873313359&4294967295)<<6&4294967295|o>>>26))+((o=s+(n^(t|~i))+r[15]+4264355552&4294967295)<<10&4294967295|o>>>22))+((o=i+(t^(s|~n))+r[6]+2734768916&4294967295)<<15&4294967295|o>>>17))+((o=n+(s^(i|~t))+r[13]+1309151649&4294967295)<<21&4294967295|o>>>11))+((s=(t=n+((o=t+(i^(n|~s))+r[4]+4149444226&4294967295)<<6&4294967295|o>>>26))+((o=s+(n^(t|~i))+r[11]+3174756917&4294967295)<<10&4294967295|o>>>22))^((i=s+((o=i+(t^(s|~n))+r[2]+718787259&4294967295)<<15&4294967295|o>>>17))|~t))+r[9]+3951481745&4294967295,e.g[0]=e.g[0]+t&4294967295,e.g[1]=e.g[1]+(i+(o<<21&4294967295|o>>>11))&4294967295,e.g[2]=e.g[2]+i&4294967295,e.g[3]=e.g[3]+s&4294967295}function i(e,t){this.h=t;for(var n=[],r=!0,i=e.length-1;0<=i;i--){var s=0|e[i];r&&s==t||(n[i]=s,r=!1)}this.g=n}!function(e,t){function n(){}n.prototype=t.prototype,e.D=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.C=function(e,n,r){for(var i=Array(arguments.length-2),s=2;s<arguments.length;s++)i[s-2]=arguments[s];return t.prototype[n].apply(e,i)}}(n,(function(){this.blockSize=-1})),n.prototype.s=function(){this.g[0]=1732584193,this.g[1]=4023233417,this.g[2]=2562383102,this.g[3]=271733878,this.o=this.h=0},n.prototype.u=function(e,t){void 0===t&&(t=e.length);for(var n=t-this.blockSize,i=this.B,s=this.h,o=0;o<t;){if(0==s)for(;o<=n;)r(this,e,o),o+=this.blockSize;if("string"==typeof e){for(;o<t;)if(i[s++]=e.charCodeAt(o++),s==this.blockSize){r(this,i),s=0;break}}else for(;o<t;)if(i[s++]=e[o++],s==this.blockSize){r(this,i),s=0;break}}this.h=s,this.o+=t},n.prototype.v=function(){var e=Array((56>this.h?this.blockSize:2*this.blockSize)-this.h);e[0]=128;for(var t=1;t<e.length-8;++t)e[t]=0;var n=8*this.o;for(t=e.length-8;t<e.length;++t)e[t]=255&n,n/=256;for(this.u(e),e=Array(16),t=n=0;4>t;++t)for(var r=0;32>r;r+=8)e[n++]=this.g[t]>>>r&255;return e};var s={};function o(e){return-128<=e&&128>e?function(e,t){var n=s;return Object.prototype.hasOwnProperty.call(n,e)?n[e]:n[e]=function(e){return new i([0|e],0>e?-1:0)}(e)}(e):new i([0|e],0>e?-1:0)}function a(e){if(isNaN(e)||!isFinite(e))return c;if(0>e)return f(a(-e));for(var t=[],n=1,r=0;e>=n;r++)t[r]=e/n|0,n*=4294967296;return new i(t,0)}var c=o(0),u=o(1),l=o(16777216);function h(e){if(0!=e.h)return!1;for(var t=0;t<e.g.length;t++)if(0!=e.g[t])return!1;return!0}function d(e){return-1==e.h}function f(e){for(var t=e.g.length,n=[],r=0;r<t;r++)n[r]=~e.g[r];return new i(n,~e.h).add(u)}function p(e,t){return e.add(f(t))}function g(e,t){for(;(65535&e[t])!=e[t];)e[t+1]+=e[t]>>>16,e[t]&=65535,t++}function m(e,t){this.g=e,this.h=t}function y(e,t){if(h(t))throw Error("division by zero");if(h(e))return new m(c,c);if(d(e))return t=y(f(e),t),new m(f(t.g),f(t.h));if(d(t))return t=y(e,f(t)),new m(f(t.g),t.h);if(30<e.g.length){if(d(e)||d(t))throw Error("slowDivide_ only works with positive integers.");for(var n=u,r=t;0>=r.l(e);)n=v(n),r=v(r);var i=w(n,1),s=w(r,1);for(r=w(r,2),n=w(n,2);!h(r);){var o=s.add(r);0>=o.l(e)&&(i=i.add(n),s=o),r=w(r,1),n=w(n,1)}return t=p(e,i.j(t)),new m(i,t)}for(i=c;0<=e.l(t);){for(n=Math.max(1,Math.floor(e.m()/t.m())),r=48>=(r=Math.ceil(Math.log(n)/Math.LN2))?1:Math.pow(2,r-48),o=(s=a(n)).j(t);d(o)||0<o.l(e);)o=(s=a(n-=r)).j(t);h(s)&&(s=u),i=i.add(s),e=p(e,o)}return new m(i,e)}function v(e){for(var t=e.g.length+1,n=[],r=0;r<t;r++)n[r]=e.i(r)<<1|e.i(r-1)>>>31;return new i(n,e.h)}function w(e,t){var n=t>>5;t%=32;for(var r=e.g.length-n,s=[],o=0;o<r;o++)s[o]=0<t?e.i(o+n)>>>t|e.i(o+n+1)<<32-t:e.i(o+n);return new i(s,e.h)}(t=i.prototype).m=function(){if(d(this))return-f(this).m();for(var e=0,t=1,n=0;n<this.g.length;n++){var r=this.i(n);e+=(0<=r?r:4294967296+r)*t,t*=4294967296}return e},t.toString=function(e){if(2>(e=e||10)||36<e)throw Error("radix out of range: "+e);if(h(this))return"0";if(d(this))return"-"+f(this).toString(e);for(var t=a(Math.pow(e,6)),n=this,r="";;){var i=y(n,t).g,s=((0<(n=p(n,i.j(t))).g.length?n.g[0]:n.h)>>>0).toString(e);if(h(n=i))return s+r;for(;6>s.length;)s="0"+s;r=s+r}},t.i=function(e){return 0>e?0:e<this.g.length?this.g[e]:this.h},t.l=function(e){return d(e=p(this,e))?-1:h(e)?0:1},t.abs=function(){return d(this)?f(this):this},t.add=function(e){for(var t=Math.max(this.g.length,e.g.length),n=[],r=0,s=0;s<=t;s++){var o=r+(65535&this.i(s))+(65535&e.i(s)),a=(o>>>16)+(this.i(s)>>>16)+(e.i(s)>>>16);r=a>>>16,o&=65535,a&=65535,n[s]=a<<16|o}return new i(n,-2147483648&n[n.length-1]?-1:0)},t.j=function(e){if(h(this)||h(e))return c;if(d(this))return d(e)?f(this).j(f(e)):f(f(this).j(e));if(d(e))return f(this.j(f(e)));if(0>this.l(l)&&0>e.l(l))return a(this.m()*e.m());for(var t=this.g.length+e.g.length,n=[],r=0;r<2*t;r++)n[r]=0;for(r=0;r<this.g.length;r++)for(var s=0;s<e.g.length;s++){var o=this.i(r)>>>16,u=65535&this.i(r),p=e.i(s)>>>16,m=65535&e.i(s);n[2*r+2*s]+=u*m,g(n,2*r+2*s),n[2*r+2*s+1]+=o*m,g(n,2*r+2*s+1),n[2*r+2*s+1]+=u*p,g(n,2*r+2*s+1),n[2*r+2*s+2]+=o*p,g(n,2*r+2*s+2)}for(r=0;r<t;r++)n[r]=n[2*r+1]<<16|n[2*r];for(r=t;r<2*t;r++)n[r]=0;return new i(n,0)},t.A=function(e){return y(this,e).h},t.and=function(e){for(var t=Math.max(this.g.length,e.g.length),n=[],r=0;r<t;r++)n[r]=this.i(r)&e.i(r);return new i(n,this.h&e.h)},t.or=function(e){for(var t=Math.max(this.g.length,e.g.length),n=[],r=0;r<t;r++)n[r]=this.i(r)|e.i(r);return new i(n,this.h|e.h)},t.xor=function(e){for(var t=Math.max(this.g.length,e.g.length),n=[],r=0;r<t;r++)n[r]=this.i(r)^e.i(r);return new i(n,this.h^e.h)},n.prototype.digest=n.prototype.v,n.prototype.reset=n.prototype.s,n.prototype.update=n.prototype.u,e.exports.Md5=n,i.prototype.add=i.prototype.add,i.prototype.multiply=i.prototype.j,i.prototype.modulo=i.prototype.A,i.prototype.compare=i.prototype.l,i.prototype.toNumber=i.prototype.m,i.prototype.toString=i.prototype.toString,i.prototype.getBits=i.prototype.i,i.fromNumber=a,i.fromString=function e(t,n){if(0==t.length)throw Error("number format error: empty string");if(2>(n=n||10)||36<n)throw Error("radix out of range: "+n);if("-"==t.charAt(0))return f(e(t.substring(1),n));if(0<=t.indexOf("-"))throw Error('number format error: interior "-" character');for(var r=a(Math.pow(n,8)),i=c,s=0;s<t.length;s+=8){var o=Math.min(8,t.length-s),u=parseInt(t.substring(s,s+o),n);8>o?(o=a(Math.pow(n,o)),i=i.j(o).add(a(u))):i=(i=i.j(r)).add(a(u))}return i},e.exports.Integer=i}).apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},493:(e,t,n)=>{(function(){"use strict";var t,r="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){return e==Array.prototype||e==Object.prototype||(e[t]=n.value),e},i=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g];for(var t=0;t<e.length;++t){var r=e[t];if(r&&r.Math==Math)return r}throw Error("Cannot find global object")}(this);!function(e,t){if(t)e:{var n=i;e=e.split(".");for(var s=0;s<e.length-1;s++){var o=e[s];if(!(o in n))break e;n=n[o]}(t=t(s=n[e=e[e.length-1]]))!=s&&null!=t&&r(n,e,{configurable:!0,writable:!0,value:t})}}("Array.prototype.values",(function(e){return e||function(){return function(e,t){e instanceof String&&(e+="");var n=0,r=!1,i={next:function(){if(!r&&n<e.length){var i=n++;return{value:t(0,e[i]),done:!1}}return r=!0,{done:!0,value:void 0}}};return i[Symbol.iterator]=function(){return i},i}(this,(function(e,t){return t}))}}));var s=s||{},o=this||self;function a(e){var t=typeof e;return"array"==(t="object"!=t?t:e?Array.isArray(e)?"array":t:"null")||"object"==t&&"number"==typeof e.length}function c(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}function u(e,t,n){return e.call.apply(e.bind,arguments)}function l(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function h(e,t,n){return(h=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?u:l).apply(null,arguments)}function d(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}function f(e,t){function n(){}n.prototype=t.prototype,e.aa=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.Qb=function(e,n,r){for(var i=Array(arguments.length-2),s=2;s<arguments.length;s++)i[s-2]=arguments[s];return t.prototype[n].apply(e,i)}}function p(e){const t=e.length;if(0<t){const n=Array(t);for(let r=0;r<t;r++)n[r]=e[r];return n}return[]}function g(e,t){for(let t=1;t<arguments.length;t++){const n=arguments[t];if(a(n)){const t=e.length||0,r=n.length||0;e.length=t+r;for(let i=0;i<r;i++)e[t+i]=n[i]}else e.push(n)}}function m(e){return/^[\s\xa0]*$/.test(e)}function y(){var e=o.navigator;return e&&(e=e.userAgent)?e:""}function v(e){return v[" "](e),e}v[" "]=function(){};var w=!(-1==y().indexOf("Gecko")||-1!=y().toLowerCase().indexOf("webkit")&&-1==y().indexOf("Edge")||-1!=y().indexOf("Trident")||-1!=y().indexOf("MSIE")||-1!=y().indexOf("Edge"));function b(e,t,n){for(const r in e)t.call(n,e[r],r,e)}function _(e){const t={};for(const n in e)t[n]=e[n];return t}const I="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function E(e,t){let n,r;for(let t=1;t<arguments.length;t++){for(n in r=arguments[t],r)e[n]=r[n];for(let t=0;t<I.length;t++)n=I[t],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function S(e){var t=1;e=e.split(":");const n=[];for(;0<t&&e.length;)n.push(e.shift()),t--;return e.length&&n.push(e.join(":")),n}function T(e){o.setTimeout((()=>{throw e}),0)}function x(){var e=k;let t=null;return e.g&&(t=e.g,e.g=e.g.next,e.g||(e.h=null),t.next=null),t}var C=new class{constructor(e,t){this.i=e,this.j=t,this.h=0,this.g=null}get(){let e;return 0<this.h?(this.h--,e=this.g,this.g=e.next,e.next=null):e=this.i(),e}}((()=>new D),(e=>e.reset()));class D{constructor(){this.next=this.g=this.h=null}set(e,t){this.h=e,this.g=t,this.next=null}reset(){this.next=this.g=this.h=null}}let A,N=!1,k=new class{constructor(){this.h=this.g=null}add(e,t){const n=C.get();n.set(e,t),this.h?this.h.next=n:this.g=n,this.h=n}},O=()=>{const e=o.Promise.resolve(void 0);A=()=>{e.then(L)}};var L=()=>{for(var e;e=x();){try{e.h.call(e.g)}catch(e){T(e)}var t=C;t.j(e),100>t.h&&(t.h++,e.next=t.g,t.g=e)}N=!1};function P(){this.s=this.s,this.C=this.C}function M(e,t){this.type=e,this.g=this.target=t,this.defaultPrevented=!1}P.prototype.s=!1,P.prototype.ma=function(){this.s||(this.s=!0,this.N())},P.prototype.N=function(){if(this.C)for(;this.C.length;)this.C.shift()()},M.prototype.h=function(){this.defaultPrevented=!0};var R=function(){if(!o.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{const e=()=>{};o.addEventListener("test",e,t),o.removeEventListener("test",e,t)}catch(e){}return e}();function F(e,t){if(M.call(this,e?e.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,e){var n=this.type=e.type,r=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.g=t,t=e.relatedTarget){if(w){e:{try{v(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType="string"==typeof e.pointerType?e.pointerType:V[e.pointerType]||"",this.state=e.state,this.i=e,e.defaultPrevented&&F.aa.h.call(this)}}f(F,M);var V={2:"touch",3:"pen",4:"mouse"};F.prototype.h=function(){F.aa.h.call(this);var e=this.i;e.preventDefault?e.preventDefault():e.returnValue=!1};var B="closure_listenable_"+(1e6*Math.random()|0),U=0;function q(e,t,n,r,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.ha=i,this.key=++U,this.da=this.fa=!1}function j(e){e.da=!0,e.listener=null,e.proxy=null,e.src=null,e.ha=null}function z(e){this.src=e,this.g={},this.h=0}function G(e,t){var n=t.type;if(n in e.g){var r,i=e.g[n],s=Array.prototype.indexOf.call(i,t,void 0);(r=0<=s)&&Array.prototype.splice.call(i,s,1),r&&(j(t),0==e.g[n].length&&(delete e.g[n],e.h--))}}function K(e,t,n,r){for(var i=0;i<e.length;++i){var s=e[i];if(!s.da&&s.listener==t&&s.capture==!!n&&s.ha==r)return i}return-1}z.prototype.add=function(e,t,n,r,i){var s=e.toString();(e=this.g[s])||(e=this.g[s]=[],this.h++);var o=K(e,t,r,i);return-1<o?(t=e[o],n||(t.fa=!1)):((t=new q(t,this.src,s,!!r,i)).fa=n,e.push(t)),t};var $="closure_lm_"+(1e6*Math.random()|0),Q={};function H(e,t,n,r,i){if(r&&r.once)return J(e,t,n,r,i);if(Array.isArray(t)){for(var s=0;s<t.length;s++)H(e,t[s],n,r,i);return null}return n=re(n),e&&e[B]?e.K(t,n,c(r)?!!r.capture:!!r,i):W(e,t,n,!1,r,i)}function W(e,t,n,r,i,s){if(!t)throw Error("Invalid event type");var o=c(i)?!!i.capture:!!i,a=te(e);if(a||(e[$]=a=new z(e)),(n=a.add(t,n,r,o,s)).proxy)return n;if(r=function(){const e=ee;return function t(n){return e.call(t.src,t.listener,n)}}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)R||(i=o),void 0===i&&(i=!1),e.addEventListener(t.toString(),r,i);else if(e.attachEvent)e.attachEvent(Z(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}return n}function J(e,t,n,r,i){if(Array.isArray(t)){for(var s=0;s<t.length;s++)J(e,t[s],n,r,i);return null}return n=re(n),e&&e[B]?e.L(t,n,c(r)?!!r.capture:!!r,i):W(e,t,n,!0,r,i)}function Y(e,t,n,r,i){if(Array.isArray(t))for(var s=0;s<t.length;s++)Y(e,t[s],n,r,i);else r=c(r)?!!r.capture:!!r,n=re(n),e&&e[B]?(e=e.i,(t=String(t).toString())in e.g&&-1<(n=K(s=e.g[t],n,r,i))&&(j(s[n]),Array.prototype.splice.call(s,n,1),0==s.length&&(delete e.g[t],e.h--))):e&&(e=te(e))&&(t=e.g[t.toString()],e=-1,t&&(e=K(t,n,r,i)),(n=-1<e?t[e]:null)&&X(n))}function X(e){if("number"!=typeof e&&e&&!e.da){var t=e.src;if(t&&t[B])G(t.i,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(Z(n),r):t.addListener&&t.removeListener&&t.removeListener(r),(n=te(t))?(G(n,e),0==n.h&&(n.src=null,t[$]=null)):j(e)}}}function Z(e){return e in Q?Q[e]:Q[e]="on"+e}function ee(e,t){if(e.da)e=!0;else{t=new F(t,this);var n=e.listener,r=e.ha||e.src;e.fa&&X(e),e=n.call(r,t)}return e}function te(e){return(e=e[$])instanceof z?e:null}var ne="__closure_events_fn_"+(1e9*Math.random()>>>0);function re(e){return"function"==typeof e?e:(e[ne]||(e[ne]=function(t){return e.handleEvent(t)}),e[ne])}function ie(){P.call(this),this.i=new z(this),this.M=this,this.F=null}function se(e,t){var n,r=e.F;if(r)for(n=[];r;r=r.F)n.push(r);if(e=e.M,r=t.type||t,"string"==typeof t)t=new M(t,e);else if(t instanceof M)t.target=t.target||e;else{var i=t;E(t=new M(r,e),i)}if(i=!0,n)for(var s=n.length-1;0<=s;s--){var o=t.g=n[s];i=oe(o,r,!0,t)&&i}if(i=oe(o=t.g=e,r,!0,t)&&i,i=oe(o,r,!1,t)&&i,n)for(s=0;s<n.length;s++)i=oe(o=t.g=n[s],r,!1,t)&&i}function oe(e,t,n,r){if(!(t=e.i.g[String(t)]))return!0;t=t.concat();for(var i=!0,s=0;s<t.length;++s){var o=t[s];if(o&&!o.da&&o.capture==n){var a=o.listener,c=o.ha||o.src;o.fa&&G(e.i,o),i=!1!==a.call(c,r)&&i}}return i&&!r.defaultPrevented}function ae(e,t,n){if("function"==typeof e)n&&(e=h(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=h(e.handleEvent,e)}return 2147483647<Number(t)?-1:o.setTimeout(e,t||0)}function ce(e){e.g=ae((()=>{e.g=null,e.i&&(e.i=!1,ce(e))}),e.l);const t=e.h;e.h=null,e.m.apply(null,t)}f(ie,P),ie.prototype[B]=!0,ie.prototype.removeEventListener=function(e,t,n,r){Y(this,e,t,n,r)},ie.prototype.N=function(){if(ie.aa.N.call(this),this.i){var e,t=this.i;for(e in t.g){for(var n=t.g[e],r=0;r<n.length;r++)j(n[r]);delete t.g[e],t.h--}}this.F=null},ie.prototype.K=function(e,t,n,r){return this.i.add(String(e),t,!1,n,r)},ie.prototype.L=function(e,t,n,r){return this.i.add(String(e),t,!0,n,r)};class ue extends P{constructor(e,t){super(),this.m=e,this.l=t,this.h=null,this.i=!1,this.g=null}j(e){this.h=arguments,this.g?this.i=!0:ce(this)}N(){super.N(),this.g&&(o.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function le(e){P.call(this),this.h=e,this.g={}}f(le,P);var he=[];function de(e){b(e.g,(function(e,t){this.g.hasOwnProperty(t)&&X(e)}),e),e.g={}}le.prototype.N=function(){le.aa.N.call(this),de(this)},le.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")};var fe=o.JSON.stringify,pe=o.JSON.parse,ge=class{stringify(e){return o.JSON.stringify(e,void 0)}parse(e){return o.JSON.parse(e,void 0)}};function me(){}function ye(e){return e.h||(e.h=e.i())}function ve(){}me.prototype.h=null;var we={OPEN:"a",kb:"b",Ja:"c",wb:"d"};function be(){M.call(this,"d")}function _e(){M.call(this,"c")}f(be,M),f(_e,M);var Ie={},Ee=null;function Se(){return Ee=Ee||new ie}function Te(e){M.call(this,Ie.La,e)}function xe(e){const t=Se();se(t,new Te(t,e))}function Ce(e,t){M.call(this,Ie.STAT_EVENT,e),this.stat=t}function De(e){const t=Se();se(t,new Ce(t,e))}function Ae(e,t){M.call(this,Ie.Ma,e),this.size=t}function Ne(e,t){if("function"!=typeof e)throw Error("Fn must not be null and must be a function");return o.setTimeout((function(){e()}),t)}function ke(){this.g=!0}function Oe(e,t,n,r){e.info((function(){return"XMLHTTP TEXT ("+t+"): "+function(e,t){if(!e.g)return t;if(!t)return null;try{var n=JSON.parse(t);if(n)for(e=0;e<n.length;e++)if(Array.isArray(n[e])){var r=n[e];if(!(2>r.length)){var i=r[1];if(Array.isArray(i)&&!(1>i.length)){var s=i[0];if("noop"!=s&&"stop"!=s&&"close"!=s)for(var o=1;o<i.length;o++)i[o]=""}}}return fe(n)}catch(e){return t}}(e,n)+(r?" "+r:"")}))}Ie.La="serverreachability",f(Te,M),Ie.STAT_EVENT="statevent",f(Ce,M),Ie.Ma="timingevent",f(Ae,M),ke.prototype.xa=function(){this.g=!1},ke.prototype.info=function(){};var Le,Pe={NO_ERROR:0,gb:1,tb:2,sb:3,nb:4,rb:5,ub:6,Ia:7,TIMEOUT:8,xb:9},Me={lb:"complete",Hb:"success",Ja:"error",Ia:"abort",zb:"ready",Ab:"readystatechange",TIMEOUT:"timeout",vb:"incrementaldata",yb:"progress",ob:"downloadprogress",Pb:"uploadprogress"};function Re(){}function Fe(e,t,n,r){this.j=e,this.i=t,this.l=n,this.R=r||1,this.U=new le(this),this.I=45e3,this.H=null,this.o=!1,this.m=this.A=this.v=this.L=this.F=this.S=this.B=null,this.D=[],this.g=null,this.C=0,this.s=this.u=null,this.X=-1,this.J=!1,this.O=0,this.M=null,this.W=this.K=this.T=this.P=!1,this.h=new Ve}function Ve(){this.i=null,this.g="",this.h=!1}f(Re,me),Re.prototype.g=function(){return new XMLHttpRequest},Re.prototype.i=function(){return{}},Le=new Re;var Be={},Ue={};function qe(e,t,n){e.L=1,e.v=ft(ct(t)),e.m=n,e.P=!0,je(e,null)}function je(e,t){e.F=Date.now(),Ke(e),e.A=ct(e.v);var n=e.A,r=e.R;Array.isArray(r)||(r=[String(r)]),Ct(n.i,"t",r),e.C=0,n=e.j.J,e.h=new Ve,e.g=gn(e.j,n?t:null,!e.m),0<e.O&&(e.M=new ue(h(e.Y,e,e.g),e.O)),t=e.U,n=e.g,r=e.ca;var i="readystatechange";Array.isArray(i)||(i&&(he[0]=i.toString()),i=he);for(var s=0;s<i.length;s++){var o=H(n,i[s],r||t.handleEvent,!1,t.h||t);if(!o)break;t.g[o.key]=o}t=e.H?_(e.H):{},e.m?(e.u||(e.u="POST"),t["Content-Type"]="application/x-www-form-urlencoded",e.g.ea(e.A,e.u,e.m,t)):(e.u="GET",e.g.ea(e.A,e.u,null,t)),xe(1),function(e,t,n,r,i,s){e.info((function(){if(e.g)if(s)for(var o="",a=s.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var l=u[0];u=u[1];var h=l.split("_");o=2<=h.length&&"type"==h[1]?o+(l+"=")+u+"&":o+(l+"=redacted&")}}else o=null;else o=s;return"XMLHTTP REQ ("+r+") [attempt "+i+"]: "+t+"\n"+n+"\n"+o}))}(e.i,e.u,e.A,e.l,e.R,e.m)}function ze(e){return!!e.g&&"GET"==e.u&&2!=e.L&&e.j.Ca}function Ge(e,t){var n=e.C,r=t.indexOf("\n",n);return-1==r?Ue:(n=Number(t.substring(n,r)),isNaN(n)?Be:(r+=1)+n>t.length?Ue:(t=t.slice(r,r+n),e.C=r+n,t))}function Ke(e){e.S=Date.now()+e.I,$e(e,e.I)}function $e(e,t){if(null!=e.B)throw Error("WatchDog timer not null");e.B=Ne(h(e.ba,e),t)}function Qe(e){e.B&&(o.clearTimeout(e.B),e.B=null)}function He(e){0==e.j.G||e.J||ln(e.j,e)}function We(e){Qe(e);var t=e.M;t&&"function"==typeof t.ma&&t.ma(),e.M=null,de(e.U),e.g&&(t=e.g,e.g=null,t.abort(),t.ma())}function Je(e,t){try{var n=e.j;if(0!=n.G&&(n.g==e||tt(n.h,e)))if(!e.K&&tt(n.h,e)&&3==n.G){try{var r=n.Da.g.parse(t)}catch(e){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){e:if(!n.u){if(n.g){if(!(n.g.F+3e3<e.F))break e;un(n),Xt(n)}on(n),De(18)}}else n.za=i[1],0<n.za-n.T&&37500>i[2]&&n.F&&0==n.v&&!n.C&&(n.C=Ne(h(n.Za,n),6e3));if(1>=et(n.h)&&n.ca){try{n.ca()}catch(e){}n.ca=void 0}}else dn(n,11)}else if((e.K||n.g==e)&&un(n),!m(t))for(i=n.Da.g.parse(t),t=0;t<i.length;t++){let u=i[t];if(n.T=u[0],u=u[1],2==n.G)if("c"==u[0]){n.K=u[1],n.ia=u[2];const t=u[3];null!=t&&(n.la=t,n.j.info("VER="+n.la));const i=u[4];null!=i&&(n.Aa=i,n.j.info("SVER="+n.Aa));const l=u[5];null!=l&&"number"==typeof l&&0<l&&(r=1.5*l,n.L=r,n.j.info("backChannelRequestTimeoutMs_="+r)),r=n;const h=e.g;if(h){const e=h.g?h.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(e){var s=r.h;s.g||-1==e.indexOf("spdy")&&-1==e.indexOf("quic")&&-1==e.indexOf("h2")||(s.j=s.l,s.g=new Set,s.h&&(nt(s,s.h),s.h=null))}if(r.D){const e=h.g?h.g.getResponseHeader("X-HTTP-Session-Id"):null;e&&(r.ya=e,dt(r.I,r.D,e))}}n.G=3,n.l&&n.l.ua(),n.ba&&(n.R=Date.now()-e.F,n.j.info("Handshake RTT: "+n.R+"ms"));var o=e;if((r=n).qa=pn(r,r.J?r.ia:null,r.W),o.K){rt(r.h,o);var a=o,c=r.L;c&&(a.I=c),a.B&&(Qe(a),Ke(a)),r.g=o}else sn(r);0<n.i.length&&en(n)}else"stop"!=u[0]&&"close"!=u[0]||dn(n,7);else 3==n.G&&("stop"==u[0]||"close"==u[0]?"stop"==u[0]?dn(n,7):Yt(n):"noop"!=u[0]&&n.l&&n.l.ta(u),n.v=0)}xe(4)}catch(e){}}Fe.prototype.ca=function(e){e=e.target;const t=this.M;t&&3==Qt(e)?t.j():this.Y(e)},Fe.prototype.Y=function(e){try{if(e==this.g)e:{const d=Qt(this.g);var t=this.g.Ba();const f=this.g.Z();if(!(3>d)&&(3!=d||this.g&&(this.h.h||this.g.oa()||Ht(this.g)))){this.J||4!=d||7==t||xe(8==t||0>=f?3:2),Qe(this);var n=this.g.Z();this.X=n;t:if(ze(this)){var r=Ht(this.g);e="";var i=r.length,s=4==Qt(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){We(this),He(this);var a="";break t}this.h.i=new o.TextDecoder}for(t=0;t<i;t++)this.h.h=!0,e+=this.h.i.decode(r[t],{stream:!(s&&t==i-1)});r.length=0,this.h.g+=e,this.C=0,a=this.h.g}else a=this.g.oa();if(this.o=200==n,function(e,t,n,r,i,s,o){e.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+i+"]: "+t+"\n"+n+"\n"+s+" "+o}))}(this.i,this.u,this.A,this.l,this.R,d,n),this.o){if(this.T&&!this.K){t:{if(this.g){var c,u=this.g;if((c=u.g?u.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!m(c)){var l=c;break t}}l=null}if(!(n=l)){this.o=!1,this.s=3,De(12),We(this),He(this);break e}Oe(this.i,this.l,n,"Initial handshake response via X-HTTP-Initial-Response"),this.K=!0,Je(this,n)}if(this.P){let e;for(n=!0;!this.J&&this.C<a.length;){if(e=Ge(this,a),e==Ue){4==d&&(this.s=4,De(14),n=!1),Oe(this.i,this.l,null,"[Incomplete Response]");break}if(e==Be){this.s=4,De(15),Oe(this.i,this.l,a,"[Invalid Chunk]"),n=!1;break}Oe(this.i,this.l,e,null),Je(this,e)}if(ze(this)&&0!=this.C&&(this.h.g=this.h.g.slice(this.C),this.C=0),4!=d||0!=a.length||this.h.h||(this.s=1,De(16),n=!1),this.o=this.o&&n,n){if(0<a.length&&!this.W){this.W=!0;var h=this.j;h.g==this&&h.ba&&!h.M&&(h.j.info("Great, no buffering proxy detected. Bytes received: "+a.length),an(h),h.M=!0,De(11))}}else Oe(this.i,this.l,a,"[Invalid Chunked Response]"),We(this),He(this)}else Oe(this.i,this.l,a,null),Je(this,a);4==d&&We(this),this.o&&!this.J&&(4==d?ln(this.j,this):(this.o=!1,Ke(this)))}else(function(e){const t={};e=(e.g&&2<=Qt(e)&&e.g.getAllResponseHeaders()||"").split("\r\n");for(let r=0;r<e.length;r++){if(m(e[r]))continue;var n=S(e[r]);const i=n[0];if("string"!=typeof(n=n[1]))continue;n=n.trim();const s=t[i]||[];t[i]=s,s.push(n)}!function(e,t){for(const n in e)t.call(void 0,e[n],n,e)}(t,(function(e){return e.join(", ")}))})(this.g),400==n&&0<a.indexOf("Unknown SID")?(this.s=3,De(12)):(this.s=0,De(13)),We(this),He(this)}}}catch(e){}},Fe.prototype.cancel=function(){this.J=!0,We(this)},Fe.prototype.ba=function(){this.B=null;const e=Date.now();0<=e-this.S?(function(e,t){e.info((function(){return"TIMEOUT: "+t}))}(this.i,this.A),2!=this.L&&(xe(3),De(17)),We(this),this.s=2,He(this)):$e(this,this.S-e)};var Ye=class{constructor(e,t){this.g=e,this.map=t}};function Xe(e){this.l=e||10,e=o.PerformanceNavigationTiming?0<(e=o.performance.getEntriesByType("navigation")).length&&("hq"==e[0].nextHopProtocol||"h2"==e[0].nextHopProtocol):!!(o.chrome&&o.chrome.loadTimes&&o.chrome.loadTimes()&&o.chrome.loadTimes().wasFetchedViaSpdy),this.j=e?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}function Ze(e){return!!e.h||!!e.g&&e.g.size>=e.j}function et(e){return e.h?1:e.g?e.g.size:0}function tt(e,t){return e.h?e.h==t:!!e.g&&e.g.has(t)}function nt(e,t){e.g?e.g.add(t):e.h=t}function rt(e,t){e.h&&e.h==t?e.h=null:e.g&&e.g.has(t)&&e.g.delete(t)}function it(e){if(null!=e.h)return e.i.concat(e.h.D);if(null!=e.g&&0!==e.g.size){let t=e.i;for(const n of e.g.values())t=t.concat(n.D);return t}return p(e.i)}function st(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(a(e)||"string"==typeof e)Array.prototype.forEach.call(e,t,void 0);else for(var n=function(e){if(e.na&&"function"==typeof e.na)return e.na();if(!e.V||"function"!=typeof e.V){if("undefined"!=typeof Map&&e instanceof Map)return Array.from(e.keys());if(!("undefined"!=typeof Set&&e instanceof Set)){if(a(e)||"string"==typeof e){var t=[];e=e.length;for(var n=0;n<e;n++)t.push(n);return t}t=[],n=0;for(const r in e)t[n++]=r;return t}}}(e),r=function(e){if(e.V&&"function"==typeof e.V)return e.V();if("undefined"!=typeof Map&&e instanceof Map||"undefined"!=typeof Set&&e instanceof Set)return Array.from(e.values());if("string"==typeof e)return e.split("");if(a(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}(e),i=r.length,s=0;s<i;s++)t.call(void 0,r[s],n&&n[s],e)}Xe.prototype.cancel=function(){if(this.i=it(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const e of this.g.values())e.cancel();this.g.clear()}};var ot=RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");function at(e){if(this.g=this.o=this.j="",this.s=null,this.m=this.l="",this.h=!1,e instanceof at){this.h=e.h,ut(this,e.j),this.o=e.o,this.g=e.g,lt(this,e.s),this.l=e.l;var t=e.i,n=new Et;n.i=t.i,t.g&&(n.g=new Map(t.g),n.h=t.h),ht(this,n),this.m=e.m}else e&&(t=String(e).match(ot))?(this.h=!1,ut(this,t[1]||"",!0),this.o=pt(t[2]||""),this.g=pt(t[3]||"",!0),lt(this,t[4]),this.l=pt(t[5]||"",!0),ht(this,t[6]||"",!0),this.m=pt(t[7]||"")):(this.h=!1,this.i=new Et(null,this.h))}function ct(e){return new at(e)}function ut(e,t,n){e.j=n?pt(t,!0):t,e.j&&(e.j=e.j.replace(/:$/,""))}function lt(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.s=t}else e.s=null}function ht(e,t,n){t instanceof Et?(e.i=t,function(e,t){t&&!e.j&&(St(e),e.i=null,e.g.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(Tt(this,t),Ct(this,n,e))}),e)),e.j=t}(e.i,e.h)):(n||(t=gt(t,_t)),e.i=new Et(t,e.h))}function dt(e,t,n){e.i.set(t,n)}function ft(e){return dt(e,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),e}function pt(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function gt(e,t,n){return"string"==typeof e?(e=encodeURI(e).replace(t,mt),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function mt(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}at.prototype.toString=function(){var e=[],t=this.j;t&&e.push(gt(t,vt,!0),":");var n=this.g;return(n||"file"==t)&&(e.push("//"),(t=this.o)&&e.push(gt(t,vt,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.s)&&e.push(":",String(n))),(n=this.l)&&(this.g&&"/"!=n.charAt(0)&&e.push("/"),e.push(gt(n,"/"==n.charAt(0)?bt:wt,!0))),(n=this.i.toString())&&e.push("?",n),(n=this.m)&&e.push("#",gt(n,It)),e.join("")};var yt,vt=/[#\/\?@]/g,wt=/[#\?:]/g,bt=/[#\?]/g,_t=/[#\?@]/g,It=/#/g;function Et(e,t){this.h=this.g=null,this.i=e||null,this.j=!!t}function St(e){e.g||(e.g=new Map,e.h=0,e.i&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),i=null;if(0<=r){var s=e[n].substring(0,r);i=e[n].substring(r+1)}else s=e[n];t(s,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.i,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function Tt(e,t){St(e),t=Dt(e,t),e.g.has(t)&&(e.i=null,e.h-=e.g.get(t).length,e.g.delete(t))}function xt(e,t){return St(e),t=Dt(e,t),e.g.has(t)}function Ct(e,t,n){Tt(e,t),0<n.length&&(e.i=null,e.g.set(Dt(e,t),p(n)),e.h+=n.length)}function Dt(e,t){return t=String(t),e.j&&(t=t.toLowerCase()),t}function At(e,t,n,r,i){try{i&&(i.onload=null,i.onerror=null,i.onabort=null,i.ontimeout=null),r(n)}catch(e){}}function Nt(){this.g=new ge}function kt(e,t,n){const r=n||"";try{st(e,(function(e,n){let i=e;c(e)&&(i=fe(e)),t.push(r+n+"="+encodeURIComponent(i))}))}catch(e){throw t.push(r+"type="+encodeURIComponent("_badmap")),e}}function Ot(e){this.l=e.Ub||null,this.j=e.eb||!1}function Lt(e,t){ie.call(this),this.D=e,this.o=t,this.m=void 0,this.status=this.readyState=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.u=new Headers,this.h=null,this.B="GET",this.A="",this.g=!1,this.v=this.j=this.l=null}function Pt(e){e.j.read().then(e.Pa.bind(e)).catch(e.ga.bind(e))}function Mt(e){e.readyState=4,e.l=null,e.j=null,e.v=null,Rt(e)}function Rt(e){e.onreadystatechange&&e.onreadystatechange.call(e)}function Ft(e){let t="";return b(e,(function(e,n){t+=n,t+=":",t+=e,t+="\r\n"})),t}function Vt(e,t,n){e:{for(r in n){var r=!1;break e}r=!0}r||(n=Ft(n),"string"==typeof e?(encodeURIComponent(String(t)),null!=n&&encodeURIComponent(String(n))):dt(e,t,n))}function Bt(e){ie.call(this),this.headers=new Map,this.o=e||null,this.h=!1,this.v=this.g=null,this.D="",this.m=0,this.l="",this.j=this.B=this.u=this.A=!1,this.I=null,this.H="",this.J=!1}(t=Et.prototype).add=function(e,t){St(this),this.i=null,e=Dt(this,e);var n=this.g.get(e);return n||this.g.set(e,n=[]),n.push(t),this.h+=1,this},t.forEach=function(e,t){St(this),this.g.forEach((function(n,r){n.forEach((function(n){e.call(t,n,r,this)}),this)}),this)},t.na=function(){St(this);const e=Array.from(this.g.values()),t=Array.from(this.g.keys()),n=[];for(let r=0;r<t.length;r++){const i=e[r];for(let e=0;e<i.length;e++)n.push(t[r])}return n},t.V=function(e){St(this);let t=[];if("string"==typeof e)xt(this,e)&&(t=t.concat(this.g.get(Dt(this,e))));else{e=Array.from(this.g.values());for(let n=0;n<e.length;n++)t=t.concat(e[n])}return t},t.set=function(e,t){return St(this),this.i=null,xt(this,e=Dt(this,e))&&(this.h-=this.g.get(e).length),this.g.set(e,[t]),this.h+=1,this},t.get=function(e,t){return e&&0<(e=this.V(e)).length?String(e[0]):t},t.toString=function(){if(this.i)return this.i;if(!this.g)return"";const e=[],t=Array.from(this.g.keys());for(var n=0;n<t.length;n++){var r=t[n];const s=encodeURIComponent(String(r)),o=this.V(r);for(r=0;r<o.length;r++){var i=s;""!==o[r]&&(i+="="+encodeURIComponent(String(o[r]))),e.push(i)}}return this.i=e.join("&")},f(Ot,me),Ot.prototype.g=function(){return new Lt(this.l,this.j)},Ot.prototype.i=(yt={},function(){return yt}),f(Lt,ie),(t=Lt.prototype).open=function(e,t){if(0!=this.readyState)throw this.abort(),Error("Error reopening a connection");this.B=e,this.A=t,this.readyState=1,Rt(this)},t.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const t={headers:this.u,method:this.B,credentials:this.m,cache:void 0};e&&(t.body=e),(this.D||o).fetch(new Request(this.A,t)).then(this.Sa.bind(this),this.ga.bind(this))},t.abort=function(){this.response=this.responseText="",this.u=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted.").catch((()=>{})),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,Mt(this)),this.readyState=0},t.Sa=function(e){if(this.g&&(this.l=e,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=e.headers,this.readyState=2,Rt(this)),this.g&&(this.readyState=3,Rt(this),this.g)))if("arraybuffer"===this.responseType)e.arrayBuffer().then(this.Qa.bind(this),this.ga.bind(this));else if(void 0!==o.ReadableStream&&"body"in e){if(this.j=e.body.getReader(),this.o){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.v=new TextDecoder;Pt(this)}else e.text().then(this.Ra.bind(this),this.ga.bind(this))},t.Pa=function(e){if(this.g){if(this.o&&e.value)this.response.push(e.value);else if(!this.o){var t=e.value?e.value:new Uint8Array(0);(t=this.v.decode(t,{stream:!e.done}))&&(this.response=this.responseText+=t)}e.done?Mt(this):Rt(this),3==this.readyState&&Pt(this)}},t.Ra=function(e){this.g&&(this.response=this.responseText=e,Mt(this))},t.Qa=function(e){this.g&&(this.response=e,Mt(this))},t.ga=function(){this.g&&Mt(this)},t.setRequestHeader=function(e,t){this.u.append(e,t)},t.getResponseHeader=function(e){return this.h&&this.h.get(e.toLowerCase())||""},t.getAllResponseHeaders=function(){if(!this.h)return"";const e=[],t=this.h.entries();for(var n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},Object.defineProperty(Lt.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(e){this.m=e?"include":"same-origin"}}),f(Bt,ie);var Ut=/^https?$/i,qt=["POST","PUT"];function jt(e,t){e.h=!1,e.g&&(e.j=!0,e.g.abort(),e.j=!1),e.l=t,e.m=5,zt(e),Kt(e)}function zt(e){e.A||(e.A=!0,se(e,"complete"),se(e,"error"))}function Gt(e){if(e.h&&void 0!==s&&(!e.v[1]||4!=Qt(e)||2!=e.Z()))if(e.u&&4==Qt(e))ae(e.Ea,0,e);else if(se(e,"readystatechange"),4==Qt(e)){e.h=!1;try{const s=e.Z();e:switch(s){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var t=!0;break e;default:t=!1}var n;if(!(n=t)){var r;if(r=0===s){var i=String(e.D).match(ot)[1]||null;!i&&o.self&&o.self.location&&(i=o.self.location.protocol.slice(0,-1)),r=!Ut.test(i?i.toLowerCase():"")}n=r}if(n)se(e,"complete"),se(e,"success");else{e.m=6;try{var a=2<Qt(e)?e.g.statusText:""}catch(e){a=""}e.l=a+" ["+e.Z()+"]",zt(e)}}finally{Kt(e)}}}function Kt(e,t){if(e.g){$t(e);const n=e.g,r=e.v[0]?()=>{}:null;e.g=null,e.v=null,t||se(e,"ready");try{n.onreadystatechange=r}catch(e){}}}function $t(e){e.I&&(o.clearTimeout(e.I),e.I=null)}function Qt(e){return e.g?e.g.readyState:0}function Ht(e){try{if(!e.g)return null;if("response"in e.g)return e.g.response;switch(e.H){case"":case"text":return e.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in e.g)return e.g.mozResponseArrayBuffer}return null}catch(e){return null}}function Wt(e,t,n){return n&&n.internalChannelParams&&n.internalChannelParams[e]||t}function Jt(e){this.Aa=0,this.i=[],this.j=new ke,this.ia=this.qa=this.I=this.W=this.g=this.ya=this.D=this.H=this.m=this.S=this.o=null,this.Ya=this.U=0,this.Va=Wt("failFast",!1,e),this.F=this.C=this.u=this.s=this.l=null,this.X=!0,this.za=this.T=-1,this.Y=this.v=this.B=0,this.Ta=Wt("baseRetryDelayMs",5e3,e),this.cb=Wt("retryDelaySeedMs",1e4,e),this.Wa=Wt("forwardChannelMaxRetries",2,e),this.wa=Wt("forwardChannelRequestTimeoutMs",2e4,e),this.pa=e&&e.xmlHttpFactory||void 0,this.Xa=e&&e.Tb||void 0,this.Ca=e&&e.useFetchStreams||!1,this.L=void 0,this.J=e&&e.supportsCrossDomainXhr||!1,this.K="",this.h=new Xe(e&&e.concurrentRequestLimit),this.Da=new Nt,this.P=e&&e.fastHandshake||!1,this.O=e&&e.encodeInitMessageHeaders||!1,this.P&&this.O&&(this.O=!1),this.Ua=e&&e.Rb||!1,e&&e.xa&&this.j.xa(),e&&e.forceLongPolling&&(this.X=!1),this.ba=!this.P&&this.X&&e&&e.detectBufferingProxy||!1,this.ja=void 0,e&&e.longPollingTimeout&&0<e.longPollingTimeout&&(this.ja=e.longPollingTimeout),this.ca=void 0,this.R=0,this.M=!1,this.ka=this.A=null}function Yt(e){if(Zt(e),3==e.G){var t=e.U++,n=ct(e.I);if(dt(n,"SID",e.K),dt(n,"RID",t),dt(n,"TYPE","terminate"),nn(e,n),(t=new Fe(e,e.j,t)).L=2,t.v=ft(ct(n)),n=!1,o.navigator&&o.navigator.sendBeacon)try{n=o.navigator.sendBeacon(t.v.toString(),"")}catch(e){}!n&&o.Image&&((new Image).src=t.v,n=!0),n||(t.g=gn(t.j,null),t.g.ea(t.v)),t.F=Date.now(),Ke(t)}fn(e)}function Xt(e){e.g&&(an(e),e.g.cancel(),e.g=null)}function Zt(e){Xt(e),e.u&&(o.clearTimeout(e.u),e.u=null),un(e),e.h.cancel(),e.s&&("number"==typeof e.s&&o.clearTimeout(e.s),e.s=null)}function en(e){if(!Ze(e.h)&&!e.s){e.s=!0;var t=e.Ga;A||O(),N||(A(),N=!0),k.add(t,e),e.B=0}}function tn(e,t){var n;n=t?t.l:e.U++;const r=ct(e.I);dt(r,"SID",e.K),dt(r,"RID",n),dt(r,"AID",e.T),nn(e,r),e.m&&e.o&&Vt(r,e.m,e.o),n=new Fe(e,e.j,n,e.B+1),null===e.m&&(n.H=e.o),t&&(e.i=t.D.concat(e.i)),t=rn(e,n,1e3),n.I=Math.round(.5*e.wa)+Math.round(.5*e.wa*Math.random()),nt(e.h,n),qe(n,r,t)}function nn(e,t){e.H&&b(e.H,(function(e,n){dt(t,n,e)})),e.l&&st({},(function(e,n){dt(t,n,e)}))}function rn(e,t,n){n=Math.min(e.i.length,n);var r=e.l?h(e.l.Na,e.l,e):null;e:{var i=e.i;let t=-1;for(;;){const e=["count="+n];-1==t?0<n?(t=i[0].g,e.push("ofs="+t)):t=0:e.push("ofs="+t);let s=!0;for(let o=0;o<n;o++){let n=i[o].g;const a=i[o].map;if(n-=t,0>n)t=Math.max(0,i[o].g-100),s=!1;else try{kt(a,e,"req"+n+"_")}catch(e){r&&r(a)}}if(s){r=e.join("&");break e}}}return e=e.i.splice(0,n),t.D=e,r}function sn(e){if(!e.g&&!e.u){e.Y=1;var t=e.Fa;A||O(),N||(A(),N=!0),k.add(t,e),e.v=0}}function on(e){return!(e.g||e.u||3<=e.v||(e.Y++,e.u=Ne(h(e.Fa,e),hn(e,e.v)),e.v++,0))}function an(e){null!=e.A&&(o.clearTimeout(e.A),e.A=null)}function cn(e){e.g=new Fe(e,e.j,"rpc",e.Y),null===e.m&&(e.g.H=e.o),e.g.O=0;var t=ct(e.qa);dt(t,"RID","rpc"),dt(t,"SID",e.K),dt(t,"AID",e.T),dt(t,"CI",e.F?"0":"1"),!e.F&&e.ja&&dt(t,"TO",e.ja),dt(t,"TYPE","xmlhttp"),nn(e,t),e.m&&e.o&&Vt(t,e.m,e.o),e.L&&(e.g.I=e.L);var n=e.g;e=e.ia,n.L=1,n.v=ft(ct(t)),n.m=null,n.P=!0,je(n,e)}function un(e){null!=e.C&&(o.clearTimeout(e.C),e.C=null)}function ln(e,t){var n=null;if(e.g==t){un(e),an(e),e.g=null;var r=2}else{if(!tt(e.h,t))return;n=t.D,rt(e.h,t),r=1}if(0!=e.G)if(t.o)if(1==r){n=t.m?t.m.length:0,t=Date.now()-t.F;var i=e.B;se(r=Se(),new Ae(r,n,t,i)),en(e)}else sn(e);else if(3==(i=t.s)||0==i&&0<t.X||!(1==r&&function(e,t){return!(et(e.h)>=e.h.j-(e.s?1:0)||(e.s?(e.i=t.D.concat(e.i),0):1==e.G||2==e.G||e.B>=(e.Va?0:e.Wa)||(e.s=Ne(h(e.Ga,e,t),hn(e,e.B)),e.B++,0)))}(e,t)||2==r&&on(e)))switch(n&&0<n.length&&(t=e.h,t.i=t.i.concat(n)),i){case 1:dn(e,5);break;case 4:dn(e,10);break;case 3:dn(e,6);break;default:dn(e,2)}}function hn(e,t){let n=e.Ta+Math.floor(Math.random()*e.cb);return e.isActive()||(n*=2),n*t}function dn(e,t){if(e.j.info("Error code "+t),2==t){var n=h(e.fb,e),r=e.Xa;const t=!r;r=new at(r||"//www.google.com/images/cleardot.gif"),o.location&&"http"==o.location.protocol||ut(r,"https"),ft(r),t?function(e,t){const n=new ke;if(o.Image){const r=new Image;r.onload=d(At,n,"TestLoadImage: loaded",!0,t,r),r.onerror=d(At,n,"TestLoadImage: error",!1,t,r),r.onabort=d(At,n,"TestLoadImage: abort",!1,t,r),r.ontimeout=d(At,n,"TestLoadImage: timeout",!1,t,r),o.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=e}else t(!1)}(r.toString(),n):function(e,t){new ke;const n=new AbortController,r=setTimeout((()=>{n.abort(),At(0,0,!1,t)}),1e4);fetch(e,{signal:n.signal}).then((e=>{clearTimeout(r),e.ok?At(0,0,!0,t):At(0,0,!1,t)})).catch((()=>{clearTimeout(r),At(0,0,!1,t)}))}(r.toString(),n)}else De(2);e.G=0,e.l&&e.l.sa(t),fn(e),Zt(e)}function fn(e){if(e.G=0,e.ka=[],e.l){const t=it(e.h);0==t.length&&0==e.i.length||(g(e.ka,t),g(e.ka,e.i),e.h.i.length=0,p(e.i),e.i.length=0),e.l.ra()}}function pn(e,t,n){var r=n instanceof at?ct(n):new at(n);if(""!=r.g)t&&(r.g=t+"."+r.g),lt(r,r.s);else{var i=o.location;r=i.protocol,t=t?t+"."+i.hostname:i.hostname,i=+i.port;var s=new at(null);r&&ut(s,r),t&&(s.g=t),i&&lt(s,i),n&&(s.l=n),r=s}return n=e.D,t=e.ya,n&&t&&dt(r,n,t),dt(r,"VER",e.la),nn(e,r),r}function gn(e,t,n){if(t&&!e.J)throw Error("Can't create secondary domain capable XhrIo object.");return(t=e.Ca&&!e.pa?new Bt(new Ot({eb:n})):new Bt(e.pa)).Ha(e.J),t}function mn(){}function yn(){}function vn(e,t){ie.call(this),this.g=new Jt(t),this.l=e,this.h=t&&t.messageUrlParams||null,e=t&&t.messageHeaders||null,t&&t.clientProtocolHeaderRequired&&(e?e["X-Client-Protocol"]="webchannel":e={"X-Client-Protocol":"webchannel"}),this.g.o=e,e=t&&t.initMessageHeaders||null,t&&t.messageContentType&&(e?e["X-WebChannel-Content-Type"]=t.messageContentType:e={"X-WebChannel-Content-Type":t.messageContentType}),t&&t.va&&(e?e["X-WebChannel-Client-Profile"]=t.va:e={"X-WebChannel-Client-Profile":t.va}),this.g.S=e,(e=t&&t.Sb)&&!m(e)&&(this.g.m=e),this.v=t&&t.supportsCrossDomainXhr||!1,this.u=t&&t.sendRawJson||!1,(t=t&&t.httpSessionIdParam)&&!m(t)&&(this.g.D=t,null!==(e=this.h)&&t in e&&t in(e=this.h)&&delete e[t]),this.j=new _n(this)}function wn(e){be.call(this),e.__headers__&&(this.headers=e.__headers__,this.statusCode=e.__status__,delete e.__headers__,delete e.__status__);var t=e.__sm__;if(t){e:{for(const n in t){e=n;break e}e=void 0}(this.i=e)&&(e=this.i,t=null!==t&&e in t?t[e]:void 0),this.data=t}else this.data=e}function bn(){_e.call(this),this.status=1}function _n(e){this.g=e}(t=Bt.prototype).Ha=function(e){this.J=e},t.ea=function(e,t,n,r){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.D+"; newUri="+e);t=t?t.toUpperCase():"GET",this.D=e,this.l="",this.m=0,this.A=!1,this.h=!0,this.g=this.o?this.o.g():Le.g(),this.v=this.o?ye(this.o):ye(Le),this.g.onreadystatechange=h(this.Ea,this);try{this.B=!0,this.g.open(t,String(e),!0),this.B=!1}catch(e){return void jt(this,e)}if(e=n||"",n=new Map(this.headers),r)if(Object.getPrototypeOf(r)===Object.prototype)for(var i in r)n.set(i,r[i]);else{if("function"!=typeof r.keys||"function"!=typeof r.get)throw Error("Unknown input type for opt_headers: "+String(r));for(const e of r.keys())n.set(e,r.get(e))}r=Array.from(n.keys()).find((e=>"content-type"==e.toLowerCase())),i=o.FormData&&e instanceof o.FormData,!(0<=Array.prototype.indexOf.call(qt,t,void 0))||r||i||n.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");for(const[e,t]of n)this.g.setRequestHeader(e,t);this.H&&(this.g.responseType=this.H),"withCredentials"in this.g&&this.g.withCredentials!==this.J&&(this.g.withCredentials=this.J);try{$t(this),this.u=!0,this.g.send(e),this.u=!1}catch(e){jt(this,e)}},t.abort=function(e){this.g&&this.h&&(this.h=!1,this.j=!0,this.g.abort(),this.j=!1,this.m=e||7,se(this,"complete"),se(this,"abort"),Kt(this))},t.N=function(){this.g&&(this.h&&(this.h=!1,this.j=!0,this.g.abort(),this.j=!1),Kt(this,!0)),Bt.aa.N.call(this)},t.Ea=function(){this.s||(this.B||this.u||this.j?Gt(this):this.bb())},t.bb=function(){Gt(this)},t.isActive=function(){return!!this.g},t.Z=function(){try{return 2<Qt(this)?this.g.status:-1}catch(e){return-1}},t.oa=function(){try{return this.g?this.g.responseText:""}catch(e){return""}},t.Oa=function(e){if(this.g){var t=this.g.responseText;return e&&0==t.indexOf(e)&&(t=t.substring(e.length)),pe(t)}},t.Ba=function(){return this.m},t.Ka=function(){return"string"==typeof this.l?this.l:String(this.l)},(t=Jt.prototype).la=8,t.G=1,t.connect=function(e,t,n,r){De(0),this.W=e,this.H=t||{},n&&void 0!==r&&(this.H.OSID=n,this.H.OAID=r),this.F=this.X,this.I=pn(this,null,this.W),en(this)},t.Ga=function(e){if(this.s)if(this.s=null,1==this.G){if(!e){this.U=Math.floor(1e5*Math.random()),e=this.U++;const i=new Fe(this,this.j,e);let s=this.o;if(this.S&&(s?(s=_(s),E(s,this.S)):s=this.S),null!==this.m||this.O||(i.H=s,s=null),this.P)e:{for(var t=0,n=0;n<this.i.length;n++){var r=this.i[n];if(void 0===(r="__data__"in r.map&&"string"==typeof(r=r.map.__data__)?r.length:void 0))break;if(4096<(t+=r)){t=n;break e}if(4096===t||n===this.i.length-1){t=n+1;break e}}t=1e3}else t=1e3;t=rn(this,i,t),dt(n=ct(this.I),"RID",e),dt(n,"CVER",22),this.D&&dt(n,"X-HTTP-Session-Id",this.D),nn(this,n),s&&(this.O?t="headers="+encodeURIComponent(String(Ft(s)))+"&"+t:this.m&&Vt(n,this.m,s)),nt(this.h,i),this.Ua&&dt(n,"TYPE","init"),this.P?(dt(n,"$req",t),dt(n,"SID","null"),i.T=!0,qe(i,n,null)):qe(i,n,t),this.G=2}}else 3==this.G&&(e?tn(this,e):0==this.i.length||Ze(this.h)||tn(this))},t.Fa=function(){if(this.u=null,cn(this),this.ba&&!(this.M||null==this.g||0>=this.R)){var e=2*this.R;this.j.info("BP detection timer enabled: "+e),this.A=Ne(h(this.ab,this),e)}},t.ab=function(){this.A&&(this.A=null,this.j.info("BP detection timeout reached."),this.j.info("Buffering proxy detected and switch to long-polling!"),this.F=!1,this.M=!0,De(10),Xt(this),cn(this))},t.Za=function(){null!=this.C&&(this.C=null,Xt(this),on(this),De(19))},t.fb=function(e){e?(this.j.info("Successfully pinged google.com"),De(2)):(this.j.info("Failed to ping google.com"),De(1))},t.isActive=function(){return!!this.l&&this.l.isActive(this)},(t=mn.prototype).ua=function(){},t.ta=function(){},t.sa=function(){},t.ra=function(){},t.isActive=function(){return!0},t.Na=function(){},yn.prototype.g=function(e,t){return new vn(e,t)},f(vn,ie),vn.prototype.m=function(){this.g.l=this.j,this.v&&(this.g.J=!0),this.g.connect(this.l,this.h||void 0)},vn.prototype.close=function(){Yt(this.g)},vn.prototype.o=function(e){var t=this.g;if("string"==typeof e){var n={};n.__data__=e,e=n}else this.u&&((n={}).__data__=fe(e),e=n);t.i.push(new Ye(t.Ya++,e)),3==t.G&&en(t)},vn.prototype.N=function(){this.g.l=null,delete this.j,Yt(this.g),delete this.g,vn.aa.N.call(this)},f(wn,be),f(bn,_e),f(_n,mn),_n.prototype.ua=function(){se(this.g,"a")},_n.prototype.ta=function(e){se(this.g,new wn(e))},_n.prototype.sa=function(e){se(this.g,new bn(e))},_n.prototype.ra=function(){se(this.g,"b")},yn.prototype.createWebChannel=yn.prototype.g,vn.prototype.send=vn.prototype.o,vn.prototype.open=vn.prototype.m,vn.prototype.close=vn.prototype.close,e.exports.createWebChannelTransport=function(){return new yn},e.exports.getStatEventTarget=function(){return Se()},e.exports.Event=Ie,e.exports.Stat={mb:0,pb:1,qb:2,Jb:3,Ob:4,Lb:5,Mb:6,Kb:7,Ib:8,Nb:9,PROXY:10,NOPROXY:11,Gb:12,Cb:13,Db:14,Bb:15,Eb:16,Fb:17,ib:18,hb:19,jb:20},Pe.NO_ERROR=0,Pe.TIMEOUT=8,Pe.HTTP_ERROR=6,e.exports.ErrorCode=Pe,Me.COMPLETE="complete",e.exports.EventType=Me,ve.EventType=we,we.OPEN="a",we.CLOSE="b",we.ERROR="c",we.MESSAGE="d",ie.prototype.listen=ie.prototype.K,e.exports.WebChannel=ve,e.exports.FetchXmlHttpFactory=Ot,Bt.prototype.listenOnce=Bt.prototype.L,Bt.prototype.getLastError=Bt.prototype.Ka,Bt.prototype.getLastErrorCode=Bt.prototype.Ba,Bt.prototype.getStatus=Bt.prototype.Z,Bt.prototype.getResponseJson=Bt.prototype.Oa,Bt.prototype.getResponseText=Bt.prototype.oa,Bt.prototype.send=Bt.prototype.ea,Bt.prototype.setWithCredentials=Bt.prototype.Ha,e.exports.XhrIo=Bt}).apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},718:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(782);r.registerVersion("firebase","10.12.3","app"),Object.keys(r).forEach((function(e){"default"===e||t.hasOwnProperty(e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}))},516:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(100);Object.keys(r).forEach((function(e){"default"===e||t.hasOwnProperty(e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}))},669:(e,t,n)=>{"use strict";n.r(t),n.d(t,{deleteDB:()=>m,openDB:()=>g,unwrap:()=>p,wrap:()=>f});const r=(e,t)=>t.some((t=>e instanceof t));let i,s;const o=new WeakMap,a=new WeakMap,c=new WeakMap,u=new WeakMap,l=new WeakMap;let h={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return a.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return f(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function d(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(p(this),e),f(o.get(this))}:function(...e){return f(t.apply(p(this),e))}:function(e,...n){const r=t.call(p(this),e,...n);return c.set(r,e.sort?e.sort():[e]),f(r)}:(e instanceof IDBTransaction&&function(e){if(a.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),r()},s=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));a.set(e,t)}(e),r(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,h):e);var t}function f(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t(f(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",i),e.addEventListener("error",s)}));return t.then((t=>{t instanceof IDBCursor&&o.set(t,e)})).catch((()=>{})),l.set(t,e),t}(e);if(u.has(e))return u.get(e);const t=d(e);return t!==e&&(u.set(e,t),l.set(t,e)),t}const p=e=>l.get(e);function g(e,t,{blocked:n,upgrade:r,blocking:i,terminated:s}={}){const o=indexedDB.open(e,t),a=f(o);return r&&o.addEventListener("upgradeneeded",(e=>{r(f(o.result),e.oldVersion,e.newVersion,f(o.transaction),e)})),n&&o.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),a.then((e=>{s&&e.addEventListener("close",(()=>s())),i&&e.addEventListener("versionchange",(e=>i(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),a}function m(e,{blocked:t}={}){const n=indexedDB.deleteDatabase(e);return t&&n.addEventListener("blocked",(e=>t(e.oldVersion,e))),f(n).then((()=>{}))}const y=["get","getKey","getAll","getAllKeys","count"],v=["put","add","delete","clear"],w=new Map;function b(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(w.get(t))return w.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,i=v.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!i&&!y.includes(n))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let o=s.store;return r&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),i&&s.done]))[0]};return w.set(t,s),s}var _;_=h,h={..._,get:(e,t,n)=>b(e,t)||_.get(e,t,n),has:(e,t)=>!!b(e,t)||_.has(e,t)}},322:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__addDisposableResource:()=>P,__assign:()=>s,__asyncDelegator:()=>T,__asyncGenerator:()=>S,__asyncValues:()=>x,__await:()=>E,__awaiter:()=>p,__classPrivateFieldGet:()=>k,__classPrivateFieldIn:()=>L,__classPrivateFieldSet:()=>O,__createBinding:()=>m,__decorate:()=>a,__disposeResources:()=>R,__esDecorate:()=>u,__exportStar:()=>y,__extends:()=>i,__generator:()=>g,__importDefault:()=>N,__importStar:()=>A,__makeTemplateObject:()=>C,__metadata:()=>f,__param:()=>c,__propKey:()=>h,__read:()=>w,__rest:()=>o,__runInitializers:()=>l,__setFunctionName:()=>d,__spread:()=>b,__spreadArray:()=>I,__spreadArrays:()=>_,__values:()=>v,default:()=>F});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var s=function(){return s=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},s.apply(this,arguments)};function o(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function a(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o}function c(e,t){return function(n,r){t(n,r,e)}}function u(e,t,n,r,i,s){function o(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var a,c=r.kind,u="getter"===c?"get":"setter"===c?"set":"value",l=!t&&e?r.static?e:e.prototype:null,h=t||(l?Object.getOwnPropertyDescriptor(l,r.name):{}),d=!1,f=n.length-1;f>=0;f--){var p={};for(var g in r)p[g]="access"===g?{}:r[g];for(var g in r.access)p.access[g]=r.access[g];p.addInitializer=function(e){if(d)throw new TypeError("Cannot add initializers after decoration has completed");s.push(o(e||null))};var m=(0,n[f])("accessor"===c?{get:h.get,set:h.set}:h[u],p);if("accessor"===c){if(void 0===m)continue;if(null===m||"object"!=typeof m)throw new TypeError("Object expected");(a=o(m.get))&&(h.get=a),(a=o(m.set))&&(h.set=a),(a=o(m.init))&&i.unshift(a)}else(a=o(m))&&("field"===c?i.unshift(a):h[u]=a)}l&&Object.defineProperty(l,r.name,h),d=!0}function l(e,t,n){for(var r=arguments.length>2,i=0;i<t.length;i++)n=r?t[i].call(e,n):t[i].call(e);return r?n:void 0}function h(e){return"symbol"==typeof e?e:"".concat(e)}function d(e,t,n){return"symbol"==typeof t&&(t=t.description?"[".concat(t.description,"]"):""),Object.defineProperty(e,"name",{configurable:!0,value:n?"".concat(n," ",t):t})}function f(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function p(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}c((r=r.apply(e,t||[])).next())}))}function g(e,t){var n,r,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,a[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}var m=Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function y(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||m(t,e,n)}function v(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function w(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,s=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=s.next()).done;)o.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=s.return)&&n.call(s)}finally{if(i)throw i.error}}return o}function b(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(w(arguments[t]));return e}function _(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var s=arguments[t],o=0,a=s.length;o<a;o++,i++)r[i]=s[o];return r}function I(e,t,n){if(n||2===arguments.length)for(var r,i=0,s=t.length;i<s;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}function E(e){return this instanceof E?(this.v=e,this):new E(e)}function S(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),s=[];return r={},o("next"),o("throw"),o("return",(function(e){return function(t){return Promise.resolve(t).then(e,u)}})),r[Symbol.asyncIterator]=function(){return this},r;function o(e,t){i[e]&&(r[e]=function(t){return new Promise((function(n,r){s.push([e,t,n,r])>1||a(e,t)}))},t&&(r[e]=t(r[e])))}function a(e,t){try{(n=i[e](t)).value instanceof E?Promise.resolve(n.value.v).then(c,u):l(s[0][2],n)}catch(e){l(s[0][3],e)}var n}function c(e){a("next",e)}function u(e){a("throw",e)}function l(e,t){e(t),s.shift(),s.length&&a(s[0][0],s[0][1])}}function T(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:E(e[r](t)),done:!1}:i?i(t):t}:i}}function x(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=v(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,i,(t=e[n](t)).done,t.value)}))}}}function C(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var D=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function A(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&m(t,e,n);return D(t,e),t}function N(e){return e&&e.__esModule?e:{default:e}}function k(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function O(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n}function L(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}function P(e,t,n){if(null!=t){if("object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object expected.");var r,i;if(n){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");r=t[Symbol.asyncDispose]}if(void 0===r){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");r=t[Symbol.dispose],n&&(i=r)}if("function"!=typeof r)throw new TypeError("Object not disposable.");i&&(r=function(){try{i.call(this)}catch(e){return Promise.reject(e)}}),e.stack.push({value:t,dispose:r,async:n})}else n&&e.stack.push({async:!0});return t}var M="function"==typeof SuppressedError?SuppressedError:function(e,t,n){var r=new Error(n);return r.name="SuppressedError",r.error=e,r.suppressed=t,r};function R(e){function t(t){e.error=e.hasError?new M(t,e.error,"An error was suppressed during disposal."):t,e.hasError=!0}return function n(){for(;e.stack.length;){var r=e.stack.pop();try{var i=r.dispose&&r.dispose.call(r.value);if(r.async)return Promise.resolve(i).then(n,(function(e){return t(e),n()}))}catch(e){t(e)}}if(e.hasError)throw e.error}()}const F={__extends:i,__assign:s,__rest:o,__decorate:a,__param:c,__metadata:f,__awaiter:p,__generator:g,__createBinding:m,__exportStar:y,__values:v,__read:w,__spread:b,__spreadArrays:_,__spreadArray:I,__await:E,__asyncGenerator:S,__asyncDelegator:T,__asyncValues:x,__makeTemplateObject:C,__importStar:A,__importDefault:N,__classPrivateFieldGet:k,__classPrivateFieldSet:O,__classPrivateFieldIn:L,__addDisposableResource:P,__disposeResources:R}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,n),s.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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NC9GLEVBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1mZi8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL2Rpc3QvaW5kZXguY2pzLmpzIiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvZGlzdC9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1mZi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2ZpcmVzdG9yZS9kaXN0L2luZGV4LmNqcy5qcyIsIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvbG9nZ2VyL2Rpc3QvaW5kZXguY2pzLmpzIiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL2Rpc3QvaW5kZXguY2pzLmpzIiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS93ZWJjaGFubmVsLXdyYXBwZXIvZGlzdC9ibG9vbS1ibG9iL2Jsb29tX2Jsb2JfZXMyMDE4LmpzIiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS93ZWJjaGFubmVsLXdyYXBwZXIvZGlzdC93ZWJjaGFubmVsLWJsb2Ivd2ViY2hhbm5lbF9ibG9iX2VzMjAxOC5qcyIsIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9hcHAvZGlzdC9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1mZi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvZmlyZXN0b3JlL2Rpc3QvaW5kZXguY2pzLmpzIiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC93cmFwLWlkYi12YWx1ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1mZi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0LWZmL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1mZi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL21lc3RvLXByb2plY3QtZmYvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluaXRpYWxpemVBcHAgfSBmcm9tIFwiZmlyZWJhc2UvYXBwXCI7XHJcbmltcG9ydCB7IGdldEZpcmVzdG9yZSwgZG9jLCBzZXREb2MsIGdldERvYywgY29sbGVjdGlvbiwgb25TbmFwc2hvdCwgRG9jdW1lbnREYXRhLCBEb2N1bWVudFNuYXBzaG90LCBRdWVyeVNuYXBzaG90LCB1cGRhdGVEb2MgfSBmcm9tIFwiZmlyZWJhc2UvZmlyZXN0b3JlXCI7XHJcbmltcG9ydCBcIi4vc3R5bGVzL2luZGV4LmNzc1wiO1xyXG5cclxuY29uc3QgZmlyZWJhc2VDb25maWcgPSB7XHJcbiAgICBhcGlLZXk6IFwiQUl6YVN5QnJETmJ5QnBtUm9VU0NUSS1ucEZtMVlJb2R6UU5qSW9BXCIsXHJcbiAgICBhdXRoRG9tYWluOiBcIndlZGRpbmctc2l0ZS1jMWZiMC5maXJlYmFzZWFwcC5jb21cIixcclxuICAgIHByb2plY3RJZDogXCJ3ZWRkaW5nLXNpdGUtYzFmYjBcIixcclxuICAgIHN0b3JhZ2VCdWNrZXQ6IFwid2VkZGluZy1zaXRlLWMxZmIwLmFwcHNwb3QuY29tXCIsXHJcbiAgICBtZXNzYWdpbmdTZW5kZXJJZDogXCI1MTQ4MDgzNDk4MDVcIixcclxuICAgIGFwcElkOiBcIjE6NTE0ODA4MzQ5ODA1OndlYjo1OWRlZmVhZDY5ZDdkYTRlNWFlYjY0XCIsXHJcbiAgICBtZWFzdXJlbWVudElkOiBcIkctNEhNN043MkRGNFwiXHJcbn07XHJcblxyXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXHJcbmNvbnN0IGFwcCA9IGluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xyXG5jb25zdCBkYiA9IGdldEZpcmVzdG9yZShhcHApO1xyXG5cclxuLy8gRHJpbmsgZGF0YVxyXG5jb25zdCBjb2NrdGFpbHNEYXRhOiBzdHJpbmdbXSA9IFsn0JzQvtGF0LjRgtC+JywgJ9CR0LDQt9C40LvQuNC60L7QstGL0Lkg0YHQvNGN0YgnLCAn0JDQv9C10YDQvtC70YwnLCAn0JzQsNGA0LPQsNGA0LjRgtCwJ107XHJcbmNvbnN0IGx1eHVyeURhdGE6IHN0cmluZ1tdID0gWyfQktC+0LTQutCwJywgJ9CS0LjRgdC60LgnLCAn0JLQuNC90L4nLCAn0JDQsdGB0LXQvdGCJywgJ9Cg0L7QvCddO1xyXG5jb25zdCBiZWVyRGF0YTogc3RyaW5nW10gPSBbJ9Ca0L7RgNC+0L3QsCcsICdIZWluZWtlbicsICdQYXVsYW5lcicsICdQaWxzbmVyJ107XHJcblxyXG5hc3luYyBmdW5jdGlvbiBhZGRHdWVzdChsYXN0TmFtZTogc3RyaW5nLCBmaXJzdE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBndWVzdFJlZiA9IGRvYyhkYiwgXCJndWVzdHNcIiwgYCR7bGFzdE5hbWV9XyR7Zmlyc3ROYW1lfWApO1xyXG4gICAgICAgIGNvbnN0IGRvY1NuYXAgPSBhd2FpdCBnZXREb2MoZ3Vlc3RSZWYpO1xyXG5cclxuICAgICAgICBpZiAoIWRvY1NuYXAuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgYXdhaXQgc2V0RG9jKGd1ZXN0UmVmLCB7IGxhc3ROYW1lLCBmaXJzdE5hbWUgfSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBHdWVzdCAke2xhc3ROYW1lfSAke2ZpcnN0TmFtZX0gYWRkZWRgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgR3Vlc3QgJHtsYXN0TmFtZX0gJHtmaXJzdE5hbWV9IGFscmVhZHkgZXhpc3RzYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIGd1ZXN0OlwiLCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUd1ZXN0TGlzdEluSFRNTChndWVzdDogeyBsYXN0TmFtZTogc3RyaW5nOyBmaXJzdE5hbWU6IHN0cmluZyB9KTogdm9pZCB7XHJcbiAgICBjb25zdCBndWVzdExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImd1ZXN0TGlzdFwiKTtcclxuICAgIGlmICghZ3Vlc3RMaXN0KSByZXR1cm47XHJcblxyXG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG5cclxuICAgIGNvbnN0IGxhc3ROYW1lQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgIGxhc3ROYW1lQ2VsbC50ZXh0Q29udGVudCA9IGd1ZXN0Lmxhc3ROYW1lO1xyXG4gICAgcm93LmFwcGVuZENoaWxkKGxhc3ROYW1lQ2VsbCk7XHJcblxyXG4gICAgY29uc3QgZmlyc3ROYW1lQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgIGZpcnN0TmFtZUNlbGwudGV4dENvbnRlbnQgPSBndWVzdC5maXJzdE5hbWU7XHJcbiAgICByb3cuYXBwZW5kQ2hpbGQoZmlyc3ROYW1lQ2VsbCk7XHJcblxyXG4gICAgZ3Vlc3RMaXN0LmFwcGVuZENoaWxkKHJvdyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRpYWxpemVHdWVzdExpc3QoKTogdm9pZCB7XHJcbiAgICBjb25zdCBndWVzdHNDb2xsZWN0aW9uID0gY29sbGVjdGlvbihkYiwgXCJndWVzdHNcIik7XHJcblxyXG4gICAgb25TbmFwc2hvdChndWVzdHNDb2xsZWN0aW9uLCAoc25hcHNob3Q6IFF1ZXJ5U25hcHNob3Q8RG9jdW1lbnREYXRhPikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGd1ZXN0TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ3Vlc3RMaXN0XCIpO1xyXG4gICAgICAgIGlmICghZ3Vlc3RMaXN0KSByZXR1cm47XHJcblxyXG4gICAgICAgIGd1ZXN0TGlzdC5pbm5lckhUTUwgPSBcIlwiO1xyXG5cclxuICAgICAgICBzbmFwc2hvdC5mb3JFYWNoKChkb2M6IERvY3VtZW50U25hcHNob3Q8RG9jdW1lbnREYXRhPikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBndWVzdCA9IGRvYy5kYXRhKCkgYXMgeyBsYXN0TmFtZTogc3RyaW5nOyBmaXJzdE5hbWU6IHN0cmluZyB9O1xyXG4gICAgICAgICAgICB1cGRhdGVHdWVzdExpc3RJbkhUTUwoZ3Vlc3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkR3Vlc3RCdG5cIik/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBsYXN0TmFtZSA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhc3ROYW1lXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgY29uc3QgZmlyc3ROYW1lID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlyc3ROYW1lXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG5cclxuICAgIGlmIChsYXN0TmFtZSAmJiBmaXJzdE5hbWUpIHtcclxuICAgICAgICBhd2FpdCBhZGRHdWVzdChsYXN0TmFtZSwgZmlyc3ROYW1lKTtcclxuICAgICAgICAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYXN0TmFtZVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlyc3ROYW1lXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlID0gXCJcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWxlcnQoXCLQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0YTQsNC80LjQu9C40Y4g0Lgg0LjQvNGPINCz0L7RgdGC0Y9cIik7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuaW5pdGlhbGl6ZUd1ZXN0TGlzdCgpO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZUZpcmVzdG9yZURhdGEoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBjYXRlZ29yaWVzID0ge1xyXG4gICAgICAgIGNvY2t0YWlsczogY29ja3RhaWxzRGF0YSxcclxuICAgICAgICBsdXh1cnk6IGx1eHVyeURhdGEsXHJcbiAgICAgICAgYmVlcjogYmVlckRhdGEsXHJcbiAgICB9O1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbY2F0ZWdvcnksIGRyaW5rc10gb2YgT2JqZWN0LmVudHJpZXMoY2F0ZWdvcmllcykpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBkcmluayBvZiBkcmlua3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRyaW5rUmVmID0gZG9jKGRiLCBjYXRlZ29yeSwgZHJpbmsucmVwbGFjZSgvXFxzKy9nLCAnXycpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRvY1NuYXAgPSBhd2FpdCBnZXREb2MoZHJpbmtSZWYpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghZG9jU25hcC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNldERvYyhkcmlua1JlZiwgeyBjb3VudDogMCB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZygnRmlyZXN0b3JlIGRhdGEgaW5pdGlhbGl6ZWQnKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIEZpcmVzdG9yZSBkYXRhOicsIGVycm9yKTtcclxuICAgIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlRHJpbmtDb3VudChkcmluazogc3RyaW5nLCBjYXRlZ29yeTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGRyaW5rUmVmID0gZG9jKGRiLCBjYXRlZ29yeSwgZHJpbmsucmVwbGFjZSgvXFxzKy9nLCAnXycpKTtcclxuICAgICAgICBjb25zdCBkb2NTbmFwID0gYXdhaXQgZ2V0RG9jKGRyaW5rUmVmKTtcclxuXHJcbiAgICAgICAgaWYgKGRvY1NuYXAuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudENvdW50ID0gZG9jU25hcC5kYXRhKCk/LmNvdW50IHx8IDA7XHJcbiAgICAgICAgICAgIGF3YWl0IHVwZGF0ZURvYyhkcmlua1JlZiwgeyBjb3VudDogY3VycmVudENvdW50ICsgMSB9KTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFVwZGF0ZWQgJHtkcmlua30gaW4gJHtjYXRlZ29yeX06IG5ldyBjb3VudCAke2N1cnJlbnRDb3VudCArIDF9YCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXdhaXQgc2V0RG9jKGRyaW5rUmVmLCB7IGNvdW50OiAxIH0pO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgU2V0ICR7ZHJpbmt9IGluICR7Y2F0ZWdvcnl9OiBuZXcgY291bnQgMWApO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDQvtCx0L3QvtCy0LvQtdC90LjQuCDQutC+0LvQuNGH0LXRgdGC0LLQsCDQs9C+0LvQvtGB0L7QsjonLCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVSZXN1bHRzKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjYXRlZ29yaWVzOiBzdHJpbmdbXSA9IFsnY29ja3RhaWxzJywgJ2x1eHVyeScsICdiZWVyJ107XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY2F0ZWdvcnkgb2YgY2F0ZWdvcmllcykge1xyXG4gICAgICAgICAgICBjb25zdCBkcmlua3MgPSBjYXRlZ29yeSA9PT0gJ2NvY2t0YWlscycgPyBjb2NrdGFpbHNEYXRhIDpcclxuICAgICAgICAgICAgICAgIGNhdGVnb3J5ID09PSAnbHV4dXJ5JyA/IGx1eHVyeURhdGEgOlxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnkgPT09ICdiZWVyJyA/IGJlZXJEYXRhIDogW107XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRyaW5rIG9mIGRyaW5rcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZHJpbmtSZWYgPSBkb2MoZGIsIGNhdGVnb3J5LCBkcmluay5yZXBsYWNlKC9cXHMrL2csICdfJykpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZG9jU25hcCA9IGF3YWl0IGdldERvYyhkcmlua1JlZik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRvY1NuYXAuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IGRvY1NuYXAuZGF0YSgpPy5jb3VudCB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2RyaW5rLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnLScpfS1jb3VudGApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRFbGVtZW50LmlubmVyVGV4dCA9IGAke2NvdW50fSDRh9C10LvQvtCy0LXQumA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0L/QvtC70YPRh9C10L3QuNGPINGA0LXQt9GD0LvRjNGC0LDRgtC+0LIg0L7Qv9GA0L7RgdCwOicsIGVycm9yKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUmVzdWx0SW5IVE1MKGRyaW5rOiBzdHJpbmcsIGNvdW50OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvdW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2RyaW5rLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnLScpfS1jb3VudGApO1xyXG4gICAgaWYgKGNvdW50RWxlbWVudCkge1xyXG4gICAgICAgIGNvdW50RWxlbWVudC5pbm5lclRleHQgPSBgJHtjb3VudH0g0YfQtdC70L7QstC10LpgO1xyXG4gICAgfVxyXG59XHJcblxyXG5pbml0aWFsaXplRmlyZXN0b3JlRGF0YSgpO1xyXG5pbml0aWFsaXplUmVzdWx0cygpO1xyXG5cclxuY29uc3Qgc3VydmV5Rm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdXJ2ZXktZm9ybScpO1xyXG5cclxuc3VydmV5Rm9ybT8uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgYXN5bmMgKGV2ZW50KSA9PiB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZXZlbnQudGFyZ2V0IGFzIEhUTUxGb3JtRWxlbWVudCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb2NrdGFpbERyaW5rcyA9IGZvcm1EYXRhLmdldEFsbCgnY29ja3RhaWwnKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGRyaW5rIG9mIGNvY2t0YWlsRHJpbmtzKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHVwZGF0ZURyaW5rQ291bnQoZHJpbmsudG9TdHJpbmcoKSwgJ2NvY2t0YWlscycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbHV4dXJ5RHJpbmtzID0gZm9ybURhdGEuZ2V0QWxsKCdsdXh1cnknKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGRyaW5rIG9mIGx1eHVyeURyaW5rcykge1xyXG4gICAgICAgICAgICBhd2FpdCB1cGRhdGVEcmlua0NvdW50KGRyaW5rLnRvU3RyaW5nKCksICdsdXh1cnknKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGJlZXJEcmlua3MgPSBmb3JtRGF0YS5nZXRBbGwoJ2JlZXInKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGRyaW5rIG9mIGJlZXJEcmlua3MpIHtcclxuICAgICAgICAgICAgYXdhaXQgdXBkYXRlRHJpbmtDb3VudChkcmluay50b1N0cmluZygpLCAnYmVlcicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2hhc1ZvdGVkJywgJ3RydWUnKTtcclxuICAgICAgICBpbml0aWFsaXplUmVzdWx0cygpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN1bHRzJyk/LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3VydmV5LWJ1dHRvbicpIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0L/RgNC4INC+0LHQvdC+0LLQu9C10L3QuNC4INC60L7Qu9C40YfQtdGB0YLQstCwINCz0L7Qu9C+0YHQvtCyOicsIGVycm9yKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBjYXRlZ29yaWVzID0gWydjb2NrdGFpbHMnLCAnbHV4dXJ5JywgJ2JlZXInXTtcclxuXHJcbmNhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XHJcbiAgICBjb25zdCBkcmlua3MgPSBjYXRlZ29yeSA9PT0gJ2NvY2t0YWlscycgPyBjb2NrdGFpbHNEYXRhIDpcclxuICAgICAgICBjYXRlZ29yeSA9PT0gJ2x1eHVyeScgPyBsdXh1cnlEYXRhIDpcclxuICAgICAgICBjYXRlZ29yeSA9PT0gJ2JlZXInID8gYmVlckRhdGEgOiBbXTtcclxuXHJcbiAgICBkcmlua3MuZm9yRWFjaCgoZHJpbmspID0+IHtcclxuICAgICAgICBjb25zdCBkcmlua1JlZiA9IGRvYyhkYiwgY2F0ZWdvcnksIGRyaW5rLnJlcGxhY2UoL1xccysvZywgJ18nKSk7XHJcbiAgICAgICAgb25TbmFwc2hvdChkcmlua1JlZiwgKGRvY1NuYXBzaG90OiBEb2N1bWVudFNuYXBzaG90PERvY3VtZW50RGF0YT4pID0+IHtcclxuICAgICAgICAgICAgaWYgKGRvY1NuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IGRvY1NuYXBzaG90LmRhdGEoKT8uY291bnQgfHwgMDtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVJlc3VsdEluSFRNTChkcmluaywgY291bnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGNvbXBvbmVudCA9IHJlcXVpcmUoJ0BmaXJlYmFzZS9jb21wb25lbnQnKTtcbnZhciB0c2xpYiA9IHJlcXVpcmUoJ3RzbGliJyk7XG52YXIgbG9nZ2VyJDEgPSByZXF1aXJlKCdAZmlyZWJhc2UvbG9nZ2VyJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ0BmaXJlYmFzZS91dGlsJyk7XG52YXIgaWRiID0gcmVxdWlyZSgnaWRiJyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbChjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIC8vIEluIGluaXRpYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd2lsbCBiZSBjYWxsZWQgYnkgaW5zdGFsbGF0aW9ucyBvblxyXG4gICAgLy8gYXV0aCB0b2tlbiByZWZyZXNoLCBhbmQgaW5zdGFsbGF0aW9ucyB3aWxsIHNlbmQgdGhpcyBzdHJpbmcuXHJcbiAgICBQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsLnByb3RvdHlwZS5nZXRQbGF0Zm9ybUluZm9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVycyA9IHRoaXMuY29udGFpbmVyLmdldFByb3ZpZGVycygpO1xyXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBwcm92aWRlcnMgYW5kIGdldCBsaWJyYXJ5L3ZlcnNpb24gcGFpcnMgZnJvbSBhbnkgdGhhdCBhcmVcclxuICAgICAgICAvLyB2ZXJzaW9uIGNvbXBvbmVudHMuXHJcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChwcm92aWRlcikge1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZXJ2aWNlLmxpYnJhcnksIFwiL1wiKS5jb25jYXQoc2VydmljZS52ZXJzaW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobG9nU3RyaW5nKSB7IHJldHVybiBsb2dTdHJpbmc7IH0pXHJcbiAgICAgICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGw7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gcHJvdmlkZXIgY2hlY2sgaWYgdGhpcyBwcm92aWRlciBwcm92aWRlcyBhIFZlcnNpb25TZXJ2aWNlXHJcbiAqXHJcbiAqIE5PVEU6IFVzaW5nIFByb3ZpZGVyPCdhcHAtdmVyc2lvbic+IGlzIGEgaGFjayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBwcm92aWRlclxyXG4gKiBwcm92aWRlcyBWZXJzaW9uU2VydmljZS4gVGhlIHByb3ZpZGVyIGlzIG5vdCBuZWNlc3NhcmlseSBhICdhcHAtdmVyc2lvbidcclxuICogcHJvdmlkZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIocHJvdmlkZXIpIHtcclxuICAgIHZhciBjb21wb25lbnQgPSBwcm92aWRlci5nZXRDb21wb25lbnQoKTtcclxuICAgIHJldHVybiAoY29tcG9uZW50ID09PSBudWxsIHx8IGNvbXBvbmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcG9uZW50LnR5cGUpID09PSBcIlZFUlNJT05cIiAvKiBDb21wb25lbnRUeXBlLlZFUlNJT04gKi87XHJcbn1cblxudmFyIG5hbWUkcCA9IFwiQGZpcmViYXNlL2FwcFwiO1xudmFyIHZlcnNpb24kMSA9IFwiMC4xMC42XCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBsb2dnZXIgPSBuZXcgbG9nZ2VyJDEuTG9nZ2VyKCdAZmlyZWJhc2UvYXBwJyk7XG5cbnZhciBuYW1lJG8gPSBcIkBmaXJlYmFzZS9hcHAtY29tcGF0XCI7XG5cbnZhciBuYW1lJG4gPSBcIkBmaXJlYmFzZS9hbmFseXRpY3MtY29tcGF0XCI7XG5cbnZhciBuYW1lJG0gPSBcIkBmaXJlYmFzZS9hbmFseXRpY3NcIjtcblxudmFyIG5hbWUkbCA9IFwiQGZpcmViYXNlL2FwcC1jaGVjay1jb21wYXRcIjtcblxudmFyIG5hbWUkayA9IFwiQGZpcmViYXNlL2FwcC1jaGVja1wiO1xuXG52YXIgbmFtZSRqID0gXCJAZmlyZWJhc2UvYXV0aFwiO1xuXG52YXIgbmFtZSRpID0gXCJAZmlyZWJhc2UvYXV0aC1jb21wYXRcIjtcblxudmFyIG5hbWUkaCA9IFwiQGZpcmViYXNlL2RhdGFiYXNlXCI7XG5cbnZhciBuYW1lJGcgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZS1jb21wYXRcIjtcblxudmFyIG5hbWUkZiA9IFwiQGZpcmViYXNlL2Z1bmN0aW9uc1wiO1xuXG52YXIgbmFtZSRlID0gXCJAZmlyZWJhc2UvZnVuY3Rpb25zLWNvbXBhdFwiO1xuXG52YXIgbmFtZSRkID0gXCJAZmlyZWJhc2UvaW5zdGFsbGF0aW9uc1wiO1xuXG52YXIgbmFtZSRjID0gXCJAZmlyZWJhc2UvaW5zdGFsbGF0aW9ucy1jb21wYXRcIjtcblxudmFyIG5hbWUkYiA9IFwiQGZpcmViYXNlL21lc3NhZ2luZ1wiO1xuXG52YXIgbmFtZSRhID0gXCJAZmlyZWJhc2UvbWVzc2FnaW5nLWNvbXBhdFwiO1xuXG52YXIgbmFtZSQ5ID0gXCJAZmlyZWJhc2UvcGVyZm9ybWFuY2VcIjtcblxudmFyIG5hbWUkOCA9IFwiQGZpcmViYXNlL3BlcmZvcm1hbmNlLWNvbXBhdFwiO1xuXG52YXIgbmFtZSQ3ID0gXCJAZmlyZWJhc2UvcmVtb3RlLWNvbmZpZ1wiO1xuXG52YXIgbmFtZSQ2ID0gXCJAZmlyZWJhc2UvcmVtb3RlLWNvbmZpZy1jb21wYXRcIjtcblxudmFyIG5hbWUkNSA9IFwiQGZpcmViYXNlL3N0b3JhZ2VcIjtcblxudmFyIG5hbWUkNCA9IFwiQGZpcmViYXNlL3N0b3JhZ2UtY29tcGF0XCI7XG5cbnZhciBuYW1lJDMgPSBcIkBmaXJlYmFzZS9maXJlc3RvcmVcIjtcblxudmFyIG5hbWUkMiA9IFwiQGZpcmViYXNlL3ZlcnRleGFpLXByZXZpZXdcIjtcblxudmFyIG5hbWUkMSA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZS1jb21wYXRcIjtcblxudmFyIG5hbWUgPSBcImZpcmViYXNlXCI7XG52YXIgdmVyc2lvbiA9IFwiMTAuMTIuM1wiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX2EkMTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGFwcCBuYW1lXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxudmFyIERFRkFVTFRfRU5UUllfTkFNRSA9ICdbREVGQVVMVF0nO1xyXG52YXIgUExBVEZPUk1fTE9HX1NUUklORyA9IChfYSQxID0ge30sXHJcbiAgICBfYSQxW25hbWUkcF0gPSAnZmlyZS1jb3JlJyxcclxuICAgIF9hJDFbbmFtZSRvXSA9ICdmaXJlLWNvcmUtY29tcGF0JyxcclxuICAgIF9hJDFbbmFtZSRtXSA9ICdmaXJlLWFuYWx5dGljcycsXHJcbiAgICBfYSQxW25hbWUkbl0gPSAnZmlyZS1hbmFseXRpY3MtY29tcGF0JyxcclxuICAgIF9hJDFbbmFtZSRrXSA9ICdmaXJlLWFwcC1jaGVjaycsXHJcbiAgICBfYSQxW25hbWUkbF0gPSAnZmlyZS1hcHAtY2hlY2stY29tcGF0JyxcclxuICAgIF9hJDFbbmFtZSRqXSA9ICdmaXJlLWF1dGgnLFxyXG4gICAgX2EkMVtuYW1lJGldID0gJ2ZpcmUtYXV0aC1jb21wYXQnLFxyXG4gICAgX2EkMVtuYW1lJGhdID0gJ2ZpcmUtcnRkYicsXHJcbiAgICBfYSQxW25hbWUkZ10gPSAnZmlyZS1ydGRiLWNvbXBhdCcsXHJcbiAgICBfYSQxW25hbWUkZl0gPSAnZmlyZS1mbicsXHJcbiAgICBfYSQxW25hbWUkZV0gPSAnZmlyZS1mbi1jb21wYXQnLFxyXG4gICAgX2EkMVtuYW1lJGRdID0gJ2ZpcmUtaWlkJyxcclxuICAgIF9hJDFbbmFtZSRjXSA9ICdmaXJlLWlpZC1jb21wYXQnLFxyXG4gICAgX2EkMVtuYW1lJGJdID0gJ2ZpcmUtZmNtJyxcclxuICAgIF9hJDFbbmFtZSRhXSA9ICdmaXJlLWZjbS1jb21wYXQnLFxyXG4gICAgX2EkMVtuYW1lJDldID0gJ2ZpcmUtcGVyZicsXHJcbiAgICBfYSQxW25hbWUkOF0gPSAnZmlyZS1wZXJmLWNvbXBhdCcsXHJcbiAgICBfYSQxW25hbWUkN10gPSAnZmlyZS1yYycsXHJcbiAgICBfYSQxW25hbWUkNl0gPSAnZmlyZS1yYy1jb21wYXQnLFxyXG4gICAgX2EkMVtuYW1lJDVdID0gJ2ZpcmUtZ2NzJyxcclxuICAgIF9hJDFbbmFtZSQ0XSA9ICdmaXJlLWdjcy1jb21wYXQnLFxyXG4gICAgX2EkMVtuYW1lJDNdID0gJ2ZpcmUtZnN0JyxcclxuICAgIF9hJDFbbmFtZSQxXSA9ICdmaXJlLWZzdC1jb21wYXQnLFxyXG4gICAgX2EkMVtuYW1lJDJdID0gJ2ZpcmUtdmVydGV4JyxcclxuICAgIF9hJDFbJ2ZpcmUtanMnXSA9ICdmaXJlLWpzJyxcclxuICAgIF9hJDFbbmFtZV0gPSAnZmlyZS1qcy1hbGwnLFxyXG4gICAgX2EkMSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbnZhciBfYXBwcyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxudmFyIF9zZXJ2ZXJBcHBzID0gbmV3IE1hcCgpO1xyXG4vKipcclxuICogUmVnaXN0ZXJlZCBjb21wb25lbnRzLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbnZhciBfY29tcG9uZW50cyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIEBwYXJhbSBjb21wb25lbnQgLSB0aGUgY29tcG9uZW50IGJlaW5nIGFkZGVkIHRvIHRoaXMgYXBwJ3MgY29udGFpbmVyXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2FkZENvbXBvbmVudChhcHAsIGNvbXBvbmVudCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhcHAuY29udGFpbmVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2dnZXIuZGVidWcoXCJDb21wb25lbnQgXCIuY29uY2F0KGNvbXBvbmVudC5uYW1lLCBcIiBmYWlsZWQgdG8gcmVnaXN0ZXIgd2l0aCBGaXJlYmFzZUFwcCBcIikuY29uY2F0KGFwcC5uYW1lKSwgZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2FkZE9yT3ZlcndyaXRlQ29tcG9uZW50KGFwcCwgY29tcG9uZW50KSB7XHJcbiAgICBhcHAuY29udGFpbmVyLmFkZE9yT3ZlcndyaXRlQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBjb21wb25lbnQgLSB0aGUgY29tcG9uZW50IHRvIHJlZ2lzdGVyXHJcbiAqIEByZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBjb21wb25lbnQgaXMgcmVnaXN0ZXJlZCBzdWNjZXNzZnVsbHlcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcclxuICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50Lm5hbWU7XHJcbiAgICBpZiAoX2NvbXBvbmVudHMuaGFzKGNvbXBvbmVudE5hbWUpKSB7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiVGhlcmUgd2VyZSBtdWx0aXBsZSBhdHRlbXB0cyB0byByZWdpc3RlciBjb21wb25lbnQgXCIuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiLlwiKSk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgX2NvbXBvbmVudHMuc2V0KGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIGFkZCB0aGUgY29tcG9uZW50IHRvIGV4aXN0aW5nIGFwcCBpbnN0YW5jZXNcclxuICAgICAgICBmb3IgKHZhciBfYyA9IHRzbGliLl9fdmFsdWVzKF9hcHBzLnZhbHVlcygpKSwgX2QgPSBfYy5uZXh0KCk7ICFfZC5kb25lOyBfZCA9IF9jLm5leHQoKSkge1xyXG4gICAgICAgICAgICB2YXIgYXBwID0gX2QudmFsdWU7XHJcbiAgICAgICAgICAgIF9hZGRDb21wb25lbnQoYXBwLCBjb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoX2QgJiYgIV9kLmRvbmUgJiYgKF9hID0gX2MucmV0dXJuKSkgX2EuY2FsbChfYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2UgPSB0c2xpYi5fX3ZhbHVlcyhfc2VydmVyQXBwcy52YWx1ZXMoKSksIF9mID0gX2UubmV4dCgpOyAhX2YuZG9uZTsgX2YgPSBfZS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIHNlcnZlckFwcCA9IF9mLnZhbHVlO1xyXG4gICAgICAgICAgICBfYWRkQ29tcG9uZW50KHNlcnZlckFwcCwgY29tcG9uZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKF9mICYmICFfZi5kb25lICYmIChfYiA9IF9lLnJldHVybikpIF9iLmNhbGwoX2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXHJcbiAqIEBwYXJhbSBuYW1lIC0gc2VydmljZSBuYW1lXHJcbiAqXHJcbiAqIEByZXR1cm5zIHRoZSBwcm92aWRlciBmb3IgdGhlIHNlcnZpY2Ugd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9nZXRQcm92aWRlcihhcHAsIG5hbWUpIHtcclxuICAgIHZhciBoZWFydGJlYXRDb250cm9sbGVyID0gYXBwLmNvbnRhaW5lclxyXG4gICAgICAgIC5nZXRQcm92aWRlcignaGVhcnRiZWF0JylcclxuICAgICAgICAuZ2V0SW1tZWRpYXRlKHsgb3B0aW9uYWw6IHRydWUgfSk7XHJcbiAgICBpZiAoaGVhcnRiZWF0Q29udHJvbGxlcikge1xyXG4gICAgICAgIHZvaWQgaGVhcnRiZWF0Q29udHJvbGxlci50cmlnZ2VySGVhcnRiZWF0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwLmNvbnRhaW5lci5nZXRQcm92aWRlcihuYW1lKTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXHJcbiAqIEBwYXJhbSBuYW1lIC0gc2VydmljZSBuYW1lXHJcbiAqIEBwYXJhbSBpbnN0YW5jZUlkZW50aWZpZXIgLSBzZXJ2aWNlIGluc3RhbmNlIGlkZW50aWZpZXIgaW4gY2FzZSB0aGUgc2VydmljZSBzdXBwb3J0cyBtdWx0aXBsZSBpbnN0YW5jZXNcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfcmVtb3ZlU2VydmljZUluc3RhbmNlKGFwcCwgbmFtZSwgaW5zdGFuY2VJZGVudGlmaWVyKSB7XHJcbiAgICBpZiAoaW5zdGFuY2VJZGVudGlmaWVyID09PSB2b2lkIDApIHsgaW5zdGFuY2VJZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FOyB9XHJcbiAgICBfZ2V0UHJvdmlkZXIoYXBwLCBuYW1lKS5jbGVhckluc3RhbmNlKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmogLSBhbiBvYmplY3Qgb2YgdHlwZSBGaXJlYmFzZUFwcCBvciBGaXJlYmFzZU9wdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGUgb2JqZWN0IGlzIG9mIHR5cGUgRmlyZWJhc2VBcHAuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2lzRmlyZWJhc2VBcHAob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqLm9wdGlvbnMgIT09IHVuZGVmaW5lZDtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIG9iaiAtIGFuIG9iamVjdCBvZiB0eXBlIEZpcmViYXNlQXBwLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBvYmplY3QgaXMgb2YgdHlwZSBGaXJlYmFzZVNlcnZlckFwcEltcGwuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2lzRmlyZWJhc2VTZXJ2ZXJBcHAob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqLnNldHRpbmdzICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuLyoqXHJcbiAqIFRlc3Qgb25seVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9jbGVhckNvbXBvbmVudHMoKSB7XHJcbiAgICBfY29tcG9uZW50cy5jbGVhcigpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfYTtcclxudmFyIEVSUk9SUyA9IChfYSA9IHt9LFxyXG4gICAgX2FbXCJuby1hcHBcIiAvKiBBcHBFcnJvci5OT19BUFAgKi9dID0gXCJObyBGaXJlYmFzZSBBcHAgJ3skYXBwTmFtZX0nIGhhcyBiZWVuIGNyZWF0ZWQgLSBcIiArXHJcbiAgICAgICAgJ2NhbGwgaW5pdGlhbGl6ZUFwcCgpIGZpcnN0JyxcclxuICAgIF9hW1wiYmFkLWFwcC1uYW1lXCIgLyogQXBwRXJyb3IuQkFEX0FQUF9OQU1FICovXSA9IFwiSWxsZWdhbCBBcHAgbmFtZTogJ3skYXBwTmFtZX0nXCIsXHJcbiAgICBfYVtcImR1cGxpY2F0ZS1hcHBcIiAvKiBBcHBFcnJvci5EVVBMSUNBVEVfQVBQICovXSA9IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGV4aXN0cyB3aXRoIGRpZmZlcmVudCBvcHRpb25zIG9yIGNvbmZpZ1wiLFxyXG4gICAgX2FbXCJhcHAtZGVsZXRlZFwiIC8qIEFwcEVycm9yLkFQUF9ERUxFVEVEICovXSA9IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGRlbGV0ZWRcIixcclxuICAgIF9hW1wic2VydmVyLWFwcC1kZWxldGVkXCIgLyogQXBwRXJyb3IuU0VSVkVSX0FQUF9ERUxFVEVEICovXSA9ICdGaXJlYmFzZSBTZXJ2ZXIgQXBwIGhhcyBiZWVuIGRlbGV0ZWQnLFxyXG4gICAgX2FbXCJuby1vcHRpb25zXCIgLyogQXBwRXJyb3IuTk9fT1BUSU9OUyAqL10gPSAnTmVlZCB0byBwcm92aWRlIG9wdGlvbnMsIHdoZW4gbm90IGJlaW5nIGRlcGxveWVkIHRvIGhvc3RpbmcgdmlhIHNvdXJjZS4nLFxyXG4gICAgX2FbXCJpbnZhbGlkLWFwcC1hcmd1bWVudFwiIC8qIEFwcEVycm9yLklOVkFMSURfQVBQX0FSR1VNRU5UICovXSA9ICdmaXJlYmFzZS57JGFwcE5hbWV9KCkgdGFrZXMgZWl0aGVyIG5vIGFyZ3VtZW50IG9yIGEgJyArXHJcbiAgICAgICAgJ0ZpcmViYXNlIEFwcCBpbnN0YW5jZS4nLFxyXG4gICAgX2FbXCJpbnZhbGlkLWxvZy1hcmd1bWVudFwiIC8qIEFwcEVycm9yLklOVkFMSURfTE9HX0FSR1VNRU5UICovXSA9ICdGaXJzdCBhcmd1bWVudCB0byBgb25Mb2dgIG11c3QgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLicsXHJcbiAgICBfYVtcImlkYi1vcGVuXCIgLyogQXBwRXJyb3IuSURCX09QRU4gKi9dID0gJ0Vycm9yIHRocm93biB3aGVuIG9wZW5pbmcgSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJyxcclxuICAgIF9hW1wiaWRiLWdldFwiIC8qIEFwcEVycm9yLklEQl9HRVQgKi9dID0gJ0Vycm9yIHRocm93biB3aGVuIHJlYWRpbmcgZnJvbSBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxyXG4gICAgX2FbXCJpZGItc2V0XCIgLyogQXBwRXJyb3IuSURCX1dSSVRFICovXSA9ICdFcnJvciB0aHJvd24gd2hlbiB3cml0aW5nIHRvIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LicsXHJcbiAgICBfYVtcImlkYi1kZWxldGVcIiAvKiBBcHBFcnJvci5JREJfREVMRVRFICovXSA9ICdFcnJvciB0aHJvd24gd2hlbiBkZWxldGluZyBmcm9tIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LicsXHJcbiAgICBfYVtcImZpbmFsaXphdGlvbi1yZWdpc3RyeS1ub3Qtc3VwcG9ydGVkXCIgLyogQXBwRXJyb3IuRklOQUxJWkFUSU9OX1JFR0lTVFJZX05PVF9TVVBQT1JURUQgKi9dID0gJ0ZpcmViYXNlU2VydmVyQXBwIGRlbGV0ZU9uRGVyZWYgZmllbGQgZGVmaW5lZCBidXQgdGhlIEpTIHJ1bnRpbWUgZG9lcyBub3Qgc3VwcG9ydCBGaW5hbGl6YXRpb25SZWdpc3RyeS4nLFxyXG4gICAgX2FbXCJpbnZhbGlkLXNlcnZlci1hcHAtZW52aXJvbm1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX1NFUlZFUl9BUFBfRU5WSVJPTk1FTlQgKi9dID0gJ0ZpcmViYXNlU2VydmVyQXBwIGlzIG5vdCBmb3IgdXNlIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzLicsXHJcbiAgICBfYSk7XHJcbnZhciBFUlJPUl9GQUNUT1JZID0gbmV3IHV0aWwuRXJyb3JGYWN0b3J5KCdhcHAnLCAnRmlyZWJhc2UnLCBFUlJPUlMpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRmlyZWJhc2VBcHBJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlyZWJhc2VBcHBJbXBsKG9wdGlvbnMsIGNvbmZpZywgY29udGFpbmVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9pc0RlbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gdHNsaWIuX19hc3NpZ24oe30sIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHRzbGliLl9fYXNzaWduKHt9LCBjb25maWcpO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBjb25maWcubmFtZTtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPVxyXG4gICAgICAgICAgICBjb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDb21wb25lbnQobmV3IGNvbXBvbmVudC5Db21wb25lbnQoJ2FwcCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzOyB9LCBcIlBVQkxJQ1wiIC8qIENvbXBvbmVudFR5cGUuUFVCTElDICovKSk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZSwgXCJhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwibmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwib3B0aW9uc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwiY29uZmlnXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLCBcImNvbnRhaW5lclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwiaXNEZWxldGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRGVsZXRlZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc0RlbGV0ZWQgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gRXJyb3IgaWYgdGhlIEFwcCBoYXMgYWxyZWFkeSBiZWVuIGRlbGV0ZWQgLVxyXG4gICAgICogdXNlIGJlZm9yZSBwZXJmb3JtaW5nIEFQSSBhY3Rpb25zIG9uIHRoZSBBcHAuXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuY2hlY2tEZXN0cm95ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZWxldGVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLWRlbGV0ZWRcIiAvKiBBcHBFcnJvci5BUFBfREVMRVRFRCAqLywgeyBhcHBOYW1lOiB0aGlzLl9uYW1lIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlyZWJhc2VBcHBJbXBsO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRmlyZWJhc2VTZXJ2ZXJBcHBJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWIuX19leHRlbmRzKEZpcmViYXNlU2VydmVyQXBwSW1wbCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZpcmViYXNlU2VydmVyQXBwSW1wbChvcHRpb25zLCBzZXJ2ZXJDb25maWcsIG5hbWUsIGNvbnRhaW5lcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gQnVpbGQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIGZvciB0aGUgRmlyZWJhc2VBcHBJbXBsIGJhc2UgY2xhc3MuXHJcbiAgICAgICAgdmFyIGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9IHNlcnZlckNvbmZpZy5hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICA/IHNlcnZlckNvbmZpZy5hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWRcclxuICAgICAgICAgICAgOiBmYWxzZTtcclxuICAgICAgICAvLyBDcmVhdGUgdGhlIEZpcmViYXNlQXBwU2V0dGluZ3Mgb2JqZWN0IGZvciB0aGUgRmlyZWJhc2VBcHBJbXAgY29uc3RydWN0b3IuXHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IHtcclxuICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkOiBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWRcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChvcHRpb25zLmFwaUtleSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIENvbnN0cnVjdCB0aGUgcGFyZW50IEZpcmViYXNlQXBwSW1wIG9iamVjdC5cclxuICAgICAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zLCBjb25maWcsIGNvbnRhaW5lcikgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBhcHBJbXBsID0gb3B0aW9ucztcclxuICAgICAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBhcHBJbXBsLm9wdGlvbnMsIGNvbmZpZywgY29udGFpbmVyKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBOb3cgY29uc3RydWN0IHRoZSBkYXRhIGZvciB0aGUgRmlyZWJhc2VTZXJ2ZXJBcHBJbXBsLlxyXG4gICAgICAgIF90aGlzLl9zZXJ2ZXJDb25maWcgPSB0c2xpYi5fX2Fzc2lnbih7IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDogYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIH0sIHNlcnZlckNvbmZpZyk7XHJcbiAgICAgICAgX3RoaXMuX2ZpbmFsaXphdGlvblJlZ2lzdHJ5ID0gbnVsbDtcclxuICAgICAgICBpZiAodHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBfdGhpcy5fZmluYWxpemF0aW9uUmVnaXN0cnkgPSBuZXcgRmluYWxpemF0aW9uUmVnaXN0cnkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuYXV0b21hdGljQ2xlYW51cCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgX3RoaXMuX3JlZkNvdW50ID0gMDtcclxuICAgICAgICBfdGhpcy5pbmNSZWZDb3VudChfdGhpcy5fc2VydmVyQ29uZmlnLnJlbGVhc2VPbkRlcmVmKTtcclxuICAgICAgICAvLyBEbyBub3QgcmV0YWluIGEgaGFyZCByZWZlcmVuY2UgdG8gdGhlIGRyZWYgb2JqZWN0LCBvdGhlcndpc2UgdGhlIEZpbmFsaXphdGlvblJlZ2lzcnlcclxuICAgICAgICAvLyB3aWxsIG5ldmVyIHRyaWdnZXIuXHJcbiAgICAgICAgX3RoaXMuX3NlcnZlckNvbmZpZy5yZWxlYXNlT25EZXJlZiA9IHVuZGVmaW5lZDtcclxuICAgICAgICBzZXJ2ZXJDb25maWcucmVsZWFzZU9uRGVyZWYgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUkcCwgdmVyc2lvbiQxLCAnc2VydmVyYXBwJyk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgRmlyZWJhc2VTZXJ2ZXJBcHBJbXBsLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VTZXJ2ZXJBcHBJbXBsLnByb3RvdHlwZSwgXCJyZWZDb3VudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWZDb3VudDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvLyBJbmNyZW1lbnQgdGhlIHJlZmVyZW5jZSBjb3VudCBvZiB0aGlzIHNlcnZlciBhcHAuIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCwgcmVnaXN0ZXIgaXRcclxuICAgIC8vIHdpdGggdGhlIGZpbmFsaXphdGlvbiByZWdpc3RyeS5cclxuICAgIEZpcmViYXNlU2VydmVyQXBwSW1wbC5wcm90b3R5cGUuaW5jUmVmQ291bnQgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZWxldGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVmQ291bnQrKztcclxuICAgICAgICBpZiAob2JqICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fZmluYWxpemF0aW9uUmVnaXN0cnkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZmluYWxpemF0aW9uUmVnaXN0cnkucmVnaXN0ZXIob2JqLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gRGVjcmVtZW50IHRoZSByZWZlcmVuY2UgY291bnQuXHJcbiAgICBGaXJlYmFzZVNlcnZlckFwcEltcGwucHJvdG90eXBlLmRlY1JlZkNvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGVsZXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIC0tdGhpcy5fcmVmQ291bnQ7XHJcbiAgICB9O1xyXG4gICAgLy8gSW52b2tlZCBieSB0aGUgRmluYWxpemF0aW9uUmVnaXN0cnkgY2FsbGJhY2sgdG8gbm90ZSB0aGF0IHRoaXMgYXBwIHNob3VsZCBnbyB0aHJvdWdoIGl0c1xyXG4gICAgLy8gcmVmZXJlbmNlIGNvdW50cyBhbmQgZGVsZXRlIGl0c2VsZiBpZiBubyByZWZlcmVuY2UgY291bnQgcmVtYWluLiBUaGUgY29vcmRpbmF0aW5nIGxvZ2ljIHRoYXRcclxuICAgIC8vIGhhbmRsZXMgdGhpcyBpcyBpbiBkZWxldGVBcHAoLi4uKS5cclxuICAgIEZpcmViYXNlU2VydmVyQXBwSW1wbC5wcm90b3R5cGUuYXV0b21hdGljQ2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2b2lkIGRlbGV0ZUFwcCh0aGlzKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VTZXJ2ZXJBcHBJbXBsLnByb3RvdHlwZSwgXCJzZXR0aW5nc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlcnZlckNvbmZpZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBhbiBFcnJvciBpZiB0aGUgQXBwIGhhcyBhbHJlYWR5IGJlZW4gZGVsZXRlZCAtXHJcbiAgICAgKiB1c2UgYmVmb3JlIHBlcmZvcm1pbmcgQVBJIGFjdGlvbnMgb24gdGhlIEFwcC5cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VTZXJ2ZXJBcHBJbXBsLnByb3RvdHlwZS5jaGVja0Rlc3Ryb3llZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJzZXJ2ZXItYXBwLWRlbGV0ZWRcIiAvKiBBcHBFcnJvci5TRVJWRVJfQVBQX0RFTEVURUQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlyZWJhc2VTZXJ2ZXJBcHBJbXBsO1xyXG59KEZpcmViYXNlQXBwSW1wbCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGN1cnJlbnQgU0RLIHZlcnNpb24uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbnZhciBTREtfVkVSU0lPTiA9IHZlcnNpb247XHJcbmZ1bmN0aW9uIGluaXRpYWxpemVBcHAoX29wdGlvbnMsIHJhd0NvbmZpZykge1xyXG4gICAgdmFyIGVfMSwgX2E7XHJcbiAgICBpZiAocmF3Q29uZmlnID09PSB2b2lkIDApIHsgcmF3Q29uZmlnID0ge307IH1cclxuICAgIHZhciBvcHRpb25zID0gX29wdGlvbnM7XHJcbiAgICBpZiAodHlwZW9mIHJhd0NvbmZpZyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICB2YXIgbmFtZV8xID0gcmF3Q29uZmlnO1xyXG4gICAgICAgIHJhd0NvbmZpZyA9IHsgbmFtZTogbmFtZV8xIH07XHJcbiAgICB9XHJcbiAgICB2YXIgY29uZmlnID0gdHNsaWIuX19hc3NpZ24oeyBuYW1lOiBERUZBVUxUX0VOVFJZX05BTUUsIGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDogZmFsc2UgfSwgcmF3Q29uZmlnKTtcclxuICAgIHZhciBuYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJiYWQtYXBwLW5hbWVcIiAvKiBBcHBFcnJvci5CQURfQVBQX05BTUUgKi8sIHtcclxuICAgICAgICAgICAgYXBwTmFtZTogU3RyaW5nKG5hbWUpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0gdXRpbC5nZXREZWZhdWx0QXBwQ29uZmlnKCkpO1xyXG4gICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1vcHRpb25zXCIgLyogQXBwRXJyb3IuTk9fT1BUSU9OUyAqLyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZXhpc3RpbmdBcHAgPSBfYXBwcy5nZXQobmFtZSk7XHJcbiAgICBpZiAoZXhpc3RpbmdBcHApIHtcclxuICAgICAgICAvLyByZXR1cm4gdGhlIGV4aXN0aW5nIGFwcCBpZiBvcHRpb25zIGFuZCBjb25maWcgZGVlcCBlcXVhbCB0aGUgb25lcyBpbiB0aGUgZXhpc3RpbmcgYXBwLlxyXG4gICAgICAgIGlmICh1dGlsLmRlZXBFcXVhbChvcHRpb25zLCBleGlzdGluZ0FwcC5vcHRpb25zKSAmJlxyXG4gICAgICAgICAgICB1dGlsLmRlZXBFcXVhbChjb25maWcsIGV4aXN0aW5nQXBwLmNvbmZpZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQXBwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJkdXBsaWNhdGUtYXBwXCIgLyogQXBwRXJyb3IuRFVQTElDQVRFX0FQUCAqLywgeyBhcHBOYW1lOiBuYW1lIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBjb250YWluZXIgPSBuZXcgY29tcG9uZW50LkNvbXBvbmVudENvbnRhaW5lcihuYW1lKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2IgPSB0c2xpYi5fX3ZhbHVlcyhfY29tcG9uZW50cy52YWx1ZXMoKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCQxID0gX2MudmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50JDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHZhciBuZXdBcHAgPSBuZXcgRmlyZWJhc2VBcHBJbXBsKG9wdGlvbnMsIGNvbmZpZywgY29udGFpbmVyKTtcclxuICAgIF9hcHBzLnNldChuYW1lLCBuZXdBcHApO1xyXG4gICAgcmV0dXJuIG5ld0FwcDtcclxufVxyXG5mdW5jdGlvbiBpbml0aWFsaXplU2VydmVyQXBwKF9vcHRpb25zLCBfc2VydmVyQXBwQ29uZmlnKSB7XHJcbiAgICB2YXIgZV8yLCBfYTtcclxuICAgIGlmICh1dGlsLmlzQnJvd3NlcigpICYmICF1dGlsLmlzV2ViV29ya2VyKCkpIHtcclxuICAgICAgICAvLyBGaXJlYmFzZVNlcnZlckFwcCBpc24ndCBkZXNpZ25lZCB0byBiZSBydW4gaW4gYnJvd3NlcnMuXHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnZhbGlkLXNlcnZlci1hcHAtZW52aXJvbm1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX1NFUlZFUl9BUFBfRU5WSVJPTk1FTlQgKi8pO1xyXG4gICAgfVxyXG4gICAgaWYgKF9zZXJ2ZXJBcHBDb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBfc2VydmVyQXBwQ29uZmlnLmF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdmFyIGFwcE9wdGlvbnM7XHJcbiAgICBpZiAoX2lzRmlyZWJhc2VBcHAoX29wdGlvbnMpKSB7XHJcbiAgICAgICAgYXBwT3B0aW9ucyA9IF9vcHRpb25zLm9wdGlvbnM7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhcHBPcHRpb25zID0gX29wdGlvbnM7XHJcbiAgICB9XHJcbiAgICAvLyBCdWlsZCBhbiBhcHAgbmFtZSBiYXNlZCBvbiBhIGhhc2ggb2YgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cclxuICAgIHZhciBuYW1lT2JqID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIF9zZXJ2ZXJBcHBDb25maWcpLCBhcHBPcHRpb25zKTtcclxuICAgIC8vIEhvd2V2ZXIsIERvIG5vdCBtYW5nbGUgdGhlIG5hbWUgYmFzZWQgb24gcmVsZWFzZU9uRGVyZWYsIHNpbmNlIGl0IHdpbGwgdmFyeSBiZXR3ZWVuIHRoZVxyXG4gICAgLy8gY29uc3RydWN0aW9uIG9mIEZpcmViYXNlU2VydmVyQXBwIGluc3RhbmNlcy4gRm9yIGV4YW1wbGUsIGlmIHRoZSBvYmplY3QgaXMgdGhlIHJlcXVlc3QgaGVhZGVycy5cclxuICAgIGlmIChuYW1lT2JqLnJlbGVhc2VPbkRlcmVmICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBkZWxldGUgbmFtZU9iai5yZWxlYXNlT25EZXJlZjtcclxuICAgIH1cclxuICAgIHZhciBoYXNoQ29kZSA9IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZChzKSwgZmFsc2UpLnJlZHVjZShmdW5jdGlvbiAoaGFzaCwgYykgeyByZXR1cm4gKE1hdGguaW11bCgzMSwgaGFzaCkgKyBjLmNoYXJDb2RlQXQoMCkpIHwgMDsgfSwgMCk7XHJcbiAgICB9O1xyXG4gICAgaWYgKF9zZXJ2ZXJBcHBDb25maWcucmVsZWFzZU9uRGVyZWYgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZmluYWxpemF0aW9uLXJlZ2lzdHJ5LW5vdC1zdXBwb3J0ZWRcIiAvKiBBcHBFcnJvci5GSU5BTElaQVRJT05fUkVHSVNUUllfTk9UX1NVUFBPUlRFRCAqLywge30pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBuYW1lU3RyaW5nID0gJycgKyBoYXNoQ29kZShKU09OLnN0cmluZ2lmeShuYW1lT2JqKSk7XHJcbiAgICB2YXIgZXhpc3RpbmdBcHAgPSBfc2VydmVyQXBwcy5nZXQobmFtZVN0cmluZyk7XHJcbiAgICBpZiAoZXhpc3RpbmdBcHApIHtcclxuICAgICAgICBleGlzdGluZ0FwcC5pbmNSZWZDb3VudChfc2VydmVyQXBwQ29uZmlnLnJlbGVhc2VPbkRlcmVmKTtcclxuICAgICAgICByZXR1cm4gZXhpc3RpbmdBcHA7XHJcbiAgICB9XHJcbiAgICB2YXIgY29udGFpbmVyID0gbmV3IGNvbXBvbmVudC5Db21wb25lbnRDb250YWluZXIobmFtZVN0cmluZyk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGZvciAodmFyIF9iID0gdHNsaWIuX192YWx1ZXMoX2NvbXBvbmVudHMudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQkMSA9IF9jLnZhbHVlO1xyXG4gICAgICAgICAgICBjb250YWluZXIuYWRkQ29tcG9uZW50KGNvbXBvbmVudCQxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICB2YXIgbmV3QXBwID0gbmV3IEZpcmViYXNlU2VydmVyQXBwSW1wbChhcHBPcHRpb25zLCBfc2VydmVyQXBwQ29uZmlnLCBuYW1lU3RyaW5nLCBjb250YWluZXIpO1xyXG4gICAgX3NlcnZlckFwcHMuc2V0KG5hbWVTdHJpbmcsIG5ld0FwcCk7XHJcbiAgICByZXR1cm4gbmV3QXBwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgYSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gaW5zdGFuY2UuXHJcbiAqXHJcbiAqIFdoZW4gY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCB0aGUgZGVmYXVsdCBhcHAgaXMgcmV0dXJuZWQuIFdoZW4gYW4gYXBwIG5hbWVcclxuICogaXMgcHJvdmlkZWQsIHRoZSBhcHAgY29ycmVzcG9uZGluZyB0byB0aGF0IG5hbWUgaXMgcmV0dXJuZWQuXHJcbiAqXHJcbiAqIEFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgdGhlIGFwcCBiZWluZyByZXRyaWV2ZWQgaGFzIG5vdCB5ZXQgYmVlblxyXG4gKiBpbml0aWFsaXplZC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBSZXR1cm4gdGhlIGRlZmF1bHQgYXBwXHJcbiAqIGNvbnN0IGFwcCA9IGdldEFwcCgpO1xyXG4gKiBgYGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBSZXR1cm4gYSBuYW1lZCBhcHBcclxuICogY29uc3Qgb3RoZXJBcHAgPSBnZXRBcHAoXCJvdGhlckFwcFwiKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBuYW1lIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgYXBwIHRvIHJldHVybi4gSWYgbm8gbmFtZSBpc1xyXG4gKiAgIHByb3ZpZGVkLCB0aGUgZGVmYXVsdCBpcyBgXCJbREVGQVVMVF1cImAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIFRoZSBhcHAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdmlkZWQgYXBwIG5hbWUuXHJcbiAqICAgSWYgbm8gYXBwIG5hbWUgaXMgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGFwcCBpcyByZXR1cm5lZC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QXBwKG5hbWUpIHtcclxuICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgdmFyIGFwcCA9IF9hcHBzLmdldChuYW1lKTtcclxuICAgIGlmICghYXBwICYmIG5hbWUgPT09IERFRkFVTFRfRU5UUllfTkFNRSAmJiB1dGlsLmdldERlZmF1bHRBcHBDb25maWcoKSkge1xyXG4gICAgICAgIHJldHVybiBpbml0aWFsaXplQXBwKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcCkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBwXCIgLyogQXBwRXJyb3IuTk9fQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwO1xyXG59XHJcbi8qKlxyXG4gKiBBIChyZWFkLW9ubHkpIGFycmF5IG9mIGFsbCBpbml0aWFsaXplZCBhcHBzLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBcHBzKCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oX2FwcHMudmFsdWVzKCkpO1xyXG59XHJcbi8qKlxyXG4gKiBSZW5kZXJzIHRoaXMgYXBwIHVudXNhYmxlIGFuZCBmcmVlcyB0aGUgcmVzb3VyY2VzIG9mIGFsbCBhc3NvY2lhdGVkXHJcbiAqIHNlcnZpY2VzLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGRlbGV0ZUFwcChhcHApXHJcbiAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhcIkFwcCBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiKTtcclxuICogICB9KVxyXG4gKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gKiAgICAgY29uc29sZS5sb2coXCJFcnJvciBkZWxldGluZyBhcHA6XCIsIGVycm9yKTtcclxuICogICB9KTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGRlbGV0ZUFwcChhcHApIHtcclxuICAgIHJldHVybiB0c2xpYi5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2xlYW51cFByb3ZpZGVycywgbmFtZSwgZmlyZWJhc2VTZXJ2ZXJBcHA7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cFByb3ZpZGVycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBhcHAubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2FwcHMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFudXBQcm92aWRlcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYXBwcy5kZWxldGUobmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9zZXJ2ZXJBcHBzLmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZVNlcnZlckFwcCA9IGFwcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcmViYXNlU2VydmVyQXBwLmRlY1JlZkNvdW50KCkgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NlcnZlckFwcHMuZGVsZXRlKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW51cFByb3ZpZGVycyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjbGVhbnVwUHJvdmlkZXJzKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChhcHAuY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0UHJvdmlkZXJzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHByb3ZpZGVyKSB7IHJldHVybiBwcm92aWRlci5kZWxldGUoKTsgfSkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLmlzRGVsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYSBsaWJyYXJ5J3MgbmFtZSBhbmQgdmVyc2lvbiBmb3IgcGxhdGZvcm0gbG9nZ2luZyBwdXJwb3Nlcy5cclxuICogQHBhcmFtIGxpYnJhcnkgLSBOYW1lIG9mIDFwIG9yIDNwIGxpYnJhcnkgKGUuZy4gZmlyZXN0b3JlLCBhbmd1bGFyZmlyZSlcclxuICogQHBhcmFtIHZlcnNpb24gLSBDdXJyZW50IHZlcnNpb24gb2YgdGhhdCBsaWJyYXJ5LlxyXG4gKiBAcGFyYW0gdmFyaWFudCAtIEJ1bmRsZSB2YXJpYW50LCBlLmcuLCBub2RlLCBybiwgZXRjLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlclZlcnNpb24obGlicmFyeUtleU9yTmFtZSwgdmVyc2lvbiwgdmFyaWFudCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgLy8gVE9ETzogV2UgY2FuIHVzZSB0aGlzIGNoZWNrIHRvIHdoaXRlbGlzdCBzdHJpbmdzIHdoZW4vaWYgd2Ugc2V0IHVwXHJcbiAgICAvLyBhIGdvb2Qgd2hpdGVsaXN0IHN5c3RlbS5cclxuICAgIHZhciBsaWJyYXJ5ID0gKF9hID0gUExBVEZPUk1fTE9HX1NUUklOR1tsaWJyYXJ5S2V5T3JOYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbGlicmFyeUtleU9yTmFtZTtcclxuICAgIGlmICh2YXJpYW50KSB7XHJcbiAgICAgICAgbGlicmFyeSArPSBcIi1cIi5jb25jYXQodmFyaWFudCk7XHJcbiAgICB9XHJcbiAgICB2YXIgbGlicmFyeU1pc21hdGNoID0gbGlicmFyeS5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgdmFyIHZlcnNpb25NaXNtYXRjaCA9IHZlcnNpb24ubWF0Y2goL1xcc3xcXC8vKTtcclxuICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2ggfHwgdmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgdmFyIHdhcm5pbmcgPSBbXHJcbiAgICAgICAgICAgIFwiVW5hYmxlIHRvIHJlZ2lzdGVyIGxpYnJhcnkgXFxcIlwiLmNvbmNhdChsaWJyYXJ5LCBcIlxcXCIgd2l0aCB2ZXJzaW9uIFxcXCJcIikuY29uY2F0KHZlcnNpb24sIFwiXFxcIjpcIilcclxuICAgICAgICBdO1xyXG4gICAgICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgd2FybmluZy5wdXNoKFwibGlicmFyeSBuYW1lIFxcXCJcIi5jb25jYXQobGlicmFyeSwgXCJcXFwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcXFwiL1xcXCIpXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpYnJhcnlNaXNtYXRjaCAmJiB2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgd2FybmluZy5wdXNoKCdhbmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICB3YXJuaW5nLnB1c2goXCJ2ZXJzaW9uIG5hbWUgXFxcIlwiLmNvbmNhdCh2ZXJzaW9uLCBcIlxcXCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFxcXCIvXFxcIilcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2dnZXIud2Fybih3YXJuaW5nLmpvaW4oJyAnKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBjb21wb25lbnQuQ29tcG9uZW50KFwiXCIuY29uY2F0KGxpYnJhcnksIFwiLXZlcnNpb25cIiksIGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7IGxpYnJhcnk6IGxpYnJhcnksIHZlcnNpb246IHZlcnNpb24gfSk7IH0sIFwiVkVSU0lPTlwiIC8qIENvbXBvbmVudFR5cGUuVkVSU0lPTiAqLykpO1xyXG59XHJcbi8qKlxyXG4gKiBTZXRzIGxvZyBoYW5kbGVyIGZvciBhbGwgRmlyZWJhc2UgU0RLcy5cclxuICogQHBhcmFtIGxvZ0NhbGxiYWNrIC0gQW4gb3B0aW9uYWwgY3VzdG9tIGxvZyBoYW5kbGVyIHRoYXQgZXhlY3V0ZXMgdXNlciBjb2RlIHdoZW5ldmVyXHJcbiAqIHRoZSBGaXJlYmFzZSBTREsgbWFrZXMgYSBsb2dnaW5nIGNhbGwuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIG9uTG9nKGxvZ0NhbGxiYWNrLCBvcHRpb25zKSB7XHJcbiAgICBpZiAobG9nQ2FsbGJhY2sgIT09IG51bGwgJiYgdHlwZW9mIGxvZ0NhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnZhbGlkLWxvZy1hcmd1bWVudFwiIC8qIEFwcEVycm9yLklOVkFMSURfTE9HX0FSR1VNRU5UICovKTtcclxuICAgIH1cclxuICAgIGxvZ2dlciQxLnNldFVzZXJMb2dIYW5kbGVyKGxvZ0NhbGxiYWNrLCBvcHRpb25zKTtcclxufVxyXG4vKipcclxuICogU2V0cyBsb2cgbGV2ZWwgZm9yIGFsbCBGaXJlYmFzZSBTREtzLlxyXG4gKlxyXG4gKiBBbGwgb2YgdGhlIGxvZyB0eXBlcyBhYm92ZSB0aGUgY3VycmVudCBsb2cgbGV2ZWwgYXJlIGNhcHR1cmVkIChpLmUuIGlmXHJcbiAqIHlvdSBzZXQgdGhlIGxvZyBsZXZlbCB0byBgaW5mb2AsIGVycm9ycyBhcmUgbG9nZ2VkLCBidXQgYGRlYnVnYCBhbmRcclxuICogYHZlcmJvc2VgIGxvZ3MgYXJlIG5vdCkuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxvZ0xldmVsKSB7XHJcbiAgICBsb2dnZXIkMS5zZXRMb2dMZXZlbChsb2dMZXZlbCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIERCX05BTUUgPSAnZmlyZWJhc2UtaGVhcnRiZWF0LWRhdGFiYXNlJztcclxudmFyIERCX1ZFUlNJT04gPSAxO1xyXG52YXIgU1RPUkVfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtc3RvcmUnO1xyXG52YXIgZGJQcm9taXNlID0gbnVsbDtcclxuZnVuY3Rpb24gZ2V0RGJQcm9taXNlKCkge1xyXG4gICAgaWYgKCFkYlByb21pc2UpIHtcclxuICAgICAgICBkYlByb21pc2UgPSBpZGIub3BlbkRCKERCX05BTUUsIERCX1ZFUlNJT04sIHtcclxuICAgICAgICAgICAgdXBncmFkZTogZnVuY3Rpb24gKGRiLCBvbGRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB1c2UgJ2JyZWFrJyBpbiB0aGlzIHN3aXRjaCBzdGF0ZW1lbnQsIHRoZSBmYWxsLXRocm91Z2hcclxuICAgICAgICAgICAgICAgIC8vIGJlaGF2aW9yIGlzIHdoYXQgd2Ugd2FudCwgYmVjYXVzZSBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgYmV0d2VlblxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIG9sZCB2ZXJzaW9uIGFuZCB0aGUgY3VycmVudCB2ZXJzaW9uLCB3ZSB3YW50IEFMTCB0aGUgbWlncmF0aW9uc1xyXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBjb3JyZXNwb25kIHRvIHRob3NlIHZlcnNpb25zIHRvIHJ1biwgbm90IG9ubHkgdGhlIGxhc3Qgb25lLlxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvbGRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoU1RPUkVfTkFNRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaS9pT1MgYnJvd3NlcnMgdGhyb3cgb2NjYXNpb25hbCBleGNlcHRpb25zIG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkYi5jcmVhdGVPYmplY3RTdG9yZSgpIHRoYXQgbWF5IGJlIGEgYnVnLiBBdm9pZCBibG9ja2luZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHJlc3Qgb2YgdGhlIGFwcCBmdW5jdGlvbmFsaXR5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImlkYi1vcGVuXCIgLyogQXBwRXJyb3IuSURCX09QRU4gKi8sIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGJQcm9taXNlO1xyXG59XHJcbmZ1bmN0aW9uIHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQihhcHApIHtcclxuICAgIHJldHVybiB0c2xpYi5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGIsIHR4LCByZXN1bHQsIGVfMSwgaWRiR2V0RXJyb3I7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFswLCA0LCAsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXREYlByb21pc2UoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgZGIgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHggPSBkYi50cmFuc2FjdGlvbihTVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0eC5vYmplY3RTdG9yZShTVE9SRV9OQU1FKS5nZXQoY29tcHV0ZUtleShhcHApKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGFscmVhZHkgaGF2ZSB0aGUgdmFsdWUgYnV0IHR4LmRvbmUgY2FuIHRocm93LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gYXdhaXQgaXQgaGVyZSB0byBjYXRjaCBlcnJvcnNcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0eC5kb25lXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBhbHJlYWR5IGhhdmUgdGhlIHZhbHVlIGJ1dCB0eC5kb25lIGNhbiB0aHJvdyxcclxuICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIGF3YWl0IGl0IGhlcmUgdG8gY2F0Y2ggZXJyb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXN1bHRdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGVfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8xIGluc3RhbmNlb2YgdXRpbC5GaXJlYmFzZUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGVfMS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkYkdldEVycm9yID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpZGItZ2V0XCIgLyogQXBwRXJyb3IuSURCX0dFVCAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGVfMSA9PT0gbnVsbCB8fCBlXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVfMS5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihpZGJHZXRFcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIoYXBwLCBoZWFydGJlYXRPYmplY3QpIHtcclxuICAgIHJldHVybiB0c2xpYi5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGIsIHR4LCBvYmplY3RTdG9yZSwgZV8yLCBpZGJHZXRFcnJvcjtcclxuICAgICAgICByZXR1cm4gdHNsaWIuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldERiUHJvbWlzZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkYiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0eCA9IGRiLnRyYW5zYWN0aW9uKFNUT1JFX05BTUUsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKFNUT1JFX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG9iamVjdFN0b3JlLnB1dChoZWFydGJlYXRPYmplY3QsIGNvbXB1dGVLZXkoYXBwKSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0eC5kb25lXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZV8yID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlXzIgaW5zdGFuY2VvZiB1dGlsLkZpcmViYXNlRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oZV8yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRiR2V0RXJyb3IgPSBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImlkYi1zZXRcIiAvKiBBcHBFcnJvci5JREJfV1JJVEUgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3JNZXNzYWdlOiBlXzIgPT09IG51bGwgfHwgZV8yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlXzIubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oaWRiR2V0RXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNvbXB1dGVLZXkoYXBwKSB7XHJcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoYXBwLm5hbWUsIFwiIVwiKS5jb25jYXQoYXBwLm9wdGlvbnMuYXBwSWQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBNQVhfSEVBREVSX0JZVEVTID0gMTAyNDtcclxuLy8gMzAgZGF5c1xyXG52YXIgU1RPUkVEX0hFQVJUQkVBVF9SRVRFTlRJT05fTUFYX01JTExJUyA9IDMwICogMjQgKiA2MCAqIDYwICogMTAwMDtcclxudmFyIEhlYXJ0YmVhdFNlcnZpY2VJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSGVhcnRiZWF0U2VydmljZUltcGwoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbi1tZW1vcnkgY2FjaGUgZm9yIGhlYXJ0YmVhdHMsIHVzZWQgYnkgZ2V0SGVhcnRiZWF0c0hlYWRlcigpIHRvIGdlbmVyYXRlXHJcbiAgICAgICAgICogdGhlIGhlYWRlciBzdHJpbmcuXHJcbiAgICAgICAgICogU3RvcmVzIG9uZSByZWNvcmQgcGVyIGRhdGUuIFRoaXMgd2lsbCBiZSBjb25zb2xpZGF0ZWQgaW50byB0aGUgc3RhbmRhcmRcclxuICAgICAgICAgKiBmb3JtYXQgb2Ygb25lIHJlY29yZCBwZXIgdXNlciBhZ2VudCBzdHJpbmcgYmVmb3JlIGJlaW5nIHNlbnQgYXMgYSBoZWFkZXIuXHJcbiAgICAgICAgICogUG9wdWxhdGVkIGZyb20gaW5kZXhlZERCIHdoZW4gdGhlIGNvbnRyb2xsZXIgaXMgaW5zdGFudGlhdGVkIGFuZCBzaG91bGRcclxuICAgICAgICAgKiBiZSBrZXB0IGluIHN5bmMgd2l0aCBpbmRleGVkREIuXHJcbiAgICAgICAgICogTGVhdmUgcHVibGljIGZvciBlYXNpZXIgdGVzdGluZy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPSBudWxsO1xyXG4gICAgICAgIHZhciBhcHAgPSB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgdGhpcy5fc3RvcmFnZSA9IG5ldyBIZWFydGJlYXRTdG9yYWdlSW1wbChhcHApO1xyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2UgPSB0aGlzLl9zdG9yYWdlLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHRvIHJlcG9ydCBhIGhlYXJ0YmVhdC4gVGhlIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGVcclxuICAgICAqIGEgSGVhcnRiZWF0c0J5VXNlckFnZW50IG9iamVjdCwgdXBkYXRlIGhlYXJ0YmVhdHNDYWNoZSwgYW5kIHBlcnNpc3QgaXRcclxuICAgICAqIHRvIEluZGV4ZWREQi5cclxuICAgICAqIE5vdGUgdGhhdCB3ZSBvbmx5IHN0b3JlIG9uZSBoZWFydGJlYXQgcGVyIGRheS4gU28gaWYgYSBoZWFydGJlYXQgZm9yIHRvZGF5IGlzXHJcbiAgICAgKiBhbHJlYWR5IGxvZ2dlZCwgc3Vic2VxdWVudCBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIGluIHRoZSBzYW1lIGRheSB3aWxsIGJlIGlnbm9yZWQuXHJcbiAgICAgKi9cclxuICAgIEhlYXJ0YmVhdFNlcnZpY2VJbXBsLnByb3RvdHlwZS50cmlnZ2VySGVhcnRiZWF0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGxhdGZvcm1Mb2dnZXIsIGFnZW50LCBkYXRlLCBfYztcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZC5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm1Mb2dnZXIgPSB0aGlzLmNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldFByb3ZpZGVyKCdwbGF0Zm9ybS1sb2dnZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2VudCA9IHBsYXRmb3JtTG9nZ2VyLmdldFBsYXRmb3JtSW5mb1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gZ2V0VVRDRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISgoKF9hID0gdGhpcy5faGVhcnRiZWF0c0NhY2hlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGVhcnRiZWF0cykgPT0gbnVsbCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MuX2hlYXJ0YmVhdHNDYWNoZSA9IF9kLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZmFpbGVkIHRvIGNvbnN0cnVjdCBhIGhlYXJ0YmVhdHMgY2FjaGUsIHRoZW4gcmV0dXJuIGltbWVkaWF0ZWx5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKChfYiA9IHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmhlYXJ0YmVhdHMpID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3Qgc3RvcmUgYSBoZWFydGJlYXQgaWYgb25lIGlzIGFscmVhZHkgc3RvcmVkIGZvciB0aGlzIGRheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvciBpZiBhIGhlYWRlciBoYXMgYWxyZWFkeSBiZWVuIHNlbnQgdG9kYXkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUubGFzdFNlbnRIZWFydGJlYXREYXRlID09PSBkYXRlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cy5zb21lKGZ1bmN0aW9uIChzaW5nbGVEYXRlSGVhcnRiZWF0KSB7IHJldHVybiBzaW5nbGVEYXRlSGVhcnRiZWF0LmRhdGUgPT09IGRhdGU7IH0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBlbnRyeSBmb3IgdGhpcyBkYXRlLiBDcmVhdGUgb25lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMucHVzaCh7IGRhdGU6IGRhdGUsIGFnZW50OiBhZ2VudCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZW50cmllcyBvbGRlciB0aGFuIDMwIGRheXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzID0gdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMuZmlsdGVyKGZ1bmN0aW9uIChzaW5nbGVEYXRlSGVhcnRiZWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGJUaW1lc3RhbXAgPSBuZXcgRGF0ZShzaW5nbGVEYXRlSGVhcnRiZWF0LmRhdGUpLnZhbHVlT2YoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vdyAtIGhiVGltZXN0YW1wIDw9IFNUT1JFRF9IRUFSVEJFQVRfUkVURU5USU9OX01BWF9NSUxMSVM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5fc3RvcmFnZS5vdmVyd3JpdGUodGhpcy5faGVhcnRiZWF0c0NhY2hlKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyB3aGljaCBjYW4gYmUgYXR0YWNoZWQgdG8gdGhlIGhlYXJ0YmVhdC1zcGVjaWZpYyBoZWFkZXIgZGlyZWN0bHkuXHJcbiAgICAgKiBJdCBhbHNvIGNsZWFycyBhbGwgaGVhcnRiZWF0cyBmcm9tIG1lbW9yeSBhcyB3ZWxsIGFzIGluIEluZGV4ZWREQi5cclxuICAgICAqXHJcbiAgICAgKiBOT1RFOiBDb25zdW1pbmcgcHJvZHVjdCBTREtzIHNob3VsZCBub3Qgc2VuZCB0aGUgaGVhZGVyIGlmIHRoaXMgbWV0aG9kXHJcbiAgICAgKiByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgSGVhcnRiZWF0U2VydmljZUltcGwucHJvdG90eXBlLmdldEhlYXJ0YmVhdHNIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiB0c2xpYi5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUsIF9iLCBoZWFydGJlYXRzVG9TZW5kLCB1bnNlbnRFbnRyaWVzLCBoZWFkZXJTdHJpbmc7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYi5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9PT0gbnVsbCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQncyBzdGlsbCBudWxsIG9yIHRoZSBhcnJheSBpcyBlbXB0eSwgdGhlcmUgaXMgbm8gZGF0YSB0byBzZW5kLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKChfYSA9IHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhlYXJ0YmVhdHMpID09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sICcnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gZ2V0VVRDRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IGV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzKSwgaGVhcnRiZWF0c1RvU2VuZCA9IF9iLmhlYXJ0YmVhdHNUb1NlbmQsIHVuc2VudEVudHJpZXMgPSBfYi51bnNlbnRFbnRyaWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJTdHJpbmcgPSB1dGlsLmJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KHsgdmVyc2lvbjogMiwgaGVhcnRiZWF0czogaGVhcnRiZWF0c1RvU2VuZCB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIGxhc3Qgc2VudCBkYXRlIHRvIHByZXZlbnQgYW5vdGhlciBiZWluZyBsb2dnZWQvc2VudCBmb3IgdGhlIHNhbWUgZGF5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUubGFzdFNlbnRIZWFydGJlYXREYXRlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodW5zZW50RW50cmllcy5sZW5ndGggPiAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIGFueSB1bnNlbnQgZW50cmllcyBpZiB0aGV5IGV4aXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IHVuc2VudEVudHJpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2VlbXMgbW9yZSBsaWtlbHkgdGhhbiBlbXB0eWluZyB0aGUgYXJyYXkgKGJlbG93KSB0byBsZWFkIHRvIHNvbWUgb2RkIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjYWNoZSBpc24ndCBlbXB0eSBhbmQgdGhpcyB3aWxsIGJlIGNhbGxlZCBhZ2FpbiBvbiB0aGUgbmV4dCByZXF1ZXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXMgcHJvYmFibHkgc2FmZXN0IGlmIHdlIGF3YWl0IGl0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2VlbXMgbW9yZSBsaWtlbHkgdGhhbiBlbXB0eWluZyB0aGUgYXJyYXkgKGJlbG93KSB0byBsZWFkIHRvIHNvbWUgb2RkIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjYWNoZSBpc24ndCBlbXB0eSBhbmQgdGhpcyB3aWxsIGJlIGNhbGxlZCBhZ2FpbiBvbiB0aGUgbmV4dCByZXF1ZXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXMgcHJvYmFibHkgc2FmZXN0IGlmIHdlIGF3YWl0IGl0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHdhaXQgZm9yIHRoaXMsIHRvIHJlZHVjZSBsYXRlbmN5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIHRoaXMuX3N0b3JhZ2Uub3ZlcndyaXRlKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovLCBoZWFkZXJTdHJpbmddO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSGVhcnRiZWF0U2VydmljZUltcGw7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIGdldFVUQ0RhdGVTdHJpbmcoKSB7XHJcbiAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgLy8gUmV0dXJucyBkYXRlIGZvcm1hdCAnWVlZWS1NTS1ERCdcclxuICAgIHJldHVybiB0b2RheS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdEhlYXJ0YmVhdHNGb3JIZWFkZXIoaGVhcnRiZWF0c0NhY2hlLCBtYXhTaXplKSB7XHJcbiAgICB2YXIgZV8xLCBfYTtcclxuICAgIGlmIChtYXhTaXplID09PSB2b2lkIDApIHsgbWF4U2l6ZSA9IE1BWF9IRUFERVJfQllURVM7IH1cclxuICAgIC8vIEhlYXJ0YmVhdHMgZ3JvdXBlZCBieSB1c2VyIGFnZW50IGluIHRoZSBzdGFuZGFyZCBmb3JtYXQgdG8gYmUgc2VudCBpblxyXG4gICAgLy8gdGhlIGhlYWRlci5cclxuICAgIHZhciBoZWFydGJlYXRzVG9TZW5kID0gW107XHJcbiAgICAvLyBTaW5nbGUgZGF0ZSBmb3JtYXQgaGVhcnRiZWF0cyB0aGF0IGFyZSBub3Qgc2VudC5cclxuICAgIHZhciB1bnNlbnRFbnRyaWVzID0gaGVhcnRiZWF0c0NhY2hlLnNsaWNlKCk7XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChzaW5nbGVEYXRlSGVhcnRiZWF0KSB7XHJcbiAgICAgICAgLy8gTG9vayBmb3IgYW4gZXhpc3RpbmcgZW50cnkgd2l0aCB0aGUgc2FtZSB1c2VyIGFnZW50LlxyXG4gICAgICAgIHZhciBoZWFydGJlYXRFbnRyeSA9IGhlYXJ0YmVhdHNUb1NlbmQuZmluZChmdW5jdGlvbiAoaGIpIHsgcmV0dXJuIGhiLmFnZW50ID09PSBzaW5nbGVEYXRlSGVhcnRiZWF0LmFnZW50OyB9KTtcclxuICAgICAgICBpZiAoIWhlYXJ0YmVhdEVudHJ5KSB7XHJcbiAgICAgICAgICAgIC8vIElmIG5vIGVudHJ5IGZvciB0aGlzIHVzZXIgYWdlbnQgZXhpc3RzLCBjcmVhdGUgb25lLlxyXG4gICAgICAgICAgICBoZWFydGJlYXRzVG9TZW5kLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgYWdlbnQ6IHNpbmdsZURhdGVIZWFydGJlYXQuYWdlbnQsXHJcbiAgICAgICAgICAgICAgICBkYXRlczogW3NpbmdsZURhdGVIZWFydGJlYXQuZGF0ZV1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChjb3VudEJ5dGVzKGhlYXJ0YmVhdHNUb1NlbmQpID4gbWF4U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGhlYWRlciB3b3VsZCBleGNlZWQgbWF4IHNpemUsIHJlbW92ZSB0aGUgYWRkZWQgaGVhcnRiZWF0XHJcbiAgICAgICAgICAgICAgICAvLyBlbnRyeSBhbmQgc3RvcCBhZGRpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgICAgICAgICAgICAgIGhlYXJ0YmVhdHNUb1NlbmQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoZWFydGJlYXRFbnRyeS5kYXRlcy5wdXNoKHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSk7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGRhdGVcclxuICAgICAgICAgICAgLy8gYW5kIHN0b3AgYWRkaW5nIHRvIHRoZSBoZWFkZXIuXHJcbiAgICAgICAgICAgIGlmIChjb3VudEJ5dGVzKGhlYXJ0YmVhdHNUb1NlbmQpID4gbWF4U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0RW50cnkuZGF0ZXMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBvcCB1bnNlbnQgZW50cnkgZnJvbSBxdWV1ZS4gKFNraXBwZWQgaWYgYWRkaW5nIHRoZSBlbnRyeSBleGNlZWRlZFxyXG4gICAgICAgIC8vIHF1b3RhIGFuZCB0aGUgbG9vcCBicmVha3MgZWFybHkuKVxyXG4gICAgICAgIHVuc2VudEVudHJpZXMgPSB1bnNlbnRFbnRyaWVzLnNsaWNlKDEpO1xyXG4gICAgfTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZm9yICh2YXIgaGVhcnRiZWF0c0NhY2hlXzEgPSB0c2xpYi5fX3ZhbHVlcyhoZWFydGJlYXRzQ2FjaGUpLCBoZWFydGJlYXRzQ2FjaGVfMV8xID0gaGVhcnRiZWF0c0NhY2hlXzEubmV4dCgpOyAhaGVhcnRiZWF0c0NhY2hlXzFfMS5kb25lOyBoZWFydGJlYXRzQ2FjaGVfMV8xID0gaGVhcnRiZWF0c0NhY2hlXzEubmV4dCgpKSB7XHJcbiAgICAgICAgICAgIHZhciBzaW5nbGVEYXRlSGVhcnRiZWF0ID0gaGVhcnRiZWF0c0NhY2hlXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKHNpbmdsZURhdGVIZWFydGJlYXQpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGVfMSA9PT0gXCJicmVha1wiKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChoZWFydGJlYXRzQ2FjaGVfMV8xICYmICFoZWFydGJlYXRzQ2FjaGVfMV8xLmRvbmUgJiYgKF9hID0gaGVhcnRiZWF0c0NhY2hlXzEucmV0dXJuKSkgX2EuY2FsbChoZWFydGJlYXRzQ2FjaGVfMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGVhcnRiZWF0c1RvU2VuZDogaGVhcnRiZWF0c1RvU2VuZCxcclxuICAgICAgICB1bnNlbnRFbnRyaWVzOiB1bnNlbnRFbnRyaWVzXHJcbiAgICB9O1xyXG59XHJcbnZhciBIZWFydGJlYXRTdG9yYWdlSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhlYXJ0YmVhdFN0b3JhZ2VJbXBsKGFwcCkge1xyXG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xyXG4gICAgICAgIHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2UgPSB0aGlzLnJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2soKTtcclxuICAgIH1cclxuICAgIEhlYXJ0YmVhdFN0b3JhZ2VJbXBsLnByb3RvdHlwZS5ydW5JbmRleGVkREJFbnZpcm9ubWVudENoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYi5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHV0aWwudmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhbGwgaGVhcnRiZWF0cy5cclxuICAgICAqL1xyXG4gICAgSGVhcnRiZWF0U3RvcmFnZUltcGwucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY2FuVXNlSW5kZXhlZERCLCBpZGJIZWFydGJlYXRPYmplY3Q7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYi5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuVXNlSW5kZXhlZERCID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFjYW5Vc2VJbmRleGVkREIpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgeyBoZWFydGJlYXRzOiBbXSB9XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQih0aGlzLmFwcCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRiSGVhcnRiZWF0T2JqZWN0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWRiSGVhcnRiZWF0T2JqZWN0ID09PSBudWxsIHx8IGlkYkhlYXJ0YmVhdE9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaWRiSGVhcnRiZWF0T2JqZWN0LmhlYXJ0YmVhdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBpZGJIZWFydGJlYXRPYmplY3RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHsgaGVhcnRiZWF0czogW10gfV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy8gb3ZlcndyaXRlIHRoZSBzdG9yYWdlIHdpdGggdGhlIHByb3ZpZGVkIGhlYXJ0YmVhdHNcclxuICAgIEhlYXJ0YmVhdFN0b3JhZ2VJbXBsLnByb3RvdHlwZS5vdmVyd3JpdGUgPSBmdW5jdGlvbiAoaGVhcnRiZWF0c09iamVjdCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4gdHNsaWIuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjYW5Vc2VJbmRleGVkREIsIGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdDtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5Vc2VJbmRleGVkREIgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIWNhblVzZUluZGV4ZWREQikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVhZCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHdyaXRlSGVhcnRiZWF0c1RvSW5kZXhlZERCKHRoaXMuYXBwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlbnRIZWFydGJlYXREYXRlOiAoX2EgPSBoZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFydGJlYXRzOiBoZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy8gYWRkIGhlYXJ0YmVhdHNcclxuICAgIEhlYXJ0YmVhdFN0b3JhZ2VJbXBsLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoaGVhcnRiZWF0c09iamVjdCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4gdHNsaWIuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjYW5Vc2VJbmRleGVkREIsIGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdDtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5Vc2VJbmRleGVkREIgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIWNhblVzZUluZGV4ZWREQikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVhZCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHdyaXRlSGVhcnRiZWF0c1RvSW5kZXhlZERCKHRoaXMuYXBwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlbnRIZWFydGJlYXREYXRlOiAoX2EgPSBoZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFydGJlYXRzOiB0c2xpYi5fX3NwcmVhZEFycmF5KHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZChleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QuaGVhcnRiZWF0cyksIGZhbHNlKSwgdHNsaWIuX19yZWFkKGhlYXJ0YmVhdHNPYmplY3QuaGVhcnRiZWF0cyksIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSGVhcnRiZWF0U3RvcmFnZUltcGw7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgYnl0ZXMgb2YgYSBIZWFydGJlYXRzQnlVc2VyQWdlbnQgYXJyYXkgYWZ0ZXIgYmVpbmcgd3JhcHBlZFxyXG4gKiBpbiBhIHBsYXRmb3JtIGxvZ2dpbmcgaGVhZGVyIEpTT04gb2JqZWN0LCBzdHJpbmdpZmllZCwgYW5kIGNvbnZlcnRlZFxyXG4gKiB0byBiYXNlIDY0LlxyXG4gKi9cclxuZnVuY3Rpb24gY291bnRCeXRlcyhoZWFydGJlYXRzQ2FjaGUpIHtcclxuICAgIC8vIGJhc2U2NCBoYXMgYSByZXN0cmljdGVkIHNldCBvZiBjaGFyYWN0ZXJzLCBhbGwgb2Ygd2hpY2ggc2hvdWxkIGJlIDEgYnl0ZS5cclxuICAgIHJldHVybiB1dGlsLmJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKFxyXG4gICAgLy8gaGVhcnRiZWF0c0NhY2hlIHdyYXBwZXIgcHJvcGVydGllc1xyXG4gICAgSlNPTi5zdHJpbmdpZnkoeyB2ZXJzaW9uOiAyLCBoZWFydGJlYXRzOiBoZWFydGJlYXRzQ2FjaGUgfSkpLmxlbmd0aDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlckNvcmVDb21wb25lbnRzKHZhcmlhbnQpIHtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgY29tcG9uZW50LkNvbXBvbmVudCgncGxhdGZvcm0tbG9nZ2VyJywgZnVuY3Rpb24gKGNvbnRhaW5lcikgeyByZXR1cm4gbmV3IFBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGwoY29udGFpbmVyKTsgfSwgXCJQUklWQVRFXCIgLyogQ29tcG9uZW50VHlwZS5QUklWQVRFICovKSk7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IGNvbXBvbmVudC5Db21wb25lbnQoJ2hlYXJ0YmVhdCcsIGZ1bmN0aW9uIChjb250YWluZXIpIHsgcmV0dXJuIG5ldyBIZWFydGJlYXRTZXJ2aWNlSW1wbChjb250YWluZXIpOyB9LCBcIlBSSVZBVEVcIiAvKiBDb21wb25lbnRUeXBlLlBSSVZBVEUgKi8pKTtcclxuICAgIC8vIFJlZ2lzdGVyIGBhcHBgIHBhY2thZ2UuXHJcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSRwLCB2ZXJzaW9uJDEsIHZhcmlhbnQpO1xyXG4gICAgLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtNSwgZXNtMjAxNywgY2pzNSwgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cclxuICAgIHJlZ2lzdGVyVmVyc2lvbihuYW1lJHAsIHZlcnNpb24kMSwgJ2NqczUnKTtcclxuICAgIC8vIFJlZ2lzdGVyIHBsYXRmb3JtIFNESyBpZGVudGlmaWVyIChubyB2ZXJzaW9uKS5cclxuICAgIHJlZ2lzdGVyVmVyc2lvbignZmlyZS1qcycsICcnKTtcclxufVxuXG4vKipcclxuICogRmlyZWJhc2UgQXBwXHJcbiAqXHJcbiAqIEByZW1hcmtzIFRoaXMgcGFja2FnZSBjb29yZGluYXRlcyB0aGUgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIHRoZSBkaWZmZXJlbnQgRmlyZWJhc2UgY29tcG9uZW50c1xyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICovXHJcbnJlZ2lzdGVyQ29yZUNvbXBvbmVudHMoJ25vZGUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdGaXJlYmFzZUVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWwuRmlyZWJhc2VFcnJvcjsgfVxufSk7XG5leHBvcnRzLlNES19WRVJTSU9OID0gU0RLX1ZFUlNJT047XG5leHBvcnRzLl9ERUZBVUxUX0VOVFJZX05BTUUgPSBERUZBVUxUX0VOVFJZX05BTUU7XG5leHBvcnRzLl9hZGRDb21wb25lbnQgPSBfYWRkQ29tcG9uZW50O1xuZXhwb3J0cy5fYWRkT3JPdmVyd3JpdGVDb21wb25lbnQgPSBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQ7XG5leHBvcnRzLl9hcHBzID0gX2FwcHM7XG5leHBvcnRzLl9jbGVhckNvbXBvbmVudHMgPSBfY2xlYXJDb21wb25lbnRzO1xuZXhwb3J0cy5fY29tcG9uZW50cyA9IF9jb21wb25lbnRzO1xuZXhwb3J0cy5fZ2V0UHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXI7XG5leHBvcnRzLl9pc0ZpcmViYXNlQXBwID0gX2lzRmlyZWJhc2VBcHA7XG5leHBvcnRzLl9pc0ZpcmViYXNlU2VydmVyQXBwID0gX2lzRmlyZWJhc2VTZXJ2ZXJBcHA7XG5leHBvcnRzLl9yZWdpc3RlckNvbXBvbmVudCA9IF9yZWdpc3RlckNvbXBvbmVudDtcbmV4cG9ydHMuX3JlbW92ZVNlcnZpY2VJbnN0YW5jZSA9IF9yZW1vdmVTZXJ2aWNlSW5zdGFuY2U7XG5leHBvcnRzLl9zZXJ2ZXJBcHBzID0gX3NlcnZlckFwcHM7XG5leHBvcnRzLmRlbGV0ZUFwcCA9IGRlbGV0ZUFwcDtcbmV4cG9ydHMuZ2V0QXBwID0gZ2V0QXBwO1xuZXhwb3J0cy5nZXRBcHBzID0gZ2V0QXBwcztcbmV4cG9ydHMuaW5pdGlhbGl6ZUFwcCA9IGluaXRpYWxpemVBcHA7XG5leHBvcnRzLmluaXRpYWxpemVTZXJ2ZXJBcHAgPSBpbml0aWFsaXplU2VydmVyQXBwO1xuZXhwb3J0cy5vbkxvZyA9IG9uTG9nO1xuZXhwb3J0cy5yZWdpc3RlclZlcnNpb24gPSByZWdpc3RlclZlcnNpb247XG5leHBvcnRzLnNldExvZ0xldmVsID0gc2V0TG9nTGV2ZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5janMuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB0c2xpYiA9IHJlcXVpcmUoJ3RzbGliJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ0BmaXJlYmFzZS91dGlsJyk7XG5cbi8qKlxyXG4gKiBDb21wb25lbnQgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXHJcbiAqL1xyXG52YXIgQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIHB1YmxpYyBzZXJ2aWNlIG5hbWUsIGUuZy4gYXBwLCBhdXRoLCBmaXJlc3RvcmUsIGRhdGFiYXNlXHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2VGYWN0b3J5IFNlcnZpY2UgZmFjdG9yeSByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhlIHB1YmxpYyBpbnRlcmZhY2VcclxuICAgICAqIEBwYXJhbSB0eXBlIHdoZXRoZXIgdGhlIHNlcnZpY2UgcHJvdmlkZWQgYnkgdGhlIGNvbXBvbmVudCBpcyBwdWJsaWMgb3IgcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDb21wb25lbnQobmFtZSwgaW5zdGFuY2VGYWN0b3J5LCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlRmFjdG9yeSA9IGluc3RhbmNlRmFjdG9yeTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBzZXJ2aWNlIG5hbWVzcGFjZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2VydmljZVByb3BzID0ge307XHJcbiAgICAgICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IFwiTEFaWVwiIC8qIEluc3RhbnRpYXRpb25Nb2RlLkxBWlkgKi87XHJcbiAgICAgICAgdGhpcy5vbkluc3RhbmNlQ3JlYXRlZCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnNldEluc3RhbnRpYXRpb25Nb2RlID0gZnVuY3Rpb24gKG1vZGUpIHtcclxuICAgICAgICB0aGlzLmluc3RhbnRpYXRpb25Nb2RlID0gbW9kZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnNldE11bHRpcGxlSW5zdGFuY2VzID0gZnVuY3Rpb24gKG11bHRpcGxlSW5zdGFuY2VzKSB7XHJcbiAgICAgICAgdGhpcy5tdWx0aXBsZUluc3RhbmNlcyA9IG11bHRpcGxlSW5zdGFuY2VzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIENvbXBvbmVudC5wcm90b3R5cGUuc2V0U2VydmljZVByb3BzID0gZnVuY3Rpb24gKHByb3BzKSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlUHJvcHMgPSBwcm9wcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnNldEluc3RhbmNlQ3JlYXRlZENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5vbkluc3RhbmNlQ3JlYXRlZCA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb21wb25lbnQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBERUZBVUxUX0VOVFJZX05BTUUgPSAnW0RFRkFVTFRdJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGVyIGZvciBpbnN0YW5jZSBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gJ2F1dGgnLCAnYXV0aC1pbnRlcm5hbCdcclxuICogTmFtZVNlcnZpY2VNYXBwaW5nW1RdIGlzIGFuIGFsaWFzIGZvciB0aGUgdHlwZSBvZiB0aGUgaW5zdGFuY2VcclxuICovXHJcbnZhciBQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKG5hbWUsIGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBBIHByb3ZpZGVyIGNhbiBwcm92aWRlIG11bGl0cGxlIGluc3RhbmNlcyBvZiBhIHNlcnZpY2VcclxuICAgICAqIGlmIHRoaXMuY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzIGlzIHRydWUuXHJcbiAgICAgKi9cclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlc0RlZmVycmVkLmhhcyhub3JtYWxpemVkSWRlbnRpZmllcikpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IHV0aWwuRGVmZXJyZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5zZXQobm9ybWFsaXplZElkZW50aWZpZXIsIGRlZmVycmVkKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZChub3JtYWxpemVkSWRlbnRpZmllcikgfHxcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkQXV0b0luaXRpYWxpemUoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSB0aGUgc2VydmljZSBpZiBpdCBjYW4gYmUgYXV0by1pbml0aWFsaXplZFxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyBnZXQoKSwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IuIFdlIGp1c3QgcmV0dXJuIHRoZSB1bnJlc29sdmVkIHByb21pc2UgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmdldChub3JtYWxpemVkSWRlbnRpZmllcikucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0SW1tZWRpYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgLy8gaWYgbXVsdGlwbGVJbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZCwgdXNlIHRoZSBkZWZhdWx0IG5hbWVcclxuICAgICAgICB2YXIgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaWRlbnRpZmllcik7XHJcbiAgICAgICAgdmFyIG9wdGlvbmFsID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9wdGlvbmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEluIGNhc2UgYSBjb21wb25lbnQgaXMgbm90IGluaXRpYWxpemVkIGFuZCBzaG91bGQvY2FuIG5vdCBiZSBhdXRvLWluaXRpYWxpemVkIGF0IHRoZSBtb21lbnQsIHJldHVybiBudWxsIGlmIHRoZSBvcHRpb25hbCBmbGFnIGlzIHNldCwgb3IgdGhyb3dcclxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiU2VydmljZSBcIi5jb25jYXQodGhpcy5uYW1lLCBcIiBpcyBub3QgYXZhaWxhYmxlXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudDtcclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuc2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBlXzEsIF9hO1xyXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gdGhpcy5uYW1lKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiTWlzbWF0Y2hpbmcgQ29tcG9uZW50IFwiLmNvbmNhdChjb21wb25lbnQubmFtZSwgXCIgZm9yIFByb3ZpZGVyIFwiKS5jb25jYXQodGhpcy5uYW1lLCBcIi5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDb21wb25lbnQgZm9yIFwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiIGhhcyBhbHJlYWR5IGJlZW4gcHJvdmlkZWRcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcclxuICAgICAgICAvLyByZXR1cm4gZWFybHkgd2l0aG91dCBhdHRlbXB0aW5nIHRvIGluaXRpYWxpemUgdGhlIGNvbXBvbmVudCBpZiB0aGUgY29tcG9uZW50IHJlcXVpcmVzIGV4cGxpY2l0IGluaXRpYWxpemF0aW9uIChjYWxsaW5nIGBQcm92aWRlci5pbml0aWFsaXplKClgKVxyXG4gICAgICAgIGlmICghdGhpcy5zaG91bGRBdXRvSW5pdGlhbGl6ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgdGhlIHNlcnZpY2UgaXMgZWFnZXIsIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgaW5zdGFuY2VcclxuICAgICAgICBpZiAoaXNDb21wb25lbnRFYWdlcihjb21wb25lbnQpKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2UoeyBpbnN0YW5jZUlkZW50aWZpZXI6IERFRkFVTFRfRU5UUllfTkFNRSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSBmb3IgYW4gZWFnZXIgQ29tcG9uZW50IHRocm93cyBhbiBleGNlcHRpb24gZHVyaW5nIHRoZSBlYWdlclxyXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6YXRpb24sIGl0IHNob3VsZCBub3QgY2F1c2UgYSBmYXRhbCBlcnJvci5cclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IEludmVzdGlnYXRlIGlmIHdlIG5lZWQgdG8gbWFrZSBpdCBjb25maWd1cmFibGUsIGJlY2F1c2Ugc29tZSBjb21wb25lbnQgbWF5IHdhbnQgdG8gY2F1c2VcclxuICAgICAgICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IgaW4gdGhpcyBjYXNlP1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBzZXJ2aWNlIGluc3RhbmNlcyBmb3IgdGhlIHBlbmRpbmcgcHJvbWlzZXMgYW5kIHJlc29sdmUgdGhlbVxyXG4gICAgICAgICAgICAvLyBOT1RFOiBpZiB0aGlzLm11bHRpcGxlSW5zdGFuY2VzIGlzIGZhbHNlLCBvbmx5IHRoZSBkZWZhdWx0IGluc3RhbmNlIHdpbGwgYmUgY3JlYXRlZFxyXG4gICAgICAgICAgICAvLyBhbmQgYWxsIHByb21pc2VzIHdpdGggcmVzb2x2ZSB3aXRoIGl0IHJlZ2FyZGxlc3Mgb2YgdGhlIGlkZW50aWZpZXIuXHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gdHNsaWIuX192YWx1ZXModGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5lbnRyaWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2QgPSB0c2xpYi5fX3JlYWQoX2MudmFsdWUsIDIpLCBpbnN0YW5jZUlkZW50aWZpZXIgPSBfZFswXSwgaW5zdGFuY2VEZWZlcnJlZCA9IF9kWzFdO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYGdldE9ySW5pdGlhbGl6ZVNlcnZpY2UoKWAgc2hvdWxkIGFsd2F5cyByZXR1cm4gYSB2YWxpZCBpbnN0YW5jZSBzaW5jZSBhIGNvbXBvbmVudCBpcyBndWFyYW50ZWVkLiB1c2UgISB0byBtYWtlIHR5cGVzY3JpcHQgaGFwcHkuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IuIFdlIGp1c3QgbGVhdmUgdGhlIHByb21pc2UgdW5yZXNvbHZlZC5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNsZWFySW5zdGFuY2UgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpZGVudGlmaWVyID09PSB2b2lkIDApIHsgaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZGVsZXRlKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzT3B0aW9ucy5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXMuZGVsZXRlKGlkZW50aWZpZXIpO1xyXG4gICAgfTtcclxuICAgIC8vIGFwcC5kZWxldGUoKSB3aWxsIGNhbGwgdGhpcyBtZXRob2Qgb24gZXZlcnkgcHJvdmlkZXIgdG8gZGVsZXRlIHRoZSBzZXJ2aWNlc1xyXG4gICAgLy8gVE9ETzogc2hvdWxkIHdlIG1hcmsgdGhlIHByb3ZpZGVyIGFzIGRlbGV0ZWQ/XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYi5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHNlcnZpY2VzO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWIuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcyA9IEFycmF5LmZyb20odGhpcy5pbnN0YW5jZXMudmFsdWVzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbCh0c2xpYi5fX3NwcmVhZEFycmF5KHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZChzZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHNlcnZpY2UpIHsgcmV0dXJuICdJTlRFUk5BTCcgaW4gc2VydmljZTsgfSkgLy8gbGVnYWN5IHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzZXJ2aWNlKSB7IHJldHVybiBzZXJ2aWNlLklOVEVSTkFMLmRlbGV0ZSgpOyB9KSksIGZhbHNlKSwgdHNsaWIuX19yZWFkKHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc2VydmljZSkgeyByZXR1cm4gJ19kZWxldGUnIGluIHNlcnZpY2U7IH0pIC8vIG1vZHVsYXJpemVkIHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzZXJ2aWNlKSB7IHJldHVybiBzZXJ2aWNlLl9kZWxldGUoKTsgfSkpLCBmYWxzZSkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuaXNDb21wb25lbnRTZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50ICE9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmlzSW5pdGlhbGl6ZWQgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpZGVudGlmaWVyID09PSB2b2lkIDApIHsgaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlcy5oYXMoaWRlbnRpZmllcik7XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpZGVudGlmaWVyID09PSB2b2lkIDApIHsgaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc09wdGlvbnMuZ2V0KGlkZW50aWZpZXIpIHx8IHt9O1xyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKG9wdHMpIHtcclxuICAgICAgICB2YXIgZV8yLCBfYTtcclxuICAgICAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSB7fTsgfVxyXG4gICAgICAgIHZhciBfYiA9IG9wdHMub3B0aW9ucywgb3B0aW9ucyA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iO1xyXG4gICAgICAgIHZhciBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKG9wdHMuaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiKFwiKS5jb25jYXQobm9ybWFsaXplZElkZW50aWZpZXIsIFwiKSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDb21wb25lbnQgXCIuY29uY2F0KHRoaXMubmFtZSwgXCIgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQgeWV0XCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllcixcclxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIHJlc29sdmUgYW55IHBlbmRpbmcgcHJvbWlzZSB3YWl0aW5nIGZvciB0aGUgc2VydmljZSBpbnN0YW5jZVxyXG4gICAgICAgICAgICBmb3IgKHZhciBfYyA9IHRzbGliLl9fdmFsdWVzKHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSwgX2QgPSBfYy5uZXh0KCk7ICFfZC5kb25lOyBfZCA9IF9jLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9lID0gdHNsaWIuX19yZWFkKF9kLnZhbHVlLCAyKSwgaW5zdGFuY2VJZGVudGlmaWVyID0gX2VbMF0sIGluc3RhbmNlRGVmZXJyZWQgPSBfZVsxXTtcclxuICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkRGVmZXJyZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkSWRlbnRpZmllciA9PT0gbm9ybWFsaXplZERlZmVycmVkSWRlbnRpZmllcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfZCAmJiAhX2QuZG9uZSAmJiAoX2EgPSBfYy5yZXR1cm4pKSBfYS5jYWxsKF9jKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkICBhZnRlciB0aGUgcHJvdmlkZXIgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgYnkgY2FsbGluZyBwcm92aWRlci5pbml0aWFsaXplKCkuXHJcbiAgICAgKiBUaGUgZnVuY3Rpb24gaXMgaW52b2tlZCBTWU5DSFJPTk9VU0xZLCBzbyBpdCBzaG91bGQgbm90IGV4ZWN1dGUgYW55IGxvbmdydW5uaW5nIHRhc2tzIGluIG9yZGVyIHRvIG5vdCBibG9jayB0aGUgcHJvZ3JhbS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBBbiBvcHRpb25hbCBpbnN0YW5jZSBpZGVudGlmaWVyXHJcbiAgICAgKiBAcmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVucmVnaXN0ZXIgdGhlIGNhbGxiYWNrXHJcbiAgICAgKi9cclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5vbkluaXQgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGlkZW50aWZpZXIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICAgICAgdmFyIGV4aXN0aW5nQ2FsbGJhY2tzID0gKF9hID0gdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IFNldCgpO1xyXG4gICAgICAgIGV4aXN0aW5nQ2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5vbkluaXRDYWxsYmFja3Muc2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyLCBleGlzdGluZ0NhbGxiYWNrcyk7XHJcbiAgICAgICAgdmFyIGV4aXN0aW5nSW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGV4aXN0aW5nSW5zdGFuY2UsIG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZXhpc3RpbmdDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlIG9uSW5pdCBjYWxsYmFja3Mgc3luY2hyb25vdXNseVxyXG4gICAgICogQHBhcmFtIGluc3RhbmNlIHRoZSBzZXJ2aWNlIGluc3RhbmNlYFxyXG4gICAgICovXHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuaW52b2tlT25Jbml0Q2FsbGJhY2tzID0gZnVuY3Rpb24gKGluc3RhbmNlLCBpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgdmFyIGVfMywgX2E7XHJcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGNhbGxiYWNrc18xID0gdHNsaWIuX192YWx1ZXMoY2FsbGJhY2tzKSwgY2FsbGJhY2tzXzFfMSA9IGNhbGxiYWNrc18xLm5leHQoKTsgIWNhbGxiYWNrc18xXzEuZG9uZTsgY2FsbGJhY2tzXzFfMSA9IGNhbGxiYWNrc18xLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soaW5zdGFuY2UsIGlkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKF9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIGVycm9ycyBpbiB0aGUgb25Jbml0IGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja3NfMV8xICYmICFjYWxsYmFja3NfMV8xLmRvbmUgJiYgKF9hID0gY2FsbGJhY2tzXzEucmV0dXJuKSkgX2EuY2FsbChjYWxsYmFja3NfMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzMpIHRocm93IGVfMy5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0T3JJbml0aWFsaXplU2VydmljZSA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZUlkZW50aWZpZXIgPSBfYS5pbnN0YW5jZUlkZW50aWZpZXIsIF9iID0gX2Eub3B0aW9ucywgb3B0aW9ucyA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iO1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2VzLmdldChpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmICghaW5zdGFuY2UgJiYgdGhpcy5jb21wb25lbnQpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UgPSB0aGlzLmNvbXBvbmVudC5pbnN0YW5jZUZhY3RvcnkodGhpcy5jb250YWluZXIsIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaW5zdGFuY2VJZGVudGlmaWVyKSxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzLnNldChpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zLnNldChpbnN0YW5jZUlkZW50aWZpZXIsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSW52b2tlIG9uSW5pdCBsaXN0ZW5lcnMuXHJcbiAgICAgICAgICAgICAqIE5vdGUgdGhpcy5jb21wb25lbnQub25JbnN0YW5jZUNyZWF0ZWQgaXMgZGlmZmVyZW50LCB3aGljaCBpcyB1c2VkIGJ5IHRoZSBjb21wb25lbnQgY3JlYXRvcixcclxuICAgICAgICAgICAgICogd2hpbGUgb25Jbml0IGxpc3RlbmVycyBhcmUgcmVnaXN0ZXJlZCBieSBjb25zdW1lcnMgb2YgdGhlIHByb3ZpZGVyLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5pbnZva2VPbkluaXRDYWxsYmFja3MoaW5zdGFuY2UsIGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBPcmRlciBpcyBpbXBvcnRhbnRcclxuICAgICAgICAgICAgICogb25JbnN0YW5jZUNyZWF0ZWQoKSBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIHRoaXMuaW5zdGFuY2VzLnNldChpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlKTsgd2hpY2hcclxuICAgICAgICAgICAgICogbWFrZXMgYGlzSW5pdGlhbGl6ZWQoKWAgcmV0dXJuIHRydWUuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb25lbnQub25JbnN0YW5jZUNyZWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnQub25JbnN0YW5jZUNyZWF0ZWQodGhpcy5jb250YWluZXIsIGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKF9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIGVycm9ycyBpbiB0aGUgb25JbnN0YW5jZUNyZWF0ZWRDYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZSB8fCBudWxsO1xyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpZGVudGlmaWVyID09PSB2b2lkIDApIHsgaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBpZGVudGlmaWVyIDogREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7IC8vIGFzc3VtZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIHN1cHBvcnRlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBwcm92aWRlZC5cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnNob3VsZEF1dG9Jbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAoISF0aGlzLmNvbXBvbmVudCAmJlxyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5pbnN0YW50aWF0aW9uTW9kZSAhPT0gXCJFWFBMSUNJVFwiIC8qIEluc3RhbnRpYXRpb25Nb2RlLkVYUExJQ0lUICovKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJvdmlkZXI7XHJcbn0oKSk7XHJcbi8vIHVuZGVmaW5lZCBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBzZXJ2aWNlIGZhY3RvcnkgZm9yIHRoZSBkZWZhdWx0IGluc3RhbmNlXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUlkZW50aWZpZXJGb3JGYWN0b3J5KGlkZW50aWZpZXIpIHtcclxuICAgIHJldHVybiBpZGVudGlmaWVyID09PSBERUZBVUxUX0VOVFJZX05BTUUgPyB1bmRlZmluZWQgOiBpZGVudGlmaWVyO1xyXG59XHJcbmZ1bmN0aW9uIGlzQ29tcG9uZW50RWFnZXIoY29tcG9uZW50KSB7XHJcbiAgICByZXR1cm4gY29tcG9uZW50Lmluc3RhbnRpYXRpb25Nb2RlID09PSBcIkVBR0VSXCIgLyogSW5zdGFudGlhdGlvbk1vZGUuRUFHRVIgKi87XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENvbXBvbmVudENvbnRhaW5lciB0aGF0IHByb3ZpZGVzIFByb3ZpZGVycyBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gYGF1dGhgLCBgYXV0aC1pbnRlcm5hbGBcclxuICovXHJcbnZhciBDb21wb25lbnRDb250YWluZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21wb25lbnRDb250YWluZXIobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50IENvbXBvbmVudCBiZWluZyBhZGRlZFxyXG4gICAgICogQHBhcmFtIG92ZXJ3cml0ZSBXaGVuIGEgY29tcG9uZW50IHdpdGggdGhlIHNhbWUgbmFtZSBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQsXHJcbiAgICAgKiBpZiBvdmVyd3JpdGUgaXMgdHJ1ZTogb3ZlcndyaXRlIHRoZSBleGlzdGluZyBjb21wb25lbnQgd2l0aCB0aGUgbmV3IGNvbXBvbmVudCBhbmQgY3JlYXRlIGEgbmV3XHJcbiAgICAgKiBwcm92aWRlciB3aXRoIHRoZSBuZXcgY29tcG9uZW50LiBJdCBjYW4gYmUgdXNlZnVsIGluIHRlc3RzIHdoZXJlIHlvdSB3YW50IHRvIHVzZSBkaWZmZXJlbnQgbW9ja3NcclxuICAgICAqIGZvciBkaWZmZXJlbnQgdGVzdHMuXHJcbiAgICAgKiBpZiBvdmVyd3JpdGUgaXMgZmFsc2U6IHRocm93IGFuIGV4Y2VwdGlvblxyXG4gICAgICovXHJcbiAgICBDb21wb25lbnRDb250YWluZXIucHJvdG90eXBlLmFkZENvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcclxuICAgICAgICB2YXIgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb25lbnQgXCIuY29uY2F0KGNvbXBvbmVudC5uYW1lLCBcIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCBcIikuY29uY2F0KHRoaXMubmFtZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm92aWRlci5zZXRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH07XHJcbiAgICBDb21wb25lbnRDb250YWluZXIucHJvdG90eXBlLmFkZE9yT3ZlcndyaXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBwcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXIoY29tcG9uZW50Lm5hbWUpO1xyXG4gICAgICAgIGlmIChwcm92aWRlci5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSB0aGUgZXhpc3RpbmcgcHJvdmlkZXIgZnJvbSB0aGUgY29udGFpbmVyLCBzbyB3ZSBjYW4gcmVnaXN0ZXIgdGhlIG5ldyBjb21wb25lbnRcclxuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMuZGVsZXRlKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIGdldFByb3ZpZGVyIHByb3ZpZGVzIGEgdHlwZSBzYWZlIGludGVyZmFjZSB3aGVyZSBpdCBjYW4gb25seSBiZSBjYWxsZWQgd2l0aCBhIGZpZWxkIG5hbWVcclxuICAgICAqIHByZXNlbnQgaW4gTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBGaXJlYmFzZSBTREtzIHByb3ZpZGluZyBzZXJ2aWNlcyBzaG91bGQgZXh0ZW5kIE5hbWVTZXJ2aWNlTWFwcGluZyBpbnRlcmZhY2UgdG8gcmVnaXN0ZXJcclxuICAgICAqIHRoZW1zZWx2ZXMuXHJcbiAgICAgKi9cclxuICAgIENvbXBvbmVudENvbnRhaW5lci5wcm90b3R5cGUuZ2V0UHJvdmlkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVycy5oYXMobmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3JlYXRlIGEgUHJvdmlkZXIgZm9yIGEgc2VydmljZSB0aGF0IGhhc24ndCByZWdpc3RlcmVkIHdpdGggRmlyZWJhc2VcclxuICAgICAgICB2YXIgcHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIobmFtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5hbWUsIHByb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9uZW50Q29udGFpbmVyLnByb3RvdHlwZS5nZXRQcm92aWRlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm92aWRlcnMudmFsdWVzKCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb21wb25lbnRDb250YWluZXI7XHJcbn0oKSk7XG5cbmV4cG9ydHMuQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuZXhwb3J0cy5Db21wb25lbnRDb250YWluZXIgPSBDb21wb25lbnRDb250YWluZXI7XG5leHBvcnRzLlByb3ZpZGVyID0gUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5janMuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBhcHAgPSByZXF1aXJlKCdAZmlyZWJhc2UvYXBwJyk7XG52YXIgY29tcG9uZW50ID0gcmVxdWlyZSgnQGZpcmViYXNlL2NvbXBvbmVudCcpO1xudmFyIGxvZ2dlciA9IHJlcXVpcmUoJ0BmaXJlYmFzZS9sb2dnZXInKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnQGZpcmViYXNlL3V0aWwnKTtcbnZhciBibG9vbUJsb2IgPSByZXF1aXJlKCdAZmlyZWJhc2Uvd2ViY2hhbm5lbC13cmFwcGVyL2Jsb29tLWJsb2InKTtcbnZhciB3ZWJjaGFubmVsQmxvYiA9IHJlcXVpcmUoJ0BmaXJlYmFzZS93ZWJjaGFubmVsLXdyYXBwZXIvd2ViY2hhbm5lbC1ibG9iJyk7XG5cbmNvbnN0IFMgPSBcIkBmaXJlYmFzZS9maXJlc3RvcmVcIjtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogU2ltcGxlIHdyYXBwZXIgYXJvdW5kIGEgbnVsbGFibGUgVUlELiBNb3N0bHkgZXhpc3RzIHRvIG1ha2UgY29kZSBtb3JlXG4gKiByZWFkYWJsZS5cbiAqL1xuY2xhc3MgVXNlciB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLnVpZCA9IGU7XG4gICAgfVxuICAgIGlzQXV0aGVudGljYXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT0gdGhpcy51aWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBrZXkgcmVwcmVzZW50aW5nIHRoaXMgdXNlciwgc3VpdGFibGUgZm9yIGluY2x1c2lvbiBpbiBhXG4gICAgICogZGljdGlvbmFyeS5cbiAgICAgKi8gICAgdG9LZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQXV0aGVudGljYXRlZCgpID8gXCJ1aWQ6XCIgKyB0aGlzLnVpZCA6IFwiYW5vbnltb3VzLXVzZXJcIjtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiBlLnVpZCA9PT0gdGhpcy51aWQ7XG4gICAgfVxufVxuXG4vKiogQSB1c2VyIHdpdGggYSBudWxsIFVJRC4gKi8gVXNlci5VTkFVVEhFTlRJQ0FURUQgPSBuZXcgVXNlcihudWxsKSwgXG4vLyBUT0RPKG1pa2VsZWhlbik6IExvb2sgaW50byBnZXR0aW5nIGEgcHJvcGVyIHVpZC1lcXVpdmFsZW50IGZvclxuLy8gbm9uLUZpcmViYXNlQXV0aCBwcm92aWRlcnMuXG5Vc2VyLkdPT0dMRV9DUkVERU5USUFMUyA9IG5ldyBVc2VyKFwiZ29vZ2xlLWNyZWRlbnRpYWxzLXVpZFwiKSwgVXNlci5GSVJTVF9QQVJUWSA9IG5ldyBVc2VyKFwiZmlyc3QtcGFydHktdWlkXCIpLCBcblVzZXIuTU9DS19VU0VSID0gbmV3IFVzZXIoXCJtb2NrLXVzZXJcIik7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5sZXQgYiA9IFwiMTAuMTIuM1wiO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgRCA9IG5ldyBsb2dnZXIuTG9nZ2VyKFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiKTtcblxuLy8gSGVscGVyIG1ldGhvZHMgYXJlIG5lZWRlZCBiZWNhdXNlIHZhcmlhYmxlcyBjYW4ndCBiZSBleHBvcnRlZCBhcyByZWFkL3dyaXRlXG5mdW5jdGlvbiBfX1BSSVZBVEVfZ2V0TG9nTGV2ZWwoKSB7XG4gICAgcmV0dXJuIEQubG9nTGV2ZWw7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgdmVyYm9zaXR5IG9mIENsb3VkIEZpcmVzdG9yZSBsb2dzIChkZWJ1ZywgZXJyb3IsIG9yIHNpbGVudCkuXG4gKlxuICogQHBhcmFtIGxvZ0xldmVsIC0gVGhlIHZlcmJvc2l0eSB5b3Ugc2V0IGZvciBhY3Rpdml0eSBhbmQgZXJyb3IgbG9nZ2luZy4gQ2FuXG4gKiAgIGJlIGFueSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAqXG4gKiAgIDx1bD5cbiAqICAgICA8bGk+YGRlYnVnYCBmb3IgdGhlIG1vc3QgdmVyYm9zZSBsb2dnaW5nIGxldmVsLCBwcmltYXJpbHkgZm9yXG4gKiAgICAgZGVidWdnaW5nLjwvbGk+XG4gKiAgICAgPGxpPmBlcnJvcmAgdG8gbG9nIGVycm9ycyBvbmx5LjwvbGk+XG4gKiAgICAgPGxpPjxjb2RlPmBzaWxlbnRgIHRvIHR1cm4gb2ZmIGxvZ2dpbmcuPC9saT5cbiAqICAgPC91bD5cbiAqLyBmdW5jdGlvbiBzZXRMb2dMZXZlbChlKSB7XG4gICAgRC5zZXRMb2dMZXZlbChlKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2xvZ0RlYnVnKGUsIC4uLnQpIHtcbiAgICBpZiAoRC5sb2dMZXZlbCA8PSBsb2dnZXIuTG9nTGV2ZWwuREVCVUcpIHtcbiAgICAgICAgY29uc3QgbiA9IHQubWFwKF9fUFJJVkFURV9hcmdUb1N0cmluZyk7XG4gICAgICAgIEQuZGVidWcoYEZpcmVzdG9yZSAoJHtifSk6ICR7ZX1gLCAuLi5uKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9sb2dFcnJvcihlLCAuLi50KSB7XG4gICAgaWYgKEQubG9nTGV2ZWwgPD0gbG9nZ2VyLkxvZ0xldmVsLkVSUk9SKSB7XG4gICAgICAgIGNvbnN0IG4gPSB0Lm1hcChfX1BSSVZBVEVfYXJnVG9TdHJpbmcpO1xuICAgICAgICBELmVycm9yKGBGaXJlc3RvcmUgKCR7Yn0pOiAke2V9YCwgLi4ubik7XG4gICAgfVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9sb2dXYXJuKGUsIC4uLnQpIHtcbiAgICBpZiAoRC5sb2dMZXZlbCA8PSBsb2dnZXIuTG9nTGV2ZWwuV0FSTikge1xuICAgICAgICBjb25zdCBuID0gdC5tYXAoX19QUklWQVRFX2FyZ1RvU3RyaW5nKTtcbiAgICAgICAgRC53YXJuKGBGaXJlc3RvcmUgKCR7Yn0pOiAke2V9YCwgLi4ubik7XG4gICAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIGFkZGl0aW9uYWwgbG9nIHBhcmFtZXRlciB0byBhIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfYXJnVG9TdHJpbmcoZSkge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlKSByZXR1cm4gZTtcbiAgICB0cnkge1xuICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgICAgICAvKiogRm9ybWF0cyBhbiBvYmplY3QgYXMgYSBKU09OIHN0cmluZywgc3VpdGFibGUgZm9yIGxvZ2dpbmcuICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfZm9ybWF0SlNPTihlKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSk7XG4gICAgICAgIH0oZSk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgICAvLyBDb252ZXJ0aW5nIHRvIEpTT04gZmFpbGVkLCBqdXN0IGxvZyB0aGUgb2JqZWN0IGRpcmVjdGx5XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVW5jb25kaXRpb25hbGx5IGZhaWxzLCB0aHJvd2luZyBhbiBFcnJvciB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlLlxuICogTWVzc2FnZXMgYXJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxuICpcbiAqIFJldHVybnMgYG5ldmVyYCBhbmQgY2FuIGJlIHVzZWQgaW4gZXhwcmVzc2lvbnM6XG4gKiBAZXhhbXBsZVxuICogbGV0IGZ1dHVyZVZhciA9IGZhaWwoJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAqLyBmdW5jdGlvbiBmYWlsKGUgPSBcIlVuZXhwZWN0ZWQgc3RhdGVcIikge1xuICAgIC8vIExvZyB0aGUgZmFpbHVyZSBpbiBhZGRpdGlvbiB0byB0aHJvdyBhbiBleGNlcHRpb24sIGp1c3QgaW4gY2FzZSB0aGVcbiAgICAvLyBleGNlcHRpb24gaXMgc3dhbGxvd2VkLlxuICAgIGNvbnN0IHQgPSBgRklSRVNUT1JFICgke2J9KSBJTlRFUk5BTCBBU1NFUlRJT04gRkFJTEVEOiBgICsgZTtcbiAgICAvLyBOT1RFOiBXZSBkb24ndCB1c2UgRmlyZXN0b3JlRXJyb3IgaGVyZSBiZWNhdXNlIHRoZXNlIGFyZSBpbnRlcm5hbCBmYWlsdXJlc1xuICAgIC8vIHRoYXQgY2Fubm90IGJlIGhhbmRsZWQgYnkgdGhlIHVzZXIuIChBbHNvIGl0IHdvdWxkIGNyZWF0ZSBhIGNpcmN1bGFyXG4gICAgLy8gZGVwZW5kZW5jeSBiZXR3ZWVuIHRoZSBlcnJvciBhbmQgYXNzZXJ0IG1vZHVsZXMgd2hpY2ggZG9lc24ndCB3b3JrLilcbiAgICB0aHJvdyBfX1BSSVZBVEVfbG9nRXJyb3IodCksIG5ldyBFcnJvcih0KTtcbn1cblxuLyoqXG4gKiBGYWlscyBpZiB0aGUgZ2l2ZW4gYXNzZXJ0aW9uIGNvbmRpdGlvbiBpcyBmYWxzZSwgdGhyb3dpbmcgYW4gRXJyb3Igd2l0aCB0aGVcbiAqIGdpdmVuIG1lc3NhZ2UgaWYgaXQgZGlkLlxuICpcbiAqIE1lc3NhZ2VzIGFyZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcy5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfaGFyZEFzc2VydChlLCB0KSB7XG4gICAgZSB8fCBmYWlsKCk7XG59XG5cbi8qKlxuICogRmFpbHMgaWYgdGhlIGdpdmVuIGFzc2VydGlvbiBjb25kaXRpb24gaXMgZmFsc2UsIHRocm93aW5nIGFuIEVycm9yIHdpdGggdGhlXG4gKiBnaXZlbiBtZXNzYWdlIGlmIGl0IGRpZC5cbiAqXG4gKiBUaGUgY29kZSBvZiBjYWxsc2l0ZXMgaW52b2tpbmcgdGhpcyBmdW5jdGlvbiBhcmUgc3RyaXBwZWQgb3V0IGluIHByb2R1Y3Rpb25cbiAqIGJ1aWxkcy4gQW55IHNpZGUtZWZmZWN0cyBvZiBjb2RlIHdpdGhpbiB0aGUgZGVidWdBc3NlcnQoKSBpbnZvY2F0aW9uIHdpbGwgbm90XG4gKiBoYXBwZW4gaW4gdGhpcyBjYXNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9kZWJ1Z0Fzc2VydChlLCB0KSB7XG4gICAgZSB8fCBmYWlsKCk7XG59XG5cbi8qKlxuICogQ2FzdHMgYG9iamAgdG8gYFRgLiBJbiBub24tcHJvZHVjdGlvbiBidWlsZHMsIHZlcmlmaWVzIHRoYXQgYG9iamAgaXMgYW5cbiAqIGluc3RhbmNlIG9mIGBUYCBiZWZvcmUgY2FzdGluZy5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZGVidWdDYXN0KGUsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnQpIHtcbiAgICByZXR1cm4gZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgQyA9IHtcbiAgICAvLyBDYXVzZXMgYXJlIGNvcGllZCBmcm9tOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9iY2VlYzk0ZWE0ZmM1ZjAwODVkODEyMzVkOGUxYzA2Nzk4ZGMzNDFhL2luY2x1ZGUvZ3JwYyUyQiUyQi9pbXBsL2NvZGVnZW4vc3RhdHVzX2NvZGVfZW51bS5oXG4gICAgLyoqIE5vdCBhbiBlcnJvcjsgcmV0dXJuZWQgb24gc3VjY2Vzcy4gKi9cbiAgICBPSzogXCJva1wiLFxuICAgIC8qKiBUaGUgb3BlcmF0aW9uIHdhcyBjYW5jZWxsZWQgKHR5cGljYWxseSBieSB0aGUgY2FsbGVyKS4gKi9cbiAgICBDQU5DRUxMRUQ6IFwiY2FuY2VsbGVkXCIsXG4gICAgLyoqIFVua25vd24gZXJyb3Igb3IgYW4gZXJyb3IgZnJvbSBhIGRpZmZlcmVudCBlcnJvciBkb21haW4uICovXG4gICAgVU5LTk9XTjogXCJ1bmtub3duXCIsXG4gICAgLyoqXG4gICAgICogQ2xpZW50IHNwZWNpZmllZCBhbiBpbnZhbGlkIGFyZ3VtZW50LiBOb3RlIHRoYXQgdGhpcyBkaWZmZXJzIGZyb21cbiAgICAgKiBGQUlMRURfUFJFQ09ORElUSU9OLiBJTlZBTElEX0FSR1VNRU5UIGluZGljYXRlcyBhcmd1bWVudHMgdGhhdCBhcmVcbiAgICAgKiBwcm9ibGVtYXRpYyByZWdhcmRsZXNzIG9mIHRoZSBzdGF0ZSBvZiB0aGUgc3lzdGVtIChlLmcuLCBhIG1hbGZvcm1lZCBmaWxlXG4gICAgICogbmFtZSkuXG4gICAgICovXG4gICAgSU5WQUxJRF9BUkdVTUVOVDogXCJpbnZhbGlkLWFyZ3VtZW50XCIsXG4gICAgLyoqXG4gICAgICogRGVhZGxpbmUgZXhwaXJlZCBiZWZvcmUgb3BlcmF0aW9uIGNvdWxkIGNvbXBsZXRlLiBGb3Igb3BlcmF0aW9ucyB0aGF0XG4gICAgICogY2hhbmdlIHRoZSBzdGF0ZSBvZiB0aGUgc3lzdGVtLCB0aGlzIGVycm9yIG1heSBiZSByZXR1cm5lZCBldmVuIGlmIHRoZVxuICAgICAqIG9wZXJhdGlvbiBoYXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4gRm9yIGV4YW1wbGUsIGEgc3VjY2Vzc2Z1bCByZXNwb25zZVxuICAgICAqIGZyb20gYSBzZXJ2ZXIgY291bGQgaGF2ZSBiZWVuIGRlbGF5ZWQgbG9uZyBlbm91Z2ggZm9yIHRoZSBkZWFkbGluZSB0b1xuICAgICAqIGV4cGlyZS5cbiAgICAgKi9cbiAgICBERUFETElORV9FWENFRURFRDogXCJkZWFkbGluZS1leGNlZWRlZFwiLFxuICAgIC8qKiBTb21lIHJlcXVlc3RlZCBlbnRpdHkgKGUuZy4sIGZpbGUgb3IgZGlyZWN0b3J5KSB3YXMgbm90IGZvdW5kLiAqL1xuICAgIE5PVF9GT1VORDogXCJub3QtZm91bmRcIixcbiAgICAvKipcbiAgICAgKiBTb21lIGVudGl0eSB0aGF0IHdlIGF0dGVtcHRlZCB0byBjcmVhdGUgKGUuZy4sIGZpbGUgb3IgZGlyZWN0b3J5KSBhbHJlYWR5XG4gICAgICogZXhpc3RzLlxuICAgICAqL1xuICAgIEFMUkVBRFlfRVhJU1RTOiBcImFscmVhZHktZXhpc3RzXCIsXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxlciBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gZXhlY3V0ZSB0aGUgc3BlY2lmaWVkIG9wZXJhdGlvbi5cbiAgICAgKiBQRVJNSVNTSU9OX0RFTklFRCBtdXN0IG5vdCBiZSB1c2VkIGZvciByZWplY3Rpb25zIGNhdXNlZCBieSBleGhhdXN0aW5nXG4gICAgICogc29tZSByZXNvdXJjZSAodXNlIFJFU09VUkNFX0VYSEFVU1RFRCBpbnN0ZWFkIGZvciB0aG9zZSBlcnJvcnMpLlxuICAgICAqIFBFUk1JU1NJT05fREVOSUVEIG11c3Qgbm90IGJlIHVzZWQgaWYgdGhlIGNhbGxlciBjYW4gbm90IGJlIGlkZW50aWZpZWRcbiAgICAgKiAodXNlIFVOQVVUSEVOVElDQVRFRCBpbnN0ZWFkIGZvciB0aG9zZSBlcnJvcnMpLlxuICAgICAqL1xuICAgIFBFUk1JU1NJT05fREVOSUVEOiBcInBlcm1pc3Npb24tZGVuaWVkXCIsXG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVlc3QgZG9lcyBub3QgaGF2ZSB2YWxpZCBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBmb3IgdGhlXG4gICAgICogb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIFVOQVVUSEVOVElDQVRFRDogXCJ1bmF1dGhlbnRpY2F0ZWRcIixcbiAgICAvKipcbiAgICAgKiBTb21lIHJlc291cmNlIGhhcyBiZWVuIGV4aGF1c3RlZCwgcGVyaGFwcyBhIHBlci11c2VyIHF1b3RhLCBvciBwZXJoYXBzIHRoZVxuICAgICAqIGVudGlyZSBmaWxlIHN5c3RlbSBpcyBvdXQgb2Ygc3BhY2UuXG4gICAgICovXG4gICAgUkVTT1VSQ0VfRVhIQVVTVEVEOiBcInJlc291cmNlLWV4aGF1c3RlZFwiLFxuICAgIC8qKlxuICAgICAqIE9wZXJhdGlvbiB3YXMgcmVqZWN0ZWQgYmVjYXVzZSB0aGUgc3lzdGVtIGlzIG5vdCBpbiBhIHN0YXRlIHJlcXVpcmVkIGZvclxuICAgICAqIHRoZSBvcGVyYXRpb24ncyBleGVjdXRpb24uIEZvciBleGFtcGxlLCBkaXJlY3RvcnkgdG8gYmUgZGVsZXRlZCBtYXkgYmVcbiAgICAgKiBub24tZW1wdHksIGFuIHJtZGlyIG9wZXJhdGlvbiBpcyBhcHBsaWVkIHRvIGEgbm9uLWRpcmVjdG9yeSwgZXRjLlxuICAgICAqXG4gICAgICogQSBsaXRtdXMgdGVzdCB0aGF0IG1heSBoZWxwIGEgc2VydmljZSBpbXBsZW1lbnRvciBpbiBkZWNpZGluZ1xuICAgICAqIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCwgYW5kIFVOQVZBSUxBQkxFOlxuICAgICAqICAoYSkgVXNlIFVOQVZBSUxBQkxFIGlmIHRoZSBjbGllbnQgY2FuIHJldHJ5IGp1c3QgdGhlIGZhaWxpbmcgY2FsbC5cbiAgICAgKiAgKGIpIFVzZSBBQk9SVEVEIGlmIHRoZSBjbGllbnQgc2hvdWxkIHJldHJ5IGF0IGEgaGlnaGVyLWxldmVsXG4gICAgICogICAgICAoZS5nLiwgcmVzdGFydGluZyBhIHJlYWQtbW9kaWZ5LXdyaXRlIHNlcXVlbmNlKS5cbiAgICAgKiAgKGMpIFVzZSBGQUlMRURfUFJFQ09ORElUSU9OIGlmIHRoZSBjbGllbnQgc2hvdWxkIG5vdCByZXRyeSB1bnRpbFxuICAgICAqICAgICAgdGhlIHN5c3RlbSBzdGF0ZSBoYXMgYmVlbiBleHBsaWNpdGx5IGZpeGVkLiBFLmcuLCBpZiBhbiBcInJtZGlyXCJcbiAgICAgKiAgICAgIGZhaWxzIGJlY2F1c2UgdGhlIGRpcmVjdG9yeSBpcyBub24tZW1wdHksIEZBSUxFRF9QUkVDT05ESVRJT05cbiAgICAgKiAgICAgIHNob3VsZCBiZSByZXR1cm5lZCBzaW5jZSB0aGUgY2xpZW50IHNob3VsZCBub3QgcmV0cnkgdW5sZXNzXG4gICAgICogICAgICB0aGV5IGhhdmUgZmlyc3QgZml4ZWQgdXAgdGhlIGRpcmVjdG9yeSBieSBkZWxldGluZyBmaWxlcyBmcm9tIGl0LlxuICAgICAqICAoZCkgVXNlIEZBSUxFRF9QUkVDT05ESVRJT04gaWYgdGhlIGNsaWVudCBwZXJmb3JtcyBjb25kaXRpb25hbFxuICAgICAqICAgICAgUkVTVCBHZXQvVXBkYXRlL0RlbGV0ZSBvbiBhIHJlc291cmNlIGFuZCB0aGUgcmVzb3VyY2Ugb24gdGhlXG4gICAgICogICAgICBzZXJ2ZXIgZG9lcyBub3QgbWF0Y2ggdGhlIGNvbmRpdGlvbi4gRS5nLiwgY29uZmxpY3RpbmdcbiAgICAgKiAgICAgIHJlYWQtbW9kaWZ5LXdyaXRlIG9uIHRoZSBzYW1lIHJlc291cmNlLlxuICAgICAqL1xuICAgIEZBSUxFRF9QUkVDT05ESVRJT046IFwiZmFpbGVkLXByZWNvbmRpdGlvblwiLFxuICAgIC8qKlxuICAgICAqIFRoZSBvcGVyYXRpb24gd2FzIGFib3J0ZWQsIHR5cGljYWxseSBkdWUgdG8gYSBjb25jdXJyZW5jeSBpc3N1ZSBsaWtlXG4gICAgICogc2VxdWVuY2VyIGNoZWNrIGZhaWx1cmVzLCB0cmFuc2FjdGlvbiBhYm9ydHMsIGV0Yy5cbiAgICAgKlxuICAgICAqIFNlZSBsaXRtdXMgdGVzdCBhYm92ZSBmb3IgZGVjaWRpbmcgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OLCBBQk9SVEVELFxuICAgICAqIGFuZCBVTkFWQUlMQUJMRS5cbiAgICAgKi9cbiAgICBBQk9SVEVEOiBcImFib3J0ZWRcIixcbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb24gd2FzIGF0dGVtcHRlZCBwYXN0IHRoZSB2YWxpZCByYW5nZS4gRS5nLiwgc2Vla2luZyBvciByZWFkaW5nXG4gICAgICogcGFzdCBlbmQgb2YgZmlsZS5cbiAgICAgKlxuICAgICAqIFVubGlrZSBJTlZBTElEX0FSR1VNRU5ULCB0aGlzIGVycm9yIGluZGljYXRlcyBhIHByb2JsZW0gdGhhdCBtYXkgYmUgZml4ZWRcbiAgICAgKiBpZiB0aGUgc3lzdGVtIHN0YXRlIGNoYW5nZXMuIEZvciBleGFtcGxlLCBhIDMyLWJpdCBmaWxlIHN5c3RlbSB3aWxsXG4gICAgICogZ2VuZXJhdGUgSU5WQUxJRF9BUkdVTUVOVCBpZiBhc2tlZCB0byByZWFkIGF0IGFuIG9mZnNldCB0aGF0IGlzIG5vdCBpbiB0aGVcbiAgICAgKiByYW5nZSBbMCwyXjMyLTFdLCBidXQgaXQgd2lsbCBnZW5lcmF0ZSBPVVRfT0ZfUkFOR0UgaWYgYXNrZWQgdG8gcmVhZCBmcm9tXG4gICAgICogYW4gb2Zmc2V0IHBhc3QgdGhlIGN1cnJlbnQgZmlsZSBzaXplLlxuICAgICAqXG4gICAgICogVGhlcmUgaXMgYSBmYWlyIGJpdCBvZiBvdmVybGFwIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiBhbmRcbiAgICAgKiBPVVRfT0ZfUkFOR0UuIFdlIHJlY29tbWVuZCB1c2luZyBPVVRfT0ZfUkFOR0UgKHRoZSBtb3JlIHNwZWNpZmljIGVycm9yKVxuICAgICAqIHdoZW4gaXQgYXBwbGllcyBzbyB0aGF0IGNhbGxlcnMgd2hvIGFyZSBpdGVyYXRpbmcgdGhyb3VnaCBhIHNwYWNlIGNhblxuICAgICAqIGVhc2lseSBsb29rIGZvciBhbiBPVVRfT0ZfUkFOR0UgZXJyb3IgdG8gZGV0ZWN0IHdoZW4gdGhleSBhcmUgZG9uZS5cbiAgICAgKi9cbiAgICBPVVRfT0ZfUkFOR0U6IFwib3V0LW9mLXJhbmdlXCIsXG4gICAgLyoqIE9wZXJhdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgb3Igbm90IHN1cHBvcnRlZC9lbmFibGVkIGluIHRoaXMgc2VydmljZS4gKi9cbiAgICBVTklNUExFTUVOVEVEOiBcInVuaW1wbGVtZW50ZWRcIixcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBlcnJvcnMuIE1lYW5zIHNvbWUgaW52YXJpYW50cyBleHBlY3RlZCBieSB1bmRlcmx5aW5nIFN5c3RlbSBoYXNcbiAgICAgKiBiZWVuIGJyb2tlbi4gSWYgeW91IHNlZSBvbmUgb2YgdGhlc2UgZXJyb3JzLCBTb21ldGhpbmcgaXMgdmVyeSBicm9rZW4uXG4gICAgICovXG4gICAgSU5URVJOQUw6IFwiaW50ZXJuYWxcIixcbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmljZSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUuIFRoaXMgaXMgYSBtb3N0IGxpa2VseSBhIHRyYW5zaWVudFxuICAgICAqIGNvbmRpdGlvbiBhbmQgbWF5IGJlIGNvcnJlY3RlZCBieSByZXRyeWluZyB3aXRoIGEgYmFja29mZi5cbiAgICAgKlxuICAgICAqIFNlZSBsaXRtdXMgdGVzdCBhYm92ZSBmb3IgZGVjaWRpbmcgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OLCBBQk9SVEVELFxuICAgICAqIGFuZCBVTkFWQUlMQUJMRS5cbiAgICAgKi9cbiAgICBVTkFWQUlMQUJMRTogXCJ1bmF2YWlsYWJsZVwiLFxuICAgIC8qKiBVbnJlY292ZXJhYmxlIGRhdGEgbG9zcyBvciBjb3JydXB0aW9uLiAqL1xuICAgIERBVEFfTE9TUzogXCJkYXRhLWxvc3NcIlxufTtcblxuLyoqIEFuIGVycm9yIHJldHVybmVkIGJ5IGEgRmlyZXN0b3JlIG9wZXJhdGlvbi4gKi8gY2xhc3MgRmlyZXN0b3JlRXJyb3IgZXh0ZW5kcyB1dGlsLkZpcmViYXNlRXJyb3Ige1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIGJhY2tlbmQgZXJyb3IgY29kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBlcnJvci5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBBIGN1c3RvbSBlcnJvciBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgICB0KSB7XG4gICAgICAgIHN1cGVyKGUsIHQpLCB0aGlzLmNvZGUgPSBlLCB0aGlzLm1lc3NhZ2UgPSB0LCBcbiAgICAgICAgLy8gSEFDSzogV2Ugd3JpdGUgYSB0b1N0cmluZyBwcm9wZXJ0eSBkaXJlY3RseSBiZWNhdXNlIEVycm9yIGlzIG5vdCBhIHJlYWxcbiAgICAgICAgLy8gY2xhc3MgYW5kIHNvIGluaGVyaXRhbmNlIGRvZXMgbm90IHdvcmsgY29ycmVjdGx5LiBXZSBjb3VsZCBhbHRlcm5hdGl2ZWx5XG4gICAgICAgIC8vIGRvIHRoZSBzYW1lIFwiYmFjay1kb29yIGluaGVyaXRhbmNlXCIgdHJpY2sgdGhhdCBGaXJlYmFzZUVycm9yIGRvZXMuXG4gICAgICAgIHRoaXMudG9TdHJpbmcgPSAoKSA9PiBgJHt0aGlzLm5hbWV9OiBbY29kZT0ke3RoaXMuY29kZX1dOiAke3RoaXMubWVzc2FnZX1gO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgX19QUklWQVRFX0RlZmVycmVkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKChlLCB0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSBlLCB0aGlzLnJlamVjdCA9IHQ7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIF9fUFJJVkFURV9PQXV0aFRva2VuIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMudXNlciA9IHQsIHRoaXMudHlwZSA9IFwiT0F1dGhcIiwgdGhpcy5oZWFkZXJzID0gbmV3IE1hcCwgdGhpcy5oZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYEJlYXJlciAke2V9YCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgQ3JlZGVudGlhbHNQcm92aWRlciB0aGF0IGFsd2F5cyB5aWVsZHMgYW4gZW1wdHkgdG9rZW4uXG4gKiBAaW50ZXJuYWxcbiAqLyBjbGFzcyBfX1BSSVZBVEVfRW1wdHlBdXRoQ3JlZGVudGlhbHNQcm92aWRlciB7XG4gICAgZ2V0VG9rZW4oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb2tlbigpIHt9XG4gICAgc3RhcnQoZSwgdCkge1xuICAgICAgICAvLyBGaXJlIHdpdGggaW5pdGlhbCB1c2VyLlxuICAgICAgICBlLmVucXVldWVSZXRyeWFibGUoKCgpID0+IHQoVXNlci5VTkFVVEhFTlRJQ0FURUQpKSk7XG4gICAgfVxuICAgIHNodXRkb3duKCkge31cbn1cblxuLyoqXG4gKiBBIENyZWRlbnRpYWxzUHJvdmlkZXIgdGhhdCBhbHdheXMgcmV0dXJucyBhIGNvbnN0YW50IHRva2VuLiBVc2VkIGZvclxuICogZW11bGF0b3IgdG9rZW4gbW9ja2luZy5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfRW11bGF0b3JBdXRoQ3JlZGVudGlhbHNQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLnRva2VuID0gZSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZXMgdGhlIGxpc3RlbmVyIHJlZ2lzdGVyZWQgd2l0aCBzZXRDaGFuZ2VMaXN0ZW5lcigpXG4gICAgICAgICAqIFRoaXMgaXNuJ3QgYWN0dWFsbHkgbmVjZXNzYXJ5IHNpbmNlIHRoZSBVSUQgbmV2ZXIgY2hhbmdlcywgYnV0IHdlIHVzZSB0aGlzXG4gICAgICAgICAqIHRvIHZlcmlmeSB0aGUgbGlzdGVuIGNvbnRyYWN0IGlzIGFkaGVyZWQgdG8gaW4gdGVzdHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbmVyID0gbnVsbDtcbiAgICB9XG4gICAgZ2V0VG9rZW4oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy50b2tlbik7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb2tlbigpIHt9XG4gICAgc3RhcnQoZSwgdCkge1xuICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbmVyID0gdCwgXG4gICAgICAgIC8vIEZpcmUgd2l0aCBpbml0aWFsIHVzZXIuXG4gICAgICAgIGUuZW5xdWV1ZVJldHJ5YWJsZSgoKCkgPT4gdCh0aGlzLnRva2VuLnVzZXIpKSk7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbmVyID0gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIF9fUFJJVkFURV9GaXJlYmFzZUF1dGhDcmVkZW50aWFsc1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHRoaXMudCA9IGUsIFxuICAgICAgICAvKiogVHJhY2tzIHRoZSBjdXJyZW50IFVzZXIuICovXG4gICAgICAgIHRoaXMuY3VycmVudFVzZXIgPSBVc2VyLlVOQVVUSEVOVElDQVRFRCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb3VudGVyIHVzZWQgdG8gZGV0ZWN0IGlmIHRoZSB0b2tlbiBjaGFuZ2VkIHdoaWxlIGEgZ2V0VG9rZW4gcmVxdWVzdCB3YXNcbiAgICAgICAgICogb3V0c3RhbmRpbmcuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmkgPSAwLCB0aGlzLmZvcmNlUmVmcmVzaCA9ICExLCB0aGlzLmF1dGggPSBudWxsO1xuICAgIH1cbiAgICBzdGFydChlLCB0KSB7XG4gICAgICAgIGxldCBuID0gdGhpcy5pO1xuICAgICAgICAvLyBBIGNoYW5nZSBsaXN0ZW5lciB0aGF0IHByZXZlbnRzIGRvdWJsZS1maXJpbmcgZm9yIHRoZSBzYW1lIHRva2VuIGNoYW5nZS5cbiAgICAgICAgICAgICAgICBjb25zdCBfX1BSSVZBVEVfZ3VhcmRlZENoYW5nZUxpc3RlbmVyID0gZSA9PiB0aGlzLmkgIT09IG4gPyAobiA9IHRoaXMuaSwgXG4gICAgICAgIHQoZSkpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIC8vIEEgcHJvbWlzZSB0aGF0IGNhbiBiZSB3YWl0ZWQgb24gdG8gYmxvY2sgb24gdGhlIG5leHQgdG9rZW4gY2hhbmdlLlxuICAgICAgICAvLyBUaGlzIHByb21pc2UgaXMgcmUtY3JlYXRlZCBhZnRlciBlYWNoIGNoYW5nZS5cbiAgICAgICAgICAgICAgICBsZXQgciA9IG5ldyBfX1BSSVZBVEVfRGVmZXJyZWQ7XG4gICAgICAgIHRoaXMubyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaSsrLCB0aGlzLmN1cnJlbnRVc2VyID0gdGhpcy51KCksIHIucmVzb2x2ZSgpLCByID0gbmV3IF9fUFJJVkFURV9EZWZlcnJlZCwgXG4gICAgICAgICAgICBlLmVucXVldWVSZXRyeWFibGUoKCgpID0+IF9fUFJJVkFURV9ndWFyZGVkQ2hhbmdlTGlzdGVuZXIodGhpcy5jdXJyZW50VXNlcikpKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgX19QUklWQVRFX2F3YWl0TmV4dFRva2VuID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdCA9IHI7XG4gICAgICAgICAgICBlLmVucXVldWVSZXRyeWFibGUoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0LnByb21pc2UsIGF3YWl0IF9fUFJJVkFURV9ndWFyZGVkQ2hhbmdlTGlzdGVuZXIodGhpcy5jdXJyZW50VXNlcik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sIF9fUFJJVkFURV9yZWdpc3RlckF1dGggPSBlID0+IHtcbiAgICAgICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkZpcmViYXNlQXV0aENyZWRlbnRpYWxzUHJvdmlkZXJcIiwgXCJBdXRoIGRldGVjdGVkXCIpLCB0aGlzLmF1dGggPSBlLCBcbiAgICAgICAgICAgIHRoaXMuYXV0aC5hZGRBdXRoVG9rZW5MaXN0ZW5lcih0aGlzLm8pLCBfX1BSSVZBVEVfYXdhaXROZXh0VG9rZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50Lm9uSW5pdCgoZSA9PiBfX1BSSVZBVEVfcmVnaXN0ZXJBdXRoKGUpKSksIFxuICAgICAgICAvLyBPdXIgdXNlcnMgY2FuIGluaXRpYWxpemUgQXV0aCByaWdodCBhZnRlciBGaXJlc3RvcmUsIHNvIHdlIGdpdmUgaXRcbiAgICAgICAgLy8gYSBjaGFuY2UgdG8gcmVnaXN0ZXIgaXRzZWxmIHdpdGggdGhlIGNvbXBvbmVudCBmcmFtZXdvcmsgYmVmb3JlIHdlXG4gICAgICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHRvIHN0YXJ0IHVwIGluIHVuYXV0aGVudGljYXRlZCBtb2RlLlxuICAgICAgICBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXV0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnQuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6ICEwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZSA/IF9fUFJJVkFURV9yZWdpc3RlckF1dGgoZSkgOiAoXG4gICAgICAgICAgICAgICAgLy8gSWYgYXV0aCBpcyBzdGlsbCBub3QgYXZhaWxhYmxlLCBwcm9jZWVkIHdpdGggYG51bGxgIHVzZXJcbiAgICAgICAgICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJGaXJlYmFzZUF1dGhDcmVkZW50aWFsc1Byb3ZpZGVyXCIsIFwiQXV0aCBub3QgeWV0IGRldGVjdGVkXCIpLCBcbiAgICAgICAgICAgICAgICByLnJlc29sdmUoKSwgciA9IG5ldyBfX1BSSVZBVEVfRGVmZXJyZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgMCksIF9fUFJJVkFURV9hd2FpdE5leHRUb2tlbigpO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgLy8gVGFrZSBub3RlIG9mIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSB0b2tlbkNvdW50ZXIgc28gdGhhdCB0aGlzIG1ldGhvZFxuICAgICAgICAvLyBjYW4gZmFpbCAod2l0aCBhbiBBQk9SVEVEIGVycm9yKSBpZiB0aGVyZSBpcyBhIHRva2VuIGNoYW5nZSB3aGlsZSB0aGVcbiAgICAgICAgLy8gcmVxdWVzdCBpcyBvdXRzdGFuZGluZy5cbiAgICAgICAgY29uc3QgZSA9IHRoaXMuaSwgdCA9IHRoaXMuZm9yY2VSZWZyZXNoO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hdXRoID8gdGhpcy5hdXRoLmdldFRva2VuKHQpLnRoZW4oKHQgPT4gXG4gICAgICAgIC8vIENhbmNlbCB0aGUgcmVxdWVzdCBzaW5jZSB0aGUgdG9rZW4gY2hhbmdlZCB3aGlsZSB0aGUgcmVxdWVzdCB3YXNcbiAgICAgICAgLy8gb3V0c3RhbmRpbmcgc28gdGhlIHJlc3BvbnNlIGlzIHBvdGVudGlhbGx5IGZvciBhIHByZXZpb3VzIHVzZXIgKHdoaWNoXG4gICAgICAgIC8vIHVzZXIsIHdlIGNhbid0IGJlIHN1cmUpLlxuICAgICAgICB0aGlzLmkgIT09IGUgPyAoX19QUklWQVRFX2xvZ0RlYnVnKFwiRmlyZWJhc2VBdXRoQ3JlZGVudGlhbHNQcm92aWRlclwiLCBcImdldFRva2VuIGFib3J0ZWQgZHVlIHRvIHRva2VuIGNoYW5nZS5cIiksIFxuICAgICAgICB0aGlzLmdldFRva2VuKCkpIDogdCA/IChfX1BSSVZBVEVfaGFyZEFzc2VydChcInN0cmluZ1wiID09IHR5cGVvZiB0LmFjY2Vzc1Rva2VuKSwgXG4gICAgICAgIG5ldyBfX1BSSVZBVEVfT0F1dGhUb2tlbih0LmFjY2Vzc1Rva2VuLCB0aGlzLmN1cnJlbnRVc2VyKSkgOiBudWxsKSkgOiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb2tlbigpIHtcbiAgICAgICAgdGhpcy5mb3JjZVJlZnJlc2ggPSAhMDtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHRoaXMuYXV0aCAmJiB0aGlzLmF1dGgucmVtb3ZlQXV0aFRva2VuTGlzdGVuZXIodGhpcy5vKTtcbiAgICB9XG4gICAgLy8gQXV0aC5nZXRVaWQoKSBjYW4gcmV0dXJuIG51bGwgZXZlbiB3aXRoIGEgdXNlciBsb2dnZWQgaW4uIEl0IGlzIGJlY2F1c2VcbiAgICAvLyBnZXRVaWQoKSBpcyBzeW5jaHJvbm91cywgYnV0IHRoZSBhdXRoIGNvZGUgcG9wdWxhdGluZyBVaWQgaXMgYXN5bmNocm9ub3VzLlxuICAgIC8vIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBpbiB0aGUgQXV0aFRva2VuTGlzdGVuZXIgY2FsbGJhY2tcbiAgICAvLyB0byBndWFyYW50ZWUgdG8gZ2V0IHRoZSBhY3R1YWwgdXNlci5cbiAgICB1KCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5hdXRoICYmIHRoaXMuYXV0aC5nZXRVaWQoKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9oYXJkQXNzZXJ0KG51bGwgPT09IGUgfHwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSksIG5ldyBVc2VyKGUpO1xuICAgIH1cbn1cblxuLypcbiAqIEZpcnN0UGFydHlUb2tlbiBwcm92aWRlcyBhIGZyZXNoIHRva2VuIGVhY2ggdGltZSBpdHMgdmFsdWVcbiAqIGlzIHJlcXVlc3RlZCwgYmVjYXVzZSBpZiB0aGUgdG9rZW4gaXMgdG9vIG9sZCwgcmVxdWVzdHMgd2lsbCBiZSByZWplY3RlZC5cbiAqIFRlY2huaWNhbGx5IHRoaXMgbWF5IG5vIGxvbmdlciBiZSBuZWNlc3Nhcnkgc2luY2UgdGhlIFNESyBzaG91bGQgZ3JhY2VmdWxseVxuICogcmVjb3ZlciBmcm9tIHVuYXV0aGVudGljYXRlZCBlcnJvcnMgKHNlZSBiLzMzMTQ3ODE4IGZvciBjb250ZXh0KSwgYnV0IGl0J3NcbiAqIHNhZmVyIHRvIGtlZXAgdGhlIGltcGxlbWVudGF0aW9uIGFzLWlzLlxuICovIGNsYXNzIF9fUFJJVkFURV9GaXJzdFBhcnR5VG9rZW4ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4pIHtcbiAgICAgICAgdGhpcy5sID0gZSwgdGhpcy5oID0gdCwgdGhpcy5QID0gbiwgdGhpcy50eXBlID0gXCJGaXJzdFBhcnR5XCIsIHRoaXMudXNlciA9IFVzZXIuRklSU1RfUEFSVFksIFxuICAgICAgICB0aGlzLkkgPSBuZXcgTWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGF1dGhvcml6YXRpb24gdG9rZW4sIHVzaW5nIGEgcHJvdmlkZWQgZmFjdG9yeSBmdW5jdGlvbiwgb3IgcmV0dXJuXG4gICAgICogbnVsbC5cbiAgICAgKi8gICAgVCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUCA/IHRoaXMuUCgpIDogbnVsbDtcbiAgICB9XG4gICAgZ2V0IGhlYWRlcnMoKSB7XG4gICAgICAgIHRoaXMuSS5zZXQoXCJYLUdvb2ctQXV0aFVzZXJcIiwgdGhpcy5sKTtcbiAgICAgICAgLy8gVXNlIGFycmF5IG5vdGF0aW9uIHRvIHByZXZlbnQgbWluaWZpY2F0aW9uXG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLlQoKTtcbiAgICAgICAgcmV0dXJuIGUgJiYgdGhpcy5JLnNldChcIkF1dGhvcml6YXRpb25cIiwgZSksIHRoaXMuaCAmJiB0aGlzLkkuc2V0KFwiWC1Hb29nLUlhbS1BdXRob3JpemF0aW9uLVRva2VuXCIsIHRoaXMuaCksIFxuICAgICAgICB0aGlzLkk7XG4gICAgfVxufVxuXG4vKlxuICogUHJvdmlkZXMgdXNlciBjcmVkZW50aWFscyByZXF1aXJlZCBmb3IgdGhlIEZpcmVzdG9yZSBKYXZhU2NyaXB0IFNES1xuICogdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyLCB1c2luZyB0ZWNobmlxdWUgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZVxuICogdG8gYXBwbGljYXRpb25zIGhvc3RlZCBieSBHb29nbGUuXG4gKi8gY2xhc3MgX19QUklWQVRFX0ZpcnN0UGFydHlBdXRoQ3JlZGVudGlhbHNQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbikge1xuICAgICAgICB0aGlzLmwgPSBlLCB0aGlzLmggPSB0LCB0aGlzLlAgPSBuO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgX19QUklWQVRFX0ZpcnN0UGFydHlUb2tlbih0aGlzLmwsIHRoaXMuaCwgdGhpcy5QKSk7XG4gICAgfVxuICAgIHN0YXJ0KGUsIHQpIHtcbiAgICAgICAgLy8gRmlyZSB3aXRoIGluaXRpYWwgdWlkLlxuICAgICAgICBlLmVucXVldWVSZXRyeWFibGUoKCgpID0+IHQoVXNlci5GSVJTVF9QQVJUWSkpKTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7fVxuICAgIGludmFsaWRhdGVUb2tlbigpIHt9XG59XG5cbmNsYXNzIEFwcENoZWNrVG9rZW4ge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGUsIHRoaXMudHlwZSA9IFwiQXBwQ2hlY2tcIiwgdGhpcy5oZWFkZXJzID0gbmV3IE1hcCwgZSAmJiBlLmxlbmd0aCA+IDAgJiYgdGhpcy5oZWFkZXJzLnNldChcIngtZmlyZWJhc2UtYXBwY2hlY2tcIiwgdGhpcy52YWx1ZSk7XG4gICAgfVxufVxuXG5jbGFzcyBfX1BSSVZBVEVfRmlyZWJhc2VBcHBDaGVja1Rva2VuUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5BID0gZSwgdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hcHBDaGVjayA9IG51bGwsIHRoaXMuUiA9IG51bGw7XG4gICAgfVxuICAgIHN0YXJ0KGUsIHQpIHtcbiAgICAgICAgY29uc3Qgb25Ub2tlbkNoYW5nZWQgPSBlID0+IHtcbiAgICAgICAgICAgIG51bGwgIT0gZS5lcnJvciAmJiBfX1BSSVZBVEVfbG9nRGVidWcoXCJGaXJlYmFzZUFwcENoZWNrVG9rZW5Qcm92aWRlclwiLCBgRXJyb3IgZ2V0dGluZyBBcHAgQ2hlY2sgdG9rZW47IHVzaW5nIHBsYWNlaG9sZGVyIHRva2VuIGluc3RlYWQuIEVycm9yOiAke2UuZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLnRva2VuICE9PSB0aGlzLlI7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5SID0gZS50b2tlbiwgX19QUklWQVRFX2xvZ0RlYnVnKFwiRmlyZWJhc2VBcHBDaGVja1Rva2VuUHJvdmlkZXJcIiwgYFJlY2VpdmVkICR7biA/IFwibmV3XCIgOiBcImV4aXN0aW5nXCJ9IHRva2VuLmApLCBcbiAgICAgICAgICAgIG4gPyB0KGUudG9rZW4pIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubyA9IHQgPT4ge1xuICAgICAgICAgICAgZS5lbnF1ZXVlUmV0cnlhYmxlKCgoKSA9PiBvblRva2VuQ2hhbmdlZCh0KSkpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBfX1BSSVZBVEVfcmVnaXN0ZXJBcHBDaGVjayA9IGUgPT4ge1xuICAgICAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiRmlyZWJhc2VBcHBDaGVja1Rva2VuUHJvdmlkZXJcIiwgXCJBcHBDaGVjayBkZXRlY3RlZFwiKSwgdGhpcy5hcHBDaGVjayA9IGUsIFxuICAgICAgICAgICAgdGhpcy5hcHBDaGVjay5hZGRUb2tlbkxpc3RlbmVyKHRoaXMubyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuQS5vbkluaXQoKGUgPT4gX19QUklWQVRFX3JlZ2lzdGVyQXBwQ2hlY2soZSkpKSwgXG4gICAgICAgIC8vIE91ciB1c2VycyBjYW4gaW5pdGlhbGl6ZSBBcHBDaGVjayBhZnRlciBGaXJlc3RvcmUsIHNvIHdlIGdpdmUgaXRcbiAgICAgICAgLy8gYSBjaGFuY2UgdG8gcmVnaXN0ZXIgaXRzZWxmIHdpdGggdGhlIGNvbXBvbmVudCBmcmFtZXdvcmsuXG4gICAgICAgIHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hcHBDaGVjaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLkEuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6ICEwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZSA/IF9fUFJJVkFURV9yZWdpc3RlckFwcENoZWNrKGUpIDogXG4gICAgICAgICAgICAgICAgLy8gSWYgQXBwQ2hlY2sgaXMgc3RpbGwgbm90IGF2YWlsYWJsZSwgcHJvY2VlZCB3aXRob3V0IGl0LlxuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkZpcmViYXNlQXBwQ2hlY2tUb2tlblByb3ZpZGVyXCIsIFwiQXBwQ2hlY2sgbm90IHlldCBkZXRlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIDApO1xuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuZm9yY2VSZWZyZXNoO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5hcHBDaGVjayA/IHRoaXMuYXBwQ2hlY2suZ2V0VG9rZW4oZSkudGhlbigoZSA9PiBlID8gKF9fUFJJVkFURV9oYXJkQXNzZXJ0KFwic3RyaW5nXCIgPT0gdHlwZW9mIGUudG9rZW4pLCBcbiAgICAgICAgdGhpcy5SID0gZS50b2tlbiwgbmV3IEFwcENoZWNrVG9rZW4oZS50b2tlbikpIDogbnVsbCkpIDogUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlVG9rZW4oKSB7XG4gICAgICAgIHRoaXMuZm9yY2VSZWZyZXNoID0gITA7XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICB0aGlzLmFwcENoZWNrICYmIHRoaXMuYXBwQ2hlY2sucmVtb3ZlVG9rZW5MaXN0ZW5lcih0aGlzLm8pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBBcHBDaGVjayB0b2tlbiBwcm92aWRlciB0aGF0IGFsd2F5cyB5aWVsZHMgYW4gZW1wdHkgdG9rZW4uXG4gKiBAaW50ZXJuYWxcbiAqLyBjbGFzcyBfX1BSSVZBVEVfRW1wdHlBcHBDaGVja1Rva2VuUHJvdmlkZXIge1xuICAgIGdldFRva2VuKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBBcHBDaGVja1Rva2VuKFwiXCIpKTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZVRva2VuKCkge31cbiAgICBzdGFydChlLCB0KSB7fVxuICAgIHNodXRkb3duKCkge31cbn1cblxuLyoqXG4gKiBCdWlsZHMgYSBDcmVkZW50aWFsc1Byb3ZpZGVyIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZlxuICogdGhlIGNyZWRlbnRpYWxzIHBhc3NlZCBpbi5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogR2VuZXJhdGVzIGBuQnl0ZXNgIG9mIHJhbmRvbSBieXRlcy5cbiAqXG4gKiBJZiBgbkJ5dGVzIDwgMGAgLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqL1xuZnVuY3Rpb24gX19QUklWQVRFX3JhbmRvbUJ5dGVzKGUpIHtcbiAgICAvLyBQb2x5ZmlsbHMgZm9yIElFIGFuZCBXZWJXb3JrZXIgYnkgdXNpbmcgYHNlbGZgIGFuZCBgbXNDcnlwdG9gIHdoZW4gYGNyeXB0b2AgaXMgbm90IGF2YWlsYWJsZS5cbiAgICBjb25zdCB0ID0gXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBzZWxmICYmIChzZWxmLmNyeXB0byB8fCBzZWxmLm1zQ3J5cHRvKSwgbiA9IG5ldyBVaW50OEFycmF5KGUpO1xuICAgIGlmICh0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdC5nZXRSYW5kb21WYWx1ZXMpIHQuZ2V0UmFuZG9tVmFsdWVzKG4pOyBlbHNlIFxuICAgIC8vIEZhbGxzIGJhY2sgdG8gTWF0aC5yYW5kb21cbiAgICBmb3IgKGxldCB0ID0gMDsgdCA8IGU7IHQrKykgblt0XSA9IE1hdGguZmxvb3IoMjU2ICogTWF0aC5yYW5kb20oKSk7XG4gICAgcmV0dXJuIG47XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgdXRpbGl0eSBjbGFzcyBmb3IgZ2VuZXJhdGluZyB1bmlxdWUgYWxwaGFudW1lcmljIElEcyBvZiBhIHNwZWNpZmllZCBsZW5ndGguXG4gKlxuICogQGludGVybmFsXG4gKiBFeHBvcnRlZCBpbnRlcm5hbGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICovIGNsYXNzIF9fUFJJVkFURV9BdXRvSWQge1xuICAgIHN0YXRpYyBuZXdJZCgpIHtcbiAgICAgICAgLy8gQWxwaGFudW1lcmljIGNoYXJhY3RlcnNcbiAgICAgICAgY29uc3QgZSA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIiwgdCA9IE1hdGguZmxvb3IoMjU2IC8gZS5sZW5ndGgpICogZS5sZW5ndGg7XG4gICAgICAgIC8vIFRoZSBsYXJnZXN0IGJ5dGUgdmFsdWUgdGhhdCBpcyBhIG11bHRpcGxlIG9mIGBjaGFyLmxlbmd0aGAuXG4gICAgICAgICAgICAgICAgbGV0IG4gPSBcIlwiO1xuICAgICAgICBmb3IgKDtuLmxlbmd0aCA8IDIwOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfcmFuZG9tQnl0ZXMoNDApO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByLmxlbmd0aDsgKytpKSBcbiAgICAgICAgICAgIC8vIE9ubHkgYWNjZXB0IHZhbHVlcyB0aGF0IGFyZSBbMCwgbWF4TXVsdGlwbGUpLCB0aGlzIGVuc3VyZXMgdGhleSBjYW5cbiAgICAgICAgICAgIC8vIGJlIGV2ZW5seSBtYXBwZWQgdG8gaW5kaWNlcyBvZiBgY2hhcnNgIHZpYSBhIG1vZHVsbyBvcGVyYXRpb24uXG4gICAgICAgICAgICBuLmxlbmd0aCA8IDIwICYmIHJbaV0gPCB0ICYmIChuICs9IGUuY2hhckF0KHJbaV0gJSBlLmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IoZSwgdCkge1xuICAgIHJldHVybiBlIDwgdCA/IC0xIDogZSA+IHQgPyAxIDogMDtcbn1cblxuLyoqIEhlbHBlciB0byBjb21wYXJlIGFycmF5cyB1c2luZyBpc0VxdWFsKCkuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9hcnJheUVxdWFscyhlLCB0LCBuKSB7XG4gICAgcmV0dXJuIGUubGVuZ3RoID09PSB0Lmxlbmd0aCAmJiBlLmV2ZXJ5KCgoZSwgcikgPT4gbihlLCB0W3JdKSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGltbWVkaWF0ZSBsZXhpY29ncmFwaGljYWxseS1mb2xsb3dpbmcgc3RyaW5nLiBUaGlzIGlzIHVzZWZ1bCB0b1xuICogY29uc3RydWN0IGFuIGluY2x1c2l2ZSByYW5nZSBmb3IgaW5kZXhlZGRiIGl0ZXJhdG9ycy5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfaW1tZWRpYXRlU3VjY2Vzc29yKGUpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGlucHV0IHN0cmluZywgd2l0aCBhbiBhZGRpdGlvbmFsIE5VTCBieXRlIGFwcGVuZGVkLlxuICAgIHJldHVybiBlICsgXCJcXDBcIjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRoZSBlYXJsaWVzdCBkYXRlIHN1cHBvcnRlZCBieSBGaXJlc3RvcmUgdGltZXN0YW1wcyAoMDAwMS0wMS0wMVQwMDowMDowMFopLlxuLyoqXG4gKiBBIGBUaW1lc3RhbXBgIHJlcHJlc2VudHMgYSBwb2ludCBpbiB0aW1lIGluZGVwZW5kZW50IG9mIGFueSB0aW1lIHpvbmUgb3JcbiAqIGNhbGVuZGFyLCByZXByZXNlbnRlZCBhcyBzZWNvbmRzIGFuZCBmcmFjdGlvbnMgb2Ygc2Vjb25kcyBhdCBuYW5vc2Vjb25kXG4gKiByZXNvbHV0aW9uIGluIFVUQyBFcG9jaCB0aW1lLlxuICpcbiAqIEl0IGlzIGVuY29kZWQgdXNpbmcgdGhlIFByb2xlcHRpYyBHcmVnb3JpYW4gQ2FsZW5kYXIgd2hpY2ggZXh0ZW5kcyB0aGVcbiAqIEdyZWdvcmlhbiBjYWxlbmRhciBiYWNrd2FyZHMgdG8geWVhciBvbmUuIEl0IGlzIGVuY29kZWQgYXNzdW1pbmcgYWxsIG1pbnV0ZXNcbiAqIGFyZSA2MCBzZWNvbmRzIGxvbmcsIGkuZS4gbGVhcCBzZWNvbmRzIGFyZSBcInNtZWFyZWRcIiBzbyB0aGF0IG5vIGxlYXAgc2Vjb25kXG4gKiB0YWJsZSBpcyBuZWVkZWQgZm9yIGludGVycHJldGF0aW9uLiBSYW5nZSBpcyBmcm9tIDAwMDEtMDEtMDFUMDA6MDA6MDBaIHRvXG4gKiA5OTk5LTEyLTMxVDIzOjU5OjU5Ljk5OTk5OTk5OVouXG4gKlxuICogRm9yIGV4YW1wbGVzIGFuZCBmdXJ0aGVyIHNwZWNpZmljYXRpb25zLCByZWZlciB0byB0aGVcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3Byb3RvYnVmL2Jsb2IvbWFzdGVyL3NyYy9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIHwgVGltZXN0YW1wIGRlZmluaXRpb259LlxuICovXG5jbGFzcyBUaW1lc3RhbXAge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlY29uZHMgLSBUaGUgbnVtYmVyIG9mIHNlY29uZHMgb2YgVVRDIHRpbWUgc2luY2UgVW5peCBlcG9jaFxuICAgICAqICAgICAxOTcwLTAxLTAxVDAwOjAwOjAwWi4gTXVzdCBiZSBmcm9tIDAwMDEtMDEtMDFUMDA6MDA6MDBaIHRvXG4gICAgICogICAgIDk5OTktMTItMzFUMjM6NTk6NTlaIGluY2x1c2l2ZS5cbiAgICAgKiBAcGFyYW0gbmFub3NlY29uZHMgLSBUaGUgbm9uLW5lZ2F0aXZlIGZyYWN0aW9ucyBvZiBhIHNlY29uZCBhdCBuYW5vc2Vjb25kXG4gICAgICogICAgIHJlc29sdXRpb24uIE5lZ2F0aXZlIHNlY29uZCB2YWx1ZXMgd2l0aCBmcmFjdGlvbnMgbXVzdCBzdGlsbCBoYXZlXG4gICAgICogICAgIG5vbi1uZWdhdGl2ZSBuYW5vc2Vjb25kcyB2YWx1ZXMgdGhhdCBjb3VudCBmb3J3YXJkIGluIHRpbWUuIE11c3QgYmVcbiAgICAgKiAgICAgZnJvbSAwIHRvIDk5OSw5OTksOTk5IGluY2x1c2l2ZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHNlY29uZHMgb2YgVVRDIHRpbWUgc2luY2UgVW5peCBlcG9jaCAxOTcwLTAxLTAxVDAwOjAwOjAwWi5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgZnJhY3Rpb25zIG9mIGEgc2Vjb25kIGF0IG5hbm9zZWNvbmQgcmVzb2x1dGlvbi4qXG4gICAgICovXG4gICAgdCkge1xuICAgICAgICBpZiAodGhpcy5zZWNvbmRzID0gZSwgdGhpcy5uYW5vc2Vjb25kcyA9IHQsIHQgPCAwKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIlRpbWVzdGFtcCBuYW5vc2Vjb25kcyBvdXQgb2YgcmFuZ2U6IFwiICsgdCk7XG4gICAgICAgIGlmICh0ID49IDFlOSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgbmFub3NlY29uZHMgb3V0IG9mIHJhbmdlOiBcIiArIHQpO1xuICAgICAgICBpZiAoZSA8IC02MjEzNTU5NjgwMCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgc2Vjb25kcyBvdXQgb2YgcmFuZ2U6IFwiICsgZSk7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBicmVhayBpbiB0aGUgeWVhciAxMCwwMDAuXG4gICAgICAgICAgICAgICAgaWYgKGUgPj0gMjUzNDAyMzAwODAwKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIlRpbWVzdGFtcCBzZWNvbmRzIG91dCBvZiByYW5nZTogXCIgKyBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0aW1lc3RhbXAgd2l0aCB0aGUgY3VycmVudCBkYXRlLCB3aXRoIG1pbGxpc2Vjb25kIHByZWNpc2lvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEgbmV3IHRpbWVzdGFtcCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgZGF0ZS5cbiAgICAgKi8gICAgc3RhdGljIG5vdygpIHtcbiAgICAgICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tTWlsbGlzKERhdGUubm93KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRpbWVzdGFtcCBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBpbml0aWFsaXplIHRoZSBgVGltZXN0YW1wYCBmcm9tLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IGBUaW1lc3RhbXBgIHJlcHJlc2VudGluZyB0aGUgc2FtZSBwb2ludCBpbiB0aW1lIGFzIHRoZSBnaXZlblxuICAgICAqICAgICBkYXRlLlxuICAgICAqLyAgICBzdGF0aWMgZnJvbURhdGUoZSkge1xuICAgICAgICByZXR1cm4gVGltZXN0YW1wLmZyb21NaWxsaXMoZS5nZXRUaW1lKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRpbWVzdGFtcCBmcm9tIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1pbGxpc2Vjb25kcyAtIE51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgVW5peCBlcG9jaFxuICAgICAqICAgICAxOTcwLTAxLTAxVDAwOjAwOjAwWi5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBgVGltZXN0YW1wYCByZXByZXNlbnRpbmcgdGhlIHNhbWUgcG9pbnQgaW4gdGltZSBhcyB0aGUgZ2l2ZW5cbiAgICAgKiAgICAgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAgICAgKi8gICAgc3RhdGljIGZyb21NaWxsaXMoZSkge1xuICAgICAgICBjb25zdCB0ID0gTWF0aC5mbG9vcihlIC8gMWUzKSwgbiA9IE1hdGguZmxvb3IoMWU2ICogKGUgLSAxZTMgKiB0KSk7XG4gICAgICAgIHJldHVybiBuZXcgVGltZXN0YW1wKHQsIG4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGBUaW1lc3RhbXBgIHRvIGEgSmF2YVNjcmlwdCBgRGF0ZWAgb2JqZWN0LiBUaGlzIGNvbnZlcnNpb25cbiAgICAgKiBjYXVzZXMgYSBsb3NzIG9mIHByZWNpc2lvbiBzaW5jZSBgRGF0ZWAgb2JqZWN0cyBvbmx5IHN1cHBvcnQgbWlsbGlzZWNvbmRcbiAgICAgKiBwcmVjaXNpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBKYXZhU2NyaXB0IGBEYXRlYCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzYW1lIHBvaW50IGluIHRpbWUgYXNcbiAgICAgKiAgICAgdGhpcyBgVGltZXN0YW1wYCwgd2l0aCBtaWxsaXNlY29uZCBwcmVjaXNpb24uXG4gICAgICovICAgIHRvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudG9NaWxsaXMoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgYFRpbWVzdGFtcGAgdG8gYSBudW1lcmljIHRpbWVzdGFtcCAoaW4gbWlsbGlzZWNvbmRzIHNpbmNlXG4gICAgICogZXBvY2gpLiBUaGlzIG9wZXJhdGlvbiBjYXVzZXMgYSBsb3NzIG9mIHByZWNpc2lvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBwb2ludCBpbiB0aW1lIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyB0aW1lc3RhbXAsIHJlcHJlc2VudGVkIGFzXG4gICAgICogICAgIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIFVuaXggZXBvY2ggMTk3MC0wMS0wMVQwMDowMDowMFouXG4gICAgICovICAgIHRvTWlsbGlzKCkge1xuICAgICAgICByZXR1cm4gMWUzICogdGhpcy5zZWNvbmRzICsgdGhpcy5uYW5vc2Vjb25kcyAvIDFlNjtcbiAgICB9XG4gICAgX2NvbXBhcmVUbyhlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlY29uZHMgPT09IGUuc2Vjb25kcyA/IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKHRoaXMubmFub3NlY29uZHMsIGUubmFub3NlY29uZHMpIDogX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IodGhpcy5zZWNvbmRzLCBlLnNlY29uZHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgVGltZXN0YW1wYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIC0gVGhlIGBUaW1lc3RhbXBgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgYFRpbWVzdGFtcGAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKi8gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiBlLnNlY29uZHMgPT09IHRoaXMuc2Vjb25kcyAmJiBlLm5hbm9zZWNvbmRzID09PSB0aGlzLm5hbm9zZWNvbmRzO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBgVGltZXN0YW1wYC4gKi8gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIlRpbWVzdGFtcChzZWNvbmRzPVwiICsgdGhpcy5zZWNvbmRzICsgXCIsIG5hbm9zZWNvbmRzPVwiICsgdGhpcy5uYW5vc2Vjb25kcyArIFwiKVwiO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIEpTT04tc2VyaWFsaXphYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgYFRpbWVzdGFtcGAuICovICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlY29uZHM6IHRoaXMuc2Vjb25kcyxcbiAgICAgICAgICAgIG5hbm9zZWNvbmRzOiB0aGlzLm5hbm9zZWNvbmRzXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgb2JqZWN0IHRvIGEgcHJpbWl0aXZlIHN0cmluZywgd2hpY2ggYWxsb3dzIGBUaW1lc3RhbXBgIG9iamVjdHNcbiAgICAgKiB0byBiZSBjb21wYXJlZCB1c2luZyB0aGUgYD5gLCBgPD1gLCBgPj1gIGFuZCBgPmAgb3BlcmF0b3JzLlxuICAgICAqLyAgICB2YWx1ZU9mKCkge1xuICAgICAgICAvLyBUaGlzIG1ldGhvZCByZXR1cm5zIGEgc3RyaW5nIG9mIHRoZSBmb3JtIDxzZWNvbmRzPi48bmFub3NlY29uZHM+IHdoZXJlXG4gICAgICAgIC8vIDxzZWNvbmRzPiBpcyB0cmFuc2xhdGVkIHRvIGhhdmUgYSBub24tbmVnYXRpdmUgdmFsdWUgYW5kIGJvdGggPHNlY29uZHM+XG4gICAgICAgIC8vIGFuZCA8bmFub3NlY29uZHM+IGFyZSBsZWZ0LXBhZGRlZCB3aXRoIHplcm9lcyB0byBiZSBhIGNvbnNpc3RlbnQgbGVuZ3RoLlxuICAgICAgICAvLyBTdHJpbmdzIHdpdGggdGhpcyBmb3JtYXQgdGhlbiBoYXZlIGEgbGV4aW9ncmFwaGljYWwgb3JkZXJpbmcgdGhhdCBtYXRjaGVzXG4gICAgICAgIC8vIHRoZSBleHBlY3RlZCBvcmRlcmluZy4gVGhlIDxzZWNvbmRzPiB0cmFuc2xhdGlvbiBpcyBkb25lIHRvIGF2b2lkIGhhdmluZ1xuICAgICAgICAvLyBhIGxlYWRpbmcgbmVnYXRpdmUgc2lnbiAoaS5lLiBhIGxlYWRpbmcgJy0nIGNoYXJhY3RlcikgaW4gaXRzIHN0cmluZ1xuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiwgd2hpY2ggd291bGQgYWZmZWN0IGl0cyBsZXhpb2dyYXBoaWNhbCBvcmRlcmluZy5cbiAgICAgICAgY29uc3QgZSA9IHRoaXMuc2Vjb25kcyAtIC02MjEzNTU5NjgwMDtcbiAgICAgICAgLy8gTm90ZTogVXAgdG8gMTIgZGVjaW1hbCBkaWdpdHMgYXJlIHJlcXVpcmVkIHRvIHJlcHJlc2VudCBhbGwgdmFsaWRcbiAgICAgICAgLy8gJ3NlY29uZHMnIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKGUpLnBhZFN0YXJ0KDEyLCBcIjBcIikgKyBcIi5cIiArIFN0cmluZyh0aGlzLm5hbm9zZWNvbmRzKS5wYWRTdGFydCg5LCBcIjBcIik7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIHZlcnNpb24gb2YgYSBkb2N1bWVudCBpbiBGaXJlc3RvcmUuIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIHZlcnNpb25cbiAqIHRpbWVzdGFtcCwgc3VjaCBhcyB1cGRhdGVfdGltZSBvciByZWFkX3RpbWUuXG4gKi8gY2xhc3MgU25hcHNob3RWZXJzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gZTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21UaW1lc3RhbXAoZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNuYXBzaG90VmVyc2lvbihlKTtcbiAgICB9XG4gICAgc3RhdGljIG1pbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTbmFwc2hvdFZlcnNpb24obmV3IFRpbWVzdGFtcCgwLCAwKSk7XG4gICAgfVxuICAgIHN0YXRpYyBtYXgoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU25hcHNob3RWZXJzaW9uKG5ldyBUaW1lc3RhbXAoMjUzNDAyMzAwNzk5LCA5OTk5OTk5OTkpKTtcbiAgICB9XG4gICAgY29tcGFyZVRvKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wLl9jb21wYXJlVG8oZS50aW1lc3RhbXApO1xuICAgIH1cbiAgICBpc0VxdWFsKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wLmlzRXF1YWwoZS50aW1lc3RhbXApO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIG51bWJlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVyc2lvbiBmb3IgdXNlIGluIHNwZWMgdGVzdHMuICovICAgIHRvTWljcm9zZWNvbmRzKCkge1xuICAgICAgICAvLyBDb252ZXJ0IHRvIG1pY3Jvc2Vjb25kcy5cbiAgICAgICAgcmV0dXJuIDFlNiAqIHRoaXMudGltZXN0YW1wLnNlY29uZHMgKyB0aGlzLnRpbWVzdGFtcC5uYW5vc2Vjb25kcyAvIDFlMztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIlNuYXBzaG90VmVyc2lvbihcIiArIHRoaXMudGltZXN0YW1wLnRvU3RyaW5nKCkgKyBcIilcIjtcbiAgICB9XG4gICAgdG9UaW1lc3RhbXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVzdGFtcDtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFBhdGggcmVwcmVzZW50cyBhbiBvcmRlcmVkIHNlcXVlbmNlIG9mIHN0cmluZyBzZWdtZW50cy5cbiAqL1xuY2xhc3MgQmFzZVBhdGgge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4pIHtcbiAgICAgICAgdm9pZCAwID09PSB0ID8gdCA9IDAgOiB0ID4gZS5sZW5ndGggJiYgZmFpbCgpLCB2b2lkIDAgPT09IG4gPyBuID0gZS5sZW5ndGggLSB0IDogbiA+IGUubGVuZ3RoIC0gdCAmJiBmYWlsKCksIFxuICAgICAgICB0aGlzLnNlZ21lbnRzID0gZSwgdGhpcy5vZmZzZXQgPSB0LCB0aGlzLmxlbiA9IG47XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlbjtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiAwID09PSBCYXNlUGF0aC5jb21wYXJhdG9yKHRoaXMsIGUpO1xuICAgIH1cbiAgICBjaGlsZChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnNlZ21lbnRzLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmxpbWl0KCkpO1xuICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIEJhc2VQYXRoID8gZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIHQucHVzaChlKTtcbiAgICAgICAgfSkpIDogdC5wdXNoKGUpLCB0aGlzLmNvbnN0cnVjdCh0KTtcbiAgICB9XG4gICAgLyoqIFRoZSBpbmRleCBvZiBvbmUgcGFzdCB0aGUgbGFzdCBzZWdtZW50IG9mIHRoZSBwYXRoLiAqLyAgICBsaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ICsgdGhpcy5sZW5ndGg7XG4gICAgfVxuICAgIHBvcEZpcnN0KGUpIHtcbiAgICAgICAgcmV0dXJuIGUgPSB2b2lkIDAgPT09IGUgPyAxIDogZSwgdGhpcy5jb25zdHJ1Y3QodGhpcy5zZWdtZW50cywgdGhpcy5vZmZzZXQgKyBlLCB0aGlzLmxlbmd0aCAtIGUpO1xuICAgIH1cbiAgICBwb3BMYXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3QodGhpcy5zZWdtZW50cywgdGhpcy5vZmZzZXQsIHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIGZpcnN0U2VnbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VnbWVudHNbdGhpcy5vZmZzZXRdO1xuICAgIH1cbiAgICBsYXN0U2VnbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIGdldChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzW3RoaXMub2Zmc2V0ICsgZV07XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAwID09PSB0aGlzLmxlbmd0aDtcbiAgICB9XG4gICAgaXNQcmVmaXhPZihlKSB7XG4gICAgICAgIGlmIChlLmxlbmd0aCA8IHRoaXMubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdGhpcy5sZW5ndGg7IHQrKykgaWYgKHRoaXMuZ2V0KHQpICE9PSBlLmdldCh0KSkgcmV0dXJuICExO1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIGlzSW1tZWRpYXRlUGFyZW50T2YoZSkge1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggKyAxICE9PSBlLmxlbmd0aCkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRoaXMubGVuZ3RoOyB0KyspIGlmICh0aGlzLmdldCh0KSAhPT0gZS5nZXQodCkpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBmb3JFYWNoKGUpIHtcbiAgICAgICAgZm9yIChsZXQgdCA9IHRoaXMub2Zmc2V0LCBuID0gdGhpcy5saW1pdCgpOyB0IDwgbjsgdCsrKSBlKHRoaXMuc2VnbWVudHNbdF0pO1xuICAgIH1cbiAgICB0b0FycmF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50cy5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5saW1pdCgpKTtcbiAgICB9XG4gICAgc3RhdGljIGNvbXBhcmF0b3IoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gTWF0aC5taW4oZS5sZW5ndGgsIHQubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCBuOyByKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmdldChyKSwgaSA9IHQuZ2V0KHIpO1xuICAgICAgICAgICAgaWYgKG4gPCBpKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAobiA+IGkpIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlLmxlbmd0aCA8IHQubGVuZ3RoID8gLTEgOiBlLmxlbmd0aCA+IHQubGVuZ3RoID8gMSA6IDA7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgc2xhc2gtc2VwYXJhdGVkIHBhdGggZm9yIG5hdmlnYXRpbmcgcmVzb3VyY2VzIChkb2N1bWVudHMgYW5kIGNvbGxlY3Rpb25zKVxuICogd2l0aGluIEZpcmVzdG9yZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqLyBjbGFzcyBSZXNvdXJjZVBhdGggZXh0ZW5kcyBCYXNlUGF0aCB7XG4gICAgY29uc3RydWN0KGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvdXJjZVBhdGgoZSwgdCwgbik7XG4gICAgfVxuICAgIGNhbm9uaWNhbFN0cmluZygpIHtcbiAgICAgICAgLy8gTk9URTogVGhlIGNsaWVudCBpcyBpZ25vcmFudCBvZiBhbnkgcGF0aCBzZWdtZW50cyBjb250YWluaW5nIGVzY2FwZVxuICAgICAgICAvLyBzZXF1ZW5jZXMgKGUuZy4gX19pZDEyM19fKSBhbmQganVzdCBwYXNzZXMgdGhlbSB0aHJvdWdoIHJhdyAodGhleSBleGlzdFxuICAgICAgICAvLyBmb3IgbGVnYWN5IHJlYXNvbnMgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBmcmVxdWVudGx5KS5cbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLmpvaW4oXCIvXCIpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2Fub25pY2FsU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwYXRoXG4gICAgICogd2hlcmUgZWFjaCBwYXRoIHNlZ21lbnQgaGFzIGJlZW4gZW5jb2RlZCB3aXRoXG4gICAgICogYGVuY29kZVVSSUNvbXBvbmVudGAuXG4gICAgICovICAgIHRvVXJpRW5jb2RlZFN0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLm1hcChlbmNvZGVVUklDb21wb25lbnQpLmpvaW4oXCIvXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVzb3VyY2UgcGF0aCBmcm9tIHRoZSBnaXZlbiBzbGFzaC1kZWxpbWl0ZWQgc3RyaW5nLiBJZiBtdWx0aXBsZVxuICAgICAqIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIGFsbCBjb21wb25lbnRzIGFyZSBjb21iaW5lZC4gTGVhZGluZyBhbmQgdHJhaWxpbmdcbiAgICAgKiBzbGFzaGVzIGZyb20gYWxsIGNvbXBvbmVudHMgYXJlIGlnbm9yZWQuXG4gICAgICovICAgIHN0YXRpYyBmcm9tU3RyaW5nKC4uLmUpIHtcbiAgICAgICAgLy8gTk9URTogVGhlIGNsaWVudCBpcyBpZ25vcmFudCBvZiBhbnkgcGF0aCBzZWdtZW50cyBjb250YWluaW5nIGVzY2FwZVxuICAgICAgICAvLyBzZXF1ZW5jZXMgKGUuZy4gX19pZDEyM19fKSBhbmQganVzdCBwYXNzZXMgdGhlbSB0aHJvdWdoIHJhdyAodGhleSBleGlzdFxuICAgICAgICAvLyBmb3IgbGVnYWN5IHJlYXNvbnMgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBmcmVxdWVudGx5KS5cbiAgICAgICAgY29uc3QgdCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG4gb2YgZSkge1xuICAgICAgICAgICAgaWYgKG4uaW5kZXhPZihcIi8vXCIpID49IDApIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHNlZ21lbnQgKCR7bn0pLiBQYXRocyBtdXN0IG5vdCBjb250YWluIC8vIGluIHRoZW0uYCk7XG4gICAgICAgICAgICAvLyBTdHJpcCBsZWFkaW5nIGFuZCB0cmFsaW5nIHNsYXNoZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnB1c2goLi4ubi5zcGxpdChcIi9cIikuZmlsdGVyKChlID0+IGUubGVuZ3RoID4gMCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJlc291cmNlUGF0aCh0KTtcbiAgICB9XG4gICAgc3RhdGljIGVtcHR5UGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvdXJjZVBhdGgoW10pO1xuICAgIH1cbn1cblxuY29uc3QgdiA9IC9eW19hLXpBLVpdW19hLXpBLVowLTldKiQvO1xuXG4vKipcbiAqIEEgZG90LXNlcGFyYXRlZCBwYXRoIGZvciBuYXZpZ2F0aW5nIHN1Yi1vYmplY3RzIHdpdGhpbiBhIGRvY3VtZW50LlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgRmllbGRQYXRoJDEgZXh0ZW5kcyBCYXNlUGF0aCB7XG4gICAgY29uc3RydWN0KGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFBhdGgkMShlLCB0LCBuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzdHJpbmcgY291bGQgYmUgdXNlZCBhcyBhIHNlZ21lbnQgaW4gYSBmaWVsZCBwYXRoXG4gICAgICogd2l0aG91dCBlc2NhcGluZy5cbiAgICAgKi8gICAgc3RhdGljIGlzVmFsaWRJZGVudGlmaWVyKGUpIHtcbiAgICAgICAgcmV0dXJuIHYudGVzdChlKTtcbiAgICB9XG4gICAgY2Fub25pY2FsU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCkubWFwKChlID0+IChlID0gZS5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIikucmVwbGFjZSgvYC9nLCBcIlxcXFxgXCIpLCBcbiAgICAgICAgRmllbGRQYXRoJDEuaXNWYWxpZElkZW50aWZpZXIoZSkgfHwgKGUgPSBcImBcIiArIGUgKyBcImBcIiksIGUpKSkuam9pbihcIi5cIik7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5vbmljYWxTdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgZmllbGQgcmVmZXJlbmNlcyB0aGUga2V5IG9mIGEgZG9jdW1lbnQuXG4gICAgICovICAgIGlzS2V5RmllbGQoKSB7XG4gICAgICAgIHJldHVybiAxID09PSB0aGlzLmxlbmd0aCAmJiBcIl9fbmFtZV9fXCIgPT09IHRoaXMuZ2V0KDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZmllbGQgZGVzaWduYXRpbmcgdGhlIGtleSBvZiBhIGRvY3VtZW50LlxuICAgICAqLyAgICBzdGF0aWMga2V5RmllbGQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRQYXRoJDEoWyBcIl9fbmFtZV9fXCIgXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGZpZWxkIHN0cmluZyBmcm9tIHRoZSBnaXZlbiBzZXJ2ZXItZm9ybWF0dGVkIHN0cmluZy5cbiAgICAgKlxuICAgICAqIC0gU3BsaXR0aW5nIHRoZSBlbXB0eSBzdHJpbmcgaXMgbm90IGFsbG93ZWQgKGZvciBub3cgYXQgbGVhc3QpLlxuICAgICAqIC0gRW1wdHkgc2VnbWVudHMgd2l0aGluIHRoZSBzdHJpbmcgKGUuZy4gaWYgdGhlcmUgYXJlIHR3byBjb25zZWN1dGl2ZVxuICAgICAqICAgc2VwYXJhdG9ycykgYXJlIG5vdCBhbGxvd2VkLlxuICAgICAqXG4gICAgICogVE9ETyhiLzM3MjQ0MTU3KTogd2Ugc2hvdWxkIG1ha2UgdGhpcyBtb3JlIHN0cmljdC4gUmlnaHQgbm93LCBpdCBhbGxvd3NcbiAgICAgKiBub24taWRlbnRpZmllciBwYXRoIGNvbXBvbmVudHMsIGV2ZW4gaWYgdGhleSBhcmVuJ3QgZXNjYXBlZC5cbiAgICAgKi8gICAgc3RhdGljIGZyb21TZXJ2ZXJGb3JtYXQoZSkge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIGxldCBuID0gXCJcIiwgciA9IDA7XG4gICAgICAgIGNvbnN0IF9fUFJJVkFURV9hZGRDdXJyZW50U2VnbWVudCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICgwID09PSBuLmxlbmd0aCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgZmllbGQgcGF0aCAoJHtlfSkuIFBhdGhzIG11c3Qgbm90IGJlIGVtcHR5LCBiZWdpbiB3aXRoICcuJywgZW5kIHdpdGggJy4nLCBvciBjb250YWluICcuLidgKTtcbiAgICAgICAgICAgIHQucHVzaChuKSwgbiA9IFwiXCI7XG4gICAgICAgIH07XG4gICAgICAgIGxldCBpID0gITE7XG4gICAgICAgIGZvciAoO3IgPCBlLmxlbmd0aDsgKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZVtyXTtcbiAgICAgICAgICAgIGlmIChcIlxcXFxcIiA9PT0gdCkge1xuICAgICAgICAgICAgICAgIGlmIChyICsgMSA9PT0gZS5sZW5ndGgpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIFwiUGF0aCBoYXMgdHJhaWxpbmcgZXNjYXBlIGNoYXJhY3RlcjogXCIgKyBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gZVtyICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKFwiXFxcXFwiICE9PSB0ICYmIFwiLlwiICE9PSB0ICYmIFwiYFwiICE9PSB0KSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIlBhdGggaGFzIGludmFsaWQgZXNjYXBlIHNlcXVlbmNlOiBcIiArIGUpO1xuICAgICAgICAgICAgICAgIG4gKz0gdCwgciArPSAyO1xuICAgICAgICAgICAgfSBlbHNlIFwiYFwiID09PSB0ID8gKGkgPSAhaSwgcisrKSA6IFwiLlwiICE9PSB0IHx8IGkgPyAobiArPSB0LCByKyspIDogKF9fUFJJVkFURV9hZGRDdXJyZW50U2VnbWVudCgpLCBcbiAgICAgICAgICAgIHIrKyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9fUFJJVkFURV9hZGRDdXJyZW50U2VnbWVudCgpLCBpKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIlVudGVybWluYXRlZCBgIGluIHBhdGg6IFwiICsgZSk7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRQYXRoJDEodCk7XG4gICAgfVxuICAgIHN0YXRpYyBlbXB0eVBhdGgoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRQYXRoJDEoW10pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgRG9jdW1lbnRLZXkge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gZTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21QYXRoKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEtleShSZXNvdXJjZVBhdGguZnJvbVN0cmluZyhlKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tTmFtZShlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRLZXkoUmVzb3VyY2VQYXRoLmZyb21TdHJpbmcoZSkucG9wRmlyc3QoNSkpO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRLZXkoUmVzb3VyY2VQYXRoLmVtcHR5UGF0aCgpKTtcbiAgICB9XG4gICAgZ2V0IGNvbGxlY3Rpb25Hcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC5wb3BMYXN0KCkubGFzdFNlZ21lbnQoKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZG9jdW1lbnQgaXMgaW4gdGhlIHNwZWNpZmllZCBjb2xsZWN0aW9uSWQuICovICAgIGhhc0NvbGxlY3Rpb25JZChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgubGVuZ3RoID49IDIgJiYgdGhpcy5wYXRoLmdldCh0aGlzLnBhdGgubGVuZ3RoIC0gMikgPT09IGU7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIGdyb3VwIChpLmUuIHRoZSBuYW1lIG9mIHRoZSBwYXJlbnQgY29sbGVjdGlvbikgZm9yIHRoaXMga2V5LiAqLyAgICBnZXRDb2xsZWN0aW9uR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGguZ2V0KHRoaXMucGF0aC5sZW5ndGggLSAyKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIGZ1bGx5IHF1YWxpZmllZCBwYXRoIHRvIHRoZSBwYXJlbnQgY29sbGVjdGlvbi4gKi8gICAgZ2V0Q29sbGVjdGlvblBhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgucG9wTGFzdCgpO1xuICAgIH1cbiAgICBpc0VxdWFsKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGUgJiYgMCA9PT0gUmVzb3VyY2VQYXRoLmNvbXBhcmF0b3IodGhpcy5wYXRoLCBlLnBhdGgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC50b1N0cmluZygpO1xuICAgIH1cbiAgICBzdGF0aWMgY29tcGFyYXRvcihlLCB0KSB7XG4gICAgICAgIHJldHVybiBSZXNvdXJjZVBhdGguY29tcGFyYXRvcihlLnBhdGgsIHQucGF0aCk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0RvY3VtZW50S2V5KGUpIHtcbiAgICAgICAgcmV0dXJuIGUubGVuZ3RoICUgMiA9PSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGRvY3VtZW50IGtleSB3aXRoIHRoZSBnaXZlbiBzZWdtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZWdtZW50cyAtIFRoZSBzZWdtZW50cyBvZiB0aGUgcGF0aCB0byB0aGUgZG9jdW1lbnRcbiAgICAgKiBAcmV0dXJucyBBIG5ldyBpbnN0YW5jZSBvZiBEb2N1bWVudEtleVxuICAgICAqLyAgICBzdGF0aWMgZnJvbVNlZ21lbnRzKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEtleShuZXcgUmVzb3VyY2VQYXRoKGUuc2xpY2UoKSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIGluaXRpYWwgbXV0YXRpb24gYmF0Y2ggaWQgZm9yIGVhY2ggaW5kZXguIEdldHMgdXBkYXRlZCBkdXJpbmcgaW5kZXhcbiAqIGJhY2tmaWxsLlxuICovXG4vKipcbiAqIEFuIGluZGV4IGRlZmluaXRpb24gZm9yIGZpZWxkIGluZGV4ZXMgaW4gRmlyZXN0b3JlLlxuICpcbiAqIEV2ZXJ5IGluZGV4IGlzIGFzc29jaWF0ZWQgd2l0aCBhIGNvbGxlY3Rpb24uIFRoZSBkZWZpbml0aW9uIGNvbnRhaW5zIGEgbGlzdFxuICogb2YgZmllbGRzIGFuZCB0aGVpciBpbmRleCBraW5kICh3aGljaCBjYW4gYmUgYEFTQ0VORElOR2AsIGBERVNDRU5ESU5HYCBvclxuICogYENPTlRBSU5TYCBmb3IgQXJyYXlDb250YWlucy9BcnJheUNvbnRhaW5zQW55IHF1ZXJpZXMpLlxuICpcbiAqIFVubGlrZSB0aGUgYmFja2VuZCwgdGhlIFNESyBkb2VzIG5vdCBkaWZmZXJlbnRpYXRlIGJldHdlZW4gY29sbGVjdGlvbiBvclxuICogY29sbGVjdGlvbiBncm91cC1zY29wZWQgaW5kaWNlcy4gRXZlcnkgaW5kZXggY2FuIGJlIHVzZWQgZm9yIGJvdGggc2luZ2xlXG4gKiBjb2xsZWN0aW9uIGFuZCBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJpZXMuXG4gKi9cbmNsYXNzIEZpZWxkSW5kZXgge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBpbmRleCBJRC4gUmV0dXJucyAtMSBpZiB0aGUgaW5kZXggSUQgaXMgbm90IGF2YWlsYWJsZSAoZS5nLiB0aGUgaW5kZXhcbiAgICAgKiBoYXMgbm90IHlldCBiZWVuIHBlcnNpc3RlZCkuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqIFRoZSBjb2xsZWN0aW9uIElEIHRoaXMgaW5kZXggYXBwbGllcyB0by4gKi9cbiAgICB0LCBcbiAgICAvKiogVGhlIGZpZWxkIHNlZ21lbnRzIGZvciB0aGlzIGluZGV4LiAqL1xuICAgIG4sIFxuICAgIC8qKiBTaG93cyBob3cgdXAtdG8tZGF0ZSB0aGUgaW5kZXggaXMgZm9yIHRoZSBjdXJyZW50IHVzZXIuICovXG4gICAgcikge1xuICAgICAgICB0aGlzLmluZGV4SWQgPSBlLCB0aGlzLmNvbGxlY3Rpb25Hcm91cCA9IHQsIHRoaXMuZmllbGRzID0gbiwgdGhpcy5pbmRleFN0YXRlID0gcjtcbiAgICB9XG59XG5cbi8qKiBBbiBJRCBmb3IgYW4gaW5kZXggdGhhdCBoYXMgbm90IHlldCBiZWVuIGFkZGVkIHRvIHBlcnNpc3RlbmNlLiAgKi9cbi8qKiBSZXR1cm5zIHRoZSBBcnJheUNvbnRhaW5zL0FycmF5Q29udGFpbnNBbnkgc2VnbWVudCBmb3IgdGhpcyBpbmRleC4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9maWVsZEluZGV4R2V0QXJyYXlTZWdtZW50KGUpIHtcbiAgICByZXR1cm4gZS5maWVsZHMuZmluZCgoZSA9PiAyIC8qIEluZGV4S2luZC5DT05UQUlOUyAqLyA9PT0gZS5raW5kKSk7XG59XG5cbi8qKiBSZXR1cm5zIGFsbCBkaXJlY3Rpb25hbCAoYXNjZW5kaW5nL2Rlc2NlbmRpbmcpIHNlZ21lbnRzIGZvciB0aGlzIGluZGV4LiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZmllbGRJbmRleEdldERpcmVjdGlvbmFsU2VnbWVudHMoZSkge1xuICAgIHJldHVybiBlLmZpZWxkcy5maWx0ZXIoKGUgPT4gMiAvKiBJbmRleEtpbmQuQ09OVEFJTlMgKi8gIT09IGUua2luZCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yZGVyIG9mIHRoZSBkb2N1bWVudCBrZXkgY29tcG9uZW50IGZvciB0aGUgZ2l2ZW4gaW5kZXguXG4gKlxuICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBpbiB0aGUgV2ViIEluZGV4ZWREYiBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuLyoqXG4gKiBDb21wYXJlcyBpbmRleGVzIGJ5IGNvbGxlY3Rpb24gZ3JvdXAgYW5kIHNlZ21lbnRzLiBJZ25vcmVzIHVwZGF0ZSB0aW1lIGFuZFxuICogaW5kZXggSUQuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9maWVsZEluZGV4U2VtYW50aWNDb21wYXJhdG9yKGUsIHQpIHtcbiAgICBsZXQgbiA9IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKGUuY29sbGVjdGlvbkdyb3VwLCB0LmNvbGxlY3Rpb25Hcm91cCk7XG4gICAgaWYgKDAgIT09IG4pIHJldHVybiBuO1xuICAgIGZvciAobGV0IHIgPSAwOyByIDwgTWF0aC5taW4oZS5maWVsZHMubGVuZ3RoLCB0LmZpZWxkcy5sZW5ndGgpOyArK3IpIGlmIChuID0gX19QUklWQVRFX2luZGV4U2VnbWVudENvbXBhcmF0b3IoZS5maWVsZHNbcl0sIHQuZmllbGRzW3JdKSwgXG4gICAgMCAhPT0gbikgcmV0dXJuIG47XG4gICAgcmV0dXJuIF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKGUuZmllbGRzLmxlbmd0aCwgdC5maWVsZHMubGVuZ3RoKTtcbn1cblxuLyoqIFJldHVybnMgYSBkZWJ1ZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZmllbGQgaW5kZXggKi8gRmllbGRJbmRleC5VTktOT1dOX0lEID0gLTE7XG5cbi8qKiBBbiBpbmRleCBjb21wb25lbnQgY29uc2lzdGluZyBvZiBmaWVsZCBwYXRoIGFuZCBpbmRleCB0eXBlLiAgKi9cbmNsYXNzIEluZGV4U2VnbWVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFRoZSBmaWVsZCBwYXRoIG9mIHRoZSBjb21wb25lbnQuICovXG4gICAgZSwgXG4gICAgLyoqIFRoZSBmaWVsZHMgc29ydGluZyBvcmRlci4gKi9cbiAgICB0KSB7XG4gICAgICAgIHRoaXMuZmllbGRQYXRoID0gZSwgdGhpcy5raW5kID0gdDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9pbmRleFNlZ21lbnRDb21wYXJhdG9yKGUsIHQpIHtcbiAgICBjb25zdCBuID0gRmllbGRQYXRoJDEuY29tcGFyYXRvcihlLmZpZWxkUGF0aCwgdC5maWVsZFBhdGgpO1xuICAgIHJldHVybiAwICE9PSBuID8gbiA6IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKGUua2luZCwgdC5raW5kKTtcbn1cblxuLyoqXG4gKiBTdG9yZXMgdGhlIFwiaGlnaCB3YXRlciBtYXJrXCIgdGhhdCBpbmRpY2F0ZXMgaG93IHVwZGF0ZWQgdGhlIEluZGV4IGlzIGZvciB0aGVcbiAqIGN1cnJlbnQgdXNlci5cbiAqLyBjbGFzcyBJbmRleFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hlbiB0aGUgaW5kZXggd2FzIGxhc3QgdXBkYXRlZCAocmVsYXRpdmUgdG8gb3RoZXIgaW5kZXhlcykuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqIFRoZSB0aGUgbGF0ZXN0IGluZGV4ZWQgcmVhZCB0aW1lLCBkb2N1bWVudCBhbmQgYmF0Y2ggaWQuICovXG4gICAgdCkge1xuICAgICAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gZSwgdGhpcy5vZmZzZXQgPSB0O1xuICAgIH1cbiAgICAvKiogVGhlIHN0YXRlIG9mIGFuIGluZGV4IHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiBiYWNrZmlsbGVkLiAqLyAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW5kZXhTdGF0ZSgwLCBJbmRleE9mZnNldC5taW4oKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2Zmc2V0IHRoYXQgbWF0Y2hlcyBhbGwgZG9jdW1lbnRzIHdpdGggYSByZWFkIHRpbWUgaGlnaGVyIHRoYW5cbiAqIGByZWFkVGltZWAuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX25ld0luZGV4T2Zmc2V0U3VjY2Vzc29yRnJvbVJlYWRUaW1lKGUsIHQpIHtcbiAgICAvLyBXZSB3YW50IHRvIGNyZWF0ZSBhbiBvZmZzZXQgdGhhdCBtYXRjaGVzIGFsbCBkb2N1bWVudHMgd2l0aCBhIHJlYWQgdGltZVxuICAgIC8vIGdyZWF0ZXIgdGhhbiB0aGUgcHJvdmlkZWQgcmVhZCB0aW1lLiBUbyBkbyBzbywgd2UgdGVjaG5pY2FsbHkgbmVlZCB0b1xuICAgIC8vIGNyZWF0ZSBhbiBvZmZzZXQgZm9yIGAocmVhZFRpbWUsIE1BWF9ET0NVTUVOVF9LRVkpYC4gV2hpbGUgd2UgY291bGQgdXNlXG4gICAgLy8gVW5pY29kZSBjb2RlcG9pbnRzIHRvIGdlbmVyYXRlIE1BWF9ET0NVTUVOVF9LRVksIGl0IGlzIG11Y2ggZWFzaWVyIHRvIHVzZVxuICAgIC8vIGAocmVhZFRpbWUgKyAxLCBEb2N1bWVudEtleS5lbXB0eSgpKWAgc2luY2UgYD4gRG9jdW1lbnRLZXkuZW1wdHkoKWAgbWF0Y2hlc1xuICAgIC8vIGFsbCB2YWxpZCBkb2N1bWVudCBJRHMuXG4gICAgY29uc3QgbiA9IGUudG9UaW1lc3RhbXAoKS5zZWNvbmRzLCByID0gZS50b1RpbWVzdGFtcCgpLm5hbm9zZWNvbmRzICsgMSwgaSA9IFNuYXBzaG90VmVyc2lvbi5mcm9tVGltZXN0YW1wKDFlOSA9PT0gciA/IG5ldyBUaW1lc3RhbXAobiArIDEsIDApIDogbmV3IFRpbWVzdGFtcChuLCByKSk7XG4gICAgcmV0dXJuIG5ldyBJbmRleE9mZnNldChpLCBEb2N1bWVudEtleS5lbXB0eSgpLCB0KTtcbn1cblxuLyoqIENyZWF0ZXMgYSBuZXcgb2Zmc2V0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkb2N1bWVudC4gKi8gZnVuY3Rpb24gX19QUklWQVRFX25ld0luZGV4T2Zmc2V0RnJvbURvY3VtZW50KGUpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4T2Zmc2V0KGUucmVhZFRpbWUsIGUua2V5LCAtMSk7XG59XG5cbi8qKlxuICogU3RvcmVzIHRoZSBsYXRlc3QgcmVhZCB0aW1lLCBkb2N1bWVudCBhbmQgYmF0Y2ggSUQgdGhhdCB3ZXJlIHByb2Nlc3NlZCBmb3IgYW5cbiAqIGluZGV4LlxuICovIGNsYXNzIEluZGV4T2Zmc2V0IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgbGF0ZXN0IHJlYWQgdGltZSB2ZXJzaW9uIHRoYXQgaGFzIGJlZW4gaW5kZXhlZCBieSBGaXJlc3RvcmUgZm9yIHRoaXNcbiAgICAgKiBmaWVsZCBpbmRleC5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBUaGUga2V5IG9mIHRoZSBsYXN0IGRvY3VtZW50IHRoYXQgd2FzIGluZGV4ZWQgZm9yIHRoaXMgcXVlcnkuIFVzZVxuICAgICAqIGBEb2N1bWVudEtleS5lbXB0eSgpYCBpZiBubyBkb2N1bWVudCBoYXMgYmVlbiBpbmRleGVkLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qXG4gICAgICogVGhlIGxhcmdlc3QgbXV0YXRpb24gYmF0Y2ggaWQgdGhhdCdzIGJlZW4gcHJvY2Vzc2VkIGJ5IEZpcmVzdG9yZS5cbiAgICAgKi9cbiAgICBuKSB7XG4gICAgICAgIHRoaXMucmVhZFRpbWUgPSBlLCB0aGlzLmRvY3VtZW50S2V5ID0gdCwgdGhpcy5sYXJnZXN0QmF0Y2hJZCA9IG47XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGFuIG9mZnNldCB0aGF0IHNvcnRzIGJlZm9yZSBhbGwgcmVndWxhciBvZmZzZXRzLiAqLyAgICBzdGF0aWMgbWluKCkge1xuICAgICAgICByZXR1cm4gbmV3IEluZGV4T2Zmc2V0KFNuYXBzaG90VmVyc2lvbi5taW4oKSwgRG9jdW1lbnRLZXkuZW1wdHkoKSwgLTEpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhbiBvZmZzZXQgdGhhdCBzb3J0cyBhZnRlciBhbGwgcmVndWxhciBvZmZzZXRzLiAqLyAgICBzdGF0aWMgbWF4KCkge1xuICAgICAgICByZXR1cm4gbmV3IEluZGV4T2Zmc2V0KFNuYXBzaG90VmVyc2lvbi5tYXgoKSwgRG9jdW1lbnRLZXkuZW1wdHkoKSwgLTEpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2luZGV4T2Zmc2V0Q29tcGFyYXRvcihlLCB0KSB7XG4gICAgbGV0IG4gPSBlLnJlYWRUaW1lLmNvbXBhcmVUbyh0LnJlYWRUaW1lKTtcbiAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiAobiA9IERvY3VtZW50S2V5LmNvbXBhcmF0b3IoZS5kb2N1bWVudEtleSwgdC5kb2N1bWVudEtleSksIFxuICAgIDAgIT09IG4gPyBuIDogX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IoZS5sYXJnZXN0QmF0Y2hJZCwgdC5sYXJnZXN0QmF0Y2hJZCkpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBGID0gXCJUaGUgY3VycmVudCB0YWIgaXMgbm90IGluIHRoZSByZXF1aXJlZCBzdGF0ZSB0byBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uLiBJdCBtaWdodCBiZSBuZWNlc3NhcnkgdG8gcmVmcmVzaCB0aGUgYnJvd3NlciB0YWIuXCI7XG5cbi8qKlxuICogQSBiYXNlIGNsYXNzIHJlcHJlc2VudGluZyBhIHBlcnNpc3RlbmNlIHRyYW5zYWN0aW9uLCBlbmNhcHN1bGF0aW5nIGJvdGggdGhlXG4gKiB0cmFuc2FjdGlvbidzIHNlcXVlbmNlIG51bWJlcnMgYXMgd2VsbCBhcyBhIGxpc3Qgb2Ygb25Db21taXR0ZWQgbGlzdGVuZXJzLlxuICpcbiAqIFdoZW4geW91IGNhbGwgUGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oKSwgaXQgd2lsbCBjcmVhdGUgYSB0cmFuc2FjdGlvbiBhbmRcbiAqIHBhc3MgaXQgdG8geW91ciBjYWxsYmFjay4gWW91IHRoZW4gcGFzcyBpdCB0byBhbnkgbWV0aG9kIHRoYXQgb3BlcmF0ZXNcbiAqIG9uIHBlcnNpc3RlbmNlLlxuICovIGNsYXNzIFBlcnNpc3RlbmNlVHJhbnNhY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm9uQ29tbWl0dGVkTGlzdGVuZXJzID0gW107XG4gICAgfVxuICAgIGFkZE9uQ29tbWl0dGVkTGlzdGVuZXIoZSkge1xuICAgICAgICB0aGlzLm9uQ29tbWl0dGVkTGlzdGVuZXJzLnB1c2goZSk7XG4gICAgfVxuICAgIHJhaXNlT25Db21taXR0ZWRFdmVudCgpIHtcbiAgICAgICAgdGhpcy5vbkNvbW1pdHRlZExpc3RlbmVycy5mb3JFYWNoKChlID0+IGUoKSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVmVyaWZpZXMgdGhlIGVycm9yIHRocm93biBieSBhIExvY2FsU3RvcmUgb3BlcmF0aW9uLiBJZiBhIExvY2FsU3RvcmVcbiAqIG9wZXJhdGlvbiBmYWlscyBiZWNhdXNlIHRoZSBwcmltYXJ5IGxlYXNlIGhhcyBiZWVuIHRha2VuIGJ5IGFub3RoZXIgY2xpZW50LFxuICogd2UgaWdub3JlIHRoZSBlcnJvciAodGhlIHBlcnNpc3RlbmNlIGxheWVyIHdpbGwgaW1tZWRpYXRlbHkgY2FsbFxuICogYGFwcGx5UHJpbWFyeUxlYXNlYCB0byBwcm9wYWdhdGUgdGhlIHByaW1hcnkgc3RhdGUgY2hhbmdlKS4gQWxsIG90aGVyIGVycm9yc1xuICogYXJlIHJlLXRocm93bi5cbiAqXG4gKiBAcGFyYW0gZXJyIC0gQW4gZXJyb3IgcmV0dXJuZWQgYnkgYSBMb2NhbFN0b3JlIG9wZXJhdGlvbi5cbiAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIHdlIHJlY292ZXJlZCwgb3IgdGhlIG9yaWdpbmFsIGVycm9yLlxuICovIGFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9pZ25vcmVJZlByaW1hcnlMZWFzZUxvc3MoZSkge1xuICAgIGlmIChlLmNvZGUgIT09IEMuRkFJTEVEX1BSRUNPTkRJVElPTiB8fCBlLm1lc3NhZ2UgIT09IEYpIHRocm93IGU7XG4gICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiTG9jYWxTdG9yZVwiLCBcIlVuZXhwZWN0ZWRseSBsb3N0IHByaW1hcnkgbGVhc2VcIik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFBlcnNpc3RlbmNlUHJvbWlzZSBpcyBlc3NlbnRpYWxseSBhIHJlLWltcGxlbWVudGF0aW9uIG9mIFByb21pc2UgZXhjZXB0XG4gKiBpdCBoYXMgYSAubmV4dCgpIG1ldGhvZCBpbnN0ZWFkIG9mIC50aGVuKCkgYW5kIC5uZXh0KCkgYW5kIC5jYXRjaCgpIGNhbGxiYWNrc1xuICogYXJlIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgd2hlbiBhIFBlcnNpc3RlbmNlUHJvbWlzZSByZXNvbHZlcyByYXRoZXIgdGhhblxuICogYXN5bmNocm9ub3VzbHkgKFByb21pc2UgaW1wbGVtZW50YXRpb25zIHVzZSBzZXRJbW1lZGlhdGUoKSBvciBzaW1pbGFyKS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSB0byBpbnRlcm9wZXJhdGUgd2l0aCBJbmRleGVkREIgd2hpY2ggd2lsbCBhdXRvbWF0aWNhbGx5XG4gKiBjb21taXQgdHJhbnNhY3Rpb25zIGlmIGNvbnRyb2wgaXMgcmV0dXJuZWQgdG8gdGhlIGV2ZW50IGxvb3Agd2l0aG91dFxuICogc3luY2hyb25vdXNseSBpbml0aWF0aW5nIGFub3RoZXIgb3BlcmF0aW9uIG9uIHRoZSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBOT1RFOiAudGhlbigpIGFuZCAuY2F0Y2goKSBvbmx5IGFsbG93IGEgc2luZ2xlIGNvbnN1bWVyLCB1bmxpa2Ugbm9ybWFsXG4gKiBQcm9taXNlcy5cbiAqLyBjbGFzcyBQZXJzaXN0ZW5jZVByb21pc2Uge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgLy8gTk9URTogbmV4dC9jYXRjaENhbGxiYWNrIHdpbGwgYWx3YXlzIHBvaW50IHRvIG91ciBvd24gd3JhcHBlciBmdW5jdGlvbnMsXG4gICAgICAgIC8vIG5vdCB0aGUgdXNlcidzIHJhdyBuZXh0KCkgb3IgY2F0Y2goKSBjYWxsYmFja3MuXG4gICAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbCwgdGhpcy5jYXRjaENhbGxiYWNrID0gbnVsbCwgXG4gICAgICAgIC8vIFdoZW4gdGhlIG9wZXJhdGlvbiByZXNvbHZlcywgd2UnbGwgc2V0IHJlc3VsdCBvciBlcnJvciBhbmQgbWFyayBpc0RvbmUuXG4gICAgICAgIHRoaXMucmVzdWx0ID0gdm9pZCAwLCB0aGlzLmVycm9yID0gdm9pZCAwLCB0aGlzLmlzRG9uZSA9ICExLCBcbiAgICAgICAgLy8gU2V0IHRvIHRydWUgd2hlbiAudGhlbigpIG9yIC5jYXRjaCgpIGFyZSBjYWxsZWQgYW5kIHByZXZlbnRzIGFkZGl0aW9uYWxcbiAgICAgICAgLy8gY2hhaW5pbmcuXG4gICAgICAgIHRoaXMuY2FsbGJhY2tBdHRhY2hlZCA9ICExLCBlKChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNEb25lID0gITAsIHRoaXMucmVzdWx0ID0gZSwgdGhpcy5uZXh0Q2FsbGJhY2sgJiYgXG4gICAgICAgICAgICAvLyB2YWx1ZSBzaG91bGQgYmUgZGVmaW5lZCB1bmxlc3MgVCBpcyBWb2lkLCBidXQgd2UgY2FuJ3QgZXhwcmVzc1xuICAgICAgICAgICAgLy8gdGhhdCBpbiB0aGUgdHlwZSBzeXN0ZW0uXG4gICAgICAgICAgICB0aGlzLm5leHRDYWxsYmFjayhlKTtcbiAgICAgICAgfSksIChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNEb25lID0gITAsIHRoaXMuZXJyb3IgPSBlLCB0aGlzLmNhdGNoQ2FsbGJhY2sgJiYgdGhpcy5jYXRjaENhbGxiYWNrKGUpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dCh2b2lkIDAsIGUpO1xuICAgIH1cbiAgICBuZXh0KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tBdHRhY2hlZCAmJiBmYWlsKCksIHRoaXMuY2FsbGJhY2tBdHRhY2hlZCA9ICEwLCB0aGlzLmlzRG9uZSA/IHRoaXMuZXJyb3IgPyB0aGlzLndyYXBGYWlsdXJlKHQsIHRoaXMuZXJyb3IpIDogdGhpcy53cmFwU3VjY2VzcyhlLCB0aGlzLnJlc3VsdCkgOiBuZXcgUGVyc2lzdGVuY2VQcm9taXNlKCgobiwgcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSB0ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndyYXBTdWNjZXNzKGUsIHQpLm5leHQobiwgcik7XG4gICAgICAgICAgICB9LCB0aGlzLmNhdGNoQ2FsbGJhY2sgPSBlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndyYXBGYWlsdXJlKHQsIGUpLm5leHQobiwgcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHRvUHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5uZXh0KGUsIHQpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHdyYXBVc2VyRnVuY3Rpb24oZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgUGVyc2lzdGVuY2VQcm9taXNlID8gdCA6IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3cmFwU3VjY2VzcyhlLCB0KSB7XG4gICAgICAgIHJldHVybiBlID8gdGhpcy53cmFwVXNlckZ1bmN0aW9uKCgoKSA9PiBlKHQpKSkgOiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0KTtcbiAgICB9XG4gICAgd3JhcEZhaWx1cmUoZSwgdCkge1xuICAgICAgICByZXR1cm4gZSA/IHRoaXMud3JhcFVzZXJGdW5jdGlvbigoKCkgPT4gZSh0KSkpIDogUGVyc2lzdGVuY2VQcm9taXNlLnJlamVjdCh0KTtcbiAgICB9XG4gICAgc3RhdGljIHJlc29sdmUoZSkge1xuICAgICAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlUHJvbWlzZSgoKHQsIG4pID0+IHtcbiAgICAgICAgICAgIHQoZSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgc3RhdGljIHJlamVjdChlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGVyc2lzdGVuY2VQcm9taXNlKCgodCwgbikgPT4ge1xuICAgICAgICAgICAgbihlKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzdGF0aWMgd2FpdEZvcihcbiAgICAvLyBBY2NlcHQgYWxsIFByb21pc2UgdHlwZXMgaW4gd2FpdEZvcigpLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZSkge1xuICAgICAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlUHJvbWlzZSgoKHQsIG4pID0+IHtcbiAgICAgICAgICAgIGxldCByID0gMCwgaSA9IDAsIHMgPSAhMTtcbiAgICAgICAgICAgIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgKytyLCBlLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgKytpLCBzICYmIGkgPT09IHIgJiYgdCgpO1xuICAgICAgICAgICAgICAgIH0pLCAoZSA9PiBuKGUpKSk7XG4gICAgICAgICAgICB9KSksIHMgPSAhMCwgaSA9PT0gciAmJiB0KCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYW4gYXJyYXkgb2YgcHJlZGljYXRlIGZ1bmN0aW9ucyB0aGF0IGFzeW5jaHJvbm91c2x5IGV2YWx1YXRlIHRvIGFcbiAgICAgKiBib29sZWFuLCBpbXBsZW1lbnRzIGEgc2hvcnQtY2lyY3VpdGluZyBgb3JgIGJldHdlZW4gdGhlIHJlc3VsdHMuIFByZWRpY2F0ZXNcbiAgICAgKiB3aWxsIGJlIGV2YWx1YXRlZCB1bnRpbCBvbmUgb2YgdGhlbSByZXR1cm5zIGB0cnVlYCwgdGhlbiBzdG9wLiBUaGUgZmluYWxcbiAgICAgKiByZXN1bHQgd2lsbCBiZSB3aGV0aGVyIGFueSBvZiB0aGVtIHJldHVybmVkIGB0cnVlYC5cbiAgICAgKi8gICAgc3RhdGljIG9yKGUpIHtcbiAgICAgICAgbGV0IHQgPSBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSghMSk7XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiBlKSB0ID0gdC5uZXh0KChlID0+IGUgPyBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShlKSA6IG4oKSkpO1xuICAgICAgICByZXR1cm4gdDtcbiAgICB9XG4gICAgc3RhdGljIGZvckVhY2goZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gW107XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKChlLCByKSA9PiB7XG4gICAgICAgICAgICBuLnB1c2godC5jYWxsKHRoaXMsIGUsIHIpKTtcbiAgICAgICAgfSkpLCB0aGlzLndhaXRGb3Iobik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbmN1cnJlbnRseSBtYXAgYWxsIGFycmF5IGVsZW1lbnRzIHRocm91Z2ggYXN5bmNocm9ub3VzIGZ1bmN0aW9uLlxuICAgICAqLyAgICBzdGF0aWMgbWFwQXJyYXkoZSwgdCkge1xuICAgICAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlUHJvbWlzZSgoKG4sIHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBlLmxlbmd0aCwgcyA9IG5ldyBBcnJheShpKTtcbiAgICAgICAgICAgIGxldCBvID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IF8gPSAwOyBfIDwgaTsgXysrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IF87XG4gICAgICAgICAgICAgICAgdChlW2FdKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc1thXSA9IGUsICsrbywgbyA9PT0gaSAmJiBuKHMpO1xuICAgICAgICAgICAgICAgIH0pLCAoZSA9PiByKGUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gcmVjdXJzaXZlIFBlcnNpc3RlbmNlUHJvbWlzZSBjYWxscywgdGhhdCBhdm9pZHNcbiAgICAgKiBwb3RlbnRpYWwgbWVtb3J5IHByb2JsZW1zIGZyb20gdW5ib3VuZGVkIGNoYWlucyBvZiBwcm9taXNlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgYWN0aW9uYCB3aWxsIGJlIGNhbGxlZCByZXBlYXRlZGx5IHdoaWxlIGBjb25kaXRpb25gIGlzIHRydWUuXG4gICAgICovICAgIHN0YXRpYyBkb1doaWxlKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVByb21pc2UoKChuLCByKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICEwID09PSBlKCkgPyB0KCkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzKCk7XG4gICAgICAgICAgICAgICAgfSksIHIpIDogbigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHByb2Nlc3MoKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFJlZmVyZW5jZXMgdG8gYHdpbmRvd2AgYXJlIGd1YXJkZWQgYnkgU2ltcGxlRGIuaXNBdmFpbGFibGUoKVxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vKipcbiAqIFdyYXBzIGFuIElEQlRyYW5zYWN0aW9uIGFuZCBleHBvc2VzIGEgc3RvcmUoKSBtZXRob2QgdG8gZ2V0IGEgaGFuZGxlIHRvIGFcbiAqIHNwZWNpZmljIG9iamVjdCBzdG9yZS5cbiAqL1xuY2xhc3MgX19QUklWQVRFX1NpbXBsZURiVHJhbnNhY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBlLCB0aGlzLnRyYW5zYWN0aW9uID0gdCwgdGhpcy5hYm9ydGVkID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIEluZGV4ZWREYiB0cmFuc2FjdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuViA9IG5ldyBfX1BSSVZBVEVfRGVmZXJyZWQsIHRoaXMudHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuVi5yZXNvbHZlKCk7XG4gICAgICAgIH0sIHRoaXMudHJhbnNhY3Rpb24ub25hYm9ydCA9ICgpID0+IHtcbiAgICAgICAgICAgIHQuZXJyb3IgPyB0aGlzLlYucmVqZWN0KG5ldyBfX1BSSVZBVEVfSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvcihlLCB0LmVycm9yKSkgOiB0aGlzLlYucmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aGlzLnRyYW5zYWN0aW9uLm9uZXJyb3IgPSB0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfY2hlY2tGb3JBbmRSZXBvcnRpT1NFcnJvcih0LnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICB0aGlzLlYucmVqZWN0KG5ldyBfX1BSSVZBVEVfSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvcihlLCBuKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBvcGVuKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX1NpbXBsZURiVHJhbnNhY3Rpb24odCwgZS50cmFuc2FjdGlvbihyLCBuKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBfX1BSSVZBVEVfSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvcih0LCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVi5wcm9taXNlO1xuICAgIH1cbiAgICBhYm9ydChlKSB7XG4gICAgICAgIGUgJiYgdGhpcy5WLnJlamVjdChlKSwgdGhpcy5hYm9ydGVkIHx8IChfX1BSSVZBVEVfbG9nRGVidWcoXCJTaW1wbGVEYlwiLCBcIkFib3J0aW5nIHRyYW5zYWN0aW9uOlwiLCBlID8gZS5tZXNzYWdlIDogXCJDbGllbnQtaW5pdGlhdGVkIGFib3J0XCIpLCBcbiAgICAgICAgdGhpcy5hYm9ydGVkID0gITAsIHRoaXMudHJhbnNhY3Rpb24uYWJvcnQoKSk7XG4gICAgfVxuICAgIGcoKSB7XG4gICAgICAgIC8vIElmIHRoZSBicm93c2VyIHN1cHBvcnRzIFYzIEluZGV4ZWREQiwgd2UgaW52b2tlIGNvbW1pdCgpIGV4cGxpY2l0bHkgdG9cbiAgICAgICAgLy8gc3BlZWQgdXAgaW5kZXggREIgcHJvY2Vzc2luZyBpZiB0aGUgZXZlbnQgbG9vcCByZW1haW5zIGJsb2Nrcy5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgZSA9IHRoaXMudHJhbnNhY3Rpb247XG4gICAgICAgIHRoaXMuYWJvcnRlZCB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUuY29tbWl0IHx8IGUuY29tbWl0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBTaW1wbGVEYlN0b3JlPEtleVR5cGUsIFZhbHVlVHlwZT4gZm9yIHRoZSBzcGVjaWZpZWQgc3RvcmUuIEFsbFxuICAgICAqIG9wZXJhdGlvbnMgcGVyZm9ybWVkIG9uIHRoZSBTaW1wbGVEYlN0b3JlIGhhcHBlbiB3aXRoaW4gdGhlIGNvbnRleHQgb2YgdGhpc1xuICAgICAqIHRyYW5zYWN0aW9uIGFuZCBpdCBjYW5ub3QgYmUgdXNlZCBhbnltb3JlIG9uY2UgdGhlIHRyYW5zYWN0aW9uIGlzXG4gICAgICogY29tcGxldGVkLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHdlIGNhbid0IGFjdHVhbGx5IGVuZm9yY2UgdGhhdCB0aGUgS2V5VHlwZSBhbmQgVmFsdWVUeXBlIGFyZVxuICAgICAqIGNvcnJlY3QsIGJ1dCB0aGV5IGFsbG93IHR5cGUgc2FmZXR5IHRocm91Z2ggdGhlIHJlc3Qgb2YgdGhlIGNvbnN1bWluZyBjb2RlLlxuICAgICAqLyAgICBzdG9yZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKGUpO1xuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9TaW1wbGVEYlN0b3JlKHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBQcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIEluZGV4ZWREYiB3aXRoIGEgc2ltcGxpZmllZCBpbnRlcmZhY2UgdGhhdCB1c2VzXG4gKiBQcm9taXNlLWxpa2UgcmV0dXJuIHZhbHVlcyB0byBjaGFpbiBvcGVyYXRpb25zLiBSZWFsIHByb21pc2VzIGNhbm5vdCBiZSB1c2VkXG4gKiBzaW5jZSAudGhlbigpIGNvbnRpbnVhdGlvbnMgYXJlIGV4ZWN1dGVkIGFzeW5jaHJvbm91c2x5IChlLmcuIHZpYVxuICogLnNldEltbWVkaWF0ZSksIHdoaWNoIHdvdWxkIGNhdXNlIEluZGV4ZWREQiB0byBlbmQgdGhlIHRyYW5zYWN0aW9uLlxuICogU2VlIFBlcnNpc3RlbmNlUHJvbWlzZSBmb3IgbW9yZSBkZXRhaWxzLlxuICovIGNsYXNzIF9fUFJJVkFURV9TaW1wbGVEYiB7XG4gICAgLypcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNpbXBsZURiIHdyYXBwZXIgZm9yIEluZGV4ZWREYiBkYXRhYmFzZSBgbmFtZWAuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgYHZlcnNpb25gIG11c3Qgbm90IGJlIGEgZG93bmdyYWRlLiBJbmRleGVkREIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAqIGRvd25ncmFkaW5nIHRoZSBzY2hlbWEgdmVyc2lvbi4gV2UgY3VycmVudGx5IGRvIG5vdCBzdXBwb3J0IGFueSB3YXkgdG8gZG9cbiAgICAgKiB2ZXJzaW9uaW5nIG91dHNpZGUgb2YgSW5kZXhlZERCJ3MgdmVyc2lvbmluZyBtZWNoYW5pc20sIGFzIG9ubHlcbiAgICAgKiB2ZXJzaW9uLXVwZ3JhZGUgdHJhbnNhY3Rpb25zIGFyZSBhbGxvd2VkIHRvIGRvIHRoaW5ncyBsaWtlIGNyZWF0ZVxuICAgICAqIG9iamVjdHN0b3Jlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IGUsIHRoaXMudmVyc2lvbiA9IHQsIHRoaXMucCA9IG47XG4gICAgICAgIC8vIE5PVEU6IEFjY29yZGluZyB0byBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTk3MDUwLCB0aGVcbiAgICAgICAgLy8gYnVnIHdlJ3JlIGNoZWNraW5nIGZvciBzaG91bGQgZXhpc3QgaW4gaU9TID49IDEyLjIgYW5kIDwgMTMsIGJ1dCBmb3JcbiAgICAgICAgLy8gd2hhdGV2ZXIgcmVhc29uIGl0J3MgbXVjaCBoYXJkZXIgdG8gaGl0IGFmdGVyIDEyLjIgc28gd2Ugb25seSBwcm9hY3RpdmVseVxuICAgICAgICAvLyBsb2cgb24gMTIuMi5cbiAgICAgICAgMTIuMiA9PT0gX19QUklWQVRFX1NpbXBsZURiLlModXRpbC5nZXRVQSgpKSAmJiBfX1BSSVZBVEVfbG9nRXJyb3IoXCJGaXJlc3RvcmUgcGVyc2lzdGVuY2Ugc3VmZmVycyBmcm9tIGEgYnVnIGluIGlPUyAxMi4yIFNhZmFyaSB0aGF0IG1heSBjYXVzZSB5b3VyIGFwcCB0byBzdG9wIHdvcmtpbmcuIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvNTY0OTYyOTYvMTEwOTE1IGZvciBkZXRhaWxzIGFuZCBhIHBvdGVudGlhbCB3b3JrYXJvdW5kLlwiKTtcbiAgICB9XG4gICAgLyoqIERlbGV0ZXMgdGhlIHNwZWNpZmllZCBkYXRhYmFzZS4gKi8gICAgc3RhdGljIGRlbGV0ZShlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbG9nRGVidWcoXCJTaW1wbGVEYlwiLCBcIlJlbW92aW5nIGRhdGFiYXNlOlwiLCBlKSwgX19QUklWQVRFX3dyYXBSZXF1ZXN0KHdpbmRvdy5pbmRleGVkREIuZGVsZXRlRGF0YWJhc2UoZSkpLnRvUHJvbWlzZSgpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIEluZGV4ZWREQiBpcyBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuICovICAgIHN0YXRpYyBEKCkge1xuICAgICAgICBpZiAoIXV0aWwuaXNJbmRleGVkREJBdmFpbGFibGUoKSkgcmV0dXJuICExO1xuICAgICAgICBpZiAoX19QUklWQVRFX1NpbXBsZURiLkMoKSkgcmV0dXJuICEwO1xuICAgICAgICAvLyBXZSBleHRlbnNpdmVseSB1c2UgaW5kZXhlZCBhcnJheSB2YWx1ZXMgYW5kIGNvbXBvdW5kIGtleXMsXG4gICAgICAgIC8vIHdoaWNoIElFIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0LiBIb3dldmVyLCB0aGV5IHN0aWxsIGhhdmUgaW5kZXhlZERCXG4gICAgICAgIC8vIGRlZmluZWQgb24gdGhlIHdpbmRvdywgc28gd2UgbmVlZCB0byBjaGVjayBmb3IgdGhlbSBoZXJlIGFuZCBtYWtlIHN1cmVcbiAgICAgICAgLy8gdG8gcmV0dXJuIHRoYXQgcGVyc2lzdGVuY2UgaXMgbm90IGVuYWJsZWQgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgICAgICAvLyBGb3IgdHJhY2tpbmcgc3VwcG9ydCBvZiB0aGlzIGZlYXR1cmUsIHNlZSBoZXJlOlxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL3N0YXR1cy9pbmRleGVkZGJhcnJheXNhbmRtdWx0aWVudHJ5c3VwcG9ydC9cbiAgICAgICAgLy8gQ2hlY2sgdGhlIFVBIHN0cmluZyB0byBmaW5kIG91dCB0aGUgYnJvd3Nlci5cbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdXRpbC5nZXRVQSgpLCB0ID0gX19QUklWQVRFX1NpbXBsZURiLlMoZSksIG4gPSAwIDwgdCAmJiB0IDwgMTAsIHIgPSBfX1BSSVZBVEVfZ2V0QW5kcm9pZFZlcnNpb24oZSksIGkgPSAwIDwgciAmJiByIDwgNC41O1xuICAgICAgICAvLyBJRSAxMFxuICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSAxMC4wOyBXaW5kb3dzIE5UIDYuMjsgVHJpZGVudC82LjApJztcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4zOyBUcmlkZW50LzcuMDsgcnY6MTEuMCkgbGlrZSBHZWNrbyc7XG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsXG4gICAgICAgIC8vIGxpa2UgR2Vja28pIENocm9tZS8zOS4wLjIxNzEuNzEgU2FmYXJpLzUzNy4zNiBFZGdlLzEyLjAnO1xuICAgICAgICAvLyBpT1MgU2FmYXJpOiBEaXNhYmxlIGZvciB1c2VycyBydW5uaW5nIGlPUyB2ZXJzaW9uIDwgMTAuXG4gICAgICAgICAgICAgICAgcmV0dXJuICEoZS5pbmRleE9mKFwiTVNJRSBcIikgPiAwIHx8IGUuaW5kZXhPZihcIlRyaWRlbnQvXCIpID4gMCB8fCBlLmluZGV4T2YoXCJFZGdlL1wiKSA+IDAgfHwgbiB8fCBpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBiYWNraW5nIEluZGV4ZWREQiBzdG9yZSBpcyB0aGUgTm9kZSBJbmRleGVkREJTaGltXG4gICAgICogKHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhlbWNsaW9uL0luZGV4ZWREQlNoaW0pLlxuICAgICAqLyAgICBzdGF0aWMgQygpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBwcm9jZXNzICYmIFwiWUVTXCIgPT09IChudWxsID09PSAoZSA9IHByb2Nlc3MuX19QUklWQVRFX2VudikgfHwgdm9pZCAwID09PSBlID8gdm9pZCAwIDogZS52KTtcbiAgICB9XG4gICAgLyoqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZyb20gYSB0cmFuc2FjdGlvbi4gKi8gICAgc3RhdGljIEYoZSwgdCkge1xuICAgICAgICByZXR1cm4gZS5zdG9yZSh0KTtcbiAgICB9XG4gICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgIC8qKiBQYXJzZSBVc2VyIEFnZW50IHRvIGRldGVybWluZSBpT1MgdmVyc2lvbi4gUmV0dXJucyAtMSBpZiBub3QgZm91bmQuICovXG4gICAgc3RhdGljIFMoZSkge1xuICAgICAgICBjb25zdCB0ID0gZS5tYXRjaCgvaSg/OnBob25lfHBhZHxwb2QpIG9zIChbXFxkX10rKS9pKSwgbiA9IHQgPyB0WzFdLnNwbGl0KFwiX1wiKS5zbGljZSgwLCAyKS5qb2luKFwiLlwiKSA6IFwiLTFcIjtcbiAgICAgICAgcmV0dXJuIE51bWJlcihuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHNwZWNpZmllZCBkYXRhYmFzZSwgY3JlYXRpbmcgb3IgdXBncmFkaW5nIGl0IGlmIG5lY2Vzc2FyeS5cbiAgICAgKi8gICAgYXN5bmMgTShlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiIHx8IChfX1BSSVZBVEVfbG9nRGVidWcoXCJTaW1wbGVEYlwiLCBcIk9wZW5pbmcgZGF0YWJhc2U6XCIsIHRoaXMubmFtZSksIFxuICAgICAgICB0aGlzLmRiID0gYXdhaXQgbmV3IFByb21pc2UoKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPKG1pa2VsZWhlbik6IEludmVzdGlnYXRlIGJyb3dzZXIgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbmRleGVkREJfQVBJL1VzaW5nX0luZGV4ZWREQlxuICAgICAgICAgICAgLy8gc3VnZ2VzdHMgSUU5IGFuZCBvbGRlciBXZWJLaXQgYnJvd3NlcnMgaGFuZGxlIHVwZ3JhZGVcbiAgICAgICAgICAgIC8vIGRpZmZlcmVudGx5LiBUaGV5IGV4cGVjdCBzZXRWZXJzaW9uLCBhcyBkZXNjcmliZWQgaGVyZTpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JREJWZXJzaW9uQ2hhbmdlUmVxdWVzdC9zZXRWZXJzaW9uXG4gICAgICAgICAgICBjb25zdCByID0gaW5kZXhlZERCLm9wZW4odGhpcy5uYW1lLCB0aGlzLnZlcnNpb24pO1xuICAgICAgICAgICAgci5vbnN1Y2Nlc3MgPSBlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgIHQobik7XG4gICAgICAgICAgICB9LCByLm9uYmxvY2tlZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBuKG5ldyBfX1BSSVZBVEVfSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvcihlLCBcIkNhbm5vdCB1cGdyYWRlIEluZGV4ZWREQiBzY2hlbWEgd2hpbGUgYW5vdGhlciB0YWIgaXMgb3Blbi4gQ2xvc2UgYWxsIHRhYnMgdGhhdCBhY2Nlc3MgRmlyZXN0b3JlIGFuZCByZWxvYWQgdGhpcyBwYWdlIHRvIHByb2NlZWQuXCIpKTtcbiAgICAgICAgICAgIH0sIHIub25lcnJvciA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0LnRhcmdldC5lcnJvcjtcbiAgICAgICAgICAgICAgICBcIlZlcnNpb25FcnJvclwiID09PSByLm5hbWUgPyBuKG5ldyBGaXJlc3RvcmVFcnJvcihDLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQSBuZXdlciB2ZXJzaW9uIG9mIHRoZSBGaXJlc3RvcmUgU0RLIHdhcyBwcmV2aW91c2x5IHVzZWQgYW5kIHNvIHRoZSBwZXJzaXN0ZWQgZGF0YSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSB2ZXJzaW9uIG9mIHRoZSBTREsgeW91IGFyZSBub3cgdXNpbmcuIFRoZSBTREsgd2lsbCBvcGVyYXRlIHdpdGggcGVyc2lzdGVuY2UgZGlzYWJsZWQuIElmIHlvdSBuZWVkIHBlcnNpc3RlbmNlLCBwbGVhc2UgcmUtdXBncmFkZSB0byBhIG5ld2VyIHZlcnNpb24gb2YgdGhlIFNESyBvciBlbHNlIGNsZWFyIHRoZSBwZXJzaXN0ZWQgSW5kZXhlZERCIGRhdGEgZm9yIHlvdXIgYXBwIHRvIHN0YXJ0IGZyZXNoLlwiKSkgOiBcIkludmFsaWRTdGF0ZUVycm9yXCIgPT09IHIubmFtZSA/IG4obmV3IEZpcmVzdG9yZUVycm9yKEMuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJVbmFibGUgdG8gb3BlbiBhbiBJbmRleGVkREIgY29ubmVjdGlvbi4gVGhpcyBjb3VsZCBiZSBkdWUgdG8gcnVubmluZyBpbiBhIHByaXZhdGUgYnJvd3Npbmcgc2Vzc2lvbiBvbiBhIGJyb3dzZXIgd2hvc2UgcHJpdmF0ZSBicm93c2luZyBzZXNzaW9ucyBkbyBub3Qgc3VwcG9ydCBJbmRleGVkREI6IFwiICsgcikpIDogbihuZXcgX19QUklWQVRFX0luZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IoZSwgcikpO1xuICAgICAgICAgICAgfSwgci5vbnVwZ3JhZGVuZWVkZWQgPSBlID0+IHtcbiAgICAgICAgICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJTaW1wbGVEYlwiLCAnRGF0YWJhc2UgXCInICsgdGhpcy5uYW1lICsgJ1wiIHJlcXVpcmVzIHVwZ3JhZGUgZnJvbSB2ZXJzaW9uOicsIGUub2xkVmVyc2lvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGUudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICB0aGlzLnAuTyh0LCByLnRyYW5zYWN0aW9uLCBlLm9sZFZlcnNpb24sIHRoaXMudmVyc2lvbikubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJTaW1wbGVEYlwiLCBcIkRhdGFiYXNlIHVwZ3JhZGUgdG8gdmVyc2lvbiBcIiArIHRoaXMudmVyc2lvbiArIFwiIGNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKSksIHRoaXMuTiAmJiAodGhpcy5kYi5vbnZlcnNpb25jaGFuZ2UgPSBlID0+IHRoaXMuTihlKSksIHRoaXMuZGI7XG4gICAgfVxuICAgIEwoZSkge1xuICAgICAgICB0aGlzLk4gPSBlLCB0aGlzLmRiICYmICh0aGlzLmRiLm9udmVyc2lvbmNoYW5nZSA9IHQgPT4gZSh0KSk7XG4gICAgfVxuICAgIGFzeW5jIHJ1blRyYW5zYWN0aW9uKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgY29uc3QgaSA9IFwicmVhZG9ubHlcIiA9PT0gdDtcbiAgICAgICAgbGV0IHMgPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICArK3M7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGIgPSBhd2FpdCB0aGlzLk0oZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9TaW1wbGVEYlRyYW5zYWN0aW9uLm9wZW4odGhpcy5kYiwgZSwgaSA/IFwicmVhZG9ubHlcIiA6IFwicmVhZHdyaXRlXCIsIG4pLCBzID0gcih0KS5uZXh0KChlID0+ICh0LmcoKSwgXG4gICAgICAgICAgICAgICAgZSkpKS5jYXRjaCgoZSA9PiAoXG4gICAgICAgICAgICAgICAgLy8gQWJvcnQgdGhlIHRyYW5zYWN0aW9uIGlmIHRoZXJlIHdhcyBhbiBlcnJvci5cbiAgICAgICAgICAgICAgICB0LmFib3J0KGUpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVqZWN0KGUpKSkpLnRvUHJvbWlzZSgpO1xuICAgICAgICAgICAgICAgIC8vIEFzIG5vdGVkIGFib3ZlLCBlcnJvcnMgYXJlIHByb3BhZ2F0ZWQgYnkgYWJvcnRpbmcgdGhlIHRyYW5zYWN0aW9uLiBTb1xuICAgICAgICAgICAgICAgIC8vIHdlIHN3YWxsb3cgYW55IGVycm9yIGhlcmUgdG8gYXZvaWQgdGhlIGJyb3dzZXIgbG9nZ2luZyBpdCBhcyB1bmhhbmRsZWQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHMuY2F0Y2goKCgpID0+IHt9KSksIFxuICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZSAoaS5lLiBJbmRleGVkRGIncyBvbnN1Y2Nlc3MgZXZlbnQgdG9cbiAgICAgICAgICAgICAgICAvLyBmaXJlKSwgYnV0IHN0aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgdHJhbnNhY3Rpb25GblJlc3VsdCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNhbGxlci5cbiAgICAgICAgICAgICAgICBhd2FpdCB0Lm0sIHM7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGUsIG4gPSBcIkZpcmViYXNlRXJyb3JcIiAhPT0gdC5uYW1lICYmIHMgPCAzO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oc2NobWlkdC1zZWJhc3RpYW4pOiBXZSBjb3VsZCBwcm9iYWJseSBiZSBzbWFydGVyIGFib3V0IHRoaXMgYW5kXG4gICAgICAgICAgICAgICAgLy8gbm90IHJldHJ5IGV4Y2VwdGlvbnMgdGhhdCBhcmUgbGlrZWx5IHVucmVjb3ZlcmFibGUgKHN1Y2ggYXMgcXVvdGFcbiAgICAgICAgICAgICAgICAvLyBleGNlZWRlZCBlcnJvcnMpLlxuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIGNhbm5vdCB1c2UgYW4gaW5zdGFuY2VvZiBjaGVjayBmb3IgRmlyZXN0b3JlRXhjZXB0aW9uLCBzaW5jZSB0aGVcbiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gaXMgd3JhcHBlZCBpbiBhIGdlbmVyaWMgZXJyb3IgYnkgb3VyIGFzeW5jL2F3YWl0IGhhbmRsaW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX19QUklWQVRFX2xvZ0RlYnVnKFwiU2ltcGxlRGJcIiwgXCJUcmFuc2FjdGlvbiBmYWlsZWQgd2l0aCBlcnJvcjpcIiwgdC5tZXNzYWdlLCBcIlJldHJ5aW5nOlwiLCBuKSwgXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpLCAhbikgcmV0dXJuIFByb21pc2UucmVqZWN0KHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRiICYmIHRoaXMuZGIuY2xvc2UoKSwgdGhpcy5kYiA9IHZvaWQgMDtcbiAgICB9XG59XG5cbi8qKiBQYXJzZSBVc2VyIEFnZW50IHRvIGRldGVybWluZSBBbmRyb2lkIHZlcnNpb24uIFJldHVybnMgLTEgaWYgbm90IGZvdW5kLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZ2V0QW5kcm9pZFZlcnNpb24oZSkge1xuICAgIGNvbnN0IHQgPSBlLm1hdGNoKC9BbmRyb2lkIChbXFxkLl0rKS9pKSwgbiA9IHQgPyB0WzFdLnNwbGl0KFwiLlwiKS5zbGljZSgwLCAyKS5qb2luKFwiLlwiKSA6IFwiLTFcIjtcbiAgICByZXR1cm4gTnVtYmVyKG4pO1xufVxuXG4vKipcbiAqIEEgY29udHJvbGxlciBmb3IgaXRlcmF0aW5nIG92ZXIgYSBrZXkgcmFuZ2Ugb3IgaW5kZXguIEl0IGFsbG93cyBhbiBpdGVyYXRlXG4gKiBjYWxsYmFjayB0byBkZWxldGUgdGhlIGN1cnJlbnRseS1yZWZlcmVuY2VkIG9iamVjdCwgb3IganVtcCB0byBhIG5ldyBrZXlcbiAqIHdpdGhpbiB0aGUga2V5IHJhbmdlIG9yIGluZGV4LlxuICovIGNsYXNzIF9fUFJJVkFURV9JdGVyYXRpb25Db250cm9sbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHRoaXMuQiA9IGUsIHRoaXMuayA9ICExLCB0aGlzLnEgPSBudWxsO1xuICAgIH1cbiAgICBnZXQgaXNEb25lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rO1xuICAgIH1cbiAgICBnZXQgSygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucTtcbiAgICB9XG4gICAgc2V0IGN1cnNvcihlKSB7XG4gICAgICAgIHRoaXMuQiA9IGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB0byBzdG9wIGl0ZXJhdGlvbiBhdCBhbnkgcG9pbnQuXG4gICAgICovICAgIGRvbmUoKSB7XG4gICAgICAgIHRoaXMuayA9ICEwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gc2tpcCB0byB0aGF0IG5leHQga2V5LCB3aGljaCBjb3VsZCBiZVxuICAgICAqIGFuIGluZGV4IG9yIGEgcHJpbWFyeSBrZXkuXG4gICAgICovICAgICQoZSkge1xuICAgICAgICB0aGlzLnEgPSBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdGhlIGN1cnJlbnQgY3Vyc29yIHZhbHVlIGZyb20gdGhlIG9iamVjdCBzdG9yZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFlvdSBDQU5OT1QgZG8gdGhpcyB3aXRoIGEga2V5c09ubHkgcXVlcnkuXG4gICAgICovICAgIGRlbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV93cmFwUmVxdWVzdCh0aGlzLkIuZGVsZXRlKCkpO1xuICAgIH1cbn1cblxuLyoqIEFuIGVycm9yIHRoYXQgd3JhcHMgZXhjZXB0aW9ucyB0aGF0IHRocm93biBkdXJpbmcgSW5kZXhlZERCIGV4ZWN1dGlvbi4gKi8gY2xhc3MgX19QUklWQVRFX0luZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IgZXh0ZW5kcyBGaXJlc3RvcmVFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcihDLlVOQVZBSUxBQkxFLCBgSW5kZXhlZERCIHRyYW5zYWN0aW9uICcke2V9JyBmYWlsZWQ6ICR7dH1gKSwgdGhpcy5uYW1lID0gXCJJbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yXCI7XG4gICAgfVxufVxuXG4vKiogVmVyaWZpZXMgd2hldGhlciBgZWAgaXMgYW4gSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvci4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2lzSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvcihlKSB7XG4gICAgLy8gVXNlIG5hbWUgZXF1YWxpdHksIGFzIGluc3RhbmNlb2YgY2hlY2tzIG9uIGVycm9ycyBkb24ndCB3b3JrIHdpdGggZXJyb3JzXG4gICAgLy8gdGhhdCB3cmFwIG90aGVyIGVycm9ycy5cbiAgICByZXR1cm4gXCJJbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yXCIgPT09IGUubmFtZTtcbn1cblxuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIGFuIElEQk9iamVjdFN0b3JlIHByb3ZpZGluZyBhbiBBUEkgdGhhdDpcbiAqXG4gKiAxKSBIYXMgZ2VuZXJpYyBLZXlUeXBlIC8gVmFsdWVUeXBlIHBhcmFtZXRlcnMgdG8gcHJvdmlkZSBzdHJvbmdseS10eXBlZFxuICogbWV0aG9kcyBmb3IgYWN0aW5nIGFnYWluc3QgdGhlIG9iamVjdCBzdG9yZS5cbiAqIDIpIERlYWxzIHdpdGggSW5kZXhlZERCJ3Mgb25zdWNjZXNzIC8gb25lcnJvciBldmVudCBjYWxsYmFja3MsIG1ha2luZyBldmVyeVxuICogbWV0aG9kIHJldHVybiBhIFBlcnNpc3RlbmNlUHJvbWlzZSBpbnN0ZWFkLlxuICogMykgUHJvdmlkZXMgYSBoaWdoZXItbGV2ZWwgQVBJIHRvIGF2b2lkIG5lZWRpbmcgdG8gZG8gZXhjZXNzaXZlIHdyYXBwaW5nIG9mXG4gKiBpbnRlcm1lZGlhdGUgSW5kZXhlZERCIHR5cGVzIChJREJDdXJzb3JXaXRoVmFsdWUsIGV0Yy4pXG4gKi8gY2xhc3MgX19QUklWQVRFX1NpbXBsZURiU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IGU7XG4gICAgfVxuICAgIHB1dChlLCB0KSB7XG4gICAgICAgIGxldCBuO1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0ID8gKF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlNpbXBsZURiXCIsIFwiUFVUXCIsIHRoaXMuc3RvcmUubmFtZSwgZSwgdCksIFxuICAgICAgICBuID0gdGhpcy5zdG9yZS5wdXQodCwgZSkpIDogKF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlNpbXBsZURiXCIsIFwiUFVUXCIsIHRoaXMuc3RvcmUubmFtZSwgXCI8YXV0by1rZXk+XCIsIGUpLCBcbiAgICAgICAgbiA9IHRoaXMuc3RvcmUucHV0KGUpKSwgX19QUklWQVRFX3dyYXBSZXF1ZXN0KG4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IHZhbHVlIGludG8gYW4gT2JqZWN0IFN0b3JlIGFuZCByZXR1cm5zIHRoZSBuZXcga2V5LiBTaW1pbGFyIHRvXG4gICAgICogSW5kZXhlZERiJ3MgYGFkZCgpYCwgdGhpcyBtZXRob2Qgd2lsbCBmYWlsIG9uIHByaW1hcnkga2V5IGNvbGxpc2lvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgb2JqZWN0IHRvIHdyaXRlLlxuICAgICAqIEByZXR1cm5zIFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGFkZC5cbiAgICAgKi8gICAgYWRkKGUpIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiU2ltcGxlRGJcIiwgXCJBRERcIiwgdGhpcy5zdG9yZS5uYW1lLCBlLCBlKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV93cmFwUmVxdWVzdCh0aGlzLnN0b3JlLmFkZChlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGZyb20gdGhlIHNwZWNpZmllZCBzdG9yZSwgb3IgbnVsbFxuICAgICAqIGlmIG5vIG9iamVjdCBleGlzdHMgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICAgKlxuICAgICAqIEBrZXkgVGhlIGtleSBvZiB0aGUgb2JqZWN0IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyBUaGUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBrZXkgb3IgbnVsbCBpZiBubyBvYmplY3QgZXhpc3RzLlxuICAgICAqLyAgICBnZXQoZSkge1xuICAgICAgICAvLyBXZSdyZSBkb2luZyBhbiB1bnNhZmUgY2FzdCB0byBWYWx1ZVR5cGUuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfd3JhcFJlcXVlc3QodGhpcy5zdG9yZS5nZXQoZSkpLm5leHQoKHQgPT4gKFxuICAgICAgICAvLyBOb3JtYWxpemUgbm9uZXhpc3RlbmNlIHRvIG51bGwuXG4gICAgICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9IG51bGwpLCBfX1BSSVZBVEVfbG9nRGVidWcoXCJTaW1wbGVEYlwiLCBcIkdFVFwiLCB0aGlzLnN0b3JlLm5hbWUsIGUsIHQpLCBcbiAgICAgICAgdCkpKTtcbiAgICB9XG4gICAgZGVsZXRlKGUpIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiU2ltcGxlRGJcIiwgXCJERUxFVEVcIiwgdGhpcy5zdG9yZS5uYW1lLCBlKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV93cmFwUmVxdWVzdCh0aGlzLnN0b3JlLmRlbGV0ZShlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHdlIGV2ZXIgbmVlZCBtb3JlIG9mIHRoZSBjb3VudCB2YXJpYW50cywgd2UgY2FuIGFkZCBvdmVybG9hZHMuIEZvciBub3csXG4gICAgICogYWxsIHdlIG5lZWQgaXMgdG8gY291bnQgZXZlcnl0aGluZyBpbiBhIHN0b3JlLlxuICAgICAqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIHN0b3JlLlxuICAgICAqLyAgICBjb3VudCgpIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiU2ltcGxlRGJcIiwgXCJDT1VOVFwiLCB0aGlzLnN0b3JlLm5hbWUpO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3dyYXBSZXF1ZXN0KHRoaXMuc3RvcmUuY291bnQoKSk7XG4gICAgfVxuICAgIFUoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5vcHRpb25zKGUsIHQpLCByID0gbi5pbmRleCA/IHRoaXMuc3RvcmUuaW5kZXgobi5pbmRleCkgOiB0aGlzLnN0b3JlO1xuICAgICAgICAvLyBVc2UgYGdldEFsbCgpYCBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBJbmRleGVkREIgdjMsIGFzIGl0IGlzIHJvdWdobHlcbiAgICAgICAgLy8gMjAlIGZhc3Rlci5cbiAgICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiByLmdldEFsbCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHIuZ2V0QWxsKG4ucmFuZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVByb21pc2UoKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgZS5vbmVycm9yID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG4oZS50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0sIGUub25zdWNjZXNzID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHQoZS50YXJnZXQucmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmN1cnNvcihuKSwgdCA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVyhlLCAoKGUsIG4pID0+IHtcbiAgICAgICAgICAgICAgICB0LnB1c2gobik7XG4gICAgICAgICAgICB9KSkubmV4dCgoKCkgPT4gdCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvYWRzIHRoZSBmaXJzdCBgY291bnRgIGVsZW1lbnRzIGZyb20gdGhlIHByb3ZpZGVkIGluZGV4IHJhbmdlLiBMb2FkcyBhbGxcbiAgICAgKiBlbGVtZW50cyBpZiBubyBsaW1pdCBpcyBwcm92aWRlZC5cbiAgICAgKi8gICAgRyhlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLnN0b3JlLmdldEFsbChlLCBudWxsID09PSB0ID8gdm9pZCAwIDogdCk7XG4gICAgICAgIHJldHVybiBuZXcgUGVyc2lzdGVuY2VQcm9taXNlKCgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgbi5vbmVycm9yID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgdChlLnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICB9LCBuLm9uc3VjY2VzcyA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIGUodC50YXJnZXQucmVzdWx0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgaihlLCB0KSB7XG4gICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlNpbXBsZURiXCIsIFwiREVMRVRFIEFMTFwiLCB0aGlzLnN0b3JlLm5hbWUpO1xuICAgICAgICBjb25zdCBuID0gdGhpcy5vcHRpb25zKGUsIHQpO1xuICAgICAgICBuLkggPSAhMTtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuY3Vyc29yKG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5XKHIsICgoZSwgdCwgbikgPT4gbi5kZWxldGUoKSkpO1xuICAgIH1cbiAgICBKKGUsIHQpIHtcbiAgICAgICAgbGV0IG47XG4gICAgICAgIHQgPyBuID0gZSA6IChuID0ge30sIHQgPSBlKTtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuY3Vyc29yKG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5XKHIsIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGEgc3RvcmUsIGJ1dCB3YWl0cyBmb3IgdGhlIGdpdmVuIGNhbGxiYWNrIHRvIGNvbXBsZXRlIGZvclxuICAgICAqIGVhY2ggZW50cnkgYmVmb3JlIGl0ZXJhdGluZyB0aGUgbmV4dCBlbnRyeS4gVGhpcyBhbGxvd3MgdGhlIGNhbGxiYWNrIHRvIGRvXG4gICAgICogYXN5bmNocm9ub3VzIHdvcmsgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXRlcmF0aW9uIHNob3VsZCBjb250aW51ZS5cbiAgICAgKlxuICAgICAqIFRoZSBwcm92aWRlZCBjYWxsYmFjayBzaG91bGQgcmV0dXJuIGB0cnVlYCB0byBjb250aW51ZSBpdGVyYXRpb24sIGFuZFxuICAgICAqIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgICAqLyAgICBZKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY3Vyc29yKHt9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVByb21pc2UoKChuLCByKSA9PiB7XG4gICAgICAgICAgICB0Lm9uZXJyb3IgPSBlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX2NoZWNrRm9yQW5kUmVwb3J0aU9TRXJyb3IoZS50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgICAgIHIodCk7XG4gICAgICAgICAgICB9LCB0Lm9uc3VjY2VzcyA9IHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgciA/IGUoci5wcmltYXJ5S2V5LCByLnZhbHVlKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZSA/IHIuY29udGludWUoKSA6IG4oKTtcbiAgICAgICAgICAgICAgICB9KSkgOiBuKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIFcoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gW107XG4gICAgICAgIHJldHVybiBuZXcgUGVyc2lzdGVuY2VQcm9taXNlKCgociwgaSkgPT4ge1xuICAgICAgICAgICAgZS5vbmVycm9yID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgaShlLnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICB9LCBlLm9uc3VjY2VzcyA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKCFpKSByZXR1cm4gdm9pZCByKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBfX1BSSVZBVEVfSXRlcmF0aW9uQ29udHJvbGxlcihpKSwgbyA9IHQoaS5wcmltYXJ5S2V5LCBpLnZhbHVlLCBzKTtcbiAgICAgICAgICAgICAgICBpZiAobyBpbnN0YW5jZW9mIFBlcnNpc3RlbmNlUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gby5jYXRjaCgoZSA9PiAocy5kb25lKCksIFBlcnNpc3RlbmNlUHJvbWlzZS5yZWplY3QoZSkpKSk7XG4gICAgICAgICAgICAgICAgICAgIG4ucHVzaChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcy5pc0RvbmUgPyByKCkgOiBudWxsID09PSBzLksgPyBpLmNvbnRpbnVlKCkgOiBpLmNvbnRpbnVlKHMuSyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IobikpKTtcbiAgICB9XG4gICAgb3B0aW9ucyhlLCB0KSB7XG4gICAgICAgIGxldCBuO1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBlICYmIChcInN0cmluZ1wiID09IHR5cGVvZiBlID8gbiA9IGUgOiB0ID0gZSksIHtcbiAgICAgICAgICAgIGluZGV4OiBuLFxuICAgICAgICAgICAgcmFuZ2U6IHRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY3Vyc29yKGUpIHtcbiAgICAgICAgbGV0IHQgPSBcIm5leHRcIjtcbiAgICAgICAgaWYgKGUucmV2ZXJzZSAmJiAodCA9IFwicHJldlwiKSwgZS5pbmRleCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuc3RvcmUuaW5kZXgoZS5pbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gZS5IID8gbi5vcGVuS2V5Q3Vyc29yKGUucmFuZ2UsIHQpIDogbi5vcGVuQ3Vyc29yKGUucmFuZ2UsIHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLm9wZW5DdXJzb3IoZS5yYW5nZSwgdCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFdyYXBzIGFuIElEQlJlcXVlc3QgaW4gYSBQZXJzaXN0ZW5jZVByb21pc2UsIHVzaW5nIHRoZSBvbnN1Y2Nlc3MgLyBvbmVycm9yXG4gKiBoYW5kbGVycyB0byByZXNvbHZlIC8gcmVqZWN0IHRoZSBQZXJzaXN0ZW5jZVByb21pc2UgYXMgYXBwcm9wcmlhdGUuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX3dyYXBSZXF1ZXN0KGUpIHtcbiAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlUHJvbWlzZSgoKHQsIG4pID0+IHtcbiAgICAgICAgZS5vbnN1Y2Nlc3MgPSBlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICB0KG4pO1xuICAgICAgICB9LCBlLm9uZXJyb3IgPSBlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfY2hlY2tGb3JBbmRSZXBvcnRpT1NFcnJvcihlLnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICBuKHQpO1xuICAgICAgICB9O1xuICAgIH0pKTtcbn1cblxuLy8gR3VhcmQgc28gd2Ugb25seSByZXBvcnQgdGhlIGVycm9yIG9uY2UuXG5sZXQgTSA9ICExO1xuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY2hlY2tGb3JBbmRSZXBvcnRpT1NFcnJvcihlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9TaW1wbGVEYi5TKHV0aWwuZ2V0VUEoKSk7XG4gICAgaWYgKHQgPj0gMTIuMiAmJiB0IDwgMTMpIHtcbiAgICAgICAgY29uc3QgdCA9IFwiQW4gaW50ZXJuYWwgZXJyb3Igd2FzIGVuY291bnRlcmVkIGluIHRoZSBJbmRleGVkIERhdGFiYXNlIHNlcnZlclwiO1xuICAgICAgICBpZiAoZS5tZXNzYWdlLmluZGV4T2YodCkgPj0gMCkge1xuICAgICAgICAgICAgLy8gV3JhcCBlcnJvciBpbiBhIG1vcmUgZGVzY3JpcHRpdmUgb25lLlxuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBGaXJlc3RvcmVFcnJvcihcImludGVybmFsXCIsIGBJT1NfSU5ERVhFRERCX0JVRzE6IEluZGV4ZWREYiBoYXMgdGhyb3duICcke3R9Jy4gVGhpcyBpcyBsaWtlbHkgZHVlIHRvIGFuIHVuYXZvaWRhYmxlIGJ1ZyBpbiBpT1MuIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvNTY0OTYyOTYvMTEwOTE1IGZvciBkZXRhaWxzIGFuZCBhIHBvdGVudGlhbCB3b3JrYXJvdW5kLmApO1xuICAgICAgICAgICAgcmV0dXJuIE0gfHwgKE0gPSAhMCwgXG4gICAgICAgICAgICAvLyBUaHJvdyBhIGdsb2JhbCBleGNlcHRpb24gb3V0c2lkZSBvZiB0aGlzIHByb21pc2UgY2hhaW4sIGZvciB0aGUgdXNlciB0b1xuICAgICAgICAgICAgLy8gcG90ZW50aWFsbHkgY2F0Y2guXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH0pLCAwKSksIGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGU7XG59XG5cbi8qKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgc2NoZWR1bGluZyBvZiBJbmRleCBCYWNrZmlsbGVyLiAqL1xuY2xhc3MgX19QUklWQVRFX0luZGV4QmFja2ZpbGxlclNjaGVkdWxlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUgPSBlLCB0aGlzLlogPSB0LCB0aGlzLnRhc2sgPSBudWxsO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5YKDE1ZTMpO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLnRhc2sgJiYgKHRoaXMudGFzay5jYW5jZWwoKSwgdGhpcy50YXNrID0gbnVsbCk7XG4gICAgfVxuICAgIGdldCBzdGFydGVkKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdGhpcy50YXNrO1xuICAgIH1cbiAgICBYKGUpIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiSW5kZXhCYWNrZmlsbGVyXCIsIGBTY2hlZHVsZWQgaW4gJHtlfW1zYCksIHRoaXMudGFzayA9IHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQWZ0ZXJEZWxheShcImluZGV4X2JhY2tmaWxsXCIgLyogVGltZXJJZC5JbmRleEJhY2tmaWxsICovICwgZSwgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGFzayA9IG51bGw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkluZGV4QmFja2ZpbGxlclwiLCBgRG9jdW1lbnRzIHdyaXR0ZW46ICR7YXdhaXQgdGhpcy5aLmVlKCl9YCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgX19QUklWQVRFX2lzSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvcihlKSA/IF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkluZGV4QmFja2ZpbGxlclwiLCBcIklnbm9yaW5nIEluZGV4ZWREQiBlcnJvciBkdXJpbmcgaW5kZXggYmFja2ZpbGw6IFwiLCBlKSA6IGF3YWl0IF9fUFJJVkFURV9pZ25vcmVJZlByaW1hcnlMZWFzZUxvc3MoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLlgoNmU0KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuLyoqIEltcGxlbWVudHMgdGhlIHN0ZXBzIGZvciBiYWNrZmlsbGluZyBpbmRleGVzLiAqLyBjbGFzcyBfX1BSSVZBVEVfSW5kZXhCYWNrZmlsbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBMb2NhbFN0b3JlIHByb3ZpZGVzIGFjY2VzcyB0byBJbmRleE1hbmFnZXIgYW5kIExvY2FsRG9jdW1lbnRWaWV3LlxuICAgICAqIFRoZXNlIHByb3BlcnRpZXMgd2lsbCB1cGRhdGUgd2hlbiB0aGUgdXNlciBjaGFuZ2VzLiBDb25zZXF1ZW50bHksXG4gICAgICogbWFraW5nIGEgbG9jYWwgY29weSBvZiBJbmRleE1hbmFnZXIgYW5kIExvY2FsRG9jdW1lbnRWaWV3IHdpbGwgcmVxdWlyZVxuICAgICAqIHVwZGF0ZXMgb3ZlciB0aW1lLiBUaGUgc2ltcGxlciBzb2x1dGlvbiBpcyB0byByZWx5IG9uIExvY2FsU3RvcmUgdG8gaGF2ZVxuICAgICAqIGFuIHVwLXRvLWRhdGUgcmVmZXJlbmNlcyB0byBJbmRleE1hbmFnZXIgYW5kIExvY2FsRG9jdW1lbnRTdG9yZS5cbiAgICAgKi9cbiAgICBlLCB0KSB7XG4gICAgICAgIHRoaXMubG9jYWxTdG9yZSA9IGUsIHRoaXMucGVyc2lzdGVuY2UgPSB0O1xuICAgIH1cbiAgICBhc3luYyBlZShlID0gNTApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJCYWNrZmlsbCBJbmRleGVzXCIsIFwicmVhZHdyaXRlLXByaW1hcnlcIiwgKHQgPT4gdGhpcy50ZSh0LCBlKSkpO1xuICAgIH1cbiAgICAvKiogV3JpdGVzIGluZGV4IGVudHJpZXMgdW50aWwgdGhlIGNhcCBpcyByZWFjaGVkLiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIHByb2Nlc3NlZC4gKi8gICAgdGUoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gbmV3IFNldDtcbiAgICAgICAgbGV0IHIgPSB0LCBpID0gITA7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UuZG9XaGlsZSgoKCkgPT4gITAgPT09IGkgJiYgciA+IDApLCAoKCkgPT4gdGhpcy5sb2NhbFN0b3JlLmluZGV4TWFuYWdlci5nZXROZXh0Q29sbGVjdGlvbkdyb3VwVG9VcGRhdGUoZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gdCAmJiAhbi5oYXModCkpIHJldHVybiBfX1BSSVZBVEVfbG9nRGVidWcoXCJJbmRleEJhY2tmaWxsZXJcIiwgYFByb2Nlc3NpbmcgY29sbGVjdGlvbjogJHt0fWApLCBcbiAgICAgICAgICAgIHRoaXMubmUoZSwgdCwgcikubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgciAtPSBlLCBuLmFkZCh0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGkgPSAhMTtcbiAgICAgICAgfSkpKSkubmV4dCgoKCkgPT4gdCAtIHIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIGVudHJpZXMgZm9yIHRoZSBwcm92aWRlZCBjb2xsZWN0aW9uIGdyb3VwLiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIHByb2Nlc3NlZC5cbiAgICAgKi8gICAgbmUoZSwgdCwgbikge1xuICAgICAgICAvLyBVc2UgdGhlIGVhcmxpZXN0IG9mZnNldCBvZiBhbGwgZmllbGQgaW5kZXhlcyB0byBxdWVyeSB0aGUgbG9jYWwgY2FjaGUuXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsU3RvcmUuaW5kZXhNYW5hZ2VyLmdldE1pbk9mZnNldEZyb21Db2xsZWN0aW9uR3JvdXAoZSwgdCkubmV4dCgociA9PiB0aGlzLmxvY2FsU3RvcmUubG9jYWxEb2N1bWVudHMuZ2V0TmV4dERvY3VtZW50cyhlLCB0LCByLCBuKS5uZXh0KChuID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBuLmNoYW5nZXM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0b3JlLmluZGV4TWFuYWdlci51cGRhdGVJbmRleEVudHJpZXMoZSwgaSkubmV4dCgoKCkgPT4gdGhpcy5yZShyLCBuKSkpLm5leHQoKG4gPT4gKF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkluZGV4QmFja2ZpbGxlclwiLCBgVXBkYXRpbmcgb2Zmc2V0OiAke259YCksIFxuICAgICAgICAgICAgdGhpcy5sb2NhbFN0b3JlLmluZGV4TWFuYWdlci51cGRhdGVDb2xsZWN0aW9uR3JvdXAoZSwgdCwgbikpKSkubmV4dCgoKCkgPT4gaS5zaXplKSk7XG4gICAgICAgIH0pKSkpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgbmV4dCBvZmZzZXQgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGRvY3VtZW50cy4gKi8gICAgcmUoZSwgdCkge1xuICAgICAgICBsZXQgbiA9IGU7XG4gICAgICAgIHJldHVybiB0LmNoYW5nZXMuZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfbmV3SW5kZXhPZmZzZXRGcm9tRG9jdW1lbnQodCk7XG4gICAgICAgICAgICBfX1BSSVZBVEVfaW5kZXhPZmZzZXRDb21wYXJhdG9yKHIsIG4pID4gMCAmJiAobiA9IHIpO1xuICAgICAgICB9KSksIG5ldyBJbmRleE9mZnNldChuLnJlYWRUaW1lLCBuLmRvY3VtZW50S2V5LCBNYXRoLm1heCh0LmJhdGNoSWQsIGUubGFyZ2VzdEJhdGNoSWQpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIGBMaXN0ZW5TZXF1ZW5jZWAgaXMgYSBtb25vdG9uaWMgc2VxdWVuY2UuIEl0IGlzIGluaXRpYWxpemVkIHdpdGggYSBtaW5pbXVtIHZhbHVlIHRvXG4gKiBleGNlZWQuIEFsbCBzdWJzZXF1ZW50IGNhbGxzIHRvIG5leHQgd2lsbCByZXR1cm4gaW5jcmVhc2luZyB2YWx1ZXMuIElmIHByb3ZpZGVkIHdpdGggYVxuICogYFNlcXVlbmNlTnVtYmVyU3luY2VyYCwgaXQgd2lsbCBhZGRpdGlvbmFsbHkgYnVtcCBpdHMgbmV4dCB2YWx1ZSB3aGVuIHRvbGQgb2YgYSBuZXcgdmFsdWUsIGFzXG4gKiB3ZWxsIGFzIHdyaXRlIG91dCBzZXF1ZW5jZSBudW1iZXJzIHRoYXQgaXQgcHJvZHVjZXMgdmlhIGBuZXh0KClgLlxuICovIGNsYXNzIF9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSBlLCB0ICYmICh0LnNlcXVlbmNlTnVtYmVySGFuZGxlciA9IGUgPT4gdGhpcy5pZShlKSwgdGhpcy5zZSA9IGUgPT4gdC53cml0ZVNlcXVlbmNlTnVtYmVyKGUpKTtcbiAgICB9XG4gICAgaWUoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91c1ZhbHVlID0gTWF0aC5tYXgoZSwgdGhpcy5wcmV2aW91c1ZhbHVlKSwgdGhpcy5wcmV2aW91c1ZhbHVlO1xuICAgIH1cbiAgICBuZXh0KCkge1xuICAgICAgICBjb25zdCBlID0gKyt0aGlzLnByZXZpb3VzVmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLnNlICYmIHRoaXMuc2UoZSksIGU7XG4gICAgfVxufVxuXG5fX1BSSVZBVEVfTGlzdGVuU2VxdWVuY2Uub2UgPSAtMTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgYSB2YXJpYWJsZSBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9pc051bGxPclVuZGVmaW5lZChlKSB7XG4gICAgcmV0dXJuIG51bGwgPT0gZTtcbn1cblxuLyoqIFJldHVybnMgd2hldGhlciB0aGUgdmFsdWUgcmVwcmVzZW50cyAtMC4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2lzTmVnYXRpdmVaZXJvKGUpIHtcbiAgICAvLyBEZXRlY3QgaWYgdGhlIHZhbHVlIGlzIC0wLjAuIEJhc2VkIG9uIHBvbHlmaWxsIGZyb21cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICByZXR1cm4gMCA9PT0gZSAmJiAxIC8gZSA9PSAtMSAvIDA7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgdmFsdWUgaXMgYW4gaW50ZWdlciBhbmQgaW4gdGhlIHNhZmUgaW50ZWdlciByYW5nZVxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QgZm9yIGJlaW5nIGFuIGludGVnZXIgYW5kIGluIHRoZSBzYWZlIHJhbmdlXG4gKi8gZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihlKSB7XG4gICAgcmV0dXJuIFwibnVtYmVyXCIgPT0gdHlwZW9mIGUgJiYgTnVtYmVyLmlzSW50ZWdlcihlKSAmJiAhX19QUklWQVRFX2lzTmVnYXRpdmVaZXJvKGUpICYmIGUgPD0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgJiYgZSA+PSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRW5jb2RlcyBhIHJlc291cmNlIHBhdGggaW50byBhIEluZGV4ZWREYi1jb21wYXRpYmxlIHN0cmluZyBmb3JtLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKGUpIHtcbiAgICBsZXQgdCA9IFwiXCI7XG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCBlLmxlbmd0aDsgbisrKSB0Lmxlbmd0aCA+IDAgJiYgKHQgPSBfX1BSSVZBVEVfZW5jb2RlU2VwYXJhdG9yKHQpKSwgXG4gICAgdCA9IF9fUFJJVkFURV9lbmNvZGVTZWdtZW50KGUuZ2V0KG4pLCB0KTtcbiAgICByZXR1cm4gX19QUklWQVRFX2VuY29kZVNlcGFyYXRvcih0KTtcbn1cblxuLyoqIEVuY29kZXMgYSBzaW5nbGUgc2VnbWVudCBvZiBhIHJlc291cmNlIHBhdGggaW50byB0aGUgZ2l2ZW4gcmVzdWx0ICovIGZ1bmN0aW9uIF9fUFJJVkFURV9lbmNvZGVTZWdtZW50KGUsIHQpIHtcbiAgICBsZXQgbiA9IHQ7XG4gICAgY29uc3QgciA9IGUubGVuZ3RoO1xuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgcjsgdCsrKSB7XG4gICAgICAgIGNvbnN0IHIgPSBlLmNoYXJBdCh0KTtcbiAgICAgICAgc3dpdGNoIChyKSB7XG4gICAgICAgICAgY2FzZSBcIlxcMFwiOlxuICAgICAgICAgICAgbiArPSBcIlx1MDAwMVx1MDAxMFwiO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiXHUwMDAxXCI6XG4gICAgICAgICAgICBuICs9IFwiXHUwMDAxXHUwMDExXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuICs9IHI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbi8qKiBFbmNvZGVzIGEgcGF0aCBzZXBhcmF0b3IgaW50byB0aGUgZ2l2ZW4gcmVzdWx0ICovIGZ1bmN0aW9uIF9fUFJJVkFURV9lbmNvZGVTZXBhcmF0b3IoZSkge1xuICAgIHJldHVybiBlICsgXCJcdTAwMDFcdTAwMDFcIjtcbn1cblxuLyoqXG4gKiBEZWNvZGVzIHRoZSBnaXZlbiBJbmRleGVkRGItY29tcGF0aWJsZSBzdHJpbmcgZm9ybSBvZiBhIHJlc291cmNlIHBhdGggaW50b1xuICogYSBSZXNvdXJjZVBhdGggaW5zdGFuY2UuIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCBpcyBub3Qgc3VpdGFibGUgZm9yIHVzZSB3aXRoXG4gKiBkZWNvZGluZyByZXNvdXJjZSBuYW1lcyBmcm9tIHRoZSBzZXJ2ZXI7IHRob3NlIGFyZSBPbmUgUGxhdGZvcm0gZm9ybWF0XG4gKiBzdHJpbmdzLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9kZWNvZGVSZXNvdXJjZVBhdGgoZSkge1xuICAgIC8vIEV2ZW50IHRoZSBlbXB0eSBwYXRoIG11c3QgZW5jb2RlIGFzIGEgcGF0aCBvZiBhdCBsZWFzdCBsZW5ndGggMi4gQSBwYXRoXG4gICAgLy8gd2l0aCBleGFjdGx5IDIgbXVzdCBiZSB0aGUgZW1wdHkgcGF0aC5cbiAgICBjb25zdCB0ID0gZS5sZW5ndGg7XG4gICAgaWYgKF9fUFJJVkFURV9oYXJkQXNzZXJ0KHQgPj0gMiksIDIgPT09IHQpIHJldHVybiBfX1BSSVZBVEVfaGFyZEFzc2VydChcIlx1MDAwMVwiID09PSBlLmNoYXJBdCgwKSAmJiBcIlx1MDAwMVwiID09PSBlLmNoYXJBdCgxKSksIFxuICAgIFJlc291cmNlUGF0aC5lbXB0eVBhdGgoKTtcbiAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyBjYW5ub3QgZXhpc3QgcGFzdCB0aGUgc2Vjb25kLXRvLWxhc3QgcG9zaXRpb24gaW4gdGhlXG4gICAgLy8gc291cmNlIHZhbHVlLlxuICAgICAgICBjb25zdCBfX1BSSVZBVEVfbGFzdFJlYXNvbmFibGVFc2NhcGVJbmRleCA9IHQgLSAyLCBuID0gW107XG4gICAgbGV0IHIgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdDsgKSB7XG4gICAgICAgIC8vIFRoZSBsYXN0IHR3byBjaGFyYWN0ZXJzIG9mIGEgdmFsaWQgZW5jb2RlZCBwYXRoIG11c3QgYmUgYSBzZXBhcmF0b3IsIHNvXG4gICAgICAgIC8vIHRoZXJlIG11c3QgYmUgYW4gZW5kIHRvIHRoaXMgc2VnbWVudC5cbiAgICAgICAgY29uc3QgdCA9IGUuaW5kZXhPZihcIlx1MDAwMVwiLCBpKTtcbiAgICAgICAgKHQgPCAwIHx8IHQgPiBfX1BSSVZBVEVfbGFzdFJlYXNvbmFibGVFc2NhcGVJbmRleCkgJiYgZmFpbCgpO1xuICAgICAgICBzd2l0Y2ggKGUuY2hhckF0KHQgKyAxKSkge1xuICAgICAgICAgIGNhc2UgXCJcdTAwMDFcIjpcbiAgICAgICAgICAgIGNvbnN0IHMgPSBlLnN1YnN0cmluZyhpLCB0KTtcbiAgICAgICAgICAgIGxldCBvO1xuICAgICAgICAgICAgMCA9PT0gci5sZW5ndGggPyBcbiAgICAgICAgICAgIC8vIEF2b2lkIGNvcHlpbmcgZm9yIHRoZSBjb21tb24gY2FzZSBvZiBhIHNlZ21lbnQgdGhhdCBleGNsdWRlcyBcXDBcbiAgICAgICAgICAgIC8vIGFuZCBcXDAwMVxuICAgICAgICAgICAgbyA9IHMgOiAociArPSBzLCBvID0gciwgciA9IFwiXCIpLCBuLnB1c2gobyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJcdTAwMTBcIjpcbiAgICAgICAgICAgIHIgKz0gZS5zdWJzdHJpbmcoaSwgdCksIHIgKz0gXCJcXDBcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIlx1MDAxMVwiOlxuICAgICAgICAgICAgLy8gVGhlIGVzY2FwZSBjaGFyYWN0ZXIgY2FuIGJlIHVzZWQgaW4gdGhlIG91dHB1dCB0byBlbmNvZGUgaXRzZWxmLlxuICAgICAgICAgICAgciArPSBlLnN1YnN0cmluZyhpLCB0ICsgMSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBmYWlsKCk7XG4gICAgICAgIH1cbiAgICAgICAgaSA9IHQgKyAyO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlc291cmNlUGF0aChuKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgeCA9IFsgXCJ1c2VySWRcIiwgXCJiYXRjaElkXCIgXTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIG5hbWUgJ293bmVyJyBpcyBjaG9zZW4gdG8gZW5zdXJlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGhcbiAqIG9sZGVyIGNsaWVudHMgdGhhdCBvbmx5IHN1cHBvcnRlZCBzaW5nbGUgbG9ja2VkIGFjY2VzcyB0byB0aGUgcGVyc2lzdGVuY2VcbiAqIGxheWVyLlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBbdXNlcklkLCBlbmNvZGVkUGF0aF0ga2V5IGZvciB1c2UgaW4gdGhlIERiRG9jdW1lbnRNdXRhdGlvbnNcbiAqIGluZGV4IHRvIGl0ZXJhdGUgb3ZlciBhbGwgYXQgZG9jdW1lbnQgbXV0YXRpb25zIGZvciBhIGdpdmVuIHBhdGggb3IgbG93ZXIuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9uZXdEYkRvY3VtZW50TXV0YXRpb25QcmVmaXhGb3JQYXRoKGUsIHQpIHtcbiAgICByZXR1cm4gWyBlLCBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKHQpIF07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bGwgaW5kZXgga2V5IG9mIFt1c2VySWQsIGVuY29kZWRQYXRoLCBiYXRjaElkXSBmb3IgaW5zZXJ0aW5nXG4gKiBhbmQgZGVsZXRpbmcgaW50byB0aGUgRGJEb2N1bWVudE11dGF0aW9ucyBpbmRleC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfbmV3RGJEb2N1bWVudE11dGF0aW9uS2V5KGUsIHQsIG4pIHtcbiAgICByZXR1cm4gWyBlLCBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKHQpLCBuIF07XG59XG5cbi8qKlxuICogQmVjYXVzZSB3ZSBzdG9yZSBhbGwgdGhlIHVzZWZ1bCBpbmZvcm1hdGlvbiBmb3IgdGhpcyBzdG9yZSBpbiB0aGUga2V5LFxuICogdGhlcmUgaXMgbm8gdXNlZnVsIGluZm9ybWF0aW9uIHRvIHN0b3JlIGFzIHRoZSB2YWx1ZS4gVGhlIHJhdyAodW5lbmNvZGVkKVxuICogcGF0aCBjYW5ub3QgYmUgc3RvcmVkIGJlY2F1c2UgSW5kZXhlZERiIGRvZXNuJ3Qgc3RvcmUgcHJvdG90eXBlXG4gKiBpbmZvcm1hdGlvbi5cbiAqLyBjb25zdCBPID0ge30sIE4gPSBbIFwicHJlZml4UGF0aFwiLCBcImNvbGxlY3Rpb25Hcm91cFwiLCBcInJlYWRUaW1lXCIsIFwiZG9jdW1lbnRJZFwiIF0sIEwgPSBbIFwicHJlZml4UGF0aFwiLCBcImNvbGxlY3Rpb25Hcm91cFwiLCBcImRvY3VtZW50SWRcIiBdLCBCID0gWyBcImNvbGxlY3Rpb25Hcm91cFwiLCBcInJlYWRUaW1lXCIsIFwicHJlZml4UGF0aFwiLCBcImRvY3VtZW50SWRcIiBdLCBrID0gWyBcImNhbm9uaWNhbElkXCIsIFwidGFyZ2V0SWRcIiBdLCBxID0gWyBcInRhcmdldElkXCIsIFwicGF0aFwiIF0sIFEgPSBbIFwicGF0aFwiLCBcInRhcmdldElkXCIgXSwgSyA9IFsgXCJjb2xsZWN0aW9uSWRcIiwgXCJwYXJlbnRcIiBdLCAkID0gWyBcImluZGV4SWRcIiwgXCJ1aWRcIiBdLCBVID0gWyBcInVpZFwiLCBcInNlcXVlbmNlTnVtYmVyXCIgXSwgVyA9IFsgXCJpbmRleElkXCIsIFwidWlkXCIsIFwiYXJyYXlWYWx1ZVwiLCBcImRpcmVjdGlvbmFsVmFsdWVcIiwgXCJvcmRlcmVkRG9jdW1lbnRLZXlcIiwgXCJkb2N1bWVudEtleVwiIF0sIEcgPSBbIFwiaW5kZXhJZFwiLCBcInVpZFwiLCBcIm9yZGVyZWREb2N1bWVudEtleVwiIF0sIHogPSBbIFwidXNlcklkXCIsIFwiY29sbGVjdGlvblBhdGhcIiwgXCJkb2N1bWVudElkXCIgXSwgaiA9IFsgXCJ1c2VySWRcIiwgXCJjb2xsZWN0aW9uUGF0aFwiLCBcImxhcmdlc3RCYXRjaElkXCIgXSwgSCA9IFsgXCJ1c2VySWRcIiwgXCJjb2xsZWN0aW9uR3JvdXBcIiwgXCJsYXJnZXN0QmF0Y2hJZFwiIF0sIEogPSBbIC4uLlsgLi4uWyAuLi5bIC4uLlsgXCJtdXRhdGlvblF1ZXVlc1wiLCBcIm11dGF0aW9uc1wiLCBcImRvY3VtZW50TXV0YXRpb25zXCIsIFwicmVtb3RlRG9jdW1lbnRzXCIsIFwidGFyZ2V0c1wiLCBcIm93bmVyXCIsIFwidGFyZ2V0R2xvYmFsXCIsIFwidGFyZ2V0RG9jdW1lbnRzXCIgXSwgXCJjbGllbnRNZXRhZGF0YVwiIF0sIFwicmVtb3RlRG9jdW1lbnRHbG9iYWxcIiBdLCBcImNvbGxlY3Rpb25QYXJlbnRzXCIgXSwgXCJidW5kbGVzXCIsIFwibmFtZWRRdWVyaWVzXCIgXSwgWSA9IFsgLi4uSiwgXCJkb2N1bWVudE92ZXJsYXlzXCIgXSwgWiA9IFsgXCJtdXRhdGlvblF1ZXVlc1wiLCBcIm11dGF0aW9uc1wiLCBcImRvY3VtZW50TXV0YXRpb25zXCIsIFwicmVtb3RlRG9jdW1lbnRzVjE0XCIsIFwidGFyZ2V0c1wiLCBcIm93bmVyXCIsIFwidGFyZ2V0R2xvYmFsXCIsIFwidGFyZ2V0RG9jdW1lbnRzXCIsIFwiY2xpZW50TWV0YWRhdGFcIiwgXCJyZW1vdGVEb2N1bWVudEdsb2JhbFwiLCBcImNvbGxlY3Rpb25QYXJlbnRzXCIsIFwiYnVuZGxlc1wiLCBcIm5hbWVkUXVlcmllc1wiLCBcImRvY3VtZW50T3ZlcmxheXNcIiBdLCBYID0gWiwgZWUgPSBbIC4uLlgsIFwiaW5kZXhDb25maWd1cmF0aW9uXCIsIFwiaW5kZXhTdGF0ZVwiLCBcImluZGV4RW50cmllc1wiIF0sIHRlID0gZWU7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jbGFzcyBfX1BSSVZBVEVfSW5kZXhlZERiVHJhbnNhY3Rpb24gZXh0ZW5kcyBQZXJzaXN0ZW5jZVRyYW5zYWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuX2UgPSBlLCB0aGlzLmN1cnJlbnRTZXF1ZW5jZU51bWJlciA9IHQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZ2V0U3RvcmUoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIHJldHVybiBfX1BSSVZBVEVfU2ltcGxlRGIuRihuLl9lLCB0KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX29iamVjdFNpemUoZSkge1xuICAgIGxldCB0ID0gMDtcbiAgICBmb3IgKGNvbnN0IG4gaW4gZSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG4pICYmIHQrKztcbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChlLCB0KSB7XG4gICAgZm9yIChjb25zdCBuIGluIGUpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBuKSAmJiB0KG4sIGVbbl0pO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfbWFwVG9BcnJheShlLCB0KSB7XG4gICAgY29uc3QgbiA9IFtdO1xuICAgIGZvciAoY29uc3QgciBpbiBlKSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgcikgJiYgbi5wdXNoKHQoZVtyXSwgciwgZSkpO1xuICAgIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KGUpIHtcbiAgICBmb3IgKGNvbnN0IHQgaW4gZSkgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB0KSkgcmV0dXJuICExO1xuICAgIHJldHVybiAhMDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIEFuIGltbXV0YWJsZSBzb3J0ZWQgbWFwIGltcGxlbWVudGF0aW9uLCBiYXNlZCBvbiBhIExlZnQtbGVhbmluZyBSZWQtQmxhY2tcbi8vIHRyZWUuXG5jbGFzcyBTb3J0ZWRNYXAge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy5jb21wYXJhdG9yID0gZSwgdGhpcy5yb290ID0gdCB8fCBMTFJCTm9kZS5FTVBUWTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIG1hcCwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS92YWx1ZSBhZGRlZCBvciByZXBsYWNlZC5cbiAgICBpbnNlcnQoZSwgdCkge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcCh0aGlzLmNvbXBhcmF0b3IsIHRoaXMucm9vdC5pbnNlcnQoZSwgdCwgdGhpcy5jb21wYXJhdG9yKS5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLkJMQUNLLCBudWxsLCBudWxsKSk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBtYXAsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgcmVtb3ZlZC5cbiAgICByZW1vdmUoZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcCh0aGlzLmNvbXBhcmF0b3IsIHRoaXMucm9vdC5yZW1vdmUoZSwgdGhpcy5jb21wYXJhdG9yKS5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLkJMQUNLLCBudWxsLCBudWxsKSk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBub2RlIHdpdGggdGhlIGdpdmVuIGtleSwgb3IgbnVsbC5cbiAgICBnZXQoZSkge1xuICAgICAgICBsZXQgdCA9IHRoaXMucm9vdDtcbiAgICAgICAgZm9yICg7IXQuaXNFbXB0eSgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmNvbXBhcmF0b3IoZSwgdC5rZXkpO1xuICAgICAgICAgICAgaWYgKDAgPT09IG4pIHJldHVybiB0LnZhbHVlO1xuICAgICAgICAgICAgbiA8IDAgPyB0ID0gdC5sZWZ0IDogbiA+IDAgJiYgKHQgPSB0LnJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgaW4gdGhpcyBzb3J0ZWQgbWFwLCBvciAtMSBpZiBpdCBkb2Vzbid0XG4gICAgLy8gZXhpc3QuXG4gICAgaW5kZXhPZihlKSB7XG4gICAgICAgIC8vIE51bWJlciBvZiBub2RlcyB0aGF0IHdlcmUgcHJ1bmVkIHdoZW4gZGVzY2VuZGluZyByaWdodFxuICAgICAgICBsZXQgdCA9IDAsIG4gPSB0aGlzLnJvb3Q7XG4gICAgICAgIGZvciAoOyFuLmlzRW1wdHkoKTsgKSB7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5jb21wYXJhdG9yKGUsIG4ua2V5KTtcbiAgICAgICAgICAgIGlmICgwID09PSByKSByZXR1cm4gdCArIG4ubGVmdC5zaXplO1xuICAgICAgICAgICAgciA8IDAgPyBuID0gbi5sZWZ0IDogKFxuICAgICAgICAgICAgLy8gQ291bnQgYWxsIG5vZGVzIGxlZnQgb2YgdGhlIG5vZGUgcGx1cyB0aGUgbm9kZSBpdHNlbGZcbiAgICAgICAgICAgIHQgKz0gbi5sZWZ0LnNpemUgKyAxLCBuID0gbi5yaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm9kZSBub3QgZm91bmRcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuaXNFbXB0eSgpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIG1hcC5cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5zaXplO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBtaW5pbXVtIGtleSBpbiB0aGUgbWFwLlxuICAgIG1pbktleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5taW5LZXkoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgbWF4aW11bSBrZXkgaW4gdGhlIG1hcC5cbiAgICBtYXhLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QubWF4S2V5KCk7XG4gICAgfVxuICAgIC8vIFRyYXZlcnNlcyB0aGUgbWFwIGluIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cbiAgICAvLyBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIGlub3JkZXJUcmF2ZXJzYWwoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Lmlub3JkZXJUcmF2ZXJzYWwoZSk7XG4gICAgfVxuICAgIGZvckVhY2goZSkge1xuICAgICAgICB0aGlzLmlub3JkZXJUcmF2ZXJzYWwoKCh0LCBuKSA9PiAoZSh0LCBuKSwgITEpKSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmlub3JkZXJUcmF2ZXJzYWwoKCh0LCBuKSA9PiAoZS5wdXNoKGAke3R9OiR7bn1gKSwgITEpKSksIGB7JHtlLmpvaW4oXCIsIFwiKX19YDtcbiAgICB9XG4gICAgLy8gVHJhdmVyc2VzIHRoZSBtYXAgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uXG4gICAgLy8gZnVuY3Rpb24gZm9yIGVhY2gga2V5L3ZhbHVlIHBhaXIuIElmIGFjdGlvbiByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpc1xuICAgIC8vIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIHJldmVyc2VUcmF2ZXJzYWwoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LnJldmVyc2VUcmF2ZXJzYWwoZSk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYW4gaXRlcmF0b3Igb3ZlciB0aGUgU29ydGVkTWFwLlxuICAgIGdldEl0ZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdCwgbnVsbCwgdGhpcy5jb21wYXJhdG9yLCAhMSk7XG4gICAgfVxuICAgIGdldEl0ZXJhdG9yRnJvbShlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkTWFwSXRlcmF0b3IodGhpcy5yb290LCBlLCB0aGlzLmNvbXBhcmF0b3IsICExKTtcbiAgICB9XG4gICAgZ2V0UmV2ZXJzZUl0ZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdCwgbnVsbCwgdGhpcy5jb21wYXJhdG9yLCAhMCk7XG4gICAgfVxuICAgIGdldFJldmVyc2VJdGVyYXRvckZyb20oZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdCwgZSwgdGhpcy5jb21wYXJhdG9yLCAhMCk7XG4gICAgfVxufVxuXG4gLy8gZW5kIFNvcnRlZE1hcFxuLy8gQW4gaXRlcmF0b3Igb3ZlciBhbiBMTFJCTm9kZS5cbmNsYXNzIFNvcnRlZE1hcEl0ZXJhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByKSB7XG4gICAgICAgIHRoaXMuaXNSZXZlcnNlID0gciwgdGhpcy5ub2RlU3RhY2sgPSBbXTtcbiAgICAgICAgbGV0IGkgPSAxO1xuICAgICAgICBmb3IgKDshZS5pc0VtcHR5KCk7ICkgaWYgKGkgPSB0ID8gbihlLmtleSwgdCkgOiAxLCBcbiAgICAgICAgLy8gZmxpcCB0aGUgY29tcGFyaXNvbiBpZiB3ZSdyZSBnb2luZyBpbiByZXZlcnNlXG4gICAgICAgIHQgJiYgciAmJiAoaSAqPSAtMSksIGkgPCAwKSBcbiAgICAgICAgLy8gVGhpcyBub2RlIGlzIGxlc3MgdGhhbiBvdXIgc3RhcnQga2V5LiBpZ25vcmUgaXRcbiAgICAgICAgZSA9IHRoaXMuaXNSZXZlcnNlID8gZS5sZWZ0IDogZS5yaWdodDsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoMCA9PT0gaSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgbm9kZSBpcyBleGFjdGx5IGVxdWFsIHRvIG91ciBzdGFydCBrZXkuIFB1c2ggaXQgb24gdGhlIHN0YWNrLFxuICAgICAgICAgICAgICAgIC8vIGJ1dCBzdG9wIGl0ZXJhdGluZztcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTdGFjay5wdXNoKGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGdyZWF0ZXIgdGhhbiBvdXIgc3RhcnQga2V5LCBhZGQgaXQgdG8gdGhlIHN0YWNrIGFuZCBtb3ZlXG4gICAgICAgICAgICAvLyB0byB0aGUgbmV4dCBvbmVcbiAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrLnB1c2goZSksIGUgPSB0aGlzLmlzUmV2ZXJzZSA/IGUucmlnaHQgOiBlLmxlZnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TmV4dCgpIHtcbiAgICAgICAgbGV0IGUgPSB0aGlzLm5vZGVTdGFjay5wb3AoKTtcbiAgICAgICAgY29uc3QgdCA9IHtcbiAgICAgICAgICAgIGtleTogZS5rZXksXG4gICAgICAgICAgICB2YWx1ZTogZS52YWx1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5pc1JldmVyc2UpIGZvciAoZSA9IGUubGVmdDsgIWUuaXNFbXB0eSgpOyApIHRoaXMubm9kZVN0YWNrLnB1c2goZSksIGUgPSBlLnJpZ2h0OyBlbHNlIGZvciAoZSA9IGUucmlnaHQ7ICFlLmlzRW1wdHkoKTsgKSB0aGlzLm5vZGVTdGFjay5wdXNoKGUpLCBcbiAgICAgICAgZSA9IGUubGVmdDtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICAgIGhhc05leHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVTdGFjay5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBwZWVrKCkge1xuICAgICAgICBpZiAoMCA9PT0gdGhpcy5ub2RlU3RhY2subGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMubm9kZVN0YWNrW3RoaXMubm9kZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBlLmtleSxcbiAgICAgICAgICAgIHZhbHVlOiBlLnZhbHVlXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4gLy8gZW5kIFNvcnRlZE1hcEl0ZXJhdG9yXG4vLyBSZXByZXNlbnRzIGEgbm9kZSBpbiBhIExlZnQtbGVhbmluZyBSZWQtQmxhY2sgdHJlZS5cbmNsYXNzIExMUkJOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgIHRoaXMua2V5ID0gZSwgdGhpcy52YWx1ZSA9IHQsIHRoaXMuY29sb3IgPSBudWxsICE9IG4gPyBuIDogTExSQk5vZGUuUkVELCB0aGlzLmxlZnQgPSBudWxsICE9IHIgPyByIDogTExSQk5vZGUuRU1QVFksIFxuICAgICAgICB0aGlzLnJpZ2h0ID0gbnVsbCAhPSBpID8gaSA6IExMUkJOb2RlLkVNUFRZLCB0aGlzLnNpemUgPSB0aGlzLmxlZnQuc2l6ZSArIDEgKyB0aGlzLnJpZ2h0LnNpemU7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUsIG9wdGlvbmFsbHkgcmVwbGFjaW5nIHBpZWNlcyBvZiBpdC5cbiAgICBjb3B5KGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMTFJCTm9kZShudWxsICE9IGUgPyBlIDogdGhpcy5rZXksIG51bGwgIT0gdCA/IHQgOiB0aGlzLnZhbHVlLCBudWxsICE9IG4gPyBuIDogdGhpcy5jb2xvciwgbnVsbCAhPSByID8gciA6IHRoaXMubGVmdCwgbnVsbCAhPSBpID8gaSA6IHRoaXMucmlnaHQpO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIC8vIFRyYXZlcnNlcyB0aGUgdHJlZSBpbiBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXG4gICAgLy8gZm9yIGVhY2ggbm9kZS4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIGlub3JkZXJUcmF2ZXJzYWwoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0Lmlub3JkZXJUcmF2ZXJzYWwoZSkgfHwgZSh0aGlzLmtleSwgdGhpcy52YWx1ZSkgfHwgdGhpcy5yaWdodC5pbm9yZGVyVHJhdmVyc2FsKGUpO1xuICAgIH1cbiAgICAvLyBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uXG4gICAgLy8gZnVuY3Rpb24gZm9yIGVhY2ggbm9kZS4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIHJldmVyc2VUcmF2ZXJzYWwoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yaWdodC5yZXZlcnNlVHJhdmVyc2FsKGUpIHx8IGUodGhpcy5rZXksIHRoaXMudmFsdWUpIHx8IHRoaXMubGVmdC5yZXZlcnNlVHJhdmVyc2FsKGUpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBtaW5pbXVtIG5vZGUgaW4gdGhlIHRyZWUuXG4gICAgbWluKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmlzRW1wdHkoKSA/IHRoaXMgOiB0aGlzLmxlZnQubWluKCk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIG1heGltdW0ga2V5IGluIHRoZSB0cmVlLlxuICAgIG1pbktleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKCkua2V5O1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBtYXhpbXVtIGtleSBpbiB0aGUgdHJlZS5cbiAgICBtYXhLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LmlzRW1wdHkoKSA/IHRoaXMua2V5IDogdGhpcy5yaWdodC5tYXhLZXkoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBuZXcgdHJlZSwgd2l0aCB0aGUga2V5L3ZhbHVlIGFkZGVkLlxuICAgIGluc2VydChlLCB0LCBuKSB7XG4gICAgICAgIGxldCByID0gdGhpcztcbiAgICAgICAgY29uc3QgaSA9IG4oZSwgci5rZXkpO1xuICAgICAgICByZXR1cm4gciA9IGkgPCAwID8gci5jb3B5KG51bGwsIG51bGwsIG51bGwsIHIubGVmdC5pbnNlcnQoZSwgdCwgbiksIG51bGwpIDogMCA9PT0gaSA/IHIuY29weShudWxsLCB0LCBudWxsLCBudWxsLCBudWxsKSA6IHIuY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCByLnJpZ2h0Lmluc2VydChlLCB0LCBuKSksIFxuICAgICAgICByLmZpeFVwKCk7XG4gICAgfVxuICAgIHJlbW92ZU1pbigpIHtcbiAgICAgICAgaWYgKHRoaXMubGVmdC5pc0VtcHR5KCkpIHJldHVybiBMTFJCTm9kZS5FTVBUWTtcbiAgICAgICAgbGV0IGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZS5sZWZ0LmlzUmVkKCkgfHwgZS5sZWZ0LmxlZnQuaXNSZWQoKSB8fCAoZSA9IGUubW92ZVJlZExlZnQoKSksIGUgPSBlLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgZS5sZWZ0LnJlbW92ZU1pbigpLCBudWxsKSwgXG4gICAgICAgIGUuZml4VXAoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBuZXcgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGl0ZW0gcmVtb3ZlZC5cbiAgICByZW1vdmUoZSwgdCkge1xuICAgICAgICBsZXQgbiwgciA9IHRoaXM7XG4gICAgICAgIGlmICh0KGUsIHIua2V5KSA8IDApIHIubGVmdC5pc0VtcHR5KCkgfHwgci5sZWZ0LmlzUmVkKCkgfHwgci5sZWZ0LmxlZnQuaXNSZWQoKSB8fCAociA9IHIubW92ZVJlZExlZnQoKSksIFxuICAgICAgICByID0gci5jb3B5KG51bGwsIG51bGwsIG51bGwsIHIubGVmdC5yZW1vdmUoZSwgdCksIG51bGwpOyBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyLmxlZnQuaXNSZWQoKSAmJiAociA9IHIucm90YXRlUmlnaHQoKSksIHIucmlnaHQuaXNFbXB0eSgpIHx8IHIucmlnaHQuaXNSZWQoKSB8fCByLnJpZ2h0LmxlZnQuaXNSZWQoKSB8fCAociA9IHIubW92ZVJlZFJpZ2h0KCkpLCBcbiAgICAgICAgICAgIDAgPT09IHQoZSwgci5rZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHIucmlnaHQuaXNFbXB0eSgpKSByZXR1cm4gTExSQk5vZGUuRU1QVFk7XG4gICAgICAgICAgICAgICAgbiA9IHIucmlnaHQubWluKCksIHIgPSByLmNvcHkobi5rZXksIG4udmFsdWUsIG51bGwsIG51bGwsIHIucmlnaHQucmVtb3ZlTWluKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgciA9IHIuY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCByLnJpZ2h0LnJlbW92ZShlLCB0KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHIuZml4VXAoKTtcbiAgICB9XG4gICAgaXNSZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIG5ldyB0cmVlIGFmdGVyIHBlcmZvcm1pbmcgYW55IG5lZWRlZCByb3RhdGlvbnMuXG4gICAgZml4VXAoKSB7XG4gICAgICAgIGxldCBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGUucmlnaHQuaXNSZWQoKSAmJiAhZS5sZWZ0LmlzUmVkKCkgJiYgKGUgPSBlLnJvdGF0ZUxlZnQoKSksIGUubGVmdC5pc1JlZCgpICYmIGUubGVmdC5sZWZ0LmlzUmVkKCkgJiYgKGUgPSBlLnJvdGF0ZVJpZ2h0KCkpLCBcbiAgICAgICAgZS5sZWZ0LmlzUmVkKCkgJiYgZS5yaWdodC5pc1JlZCgpICYmIChlID0gZS5jb2xvckZsaXAoKSksIGU7XG4gICAgfVxuICAgIG1vdmVSZWRMZWZ0KCkge1xuICAgICAgICBsZXQgZSA9IHRoaXMuY29sb3JGbGlwKCk7XG4gICAgICAgIHJldHVybiBlLnJpZ2h0LmxlZnQuaXNSZWQoKSAmJiAoZSA9IGUuY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCBlLnJpZ2h0LnJvdGF0ZVJpZ2h0KCkpLCBcbiAgICAgICAgZSA9IGUucm90YXRlTGVmdCgpLCBlID0gZS5jb2xvckZsaXAoKSksIGU7XG4gICAgfVxuICAgIG1vdmVSZWRSaWdodCgpIHtcbiAgICAgICAgbGV0IGUgPSB0aGlzLmNvbG9yRmxpcCgpO1xuICAgICAgICByZXR1cm4gZS5sZWZ0LmxlZnQuaXNSZWQoKSAmJiAoZSA9IGUucm90YXRlUmlnaHQoKSwgZSA9IGUuY29sb3JGbGlwKCkpLCBlO1xuICAgIH1cbiAgICByb3RhdGVMZWZ0KCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLlJFRCwgbnVsbCwgdGhpcy5yaWdodC5sZWZ0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmlnaHQuY29weShudWxsLCBudWxsLCB0aGlzLmNvbG9yLCBlLCBudWxsKTtcbiAgICB9XG4gICAgcm90YXRlUmlnaHQoKSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmNvcHkobnVsbCwgbnVsbCwgTExSQk5vZGUuUkVELCB0aGlzLmxlZnQucmlnaHQsIG51bGwpO1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmNvcHkobnVsbCwgbnVsbCwgdGhpcy5jb2xvciwgbnVsbCwgZSk7XG4gICAgfVxuICAgIGNvbG9yRmxpcCgpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMubGVmdC5jb3B5KG51bGwsIG51bGwsICF0aGlzLmxlZnQuY29sb3IsIG51bGwsIG51bGwpLCB0ID0gdGhpcy5yaWdodC5jb3B5KG51bGwsIG51bGwsICF0aGlzLnJpZ2h0LmNvbG9yLCBudWxsLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weShudWxsLCBudWxsLCAhdGhpcy5jb2xvciwgZSwgdCk7XG4gICAgfVxuICAgIC8vIEZvciB0ZXN0aW5nLlxuICAgIGNoZWNrTWF4RGVwdGgoKSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmNoZWNrKCk7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdygyLCBlKSA8PSB0aGlzLnNpemUgKyAxO1xuICAgIH1cbiAgICAvLyBJbiBhIGJhbGFuY2VkIFJCIHRyZWUsIHRoZSBibGFjay1kZXB0aCAobnVtYmVyIG9mIGJsYWNrIG5vZGVzKSBmcm9tIHJvb3QgdG9cbiAgICAvLyBsZWF2ZXMgaXMgZXF1YWwgb24gYm90aCBzaWRlcy4gIFRoaXMgZnVuY3Rpb24gdmVyaWZpZXMgdGhhdCBvciBhc3NlcnRzLlxuICAgIGNoZWNrKCkge1xuICAgICAgICBpZiAodGhpcy5pc1JlZCgpICYmIHRoaXMubGVmdC5pc1JlZCgpKSB0aHJvdyBmYWlsKCk7XG4gICAgICAgIGlmICh0aGlzLnJpZ2h0LmlzUmVkKCkpIHRocm93IGZhaWwoKTtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMubGVmdC5jaGVjaygpO1xuICAgICAgICBpZiAoZSAhPT0gdGhpcy5yaWdodC5jaGVjaygpKSB0aHJvdyBmYWlsKCk7XG4gICAgICAgIHJldHVybiBlICsgKHRoaXMuaXNSZWQoKSA/IDAgOiAxKTtcbiAgICB9XG59XG5cbiAvLyBlbmQgTExSQk5vZGVcbi8vIEVtcHR5IG5vZGUgaXMgc2hhcmVkIGJldHdlZW4gYWxsIExMUkIgdHJlZXMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuTExSQk5vZGUuRU1QVFkgPSBudWxsLCBMTFJCTm9kZS5SRUQgPSAhMCwgTExSQk5vZGUuQkxBQ0sgPSAhMTtcblxuLy8gZW5kIExMUkJFbXB0eU5vZGVcbkxMUkJOb2RlLkVNUFRZID0gbmV3IFxuLy8gUmVwcmVzZW50cyBhbiBlbXB0eSBub2RlIChhIGxlYWYgbm9kZSBpbiB0aGUgUmVkLUJsYWNrIFRyZWUpLlxuY2xhc3MgTExSQkVtcHR5Tm9kZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIHRocm93IGZhaWwoKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICB0aHJvdyBmYWlsKCk7XG4gICAgfVxuICAgIGdldCBjb2xvcigpIHtcbiAgICAgICAgdGhyb3cgZmFpbCgpO1xuICAgIH1cbiAgICBnZXQgbGVmdCgpIHtcbiAgICAgICAgdGhyb3cgZmFpbCgpO1xuICAgIH1cbiAgICBnZXQgcmlnaHQoKSB7XG4gICAgICAgIHRocm93IGZhaWwoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAgICBjb3B5KGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSB0cmVlLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5L3ZhbHVlIGFkZGVkLlxuICAgIGluc2VydChlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoZSwgdCk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSB0cmVlLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IHJlbW92ZWQuXG4gICAgcmVtb3ZlKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgaW5vcmRlclRyYXZlcnNhbChlKSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgcmV2ZXJzZVRyYXZlcnNhbChlKSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgbWluS2V5KCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbWF4S2V5KCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaXNSZWQoKSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgLy8gRm9yIHRlc3RpbmcuXG4gICAgY2hlY2tNYXhEZXB0aCgpIHtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBjaGVjaygpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogU29ydGVkU2V0IGlzIGFuIGltbXV0YWJsZSAoY29weS1vbi13cml0ZSkgY29sbGVjdGlvbiB0aGF0IGhvbGRzIGVsZW1lbnRzXG4gKiBpbiBvcmRlciBzcGVjaWZpZWQgYnkgdGhlIHByb3ZpZGVkIGNvbXBhcmF0b3IuXG4gKlxuICogTk9URTogaWYgcHJvdmlkZWQgY29tcGFyYXRvciByZXR1cm5zIDAgZm9yIHR3byBlbGVtZW50cywgd2UgY29uc2lkZXIgdGhlbSB0b1xuICogYmUgZXF1YWwhXG4gKi9cbmNsYXNzIFNvcnRlZFNldCB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSBlLCB0aGlzLmRhdGEgPSBuZXcgU29ydGVkTWFwKHRoaXMuY29tcGFyYXRvcik7XG4gICAgfVxuICAgIGhhcyhlKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLmRhdGEuZ2V0KGUpO1xuICAgIH1cbiAgICBmaXJzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5taW5LZXkoKTtcbiAgICB9XG4gICAgbGFzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tYXhLZXkoKTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuc2l6ZTtcbiAgICB9XG4gICAgaW5kZXhPZihlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuaW5kZXhPZihlKTtcbiAgICB9XG4gICAgLyoqIEl0ZXJhdGVzIGVsZW1lbnRzIGluIG9yZGVyIGRlZmluZWQgYnkgXCJjb21wYXJhdG9yXCIgKi8gICAgZm9yRWFjaChlKSB7XG4gICAgICAgIHRoaXMuZGF0YS5pbm9yZGVyVHJhdmVyc2FsKCgodCwgbikgPT4gKGUodCksICExKSkpO1xuICAgIH1cbiAgICAvKiogSXRlcmF0ZXMgb3ZlciBgZWxlbWBzIHN1Y2ggdGhhdDogcmFuZ2VbMF0gJmx0Oz0gZWxlbSAmbHQ7IHJhbmdlWzFdLiAqLyAgICBmb3JFYWNoSW5SYW5nZShlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmRhdGEuZ2V0SXRlcmF0b3JGcm9tKGVbMF0pO1xuICAgICAgICBmb3IgKDtuLmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICBjb25zdCByID0gbi5nZXROZXh0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wYXJhdG9yKHIua2V5LCBlWzFdKSA+PSAwKSByZXR1cm47XG4gICAgICAgICAgICB0KHIua2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGBlbGVtYHMgc3VjaCB0aGF0OiBzdGFydCAmbHQ7PSBlbGVtIHVudGlsIGZhbHNlIGlzIHJldHVybmVkLlxuICAgICAqLyAgICBmb3JFYWNoV2hpbGUoZSwgdCkge1xuICAgICAgICBsZXQgbjtcbiAgICAgICAgZm9yIChuID0gdm9pZCAwICE9PSB0ID8gdGhpcy5kYXRhLmdldEl0ZXJhdG9yRnJvbSh0KSA6IHRoaXMuZGF0YS5nZXRJdGVyYXRvcigpOyBuLmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICBpZiAoIWUobi5nZXROZXh0KCkua2V5KSkgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBGaW5kcyB0aGUgbGVhc3QgZWxlbWVudCBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYGVsZW1gLiAqLyAgICBmaXJzdEFmdGVyT3JFcXVhbChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmRhdGEuZ2V0SXRlcmF0b3JGcm9tKGUpO1xuICAgICAgICByZXR1cm4gdC5oYXNOZXh0KCkgPyB0LmdldE5leHQoKS5rZXkgOiBudWxsO1xuICAgIH1cbiAgICBnZXRJdGVyYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRTZXRJdGVyYXRvcih0aGlzLmRhdGEuZ2V0SXRlcmF0b3IoKSk7XG4gICAgfVxuICAgIGdldEl0ZXJhdG9yRnJvbShlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkU2V0SXRlcmF0b3IodGhpcy5kYXRhLmdldEl0ZXJhdG9yRnJvbShlKSk7XG4gICAgfVxuICAgIC8qKiBJbnNlcnRzIG9yIHVwZGF0ZXMgYW4gZWxlbWVudCAqLyAgICBhZGQoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3B5KHRoaXMuZGF0YS5yZW1vdmUoZSkuaW5zZXJ0KGUsICEwKSk7XG4gICAgfVxuICAgIC8qKiBEZWxldGVzIGFuIGVsZW1lbnQgKi8gICAgZGVsZXRlKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzKGUpID8gdGhpcy5jb3B5KHRoaXMuZGF0YS5yZW1vdmUoZSkpIDogdGhpcztcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5pc0VtcHR5KCk7XG4gICAgfVxuICAgIHVuaW9uV2l0aChlKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcztcbiAgICAgICAgLy8gTWFrZSBzdXJlIGByZXN1bHRgIGFsd2F5cyByZWZlcnMgdG8gdGhlIGxhcmdlciBvbmUgb2YgdGhlIHR3byBzZXRzLlxuICAgICAgICAgICAgICAgIHJldHVybiB0LnNpemUgPCBlLnNpemUgJiYgKHQgPSBlLCBlID0gdGhpcyksIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0ID0gdC5hZGQoZSk7XG4gICAgICAgIH0pKSwgdDtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBTb3J0ZWRTZXQpKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLnNpemUgIT09IGUuc2l6ZSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5kYXRhLmdldEl0ZXJhdG9yKCksIG4gPSBlLmRhdGEuZ2V0SXRlcmF0b3IoKTtcbiAgICAgICAgZm9yICg7dC5oYXNOZXh0KCk7ICkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHQuZ2V0TmV4dCgpLmtleSwgciA9IG4uZ2V0TmV4dCgpLmtleTtcbiAgICAgICAgICAgIGlmICgwICE9PSB0aGlzLmNvbXBhcmF0b3IoZSwgcikpIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBlLnB1c2godCk7XG4gICAgICAgIH0pKSwgZTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgodCA9PiBlLnB1c2godCkpKSwgXCJTb3J0ZWRTZXQoXCIgKyBlLnRvU3RyaW5nKCkgKyBcIilcIjtcbiAgICB9XG4gICAgY29weShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgU29ydGVkU2V0KHRoaXMuY29tcGFyYXRvcik7XG4gICAgICAgIHJldHVybiB0LmRhdGEgPSBlLCB0O1xuICAgIH1cbn1cblxuY2xhc3MgU29ydGVkU2V0SXRlcmF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5pdGVyID0gZTtcbiAgICB9XG4gICAgZ2V0TmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlci5nZXROZXh0KCkua2V5O1xuICAgIH1cbiAgICBoYXNOZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVyLmhhc05leHQoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHNvcnRlZCBzZXRzIGZvciBlcXVhbGl0eSB1c2luZyB0aGVpciBuYXR1cmFsIG9yZGVyaW5nLiBUaGVcbiAqIG1ldGhvZCBjb21wdXRlcyB0aGUgaW50ZXJzZWN0aW9uIGFuZCBpbnZva2VzIGBvbkFkZGAgZm9yIGV2ZXJ5IGVsZW1lbnQgdGhhdFxuICogaXMgaW4gYGFmdGVyYCBidXQgbm90IGBiZWZvcmVgLiBgb25SZW1vdmVgIGlzIGludm9rZWQgZm9yIGV2ZXJ5IGVsZW1lbnQgaW5cbiAqIGBiZWZvcmVgIGJ1dCBtaXNzaW5nIGZyb20gYGFmdGVyYC5cbiAqXG4gKiBUaGUgbWV0aG9kIGNyZWF0ZXMgYSBjb3B5IG9mIGJvdGggYGJlZm9yZWAgYW5kIGBhZnRlcmAgYW5kIHJ1bnMgaW4gTyhuIGxvZ1xuICogbiksIHdoZXJlIG4gaXMgdGhlIHNpemUgb2YgdGhlIHR3byBsaXN0cy5cbiAqXG4gKiBAcGFyYW0gYmVmb3JlIC0gVGhlIGVsZW1lbnRzIHRoYXQgZXhpc3QgaW4gdGhlIG9yaWdpbmFsIHNldC5cbiAqIEBwYXJhbSBhZnRlciAtIFRoZSBlbGVtZW50cyB0byBkaWZmIGFnYWluc3QgdGhlIG9yaWdpbmFsIHNldC5cbiAqIEBwYXJhbSBjb21wYXJhdG9yIC0gVGhlIGNvbXBhcmF0b3IgZm9yIHRoZSBlbGVtZW50cyBpbiBiZWZvcmUgYW5kIGFmdGVyLlxuICogQHBhcmFtIG9uQWRkIC0gQSBmdW5jdGlvbiB0byBpbnZva2UgZm9yIGV2ZXJ5IGVsZW1lbnQgdGhhdCBpcyBwYXJ0IG9mIGBcbiAqIGFmdGVyYCBidXQgbm90IGBiZWZvcmVgLlxuICogQHBhcmFtIG9uUmVtb3ZlIC0gQSBmdW5jdGlvbiB0byBpbnZva2UgZm9yIGV2ZXJ5IGVsZW1lbnQgdGhhdCBpcyBwYXJ0IG9mXG4gKiBgYmVmb3JlYCBidXQgbm90IGBhZnRlcmAuXG4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBlbGVtZW50IGZyb20gdGhlIGl0ZXJhdG9yIG9yIGB1bmRlZmluZWRgIGlmIG5vbmUgYXZhaWxhYmxlLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfYWR2YW5jZUl0ZXJhdG9yKGUpIHtcbiAgICByZXR1cm4gZS5oYXNOZXh0KCkgPyBlLmdldE5leHQoKSA6IHZvaWQgMDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUHJvdmlkZXMgYSBzZXQgb2YgZmllbGRzIHRoYXQgY2FuIGJlIHVzZWQgdG8gcGFydGlhbGx5IHBhdGNoIGEgZG9jdW1lbnQuXG4gKiBGaWVsZE1hc2sgaXMgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIE9iamVjdFZhbHVlLlxuICogRXhhbXBsZXM6XG4gKiAgIGZvbyAtIE92ZXJ3cml0ZXMgZm9vIGVudGlyZWx5IHdpdGggdGhlIHByb3ZpZGVkIHZhbHVlLiBJZiBmb28gaXMgbm90XG4gKiAgICAgICAgIHByZXNlbnQgaW4gdGhlIGNvbXBhbmlvbiBPYmplY3RWYWx1ZSwgdGhlIGZpZWxkIGlzIGRlbGV0ZWQuXG4gKiAgIGZvby5iYXIgLSBPdmVyd3JpdGVzIG9ubHkgdGhlIGZpZWxkIGJhciBvZiB0aGUgb2JqZWN0IGZvby5cbiAqICAgICAgICAgICAgIElmIGZvbyBpcyBub3QgYW4gb2JqZWN0LCBmb28gaXMgcmVwbGFjZWQgd2l0aCBhbiBvYmplY3RcbiAqICAgICAgICAgICAgIGNvbnRhaW5pbmcgZm9vXG4gKi8gY2xhc3MgRmllbGRNYXNrIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHRoaXMuZmllbGRzID0gZSwgXG4gICAgICAgIC8vIFRPRE8oZGltb25kKTogdmFsaWRhdGlvbiBvZiBGaWVsZE1hc2tcbiAgICAgICAgLy8gU29ydCB0aGUgZmllbGQgbWFzayB0byBzdXBwb3J0IGBGaWVsZE1hc2suaXNFcXVhbCgpYCBhbmQgYXNzZXJ0IGJlbG93LlxuICAgICAgICBlLnNvcnQoRmllbGRQYXRoJDEuY29tcGFyYXRvcik7XG4gICAgfVxuICAgIHN0YXRpYyBlbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZE1hc2soW10pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IEZpZWxkTWFzayBvYmplY3QgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIGFkZGluZyBhbGwgdGhlIGdpdmVuXG4gICAgICogZmllbGRzIHBhdGhzIHRvIHRoaXMgZmllbGQgbWFzay5cbiAgICAgKi8gICAgdW5pb25XaXRoKGUpIHtcbiAgICAgICAgbGV0IHQgPSBuZXcgU29ydGVkU2V0KEZpZWxkUGF0aCQxLmNvbXBhcmF0b3IpO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5maWVsZHMpIHQgPSB0LmFkZChlKTtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIGUpIHQgPSB0LmFkZChuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZE1hc2sodC50b0FycmF5KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyB0aGF0IGBmaWVsZFBhdGhgIGlzIGluY2x1ZGVkIGJ5IGF0IGxlYXN0IG9uZSBmaWVsZCBpbiB0aGlzIGZpZWxkXG4gICAgICogbWFzay5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgYW4gTyhuKSBvcGVyYXRpb24sIHdoZXJlIGBuYCBpcyB0aGUgc2l6ZSBvZiB0aGUgZmllbGQgbWFzay5cbiAgICAgKi8gICAgY292ZXJzKGUpIHtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuZmllbGRzKSBpZiAodC5pc1ByZWZpeE9mKGUpKSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfYXJyYXlFcXVhbHModGhpcy5maWVsZHMsIGUuZmllbGRzLCAoKGUsIHQpID0+IGUuaXNFcXVhbCh0KSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gZXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgZGVjb2RpbmcgYmFzZTY0IHN0cmluZy5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfQmFzZTY0RGVjb2RlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMubmFtZSA9IFwiQmFzZTY0RGVjb2RlRXJyb3JcIjtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogQ29udmVydHMgYSBCYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gYSBiaW5hcnkgc3RyaW5nLiAqL1xuLyoqIFRydWUgaWYgYW5kIG9ubHkgaWYgdGhlIEJhc2U2NCBjb252ZXJzaW9uIGZ1bmN0aW9ucyBhcmUgYXZhaWxhYmxlLiAqL1xuZnVuY3Rpb24gX19QUklWQVRFX2lzQmFzZTY0QXZhaWxhYmxlKCkge1xuICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhdG9iO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbW11dGFibGUgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgXCJwcm90b1wiIGJ5dGUgc3RyaW5nLlxuICpcbiAqIFByb3RvIGJ5dGUgc3RyaW5ncyBjYW4gZWl0aGVyIGJlIEJhc2U2NC1lbmNvZGVkIHN0cmluZ3Mgb3IgVWludDhBcnJheXMgd2hlblxuICogc2VudCBvbiB0aGUgd2lyZS4gVGhpcyBjbGFzcyBhYnN0cmFjdHMgYXdheSB0aGlzIGRpZmZlcmVudGlhdGlvbiBieSBob2xkaW5nXG4gKiB0aGUgcHJvdG8gYnl0ZSBzdHJpbmcgaW4gYSBjb21tb24gY2xhc3MgdGhhdCBtdXN0IGJlIGNvbnZlcnRlZCBpbnRvIGEgc3RyaW5nXG4gKiBiZWZvcmUgYmVpbmcgc2VudCBhcyBhIHByb3RvLlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgQnl0ZVN0cmluZyB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLmJpbmFyeVN0cmluZyA9IGU7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmFzZTY0U3RyaW5nKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IGZ1bmN0aW9uIF9fUFJJVkFURV9kZWNvZGVCYXNlNjQoZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXRvYihlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IGBET01FeGNlcHRpb25gIGlzIGRlZmluZWQgYmVmb3JlIHVzaW5nIGl0IHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgLy8gXCJSZWZlcmVuY2VFcnJvcjogUHJvcGVydHkgJ0RPTUV4Y2VwdGlvbicgZG9lc24ndCBleGlzdFwiIGluIHJlYWN0LW5hdGl2ZS5cbiAgICAgICAgICAgICAgICAvLyAoaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9pc3N1ZXMvNzExNSlcbiAgICAgICAgICAgICAgICB0aHJvdyBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBET01FeGNlcHRpb24gJiYgZSBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiA/IG5ldyBfX1BSSVZBVEVfQmFzZTY0RGVjb2RlRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBzdHJpbmc6IFwiICsgZSkgOiBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKiBDb252ZXJ0cyBhIGJpbmFyeSBzdHJpbmcgdG8gYSBCYXNlNjQgZW5jb2RlZCBzdHJpbmcuICovIChlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCeXRlU3RyaW5nKHQpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVVpbnQ4QXJyYXkoZSkge1xuICAgICAgICAvLyBUT0RPKGluZGV4aW5nKTsgUmVtb3ZlIHRoZSBjb3B5IG9mIHRoZSBieXRlIHN0cmluZyBoZXJlIGFzIHRoaXMgbWV0aG9kXG4gICAgICAgIC8vIGlzIGZyZXF1ZW50bHkgY2FsbGVkIGR1cmluZyBpbmRleGluZy5cbiAgICAgICAgY29uc3QgdCA9IFxuICAgICAgICAvKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IGFuIFVpbnQ4YXJyYXkgdG8gYSBiaW5hcnkgc3RyaW5nLlxuICovXG4gICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9iaW5hcnlTdHJpbmdGcm9tVWludDhBcnJheShlKSB7XG4gICAgICAgICAgICBsZXQgdCA9IFwiXCI7XG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGUubGVuZ3RoOyArK24pIHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlW25dKTtcbiAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYSBiaW5hcnkgc3RyaW5nIHRvIGFuIFVpbnQ4QXJyYXkuXG4gKi8gKGUpO1xuICAgICAgICByZXR1cm4gbmV3IEJ5dGVTdHJpbmcodCk7XG4gICAgfVxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZXh0OiAoKSA9PiBlIDwgdGhpcy5iaW5hcnlTdHJpbmcubGVuZ3RoID8ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmJpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGUrKyksXG4gICAgICAgICAgICAgICAgZG9uZTogITFcbiAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBkb25lOiAhMFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICB0b0Jhc2U2NCgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9lbmNvZGVCYXNlNjQoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoZSk7XG4gICAgICAgIH0odGhpcy5iaW5hcnlTdHJpbmcpO1xuICAgIH1cbiAgICB0b1VpbnQ4QXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfdWludDhBcnJheUZyb21CaW5hcnlTdHJpbmcoZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBVaW50OEFycmF5KGUubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgZS5sZW5ndGg7IG4rKykgdFtuXSA9IGUuY2hhckNvZGVBdChuKTtcbiAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4gICAgICAgIC8vIEEgUmVnRXhwIG1hdGNoaW5nIElTTyA4NjAxIFVUQyB0aW1lc3RhbXBzIHdpdGggb3B0aW9uYWwgZnJhY3Rpb24uXG4gICAgICAgICh0aGlzLmJpbmFyeVN0cmluZyk7XG4gICAgfVxuICAgIGFwcHJveGltYXRlQnl0ZVNpemUoKSB7XG4gICAgICAgIHJldHVybiAyICogdGhpcy5iaW5hcnlTdHJpbmcubGVuZ3RoO1xuICAgIH1cbiAgICBjb21wYXJlVG8oZSkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IodGhpcy5iaW5hcnlTdHJpbmcsIGUuYmluYXJ5U3RyaW5nKTtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJpbmFyeVN0cmluZyA9PT0gZS5iaW5hcnlTdHJpbmc7XG4gICAgfVxufVxuXG5CeXRlU3RyaW5nLkVNUFRZX0JZVEVfU1RSSU5HID0gbmV3IEJ5dGVTdHJpbmcoXCJcIik7XG5cbmNvbnN0IG5lID0gbmV3IFJlZ0V4cCgvXlxcZHs0fS1cXGRcXGQtXFxkXFxkVFxcZFxcZDpcXGRcXGQ6XFxkXFxkKD86XFwuKFxcZCspKT9aJC8pO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBwb3NzaWJsZSBQcm90byB2YWx1ZXMgZm9yIGEgdGltZXN0YW1wIHZhbHVlIGludG8gYSBcInNlY29uZHMgYW5kXG4gKiBuYW5vc1wiIHJlcHJlc2VudGF0aW9uLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9ub3JtYWxpemVUaW1lc3RhbXAoZSkge1xuICAgIC8vIFRoZSBqc29uIGludGVyZmFjZSAoZm9yIHRoZSBicm93c2VyKSB3aWxsIHJldHVybiBhbiBpc28gdGltZXN0YW1wIHN0cmluZyxcbiAgICAvLyB3aGlsZSB0aGUgcHJvdG8ganMgbGlicmFyeSAoZm9yIG5vZGUpIHdpbGwgcmV0dXJuIGFcbiAgICAvLyBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIGluc3RhbmNlLlxuICAgIGlmIChfX1BSSVZBVEVfaGFyZEFzc2VydCghIWUpLCBcInN0cmluZ1wiID09IHR5cGVvZiBlKSB7XG4gICAgICAgIC8vIFRoZSBkYXRlIHN0cmluZyBjYW4gaGF2ZSBoaWdoZXIgcHJlY2lzaW9uIChuYW5vcykgdGhhbiB0aGUgRGF0ZSBjbGFzc1xuICAgICAgICAvLyAobWlsbGlzKSwgc28gd2UgZG8gc29tZSBjdXN0b20gcGFyc2luZyBoZXJlLlxuICAgICAgICAvLyBQYXJzZSB0aGUgbmFub3MgcmlnaHQgb3V0IG9mIHRoZSBzdHJpbmcuXG4gICAgICAgIGxldCB0ID0gMDtcbiAgICAgICAgY29uc3QgbiA9IG5lLmV4ZWMoZSk7XG4gICAgICAgIGlmIChfX1BSSVZBVEVfaGFyZEFzc2VydCghIW4pLCBuWzFdKSB7XG4gICAgICAgICAgICAvLyBQYWQgdGhlIGZyYWN0aW9uIG91dCB0byA5IGRpZ2l0cyAobmFub3MpLlxuICAgICAgICAgICAgbGV0IGUgPSBuWzFdO1xuICAgICAgICAgICAgZSA9IChlICsgXCIwMDAwMDAwMDBcIikuc3Vic3RyKDAsIDkpLCB0ID0gTnVtYmVyKGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlIHRoZSBkYXRlIHRvIGdldCB0aGUgc2Vjb25kcy5cbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IERhdGUoZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWNvbmRzOiBNYXRoLmZsb29yKHIuZ2V0VGltZSgpIC8gMWUzKSxcbiAgICAgICAgICAgIG5hbm9zOiB0XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlY29uZHM6IF9fUFJJVkFURV9ub3JtYWxpemVOdW1iZXIoZS5zZWNvbmRzKSxcbiAgICAgICAgbmFub3M6IF9fUFJJVkFURV9ub3JtYWxpemVOdW1iZXIoZS5uYW5vcylcbiAgICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBwb3NzaWJsZSBQcm90byB0eXBlcyBmb3IgbnVtYmVycyBpbnRvIGEgSmF2YVNjcmlwdCBudW1iZXIuXG4gKiBSZXR1cm5zIDAgaWYgdGhlIHZhbHVlIGlzIG5vdCBudW1lcmljLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9ub3JtYWxpemVOdW1iZXIoZSkge1xuICAgIC8vIFRPRE8oYmpvcm5pY2spOiBIYW5kbGUgaW50NjQgZ3JlYXRlciB0aGFuIDUzIGJpdHMuXG4gICAgcmV0dXJuIFwibnVtYmVyXCIgPT0gdHlwZW9mIGUgPyBlIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IE51bWJlcihlKSA6IDA7XG59XG5cbi8qKiBDb252ZXJ0cyB0aGUgcG9zc2libGUgUHJvdG8gdHlwZXMgZm9yIEJsb2JzIGludG8gYSBCeXRlU3RyaW5nLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfbm9ybWFsaXplQnl0ZVN0cmluZyhlKSB7XG4gICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyBCeXRlU3RyaW5nLmZyb21CYXNlNjRTdHJpbmcoZSkgOiBCeXRlU3RyaW5nLmZyb21VaW50OEFycmF5KGUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgbG9jYWxseS1hcHBsaWVkIFNlcnZlclRpbWVzdGFtcC5cbiAqXG4gKiBTZXJ2ZXIgVGltZXN0YW1wcyBhcmUgYmFja2VkIGJ5IE1hcFZhbHVlcyB0aGF0IGNvbnRhaW4gYW4gaW50ZXJuYWwgZmllbGRcbiAqIGBfX3R5cGVfX2Agd2l0aCBhIHZhbHVlIG9mIGBzZXJ2ZXJfdGltZXN0YW1wYC4gVGhlIHByZXZpb3VzIHZhbHVlIGFuZCBsb2NhbFxuICogd3JpdGUgdGltZSBhcmUgc3RvcmVkIGluIGl0cyBgX19wcmV2aW91c192YWx1ZV9fYCBhbmQgYF9fbG9jYWxfd3JpdGVfdGltZV9fYFxuICogZmllbGRzIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBOb3RlczpcbiAqIC0gU2VydmVyVGltZXN0YW1wVmFsdWUgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYVxuICogICB0cmFuc2Zvcm0uIFRoZXkgY2FuIG9ubHkgZXhpc3QgaW4gdGhlIGxvY2FsIHZpZXcgb2YgYSBkb2N1bWVudC4gVGhlcmVmb3JlXG4gKiAgIHRoZXkgZG8gbm90IG5lZWQgdG8gYmUgcGFyc2VkIG9yIHNlcmlhbGl6ZWQuXG4gKiAtIFdoZW4gZXZhbHVhdGVkIGxvY2FsbHkgKGUuZy4gZm9yIHNuYXBzaG90LmRhdGEoKSksIHRoZXkgYnkgZGVmYXVsdFxuICogICBldmFsdWF0ZSB0byBgbnVsbGAuIFRoaXMgYmVoYXZpb3IgY2FuIGJlIGNvbmZpZ3VyZWQgYnkgcGFzc2luZyBjdXN0b21cbiAqICAgRmllbGRWYWx1ZU9wdGlvbnMgdG8gdmFsdWUoKS5cbiAqIC0gV2l0aCByZXNwZWN0IHRvIG90aGVyIFNlcnZlclRpbWVzdGFtcFZhbHVlcywgdGhleSBzb3J0IGJ5IHRoZWlyXG4gKiAgIGxvY2FsV3JpdGVUaW1lLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9pc1NlcnZlclRpbWVzdGFtcChlKSB7XG4gICAgdmFyIHQsIG47XG4gICAgcmV0dXJuIFwic2VydmVyX3RpbWVzdGFtcFwiID09PSAobnVsbCA9PT0gKG4gPSAoKG51bGwgPT09ICh0ID0gbnVsbCA9PSBlID8gdm9pZCAwIDogZS5tYXBWYWx1ZSkgfHwgdm9pZCAwID09PSB0ID8gdm9pZCAwIDogdC5maWVsZHMpIHx8IHt9KS5fX3R5cGVfXykgfHwgdm9pZCAwID09PSBuID8gdm9pZCAwIDogbi5zdHJpbmdWYWx1ZSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBTZXJ2ZXJUaW1lc3RhbXAgcHJvdG8gdmFsdWUgKHVzaW5nIHRoZSBpbnRlcm5hbCBmb3JtYXQpLlxuICovXG4vKipcbiAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBiZWZvcmUgdGhpcyBTZXJ2ZXJUaW1lc3RhbXAgd2FzIHNldC5cbiAqXG4gKiBQcmVzZXJ2aW5nIHRoZSBwcmV2aW91cyB2YWx1ZXMgYWxsb3dzIHRoZSB1c2VyIHRvIGRpc3BsYXkgdGhlIGxhc3QgcmVzb2xlZFxuICogdmFsdWUgdW50aWwgdGhlIGJhY2tlbmQgcmVzcG9uZHMgd2l0aCB0aGUgdGltZXN0YW1wLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfZ2V0UHJldmlvdXNWYWx1ZShlKSB7XG4gICAgY29uc3QgdCA9IGUubWFwVmFsdWUuZmllbGRzLl9fcHJldmlvdXNfdmFsdWVfXztcbiAgICByZXR1cm4gX19QUklWQVRFX2lzU2VydmVyVGltZXN0YW1wKHQpID8gX19QUklWQVRFX2dldFByZXZpb3VzVmFsdWUodCkgOiB0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvY2FsIHRpbWUgYXQgd2hpY2ggdGhpcyB0aW1lc3RhbXAgd2FzIGZpcnN0IHNldC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZ2V0TG9jYWxXcml0ZVRpbWUoZSkge1xuICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfbm9ybWFsaXplVGltZXN0YW1wKGUubWFwVmFsdWUuZmllbGRzLl9fbG9jYWxfd3JpdGVfdGltZV9fLnRpbWVzdGFtcFZhbHVlKTtcbiAgICByZXR1cm4gbmV3IFRpbWVzdGFtcCh0LnNlY29uZHMsIHQubmFub3MpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBEYXRhYmFzZUluZm8ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBEYXRhYmFzZUluZm8gdXNpbmcgdGhlIHByb3ZpZGVkIGhvc3QsIGRhdGFiYXNlSWQgYW5kXG4gICAgICogcGVyc2lzdGVuY2VLZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YWJhc2VJZCAtIFRoZSBkYXRhYmFzZSB0byB1c2UuXG4gICAgICogQHBhcmFtIGFwcElkIC0gVGhlIEZpcmViYXNlIEFwcCBJZC5cbiAgICAgKiBAcGFyYW0gcGVyc2lzdGVuY2VLZXkgLSBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIEZpcmVzdG9yZSdzIGxvY2FsXG4gICAgICogc3RvcmFnZSAodXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBkYXRhYmFzZUlkKS5cbiAgICAgKiBAcGFyYW0gaG9zdCAtIFRoZSBGaXJlc3RvcmUgYmFja2VuZCBob3N0IHRvIGNvbm5lY3QgdG8uXG4gICAgICogQHBhcmFtIHNzbCAtIFdoZXRoZXIgdG8gdXNlIFNTTCB3aGVuIGNvbm5lY3RpbmcuXG4gICAgICogQHBhcmFtIGZvcmNlTG9uZ1BvbGxpbmcgLSBXaGV0aGVyIHRvIHVzZSB0aGUgZm9yY2VMb25nUG9sbGluZyBvcHRpb25cbiAgICAgKiB3aGVuIHVzaW5nIFdlYkNoYW5uZWwgYXMgdGhlIG5ldHdvcmsgdHJhbnNwb3J0LlxuICAgICAqIEBwYXJhbSBhdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgLSBXaGV0aGVyIHRvIHVzZSB0aGUgZGV0ZWN0QnVmZmVyaW5nUHJveHlcbiAgICAgKiBvcHRpb24gd2hlbiB1c2luZyBXZWJDaGFubmVsIGFzIHRoZSBuZXR3b3JrIHRyYW5zcG9ydC5cbiAgICAgKiBAcGFyYW0gbG9uZ1BvbGxpbmdPcHRpb25zIE9wdGlvbnMgdGhhdCBjb25maWd1cmUgbG9uZy1wb2xsaW5nLlxuICAgICAqIEBwYXJhbSB1c2VGZXRjaFN0cmVhbXMgV2hldGhlciB0byB1c2UgdGhlIEZldGNoIEFQSSBpbnN0ZWFkIG9mXG4gICAgICogWE1MSFRUUFJlcXVlc3RcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByLCBpLCBzLCBvLCBfLCBhKSB7XG4gICAgICAgIHRoaXMuZGF0YWJhc2VJZCA9IGUsIHRoaXMuYXBwSWQgPSB0LCB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gbiwgdGhpcy5ob3N0ID0gciwgdGhpcy5zc2wgPSBpLCBcbiAgICAgICAgdGhpcy5mb3JjZUxvbmdQb2xsaW5nID0gcywgdGhpcy5hdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPSBvLCB0aGlzLmxvbmdQb2xsaW5nT3B0aW9ucyA9IF8sIFxuICAgICAgICB0aGlzLnVzZUZldGNoU3RyZWFtcyA9IGE7XG4gICAgfVxufVxuXG4vKiogVGhlIGRlZmF1bHQgZGF0YWJhc2UgbmFtZSBmb3IgYSBwcm9qZWN0LiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBkYXRhYmFzZSBJRCBhIEZpcmVzdG9yZSBjbGllbnQgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIERhdGFiYXNlSWQge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0SWQgPSBlLCB0aGlzLmRhdGFiYXNlID0gdCB8fCBcIihkZWZhdWx0KVwiO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YWJhc2VJZChcIlwiLCBcIlwiKTtcbiAgICB9XG4gICAgZ2V0IGlzRGVmYXVsdERhdGFiYXNlKCkge1xuICAgICAgICByZXR1cm4gXCIoZGVmYXVsdClcIiA9PT0gdGhpcy5kYXRhYmFzZTtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgRGF0YWJhc2VJZCAmJiBlLnByb2plY3RJZCA9PT0gdGhpcy5wcm9qZWN0SWQgJiYgZS5kYXRhYmFzZSA9PT0gdGhpcy5kYXRhYmFzZTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCByZSA9IHtcbiAgICBtYXBWYWx1ZToge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIF9fdHlwZV9fOiB7XG4gICAgICAgICAgICAgICAgc3RyaW5nVmFsdWU6IFwiX19tYXhfX1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59LCBpZSA9IHtcbiAgICBudWxsVmFsdWU6IFwiTlVMTF9WQUxVRVwiXG59O1xuXG4vKiogRXh0cmFjdHMgdGhlIGJhY2tlbmQncyB0eXBlIG9yZGVyIGZvciB0aGUgcHJvdmlkZWQgdmFsdWUuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfdHlwZU9yZGVyKGUpIHtcbiAgICByZXR1cm4gXCJudWxsVmFsdWVcIiBpbiBlID8gMCAvKiBUeXBlT3JkZXIuTnVsbFZhbHVlICovIDogXCJib29sZWFuVmFsdWVcIiBpbiBlID8gMSAvKiBUeXBlT3JkZXIuQm9vbGVhblZhbHVlICovIDogXCJpbnRlZ2VyVmFsdWVcIiBpbiBlIHx8IFwiZG91YmxlVmFsdWVcIiBpbiBlID8gMiAvKiBUeXBlT3JkZXIuTnVtYmVyVmFsdWUgKi8gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gZSA/IDMgLyogVHlwZU9yZGVyLlRpbWVzdGFtcFZhbHVlICovIDogXCJzdHJpbmdWYWx1ZVwiIGluIGUgPyA1IC8qIFR5cGVPcmRlci5TdHJpbmdWYWx1ZSAqLyA6IFwiYnl0ZXNWYWx1ZVwiIGluIGUgPyA2IC8qIFR5cGVPcmRlci5CbG9iVmFsdWUgKi8gOiBcInJlZmVyZW5jZVZhbHVlXCIgaW4gZSA/IDcgLyogVHlwZU9yZGVyLlJlZlZhbHVlICovIDogXCJnZW9Qb2ludFZhbHVlXCIgaW4gZSA/IDggLyogVHlwZU9yZGVyLkdlb1BvaW50VmFsdWUgKi8gOiBcImFycmF5VmFsdWVcIiBpbiBlID8gOSAvKiBUeXBlT3JkZXIuQXJyYXlWYWx1ZSAqLyA6IFwibWFwVmFsdWVcIiBpbiBlID8gX19QUklWQVRFX2lzU2VydmVyVGltZXN0YW1wKGUpID8gNCAvKiBUeXBlT3JkZXIuU2VydmVyVGltZXN0YW1wVmFsdWUgKi8gOiBfX1BSSVZBVEVfaXNNYXhWYWx1ZShlKSA/IDkwMDcxOTkyNTQ3NDA5OTEgLyogVHlwZU9yZGVyLk1heFZhbHVlICovIDogMTAgLyogVHlwZU9yZGVyLk9iamVjdFZhbHVlICovIDogZmFpbCgpO1xufVxuXG4vKiogVGVzdHMgYGxlZnRgIGFuZCBgcmlnaHRgIGZvciBlcXVhbGl0eSBiYXNlZCBvbiB0aGUgYmFja2VuZCBzZW1hbnRpY3MuICovIGZ1bmN0aW9uIF9fUFJJVkFURV92YWx1ZUVxdWFscyhlLCB0KSB7XG4gICAgaWYgKGUgPT09IHQpIHJldHVybiAhMDtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX3R5cGVPcmRlcihlKTtcbiAgICBpZiAobiAhPT0gX19QUklWQVRFX3R5cGVPcmRlcih0KSkgcmV0dXJuICExO1xuICAgIHN3aXRjaCAobikge1xuICAgICAgY2FzZSAwIC8qIFR5cGVPcmRlci5OdWxsVmFsdWUgKi8gOlxuICAgICAgY2FzZSA5MDA3MTk5MjU0NzQwOTkxIC8qIFR5cGVPcmRlci5NYXhWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiAhMDtcblxuICAgICAgY2FzZSAxIC8qIFR5cGVPcmRlci5Cb29sZWFuVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZS5ib29sZWFuVmFsdWUgPT09IHQuYm9vbGVhblZhbHVlO1xuXG4gICAgICBjYXNlIDQgLyogVHlwZU9yZGVyLlNlcnZlclRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9nZXRMb2NhbFdyaXRlVGltZShlKS5pc0VxdWFsKF9fUFJJVkFURV9nZXRMb2NhbFdyaXRlVGltZSh0KSk7XG5cbiAgICAgIGNhc2UgMyAvKiBUeXBlT3JkZXIuVGltZXN0YW1wVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX3RpbWVzdGFtcEVxdWFscyhlLCB0KSB7XG4gICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS50aW1lc3RhbXBWYWx1ZSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB0LnRpbWVzdGFtcFZhbHVlICYmIGUudGltZXN0YW1wVmFsdWUubGVuZ3RoID09PSB0LnRpbWVzdGFtcFZhbHVlLmxlbmd0aCkgXG4gICAgICAgICAgICAvLyBVc2Ugc3RyaW5nIGVxdWFsaXR5IGZvciBJU08gODYwMSB0aW1lc3RhbXBzXG4gICAgICAgICAgICByZXR1cm4gZS50aW1lc3RhbXBWYWx1ZSA9PT0gdC50aW1lc3RhbXBWYWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfbm9ybWFsaXplVGltZXN0YW1wKGUudGltZXN0YW1wVmFsdWUpLCByID0gX19QUklWQVRFX25vcm1hbGl6ZVRpbWVzdGFtcCh0LnRpbWVzdGFtcFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuLnNlY29uZHMgPT09IHIuc2Vjb25kcyAmJiBuLm5hbm9zID09PSByLm5hbm9zO1xuICAgICAgICB9KGUsIHQpO1xuXG4gICAgICBjYXNlIDUgLyogVHlwZU9yZGVyLlN0cmluZ1ZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGUuc3RyaW5nVmFsdWUgPT09IHQuc3RyaW5nVmFsdWU7XG5cbiAgICAgIGNhc2UgNiAvKiBUeXBlT3JkZXIuQmxvYlZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9ibG9iRXF1YWxzKGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiBfX1BSSVZBVEVfbm9ybWFsaXplQnl0ZVN0cmluZyhlLmJ5dGVzVmFsdWUpLmlzRXF1YWwoX19QUklWQVRFX25vcm1hbGl6ZUJ5dGVTdHJpbmcodC5ieXRlc1ZhbHVlKSk7XG4gICAgICAgIH0oZSwgdCk7XG5cbiAgICAgIGNhc2UgNyAvKiBUeXBlT3JkZXIuUmVmVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZS5yZWZlcmVuY2VWYWx1ZSA9PT0gdC5yZWZlcmVuY2VWYWx1ZTtcblxuICAgICAgY2FzZSA4IC8qIFR5cGVPcmRlci5HZW9Qb2ludFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9nZW9Qb2ludEVxdWFscyhlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gX19QUklWQVRFX25vcm1hbGl6ZU51bWJlcihlLmdlb1BvaW50VmFsdWUubGF0aXR1ZGUpID09PSBfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKHQuZ2VvUG9pbnRWYWx1ZS5sYXRpdHVkZSkgJiYgX19QUklWQVRFX25vcm1hbGl6ZU51bWJlcihlLmdlb1BvaW50VmFsdWUubG9uZ2l0dWRlKSA9PT0gX19QUklWQVRFX25vcm1hbGl6ZU51bWJlcih0Lmdlb1BvaW50VmFsdWUubG9uZ2l0dWRlKTtcbiAgICAgICAgfShlLCB0KTtcblxuICAgICAgY2FzZSAyIC8qIFR5cGVPcmRlci5OdW1iZXJWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfbnVtYmVyRXF1YWxzKGUsIHQpIHtcbiAgICAgICAgICAgIGlmIChcImludGVnZXJWYWx1ZVwiIGluIGUgJiYgXCJpbnRlZ2VyVmFsdWVcIiBpbiB0KSByZXR1cm4gX19QUklWQVRFX25vcm1hbGl6ZU51bWJlcihlLmludGVnZXJWYWx1ZSkgPT09IF9fUFJJVkFURV9ub3JtYWxpemVOdW1iZXIodC5pbnRlZ2VyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKFwiZG91YmxlVmFsdWVcIiBpbiBlICYmIFwiZG91YmxlVmFsdWVcIiBpbiB0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9ub3JtYWxpemVOdW1iZXIoZS5kb3VibGVWYWx1ZSksIHIgPSBfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKHQuZG91YmxlVmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuID09PSByID8gX19QUklWQVRFX2lzTmVnYXRpdmVaZXJvKG4pID09PSBfX1BSSVZBVEVfaXNOZWdhdGl2ZVplcm8ocikgOiBpc05hTihuKSAmJiBpc05hTihyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfShlLCB0KTtcblxuICAgICAgY2FzZSA5IC8qIFR5cGVPcmRlci5BcnJheVZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9hcnJheUVxdWFscyhlLmFycmF5VmFsdWUudmFsdWVzIHx8IFtdLCB0LmFycmF5VmFsdWUudmFsdWVzIHx8IFtdLCBfX1BSSVZBVEVfdmFsdWVFcXVhbHMpO1xuXG4gICAgICBjYXNlIDEwIC8qIFR5cGVPcmRlci5PYmplY3RWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfb2JqZWN0RXF1YWxzKGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLm1hcFZhbHVlLmZpZWxkcyB8fCB7fSwgciA9IHQubWFwVmFsdWUuZmllbGRzIHx8IHt9O1xuICAgICAgICAgICAgaWYgKF9fUFJJVkFURV9vYmplY3RTaXplKG4pICE9PSBfX1BSSVZBVEVfb2JqZWN0U2l6ZShyKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlIGluIG4pIGlmIChuLmhhc093blByb3BlcnR5KGUpICYmICh2b2lkIDAgPT09IHJbZV0gfHwgIV9fUFJJVkFURV92YWx1ZUVxdWFscyhuW2VdLCByW2VdKSkpIHJldHVybiAhMTtcbiAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgfVxuICAgICAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSBBcnJheVZhbHVlIGNvbnRhaW5zIHRoZSBzcGVjaWZpZWQgZWxlbWVudC4gKi8gKGUsIHQpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFpbCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2FycmF5VmFsdWVDb250YWlucyhlLCB0KSB7XG4gICAgcmV0dXJuIHZvaWQgMCAhPT0gKGUudmFsdWVzIHx8IFtdKS5maW5kKChlID0+IF9fUFJJVkFURV92YWx1ZUVxdWFscyhlLCB0KSkpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfdmFsdWVDb21wYXJlKGUsIHQpIHtcbiAgICBpZiAoZSA9PT0gdCkgcmV0dXJuIDA7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV90eXBlT3JkZXIoZSksIHIgPSBfX1BSSVZBVEVfdHlwZU9yZGVyKHQpO1xuICAgIGlmIChuICE9PSByKSByZXR1cm4gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3Iobiwgcik7XG4gICAgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIDAgLyogVHlwZU9yZGVyLk51bGxWYWx1ZSAqLyA6XG4gICAgICBjYXNlIDkwMDcxOTkyNTQ3NDA5OTEgLyogVHlwZU9yZGVyLk1heFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIDA7XG5cbiAgICAgIGNhc2UgMSAvKiBUeXBlT3JkZXIuQm9vbGVhblZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKGUuYm9vbGVhblZhbHVlLCB0LmJvb2xlYW5WYWx1ZSk7XG5cbiAgICAgIGNhc2UgMiAvKiBUeXBlT3JkZXIuTnVtYmVyVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2NvbXBhcmVOdW1iZXJzKGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKGUuaW50ZWdlclZhbHVlIHx8IGUuZG91YmxlVmFsdWUpLCByID0gX19QUklWQVRFX25vcm1hbGl6ZU51bWJlcih0LmludGVnZXJWYWx1ZSB8fCB0LmRvdWJsZVZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuIDwgciA/IC0xIDogbiA+IHIgPyAxIDogbiA9PT0gciA/IDAgOiBcbiAgICAgICAgICAgIC8vIG9uZSBvciBib3RoIGFyZSBOYU4uXG4gICAgICAgICAgICBpc05hTihuKSA/IGlzTmFOKHIpID8gMCA6IC0xIDogMTtcbiAgICAgICAgfShlLCB0KTtcblxuICAgICAgY2FzZSAzIC8qIFR5cGVPcmRlci5UaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfY29tcGFyZVRpbWVzdGFtcHMoZS50aW1lc3RhbXBWYWx1ZSwgdC50aW1lc3RhbXBWYWx1ZSk7XG5cbiAgICAgIGNhc2UgNCAvKiBUeXBlT3JkZXIuU2VydmVyVGltZXN0YW1wVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gX19QUklWQVRFX2NvbXBhcmVUaW1lc3RhbXBzKF9fUFJJVkFURV9nZXRMb2NhbFdyaXRlVGltZShlKSwgX19QUklWQVRFX2dldExvY2FsV3JpdGVUaW1lKHQpKTtcblxuICAgICAgY2FzZSA1IC8qIFR5cGVPcmRlci5TdHJpbmdWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcihlLnN0cmluZ1ZhbHVlLCB0LnN0cmluZ1ZhbHVlKTtcblxuICAgICAgY2FzZSA2IC8qIFR5cGVPcmRlci5CbG9iVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2NvbXBhcmVCbG9icyhlLCB0KSB7XG4gICAgICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX25vcm1hbGl6ZUJ5dGVTdHJpbmcoZSksIHIgPSBfX1BSSVZBVEVfbm9ybWFsaXplQnl0ZVN0cmluZyh0KTtcbiAgICAgICAgICAgIHJldHVybiBuLmNvbXBhcmVUbyhyKTtcbiAgICAgICAgfShlLmJ5dGVzVmFsdWUsIHQuYnl0ZXNWYWx1ZSk7XG5cbiAgICAgIGNhc2UgNyAvKiBUeXBlT3JkZXIuUmVmVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2NvbXBhcmVSZWZlcmVuY2VzKGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLnNwbGl0KFwiL1wiKSwgciA9IHQuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBuLmxlbmd0aCAmJiBlIDwgci5sZW5ndGg7IGUrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcihuW2VdLCByW2VdKTtcbiAgICAgICAgICAgICAgICBpZiAoMCAhPT0gdCkgcmV0dXJuIHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3Iobi5sZW5ndGgsIHIubGVuZ3RoKTtcbiAgICAgICAgfShlLnJlZmVyZW5jZVZhbHVlLCB0LnJlZmVyZW5jZVZhbHVlKTtcblxuICAgICAgY2FzZSA4IC8qIFR5cGVPcmRlci5HZW9Qb2ludFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9jb21wYXJlR2VvUG9pbnRzKGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcihfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKGUubGF0aXR1ZGUpLCBfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKHQubGF0aXR1ZGUpKTtcbiAgICAgICAgICAgIGlmICgwICE9PSBuKSByZXR1cm4gbjtcbiAgICAgICAgICAgIHJldHVybiBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcihfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKGUubG9uZ2l0dWRlKSwgX19QUklWQVRFX25vcm1hbGl6ZU51bWJlcih0LmxvbmdpdHVkZSkpO1xuICAgICAgICB9KGUuZ2VvUG9pbnRWYWx1ZSwgdC5nZW9Qb2ludFZhbHVlKTtcblxuICAgICAgY2FzZSA5IC8qIFR5cGVPcmRlci5BcnJheVZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9jb21wYXJlQXJyYXlzKGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLnZhbHVlcyB8fCBbXSwgciA9IHQudmFsdWVzIHx8IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBuLmxlbmd0aCAmJiBlIDwgci5sZW5ndGg7ICsrZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfdmFsdWVDb21wYXJlKG5bZV0sIHJbZV0pO1xuICAgICAgICAgICAgICAgIGlmICh0KSByZXR1cm4gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcihuLmxlbmd0aCwgci5sZW5ndGgpO1xuICAgICAgICB9KGUuYXJyYXlWYWx1ZSwgdC5hcnJheVZhbHVlKTtcblxuICAgICAgY2FzZSAxMCAvKiBUeXBlT3JkZXIuT2JqZWN0VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2NvbXBhcmVNYXBzKGUsIHQpIHtcbiAgICAgICAgICAgIGlmIChlID09PSByZS5tYXBWYWx1ZSAmJiB0ID09PSByZS5tYXBWYWx1ZSkgcmV0dXJuIDA7XG4gICAgICAgICAgICBpZiAoZSA9PT0gcmUubWFwVmFsdWUpIHJldHVybiAxO1xuICAgICAgICAgICAgaWYgKHQgPT09IHJlLm1hcFZhbHVlKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBjb25zdCBuID0gZS5maWVsZHMgfHwge30sIHIgPSBPYmplY3Qua2V5cyhuKSwgaSA9IHQuZmllbGRzIHx8IHt9LCBzID0gT2JqZWN0LmtleXMoaSk7XG4gICAgICAgICAgICAvLyBFdmVuIHRob3VnaCBNYXBWYWx1ZXMgYXJlIGxpa2VseSBzb3J0ZWQgY29ycmVjdGx5IGJhc2VkIG9uIHRoZWlyIGluc2VydGlvblxuICAgICAgICAgICAgLy8gb3JkZXIgKGUuZy4gd2hlbiByZWNlaXZlZCBmcm9tIHRoZSBiYWNrZW5kKSwgbG9jYWwgbW9kaWZpY2F0aW9ucyBjYW4gYnJpbmdcbiAgICAgICAgICAgIC8vIGVsZW1lbnRzIG91dCBvZiBvcmRlci4gV2UgbmVlZCB0byByZS1zb3J0IHRoZSBlbGVtZW50cyB0byBlbnN1cmUgdGhhdFxuICAgICAgICAgICAgLy8gY2Fub25pY2FsIElEcyBhcmUgaW5kZXBlbmRlbnQgb2YgaW5zZXJ0aW9uIG9yZGVyLlxuICAgICAgICAgICAgci5zb3J0KCksIHMuc29ydCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCByLmxlbmd0aCAmJiBlIDwgcy5sZW5ndGg7ICsrZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcihyW2VdLCBzW2VdKTtcbiAgICAgICAgICAgICAgICBpZiAoMCAhPT0gdCkgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IF9fUFJJVkFURV92YWx1ZUNvbXBhcmUobltyW2VdXSwgaVtzW2VdXSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IG8pIHJldHVybiBvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKHIubGVuZ3RoLCBzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIGNhbm9uaWNhbCBJRCBmb3IgdGhlIHByb3ZpZGVkIGZpZWxkIHZhbHVlIChhcyB1c2VkIGluIFRhcmdldFxuICogc2VyaWFsaXphdGlvbikuXG4gKi8gKGUubWFwVmFsdWUsIHQubWFwVmFsdWUpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBmYWlsKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY29tcGFyZVRpbWVzdGFtcHMoZSwgdCkge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgZS5sZW5ndGggPT09IHQubGVuZ3RoKSByZXR1cm4gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IoZSwgdCk7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9ub3JtYWxpemVUaW1lc3RhbXAoZSksIHIgPSBfX1BSSVZBVEVfbm9ybWFsaXplVGltZXN0YW1wKHQpLCBpID0gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3Iobi5zZWNvbmRzLCByLnNlY29uZHMpO1xuICAgIHJldHVybiAwICE9PSBpID8gaSA6IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKG4ubmFub3MsIHIubmFub3MpO1xufVxuXG5mdW5jdGlvbiBjYW5vbmljYWxJZChlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9jYW5vbmlmeVZhbHVlKGUpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY2Fub25pZnlWYWx1ZShlKSB7XG4gICAgcmV0dXJuIFwibnVsbFZhbHVlXCIgaW4gZSA/IFwibnVsbFwiIDogXCJib29sZWFuVmFsdWVcIiBpbiBlID8gXCJcIiArIGUuYm9vbGVhblZhbHVlIDogXCJpbnRlZ2VyVmFsdWVcIiBpbiBlID8gXCJcIiArIGUuaW50ZWdlclZhbHVlIDogXCJkb3VibGVWYWx1ZVwiIGluIGUgPyBcIlwiICsgZS5kb3VibGVWYWx1ZSA6IFwidGltZXN0YW1wVmFsdWVcIiBpbiBlID8gZnVuY3Rpb24gX19QUklWQVRFX2Nhbm9uaWZ5VGltZXN0YW1wKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9ub3JtYWxpemVUaW1lc3RhbXAoZSk7XG4gICAgICAgIHJldHVybiBgdGltZSgke3Quc2Vjb25kc30sJHt0Lm5hbm9zfSlgO1xuICAgIH0oZS50aW1lc3RhbXBWYWx1ZSkgOiBcInN0cmluZ1ZhbHVlXCIgaW4gZSA/IGUuc3RyaW5nVmFsdWUgOiBcImJ5dGVzVmFsdWVcIiBpbiBlID8gZnVuY3Rpb24gX19QUklWQVRFX2Nhbm9uaWZ5Qnl0ZVN0cmluZyhlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbm9ybWFsaXplQnl0ZVN0cmluZyhlKS50b0Jhc2U2NCgpO1xuICAgIH0oZS5ieXRlc1ZhbHVlKSA6IFwicmVmZXJlbmNlVmFsdWVcIiBpbiBlID8gZnVuY3Rpb24gX19QUklWQVRFX2Nhbm9uaWZ5UmVmZXJlbmNlKGUpIHtcbiAgICAgICAgcmV0dXJuIERvY3VtZW50S2V5LmZyb21OYW1lKGUpLnRvU3RyaW5nKCk7XG4gICAgfShlLnJlZmVyZW5jZVZhbHVlKSA6IFwiZ2VvUG9pbnRWYWx1ZVwiIGluIGUgPyBmdW5jdGlvbiBfX1BSSVZBVEVfY2Fub25pZnlHZW9Qb2ludChlKSB7XG4gICAgICAgIHJldHVybiBgZ2VvKCR7ZS5sYXRpdHVkZX0sJHtlLmxvbmdpdHVkZX0pYDtcbiAgICB9KGUuZ2VvUG9pbnRWYWx1ZSkgOiBcImFycmF5VmFsdWVcIiBpbiBlID8gZnVuY3Rpb24gX19QUklWQVRFX2Nhbm9uaWZ5QXJyYXkoZSkge1xuICAgICAgICBsZXQgdCA9IFwiW1wiLCBuID0gITA7XG4gICAgICAgIGZvciAoY29uc3QgciBvZiBlLnZhbHVlcyB8fCBbXSkgbiA/IG4gPSAhMSA6IHQgKz0gXCIsXCIsIHQgKz0gX19QUklWQVRFX2Nhbm9uaWZ5VmFsdWUocik7XG4gICAgICAgIHJldHVybiB0ICsgXCJdXCI7XG4gICAgfVxuICAgIC8qKlxuICogUmV0dXJucyBhbiBhcHByb3hpbWF0ZSAoYW5kIHdpbGRseSBpbmFjY3VyYXRlKSBpbi1tZW1vcnkgc2l6ZSBmb3IgdGhlIGZpZWxkXG4gKiB2YWx1ZS5cbiAqXG4gKiBUaGUgbWVtb3J5IHNpemUgdGFrZXMgaW50byBhY2NvdW50IG9ubHkgdGhlIGFjdHVhbCB1c2VyIGRhdGEgYXMgaXQgcmVzaWRlc1xuICogaW4gbWVtb3J5IGFuZCBpZ25vcmVzIG9iamVjdCBvdmVyaGVhZC5cbiAqLyAoZS5hcnJheVZhbHVlKSA6IFwibWFwVmFsdWVcIiBpbiBlID8gZnVuY3Rpb24gX19QUklWQVRFX2Nhbm9uaWZ5TWFwKGUpIHtcbiAgICAgICAgLy8gSXRlcmF0aW9uIG9yZGVyIGluIEphdmFTY3JpcHQgaXMgbm90IGd1YXJhbnRlZWQuIFRvIGVuc3VyZSB0aGF0IHdlIGdlbmVyYXRlXG4gICAgICAgIC8vIG1hdGNoaW5nIGNhbm9uaWNhbCBJRHMgZm9yIGlkZW50aWNhbCBtYXBzLCB3ZSBuZWVkIHRvIHNvcnQgdGhlIGtleXMuXG4gICAgICAgIGNvbnN0IHQgPSBPYmplY3Qua2V5cyhlLmZpZWxkcyB8fCB7fSkuc29ydCgpO1xuICAgICAgICBsZXQgbiA9IFwie1wiLCByID0gITA7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSByID8gciA9ICExIDogbiArPSBcIixcIiwgbiArPSBgJHtpfToke19fUFJJVkFURV9jYW5vbmlmeVZhbHVlKGUuZmllbGRzW2ldKX1gO1xuICAgICAgICByZXR1cm4gbiArIFwifVwiO1xuICAgIH0oZS5tYXBWYWx1ZSkgOiBmYWlsKCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9lc3RpbWF0ZUJ5dGVTaXplKGUpIHtcbiAgICBzd2l0Y2ggKF9fUFJJVkFURV90eXBlT3JkZXIoZSkpIHtcbiAgICAgIGNhc2UgMCAvKiBUeXBlT3JkZXIuTnVsbFZhbHVlICovIDpcbiAgICAgIGNhc2UgMSAvKiBUeXBlT3JkZXIuQm9vbGVhblZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIDQ7XG5cbiAgICAgIGNhc2UgMiAvKiBUeXBlT3JkZXIuTnVtYmVyVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gODtcblxuICAgICAgY2FzZSAzIC8qIFR5cGVPcmRlci5UaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICBjYXNlIDggLyogVHlwZU9yZGVyLkdlb1BvaW50VmFsdWUgKi8gOlxuICAgICAgICAvLyBHZW9Qb2ludHMgYXJlIG1hZGUgdXAgb2YgdHdvIGRpc3RpbmN0IG51bWJlcnMgKGxhdGl0dWRlICsgbG9uZ2l0dWRlKVxuICAgICAgICByZXR1cm4gMTY7XG5cbiAgICAgIGNhc2UgNCAvKiBUeXBlT3JkZXIuU2VydmVyVGltZXN0YW1wVmFsdWUgKi8gOlxuICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX2dldFByZXZpb3VzVmFsdWUoZSk7XG4gICAgICAgIHJldHVybiB0ID8gMTYgKyBfX1BSSVZBVEVfZXN0aW1hdGVCeXRlU2l6ZSh0KSA6IDE2O1xuXG4gICAgICBjYXNlIDUgLyogVHlwZU9yZGVyLlN0cmluZ1ZhbHVlICovIDpcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvRGF0YV9zdHJ1Y3R1cmVzOlxuICAgICAgICAvLyBcIkphdmFTY3JpcHQncyBTdHJpbmcgdHlwZSBpcyBbLi4uXSBhIHNldCBvZiBlbGVtZW50cyBvZiAxNi1iaXQgdW5zaWduZWRcbiAgICAgICAgLy8gaW50ZWdlciB2YWx1ZXNcIlxuICAgICAgICByZXR1cm4gMiAqIGUuc3RyaW5nVmFsdWUubGVuZ3RoO1xuXG4gICAgICBjYXNlIDYgLyogVHlwZU9yZGVyLkJsb2JWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbm9ybWFsaXplQnl0ZVN0cmluZyhlLmJ5dGVzVmFsdWUpLmFwcHJveGltYXRlQnl0ZVNpemUoKTtcblxuICAgICAgY2FzZSA3IC8qIFR5cGVPcmRlci5SZWZWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBlLnJlZmVyZW5jZVZhbHVlLmxlbmd0aDtcblxuICAgICAgY2FzZSA5IC8qIFR5cGVPcmRlci5BcnJheVZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9lc3RpbWF0ZUFycmF5Qnl0ZVNpemUoZSkge1xuICAgICAgICAgICAgcmV0dXJuIChlLnZhbHVlcyB8fCBbXSkucmVkdWNlKCgoZSwgdCkgPT4gZSArIF9fUFJJVkFURV9lc3RpbWF0ZUJ5dGVTaXplKHQpKSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFJldHVybnMgYSByZWZlcmVuY2UgdmFsdWUgZm9yIHRoZSBwcm92aWRlZCBkYXRhYmFzZSBhbmQga2V5LiAqLyAoZS5hcnJheVZhbHVlKTtcblxuICAgICAgY2FzZSAxMCAvKiBUeXBlT3JkZXIuT2JqZWN0VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2VzdGltYXRlTWFwQnl0ZVNpemUoZSkge1xuICAgICAgICAgICAgbGV0IHQgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGZvckVhY2goZS5maWVsZHMsICgoZSwgbikgPT4ge1xuICAgICAgICAgICAgICAgIHQgKz0gZS5sZW5ndGggKyBfX1BSSVZBVEVfZXN0aW1hdGVCeXRlU2l6ZShuKTtcbiAgICAgICAgICAgIH0pKSwgdDtcbiAgICAgICAgfShlLm1hcFZhbHVlKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgZmFpbCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3JlZlZhbHVlKGUsIHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWZlcmVuY2VWYWx1ZTogYHByb2plY3RzLyR7ZS5wcm9qZWN0SWR9L2RhdGFiYXNlcy8ke2UuZGF0YWJhc2V9L2RvY3VtZW50cy8ke3QucGF0aC5jYW5vbmljYWxTdHJpbmcoKX1gXG4gICAgfTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIEludGVnZXJWYWx1ZSAuICovIGZ1bmN0aW9uIGlzSW50ZWdlcihlKSB7XG4gICAgcmV0dXJuICEhZSAmJiBcImludGVnZXJWYWx1ZVwiIGluIGU7XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIERvdWJsZVZhbHVlLiAqL1xuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIEFycmF5VmFsdWUuICovXG5mdW5jdGlvbiBpc0FycmF5KGUpIHtcbiAgICByZXR1cm4gISFlICYmIFwiYXJyYXlWYWx1ZVwiIGluIGU7XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIE51bGxWYWx1ZS4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2lzTnVsbFZhbHVlKGUpIHtcbiAgICByZXR1cm4gISFlICYmIFwibnVsbFZhbHVlXCIgaW4gZTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIE5hTi4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2lzTmFuVmFsdWUoZSkge1xuICAgIHJldHVybiAhIWUgJiYgXCJkb3VibGVWYWx1ZVwiIGluIGUgJiYgaXNOYU4oTnVtYmVyKGUuZG91YmxlVmFsdWUpKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgTWFwVmFsdWUuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9pc01hcFZhbHVlKGUpIHtcbiAgICByZXR1cm4gISFlICYmIFwibWFwVmFsdWVcIiBpbiBlO1xufVxuXG4vKiogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYC4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2RlZXBDbG9uZShlKSB7XG4gICAgaWYgKGUuZ2VvUG9pbnRWYWx1ZSkgcmV0dXJuIHtcbiAgICAgICAgZ2VvUG9pbnRWYWx1ZTogT2JqZWN0LmFzc2lnbih7fSwgZS5nZW9Qb2ludFZhbHVlKVxuICAgIH07XG4gICAgaWYgKGUudGltZXN0YW1wVmFsdWUgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgZS50aW1lc3RhbXBWYWx1ZSkgcmV0dXJuIHtcbiAgICAgICAgdGltZXN0YW1wVmFsdWU6IE9iamVjdC5hc3NpZ24oe30sIGUudGltZXN0YW1wVmFsdWUpXG4gICAgfTtcbiAgICBpZiAoZS5tYXBWYWx1ZSkge1xuICAgICAgICBjb25zdCB0ID0ge1xuICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmb3JFYWNoKGUubWFwVmFsdWUuZmllbGRzLCAoKGUsIG4pID0+IHQubWFwVmFsdWUuZmllbGRzW2VdID0gX19QUklWQVRFX2RlZXBDbG9uZShuKSkpLCBcbiAgICAgICAgdDtcbiAgICB9XG4gICAgaWYgKGUuYXJyYXlWYWx1ZSkge1xuICAgICAgICBjb25zdCB0ID0ge1xuICAgICAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgICAgIHZhbHVlczogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCAoZS5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXSkubGVuZ3RoOyArK24pIHQuYXJyYXlWYWx1ZS52YWx1ZXNbbl0gPSBfX1BSSVZBVEVfZGVlcENsb25lKGUuYXJyYXlWYWx1ZS52YWx1ZXNbbl0pO1xuICAgICAgICByZXR1cm4gdDtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGUpO1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIHRoZSBWYWx1ZSByZXByZXNlbnRzIHRoZSBjYW5vbmljYWwge0BsaW5rICNNQVhfVkFMVUV9IC4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2lzTWF4VmFsdWUoZSkge1xuICAgIHJldHVybiBcIl9fbWF4X19cIiA9PT0gKCgoZS5tYXBWYWx1ZSB8fCB7fSkuZmllbGRzIHx8IHt9KS5fX3R5cGVfXyB8fCB7fSkuc3RyaW5nVmFsdWU7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSBsb3dlc3QgdmFsdWUgZm9yIHRoZSBnaXZlbiB2YWx1ZSB0eXBlIChpbmNsdXNpdmUpLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfdmFsdWVzR2V0TG93ZXJCb3VuZChlKSB7XG4gICAgcmV0dXJuIFwibnVsbFZhbHVlXCIgaW4gZSA/IGllIDogXCJib29sZWFuVmFsdWVcIiBpbiBlID8ge1xuICAgICAgICBib29sZWFuVmFsdWU6ICExXG4gICAgfSA6IFwiaW50ZWdlclZhbHVlXCIgaW4gZSB8fCBcImRvdWJsZVZhbHVlXCIgaW4gZSA/IHtcbiAgICAgICAgZG91YmxlVmFsdWU6IE5hTlxuICAgIH0gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gZSA/IHtcbiAgICAgICAgdGltZXN0YW1wVmFsdWU6IHtcbiAgICAgICAgICAgIHNlY29uZHM6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG4gICAgICAgIH1cbiAgICB9IDogXCJzdHJpbmdWYWx1ZVwiIGluIGUgPyB7XG4gICAgICAgIHN0cmluZ1ZhbHVlOiBcIlwiXG4gICAgfSA6IFwiYnl0ZXNWYWx1ZVwiIGluIGUgPyB7XG4gICAgICAgIGJ5dGVzVmFsdWU6IFwiXCJcbiAgICB9IDogXCJyZWZlcmVuY2VWYWx1ZVwiIGluIGUgPyBfX1BSSVZBVEVfcmVmVmFsdWUoRGF0YWJhc2VJZC5lbXB0eSgpLCBEb2N1bWVudEtleS5lbXB0eSgpKSA6IFwiZ2VvUG9pbnRWYWx1ZVwiIGluIGUgPyB7XG4gICAgICAgIGdlb1BvaW50VmFsdWU6IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiAtOTAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IC0xODBcbiAgICAgICAgfVxuICAgIH0gOiBcImFycmF5VmFsdWVcIiBpbiBlID8ge1xuICAgICAgICBhcnJheVZhbHVlOiB7fVxuICAgIH0gOiBcIm1hcFZhbHVlXCIgaW4gZSA/IHtcbiAgICAgICAgbWFwVmFsdWU6IHt9XG4gICAgfSA6IGZhaWwoKTtcbn1cblxuLyoqIFJldHVybnMgdGhlIGxhcmdlc3QgdmFsdWUgZm9yIHRoZSBnaXZlbiB2YWx1ZSB0eXBlIChleGNsdXNpdmUpLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfdmFsdWVzR2V0VXBwZXJCb3VuZChlKSB7XG4gICAgcmV0dXJuIFwibnVsbFZhbHVlXCIgaW4gZSA/IHtcbiAgICAgICAgYm9vbGVhblZhbHVlOiAhMVxuICAgIH0gOiBcImJvb2xlYW5WYWx1ZVwiIGluIGUgPyB7XG4gICAgICAgIGRvdWJsZVZhbHVlOiBOYU5cbiAgICB9IDogXCJpbnRlZ2VyVmFsdWVcIiBpbiBlIHx8IFwiZG91YmxlVmFsdWVcIiBpbiBlID8ge1xuICAgICAgICB0aW1lc3RhbXBWYWx1ZToge1xuICAgICAgICAgICAgc2Vjb25kczogTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbiAgICAgICAgfVxuICAgIH0gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gZSA/IHtcbiAgICAgICAgc3RyaW5nVmFsdWU6IFwiXCJcbiAgICB9IDogXCJzdHJpbmdWYWx1ZVwiIGluIGUgPyB7XG4gICAgICAgIGJ5dGVzVmFsdWU6IFwiXCJcbiAgICB9IDogXCJieXRlc1ZhbHVlXCIgaW4gZSA/IF9fUFJJVkFURV9yZWZWYWx1ZShEYXRhYmFzZUlkLmVtcHR5KCksIERvY3VtZW50S2V5LmVtcHR5KCkpIDogXCJyZWZlcmVuY2VWYWx1ZVwiIGluIGUgPyB7XG4gICAgICAgIGdlb1BvaW50VmFsdWU6IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiAtOTAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IC0xODBcbiAgICAgICAgfVxuICAgIH0gOiBcImdlb1BvaW50VmFsdWVcIiBpbiBlID8ge1xuICAgICAgICBhcnJheVZhbHVlOiB7fVxuICAgIH0gOiBcImFycmF5VmFsdWVcIiBpbiBlID8ge1xuICAgICAgICBtYXBWYWx1ZToge31cbiAgICB9IDogXCJtYXBWYWx1ZVwiIGluIGUgPyByZSA6IGZhaWwoKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2xvd2VyQm91bmRDb21wYXJlKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX3ZhbHVlQ29tcGFyZShlLnZhbHVlLCB0LnZhbHVlKTtcbiAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiBlLmluY2x1c2l2ZSAmJiAhdC5pbmNsdXNpdmUgPyAtMSA6ICFlLmluY2x1c2l2ZSAmJiB0LmluY2x1c2l2ZSA/IDEgOiAwO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfdXBwZXJCb3VuZENvbXBhcmUoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfdmFsdWVDb21wYXJlKGUudmFsdWUsIHQudmFsdWUpO1xuICAgIHJldHVybiAwICE9PSBuID8gbiA6IGUuaW5jbHVzaXZlICYmICF0LmluY2x1c2l2ZSA/IDEgOiAhZS5pbmNsdXNpdmUgJiYgdC5pbmNsdXNpdmUgPyAtMSA6IDA7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIE9iamVjdFZhbHVlIHJlcHJlc2VudHMgYSBNYXBWYWx1ZSBpbiB0aGUgRmlyZXN0b3JlIFByb3RvIGFuZCBvZmZlcnMgdGhlXG4gKiBhYmlsaXR5IHRvIGFkZCBhbmQgcmVtb3ZlIGZpZWxkcyAodmlhIHRoZSBPYmplY3RWYWx1ZUJ1aWxkZXIpLlxuICovIGNsYXNzIE9iamVjdFZhbHVlIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBlO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JqZWN0VmFsdWUoe1xuICAgICAgICAgICAgbWFwVmFsdWU6IHt9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gcGF0aCBvciBudWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSB0aGUgcGF0aCB0byBzZWFyY2hcbiAgICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgYXQgdGhlIHBhdGggb3IgbnVsbCBpZiB0aGUgcGF0aCBpcyBub3Qgc2V0LlxuICAgICAqLyAgICBmaWVsZChlKSB7XG4gICAgICAgIGlmIChlLmlzRW1wdHkoKSkgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCB0ID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgZS5sZW5ndGggLSAxOyArK24pIGlmICh0ID0gKHQubWFwVmFsdWUuZmllbGRzIHx8IHt9KVtlLmdldChuKV0sIFxuICAgICAgICAgICAgIV9fUFJJVkFURV9pc01hcFZhbHVlKHQpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0ID0gKHQubWFwVmFsdWUuZmllbGRzIHx8IHt9KVtlLmxhc3RTZWdtZW50KCldLCB0IHx8IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZmllbGQgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSBUaGUgZmllbGQgcGF0aCB0byBzZXQuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKi8gICAgc2V0KGUsIHQpIHtcbiAgICAgICAgdGhpcy5nZXRGaWVsZHNNYXAoZS5wb3BMYXN0KCkpW2UubGFzdFNlZ21lbnQoKV0gPSBfX1BSSVZBVEVfZGVlcENsb25lKHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwcm92aWRlZCBmaWVsZHMgdG8gdGhlIHByb3ZpZGVkIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIC0gQSBtYXAgb2YgZmllbGRzIHRvIHZhbHVlcyAob3IgbnVsbCBmb3IgZGVsZXRlcykuXG4gICAgICovICAgIHNldEFsbChlKSB7XG4gICAgICAgIGxldCB0ID0gRmllbGRQYXRoJDEuZW1wdHlQYXRoKCksIG4gPSB7fSwgciA9IFtdO1xuICAgICAgICBlLmZvckVhY2goKChlLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXQuaXNJbW1lZGlhdGVQYXJlbnRPZihpKSkge1xuICAgICAgICAgICAgICAgIC8vIEluc2VydCB0aGUgYWNjdW11bGF0ZWQgY2hhbmdlcyBhdCB0aGlzIHBhcmVudCBsb2NhdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmdldEZpZWxkc01hcCh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5Q2hhbmdlcyhlLCBuLCByKSwgbiA9IHt9LCByID0gW10sIHQgPSBpLnBvcExhc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUgPyBuW2kubGFzdFNlZ21lbnQoKV0gPSBfX1BSSVZBVEVfZGVlcENsb25lKGUpIDogci5wdXNoKGkubGFzdFNlZ21lbnQoKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgY29uc3QgaSA9IHRoaXMuZ2V0RmllbGRzTWFwKHQpO1xuICAgICAgICB0aGlzLmFwcGx5Q2hhbmdlcyhpLCBuLCByKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgZmllbGQgYXQgdGhlIHNwZWNpZmllZCBwYXRoLiBJZiB0aGVyZSBpcyBubyBmaWVsZCBhdCB0aGVcbiAgICAgKiBzcGVjaWZpZWQgcGF0aCwgbm90aGluZyBpcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSBUaGUgZmllbGQgcGF0aCB0byByZW1vdmUuXG4gICAgICovICAgIGRlbGV0ZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmZpZWxkKGUucG9wTGFzdCgpKTtcbiAgICAgICAgX19QUklWQVRFX2lzTWFwVmFsdWUodCkgJiYgdC5tYXBWYWx1ZS5maWVsZHMgJiYgZGVsZXRlIHQubWFwVmFsdWUuZmllbGRzW2UubGFzdFNlZ21lbnQoKV07XG4gICAgfVxuICAgIGlzRXF1YWwoZSkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3ZhbHVlRXF1YWxzKHRoaXMudmFsdWUsIGUudmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAgdGhhdCBjb250YWlucyB0aGUgbGVhZiBlbGVtZW50IG9mIGBwYXRoYC4gSWYgdGhlIHBhcmVudFxuICAgICAqIGVudHJ5IGRvZXMgbm90IHlldCBleGlzdCwgb3IgaWYgaXQgaXMgbm90IGEgbWFwLCBhIG5ldyBtYXAgd2lsbCBiZSBjcmVhdGVkLlxuICAgICAqLyAgICBnZXRGaWVsZHNNYXAoZSkge1xuICAgICAgICBsZXQgdCA9IHRoaXMudmFsdWU7XG4gICAgICAgIHQubWFwVmFsdWUuZmllbGRzIHx8ICh0Lm1hcFZhbHVlID0ge1xuICAgICAgICAgICAgZmllbGRzOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBlLmxlbmd0aDsgKytuKSB7XG4gICAgICAgICAgICBsZXQgciA9IHQubWFwVmFsdWUuZmllbGRzW2UuZ2V0KG4pXTtcbiAgICAgICAgICAgIF9fUFJJVkFURV9pc01hcFZhbHVlKHIpICYmIHIubWFwVmFsdWUuZmllbGRzIHx8IChyID0ge1xuICAgICAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkczoge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0Lm1hcFZhbHVlLmZpZWxkc1tlLmdldChuKV0gPSByKSwgdCA9IHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQubWFwVmFsdWUuZmllbGRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBgZmllbGRzTWFwYCBieSBhZGRpbmcsIHJlcGxhY2luZyBvciBkZWxldGluZyB0aGUgc3BlY2lmaWVkXG4gICAgICogZW50cmllcy5cbiAgICAgKi8gICAgYXBwbHlDaGFuZ2VzKGUsIHQsIG4pIHtcbiAgICAgICAgZm9yRWFjaCh0LCAoKHQsIG4pID0+IGVbdF0gPSBuKSk7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBuKSBkZWxldGUgZVt0XTtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JqZWN0VmFsdWUoX19QUklWQVRFX2RlZXBDbG9uZSh0aGlzLnZhbHVlKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBGaWVsZE1hc2sgYnVpbHQgZnJvbSBhbGwgZmllbGRzIGluIGEgTWFwVmFsdWUuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2V4dHJhY3RGaWVsZE1hc2soZSkge1xuICAgIGNvbnN0IHQgPSBbXTtcbiAgICByZXR1cm4gZm9yRWFjaChlLmZpZWxkcywgKChlLCBuKSA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSBuZXcgRmllbGRQYXRoJDEoWyBlIF0pO1xuICAgICAgICBpZiAoX19QUklWQVRFX2lzTWFwVmFsdWUobikpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBfX1BSSVZBVEVfZXh0cmFjdEZpZWxkTWFzayhuLm1hcFZhbHVlKS5maWVsZHM7XG4gICAgICAgICAgICBpZiAoMCA9PT0gZS5sZW5ndGgpIFxuICAgICAgICAgICAgLy8gUHJlc2VydmUgdGhlIGVtcHR5IG1hcCBieSBhZGRpbmcgaXQgdG8gdGhlIEZpZWxkTWFzay5cbiAgICAgICAgICAgIHQucHVzaChyKTsgZWxzZSBcbiAgICAgICAgICAgIC8vIEZvciBuZXN0ZWQgYW5kIG5vbi1lbXB0eSBPYmplY3RWYWx1ZXMsIGFkZCB0aGUgRmllbGRQYXRoIG9mIHRoZVxuICAgICAgICAgICAgLy8gbGVhZiBub2Rlcy5cbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBlKSB0LnB1c2goci5jaGlsZChuKSk7XG4gICAgICAgIH0gZWxzZSBcbiAgICAgICAgLy8gRm9yIG5lc3RlZCBhbmQgbm9uLWVtcHR5IE9iamVjdFZhbHVlcywgYWRkIHRoZSBGaWVsZFBhdGggb2YgdGhlIGxlYWZcbiAgICAgICAgLy8gbm9kZXMuXG4gICAgICAgIHQucHVzaChyKTtcbiAgICB9KSksIG5ldyBGaWVsZE1hc2sodCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYSBkb2N1bWVudCBpbiBGaXJlc3RvcmUgd2l0aCBhIGtleSwgdmVyc2lvbiwgZGF0YSBhbmQgd2hldGhlciBpdFxuICogaGFzIGxvY2FsIG11dGF0aW9ucyBhcHBsaWVkIHRvIGl0LlxuICpcbiAqIERvY3VtZW50cyBjYW4gdHJhbnNpdGlvbiBiZXR3ZWVuIHN0YXRlcyB2aWEgYGNvbnZlcnRUb0ZvdW5kRG9jdW1lbnQoKWAsXG4gKiBgY29udmVydFRvTm9Eb2N1bWVudCgpYCBhbmQgYGNvbnZlcnRUb1Vua25vd25Eb2N1bWVudCgpYC4gSWYgYSBkb2N1bWVudCBkb2VzXG4gKiBub3QgdHJhbnNpdGlvbiB0byBvbmUgb2YgdGhlc2Ugc3RhdGVzIGV2ZW4gYWZ0ZXIgYWxsIG11dGF0aW9ucyBoYXZlIGJlZW5cbiAqIGFwcGxpZWQsIGBpc1ZhbGlkRG9jdW1lbnQoKWAgcmV0dXJucyBmYWxzZSBhbmQgdGhlIGRvY3VtZW50IHNob3VsZCBiZSByZW1vdmVkXG4gKiBmcm9tIGFsbCB2aWV3cy5cbiAqLyBjbGFzcyBNdXRhYmxlRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIsIGksIHMsIG8pIHtcbiAgICAgICAgdGhpcy5rZXkgPSBlLCB0aGlzLmRvY3VtZW50VHlwZSA9IHQsIHRoaXMudmVyc2lvbiA9IG4sIHRoaXMucmVhZFRpbWUgPSByLCB0aGlzLmNyZWF0ZVRpbWUgPSBpLCBcbiAgICAgICAgdGhpcy5kYXRhID0gcywgdGhpcy5kb2N1bWVudFN0YXRlID0gbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRvY3VtZW50IHdpdGggbm8ga25vd24gdmVyc2lvbiBvciBkYXRhLCBidXQgd2hpY2ggY2FuIHNlcnZlIGFzXG4gICAgICogYmFzZSBkb2N1bWVudCBmb3IgbXV0YXRpb25zLlxuICAgICAqLyAgICBzdGF0aWMgbmV3SW52YWxpZERvY3VtZW50KGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNdXRhYmxlRG9jdW1lbnQoZSwgMCAvKiBEb2N1bWVudFR5cGUuSU5WQUxJRCAqLyAsIFxuICAgICAgICAvKiB2ZXJzaW9uICovIFNuYXBzaG90VmVyc2lvbi5taW4oKSwgXG4gICAgICAgIC8qIHJlYWRUaW1lICovIFNuYXBzaG90VmVyc2lvbi5taW4oKSwgXG4gICAgICAgIC8qIGNyZWF0ZVRpbWUgKi8gU25hcHNob3RWZXJzaW9uLm1pbigpLCBPYmplY3RWYWx1ZS5lbXB0eSgpLCAwIC8qIERvY3VtZW50U3RhdGUuU1lOQ0VEICovKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBkb2N1bWVudCB0aGF0IGlzIGtub3duIHRvIGV4aXN0IHdpdGggdGhlIGdpdmVuIGRhdGEgYXQgdGhlXG4gICAgICogZ2l2ZW4gdmVyc2lvbi5cbiAgICAgKi8gICAgc3RhdGljIG5ld0ZvdW5kRG9jdW1lbnQoZSwgdCwgbiwgcikge1xuICAgICAgICByZXR1cm4gbmV3IE11dGFibGVEb2N1bWVudChlLCAxIC8qIERvY3VtZW50VHlwZS5GT1VORF9ET0NVTUVOVCAqLyAsIFxuICAgICAgICAvKiB2ZXJzaW9uICovIHQsIFxuICAgICAgICAvKiByZWFkVGltZSAqLyBTbmFwc2hvdFZlcnNpb24ubWluKCksIFxuICAgICAgICAvKiBjcmVhdGVUaW1lICovIG4sIHIsIDAgLyogRG9jdW1lbnRTdGF0ZS5TWU5DRUQgKi8pO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBkb2N1bWVudCB0aGF0IGlzIGtub3duIHRvIG5vdCBleGlzdCBhdCB0aGUgZ2l2ZW4gdmVyc2lvbi4gKi8gICAgc3RhdGljIG5ld05vRG9jdW1lbnQoZSwgdCkge1xuICAgICAgICByZXR1cm4gbmV3IE11dGFibGVEb2N1bWVudChlLCAyIC8qIERvY3VtZW50VHlwZS5OT19ET0NVTUVOVCAqLyAsIFxuICAgICAgICAvKiB2ZXJzaW9uICovIHQsIFxuICAgICAgICAvKiByZWFkVGltZSAqLyBTbmFwc2hvdFZlcnNpb24ubWluKCksIFxuICAgICAgICAvKiBjcmVhdGVUaW1lICovIFNuYXBzaG90VmVyc2lvbi5taW4oKSwgT2JqZWN0VmFsdWUuZW1wdHkoKSwgMCAvKiBEb2N1bWVudFN0YXRlLlNZTkNFRCAqLyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZG9jdW1lbnQgdGhhdCBpcyBrbm93biB0byBleGlzdCBhdCB0aGUgZ2l2ZW4gdmVyc2lvbiBidXRcbiAgICAgKiB3aG9zZSBkYXRhIGlzIG5vdCBrbm93biAoZS5nLiBhIGRvY3VtZW50IHRoYXQgd2FzIHVwZGF0ZWQgd2l0aG91dCBhIGtub3duXG4gICAgICogYmFzZSBkb2N1bWVudCkuXG4gICAgICovICAgIHN0YXRpYyBuZXdVbmtub3duRG9jdW1lbnQoZSwgdCkge1xuICAgICAgICByZXR1cm4gbmV3IE11dGFibGVEb2N1bWVudChlLCAzIC8qIERvY3VtZW50VHlwZS5VTktOT1dOX0RPQ1VNRU5UICovICwgXG4gICAgICAgIC8qIHZlcnNpb24gKi8gdCwgXG4gICAgICAgIC8qIHJlYWRUaW1lICovIFNuYXBzaG90VmVyc2lvbi5taW4oKSwgXG4gICAgICAgIC8qIGNyZWF0ZVRpbWUgKi8gU25hcHNob3RWZXJzaW9uLm1pbigpLCBPYmplY3RWYWx1ZS5lbXB0eSgpLCAyIC8qIERvY3VtZW50U3RhdGUuSEFTX0NPTU1JVFRFRF9NVVRBVElPTlMgKi8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBkb2N1bWVudCB0eXBlIHRvIGluZGljYXRlIHRoYXQgaXQgZXhpc3RzIGFuZCB0aGF0IGl0cyB2ZXJzaW9uXG4gICAgICogYW5kIGRhdGEgYXJlIGtub3duLlxuICAgICAqLyAgICBjb252ZXJ0VG9Gb3VuZERvY3VtZW50KGUsIHQpIHtcbiAgICAgICAgLy8gSWYgYSBkb2N1bWVudCBpcyBzd2l0Y2hpbmcgc3RhdGUgZnJvbSBiZWluZyBhbiBpbnZhbGlkIG9yIGRlbGV0ZWRcbiAgICAgICAgLy8gZG9jdW1lbnQgdG8gYSB2YWxpZCAoRk9VTkRfRE9DVU1FTlQpIGRvY3VtZW50LCBlaXRoZXIgZHVlIHRvIHJlY2VpdmluZyBhblxuICAgICAgICAvLyB1cGRhdGUgZnJvbSBXYXRjaCBvciBkdWUgdG8gYXBwbHlpbmcgYSBsb2NhbCBzZXQgbXV0YXRpb24gb24gdG9wXG4gICAgICAgIC8vIG9mIGEgZGVsZXRlZCBkb2N1bWVudCwgb3VyIGJlc3QgZ3Vlc3MgYWJvdXQgaXRzIGNyZWF0ZVRpbWUgd291bGQgYmUgdGhlXG4gICAgICAgIC8vIHZlcnNpb24gYXQgd2hpY2ggdGhlIGRvY3VtZW50IHRyYW5zaXRpb25lZCB0byBhIEZPVU5EX0RPQ1VNRU5ULlxuICAgICAgICByZXR1cm4gIXRoaXMuY3JlYXRlVGltZS5pc0VxdWFsKFNuYXBzaG90VmVyc2lvbi5taW4oKSkgfHwgMiAvKiBEb2N1bWVudFR5cGUuTk9fRE9DVU1FTlQgKi8gIT09IHRoaXMuZG9jdW1lbnRUeXBlICYmIDAgLyogRG9jdW1lbnRUeXBlLklOVkFMSUQgKi8gIT09IHRoaXMuZG9jdW1lbnRUeXBlIHx8ICh0aGlzLmNyZWF0ZVRpbWUgPSBlKSwgXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IGUsIHRoaXMuZG9jdW1lbnRUeXBlID0gMSAvKiBEb2N1bWVudFR5cGUuRk9VTkRfRE9DVU1FTlQgKi8gLCB0aGlzLmRhdGEgPSB0LCBcbiAgICAgICAgdGhpcy5kb2N1bWVudFN0YXRlID0gMCAvKiBEb2N1bWVudFN0YXRlLlNZTkNFRCAqLyAsIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIGRvY3VtZW50IHR5cGUgdG8gaW5kaWNhdGUgdGhhdCBpdCBkb2Vzbid0IGV4aXN0IGF0IHRoZSBnaXZlblxuICAgICAqIHZlcnNpb24uXG4gICAgICovICAgIGNvbnZlcnRUb05vRG9jdW1lbnQoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJzaW9uID0gZSwgdGhpcy5kb2N1bWVudFR5cGUgPSAyIC8qIERvY3VtZW50VHlwZS5OT19ET0NVTUVOVCAqLyAsIFxuICAgICAgICB0aGlzLmRhdGEgPSBPYmplY3RWYWx1ZS5lbXB0eSgpLCB0aGlzLmRvY3VtZW50U3RhdGUgPSAwIC8qIERvY3VtZW50U3RhdGUuU1lOQ0VEICovICwgXG4gICAgICAgIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIGRvY3VtZW50IHR5cGUgdG8gaW5kaWNhdGUgdGhhdCBpdCBleGlzdHMgYXQgYSBnaXZlbiB2ZXJzaW9uIGJ1dFxuICAgICAqIHRoYXQgaXRzIGRhdGEgaXMgbm90IGtub3duIChlLmcuIGEgZG9jdW1lbnQgdGhhdCB3YXMgdXBkYXRlZCB3aXRob3V0IGEga25vd25cbiAgICAgKiBiYXNlIGRvY3VtZW50KS5cbiAgICAgKi8gICAgY29udmVydFRvVW5rbm93bkRvY3VtZW50KGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVyc2lvbiA9IGUsIHRoaXMuZG9jdW1lbnRUeXBlID0gMyAvKiBEb2N1bWVudFR5cGUuVU5LTk9XTl9ET0NVTUVOVCAqLyAsIFxuICAgICAgICB0aGlzLmRhdGEgPSBPYmplY3RWYWx1ZS5lbXB0eSgpLCB0aGlzLmRvY3VtZW50U3RhdGUgPSAyIC8qIERvY3VtZW50U3RhdGUuSEFTX0NPTU1JVFRFRF9NVVRBVElPTlMgKi8gLCBcbiAgICAgICAgdGhpcztcbiAgICB9XG4gICAgc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudFN0YXRlID0gMiAvKiBEb2N1bWVudFN0YXRlLkhBU19DT01NSVRURURfTVVUQVRJT05TICovICwgdGhpcztcbiAgICB9XG4gICAgc2V0SGFzTG9jYWxNdXRhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50U3RhdGUgPSAxIC8qIERvY3VtZW50U3RhdGUuSEFTX0xPQ0FMX01VVEFUSU9OUyAqLyAsIHRoaXMudmVyc2lvbiA9IFNuYXBzaG90VmVyc2lvbi5taW4oKSwgXG4gICAgICAgIHRoaXM7XG4gICAgfVxuICAgIHNldFJlYWRUaW1lKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFRpbWUgPSBlLCB0aGlzO1xuICAgIH1cbiAgICBnZXQgaGFzTG9jYWxNdXRhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiAxIC8qIERvY3VtZW50U3RhdGUuSEFTX0xPQ0FMX01VVEFUSU9OUyAqLyA9PT0gdGhpcy5kb2N1bWVudFN0YXRlO1xuICAgIH1cbiAgICBnZXQgaGFzQ29tbWl0dGVkTXV0YXRpb25zKCkge1xuICAgICAgICByZXR1cm4gMiAvKiBEb2N1bWVudFN0YXRlLkhBU19DT01NSVRURURfTVVUQVRJT05TICovID09PSB0aGlzLmRvY3VtZW50U3RhdGU7XG4gICAgfVxuICAgIGdldCBoYXNQZW5kaW5nV3JpdGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNMb2NhbE11dGF0aW9ucyB8fCB0aGlzLmhhc0NvbW1pdHRlZE11dGF0aW9ucztcbiAgICB9XG4gICAgaXNWYWxpZERvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gMCAvKiBEb2N1bWVudFR5cGUuSU5WQUxJRCAqLyAhPT0gdGhpcy5kb2N1bWVudFR5cGU7XG4gICAgfVxuICAgIGlzRm91bmREb2N1bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIDEgLyogRG9jdW1lbnRUeXBlLkZPVU5EX0RPQ1VNRU5UICovID09PSB0aGlzLmRvY3VtZW50VHlwZTtcbiAgICB9XG4gICAgaXNOb0RvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gMiAvKiBEb2N1bWVudFR5cGUuTk9fRE9DVU1FTlQgKi8gPT09IHRoaXMuZG9jdW1lbnRUeXBlO1xuICAgIH1cbiAgICBpc1Vua25vd25Eb2N1bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIDMgLyogRG9jdW1lbnRUeXBlLlVOS05PV05fRE9DVU1FTlQgKi8gPT09IHRoaXMuZG9jdW1lbnRUeXBlO1xuICAgIH1cbiAgICBpc0VxdWFsKGUpIHtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBNdXRhYmxlRG9jdW1lbnQgJiYgdGhpcy5rZXkuaXNFcXVhbChlLmtleSkgJiYgdGhpcy52ZXJzaW9uLmlzRXF1YWwoZS52ZXJzaW9uKSAmJiB0aGlzLmRvY3VtZW50VHlwZSA9PT0gZS5kb2N1bWVudFR5cGUgJiYgdGhpcy5kb2N1bWVudFN0YXRlID09PSBlLmRvY3VtZW50U3RhdGUgJiYgdGhpcy5kYXRhLmlzRXF1YWwoZS5kYXRhKTtcbiAgICB9XG4gICAgbXV0YWJsZUNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTXV0YWJsZURvY3VtZW50KHRoaXMua2V5LCB0aGlzLmRvY3VtZW50VHlwZSwgdGhpcy52ZXJzaW9uLCB0aGlzLnJlYWRUaW1lLCB0aGlzLmNyZWF0ZVRpbWUsIHRoaXMuZGF0YS5jbG9uZSgpLCB0aGlzLmRvY3VtZW50U3RhdGUpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBEb2N1bWVudCgke3RoaXMua2V5fSwgJHt0aGlzLnZlcnNpb259LCAke0pTT04uc3RyaW5naWZ5KHRoaXMuZGF0YS52YWx1ZSl9LCB7Y3JlYXRlVGltZTogJHt0aGlzLmNyZWF0ZVRpbWV9fSksIHtkb2N1bWVudFR5cGU6ICR7dGhpcy5kb2N1bWVudFR5cGV9fSksIHtkb2N1bWVudFN0YXRlOiAke3RoaXMuZG9jdW1lbnRTdGF0ZX19KWA7XG4gICAgfVxufVxuXG4vKipcbiAqIENvbXBhcmVzIHRoZSB2YWx1ZSBmb3IgZmllbGQgYGZpZWxkYCBpbiB0aGUgcHJvdmlkZWQgZG9jdW1lbnRzLiBUaHJvd3MgaWZcbiAqIHRoZSBmaWVsZCBkb2VzIG5vdCBleGlzdCBpbiBib3RoIGRvY3VtZW50cy5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIGJvdW5kIG9mIGEgcXVlcnkuXG4gKlxuICogVGhlIGJvdW5kIGlzIHNwZWNpZmllZCB3aXRoIHRoZSBnaXZlbiBjb21wb25lbnRzIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIGFuZFxuICogd2hldGhlciBpdCdzIGp1c3QgYmVmb3JlIG9yIGp1c3QgYWZ0ZXIgdGhlIHBvc2l0aW9uIChyZWxhdGl2ZSB0byB3aGF0ZXZlciB0aGVcbiAqIHF1ZXJ5IG9yZGVyIGlzKS5cbiAqXG4gKiBUaGUgcG9zaXRpb24gcmVwcmVzZW50cyBhIGxvZ2ljYWwgaW5kZXggcG9zaXRpb24gZm9yIGEgcXVlcnkuIEl0J3MgYSBwcmVmaXhcbiAqIG9mIHZhbHVlcyBmb3IgdGhlIChwb3RlbnRpYWxseSBpbXBsaWNpdCkgb3JkZXIgYnkgY2xhdXNlcyBvZiBhIHF1ZXJ5LlxuICpcbiAqIEJvdW5kIHByb3ZpZGVzIGEgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkb2N1bWVudCBjb21lcyBiZWZvcmUgb3JcbiAqIGFmdGVyIGEgYm91bmQuIFRoaXMgaXMgaW5mbHVlbmNlZCBieSB3aGV0aGVyIHRoZSBwb3NpdGlvbiBpcyBqdXN0IGJlZm9yZSBvclxuICoganVzdCBhZnRlciB0aGUgcHJvdmlkZWQgdmFsdWVzLlxuICovXG5jbGFzcyBCb3VuZCB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gZSwgdGhpcy5pbmNsdXNpdmUgPSB0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2JvdW5kQ29tcGFyZVRvRG9jdW1lbnQoZSwgdCwgbikge1xuICAgIGxldCByID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUucG9zaXRpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcyA9IHRbaV0sIG8gPSBlLnBvc2l0aW9uW2ldO1xuICAgICAgICBpZiAocy5maWVsZC5pc0tleUZpZWxkKCkpIHIgPSBEb2N1bWVudEtleS5jb21wYXJhdG9yKERvY3VtZW50S2V5LmZyb21OYW1lKG8ucmVmZXJlbmNlVmFsdWUpLCBuLmtleSk7IGVsc2Uge1xuICAgICAgICAgICAgciA9IF9fUFJJVkFURV92YWx1ZUNvbXBhcmUobywgbi5kYXRhLmZpZWxkKHMuZmllbGQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJkZXNjXCIgLyogRGlyZWN0aW9uLkRFU0NFTkRJTkcgKi8gPT09IHMuZGlyICYmIChyICo9IC0xKSwgMCAhPT0gcikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGRvY3VtZW50IHNvcnRzIGFmdGVyIGEgYm91bmQgdXNpbmcgdGhlIHByb3ZpZGVkIHNvcnRcbiAqIG9yZGVyLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9ib3VuZEVxdWFscyhlLCB0KSB7XG4gICAgaWYgKG51bGwgPT09IGUpIHJldHVybiBudWxsID09PSB0O1xuICAgIGlmIChudWxsID09PSB0KSByZXR1cm4gITE7XG4gICAgaWYgKGUuaW5jbHVzaXZlICE9PSB0LmluY2x1c2l2ZSB8fCBlLnBvc2l0aW9uLmxlbmd0aCAhPT0gdC5wb3NpdGlvbi5sZW5ndGgpIHJldHVybiAhMTtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGUucG9zaXRpb24ubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgaWYgKCFfX1BSSVZBVEVfdmFsdWVFcXVhbHMoZS5wb3NpdGlvbltuXSwgdC5wb3NpdGlvbltuXSkpIHJldHVybiAhMTtcbiAgICB9XG4gICAgcmV0dXJuICEwO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBvcmRlcmluZyBvbiBhIGZpZWxkLCBpbiBzb21lIERpcmVjdGlvbi4gRGlyZWN0aW9uIGRlZmF1bHRzIHRvIEFTQ0VORElORy5cbiAqLyBjbGFzcyBPcmRlckJ5IHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0ID0gXCJhc2NcIiAvKiBEaXJlY3Rpb24uQVNDRU5ESU5HICovKSB7XG4gICAgICAgIHRoaXMuZmllbGQgPSBlLCB0aGlzLmRpciA9IHQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfb3JkZXJCeUVxdWFscyhlLCB0KSB7XG4gICAgcmV0dXJuIGUuZGlyID09PSB0LmRpciAmJiBlLmZpZWxkLmlzRXF1YWwodC5maWVsZCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIEZpbHRlciB7fVxuXG5jbGFzcyBGaWVsZEZpbHRlciBleHRlbmRzIEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmZpZWxkID0gZSwgdGhpcy5vcCA9IHQsIHRoaXMudmFsdWUgPSBuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmlsdGVyIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICovICAgIHN0YXRpYyBjcmVhdGUoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gZS5pc0tleUZpZWxkKCkgPyBcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gPT09IHQgfHwgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gPT09IHQgPyB0aGlzLmNyZWF0ZUtleUZpZWxkSW5GaWx0ZXIoZSwgdCwgbikgOiBuZXcgX19QUklWQVRFX0tleUZpZWxkRmlsdGVyKGUsIHQsIG4pIDogXCJhcnJheS1jb250YWluc1wiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TICovID09PSB0ID8gbmV3IF9fUFJJVkFURV9BcnJheUNvbnRhaW5zRmlsdGVyKGUsIG4pIDogXCJpblwiIC8qIE9wZXJhdG9yLklOICovID09PSB0ID8gbmV3IF9fUFJJVkFURV9JbkZpbHRlcihlLCBuKSA6IFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovID09PSB0ID8gbmV3IF9fUFJJVkFURV9Ob3RJbkZpbHRlcihlLCBuKSA6IFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovID09PSB0ID8gbmV3IF9fUFJJVkFURV9BcnJheUNvbnRhaW5zQW55RmlsdGVyKGUsIG4pIDogbmV3IEZpZWxkRmlsdGVyKGUsIHQsIG4pO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlS2V5RmllbGRJbkZpbHRlcihlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiBcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gPT09IHQgPyBuZXcgX19QUklWQVRFX0tleUZpZWxkSW5GaWx0ZXIoZSwgbikgOiBuZXcgX19QUklWQVRFX0tleUZpZWxkTm90SW5GaWx0ZXIoZSwgbik7XG4gICAgfVxuICAgIG1hdGNoZXMoZSkge1xuICAgICAgICBjb25zdCB0ID0gZS5kYXRhLmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICAvLyBUeXBlcyBkbyBub3QgaGF2ZSB0byBtYXRjaCBpbiBOT1RfRVFVQUwgZmlsdGVycy5cbiAgICAgICAgICAgICAgICByZXR1cm4gXCIhPVwiIC8qIE9wZXJhdG9yLk5PVF9FUVVBTCAqLyA9PT0gdGhpcy5vcCA/IG51bGwgIT09IHQgJiYgdGhpcy5tYXRjaGVzQ29tcGFyaXNvbihfX1BSSVZBVEVfdmFsdWVDb21wYXJlKHQsIHRoaXMudmFsdWUpKSA6IG51bGwgIT09IHQgJiYgX19QUklWQVRFX3R5cGVPcmRlcih0aGlzLnZhbHVlKSA9PT0gX19QUklWQVRFX3R5cGVPcmRlcih0KSAmJiB0aGlzLm1hdGNoZXNDb21wYXJpc29uKF9fUFJJVkFURV92YWx1ZUNvbXBhcmUodCwgdGhpcy52YWx1ZSkpO1xuICAgICAgICAvLyBPbmx5IGNvbXBhcmUgdHlwZXMgd2l0aCBtYXRjaGluZyBiYWNrZW5kIG9yZGVyIChzdWNoIGFzIGRvdWJsZSBhbmQgaW50KS5cbiAgICAgICAgfVxuICAgIG1hdGNoZXNDb21wYXJpc29uKGUpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLm9wKSB7XG4gICAgICAgICAgY2FzZSBcIjxcIiAvKiBPcGVyYXRvci5MRVNTX1RIQU4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIGUgPCAwO1xuXG4gICAgICAgICAgY2FzZSBcIjw9XCIgLyogT3BlcmF0b3IuTEVTU19USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiBlIDw9IDA7XG5cbiAgICAgICAgICBjYXNlIFwiPT1cIiAvKiBPcGVyYXRvci5FUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gMCA9PT0gZTtcblxuICAgICAgICAgIGNhc2UgXCIhPVwiIC8qIE9wZXJhdG9yLk5PVF9FUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gMCAhPT0gZTtcblxuICAgICAgICAgIGNhc2UgXCI+XCIgLyogT3BlcmF0b3IuR1JFQVRFUl9USEFOICovIDpcbiAgICAgICAgICAgIHJldHVybiBlID4gMDtcblxuICAgICAgICAgIGNhc2UgXCI+PVwiIC8qIE9wZXJhdG9yLkdSRUFURVJfVEhBTl9PUl9FUVVBTCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gZSA+PSAwO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWlsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNJbmVxdWFsaXR5KCkge1xuICAgICAgICByZXR1cm4gWyBcIjxcIiAvKiBPcGVyYXRvci5MRVNTX1RIQU4gKi8gLCBcIjw9XCIgLyogT3BlcmF0b3IuTEVTU19USEFOX09SX0VRVUFMICovICwgXCI+XCIgLyogT3BlcmF0b3IuR1JFQVRFUl9USEFOICovICwgXCI+PVwiIC8qIE9wZXJhdG9yLkdSRUFURVJfVEhBTl9PUl9FUVVBTCAqLyAsIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi8gLCBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyBdLmluZGV4T2YodGhpcy5vcCkgPj0gMDtcbiAgICB9XG4gICAgZ2V0RmxhdHRlbmVkRmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIFsgdGhpcyBdO1xuICAgIH1cbiAgICBnZXRGaWx0ZXJzKCkge1xuICAgICAgICByZXR1cm4gWyB0aGlzIF07XG4gICAgfVxufVxuXG5jbGFzcyBDb21wb3NpdGVGaWx0ZXIgZXh0ZW5kcyBGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5maWx0ZXJzID0gZSwgdGhpcy5vcCA9IHQsIHRoaXMuYWUgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmlsdGVyIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICovICAgIHN0YXRpYyBjcmVhdGUoZSwgdCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBvc2l0ZUZpbHRlcihlLCB0KTtcbiAgICB9XG4gICAgbWF0Y2hlcyhlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNDb25qdW5jdGlvbih0aGlzKSA/IHZvaWQgMCA9PT0gdGhpcy5maWx0ZXJzLmZpbmQoKHQgPT4gIXQubWF0Y2hlcyhlKSkpIDogdm9pZCAwICE9PSB0aGlzLmZpbHRlcnMuZmluZCgodCA9PiB0Lm1hdGNoZXMoZSkpKTtcbiAgICB9XG4gICAgZ2V0RmxhdHRlbmVkRmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuYWUgfHwgKHRoaXMuYWUgPSB0aGlzLmZpbHRlcnMucmVkdWNlKCgoZSwgdCkgPT4gZS5jb25jYXQodC5nZXRGbGF0dGVuZWRGaWx0ZXJzKCkpKSwgW10pKSwgXG4gICAgICAgIHRoaXMuYWU7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBtdXRhYmxlIGNvcHkgb2YgYHRoaXMuZmlsdGVyc2BcbiAgICBnZXRGaWx0ZXJzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihbXSwgdGhpcy5maWx0ZXJzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJJc0Nvbmp1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4gXCJhbmRcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5BTkQgKi8gPT09IGUub3A7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJJc0Rpc2p1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4gXCJvclwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLk9SICovID09PSBlLm9wO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGZpbHRlciBpcyBhIGNvbmp1bmN0aW9uIG9mIGZpZWxkIGZpbHRlcnMgb25seS4gUmV0dXJucyBmYWxzZSBvdGhlcndpc2UuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2NvbXBvc2l0ZUZpbHRlcklzRmxhdENvbmp1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2NvbXBvc2l0ZUZpbHRlcklzRmxhdChlKSAmJiBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNDb25qdW5jdGlvbihlKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBmaWx0ZXIgZG9lcyBub3QgY29udGFpbiBhbnkgY29tcG9zaXRlIGZpbHRlcnMuIFJldHVybnMgZmFsc2Ugb3RoZXJ3aXNlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJJc0ZsYXQoZSkge1xuICAgIGZvciAoY29uc3QgdCBvZiBlLmZpbHRlcnMpIGlmICh0IGluc3RhbmNlb2YgQ29tcG9zaXRlRmlsdGVyKSByZXR1cm4gITE7XG4gICAgcmV0dXJuICEwO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY2Fub25pZnlGaWx0ZXIoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgRmllbGRGaWx0ZXIpIFxuICAgIC8vIFRPRE8oYi8yOTE4MzE2NSk6IFRlY2huaWNhbGx5LCB0aGlzIHdvbid0IGJlIHVuaXF1ZSBpZiB0d28gdmFsdWVzIGhhdmVcbiAgICAvLyB0aGUgc2FtZSBkZXNjcmlwdGlvbiwgc3VjaCBhcyB0aGUgaW50IDMgYW5kIHRoZSBzdHJpbmcgXCIzXCIuIFNvIHdlIHNob3VsZFxuICAgIC8vIGFkZCB0aGUgdHlwZXMgaW4gaGVyZSBzb21laG93LCB0b28uXG4gICAgcmV0dXJuIGUuZmllbGQuY2Fub25pY2FsU3RyaW5nKCkgKyBlLm9wLnRvU3RyaW5nKCkgKyBjYW5vbmljYWxJZChlLnZhbHVlKTtcbiAgICBpZiAoX19QUklWQVRFX2NvbXBvc2l0ZUZpbHRlcklzRmxhdENvbmp1bmN0aW9uKGUpKSBcbiAgICAvLyBPbGRlciBTREsgdmVyc2lvbnMgdXNlIGFuIGltcGxpY2l0IEFORCBvcGVyYXRpb24gYmV0d2VlbiB0aGVpciBmaWx0ZXJzLlxuICAgIC8vIEluIHRoZSBuZXcgU0RLIHZlcnNpb25zLCB0aGUgZGV2ZWxvcGVyIG1heSB1c2UgYW4gZXhwbGljaXQgQU5EIGZpbHRlci5cbiAgICAvLyBUbyBzdGF5IGNvbnNpc3RlbnQgd2l0aCB0aGUgb2xkIHVzYWdlcywgd2UgYWRkIGEgc3BlY2lhbCBjYXNlIHRvIGVuc3VyZVxuICAgIC8vIHRoZSBjYW5vbmljYWwgSUQgZm9yIHRoZXNlIHR3byBhcmUgdGhlIHNhbWUuIEZvciBleGFtcGxlOlxuICAgIC8vIGBjb2wud2hlcmVFcXVhbHMoXCJhXCIsIDEpLndoZXJlRXF1YWxzKFwiYlwiLCAyKWAgc2hvdWxkIGhhdmUgdGhlIHNhbWVcbiAgICAvLyBjYW5vbmljYWwgSUQgYXMgYGNvbC53aGVyZShhbmQoZXF1YWxzKFwiYVwiLDEpLCBlcXVhbHMoXCJiXCIsMikpKWAuXG4gICAgcmV0dXJuIGUuZmlsdGVycy5tYXAoKGUgPT4gX19QUklWQVRFX2Nhbm9uaWZ5RmlsdGVyKGUpKSkuam9pbihcIixcIik7XG4gICAge1xuICAgICAgICAvLyBmaWx0ZXIgaW5zdGFuY2VvZiBDb21wb3NpdGVGaWx0ZXJcbiAgICAgICAgY29uc3QgdCA9IGUuZmlsdGVycy5tYXAoKGUgPT4gX19QUklWQVRFX2Nhbm9uaWZ5RmlsdGVyKGUpKSkuam9pbihcIixcIik7XG4gICAgICAgIHJldHVybiBgJHtlLm9wfSgke3R9KWA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZmlsdGVyRXF1YWxzKGUsIHQpIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyID8gZnVuY3Rpb24gX19QUklWQVRFX2ZpZWxkRmlsdGVyRXF1YWxzKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBGaWVsZEZpbHRlciAmJiBlLm9wID09PSB0Lm9wICYmIGUuZmllbGQuaXNFcXVhbCh0LmZpZWxkKSAmJiBfX1BSSVZBVEVfdmFsdWVFcXVhbHMoZS52YWx1ZSwgdC52YWx1ZSk7XG4gICAgfShlLCB0KSA6IGUgaW5zdGFuY2VvZiBDb21wb3NpdGVGaWx0ZXIgPyBmdW5jdGlvbiBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVyRXF1YWxzKGUsIHQpIHtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBDb21wb3NpdGVGaWx0ZXIgJiYgZS5vcCA9PT0gdC5vcCAmJiBlLmZpbHRlcnMubGVuZ3RoID09PSB0LmZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5maWx0ZXJzLnJlZHVjZSgoKGUsIG4sIHIpID0+IGUgJiYgX19QUklWQVRFX2ZpbHRlckVxdWFscyhuLCB0LmZpbHRlcnNbcl0pKSwgITApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGNvbXBvc2l0ZSBmaWx0ZXIgdGhhdCBjb250YWlucyBhbGwgZmlsdGVyIGZyb21cbiAqIGBjb21wb3NpdGVGaWx0ZXJgIHBsdXMgYWxsIHRoZSBnaXZlbiBmaWx0ZXJzIGluIGBvdGhlckZpbHRlcnNgLlxuICovIChlLCB0KSA6IHZvaWQgZmFpbCgpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVyV2l0aEFkZGVkRmlsdGVycyhlLCB0KSB7XG4gICAgY29uc3QgbiA9IGUuZmlsdGVycy5jb25jYXQodCk7XG4gICAgcmV0dXJuIENvbXBvc2l0ZUZpbHRlci5jcmVhdGUobiwgZS5vcCk7XG59XG5cbi8qKiBSZXR1cm5zIGEgZGVidWcgZGVzY3JpcHRpb24gZm9yIGBmaWx0ZXJgLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfc3RyaW5naWZ5RmlsdGVyKGUpIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyID8gZnVuY3Rpb24gX19QUklWQVRFX3N0cmluZ2lmeUZpZWxkRmlsdGVyKGUpIHtcbiAgICAgICAgcmV0dXJuIGAke2UuZmllbGQuY2Fub25pY2FsU3RyaW5nKCl9ICR7ZS5vcH0gJHtjYW5vbmljYWxJZChlLnZhbHVlKX1gO1xuICAgIH1cbiAgICAvKiogRmlsdGVyIHRoYXQgbWF0Y2hlcyBvbiBrZXkgZmllbGRzIChpLmUuICdfX25hbWVfXycpLiAqLyAoZSkgOiBlIGluc3RhbmNlb2YgQ29tcG9zaXRlRmlsdGVyID8gZnVuY3Rpb24gX19QUklWQVRFX3N0cmluZ2lmeUNvbXBvc2l0ZUZpbHRlcihlKSB7XG4gICAgICAgIHJldHVybiBlLm9wLnRvU3RyaW5nKCkgKyBcIiB7XCIgKyBlLmdldEZpbHRlcnMoKS5tYXAoX19QUklWQVRFX3N0cmluZ2lmeUZpbHRlcikuam9pbihcIiAsXCIpICsgXCJ9XCI7XG4gICAgfShlKSA6IFwiRmlsdGVyXCI7XG59XG5cbmNsYXNzIF9fUFJJVkFURV9LZXlGaWVsZEZpbHRlciBleHRlbmRzIEZpZWxkRmlsdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuKSB7XG4gICAgICAgIHN1cGVyKGUsIHQsIG4pLCB0aGlzLmtleSA9IERvY3VtZW50S2V5LmZyb21OYW1lKG4ucmVmZXJlbmNlVmFsdWUpO1xuICAgIH1cbiAgICBtYXRjaGVzKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IERvY3VtZW50S2V5LmNvbXBhcmF0b3IoZS5rZXksIHRoaXMua2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlc0NvbXBhcmlzb24odCk7XG4gICAgfVxufVxuXG4vKiogRmlsdGVyIHRoYXQgbWF0Y2hlcyBvbiBrZXkgZmllbGRzIHdpdGhpbiBhbiBhcnJheS4gKi8gY2xhc3MgX19QUklWQVRFX0tleUZpZWxkSW5GaWx0ZXIgZXh0ZW5kcyBGaWVsZEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcihlLCBcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gLCB0KSwgdGhpcy5rZXlzID0gX19QUklWQVRFX2V4dHJhY3REb2N1bWVudEtleXNGcm9tQXJyYXlWYWx1ZShcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gLCB0KTtcbiAgICB9XG4gICAgbWF0Y2hlcyhlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXMuc29tZSgodCA9PiB0LmlzRXF1YWwoZS5rZXkpKSk7XG4gICAgfVxufVxuXG4vKiogRmlsdGVyIHRoYXQgbWF0Y2hlcyBvbiBrZXkgZmllbGRzIG5vdCBwcmVzZW50IHdpdGhpbiBhbiBhcnJheS4gKi8gY2xhc3MgX19QUklWQVRFX0tleUZpZWxkTm90SW5GaWx0ZXIgZXh0ZW5kcyBGaWVsZEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcihlLCBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyAsIHQpLCB0aGlzLmtleXMgPSBfX1BSSVZBVEVfZXh0cmFjdERvY3VtZW50S2V5c0Zyb21BcnJheVZhbHVlKFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovICwgdCk7XG4gICAgfVxuICAgIG1hdGNoZXMoZSkge1xuICAgICAgICByZXR1cm4gIXRoaXMua2V5cy5zb21lKCh0ID0+IHQuaXNFcXVhbChlLmtleSkpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9leHRyYWN0RG9jdW1lbnRLZXlzRnJvbUFycmF5VmFsdWUoZSwgdCkge1xuICAgIHZhciBuO1xuICAgIHJldHVybiAoKG51bGwgPT09IChuID0gdC5hcnJheVZhbHVlKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLnZhbHVlcykgfHwgW10pLm1hcCgoZSA9PiBEb2N1bWVudEtleS5mcm9tTmFtZShlLnJlZmVyZW5jZVZhbHVlKSkpO1xufVxuXG4vKiogQSBGaWx0ZXIgdGhhdCBpbXBsZW1lbnRzIHRoZSBhcnJheS1jb250YWlucyBvcGVyYXRvci4gKi8gY2xhc3MgX19QUklWQVRFX0FycmF5Q29udGFpbnNGaWx0ZXIgZXh0ZW5kcyBGaWVsZEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcihlLCBcImFycmF5LWNvbnRhaW5zXCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlMgKi8gLCB0KTtcbiAgICB9XG4gICAgbWF0Y2hlcyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLmRhdGEuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHQpICYmIF9fUFJJVkFURV9hcnJheVZhbHVlQ29udGFpbnModC5hcnJheVZhbHVlLCB0aGlzLnZhbHVlKTtcbiAgICB9XG59XG5cbi8qKiBBIEZpbHRlciB0aGF0IGltcGxlbWVudHMgdGhlIElOIG9wZXJhdG9yLiAqLyBjbGFzcyBfX1BSSVZBVEVfSW5GaWx0ZXIgZXh0ZW5kcyBGaWVsZEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcihlLCBcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gLCB0KTtcbiAgICB9XG4gICAgbWF0Y2hlcyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLmRhdGEuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0ICYmIF9fUFJJVkFURV9hcnJheVZhbHVlQ29udGFpbnModGhpcy52YWx1ZS5hcnJheVZhbHVlLCB0KTtcbiAgICB9XG59XG5cbi8qKiBBIEZpbHRlciB0aGF0IGltcGxlbWVudHMgdGhlIG5vdC1pbiBvcGVyYXRvci4gKi8gY2xhc3MgX19QUklWQVRFX05vdEluRmlsdGVyIGV4dGVuZHMgRmllbGRGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgc3VwZXIoZSwgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gLCB0KTtcbiAgICB9XG4gICAgbWF0Y2hlcyhlKSB7XG4gICAgICAgIGlmIChfX1BSSVZBVEVfYXJyYXlWYWx1ZUNvbnRhaW5zKHRoaXMudmFsdWUuYXJyYXlWYWx1ZSwge1xuICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICB9KSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCB0ID0gZS5kYXRhLmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdCAmJiAhX19QUklWQVRFX2FycmF5VmFsdWVDb250YWlucyh0aGlzLnZhbHVlLmFycmF5VmFsdWUsIHQpO1xuICAgIH1cbn1cblxuLyoqIEEgRmlsdGVyIHRoYXQgaW1wbGVtZW50cyB0aGUgYXJyYXktY29udGFpbnMtYW55IG9wZXJhdG9yLiAqLyBjbGFzcyBfX1BSSVZBVEVfQXJyYXlDb250YWluc0FueUZpbHRlciBleHRlbmRzIEZpZWxkRmlsdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHN1cGVyKGUsIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovICwgdCk7XG4gICAgfVxuICAgIG1hdGNoZXMoZSkge1xuICAgICAgICBjb25zdCB0ID0gZS5kYXRhLmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICByZXR1cm4gISghaXNBcnJheSh0KSB8fCAhdC5hcnJheVZhbHVlLnZhbHVlcykgJiYgdC5hcnJheVZhbHVlLnZhbHVlcy5zb21lKChlID0+IF9fUFJJVkFURV9hcnJheVZhbHVlQ29udGFpbnModGhpcy52YWx1ZS5hcnJheVZhbHVlLCBlKSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3RpbmdcbmNsYXNzIF9fUFJJVkFURV9UYXJnZXRJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0ID0gbnVsbCwgbiA9IFtdLCByID0gW10sIGkgPSBudWxsLCBzID0gbnVsbCwgbyA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gZSwgdGhpcy5jb2xsZWN0aW9uR3JvdXAgPSB0LCB0aGlzLm9yZGVyQnkgPSBuLCB0aGlzLmZpbHRlcnMgPSByLCB0aGlzLmxpbWl0ID0gaSwgXG4gICAgICAgIHRoaXMuc3RhcnRBdCA9IHMsIHRoaXMuZW5kQXQgPSBvLCB0aGlzLnVlID0gbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBUYXJnZXQgd2l0aCBhIHBhdGggYW5kIG9wdGlvbmFsIGFkZGl0aW9uYWwgcXVlcnkgY29uc3RyYWludHMuXG4gKiBQYXRoIG11c3QgY3VycmVudGx5IGJlIGVtcHR5IGlmIHRoaXMgaXMgYSBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJ5LlxuICpcbiAqIE5PVEU6IHlvdSBzaG91bGQgYWx3YXlzIGNvbnN0cnVjdCBgVGFyZ2V0YCBmcm9tIGBRdWVyeS50b1RhcmdldGAgaW5zdGVhZCBvZlxuICogdXNpbmcgdGhpcyBmYWN0b3J5IG1ldGhvZCwgYmVjYXVzZSBgUXVlcnlgIHByb3ZpZGVzIGFuIGltcGxpY2l0IGBvcmRlckJ5YFxuICogcHJvcGVydHkuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX25ld1RhcmdldChlLCB0ID0gbnVsbCwgbiA9IFtdLCByID0gW10sIGkgPSBudWxsLCBzID0gbnVsbCwgbyA9IG51bGwpIHtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9UYXJnZXRJbXBsKGUsIHQsIG4sIHIsIGksIHMsIG8pO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY2Fub25pZnlUYXJnZXQoZSkge1xuICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIGlmIChudWxsID09PSB0LnVlKSB7XG4gICAgICAgIGxldCBlID0gdC5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgICAgICBudWxsICE9PSB0LmNvbGxlY3Rpb25Hcm91cCAmJiAoZSArPSBcInxjZzpcIiArIHQuY29sbGVjdGlvbkdyb3VwKSwgZSArPSBcInxmOlwiLCBlICs9IHQuZmlsdGVycy5tYXAoKGUgPT4gX19QUklWQVRFX2Nhbm9uaWZ5RmlsdGVyKGUpKSkuam9pbihcIixcIiksIFxuICAgICAgICBlICs9IFwifG9iOlwiLCBlICs9IHQub3JkZXJCeS5tYXAoKGUgPT4gZnVuY3Rpb24gX19QUklWQVRFX2Nhbm9uaWZ5T3JkZXJCeShlKSB7XG4gICAgICAgICAgICAvLyBUT0RPKGIvMjkxODMxNjUpOiBNYWtlIHRoaXMgY29sbGlzaW9uIHJvYnVzdC5cbiAgICAgICAgICAgIHJldHVybiBlLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpICsgZS5kaXI7XG4gICAgICAgIH0oZSkpKS5qb2luKFwiLFwiKSwgX19QUklWQVRFX2lzTnVsbE9yVW5kZWZpbmVkKHQubGltaXQpIHx8IChlICs9IFwifGw6XCIsIGUgKz0gdC5saW1pdCksIFxuICAgICAgICB0LnN0YXJ0QXQgJiYgKGUgKz0gXCJ8bGI6XCIsIGUgKz0gdC5zdGFydEF0LmluY2x1c2l2ZSA/IFwiYjpcIiA6IFwiYTpcIiwgZSArPSB0LnN0YXJ0QXQucG9zaXRpb24ubWFwKChlID0+IGNhbm9uaWNhbElkKGUpKSkuam9pbihcIixcIikpLCBcbiAgICAgICAgdC5lbmRBdCAmJiAoZSArPSBcInx1YjpcIiwgZSArPSB0LmVuZEF0LmluY2x1c2l2ZSA/IFwiYTpcIiA6IFwiYjpcIiwgZSArPSB0LmVuZEF0LnBvc2l0aW9uLm1hcCgoZSA9PiBjYW5vbmljYWxJZChlKSkpLmpvaW4oXCIsXCIpKSwgXG4gICAgICAgIHQudWUgPSBlO1xuICAgIH1cbiAgICByZXR1cm4gdC51ZTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RhcmdldEVxdWFscyhlLCB0KSB7XG4gICAgaWYgKGUubGltaXQgIT09IHQubGltaXQpIHJldHVybiAhMTtcbiAgICBpZiAoZS5vcmRlckJ5Lmxlbmd0aCAhPT0gdC5vcmRlckJ5Lmxlbmd0aCkgcmV0dXJuICExO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgZS5vcmRlckJ5Lmxlbmd0aDsgbisrKSBpZiAoIV9fUFJJVkFURV9vcmRlckJ5RXF1YWxzKGUub3JkZXJCeVtuXSwgdC5vcmRlckJ5W25dKSkgcmV0dXJuICExO1xuICAgIGlmIChlLmZpbHRlcnMubGVuZ3RoICE9PSB0LmZpbHRlcnMubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCBlLmZpbHRlcnMubGVuZ3RoOyBuKyspIGlmICghX19QUklWQVRFX2ZpbHRlckVxdWFscyhlLmZpbHRlcnNbbl0sIHQuZmlsdGVyc1tuXSkpIHJldHVybiAhMTtcbiAgICByZXR1cm4gZS5jb2xsZWN0aW9uR3JvdXAgPT09IHQuY29sbGVjdGlvbkdyb3VwICYmICghIWUucGF0aC5pc0VxdWFsKHQucGF0aCkgJiYgKCEhX19QUklWQVRFX2JvdW5kRXF1YWxzKGUuc3RhcnRBdCwgdC5zdGFydEF0KSAmJiBfX1BSSVZBVEVfYm91bmRFcXVhbHMoZS5lbmRBdCwgdC5lbmRBdCkpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RhcmdldElzRG9jdW1lbnRUYXJnZXQoZSkge1xuICAgIHJldHVybiBEb2N1bWVudEtleS5pc0RvY3VtZW50S2V5KGUucGF0aCkgJiYgbnVsbCA9PT0gZS5jb2xsZWN0aW9uR3JvdXAgJiYgMCA9PT0gZS5maWx0ZXJzLmxlbmd0aDtcbn1cblxuLyoqIFJldHVybnMgdGhlIGZpZWxkIGZpbHRlcnMgdGhhdCB0YXJnZXQgdGhlIGdpdmVuIGZpZWxkIHBhdGguICovIGZ1bmN0aW9uIF9fUFJJVkFURV90YXJnZXRHZXRGaWVsZEZpbHRlcnNGb3JQYXRoKGUsIHQpIHtcbiAgICByZXR1cm4gZS5maWx0ZXJzLmZpbHRlcigoZSA9PiBlIGluc3RhbmNlb2YgRmllbGRGaWx0ZXIgJiYgZS5maWVsZC5pc0VxdWFsKHQpKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWVzIHRoYXQgYXJlIHVzZWQgaW4gQVJSQVlfQ09OVEFJTlMgb3IgQVJSQVlfQ09OVEFJTlNfQU5ZXG4gKiBmaWx0ZXJzLiBSZXR1cm5zIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gc3VjaCBmaWx0ZXJzLlxuICovXG4vKipcbiAqIFJldHVybnMgdGhlIHZhbHVlIHRvIHVzZSBhcyB0aGUgbG93ZXIgYm91bmQgZm9yIGFzY2VuZGluZyBpbmRleCBzZWdtZW50IGF0XG4gKiB0aGUgcHJvdmlkZWQgYGZpZWxkUGF0aGAgKG9yIHRoZSB1cHBlciBib3VuZCBmb3IgYW4gZGVzY2VuZGluZyBzZWdtZW50KS5cbiAqL1xuZnVuY3Rpb24gX19QUklWQVRFX3RhcmdldEdldEFzY2VuZGluZ0JvdW5kKGUsIHQsIG4pIHtcbiAgICBsZXQgciA9IGllLCBpID0gITA7XG4gICAgLy8gUHJvY2VzcyBhbGwgZmlsdGVycyB0byBmaW5kIGEgdmFsdWUgZm9yIHRoZSBjdXJyZW50IGZpZWxkIHNlZ21lbnRcbiAgICBmb3IgKGNvbnN0IG4gb2YgX19QUklWQVRFX3RhcmdldEdldEZpZWxkRmlsdGVyc0ZvclBhdGgoZSwgdCkpIHtcbiAgICAgICAgbGV0IGUgPSBpZSwgdCA9ICEwO1xuICAgICAgICBzd2l0Y2ggKG4ub3ApIHtcbiAgICAgICAgICBjYXNlIFwiPFwiIC8qIE9wZXJhdG9yLkxFU1NfVEhBTiAqLyA6XG4gICAgICAgICAgY2FzZSBcIjw9XCIgLyogT3BlcmF0b3IuTEVTU19USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIGUgPSBfX1BSSVZBVEVfdmFsdWVzR2V0TG93ZXJCb3VuZChuLnZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIj09XCIgLyogT3BlcmF0b3IuRVFVQUwgKi8gOlxuICAgICAgICAgIGNhc2UgXCJpblwiIC8qIE9wZXJhdG9yLklOICovIDpcbiAgICAgICAgICBjYXNlIFwiPj1cIiAvKiBPcGVyYXRvci5HUkVBVEVSX1RIQU5fT1JfRVFVQUwgKi8gOlxuICAgICAgICAgICAgZSA9IG4udmFsdWU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCI+XCIgLyogT3BlcmF0b3IuR1JFQVRFUl9USEFOICovIDpcbiAgICAgICAgICAgIGUgPSBuLnZhbHVlLCB0ID0gITE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCIhPVwiIC8qIE9wZXJhdG9yLk5PVF9FUVVBTCAqLyA6XG4gICAgICAgICAgY2FzZSBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyA6XG4gICAgICAgICAgICBlID0gaWU7XG4gLy8gUmVtYWluaW5nIGZpbHRlcnMgY2Fubm90IGJlIHVzZWQgYXMgbG93ZXIgYm91bmRzLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgX19QUklWQVRFX2xvd2VyQm91bmRDb21wYXJlKHtcbiAgICAgICAgICAgIHZhbHVlOiByLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHZhbHVlOiBlLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0XG4gICAgICAgIH0pIDwgMCAmJiAociA9IGUsIGkgPSB0KTtcbiAgICB9XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gYWRkaXRpb25hbCBib3VuZCwgY29tcGFyZSB0aGUgdmFsdWVzIGFnYWluc3QgdGhlIGV4aXN0aW5nXG4gICAgLy8gcmFuZ2UgdG8gc2VlIGlmIHdlIGNhbiBuYXJyb3cgdGhlIHNjb3BlLlxuICAgICAgICBpZiAobnVsbCAhPT0gbikgZm9yIChsZXQgcyA9IDA7IHMgPCBlLm9yZGVyQnkubGVuZ3RoOyArK3MpIHtcbiAgICAgICAgaWYgKGUub3JkZXJCeVtzXS5maWVsZC5pc0VxdWFsKHQpKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gbi5wb3NpdGlvbltzXTtcbiAgICAgICAgICAgIF9fUFJJVkFURV9sb3dlckJvdW5kQ29tcGFyZSh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHIsXG4gICAgICAgICAgICAgICAgaW5jbHVzaXZlOiBpXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGUsXG4gICAgICAgICAgICAgICAgaW5jbHVzaXZlOiBuLmluY2x1c2l2ZVxuICAgICAgICAgICAgfSkgPCAwICYmIChyID0gZSwgaSA9IG4uaW5jbHVzaXZlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiByLFxuICAgICAgICBpbmNsdXNpdmU6IGlcbiAgICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHZhbHVlIHRvIHVzZSBhcyB0aGUgdXBwZXIgYm91bmQgZm9yIGFzY2VuZGluZyBpbmRleCBzZWdtZW50IGF0XG4gKiB0aGUgcHJvdmlkZWQgYGZpZWxkUGF0aGAgKG9yIHRoZSBsb3dlciBib3VuZCBmb3IgYSBkZXNjZW5kaW5nIHNlZ21lbnQpLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV90YXJnZXRHZXREZXNjZW5kaW5nQm91bmQoZSwgdCwgbikge1xuICAgIGxldCByID0gcmUsIGkgPSAhMDtcbiAgICAvLyBQcm9jZXNzIGFsbCBmaWx0ZXJzIHRvIGZpbmQgYSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgZmllbGQgc2VnbWVudFxuICAgIGZvciAoY29uc3QgbiBvZiBfX1BSSVZBVEVfdGFyZ2V0R2V0RmllbGRGaWx0ZXJzRm9yUGF0aChlLCB0KSkge1xuICAgICAgICBsZXQgZSA9IHJlLCB0ID0gITA7XG4gICAgICAgIHN3aXRjaCAobi5vcCkge1xuICAgICAgICAgIGNhc2UgXCI+PVwiIC8qIE9wZXJhdG9yLkdSRUFURVJfVEhBTl9PUl9FUVVBTCAqLyA6XG4gICAgICAgICAgY2FzZSBcIj5cIiAvKiBPcGVyYXRvci5HUkVBVEVSX1RIQU4gKi8gOlxuICAgICAgICAgICAgZSA9IF9fUFJJVkFURV92YWx1ZXNHZXRVcHBlckJvdW5kKG4udmFsdWUpLCB0ID0gITE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCI9PVwiIC8qIE9wZXJhdG9yLkVRVUFMICovIDpcbiAgICAgICAgICBjYXNlIFwiaW5cIiAvKiBPcGVyYXRvci5JTiAqLyA6XG4gICAgICAgICAgY2FzZSBcIjw9XCIgLyogT3BlcmF0b3IuTEVTU19USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIGUgPSBuLnZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiPFwiIC8qIE9wZXJhdG9yLkxFU1NfVEhBTiAqLyA6XG4gICAgICAgICAgICBlID0gbi52YWx1ZSwgdCA9ICExO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi8gOlxuICAgICAgICAgIGNhc2UgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gOlxuICAgICAgICAgICAgZSA9IHJlO1xuIC8vIFJlbWFpbmluZyBmaWx0ZXJzIGNhbm5vdCBiZSB1c2VkIGFzIHVwcGVyIGJvdW5kcy5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIF9fUFJJVkFURV91cHBlckJvdW5kQ29tcGFyZSh7XG4gICAgICAgICAgICB2YWx1ZTogcixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogaVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB2YWx1ZTogZSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdFxuICAgICAgICB9KSA+IDAgJiYgKHIgPSBlLCBpID0gdCk7XG4gICAgfVxuICAgIC8vIElmIHRoZXJlIGlzIGFuIGFkZGl0aW9uYWwgYm91bmQsIGNvbXBhcmUgdGhlIHZhbHVlcyBhZ2FpbnN0IHRoZSBleGlzdGluZ1xuICAgIC8vIHJhbmdlIHRvIHNlZSBpZiB3ZSBjYW4gbmFycm93IHRoZSBzY29wZS5cbiAgICAgICAgaWYgKG51bGwgIT09IG4pIGZvciAobGV0IHMgPSAwOyBzIDwgZS5vcmRlckJ5Lmxlbmd0aDsgKytzKSB7XG4gICAgICAgIGlmIChlLm9yZGVyQnlbc10uZmllbGQuaXNFcXVhbCh0KSkge1xuICAgICAgICAgICAgY29uc3QgZSA9IG4ucG9zaXRpb25bc107XG4gICAgICAgICAgICBfX1BSSVZBVEVfdXBwZXJCb3VuZENvbXBhcmUoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiByLFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogaVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBlLFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogbi5pbmNsdXNpdmVcbiAgICAgICAgICAgIH0pID4gMCAmJiAociA9IGUsIGkgPSBuLmluY2x1c2l2ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogcixcbiAgICAgICAgaW5jbHVzaXZlOiBpXG4gICAgfTtcbn1cblxuLyoqIFJldHVybnMgdGhlIG51bWJlciBvZiBzZWdtZW50cyBvZiBhIHBlcmZlY3QgaW5kZXggZm9yIHRoaXMgdGFyZ2V0LiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUXVlcnkgZW5jYXBzdWxhdGVzIGFsbCB0aGUgcXVlcnkgYXR0cmlidXRlcyB3ZSBzdXBwb3J0IGluIHRoZSBTREsuIEl0IGNhblxuICogYmUgcnVuIGFnYWluc3QgdGhlIExvY2FsU3RvcmUsIGFzIHdlbGwgYXMgYmUgY29udmVydGVkIHRvIGEgYFRhcmdldGAgdG9cbiAqIHF1ZXJ5IHRoZSBSZW1vdGVTdG9yZSByZXN1bHRzLlxuICpcbiAqIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gKi9cbmNsYXNzIF9fUFJJVkFURV9RdWVyeUltcGwge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgUXVlcnkgd2l0aCBhIHBhdGggYW5kIG9wdGlvbmFsIGFkZGl0aW9uYWwgcXVlcnkgY29uc3RyYWludHMuXG4gICAgICogUGF0aCBtdXN0IGN1cnJlbnRseSBiZSBlbXB0eSBpZiB0aGlzIGlzIGEgY29sbGVjdGlvbiBncm91cCBxdWVyeS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0ID0gbnVsbCwgbiA9IFtdLCByID0gW10sIGkgPSBudWxsLCBzID0gXCJGXCIgLyogTGltaXRUeXBlLkZpcnN0ICovICwgbyA9IG51bGwsIF8gPSBudWxsKSB7XG4gICAgICAgIHRoaXMucGF0aCA9IGUsIHRoaXMuY29sbGVjdGlvbkdyb3VwID0gdCwgdGhpcy5leHBsaWNpdE9yZGVyQnkgPSBuLCB0aGlzLmZpbHRlcnMgPSByLCBcbiAgICAgICAgdGhpcy5saW1pdCA9IGksIHRoaXMubGltaXRUeXBlID0gcywgdGhpcy5zdGFydEF0ID0gbywgdGhpcy5lbmRBdCA9IF8sIHRoaXMuY2UgPSBudWxsLCBcbiAgICAgICAgLy8gVGhlIGNvcnJlc3BvbmRpbmcgYFRhcmdldGAgb2YgdGhpcyBgUXVlcnlgIGluc3RhbmNlLCBmb3IgdXNlIHdpdGhcbiAgICAgICAgLy8gbm9uLWFnZ3JlZ2F0ZSBxdWVyaWVzLlxuICAgICAgICB0aGlzLmxlID0gbnVsbCwgXG4gICAgICAgIC8vIFRoZSBjb3JyZXNwb25kaW5nIGBUYXJnZXRgIG9mIHRoaXMgYFF1ZXJ5YCBpbnN0YW5jZSwgZm9yIHVzZSB3aXRoXG4gICAgICAgIC8vIGFnZ3JlZ2F0ZSBxdWVyaWVzLiBVbmxpa2UgdGFyZ2V0cyBmb3Igbm9uLWFnZ3JlZ2F0ZSBxdWVyaWVzLFxuICAgICAgICAvLyBhZ2dyZWdhdGUgcXVlcnkgdGFyZ2V0cyBkbyBub3QgY29udGFpbiBub3JtYWxpemVkIG9yZGVyLWJ5cywgdGhleSBvbmx5XG4gICAgICAgIC8vIGNvbnRhaW4gZXhwbGljaXQgb3JkZXItYnlzLlxuICAgICAgICB0aGlzLmhlID0gbnVsbCwgdGhpcy5zdGFydEF0LCB0aGlzLmVuZEF0O1xuICAgIH1cbn1cblxuLyoqIENyZWF0ZXMgYSBuZXcgUXVlcnkgaW5zdGFuY2Ugd2l0aCB0aGUgb3B0aW9ucyBwcm92aWRlZC4gKi8gZnVuY3Rpb24gX19QUklWQVRFX25ld1F1ZXJ5KGUsIHQsIG4sIHIsIGksIHMsIG8sIF8pIHtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9RdWVyeUltcGwoZSwgdCwgbiwgciwgaSwgcywgbywgXyk7XG59XG5cbi8qKiBDcmVhdGVzIGEgbmV3IFF1ZXJ5IGZvciBhIHF1ZXJ5IHRoYXQgbWF0Y2hlcyBhbGwgZG9jdW1lbnRzIGF0IGBwYXRoYCAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfbmV3UXVlcnlGb3JQYXRoKGUpIHtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9RdWVyeUltcGwoZSk7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGNvbnZlcnQgYSBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJ5IGludG8gYSBjb2xsZWN0aW9uIHF1ZXJ5IGF0IGFcbiAqIHNwZWNpZmljIHBhdGguIFRoaXMgaXMgdXNlZCB3aGVuIGV4ZWN1dGluZyBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJpZXMsIHNpbmNlXG4gKiB3ZSBoYXZlIHRvIHNwbGl0IHRoZSBxdWVyeSBpbnRvIGEgc2V0IG9mIGNvbGxlY3Rpb24gcXVlcmllcyBhdCBtdWx0aXBsZVxuICogcGF0aHMuXG4gKi9cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgcXVlcnkgZG9lcyBub3Qgc3BlY2lmeSBhbnkgcXVlcnkgY29uc3RyYWludHMgdGhhdFxuICogY291bGQgcmVtb3ZlIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9xdWVyeU1hdGNoZXNBbGxEb2N1bWVudHMoZSkge1xuICAgIHJldHVybiAwID09PSBlLmZpbHRlcnMubGVuZ3RoICYmIG51bGwgPT09IGUubGltaXQgJiYgbnVsbCA9PSBlLnN0YXJ0QXQgJiYgbnVsbCA9PSBlLmVuZEF0ICYmICgwID09PSBlLmV4cGxpY2l0T3JkZXJCeS5sZW5ndGggfHwgMSA9PT0gZS5leHBsaWNpdE9yZGVyQnkubGVuZ3RoICYmIGUuZXhwbGljaXRPcmRlckJ5WzBdLmZpZWxkLmlzS2V5RmllbGQoKSk7XG59XG5cbi8vIFJldHVybnMgdGhlIHNvcnRlZCBzZXQgb2YgaW5lcXVhbGl0eSBmaWx0ZXIgZmllbGRzIHVzZWQgaW4gdGhpcyBxdWVyeS5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBxdWVyeSBtYXRjaGVzIGEgY29sbGVjdGlvbiBncm91cCByYXRoZXIgdGhhbiBhIHNwZWNpZmljXG4gKiBjb2xsZWN0aW9uLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfaXNDb2xsZWN0aW9uR3JvdXBRdWVyeShlKSB7XG4gICAgcmV0dXJuIG51bGwgIT09IGUuY29sbGVjdGlvbkdyb3VwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG5vcm1hbGl6ZWQgb3JkZXItYnkgY29uc3RyYWludCB0aGF0IGlzIHVzZWQgdG8gZXhlY3V0ZSB0aGUgUXVlcnksXG4gKiB3aGljaCBjYW4gYmUgZGlmZmVyZW50IGZyb20gdGhlIG9yZGVyLWJ5IGNvbnN0cmFpbnRzIHRoZSB1c2VyIHByb3ZpZGVkIChlLmcuXG4gKiB0aGUgU0RLIGFuZCBiYWNrZW5kIGFsd2F5cyBvcmRlcnMgYnkgYF9fbmFtZV9fYCkuIFRoZSBub3JtYWxpemVkIG9yZGVyLWJ5XG4gKiBpbmNsdWRlcyBpbXBsaWNpdCBvcmRlci1ieXMgaW4gYWRkaXRpb24gdG8gdGhlIGV4cGxpY2l0IHVzZXIgcHJvdmlkZWRcbiAqIG9yZGVyLWJ5cy5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfcXVlcnlOb3JtYWxpemVkT3JkZXJCeShlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgaWYgKG51bGwgPT09IHQuY2UpIHtcbiAgICAgICAgdC5jZSA9IFtdO1xuICAgICAgICBjb25zdCBlID0gbmV3IFNldDtcbiAgICAgICAgLy8gQW55IGV4cGxpY2l0IG9yZGVyIGJ5IGZpZWxkcyBzaG91bGQgYmUgYWRkZWQgYXMgaXMuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQuZXhwbGljaXRPcmRlckJ5KSB0LmNlLnB1c2gobiksIGUuYWRkKG4uZmllbGQuY2Fub25pY2FsU3RyaW5nKCkpO1xuICAgICAgICAvLyBUaGUgb3JkZXIgb2YgdGhlIGltcGxpY2l0IG9yZGVyaW5nIGFsd2F5cyBtYXRjaGVzIHRoZSBsYXN0IGV4cGxpY2l0IG9yZGVyIGJ5LlxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmV4cGxpY2l0T3JkZXJCeS5sZW5ndGggPiAwID8gdC5leHBsaWNpdE9yZGVyQnlbdC5leHBsaWNpdE9yZGVyQnkubGVuZ3RoIC0gMV0uZGlyIDogXCJhc2NcIiAvKiBEaXJlY3Rpb24uQVNDRU5ESU5HICovICwgciA9IGZ1bmN0aW9uIF9fUFJJVkFURV9nZXRJbmVxdWFsaXR5RmlsdGVyRmllbGRzKGUpIHtcbiAgICAgICAgICAgIGxldCB0ID0gbmV3IFNvcnRlZFNldChGaWVsZFBhdGgkMS5jb21wYXJhdG9yKTtcbiAgICAgICAgICAgIHJldHVybiBlLmZpbHRlcnMuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgZS5nZXRGbGF0dGVuZWRGaWx0ZXJzKCkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuaXNJbmVxdWFsaXR5KCkgJiYgKHQgPSB0LmFkZChlLmZpZWxkKSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLCB0O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQ3JlYXRlcyBhIG5ldyBRdWVyeSBmb3IgYSBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJ5IHRoYXQgbWF0Y2hlcyBhbGwgZG9jdW1lbnRzXG4gKiB3aXRoaW4gdGhlIHByb3ZpZGVkIGNvbGxlY3Rpb24gZ3JvdXAuXG4gKi8gKHQpO1xuICAgICAgICAvLyBBbnkgaW5lcXVhbGl0eSBmaWVsZHMgbm90IGV4cGxpY2l0bHkgb3JkZXJlZCBzaG91bGQgYmUgaW1wbGljaXRseSBvcmRlcmVkIGluIGEgbGV4aWNvZ3JhcGhpY2FsXG4gICAgICAgIC8vIG9yZGVyLiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBpbmVxdWFsaXR5IGZpbHRlcnMgb24gdGhlIHNhbWUgZmllbGQsIHRoZSBmaWVsZCBzaG91bGQgYmUgYWRkZWRcbiAgICAgICAgLy8gb25seSBvbmNlLlxuICAgICAgICAvLyBOb3RlOiBgU29ydGVkU2V0PEZpZWxkUGF0aD5gIHNvcnRzIHRoZSBrZXkgZmllbGQgYmVmb3JlIG90aGVyIGZpZWxkcy4gSG93ZXZlciwgd2Ugd2FudCB0aGUga2V5XG4gICAgICAgIC8vIGZpZWxkIHRvIGJlIHNvcnRlZCBsYXN0LlxuICAgICAgICAgICAgICAgIHIuZm9yRWFjaCgociA9PiB7XG4gICAgICAgICAgICBlLmhhcyhyLmNhbm9uaWNhbFN0cmluZygpKSB8fCByLmlzS2V5RmllbGQoKSB8fCB0LmNlLnB1c2gobmV3IE9yZGVyQnkociwgbikpO1xuICAgICAgICB9KSksIFxuICAgICAgICAvLyBBZGQgdGhlIGRvY3VtZW50IGtleSBmaWVsZCB0byB0aGUgbGFzdCBpZiBpdCBpcyBub3QgZXhwbGljaXRseSBvcmRlcmVkLlxuICAgICAgICBlLmhhcyhGaWVsZFBhdGgkMS5rZXlGaWVsZCgpLmNhbm9uaWNhbFN0cmluZygpKSB8fCB0LmNlLnB1c2gobmV3IE9yZGVyQnkoRmllbGRQYXRoJDEua2V5RmllbGQoKSwgbikpO1xuICAgIH1cbiAgICByZXR1cm4gdC5jZTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGBRdWVyeWAgaW5zdGFuY2UgdG8gaXRzIGNvcnJlc3BvbmRpbmcgYFRhcmdldGAgcmVwcmVzZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX3F1ZXJ5VG9UYXJnZXQoZSkge1xuICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIHJldHVybiB0LmxlIHx8ICh0LmxlID0gX19QUklWQVRFX19xdWVyeVRvVGFyZ2V0KHQsIF9fUFJJVkFURV9xdWVyeU5vcm1hbGl6ZWRPcmRlckJ5KGUpKSksIFxuICAgIHQubGU7XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBgUXVlcnlgIGluc3RhbmNlIHRvIGl0cyBjb3JyZXNwb25kaW5nIGBUYXJnZXRgIHJlcHJlc2VudGF0aW9uLFxuICogZm9yIHVzZSB3aXRoaW4gYW4gYWdncmVnYXRlIHF1ZXJ5LiBVbmxpa2UgdGFyZ2V0cyBmb3Igbm9uLWFnZ3JlZ2F0ZSBxdWVyaWVzLFxuICogYWdncmVnYXRlIHF1ZXJ5IHRhcmdldHMgZG8gbm90IGNvbnRhaW4gbm9ybWFsaXplZCBvcmRlci1ieXMsIHRoZXkgb25seVxuICogY29udGFpbiBleHBsaWNpdCBvcmRlci1ieXMuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX3F1ZXJ5VG9BZ2dyZWdhdGVUYXJnZXQoZSkge1xuICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIHJldHVybiB0LmhlIHx8IChcbiAgICAvLyBEbyBub3QgaW5jbHVkZSBpbXBsaWNpdCBvcmRlci1ieXMgZm9yIGFnZ3JlZ2F0ZSBxdWVyaWVzLlxuICAgIHQuaGUgPSBfX1BSSVZBVEVfX3F1ZXJ5VG9UYXJnZXQodCwgZS5leHBsaWNpdE9yZGVyQnkpKSwgdC5oZTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX19xdWVyeVRvVGFyZ2V0KGUsIHQpIHtcbiAgICBpZiAoXCJGXCIgLyogTGltaXRUeXBlLkZpcnN0ICovID09PSBlLmxpbWl0VHlwZSkgcmV0dXJuIF9fUFJJVkFURV9uZXdUYXJnZXQoZS5wYXRoLCBlLmNvbGxlY3Rpb25Hcm91cCwgdCwgZS5maWx0ZXJzLCBlLmxpbWl0LCBlLnN0YXJ0QXQsIGUuZW5kQXQpO1xuICAgIHtcbiAgICAgICAgLy8gRmxpcCB0aGUgb3JkZXJCeSBkaXJlY3Rpb25zIHNpbmNlIHdlIHdhbnQgdGhlIGxhc3QgcmVzdWx0c1xuICAgICAgICB0ID0gdC5tYXAoKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgdCA9IFwiZGVzY1wiIC8qIERpcmVjdGlvbi5ERVNDRU5ESU5HICovID09PSBlLmRpciA/IFwiYXNjXCIgLyogRGlyZWN0aW9uLkFTQ0VORElORyAqLyA6IFwiZGVzY1wiIC8qIERpcmVjdGlvbi5ERVNDRU5ESU5HICovO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPcmRlckJ5KGUuZmllbGQsIHQpO1xuICAgICAgICB9KSk7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gc3dhcCB0aGUgY3Vyc29ycyB0byBtYXRjaCB0aGUgbm93LWZsaXBwZWQgcXVlcnkgb3JkZXJpbmcuXG4gICAgICAgIGNvbnN0IG4gPSBlLmVuZEF0ID8gbmV3IEJvdW5kKGUuZW5kQXQucG9zaXRpb24sIGUuZW5kQXQuaW5jbHVzaXZlKSA6IG51bGwsIHIgPSBlLnN0YXJ0QXQgPyBuZXcgQm91bmQoZS5zdGFydEF0LnBvc2l0aW9uLCBlLnN0YXJ0QXQuaW5jbHVzaXZlKSA6IG51bGw7XG4gICAgICAgIC8vIE5vdyByZXR1cm4gYXMgYSBMaW1pdFR5cGUuRmlyc3QgcXVlcnkuXG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbmV3VGFyZ2V0KGUucGF0aCwgZS5jb2xsZWN0aW9uR3JvdXAsIHQsIGUuZmlsdGVycywgZS5saW1pdCwgbiwgcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfcXVlcnlXaXRoQWRkZWRGaWx0ZXIoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBlLmZpbHRlcnMuY29uY2F0KFsgdCBdKTtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9RdWVyeUltcGwoZS5wYXRoLCBlLmNvbGxlY3Rpb25Hcm91cCwgZS5leHBsaWNpdE9yZGVyQnkuc2xpY2UoKSwgbiwgZS5saW1pdCwgZS5saW1pdFR5cGUsIGUuc3RhcnRBdCwgZS5lbmRBdCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9xdWVyeVdpdGhMaW1pdChlLCB0LCBuKSB7XG4gICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfUXVlcnlJbXBsKGUucGF0aCwgZS5jb2xsZWN0aW9uR3JvdXAsIGUuZXhwbGljaXRPcmRlckJ5LnNsaWNlKCksIGUuZmlsdGVycy5zbGljZSgpLCB0LCBuLCBlLnN0YXJ0QXQsIGUuZW5kQXQpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfcXVlcnlFcXVhbHMoZSwgdCkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfdGFyZ2V0RXF1YWxzKF9fUFJJVkFURV9xdWVyeVRvVGFyZ2V0KGUpLCBfX1BSSVZBVEVfcXVlcnlUb1RhcmdldCh0KSkgJiYgZS5saW1pdFR5cGUgPT09IHQubGltaXRUeXBlO1xufVxuXG4vLyBUT0RPKGIvMjkxODMxNjUpOiBUaGlzIGlzIHVzZWQgdG8gZ2V0IGEgdW5pcXVlIHN0cmluZyBmcm9tIGEgcXVlcnkgdG8sIGZvclxuLy8gZXhhbXBsZSwgdXNlIGFzIGEgZGljdGlvbmFyeSBrZXksIGJ1dCB0aGUgaW1wbGVtZW50YXRpb24gaXMgc3ViamVjdCB0b1xuLy8gY29sbGlzaW9ucy4gTWFrZSBpdCBjb2xsaXNpb24tZnJlZS5cbmZ1bmN0aW9uIF9fUFJJVkFURV9jYW5vbmlmeVF1ZXJ5KGUpIHtcbiAgICByZXR1cm4gYCR7X19QUklWQVRFX2Nhbm9uaWZ5VGFyZ2V0KF9fUFJJVkFURV9xdWVyeVRvVGFyZ2V0KGUpKX18bHQ6JHtlLmxpbWl0VHlwZX1gO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfc3RyaW5naWZ5UXVlcnkoZSkge1xuICAgIHJldHVybiBgUXVlcnkodGFyZ2V0PSR7ZnVuY3Rpb24gX19QUklWQVRFX3N0cmluZ2lmeVRhcmdldChlKSB7XG4gICAgICAgIGxldCB0ID0gZS5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZS5jb2xsZWN0aW9uR3JvdXAgJiYgKHQgKz0gXCIgY29sbGVjdGlvbkdyb3VwPVwiICsgZS5jb2xsZWN0aW9uR3JvdXApLCBcbiAgICAgICAgZS5maWx0ZXJzLmxlbmd0aCA+IDAgJiYgKHQgKz0gYCwgZmlsdGVyczogWyR7ZS5maWx0ZXJzLm1hcCgoZSA9PiBfX1BSSVZBVEVfc3RyaW5naWZ5RmlsdGVyKGUpKSkuam9pbihcIiwgXCIpfV1gKSwgXG4gICAgICAgIF9fUFJJVkFURV9pc051bGxPclVuZGVmaW5lZChlLmxpbWl0KSB8fCAodCArPSBcIiwgbGltaXQ6IFwiICsgZS5saW1pdCksIGUub3JkZXJCeS5sZW5ndGggPiAwICYmICh0ICs9IGAsIG9yZGVyQnk6IFske2Uub3JkZXJCeS5tYXAoKGUgPT4gZnVuY3Rpb24gX19QUklWQVRFX3N0cmluZ2lmeU9yZGVyQnkoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGAke2UuZmllbGQuY2Fub25pY2FsU3RyaW5nKCl9ICgke2UuZGlyfSlgO1xuICAgICAgICB9KGUpKSkuam9pbihcIiwgXCIpfV1gKSwgZS5zdGFydEF0ICYmICh0ICs9IFwiLCBzdGFydEF0OiBcIiwgdCArPSBlLnN0YXJ0QXQuaW5jbHVzaXZlID8gXCJiOlwiIDogXCJhOlwiLCBcbiAgICAgICAgdCArPSBlLnN0YXJ0QXQucG9zaXRpb24ubWFwKChlID0+IGNhbm9uaWNhbElkKGUpKSkuam9pbihcIixcIikpLCBlLmVuZEF0ICYmICh0ICs9IFwiLCBlbmRBdDogXCIsIFxuICAgICAgICB0ICs9IGUuZW5kQXQuaW5jbHVzaXZlID8gXCJhOlwiIDogXCJiOlwiLCB0ICs9IGUuZW5kQXQucG9zaXRpb24ubWFwKChlID0+IGNhbm9uaWNhbElkKGUpKSkuam9pbihcIixcIikpLCBcbiAgICAgICAgYFRhcmdldCgke3R9KWA7XG4gICAgfShfX1BSSVZBVEVfcXVlcnlUb1RhcmdldChlKSl9OyBsaW1pdFR5cGU9JHtlLmxpbWl0VHlwZX0pYDtcbn1cblxuLyoqIFJldHVybnMgd2hldGhlciBgZG9jYCBtYXRjaGVzIHRoZSBjb25zdHJhaW50cyBvZiBgcXVlcnlgLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfcXVlcnlNYXRjaGVzKGUsIHQpIHtcbiAgICByZXR1cm4gdC5pc0ZvdW5kRG9jdW1lbnQoKSAmJiBmdW5jdGlvbiBfX1BSSVZBVEVfcXVlcnlNYXRjaGVzUGF0aEFuZENvbGxlY3Rpb25Hcm91cChlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0LmtleS5wYXRoO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZS5jb2xsZWN0aW9uR3JvdXAgPyB0LmtleS5oYXNDb2xsZWN0aW9uSWQoZS5jb2xsZWN0aW9uR3JvdXApICYmIGUucGF0aC5pc1ByZWZpeE9mKG4pIDogRG9jdW1lbnRLZXkuaXNEb2N1bWVudEtleShlLnBhdGgpID8gZS5wYXRoLmlzRXF1YWwobikgOiBlLnBhdGguaXNJbW1lZGlhdGVQYXJlbnRPZihuKTtcbiAgICB9XG4gICAgLyoqXG4gKiBBIGRvY3VtZW50IG11c3QgaGF2ZSBhIHZhbHVlIGZvciBldmVyeSBvcmRlcmluZyBjbGF1c2UgaW4gb3JkZXIgdG8gc2hvdyB1cFxuICogaW4gdGhlIHJlc3VsdHMuXG4gKi8gKGUsIHQpICYmIGZ1bmN0aW9uIF9fUFJJVkFURV9xdWVyeU1hdGNoZXNPcmRlckJ5KGUsIHQpIHtcbiAgICAgICAgLy8gV2UgbXVzdCB1c2UgYHF1ZXJ5Tm9ybWFsaXplZE9yZGVyQnkoKWAgdG8gZ2V0IHRoZSBsaXN0IG9mIGFsbCBvcmRlckJ5cyAoYm90aCBpbXBsaWNpdCBhbmQgZXhwbGljaXQpLlxuICAgICAgICAvLyBOb3RlIHRoYXQgZm9yIE9SIHF1ZXJpZXMsIG9yZGVyQnkgYXBwbGllcyB0byBhbGwgZGlzanVuY3Rpb24gdGVybXMgYW5kIGltcGxpY2l0IG9yZGVyQnlzIG11c3RcbiAgICAgICAgLy8gYmUgdGFrZW4gaW50byBhY2NvdW50LiBGb3IgZXhhbXBsZSwgdGhlIHF1ZXJ5IFwiYSA+IDEgfHwgYj09MVwiIGhhcyBhbiBpbXBsaWNpdCBcIm9yZGVyQnkgYVwiIGR1ZVxuICAgICAgICAvLyB0byB0aGUgaW5lcXVhbGl0eSwgYW5kIGlzIGV2YWx1YXRlZCBhcyBcImEgPiAxIG9yZGVyQnkgYSB8fCBiPT0xIG9yZGVyQnkgYVwiLlxuICAgICAgICAvLyBBIGRvY3VtZW50IHdpdGggY29udGVudCBvZiB7YjoxfSBtYXRjaGVzIHRoZSBmaWx0ZXJzLCBidXQgZG9lcyBub3QgbWF0Y2ggdGhlIG9yZGVyQnkgYmVjYXVzZVxuICAgICAgICAvLyBpdCdzIG1pc3NpbmcgdGhlIGZpZWxkICdhJy5cbiAgICAgICAgZm9yIChjb25zdCBuIG9mIF9fUFJJVkFURV9xdWVyeU5vcm1hbGl6ZWRPcmRlckJ5KGUpKSBcbiAgICAgICAgLy8gb3JkZXItYnkga2V5IGFsd2F5cyBtYXRjaGVzXG4gICAgICAgIGlmICghbi5maWVsZC5pc0tleUZpZWxkKCkgJiYgbnVsbCA9PT0gdC5kYXRhLmZpZWxkKG4uZmllbGQpKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9KGUsIHQpICYmIGZ1bmN0aW9uIF9fUFJJVkFURV9xdWVyeU1hdGNoZXNGaWx0ZXJzKGUsIHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIGUuZmlsdGVycykgaWYgKCFuLm1hdGNoZXModCkpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICAvKiogTWFrZXMgc3VyZSBhIGRvY3VtZW50IGlzIHdpdGhpbiB0aGUgYm91bmRzLCBpZiBwcm92aWRlZC4gKi8gKGUsIHQpICYmIGZ1bmN0aW9uIF9fUFJJVkFURV9xdWVyeU1hdGNoZXNCb3VuZHMoZSwgdCkge1xuICAgICAgICBpZiAoZS5zdGFydEF0ICYmICFcbiAgICAgICAgLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBkb2N1bWVudCBzb3J0cyBiZWZvcmUgYSBib3VuZCB1c2luZyB0aGUgcHJvdmlkZWQgc29ydFxuICogb3JkZXIuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24gX19QUklWQVRFX2JvdW5kU29ydHNCZWZvcmVEb2N1bWVudChlLCB0LCBuKSB7XG4gICAgICAgICAgICBjb25zdCByID0gX19QUklWQVRFX2JvdW5kQ29tcGFyZVRvRG9jdW1lbnQoZSwgdCwgbik7XG4gICAgICAgICAgICByZXR1cm4gZS5pbmNsdXNpdmUgPyByIDw9IDAgOiByIDwgMDtcbiAgICAgICAgfShlLnN0YXJ0QXQsIF9fUFJJVkFURV9xdWVyeU5vcm1hbGl6ZWRPcmRlckJ5KGUpLCB0KSkgcmV0dXJuICExO1xuICAgICAgICBpZiAoZS5lbmRBdCAmJiAhZnVuY3Rpb24gX19QUklWQVRFX2JvdW5kU29ydHNBZnRlckRvY3VtZW50KGUsIHQsIG4pIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfYm91bmRDb21wYXJlVG9Eb2N1bWVudChlLCB0LCBuKTtcbiAgICAgICAgICAgIHJldHVybiBlLmluY2x1c2l2ZSA/IHIgPj0gMCA6IHIgPiAwO1xuICAgICAgICB9KGUuZW5kQXQsIF9fUFJJVkFURV9xdWVyeU5vcm1hbGl6ZWRPcmRlckJ5KGUpLCB0KSkgcmV0dXJuICExO1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIC8qKlxuICogUmV0dXJucyB0aGUgY29sbGVjdGlvbiBncm91cCB0aGF0IHRoaXMgcXVlcnkgdGFyZ2V0cy5cbiAqXG4gKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGluIHRoZSBXZWIgU0RLIHRvIGZhY2lsaXRhdGUgbXVsdGktdGFiXG4gKiBzeW5jaHJvbml6YXRpb24gZm9yIHF1ZXJ5IHJlc3VsdHMuXG4gKi8gKGUsIHQpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfcXVlcnlDb2xsZWN0aW9uR3JvdXAoZSkge1xuICAgIHJldHVybiBlLmNvbGxlY3Rpb25Hcm91cCB8fCAoZS5wYXRoLmxlbmd0aCAlIDIgPT0gMSA/IGUucGF0aC5sYXN0U2VnbWVudCgpIDogZS5wYXRoLmdldChlLnBhdGgubGVuZ3RoIC0gMikpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgY29tcGFyYXRvciBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbXBhcmUgdHdvIGRvY3VtZW50c1xuICogYmFzZWQgb24gdGhlIFF1ZXJ5J3Mgb3JkZXJpbmcgY29uc3RyYWludC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfbmV3UXVlcnlDb21wYXJhdG9yKGUpIHtcbiAgICByZXR1cm4gKHQsIG4pID0+IHtcbiAgICAgICAgbGV0IHIgPSAhMTtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIF9fUFJJVkFURV9xdWVyeU5vcm1hbGl6ZWRPcmRlckJ5KGUpKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gX19QUklWQVRFX2NvbXBhcmVEb2NzKGksIHQsIG4pO1xuICAgICAgICAgICAgaWYgKDAgIT09IGUpIHJldHVybiBlO1xuICAgICAgICAgICAgciA9IHIgfHwgaS5maWVsZC5pc0tleUZpZWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2NvbXBhcmVEb2NzKGUsIHQsIG4pIHtcbiAgICBjb25zdCByID0gZS5maWVsZC5pc0tleUZpZWxkKCkgPyBEb2N1bWVudEtleS5jb21wYXJhdG9yKHQua2V5LCBuLmtleSkgOiBmdW5jdGlvbiBfX1BSSVZBVEVfY29tcGFyZURvY3VtZW50c0J5RmllbGQoZSwgdCwgbikge1xuICAgICAgICBjb25zdCByID0gdC5kYXRhLmZpZWxkKGUpLCBpID0gbi5kYXRhLmZpZWxkKGUpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gciAmJiBudWxsICE9PSBpID8gX19QUklWQVRFX3ZhbHVlQ29tcGFyZShyLCBpKSA6IGZhaWwoKTtcbiAgICB9KGUuZmllbGQsIHQsIG4pO1xuICAgIHN3aXRjaCAoZS5kaXIpIHtcbiAgICAgIGNhc2UgXCJhc2NcIiAvKiBEaXJlY3Rpb24uQVNDRU5ESU5HICovIDpcbiAgICAgICAgcmV0dXJuIHI7XG5cbiAgICAgIGNhc2UgXCJkZXNjXCIgLyogRGlyZWN0aW9uLkRFU0NFTkRJTkcgKi8gOlxuICAgICAgICByZXR1cm4gLTEgKiByO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFpbCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBtYXAgaW1wbGVtZW50YXRpb24gdGhhdCB1c2VzIG9iamVjdHMgYXMga2V5cy4gT2JqZWN0cyBtdXN0IGhhdmUgYW5cbiAqIGFzc29jaWF0ZWQgZXF1YWxzIGZ1bmN0aW9uIGFuZCBtdXN0IGJlIGltbXV0YWJsZS4gRW50cmllcyBpbiB0aGUgbWFwIGFyZVxuICogc3RvcmVkIHRvZ2V0aGVyIHdpdGggdGhlIGtleSBiZWluZyBwcm9kdWNlZCBmcm9tIHRoZSBtYXBLZXlGbi4gVGhpcyBtYXBcbiAqIGF1dG9tYXRpY2FsbHkgaGFuZGxlcyBjb2xsaXNpb25zIG9mIGtleXMuXG4gKi8gY2xhc3MgT2JqZWN0TWFwIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMubWFwS2V5Rm4gPSBlLCB0aGlzLmVxdWFsc0ZuID0gdCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaW5uZXIgbWFwIGZvciBhIGtleS92YWx1ZSBwYWlyLiBEdWUgdG8gdGhlIHBvc3NpYmlsaXR5IG9mIGNvbGxpc2lvbnMgd2VcbiAgICAgICAgICoga2VlcCBhIGxpc3Qgb2YgZW50cmllcyB0aGF0IHdlIGRvIGEgbGluZWFyIHNlYXJjaCB0aHJvdWdoIHRvIGZpbmQgYW4gYWN0dWFsXG4gICAgICAgICAqIG1hdGNoLiBOb3RlIHRoYXQgY29sbGlzaW9ucyBzaG91bGQgYmUgcmFyZSwgc28gd2Ugc3RpbGwgZXhwZWN0IG5lYXJcbiAgICAgICAgICogY29uc3RhbnQgdGltZSBsb29rdXBzIGluIHByYWN0aWNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbm5lciA9IHt9LCBcbiAgICAgICAgLyoqIFRoZSBudW1iZXIgb2YgZW50cmllcyBzdG9yZWQgaW4gdGhlIG1hcCAqL1xuICAgICAgICB0aGlzLmlubmVyU2l6ZSA9IDA7XG4gICAgfVxuICAgIC8qKiBHZXQgYSB2YWx1ZSBmb3IgdGhpcyBrZXksIG9yIHVuZGVmaW5lZCBpZiBpdCBkb2VzIG5vdCBleGlzdC4gKi8gICAgZ2V0KGUpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMubWFwS2V5Rm4oZSksIG4gPSB0aGlzLmlubmVyW3RdO1xuICAgICAgICBpZiAodm9pZCAwICE9PSBuKSBmb3IgKGNvbnN0IFt0LCByXSBvZiBuKSBpZiAodGhpcy5lcXVhbHNGbih0LCBlKSkgcmV0dXJuIHI7XG4gICAgfVxuICAgIGhhcyhlKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMuZ2V0KGUpO1xuICAgIH1cbiAgICAvKiogUHV0IHRoaXMga2V5IGFuZCB2YWx1ZSBpbiB0aGUgbWFwLiAqLyAgICBzZXQoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5tYXBLZXlGbihlKSwgciA9IHRoaXMuaW5uZXJbbl07XG4gICAgICAgIGlmICh2b2lkIDAgPT09IHIpIHJldHVybiB0aGlzLmlubmVyW25dID0gWyBbIGUsIHQgXSBdLCB2b2lkIHRoaXMuaW5uZXJTaXplKys7XG4gICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgci5sZW5ndGg7IG4rKykgaWYgKHRoaXMuZXF1YWxzRm4ocltuXVswXSwgZSkpIFxuICAgICAgICAvLyBUaGlzIGlzIHVwZGF0aW5nIGFuIGV4aXN0aW5nIGVudHJ5IGFuZCBkb2VzIG5vdCBpbmNyZWFzZSBgaW5uZXJTaXplYC5cbiAgICAgICAgcmV0dXJuIHZvaWQgKHJbbl0gPSBbIGUsIHQgXSk7XG4gICAgICAgIHIucHVzaChbIGUsIHQgXSksIHRoaXMuaW5uZXJTaXplKys7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGlzIGtleSBmcm9tIHRoZSBtYXAuIFJldHVybnMgYSBib29sZWFuIGlmIGFueXRoaW5nIHdhcyBkZWxldGVkLlxuICAgICAqLyAgICBkZWxldGUoZSkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5tYXBLZXlGbihlKSwgbiA9IHRoaXMuaW5uZXJbdF07XG4gICAgICAgIGlmICh2b2lkIDAgPT09IG4pIHJldHVybiAhMTtcbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCBuLmxlbmd0aDsgcisrKSBpZiAodGhpcy5lcXVhbHNGbihuW3JdWzBdLCBlKSkgcmV0dXJuIDEgPT09IG4ubGVuZ3RoID8gZGVsZXRlIHRoaXMuaW5uZXJbdF0gOiBuLnNwbGljZShyLCAxKSwgXG4gICAgICAgIHRoaXMuaW5uZXJTaXplLS0sICEwO1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIGZvckVhY2goZSkge1xuICAgICAgICBmb3JFYWNoKHRoaXMuaW5uZXIsICgodCwgbikgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbdCwgcl0gb2YgbikgZSh0LCByKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gaXNFbXB0eSh0aGlzLmlubmVyKTtcbiAgICB9XG4gICAgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXJTaXplO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3Qgc2UgPSBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpO1xuXG5mdW5jdGlvbiBfX1BSSVZBVEVfbXV0YWJsZURvY3VtZW50TWFwKCkge1xuICAgIHJldHVybiBzZTtcbn1cblxuY29uc3Qgb2UgPSBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpO1xuXG5mdW5jdGlvbiBkb2N1bWVudE1hcCguLi5lKSB7XG4gICAgbGV0IHQgPSBvZTtcbiAgICBmb3IgKGNvbnN0IG4gb2YgZSkgdCA9IHQuaW5zZXJ0KG4ua2V5LCBuKTtcbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2NvbnZlcnRPdmVybGF5ZWREb2N1bWVudE1hcFRvRG9jdW1lbnRNYXAoZSkge1xuICAgIGxldCB0ID0gb2U7XG4gICAgcmV0dXJuIGUuZm9yRWFjaCgoKGUsIG4pID0+IHQgPSB0Lmluc2VydChlLCBuLm92ZXJsYXllZERvY3VtZW50KSkpLCB0O1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfbmV3T3ZlcmxheU1hcCgpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX25ld0RvY3VtZW50S2V5TWFwKCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9uZXdNdXRhdGlvbk1hcCgpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX25ld0RvY3VtZW50S2V5TWFwKCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9uZXdEb2N1bWVudEtleU1hcCgpIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdE1hcCgoZSA9PiBlLnRvU3RyaW5nKCkpLCAoKGUsIHQpID0+IGUuaXNFcXVhbCh0KSkpO1xufVxuXG5jb25zdCBfZSA9IG5ldyBTb3J0ZWRNYXAoRG9jdW1lbnRLZXkuY29tcGFyYXRvcik7XG5cbmNvbnN0IGFlID0gbmV3IFNvcnRlZFNldChEb2N1bWVudEtleS5jb21wYXJhdG9yKTtcblxuZnVuY3Rpb24gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KC4uLmUpIHtcbiAgICBsZXQgdCA9IGFlO1xuICAgIGZvciAoY29uc3QgbiBvZiBlKSB0ID0gdC5hZGQobik7XG4gICAgcmV0dXJuIHQ7XG59XG5cbmNvbnN0IHVlID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcik7XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV90YXJnZXRJZFNldCgpIHtcbiAgICByZXR1cm4gdWU7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJldHVybnMgYW4gRG91YmxlVmFsdWUgZm9yIGB2YWx1ZWAgdGhhdCBpcyBlbmNvZGVkIGJhc2VkIHRoZSBzZXJpYWxpemVyJ3NcbiAqIGB1c2VQcm90bzNKc29uYCBzZXR0aW5nLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV90b0RvdWJsZShlLCB0KSB7XG4gICAgaWYgKGUudXNlUHJvdG8zSnNvbikge1xuICAgICAgICBpZiAoaXNOYU4odCkpIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCJOYU5cIlxuICAgICAgICB9O1xuICAgICAgICBpZiAodCA9PT0gMSAvIDApIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCJJbmZpbml0eVwiXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0ID09PSAtMSAvIDApIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCItSW5maW5pdHlcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkb3VibGVWYWx1ZTogX19QUklWQVRFX2lzTmVnYXRpdmVaZXJvKHQpID8gXCItMFwiIDogdFxuICAgIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBJbnRlZ2VyVmFsdWUgZm9yIGB2YWx1ZWAuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX3RvSW50ZWdlcihlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW50ZWdlclZhbHVlOiBcIlwiICsgZVxuICAgIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHZhbHVlIGZvciBhIG51bWJlciB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG8gYSBwcm90by5cbiAqIFRoZSByZXR1cm4gdmFsdWUgaXMgYW4gSW50ZWdlclZhbHVlIGlmIGl0IGNhbiBzYWZlbHkgcmVwcmVzZW50IHRoZSB2YWx1ZSxcbiAqIG90aGVyd2lzZSBhIERvdWJsZVZhbHVlIGlzIHJldHVybmVkLlxuICovIGZ1bmN0aW9uIHRvTnVtYmVyKGUsIHQpIHtcbiAgICByZXR1cm4gaXNTYWZlSW50ZWdlcih0KSA/IF9fUFJJVkFURV90b0ludGVnZXIodCkgOiBfX1BSSVZBVEVfdG9Eb3VibGUoZSwgdCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogVXNlZCB0byByZXByZXNlbnQgYSBmaWVsZCB0cmFuc2Zvcm0gb24gYSBtdXRhdGlvbi4gKi8gY2xhc3MgVHJhbnNmb3JtT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHN0cnVjdHVyYWwgdHlwZSBvZiBgVHJhbnNmb3JtT3BlcmF0aW9uYCBpcyB1bmlxdWUuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzU0NTFcbiAgICAgICAgdGhpcy5fID0gdm9pZCAwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbG9jYWwgdHJhbnNmb3JtIHJlc3VsdCBhZ2FpbnN0IHRoZSBwcm92aWRlZCBgcHJldmlvdXNWYWx1ZWAsXG4gKiBvcHRpb25hbGx5IHVzaW5nIHRoZSBwcm92aWRlZCBsb2NhbFdyaXRlVGltZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfYXBwbHlUcmFuc2Zvcm1PcGVyYXRpb25Ub0xvY2FsVmlldyhlLCB0LCBuKSB7XG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtID8gZnVuY3Rpb24gc2VydmVyVGltZXN0YW1wJDEoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0ge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgX190eXBlX186IHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nVmFsdWU6IFwic2VydmVyX3RpbWVzdGFtcFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfX2xvY2FsX3dyaXRlX3RpbWVfXzoge1xuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXBWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kczogZS5zZWNvbmRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFub3M6IGUubmFub3NlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIGF2b2lkIHN0b3JpbmcgZGVlcGx5IG5lc3RlZCBzZXJ2ZXIgdGltZXN0YW1wIG1hcCB2YWx1ZXNcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBuZXZlciB1c2UgdGhlIGludGVybWVkaWF0ZSBcInByZXZpb3VzIHZhbHVlc1wiLlxuICAgICAgICAvLyBGb3IgZXhhbXBsZTpcbiAgICAgICAgLy8gcHJldmlvdXM6IDQyTCwgYWRkOiB0MSwgcmVzdWx0OiB0MSAtPiA0MkxcbiAgICAgICAgLy8gcHJldmlvdXM6IHQxLCAgYWRkOiB0MiwgcmVzdWx0OiB0MiAtPiA0MkwgKE5PVCB0MiAtPiB0MSAtPiA0MkwpXG4gICAgICAgIC8vIHByZXZpb3VzOiB0MiwgIGFkZDogdDMsIHJlc3VsdDogdDMgLT4gNDJMIChOT1QgdDMgLT4gdDIgLT4gdDEgLT4gNDJMKVxuICAgICAgICAvLyBgZ2V0UHJldmlvdXNWYWx1ZWAgcmVjdXJzaXZlbHkgdHJhdmVyc2VzIHNlcnZlciB0aW1lc3RhbXBzIHRvIGZpbmQgdGhlXG4gICAgICAgIC8vIGxlYXN0IHJlY2VudCBWYWx1ZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gdCAmJiBfX1BSSVZBVEVfaXNTZXJ2ZXJUaW1lc3RhbXAodCkgJiYgKHQgPSBfX1BSSVZBVEVfZ2V0UHJldmlvdXNWYWx1ZSh0KSksIFxuICAgICAgICB0ICYmIChuLmZpZWxkcy5fX3ByZXZpb3VzX3ZhbHVlX18gPSB0KSwge1xuICAgICAgICAgICAgbWFwVmFsdWU6IG5cbiAgICAgICAgfTtcbiAgICB9KG4sIHQpIDogZSBpbnN0YW5jZW9mIF9fUFJJVkFURV9BcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uID8gX19QUklWQVRFX2FwcGx5QXJyYXlVbmlvblRyYW5zZm9ybU9wZXJhdGlvbihlLCB0KSA6IGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfQXJyYXlSZW1vdmVUcmFuc2Zvcm1PcGVyYXRpb24gPyBfX1BSSVZBVEVfYXBwbHlBcnJheVJlbW92ZVRyYW5zZm9ybU9wZXJhdGlvbihlLCB0KSA6IGZ1bmN0aW9uIF9fUFJJVkFURV9hcHBseU51bWVyaWNJbmNyZW1lbnRUcmFuc2Zvcm1PcGVyYXRpb25Ub0xvY2FsVmlldyhlLCB0KSB7XG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogU2luY2UgSmF2YVNjcmlwdCdzIGludGVnZXIgYXJpdGhtZXRpYyBpcyBsaW1pdGVkIHRvIDUzIGJpdFxuICAgICAgICAvLyBwcmVjaXNpb24gYW5kIHJlc29sdmVzIG92ZXJmbG93cyBieSByZWR1Y2luZyBwcmVjaXNpb24sIHdlIGRvIG5vdFxuICAgICAgICAvLyBtYW51YWxseSBjYXAgb3ZlcmZsb3dzIGF0IDJeNjMuXG4gICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfY29tcHV0ZVRyYW5zZm9ybU9wZXJhdGlvbkJhc2VWYWx1ZShlLCB0KSwgciA9IGFzTnVtYmVyKG4pICsgYXNOdW1iZXIoZS5QZSk7XG4gICAgICAgIHJldHVybiBpc0ludGVnZXIobikgJiYgaXNJbnRlZ2VyKGUuUGUpID8gX19QUklWQVRFX3RvSW50ZWdlcihyKSA6IF9fUFJJVkFURV90b0RvdWJsZShlLnNlcmlhbGl6ZXIsIHIpO1xuICAgIH0oZSwgdCk7XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBmaW5hbCB0cmFuc2Zvcm0gcmVzdWx0IGFmdGVyIHRoZSB0cmFuc2Zvcm0gaGFzIGJlZW4gYWNrbm93bGVkZ2VkXG4gKiBieSB0aGUgc2VydmVyLCBwb3RlbnRpYWxseSB1c2luZyB0aGUgc2VydmVyLXByb3ZpZGVkIHRyYW5zZm9ybVJlc3VsdC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfYXBwbHlUcmFuc2Zvcm1PcGVyYXRpb25Ub1JlbW90ZURvY3VtZW50KGUsIHQsIG4pIHtcbiAgICAvLyBUaGUgc2VydmVyIGp1c3Qgc2VuZHMgbnVsbCBhcyB0aGUgdHJhbnNmb3JtIHJlc3VsdCBmb3IgYXJyYXkgb3BlcmF0aW9ucyxcbiAgICAvLyBzbyB3ZSBoYXZlIHRvIGNhbGN1bGF0ZSBhIHJlc3VsdCB0aGUgc2FtZSBhcyB3ZSBkbyBmb3IgbG9jYWxcbiAgICAvLyBhcHBsaWNhdGlvbnMuXG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfQXJyYXlVbmlvblRyYW5zZm9ybU9wZXJhdGlvbiA/IF9fUFJJVkFURV9hcHBseUFycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24oZSwgdCkgOiBlIGluc3RhbmNlb2YgX19QUklWQVRFX0FycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uID8gX19QUklWQVRFX2FwcGx5QXJyYXlSZW1vdmVUcmFuc2Zvcm1PcGVyYXRpb24oZSwgdCkgOiBuO1xufVxuXG4vKipcbiAqIElmIHRoaXMgdHJhbnNmb3JtIG9wZXJhdGlvbiBpcyBub3QgaWRlbXBvdGVudCwgcmV0dXJucyB0aGUgYmFzZSB2YWx1ZSB0b1xuICogcGVyc2lzdCBmb3IgdGhpcyB0cmFuc2Zvcm0uIElmIGEgYmFzZSB2YWx1ZSBpcyByZXR1cm5lZCwgdGhlIHRyYW5zZm9ybVxuICogb3BlcmF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIHRvIHRoaXMgYmFzZSB2YWx1ZSwgZXZlbiBpZiBkb2N1bWVudCBoYXNcbiAqIGFscmVhZHkgYmVlbiB1cGRhdGVkLlxuICpcbiAqIEJhc2UgdmFsdWVzIHByb3ZpZGUgY29uc2lzdGVudCBiZWhhdmlvciBmb3Igbm9uLWlkZW1wb3RlbnQgdHJhbnNmb3JtcyBhbmRcbiAqIGFsbG93IHVzIHRvIHJldHVybiB0aGUgc2FtZSBsYXRlbmN5LWNvbXBlbnNhdGVkIHZhbHVlIGV2ZW4gaWYgdGhlIGJhY2tlbmRcbiAqIGhhcyBhbHJlYWR5IGFwcGxpZWQgdGhlIHRyYW5zZm9ybSBvcGVyYXRpb24uIFRoZSBiYXNlIHZhbHVlIGlzIG51bGwgZm9yXG4gKiBpZGVtcG90ZW50IHRyYW5zZm9ybXMsIGFzIHRoZXkgY2FuIGJlIHJlLXBsYXllZCBldmVuIGlmIHRoZSBiYWNrZW5kIGhhc1xuICogYWxyZWFkeSBhcHBsaWVkIHRoZW0uXG4gKlxuICogQHJldHVybnMgYSBiYXNlIHZhbHVlIHRvIHN0b3JlIGFsb25nIHdpdGggdGhlIG11dGF0aW9uLCBvciBudWxsIGZvclxuICogaWRlbXBvdGVudCB0cmFuc2Zvcm1zLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9jb21wdXRlVHJhbnNmb3JtT3BlcmF0aW9uQmFzZVZhbHVlKGUsIHQpIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIF9fUFJJVkFURV9OdW1lcmljSW5jcmVtZW50VHJhbnNmb3JtT3BlcmF0aW9uID8gXG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGVpdGhlciBhbiBJbnRlZ2VyVmFsdWUgb3IgYSBEb3VibGVWYWx1ZS4gKi9cbiAgICBmdW5jdGlvbiBfX1BSSVZBVEVfaXNOdW1iZXIoZSkge1xuICAgICAgICByZXR1cm4gaXNJbnRlZ2VyKGUpIHx8IGZ1bmN0aW9uIF9fUFJJVkFURV9pc0RvdWJsZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gISFlICYmIFwiZG91YmxlVmFsdWVcIiBpbiBlO1xuICAgICAgICB9KGUpO1xuICAgIH0odCkgPyB0IDoge1xuICAgICAgICBpbnRlZ2VyVmFsdWU6IDBcbiAgICB9IDogbnVsbDtcbn1cblxuLyoqIFRyYW5zZm9ybXMgYSB2YWx1ZSBpbnRvIGEgc2VydmVyLWdlbmVyYXRlZCB0aW1lc3RhbXAuICovXG5jbGFzcyBfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtIGV4dGVuZHMgVHJhbnNmb3JtT3BlcmF0aW9uIHt9XG5cbi8qKiBUcmFuc2Zvcm1zIGFuIGFycmF5IHZhbHVlIHZpYSBhIHVuaW9uIG9wZXJhdGlvbi4gKi8gY2xhc3MgX19QUklWQVRFX0FycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24gZXh0ZW5kcyBUcmFuc2Zvcm1PcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5lbGVtZW50cyA9IGU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfYXBwbHlBcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2NvZXJjZWRGaWVsZFZhbHVlc0FycmF5KHQpO1xuICAgIGZvciAoY29uc3QgdCBvZiBlLmVsZW1lbnRzKSBuLnNvbWUoKGUgPT4gX19QUklWQVRFX3ZhbHVlRXF1YWxzKGUsIHQpKSkgfHwgbi5wdXNoKHQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFycmF5VmFsdWU6IHtcbiAgICAgICAgICAgIHZhbHVlczogblxuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqIFRyYW5zZm9ybXMgYW4gYXJyYXkgdmFsdWUgdmlhIGEgcmVtb3ZlIG9wZXJhdGlvbi4gKi8gY2xhc3MgX19QUklWQVRFX0FycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uIGV4dGVuZHMgVHJhbnNmb3JtT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuZWxlbWVudHMgPSBlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2FwcGx5QXJyYXlSZW1vdmVUcmFuc2Zvcm1PcGVyYXRpb24oZSwgdCkge1xuICAgIGxldCBuID0gX19QUklWQVRFX2NvZXJjZWRGaWVsZFZhbHVlc0FycmF5KHQpO1xuICAgIGZvciAoY29uc3QgdCBvZiBlLmVsZW1lbnRzKSBuID0gbi5maWx0ZXIoKGUgPT4gIV9fUFJJVkFURV92YWx1ZUVxdWFscyhlLCB0KSkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFycmF5VmFsdWU6IHtcbiAgICAgICAgICAgIHZhbHVlczogblxuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBiYWNrZW5kIHNlbWFudGljcyBmb3IgbG9jYWxseSBjb21wdXRlZCBOVU1FUklDX0FERCAoaW5jcmVtZW50KVxuICogdHJhbnNmb3Jtcy4gQ29udmVydHMgYWxsIGZpZWxkIHZhbHVlcyB0byBpbnRlZ2VycyBvciBkb3VibGVzLCBidXQgdW5saWtlIHRoZVxuICogYmFja2VuZCBkb2VzIG5vdCBjYXAgaW50ZWdlciB2YWx1ZXMgYXQgMl42My4gSW5zdGVhZCwgSmF2YVNjcmlwdCBudW1iZXJcbiAqIGFyaXRobWV0aWMgaXMgdXNlZCBhbmQgcHJlY2lzaW9uIGxvc3MgY2FuIG9jY3VyIGZvciB2YWx1ZXMgZ3JlYXRlciB0aGFuIDJeNTMuXG4gKi8gY2xhc3MgX19QUklWQVRFX051bWVyaWNJbmNyZW1lbnRUcmFuc2Zvcm1PcGVyYXRpb24gZXh0ZW5kcyBUcmFuc2Zvcm1PcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5zZXJpYWxpemVyID0gZSwgdGhpcy5QZSA9IHQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhc051bWJlcihlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9ub3JtYWxpemVOdW1iZXIoZS5pbnRlZ2VyVmFsdWUgfHwgZS5kb3VibGVWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9jb2VyY2VkRmllbGRWYWx1ZXNBcnJheShlKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoZSkgJiYgZS5hcnJheVZhbHVlLnZhbHVlcyA/IGUuYXJyYXlWYWx1ZS52YWx1ZXMuc2xpY2UoKSA6IFtdO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIEEgZmllbGQgcGF0aCBhbmQgdGhlIFRyYW5zZm9ybU9wZXJhdGlvbiB0byBwZXJmb3JtIHVwb24gaXQuICovIGNsYXNzIEZpZWxkVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMuZmllbGQgPSBlLCB0aGlzLnRyYW5zZm9ybSA9IHQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZmllbGRUcmFuc2Zvcm1FcXVhbHMoZSwgdCkge1xuICAgIHJldHVybiBlLmZpZWxkLmlzRXF1YWwodC5maWVsZCkgJiYgZnVuY3Rpb24gX19QUklWQVRFX3RyYW5zZm9ybU9wZXJhdGlvbkVxdWFscyhlLCB0KSB7XG4gICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgX19QUklWQVRFX0FycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24gJiYgdCBpbnN0YW5jZW9mIF9fUFJJVkFURV9BcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uIHx8IGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfQXJyYXlSZW1vdmVUcmFuc2Zvcm1PcGVyYXRpb24gJiYgdCBpbnN0YW5jZW9mIF9fUFJJVkFURV9BcnJheVJlbW92ZVRyYW5zZm9ybU9wZXJhdGlvbiA/IF9fUFJJVkFURV9hcnJheUVxdWFscyhlLmVsZW1lbnRzLCB0LmVsZW1lbnRzLCBfX1BSSVZBVEVfdmFsdWVFcXVhbHMpIDogZSBpbnN0YW5jZW9mIF9fUFJJVkFURV9OdW1lcmljSW5jcmVtZW50VHJhbnNmb3JtT3BlcmF0aW9uICYmIHQgaW5zdGFuY2VvZiBfX1BSSVZBVEVfTnVtZXJpY0luY3JlbWVudFRyYW5zZm9ybU9wZXJhdGlvbiA/IF9fUFJJVkFURV92YWx1ZUVxdWFscyhlLlBlLCB0LlBlKSA6IGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtICYmIHQgaW5zdGFuY2VvZiBfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtO1xuICAgIH0oZS50cmFuc2Zvcm0sIHQudHJhbnNmb3JtKTtcbn1cblxuLyoqIFRoZSByZXN1bHQgb2Ygc3VjY2Vzc2Z1bGx5IGFwcGx5aW5nIGEgbXV0YXRpb24gdG8gdGhlIGJhY2tlbmQuICovXG5jbGFzcyBNdXRhdGlvblJlc3VsdCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIHZlcnNpb24gYXQgd2hpY2ggdGhlIG11dGF0aW9uIHdhcyBjb21taXR0ZWQ6XG4gICAgICpcbiAgICAgKiAtIEZvciBtb3N0IG9wZXJhdGlvbnMsIHRoaXMgaXMgdGhlIHVwZGF0ZVRpbWUgaW4gdGhlIFdyaXRlUmVzdWx0LlxuICAgICAqIC0gRm9yIGRlbGV0ZXMsIHRoZSBjb21taXRUaW1lIG9mIHRoZSBXcml0ZVJlc3BvbnNlIChiZWNhdXNlIGRlbGV0ZXMgYXJlXG4gICAgICogICBub3Qgc3RvcmVkIGFuZCBoYXZlIG5vIHVwZGF0ZVRpbWUpLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoZXNlIHZlcnNpb25zIGNhbiBiZSBkaWZmZXJlbnQ6IE5vLW9wIHdyaXRlcyB3aWxsIG5vdCBjaGFuZ2VcbiAgICAgKiB0aGUgdXBkYXRlVGltZSBldmVuIHRob3VnaCB0aGUgY29tbWl0VGltZSBhZHZhbmNlcy5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0aW5nIGZpZWxkcyByZXR1cm5lZCBmcm9tIHRoZSBiYWNrZW5kIGFmdGVyIGEgbXV0YXRpb25cbiAgICAgKiBjb250YWluaW5nIGZpZWxkIHRyYW5zZm9ybXMgaGFzIGJlZW4gY29tbWl0dGVkLiBDb250YWlucyBvbmUgRmllbGRWYWx1ZVxuICAgICAqIGZvciBlYWNoIEZpZWxkVHJhbnNmb3JtIHRoYXQgd2FzIGluIHRoZSBtdXRhdGlvbi5cbiAgICAgKlxuICAgICAqIFdpbGwgYmUgZW1wdHkgaWYgdGhlIG11dGF0aW9uIGRpZCBub3QgY29udGFpbiBhbnkgZmllbGQgdHJhbnNmb3Jtcy5cbiAgICAgKi9cbiAgICB0KSB7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IGUsIHRoaXMudHJhbnNmb3JtUmVzdWx0cyA9IHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwcmVjb25kaXRpb24gZm9yIGEgbXV0YXRpb24uIFRoaXMgZm9sbG93cyB0aGUgbW9kZWwgdGhhdCB0aGVcbiAqIGJhY2tlbmQgYWNjZXB0cyB3aXRoIHRoZSBzcGVjaWFsIGNhc2Ugb2YgYW4gZXhwbGljaXQgXCJlbXB0eVwiIHByZWNvbmRpdGlvblxuICogKG1lYW5pbmcgbm8gcHJlY29uZGl0aW9uKS5cbiAqLyBjbGFzcyBQcmVjb25kaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lID0gZSwgdGhpcy5leGlzdHMgPSB0O1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBlbXB0eSBQcmVjb25kaXRpb24uICovICAgIHN0YXRpYyBub25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByZWNvbmRpdGlvbjtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgUHJlY29uZGl0aW9uIHdpdGggYW4gZXhpc3RzIGZsYWcuICovICAgIHN0YXRpYyBleGlzdHMoZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByZWNvbmRpdGlvbih2b2lkIDAsIGUpO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBQcmVjb25kaXRpb24gYmFzZWQgb24gYSB2ZXJzaW9uIGEgZG9jdW1lbnQgZXhpc3RzIGF0LiAqLyAgICBzdGF0aWMgdXBkYXRlVGltZShlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJlY29uZGl0aW9uKGUpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB3aGV0aGVyIHRoaXMgUHJlY29uZGl0aW9uIGlzIGVtcHR5LiAqLyAgICBnZXQgaXNOb25lKCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0aGlzLnVwZGF0ZVRpbWUgJiYgdm9pZCAwID09PSB0aGlzLmV4aXN0cztcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4aXN0cyA9PT0gZS5leGlzdHMgJiYgKHRoaXMudXBkYXRlVGltZSA/ICEhZS51cGRhdGVUaW1lICYmIHRoaXMudXBkYXRlVGltZS5pc0VxdWFsKGUudXBkYXRlVGltZSkgOiAhZS51cGRhdGVUaW1lKTtcbiAgICB9XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByZWNvbmRpdGlvbnMgaXMgdmFsaWQgZm9yIHRoZSBnaXZlbiBkb2N1bWVudC4gKi8gZnVuY3Rpb24gX19QUklWQVRFX3ByZWNvbmRpdGlvbklzVmFsaWRGb3JEb2N1bWVudChlLCB0KSB7XG4gICAgcmV0dXJuIHZvaWQgMCAhPT0gZS51cGRhdGVUaW1lID8gdC5pc0ZvdW5kRG9jdW1lbnQoKSAmJiB0LnZlcnNpb24uaXNFcXVhbChlLnVwZGF0ZVRpbWUpIDogdm9pZCAwID09PSBlLmV4aXN0cyB8fCBlLmV4aXN0cyA9PT0gdC5pc0ZvdW5kRG9jdW1lbnQoKTtcbn1cblxuLyoqXG4gKiBBIG11dGF0aW9uIGRlc2NyaWJlcyBhIHNlbGYtY29udGFpbmVkIGNoYW5nZSB0byBhIGRvY3VtZW50LiBNdXRhdGlvbnMgY2FuXG4gKiBjcmVhdGUsIHJlcGxhY2UsIGRlbGV0ZSwgYW5kIHVwZGF0ZSBzdWJzZXRzIG9mIGRvY3VtZW50cy5cbiAqXG4gKiBNdXRhdGlvbnMgbm90IG9ubHkgYWN0IG9uIHRoZSB2YWx1ZSBvZiB0aGUgZG9jdW1lbnQgYnV0IGFsc28gaXRzIHZlcnNpb24uXG4gKlxuICogRm9yIGxvY2FsIG11dGF0aW9ucyAobXV0YXRpb25zIHRoYXQgaGF2ZW4ndCBiZWVuIGNvbW1pdHRlZCB5ZXQpLCB3ZSBwcmVzZXJ2ZVxuICogdGhlIGV4aXN0aW5nIHZlcnNpb24gZm9yIFNldCBhbmQgUGF0Y2ggbXV0YXRpb25zLiBGb3IgRGVsZXRlIG11dGF0aW9ucywgd2VcbiAqIHJlc2V0IHRoZSB2ZXJzaW9uIHRvIDAuXG4gKlxuICogSGVyZSdzIHRoZSBleHBlY3RlZCB0cmFuc2l0aW9uIHRhYmxlLlxuICpcbiAqIE1VVEFUSU9OICAgICAgICAgICBBUFBMSUVEIFRPICAgICAgICAgICAgUkVTVUxUUyBJTlxuICpcbiAqIFNldE11dGF0aW9uICAgICAgICBEb2N1bWVudCh2MykgICAgICAgICAgRG9jdW1lbnQodjMpXG4gKiBTZXRNdXRhdGlvbiAgICAgICAgTm9Eb2N1bWVudCh2MykgICAgICAgIERvY3VtZW50KHYwKVxuICogU2V0TXV0YXRpb24gICAgICAgIEludmFsaWREb2N1bWVudCh2MCkgICBEb2N1bWVudCh2MClcbiAqIFBhdGNoTXV0YXRpb24gICAgICBEb2N1bWVudCh2MykgICAgICAgICAgRG9jdW1lbnQodjMpXG4gKiBQYXRjaE11dGF0aW9uICAgICAgTm9Eb2N1bWVudCh2MykgICAgICAgIE5vRG9jdW1lbnQodjMpXG4gKiBQYXRjaE11dGF0aW9uICAgICAgSW52YWxpZERvY3VtZW50KHYwKSAgIFVua25vd25Eb2N1bWVudCh2MylcbiAqIERlbGV0ZU11dGF0aW9uICAgICBEb2N1bWVudCh2MykgICAgICAgICAgTm9Eb2N1bWVudCh2MClcbiAqIERlbGV0ZU11dGF0aW9uICAgICBOb0RvY3VtZW50KHYzKSAgICAgICAgTm9Eb2N1bWVudCh2MClcbiAqIERlbGV0ZU11dGF0aW9uICAgICBJbnZhbGlkRG9jdW1lbnQodjApICAgTm9Eb2N1bWVudCh2MClcbiAqXG4gKiBGb3IgYWNrbm93bGVkZ2VkIG11dGF0aW9ucywgd2UgdXNlIHRoZSB1cGRhdGVUaW1lIG9mIHRoZSBXcml0ZVJlc3BvbnNlIGFzXG4gKiB0aGUgcmVzdWx0aW5nIHZlcnNpb24gZm9yIFNldCBhbmQgUGF0Y2ggbXV0YXRpb25zLiBBcyBkZWxldGVzIGhhdmUgbm9cbiAqIGV4cGxpY2l0IHVwZGF0ZSB0aW1lLCB3ZSB1c2UgdGhlIGNvbW1pdFRpbWUgb2YgdGhlIFdyaXRlUmVzcG9uc2UgZm9yXG4gKiBEZWxldGUgbXV0YXRpb25zLlxuICpcbiAqIElmIGEgbXV0YXRpb24gaXMgYWNrbm93bGVkZ2VkIGJ5IHRoZSBiYWNrZW5kIGJ1dCBmYWlscyB0aGUgcHJlY29uZGl0aW9uIGNoZWNrXG4gKiBsb2NhbGx5LCB3ZSB0cmFuc2l0aW9uIHRvIGFuIGBVbmtub3duRG9jdW1lbnRgIGFuZCByZWx5IG9uIFdhdGNoIHRvIHNlbmQgdXNcbiAqIHRoZSB1cGRhdGVkIHZlcnNpb24uXG4gKlxuICogRmllbGQgdHJhbnNmb3JtcyBhcmUgdXNlZCBvbmx5IHdpdGggUGF0Y2ggYW5kIFNldCBNdXRhdGlvbnMuIFdlIHVzZSB0aGVcbiAqIGB1cGRhdGVUcmFuc2Zvcm1zYCBtZXNzYWdlIHRvIHN0b3JlIHRyYW5zZm9ybXMsIHJhdGhlciB0aGFuIHRoZSBgdHJhbnNmb3Jtc2BzXG4gKiBtZXNzYWdlcy5cbiAqXG4gKiAjIyBTdWJjbGFzc2luZyBOb3Rlc1xuICpcbiAqIEV2ZXJ5IHR5cGUgb2YgbXV0YXRpb24gbmVlZHMgdG8gaW1wbGVtZW50IGl0cyBvd24gYXBwbHlUb1JlbW90ZURvY3VtZW50KCkgYW5kXG4gKiBhcHBseVRvTG9jYWxWaWV3KCkgdG8gaW1wbGVtZW50IHRoZSBhY3R1YWwgYmVoYXZpb3Igb2YgYXBwbHlpbmcgdGhlIG11dGF0aW9uXG4gKiB0byBzb21lIHNvdXJjZSBkb2N1bWVudCAoc2VlIGBzZXRNdXRhdGlvbkFwcGx5VG9SZW1vdGVEb2N1bWVudCgpYCBmb3IgYW5cbiAqIGV4YW1wbGUpLlxuICovIGNsYXNzIE11dGF0aW9uIHt9XG5cbi8qKlxuICogQSB1dGlsaXR5IG1ldGhvZCB0byBjYWxjdWxhdGUgYSBgTXV0YXRpb25gIHJlcHJlc2VudGluZyB0aGUgb3ZlcmxheSBmcm9tIHRoZVxuICogZmluYWwgc3RhdGUgb2YgdGhlIGRvY3VtZW50LCBhbmQgYSBgRmllbGRNYXNrYCByZXByZXNlbnRpbmcgdGhlIGZpZWxkcyB0aGF0XG4gKiBhcmUgbXV0YXRlZCBieSB0aGUgbG9jYWwgbXV0YXRpb25zLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9jYWxjdWxhdGVPdmVybGF5TXV0YXRpb24oZSwgdCkge1xuICAgIGlmICghZS5oYXNMb2NhbE11dGF0aW9ucyB8fCB0ICYmIDAgPT09IHQuZmllbGRzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgLy8gbWFzayBpcyBudWxsIHdoZW4gc2V0cyBvciBkZWxldGVzIGFyZSBhcHBsaWVkIHRvIHRoZSBjdXJyZW50IGRvY3VtZW50LlxuICAgICAgICBpZiAobnVsbCA9PT0gdCkgcmV0dXJuIGUuaXNOb0RvY3VtZW50KCkgPyBuZXcgX19QUklWQVRFX0RlbGV0ZU11dGF0aW9uKGUua2V5LCBQcmVjb25kaXRpb24ubm9uZSgpKSA6IG5ldyBfX1BSSVZBVEVfU2V0TXV0YXRpb24oZS5rZXksIGUuZGF0YSwgUHJlY29uZGl0aW9uLm5vbmUoKSk7XG4gICAge1xuICAgICAgICBjb25zdCBuID0gZS5kYXRhLCByID0gT2JqZWN0VmFsdWUuZW1wdHkoKTtcbiAgICAgICAgbGV0IGkgPSBuZXcgU29ydGVkU2V0KEZpZWxkUGF0aCQxLmNvbXBhcmF0b3IpO1xuICAgICAgICBmb3IgKGxldCBlIG9mIHQuZmllbGRzKSBpZiAoIWkuaGFzKGUpKSB7XG4gICAgICAgICAgICBsZXQgdCA9IG4uZmllbGQoZSk7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgZGVsZXRpbmcgYSBuZXN0ZWQgZmllbGQsIHdlIHRha2UgdGhlIGltbWVkaWF0ZSBwYXJlbnQgYXNcbiAgICAgICAgICAgIC8vIHRoZSBtYXNrIHVzZWQgdG8gY29uc3RydWN0IHRoZSByZXN1bHRpbmcgbXV0YXRpb24uXG4gICAgICAgICAgICAvLyBKdXN0aWZpY2F0aW9uOiBOZXN0ZWQgZmllbGRzIGNhbiBjcmVhdGUgcGFyZW50IGZpZWxkcyBpbXBsaWNpdGx5LiBJZlxuICAgICAgICAgICAgLy8gb25seSBhIGxlYWYgZW50cnkgaXMgZGVsZXRlZCBpbiBsYXRlciBtdXRhdGlvbnMsIHRoZSBwYXJlbnQgZmllbGRcbiAgICAgICAgICAgIC8vIHNob3VsZCBzdGlsbCByZW1haW4sIGJ1dCB3ZSBtYXkgaGF2ZSBsb3N0IHRoaXMgaW5mb3JtYXRpb24uXG4gICAgICAgICAgICAvLyBDb25zaWRlciBtdXRhdGlvbiAoZm9vLmJhciAxKSwgdGhlbiBtdXRhdGlvbiAoZm9vLmJhciBkZWxldGUoKSkuXG4gICAgICAgICAgICAvLyBUaGlzIGxlYXZlcyB0aGUgZmluYWwgcmVzdWx0IChmb28sIHt9KS4gRGVzcGl0ZSB0aGUgZmFjdCB0aGF0IGBkb2NgXG4gICAgICAgICAgICAvLyBoYXMgdGhlIGNvcnJlY3QgcmVzdWx0LCBgZm9vYCBpcyBub3QgaW4gYG1hc2tgLCBhbmQgdGhlIHJlc3VsdGluZ1xuICAgICAgICAgICAgLy8gbXV0YXRpb24gd291bGQgbWlzcyBgZm9vYC5cbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IHQgJiYgZS5sZW5ndGggPiAxICYmIChlID0gZS5wb3BMYXN0KCksIHQgPSBuLmZpZWxkKGUpKSwgbnVsbCA9PT0gdCA/IHIuZGVsZXRlKGUpIDogci5zZXQoZSwgdCksIFxuICAgICAgICAgICAgaSA9IGkuYWRkKGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX1BhdGNoTXV0YXRpb24oZS5rZXksIHIsIG5ldyBGaWVsZE1hc2soaS50b0FycmF5KCkpLCBQcmVjb25kaXRpb24ubm9uZSgpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQXBwbGllcyB0aGlzIG11dGF0aW9uIHRvIHRoZSBnaXZlbiBkb2N1bWVudCBmb3IgdGhlIHB1cnBvc2VzIG9mIGNvbXB1dGluZyBhXG4gKiBuZXcgcmVtb3RlIGRvY3VtZW50LiBJZiB0aGUgaW5wdXQgZG9jdW1lbnQgZG9lc24ndCBtYXRjaCB0aGUgZXhwZWN0ZWQgc3RhdGVcbiAqIChlLmcuIGl0IGlzIGludmFsaWQgb3Igb3V0ZGF0ZWQpLCB0aGUgZG9jdW1lbnQgdHlwZSBtYXkgdHJhbnNpdGlvbiB0b1xuICogdW5rbm93bi5cbiAqXG4gKiBAcGFyYW0gbXV0YXRpb24gLSBUaGUgbXV0YXRpb24gdG8gYXBwbHkuXG4gKiBAcGFyYW0gZG9jdW1lbnQgLSBUaGUgZG9jdW1lbnQgdG8gbXV0YXRlLiBUaGUgaW5wdXQgZG9jdW1lbnQgY2FuIGJlIGFuXG4gKiAgICAgaW52YWxpZCBkb2N1bWVudCBpZiB0aGUgY2xpZW50IGhhcyBubyBrbm93bGVkZ2Ugb2YgdGhlIHByZS1tdXRhdGlvbiBzdGF0ZVxuICogICAgIG9mIHRoZSBkb2N1bWVudC5cbiAqIEBwYXJhbSBtdXRhdGlvblJlc3VsdCAtIFRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIG11dGF0aW9uIGZyb20gdGhlIGJhY2tlbmQuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX211dGF0aW9uQXBwbHlUb1JlbW90ZURvY3VtZW50KGUsIHQsIG4pIHtcbiAgICBlIGluc3RhbmNlb2YgX19QUklWQVRFX1NldE11dGF0aW9uID8gZnVuY3Rpb24gX19QUklWQVRFX3NldE11dGF0aW9uQXBwbHlUb1JlbW90ZURvY3VtZW50KGUsIHQsIG4pIHtcbiAgICAgICAgLy8gVW5saWtlIHNldE11dGF0aW9uQXBwbHlUb0xvY2FsVmlldywgaWYgd2UncmUgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byBhXG4gICAgICAgIC8vIHJlbW90ZSBkb2N1bWVudCB0aGUgc2VydmVyIGhhcyBhY2NlcHRlZCB0aGUgbXV0YXRpb24gc28gdGhlIHByZWNvbmRpdGlvblxuICAgICAgICAvLyBtdXN0IGhhdmUgaGVsZC5cbiAgICAgICAgY29uc3QgciA9IGUudmFsdWUuY2xvbmUoKSwgaSA9IF9fUFJJVkFURV9zZXJ2ZXJUcmFuc2Zvcm1SZXN1bHRzKGUuZmllbGRUcmFuc2Zvcm1zLCB0LCBuLnRyYW5zZm9ybVJlc3VsdHMpO1xuICAgICAgICByLnNldEFsbChpKSwgdC5jb252ZXJ0VG9Gb3VuZERvY3VtZW50KG4udmVyc2lvbiwgcikuc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCk7XG4gICAgfShlLCB0LCBuKSA6IGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfUGF0Y2hNdXRhdGlvbiA/IGZ1bmN0aW9uIF9fUFJJVkFURV9wYXRjaE11dGF0aW9uQXBwbHlUb1JlbW90ZURvY3VtZW50KGUsIHQsIG4pIHtcbiAgICAgICAgaWYgKCFfX1BSSVZBVEVfcHJlY29uZGl0aW9uSXNWYWxpZEZvckRvY3VtZW50KGUucHJlY29uZGl0aW9uLCB0KSkgXG4gICAgICAgIC8vIFNpbmNlIHRoZSBtdXRhdGlvbiB3YXMgbm90IHJlamVjdGVkLCB3ZSBrbm93IHRoYXQgdGhlIHByZWNvbmRpdGlvblxuICAgICAgICAvLyBtYXRjaGVkIG9uIHRoZSBiYWNrZW5kLiBXZSB0aGVyZWZvcmUgbXVzdCBub3QgaGF2ZSB0aGUgZXhwZWN0ZWQgdmVyc2lvblxuICAgICAgICAvLyBvZiB0aGUgZG9jdW1lbnQgaW4gb3VyIGNhY2hlIGFuZCBjb252ZXJ0IHRvIGFuIFVua25vd25Eb2N1bWVudCB3aXRoIGFcbiAgICAgICAgLy8ga25vd24gdXBkYXRlVGltZS5cbiAgICAgICAgcmV0dXJuIHZvaWQgdC5jb252ZXJ0VG9Vbmtub3duRG9jdW1lbnQobi52ZXJzaW9uKTtcbiAgICAgICAgY29uc3QgciA9IF9fUFJJVkFURV9zZXJ2ZXJUcmFuc2Zvcm1SZXN1bHRzKGUuZmllbGRUcmFuc2Zvcm1zLCB0LCBuLnRyYW5zZm9ybVJlc3VsdHMpLCBpID0gdC5kYXRhO1xuICAgICAgICBpLnNldEFsbChfX1BSSVZBVEVfZ2V0UGF0Y2goZSkpLCBpLnNldEFsbChyKSwgdC5jb252ZXJ0VG9Gb3VuZERvY3VtZW50KG4udmVyc2lvbiwgaSkuc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCk7XG4gICAgfShlLCB0LCBuKSA6IGZ1bmN0aW9uIF9fUFJJVkFURV9kZWxldGVNdXRhdGlvbkFwcGx5VG9SZW1vdGVEb2N1bWVudChlLCB0LCBuKSB7XG4gICAgICAgIC8vIFVubGlrZSBhcHBseVRvTG9jYWxWaWV3LCBpZiB3ZSdyZSBhcHBseWluZyBhIG11dGF0aW9uIHRvIGEgcmVtb3RlXG4gICAgICAgIC8vIGRvY3VtZW50IHRoZSBzZXJ2ZXIgaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbiBzbyB0aGUgcHJlY29uZGl0aW9uIG11c3RcbiAgICAgICAgLy8gaGF2ZSBoZWxkLlxuICAgICAgICB0LmNvbnZlcnRUb05vRG9jdW1lbnQobi52ZXJzaW9uKS5zZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMoKTtcbiAgICB9KDAsIHQsIG4pO1xufVxuXG4vKipcbiAqIEFwcGxpZXMgdGhpcyBtdXRhdGlvbiB0byB0aGUgZ2l2ZW4gZG9jdW1lbnQgZm9yIHRoZSBwdXJwb3NlcyBvZiBjb21wdXRpbmdcbiAqIHRoZSBuZXcgbG9jYWwgdmlldyBvZiBhIGRvY3VtZW50LiBJZiB0aGUgaW5wdXQgZG9jdW1lbnQgZG9lc24ndCBtYXRjaCB0aGVcbiAqIGV4cGVjdGVkIHN0YXRlLCB0aGUgZG9jdW1lbnQgaXMgbm90IG1vZGlmaWVkLlxuICpcbiAqIEBwYXJhbSBtdXRhdGlvbiAtIFRoZSBtdXRhdGlvbiB0byBhcHBseS5cbiAqIEBwYXJhbSBkb2N1bWVudCAtIFRoZSBkb2N1bWVudCB0byBtdXRhdGUuIFRoZSBpbnB1dCBkb2N1bWVudCBjYW4gYmUgYW5cbiAqICAgICBpbnZhbGlkIGRvY3VtZW50IGlmIHRoZSBjbGllbnQgaGFzIG5vIGtub3dsZWRnZSBvZiB0aGUgcHJlLW11dGF0aW9uIHN0YXRlXG4gKiAgICAgb2YgdGhlIGRvY3VtZW50LlxuICogQHBhcmFtIHByZXZpb3VzTWFzayAtIFRoZSBmaWVsZHMgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZCBiZWZvcmUgYXBwbHlpbmcgdGhpcyBtdXRhdGlvbi5cbiAqIEBwYXJhbSBsb2NhbFdyaXRlVGltZSAtIEEgdGltZXN0YW1wIGluZGljYXRpbmcgdGhlIGxvY2FsIHdyaXRlIHRpbWUgb2YgdGhlXG4gKiAgICAgYmF0Y2ggdGhpcyBtdXRhdGlvbiBpcyBhIHBhcnQgb2YuXG4gKiBAcmV0dXJucyBBIGBGaWVsZE1hc2tgIHJlcHJlc2VudGluZyB0aGUgZmllbGRzIHRoYXQgYXJlIGNoYW5nZWQgYnkgYXBwbHlpbmcgdGhpcyBtdXRhdGlvbi5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfbXV0YXRpb25BcHBseVRvTG9jYWxWaWV3KGUsIHQsIG4sIHIpIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIF9fUFJJVkFURV9TZXRNdXRhdGlvbiA/IGZ1bmN0aW9uIF9fUFJJVkFURV9zZXRNdXRhdGlvbkFwcGx5VG9Mb2NhbFZpZXcoZSwgdCwgbiwgcikge1xuICAgICAgICBpZiAoIV9fUFJJVkFURV9wcmVjb25kaXRpb25Jc1ZhbGlkRm9yRG9jdW1lbnQoZS5wcmVjb25kaXRpb24sIHQpKSBcbiAgICAgICAgLy8gVGhlIG11dGF0aW9uIGZhaWxlZCB0byBhcHBseSAoZS5nLiBhIGRvY3VtZW50IElEIGNyZWF0ZWQgd2l0aCBhZGQoKVxuICAgICAgICAvLyBjYXVzZWQgYSBuYW1lIGNvbGxpc2lvbikuXG4gICAgICAgIHJldHVybiBuO1xuICAgICAgICBjb25zdCBpID0gZS52YWx1ZS5jbG9uZSgpLCBzID0gX19QUklWQVRFX2xvY2FsVHJhbnNmb3JtUmVzdWx0cyhlLmZpZWxkVHJhbnNmb3JtcywgciwgdCk7XG4gICAgICAgIHJldHVybiBpLnNldEFsbChzKSwgdC5jb252ZXJ0VG9Gb3VuZERvY3VtZW50KHQudmVyc2lvbiwgaSkuc2V0SGFzTG9jYWxNdXRhdGlvbnMoKSwgXG4gICAgICAgIG51bGw7XG4gLy8gU2V0TXV0YXRpb24gb3ZlcndyaXRlcyBhbGwgZmllbGRzLlxuICAgICAgICB9XG4gICAgLyoqXG4gKiBBIG11dGF0aW9uIHRoYXQgbW9kaWZpZXMgZmllbGRzIG9mIHRoZSBkb2N1bWVudCBhdCB0aGUgZ2l2ZW4ga2V5IHdpdGggdGhlXG4gKiBnaXZlbiB2YWx1ZXMuIFRoZSB2YWx1ZXMgYXJlIGFwcGxpZWQgdGhyb3VnaCBhIGZpZWxkIG1hc2s6XG4gKlxuICogICogV2hlbiBhIGZpZWxkIGlzIGluIGJvdGggdGhlIG1hc2sgYW5kIHRoZSB2YWx1ZXMsIHRoZSBjb3JyZXNwb25kaW5nIGZpZWxkXG4gKiAgICBpcyB1cGRhdGVkLlxuICogICogV2hlbiBhIGZpZWxkIGlzIGluIG5laXRoZXIgdGhlIG1hc2sgbm9yIHRoZSB2YWx1ZXMsIHRoZSBjb3JyZXNwb25kaW5nXG4gKiAgICBmaWVsZCBpcyB1bm1vZGlmaWVkLlxuICogICogV2hlbiBhIGZpZWxkIGlzIGluIHRoZSBtYXNrIGJ1dCBub3QgaW4gdGhlIHZhbHVlcywgdGhlIGNvcnJlc3BvbmRpbmcgZmllbGRcbiAqICAgIGlzIGRlbGV0ZWQuXG4gKiAgKiBXaGVuIGEgZmllbGQgaXMgbm90IGluIHRoZSBtYXNrIGJ1dCBpcyBpbiB0aGUgdmFsdWVzLCB0aGUgdmFsdWVzIG1hcCBpc1xuICogICAgaWdub3JlZC5cbiAqLyAoZSwgdCwgbiwgcikgOiBlIGluc3RhbmNlb2YgX19QUklWQVRFX1BhdGNoTXV0YXRpb24gPyBmdW5jdGlvbiBfX1BSSVZBVEVfcGF0Y2hNdXRhdGlvbkFwcGx5VG9Mb2NhbFZpZXcoZSwgdCwgbiwgcikge1xuICAgICAgICBpZiAoIV9fUFJJVkFURV9wcmVjb25kaXRpb25Jc1ZhbGlkRm9yRG9jdW1lbnQoZS5wcmVjb25kaXRpb24sIHQpKSByZXR1cm4gbjtcbiAgICAgICAgY29uc3QgaSA9IF9fUFJJVkFURV9sb2NhbFRyYW5zZm9ybVJlc3VsdHMoZS5maWVsZFRyYW5zZm9ybXMsIHIsIHQpLCBzID0gdC5kYXRhO1xuICAgICAgICBpZiAocy5zZXRBbGwoX19QUklWQVRFX2dldFBhdGNoKGUpKSwgcy5zZXRBbGwoaSksIHQuY29udmVydFRvRm91bmREb2N1bWVudCh0LnZlcnNpb24sIHMpLnNldEhhc0xvY2FsTXV0YXRpb25zKCksIFxuICAgICAgICBudWxsID09PSBuKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIG4udW5pb25XaXRoKGUuZmllbGRNYXNrLmZpZWxkcykudW5pb25XaXRoKGUuZmllbGRUcmFuc2Zvcm1zLm1hcCgoZSA9PiBlLmZpZWxkKSkpO1xuICAgIH1cbiAgICAvKipcbiAqIFJldHVybnMgYSBGaWVsZFBhdGgvVmFsdWUgbWFwIHdpdGggdGhlIGNvbnRlbnQgb2YgdGhlIFBhdGNoTXV0YXRpb24uXG4gKi8gKGUsIHQsIG4sIHIpIDogZnVuY3Rpb24gX19QUklWQVRFX2RlbGV0ZU11dGF0aW9uQXBwbHlUb0xvY2FsVmlldyhlLCB0LCBuKSB7XG4gICAgICAgIGlmIChfX1BSSVZBVEVfcHJlY29uZGl0aW9uSXNWYWxpZEZvckRvY3VtZW50KGUucHJlY29uZGl0aW9uLCB0KSkgcmV0dXJuIHQuY29udmVydFRvTm9Eb2N1bWVudCh0LnZlcnNpb24pLnNldEhhc0xvY2FsTXV0YXRpb25zKCksIFxuICAgICAgICBudWxsO1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgLyoqXG4gKiBBIG11dGF0aW9uIHRoYXQgdmVyaWZpZXMgdGhlIGV4aXN0ZW5jZSBvZiB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIGtleSB3aXRoXG4gKiB0aGUgcHJvdmlkZWQgcHJlY29uZGl0aW9uLlxuICpcbiAqIFRoZSBgdmVyaWZ5YCBvcGVyYXRpb24gaXMgb25seSB1c2VkIGluIFRyYW5zYWN0aW9ucywgYW5kIHRoaXMgY2xhc3Mgc2VydmVzXG4gKiBwcmltYXJpbHkgdG8gZmFjaWxpdGF0ZSBzZXJpYWxpemF0aW9uIGludG8gcHJvdG9zLlxuICovIChlLCB0LCBuKTtcbn1cblxuLyoqXG4gKiBJZiB0aGlzIG11dGF0aW9uIGlzIG5vdCBpZGVtcG90ZW50LCByZXR1cm5zIHRoZSBiYXNlIHZhbHVlIHRvIHBlcnNpc3Qgd2l0aFxuICogdGhpcyBtdXRhdGlvbi4gSWYgYSBiYXNlIHZhbHVlIGlzIHJldHVybmVkLCB0aGUgbXV0YXRpb24gaXMgYWx3YXlzIGFwcGxpZWRcbiAqIHRvIHRoaXMgYmFzZSB2YWx1ZSwgZXZlbiBpZiBkb2N1bWVudCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGJhc2UgdmFsdWUgaXMgYSBzcGFyc2Ugb2JqZWN0IHRoYXQgY29uc2lzdHMgb2Ygb25seSB0aGUgZG9jdW1lbnRcbiAqIGZpZWxkcyBmb3Igd2hpY2ggdGhpcyBtdXRhdGlvbiBjb250YWlucyBhIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybWF0aW9uXG4gKiAoZS5nLiBhIG51bWVyaWMgaW5jcmVtZW50KS4gVGhlIHByb3ZpZGVkIHZhbHVlIGd1YXJhbnRlZXMgY29uc2lzdGVudFxuICogYmVoYXZpb3IgZm9yIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybXMgYW5kIGFsbG93IHVzIHRvIHJldHVybiB0aGUgc2FtZVxuICogbGF0ZW5jeS1jb21wZW5zYXRlZCB2YWx1ZSBldmVuIGlmIHRoZSBiYWNrZW5kIGhhcyBhbHJlYWR5IGFwcGxpZWQgdGhlXG4gKiBtdXRhdGlvbi4gVGhlIGJhc2UgdmFsdWUgaXMgbnVsbCBmb3IgaWRlbXBvdGVudCBtdXRhdGlvbnMsIGFzIHRoZXkgY2FuIGJlXG4gKiByZS1wbGF5ZWQgZXZlbiBpZiB0aGUgYmFja2VuZCBoYXMgYWxyZWFkeSBhcHBsaWVkIHRoZW0uXG4gKlxuICogQHJldHVybnMgYSBiYXNlIHZhbHVlIHRvIHN0b3JlIGFsb25nIHdpdGggdGhlIG11dGF0aW9uLCBvciBudWxsIGZvclxuICogaWRlbXBvdGVudCBtdXRhdGlvbnMuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX211dGF0aW9uRXh0cmFjdEJhc2VWYWx1ZShlLCB0KSB7XG4gICAgbGV0IG4gPSBudWxsO1xuICAgIGZvciAoY29uc3QgciBvZiBlLmZpZWxkVHJhbnNmb3Jtcykge1xuICAgICAgICBjb25zdCBlID0gdC5kYXRhLmZpZWxkKHIuZmllbGQpLCBpID0gX19QUklWQVRFX2NvbXB1dGVUcmFuc2Zvcm1PcGVyYXRpb25CYXNlVmFsdWUoci50cmFuc2Zvcm0sIGUgfHwgbnVsbCk7XG4gICAgICAgIG51bGwgIT0gaSAmJiAobnVsbCA9PT0gbiAmJiAobiA9IE9iamVjdFZhbHVlLmVtcHR5KCkpLCBuLnNldChyLmZpZWxkLCBpKSk7XG4gICAgfVxuICAgIHJldHVybiBuIHx8IG51bGw7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9tdXRhdGlvbkVxdWFscyhlLCB0KSB7XG4gICAgcmV0dXJuIGUudHlwZSA9PT0gdC50eXBlICYmICghIWUua2V5LmlzRXF1YWwodC5rZXkpICYmICghIWUucHJlY29uZGl0aW9uLmlzRXF1YWwodC5wcmVjb25kaXRpb24pICYmICghIWZ1bmN0aW9uIF9fUFJJVkFURV9maWVsZFRyYW5zZm9ybXNBcmVFcXVhbChlLCB0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgPT09IGUgJiYgdm9pZCAwID09PSB0IHx8ICEoIWUgfHwgIXQpICYmIF9fUFJJVkFURV9hcnJheUVxdWFscyhlLCB0LCAoKGUsIHQpID0+IF9fUFJJVkFURV9maWVsZFRyYW5zZm9ybUVxdWFscyhlLCB0KSkpO1xuICAgIH0oZS5maWVsZFRyYW5zZm9ybXMsIHQuZmllbGRUcmFuc2Zvcm1zKSAmJiAoMCAvKiBNdXRhdGlvblR5cGUuU2V0ICovID09PSBlLnR5cGUgPyBlLnZhbHVlLmlzRXF1YWwodC52YWx1ZSkgOiAxIC8qIE11dGF0aW9uVHlwZS5QYXRjaCAqLyAhPT0gZS50eXBlIHx8IGUuZGF0YS5pc0VxdWFsKHQuZGF0YSkgJiYgZS5maWVsZE1hc2suaXNFcXVhbCh0LmZpZWxkTWFzaykpKSkpO1xufVxuXG4vKipcbiAqIEEgbXV0YXRpb24gdGhhdCBjcmVhdGVzIG9yIHJlcGxhY2VzIHRoZSBkb2N1bWVudCBhdCB0aGUgZ2l2ZW4ga2V5IHdpdGggdGhlXG4gKiBvYmplY3QgdmFsdWUgY29udGVudHMuXG4gKi8gY2xhc3MgX19QUklWQVRFX1NldE11dGF0aW9uIGV4dGVuZHMgTXV0YXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIgPSBbXSkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmtleSA9IGUsIHRoaXMudmFsdWUgPSB0LCB0aGlzLnByZWNvbmRpdGlvbiA9IG4sIHRoaXMuZmllbGRUcmFuc2Zvcm1zID0gciwgXG4gICAgICAgIHRoaXMudHlwZSA9IDAgLyogTXV0YXRpb25UeXBlLlNldCAqLztcbiAgICB9XG4gICAgZ2V0RmllbGRNYXNrKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIF9fUFJJVkFURV9QYXRjaE11dGF0aW9uIGV4dGVuZHMgTXV0YXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIsIGkgPSBbXSkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmtleSA9IGUsIHRoaXMuZGF0YSA9IHQsIHRoaXMuZmllbGRNYXNrID0gbiwgdGhpcy5wcmVjb25kaXRpb24gPSByLCBcbiAgICAgICAgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBpLCB0aGlzLnR5cGUgPSAxIC8qIE11dGF0aW9uVHlwZS5QYXRjaCAqLztcbiAgICB9XG4gICAgZ2V0RmllbGRNYXNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZE1hc2s7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZ2V0UGF0Y2goZSkge1xuICAgIGNvbnN0IHQgPSBuZXcgTWFwO1xuICAgIHJldHVybiBlLmZpZWxkTWFzay5maWVsZHMuZm9yRWFjaCgobiA9PiB7XG4gICAgICAgIGlmICghbi5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBlLmRhdGEuZmllbGQobik7XG4gICAgICAgICAgICB0LnNldChuLCByKTtcbiAgICAgICAgfVxuICAgIH0pKSwgdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbGlzdCBvZiBcInRyYW5zZm9ybSByZXN1bHRzXCIgKGEgdHJhbnNmb3JtIHJlc3VsdCBpcyBhIGZpZWxkIHZhbHVlXG4gKiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdCBvZiBhcHBseWluZyBhIHRyYW5zZm9ybSkgZm9yIHVzZSBhZnRlciBhIG11dGF0aW9uXG4gKiBjb250YWluaW5nIHRyYW5zZm9ybXMgaGFzIGJlZW4gYWNrbm93bGVkZ2VkIGJ5IHRoZSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtIGZpZWxkVHJhbnNmb3JtcyAtIFRoZSBmaWVsZCB0cmFuc2Zvcm1zIHRvIGFwcGx5IHRoZSByZXN1bHQgdG8uXG4gKiBAcGFyYW0gbXV0YWJsZURvY3VtZW50IC0gVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGRvY3VtZW50IGFmdGVyIGFwcGx5aW5nIGFsbFxuICogcHJldmlvdXMgbXV0YXRpb25zLlxuICogQHBhcmFtIHNlcnZlclRyYW5zZm9ybVJlc3VsdHMgLSBUaGUgdHJhbnNmb3JtIHJlc3VsdHMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAqIEByZXR1cm5zIFRoZSB0cmFuc2Zvcm0gcmVzdWx0cyBsaXN0LlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9zZXJ2ZXJUcmFuc2Zvcm1SZXN1bHRzKGUsIHQsIG4pIHtcbiAgICBjb25zdCByID0gbmV3IE1hcDtcbiAgICBfX1BSSVZBVEVfaGFyZEFzc2VydChlLmxlbmd0aCA9PT0gbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzID0gZVtpXSwgbyA9IHMudHJhbnNmb3JtLCBfID0gdC5kYXRhLmZpZWxkKHMuZmllbGQpO1xuICAgICAgICByLnNldChzLmZpZWxkLCBfX1BSSVZBVEVfYXBwbHlUcmFuc2Zvcm1PcGVyYXRpb25Ub1JlbW90ZURvY3VtZW50KG8sIF8sIG5baV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGxpc3Qgb2YgXCJ0cmFuc2Zvcm0gcmVzdWx0c1wiIChhIHRyYW5zZm9ybSByZXN1bHQgaXMgYSBmaWVsZCB2YWx1ZVxuICogcmVwcmVzZW50aW5nIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYSB0cmFuc2Zvcm0pIGZvciB1c2Ugd2hlbiBhcHBseWluZyBhXG4gKiB0cmFuc2Zvcm0gbG9jYWxseS5cbiAqXG4gKiBAcGFyYW0gZmllbGRUcmFuc2Zvcm1zIC0gVGhlIGZpZWxkIHRyYW5zZm9ybXMgdG8gYXBwbHkgdGhlIHJlc3VsdCB0by5cbiAqIEBwYXJhbSBsb2NhbFdyaXRlVGltZSAtIFRoZSBsb2NhbCB0aW1lIG9mIHRoZSBtdXRhdGlvbiAodXNlZCB0b1xuICogICAgIGdlbmVyYXRlIFNlcnZlclRpbWVzdGFtcFZhbHVlcykuXG4gKiBAcGFyYW0gbXV0YWJsZURvY3VtZW50IC0gVGhlIGRvY3VtZW50IHRvIGFwcGx5IHRyYW5zZm9ybXMgb24uXG4gKiBAcmV0dXJucyBUaGUgdHJhbnNmb3JtIHJlc3VsdHMgbGlzdC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxUcmFuc2Zvcm1SZXN1bHRzKGUsIHQsIG4pIHtcbiAgICBjb25zdCByID0gbmV3IE1hcDtcbiAgICBmb3IgKGNvbnN0IGkgb2YgZSkge1xuICAgICAgICBjb25zdCBlID0gaS50cmFuc2Zvcm0sIHMgPSBuLmRhdGEuZmllbGQoaS5maWVsZCk7XG4gICAgICAgIHIuc2V0KGkuZmllbGQsIF9fUFJJVkFURV9hcHBseVRyYW5zZm9ybU9wZXJhdGlvblRvTG9jYWxWaWV3KGUsIHMsIHQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG59XG5cbi8qKiBBIG11dGF0aW9uIHRoYXQgZGVsZXRlcyB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIGtleS4gKi8gY2xhc3MgX19QUklWQVRFX0RlbGV0ZU11dGF0aW9uIGV4dGVuZHMgTXV0YXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5rZXkgPSBlLCB0aGlzLnByZWNvbmRpdGlvbiA9IHQsIHRoaXMudHlwZSA9IDIgLyogTXV0YXRpb25UeXBlLkRlbGV0ZSAqLyAsIFxuICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IFtdO1xuICAgIH1cbiAgICBnZXRGaWVsZE1hc2soKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX1ZlcmlmeU11dGF0aW9uIGV4dGVuZHMgTXV0YXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5rZXkgPSBlLCB0aGlzLnByZWNvbmRpdGlvbiA9IHQsIHRoaXMudHlwZSA9IDMgLyogTXV0YXRpb25UeXBlLlZlcmlmeSAqLyAsIFxuICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IFtdO1xuICAgIH1cbiAgICBnZXRGaWVsZE1hc2soKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBiYXRjaCBvZiBtdXRhdGlvbnMgdGhhdCB3aWxsIGJlIHNlbnQgYXMgb25lIHVuaXQgdG8gdGhlIGJhY2tlbmQuXG4gKi8gY2xhc3MgTXV0YXRpb25CYXRjaCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgdW5pcXVlIElEIG9mIHRoaXMgbXV0YXRpb24gYmF0Y2guXG4gICAgICogQHBhcmFtIGxvY2FsV3JpdGVUaW1lIC0gVGhlIG9yaWdpbmFsIHdyaXRlIHRpbWUgb2YgdGhpcyBtdXRhdGlvbi5cbiAgICAgKiBAcGFyYW0gYmFzZU11dGF0aW9ucyAtIE11dGF0aW9ucyB0aGF0IGFyZSB1c2VkIHRvIHBvcHVsYXRlIHRoZSBiYXNlXG4gICAgICogdmFsdWVzIHdoZW4gdGhpcyBtdXRhdGlvbiBpcyBhcHBsaWVkIGxvY2FsbHkuIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9jYWxseVxuICAgICAqIG92ZXJ3cml0ZSB2YWx1ZXMgdGhhdCBhcmUgcGVyc2lzdGVkIGluIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGUuIEJhc2VcbiAgICAgKiBtdXRhdGlvbnMgYXJlIG5ldmVyIHNlbnQgdG8gdGhlIGJhY2tlbmQuXG4gICAgICogQHBhcmFtIG11dGF0aW9ucyAtIFRoZSB1c2VyLXByb3ZpZGVkIG11dGF0aW9ucyBpbiB0aGlzIG11dGF0aW9uIGJhdGNoLlxuICAgICAqIFVzZXItcHJvdmlkZWQgbXV0YXRpb25zIGFyZSBhcHBsaWVkIGJvdGggbG9jYWxseSBhbmQgcmVtb3RlbHkgb24gdGhlXG4gICAgICogYmFja2VuZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByKSB7XG4gICAgICAgIHRoaXMuYmF0Y2hJZCA9IGUsIHRoaXMubG9jYWxXcml0ZVRpbWUgPSB0LCB0aGlzLmJhc2VNdXRhdGlvbnMgPSBuLCB0aGlzLm11dGF0aW9ucyA9IHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYWxsIHRoZSBtdXRhdGlvbnMgaW4gdGhpcyBNdXRhdGlvbkJhdGNoIHRvIHRoZSBzcGVjaWZpZWQgZG9jdW1lbnRcbiAgICAgKiB0byBjb21wdXRlIHRoZSBzdGF0ZSBvZiB0aGUgcmVtb3RlIGRvY3VtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnQgLSBUaGUgZG9jdW1lbnQgdG8gYXBwbHkgbXV0YXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSBiYXRjaFJlc3VsdCAtIFRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIE11dGF0aW9uQmF0Y2ggdG8gdGhlXG4gICAgICogYmFja2VuZC5cbiAgICAgKi8gICAgYXBwbHlUb1JlbW90ZURvY3VtZW50KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHQubXV0YXRpb25SZXN1bHRzO1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRoaXMubXV0YXRpb25zLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5tdXRhdGlvbnNbdF07XG4gICAgICAgICAgICBpZiAoci5rZXkuaXNFcXVhbChlLmtleSkpIHtcbiAgICAgICAgICAgICAgICBfX1BSSVZBVEVfbXV0YXRpb25BcHBseVRvUmVtb3RlRG9jdW1lbnQociwgZSwgblt0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGxvY2FsIHZpZXcgb2YgYSBkb2N1bWVudCBnaXZlbiBhbGwgdGhlIG11dGF0aW9ucyBpbiB0aGlzXG4gICAgICogYmF0Y2guXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnQgLSBUaGUgZG9jdW1lbnQgdG8gYXBwbHkgbXV0YXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSBtdXRhdGVkRmllbGRzIC0gRmllbGRzIHRoYXQgaGF2ZSBiZWVuIHVwZGF0ZWQgYmVmb3JlIGFwcGx5aW5nIHRoaXMgbXV0YXRpb24gYmF0Y2guXG4gICAgICogQHJldHVybnMgQSBgRmllbGRNYXNrYCByZXByZXNlbnRpbmcgYWxsIHRoZSBmaWVsZHMgdGhhdCBhcmUgbXV0YXRlZC5cbiAgICAgKi8gICAgYXBwbHlUb0xvY2FsVmlldyhlLCB0KSB7XG4gICAgICAgIC8vIEZpcnN0LCBhcHBseSB0aGUgYmFzZSBzdGF0ZS4gVGhpcyBhbGxvd3MgdXMgdG8gYXBwbHkgbm9uLWlkZW1wb3RlbnRcbiAgICAgICAgLy8gdHJhbnNmb3JtIGFnYWluc3QgYSBjb25zaXN0ZW50IHNldCBvZiB2YWx1ZXMuXG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLmJhc2VNdXRhdGlvbnMpIG4ua2V5LmlzRXF1YWwoZS5rZXkpICYmICh0ID0gX19QUklWQVRFX211dGF0aW9uQXBwbHlUb0xvY2FsVmlldyhuLCBlLCB0LCB0aGlzLmxvY2FsV3JpdGVUaW1lKSk7XG4gICAgICAgIC8vIFNlY29uZCwgYXBwbHkgYWxsIHVzZXItcHJvdmlkZWQgbXV0YXRpb25zLlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLm11dGF0aW9ucykgbi5rZXkuaXNFcXVhbChlLmtleSkgJiYgKHQgPSBfX1BSSVZBVEVfbXV0YXRpb25BcHBseVRvTG9jYWxWaWV3KG4sIGUsIHQsIHRoaXMubG9jYWxXcml0ZVRpbWUpKTtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBsb2NhbCB2aWV3IGZvciBhbGwgcHJvdmlkZWQgZG9jdW1lbnRzIGdpdmVuIHRoZSBtdXRhdGlvbnMgaW5cbiAgICAgKiB0aGlzIGJhdGNoLiBSZXR1cm5zIGEgYERvY3VtZW50S2V5YCB0byBgTXV0YXRpb25gIG1hcCB3aGljaCBjYW4gYmUgdXNlZCB0b1xuICAgICAqIHJlcGxhY2UgYWxsIHRoZSBtdXRhdGlvbiBhcHBsaWNhdGlvbnMuXG4gICAgICovICAgIGFwcGx5VG9Mb2NhbERvY3VtZW50U2V0KGUsIHQpIHtcbiAgICAgICAgLy8gVE9ETyhtcnNjaG1pZHQpOiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIE8obl4yKS4gSWYgd2UgYXBwbHkgdGhlIG11dGF0aW9uc1xuICAgICAgICAvLyBkaXJlY3RseSAoYXMgZG9uZSBpbiBgYXBwbHlUb0xvY2FsVmlldygpYCksIHdlIGNhbiByZWR1Y2UgdGhlIGNvbXBsZXhpdHlcbiAgICAgICAgLy8gdG8gTyhuKS5cbiAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9uZXdNdXRhdGlvbk1hcCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5tdXRhdGlvbnMuZm9yRWFjaCgociA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gZS5nZXQoci5rZXkpLCBzID0gaS5vdmVybGF5ZWREb2N1bWVudDtcbiAgICAgICAgICAgIC8vIFRPRE8obXV0YWJsZWRvY3VtZW50cyk6IFRoaXMgbWV0aG9kIHNob3VsZCB0YWtlIGEgTXV0YWJsZURvY3VtZW50TWFwXG4gICAgICAgICAgICAvLyBhbmQgd2Ugc2hvdWxkIHJlbW92ZSB0aGlzIGNhc3QuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbyA9IHRoaXMuYXBwbHlUb0xvY2FsVmlldyhzLCBpLm11dGF0ZWRGaWVsZHMpO1xuICAgICAgICAgICAgLy8gU2V0IG11dGF0ZWRGaWVsZHMgdG8gbnVsbCBpZiB0aGUgZG9jdW1lbnQgaXMgb25seSBmcm9tIGxvY2FsIG11dGF0aW9ucy5cbiAgICAgICAgICAgIC8vIFRoaXMgY3JlYXRlcyBhIFNldCBvciBEZWxldGUgbXV0YXRpb24sIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGNyZWF0ZSBhXG4gICAgICAgICAgICAvLyBwYXRjaCBtdXRhdGlvbiBhcyB0aGUgb3ZlcmxheS5cbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0LmhhcyhyLmtleSkgPyBudWxsIDogbztcbiAgICAgICAgICAgIGNvbnN0IF8gPSBfX1BSSVZBVEVfY2FsY3VsYXRlT3ZlcmxheU11dGF0aW9uKHMsIG8pO1xuICAgICAgICAgICAgbnVsbCAhPT0gXyAmJiBuLnNldChyLmtleSwgXyksIHMuaXNWYWxpZERvY3VtZW50KCkgfHwgcy5jb252ZXJ0VG9Ob0RvY3VtZW50KFNuYXBzaG90VmVyc2lvbi5taW4oKSk7XG4gICAgICAgIH0pKSwgbjtcbiAgICB9XG4gICAga2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25zLnJlZHVjZSgoKGUsIHQpID0+IGUuYWRkKHQua2V5KSksIF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpKTtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhdGNoSWQgPT09IGUuYmF0Y2hJZCAmJiBfX1BSSVZBVEVfYXJyYXlFcXVhbHModGhpcy5tdXRhdGlvbnMsIGUubXV0YXRpb25zLCAoKGUsIHQpID0+IF9fUFJJVkFURV9tdXRhdGlvbkVxdWFscyhlLCB0KSkpICYmIF9fUFJJVkFURV9hcnJheUVxdWFscyh0aGlzLmJhc2VNdXRhdGlvbnMsIGUuYmFzZU11dGF0aW9ucywgKChlLCB0KSA9PiBfX1BSSVZBVEVfbXV0YXRpb25FcXVhbHMoZSwgdCkpKTtcbiAgICB9XG59XG5cbi8qKiBUaGUgcmVzdWx0IG9mIGFwcGx5aW5nIGEgbXV0YXRpb24gYmF0Y2ggdG8gdGhlIGJhY2tlbmQuICovIGNsYXNzIE11dGF0aW9uQmF0Y2hSZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIFxuICAgIC8qKlxuICAgICAqIEEgcHJlLWNvbXB1dGVkIG1hcHBpbmcgZnJvbSBlYWNoIG11dGF0ZWQgZG9jdW1lbnQgdG8gdGhlIHJlc3VsdGluZ1xuICAgICAqIHZlcnNpb24uXG4gICAgICovXG4gICAgcikge1xuICAgICAgICB0aGlzLmJhdGNoID0gZSwgdGhpcy5jb21taXRWZXJzaW9uID0gdCwgdGhpcy5tdXRhdGlvblJlc3VsdHMgPSBuLCB0aGlzLmRvY1ZlcnNpb25zID0gcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBNdXRhdGlvbkJhdGNoUmVzdWx0IGZvciB0aGUgZ2l2ZW4gYmF0Y2ggYW5kIHJlc3VsdHMuIFRoZXJlXG4gICAgICogbXVzdCBiZSBvbmUgcmVzdWx0IGZvciBlYWNoIG11dGF0aW9uIGluIHRoZSBiYXRjaC4gVGhpcyBzdGF0aWMgZmFjdG9yeVxuICAgICAqIGNhY2hlcyBhIGRvY3VtZW50PSZndDt2ZXJzaW9uIG1hcHBpbmcgKGRvY1ZlcnNpb25zKS5cbiAgICAgKi8gICAgc3RhdGljIGZyb20oZSwgdCwgbikge1xuICAgICAgICBfX1BSSVZBVEVfaGFyZEFzc2VydChlLm11dGF0aW9ucy5sZW5ndGggPT09IG4ubGVuZ3RoKTtcbiAgICAgICAgbGV0IHIgPSBmdW5jdGlvbiBfX1BSSVZBVEVfZG9jdW1lbnRWZXJzaW9uTWFwKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9lO1xuICAgICAgICB9KCk7XG4gICAgICAgIGNvbnN0IGkgPSBlLm11dGF0aW9ucztcbiAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBpLmxlbmd0aDsgZSsrKSByID0gci5pbnNlcnQoaVtlXS5rZXksIG5bZV0udmVyc2lvbik7XG4gICAgICAgIHJldHVybiBuZXcgTXV0YXRpb25CYXRjaFJlc3VsdChlLCB0LCBuLCByKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGFuIG92ZXJsYXkgY29tcHV0ZWQgYnkgRmlyZXN0b3JlLlxuICpcbiAqIEhvbGRzIGluZm9ybWF0aW9uIGFib3V0IGEgbXV0YXRpb24gYW5kIHRoZSBsYXJnZXN0IGJhdGNoIGlkIGluIEZpcmVzdG9yZSB3aGVuXG4gKiB0aGUgbXV0YXRpb24gd2FzIGNyZWF0ZWQuXG4gKi8gY2xhc3MgT3ZlcmxheSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLmxhcmdlc3RCYXRjaElkID0gZSwgdGhpcy5tdXRhdGlvbiA9IHQ7XG4gICAgfVxuICAgIGdldEtleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb24ua2V5O1xuICAgIH1cbiAgICBpc0VxdWFsKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGUgJiYgdGhpcy5tdXRhdGlvbiA9PT0gZS5tdXRhdGlvbjtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgT3ZlcmxheXtcXG4gICAgICBsYXJnZXN0QmF0Y2hJZDogJHt0aGlzLmxhcmdlc3RCYXRjaElkfSxcXG4gICAgICBtdXRhdGlvbjogJHt0aGlzLm11dGF0aW9uLnRvU3RyaW5nKCl9XFxuICAgIH1gO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29uY3JldGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEFnZ3JlZ2F0ZSB0eXBlLlxuICovIGNsYXNzIF9fUFJJVkFURV9BZ2dyZWdhdGVJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuKSB7XG4gICAgICAgIHRoaXMuYWxpYXMgPSBlLCB0aGlzLmFnZ3JlZ2F0ZVR5cGUgPSB0LCB0aGlzLmZpZWxkUGF0aCA9IG47XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBFeGlzdGVuY2VGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IGUsIHRoaXMudW5jaGFuZ2VkTmFtZXMgPSB0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRXJyb3IgQ29kZXMgZGVzY3JpYmluZyB0aGUgZGlmZmVyZW50IHdheXMgR1JQQyBjYW4gZmFpbC4gVGhlc2UgYXJlIGNvcGllZFxuICogZGlyZWN0bHkgZnJvbSBHUlBDJ3Mgc291cmNlcyBoZXJlOlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9iY2VlYzk0ZWE0ZmM1ZjAwODVkODEyMzVkOGUxYzA2Nzk4ZGMzNDFhL2luY2x1ZGUvZ3JwYyUyQiUyQi9pbXBsL2NvZGVnZW4vc3RhdHVzX2NvZGVfZW51bS5oXG4gKlxuICogSW1wb3J0YW50ISBUaGUgbmFtZXMgb2YgdGhlc2UgaWRlbnRpZmllcnMgbWF0dGVyIGJlY2F1c2UgdGhlIHN0cmluZyBmb3Jtc1xuICogYXJlIHVzZWQgZm9yIHJldmVyc2UgbG9va3VwcyBmcm9tIHRoZSB3ZWJjaGFubmVsIHN0cmVhbS4gRG8gTk9UIGNoYW5nZSB0aGVcbiAqIG5hbWVzIG9mIHRoZXNlIGlkZW50aWZpZXJzIG9yIGNoYW5nZSB0aGlzIGludG8gYSBjb25zdCBlbnVtLlxuICovIHZhciBjZSwgbGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGVycm9yIGNvZGUgcmVwcmVzZW50cyBhIHBlcm1hbmVudCBlcnJvciB3aGVuIHJlY2VpdmVkXG4gKiBpbiByZXNwb25zZSB0byBhIG5vbi13cml0ZSBvcGVyYXRpb24uXG4gKlxuICogU2VlIGlzUGVybWFuZW50V3JpdGVFcnJvciBmb3IgY2xhc3NpZnlpbmcgd3JpdGUgZXJyb3JzLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfaXNQZXJtYW5lbnRFcnJvcihlKSB7XG4gICAgc3dpdGNoIChlKSB7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFpbCgpO1xuXG4gICAgICBjYXNlIEMuQ0FOQ0VMTEVEOlxuICAgICAgY2FzZSBDLlVOS05PV046XG4gICAgICBjYXNlIEMuREVBRExJTkVfRVhDRUVERUQ6XG4gICAgICBjYXNlIEMuUkVTT1VSQ0VfRVhIQVVTVEVEOlxuICAgICAgY2FzZSBDLklOVEVSTkFMOlxuICAgICAgY2FzZSBDLlVOQVZBSUxBQkxFOlxuIC8vIFVuYXV0aGVudGljYXRlZCBtZWFucyBzb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIG91ciB0b2tlbiBhbmQgd2UgbmVlZFxuICAgICAgICAvLyB0byByZXRyeSB3aXRoIG5ldyBjcmVkZW50aWFscyB3aGljaCB3aWxsIGhhcHBlbiBhdXRvbWF0aWNhbGx5LlxuICAgICAgICAgICAgICBjYXNlIEMuVU5BVVRIRU5USUNBVEVEOlxuICAgICAgICByZXR1cm4gITE7XG5cbiAgICAgIGNhc2UgQy5JTlZBTElEX0FSR1VNRU5UOlxuICAgICAgY2FzZSBDLk5PVF9GT1VORDpcbiAgICAgIGNhc2UgQy5BTFJFQURZX0VYSVNUUzpcbiAgICAgIGNhc2UgQy5QRVJNSVNTSU9OX0RFTklFRDpcbiAgICAgIGNhc2UgQy5GQUlMRURfUFJFQ09ORElUSU9OOlxuIC8vIEFib3J0ZWQgbWlnaHQgYmUgcmV0cmllZCBpbiBzb21lIHNjZW5hcmlvcywgYnV0IHRoYXQgaXMgZGVwZW5kYW50IG9uXG4gICAgICAgIC8vIHRoZSBjb250ZXh0IGFuZCBzaG91bGQgaGFuZGxlZCBpbmRpdmlkdWFsbHkgYnkgdGhlIGNhbGxpbmcgY29kZS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9hcGlzL2Rlc2lnbi9lcnJvcnMuXG4gICAgICAgICAgICAgIGNhc2UgQy5BQk9SVEVEOlxuICAgICAgY2FzZSBDLk9VVF9PRl9SQU5HRTpcbiAgICAgIGNhc2UgQy5VTklNUExFTUVOVEVEOlxuICAgICAgY2FzZSBDLkRBVEFfTE9TUzpcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gZXJyb3IgY29kZSByZXByZXNlbnRzIGEgcGVybWFuZW50IGVycm9yIHdoZW4gcmVjZWl2ZWRcbiAqIGluIHJlc3BvbnNlIHRvIGEgd3JpdGUgb3BlcmF0aW9uLlxuICpcbiAqIFdyaXRlIG9wZXJhdGlvbnMgbXVzdCBiZSBoYW5kbGVkIHNwZWNpYWxseSBiZWNhdXNlIGFzIG9mIGIvMTE5NDM3NzY0LCBBQk9SVEVEXG4gKiBlcnJvcnMgb24gdGhlIHdyaXRlIHN0cmVhbSBzaG91bGQgYmUgcmV0cmllZCB0b28gKGV2ZW4gdGhvdWdoIEFCT1JURUQgZXJyb3JzXG4gKiBhcmUgbm90IGdlbmVyYWxseSByZXRyeWFibGUpLlxuICpcbiAqIE5vdGUgdGhhdCBkdXJpbmcgdGhlIGluaXRpYWwgaGFuZHNoYWtlIG9uIHRoZSB3cml0ZSBzdHJlYW0gYW4gQUJPUlRFRCBlcnJvclxuICogc2lnbmFscyB0aGF0IHdlIHNob3VsZCBkaXNjYXJkIG91ciBzdHJlYW0gdG9rZW4gKGkuZS4gaXQgaXMgcGVybWFuZW50KS4gVGhpc1xuICogbWVhbnMgYSBoYW5kc2hha2UgZXJyb3Igc2hvdWxkIGJlIGNsYXNzaWZpZWQgd2l0aCBpc1Blcm1hbmVudEVycm9yLCBhYm92ZS5cbiAqL1xuLyoqXG4gKiBNYXBzIGFuIGVycm9yIENvZGUgZnJvbSBHUlBDIHN0YXR1cyBjb2RlIG51bWJlciwgbGlrZSAwLCAxLCBvciAxNC4gVGhlc2VcbiAqIGFyZSBub3QgdGhlIHNhbWUgYXMgSFRUUCBzdGF0dXMgY29kZXMuXG4gKlxuICogQHJldHVybnMgVGhlIENvZGUgZXF1aXZhbGVudCB0byB0aGUgZ2l2ZW4gR1JQQyBzdGF0dXMgY29kZS4gRmFpbHMgaWYgdGhlcmVcbiAqICAgICBpcyBubyBtYXRjaC5cbiAqL1xuZnVuY3Rpb24gX19QUklWQVRFX21hcENvZGVGcm9tUnBjQ29kZShlKSB7XG4gICAgaWYgKHZvaWQgMCA9PT0gZSkgXG4gICAgLy8gVGhpcyBzaG91bGRuJ3Qgbm9ybWFsbHkgaGFwcGVuLCBidXQgaW4gY2VydGFpbiBlcnJvciBjYXNlcyAobGlrZSB0cnlpbmdcbiAgICAvLyB0byBzZW5kIGludmFsaWQgcHJvdG8gbWVzc2FnZXMpIHdlIG1heSBnZXQgYW4gZXJyb3Igd2l0aCBubyBHUlBDIGNvZGUuXG4gICAgcmV0dXJuIF9fUFJJVkFURV9sb2dFcnJvcihcIkdSUEMgZXJyb3IgaGFzIG5vIC5jb2RlXCIpLCBDLlVOS05PV047XG4gICAgc3dpdGNoIChlKSB7XG4gICAgICBjYXNlIGNlLk9LOlxuICAgICAgICByZXR1cm4gQy5PSztcblxuICAgICAgY2FzZSBjZS5DQU5DRUxMRUQ6XG4gICAgICAgIHJldHVybiBDLkNBTkNFTExFRDtcblxuICAgICAgY2FzZSBjZS5VTktOT1dOOlxuICAgICAgICByZXR1cm4gQy5VTktOT1dOO1xuXG4gICAgICBjYXNlIGNlLkRFQURMSU5FX0VYQ0VFREVEOlxuICAgICAgICByZXR1cm4gQy5ERUFETElORV9FWENFRURFRDtcblxuICAgICAgY2FzZSBjZS5SRVNPVVJDRV9FWEhBVVNURUQ6XG4gICAgICAgIHJldHVybiBDLlJFU09VUkNFX0VYSEFVU1RFRDtcblxuICAgICAgY2FzZSBjZS5JTlRFUk5BTDpcbiAgICAgICAgcmV0dXJuIEMuSU5URVJOQUw7XG5cbiAgICAgIGNhc2UgY2UuVU5BVkFJTEFCTEU6XG4gICAgICAgIHJldHVybiBDLlVOQVZBSUxBQkxFO1xuXG4gICAgICBjYXNlIGNlLlVOQVVUSEVOVElDQVRFRDpcbiAgICAgICAgcmV0dXJuIEMuVU5BVVRIRU5USUNBVEVEO1xuXG4gICAgICBjYXNlIGNlLklOVkFMSURfQVJHVU1FTlQ6XG4gICAgICAgIHJldHVybiBDLklOVkFMSURfQVJHVU1FTlQ7XG5cbiAgICAgIGNhc2UgY2UuTk9UX0ZPVU5EOlxuICAgICAgICByZXR1cm4gQy5OT1RfRk9VTkQ7XG5cbiAgICAgIGNhc2UgY2UuQUxSRUFEWV9FWElTVFM6XG4gICAgICAgIHJldHVybiBDLkFMUkVBRFlfRVhJU1RTO1xuXG4gICAgICBjYXNlIGNlLlBFUk1JU1NJT05fREVOSUVEOlxuICAgICAgICByZXR1cm4gQy5QRVJNSVNTSU9OX0RFTklFRDtcblxuICAgICAgY2FzZSBjZS5GQUlMRURfUFJFQ09ORElUSU9OOlxuICAgICAgICByZXR1cm4gQy5GQUlMRURfUFJFQ09ORElUSU9OO1xuXG4gICAgICBjYXNlIGNlLkFCT1JURUQ6XG4gICAgICAgIHJldHVybiBDLkFCT1JURUQ7XG5cbiAgICAgIGNhc2UgY2UuT1VUX09GX1JBTkdFOlxuICAgICAgICByZXR1cm4gQy5PVVRfT0ZfUkFOR0U7XG5cbiAgICAgIGNhc2UgY2UuVU5JTVBMRU1FTlRFRDpcbiAgICAgICAgcmV0dXJuIEMuVU5JTVBMRU1FTlRFRDtcblxuICAgICAgY2FzZSBjZS5EQVRBX0xPU1M6XG4gICAgICAgIHJldHVybiBDLkRBVEFfTE9TUztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhaWwoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29udmVydHMgYW4gSFRUUCByZXNwb25zZSdzIGVycm9yIHN0YXR1cyB0byB0aGUgZXF1aXZhbGVudCBlcnJvciBjb2RlLlxuICpcbiAqIEBwYXJhbSBzdGF0dXMgLSBBbiBIVFRQIGVycm9yIHJlc3BvbnNlIHN0YXR1cyAoXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gKiBcIlVOS05PV05cIiwgZXRjLilcbiAqIEByZXR1cm5zIFRoZSBlcXVpdmFsZW50IENvZGUuIE5vbi1tYXRjaGluZyByZXNwb25zZXMgYXJlIG1hcHBlZCB0b1xuICogICAgIENvZGUuVU5LTk9XTi5cbiAqLyAobGUgPSBjZSB8fCAoY2UgPSB7fSkpW2xlLk9LID0gMF0gPSBcIk9LXCIsIGxlW2xlLkNBTkNFTExFRCA9IDFdID0gXCJDQU5DRUxMRURcIiwgXG5sZVtsZS5VTktOT1dOID0gMl0gPSBcIlVOS05PV05cIiwgbGVbbGUuSU5WQUxJRF9BUkdVTUVOVCA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCIsIFxubGVbbGUuREVBRExJTkVfRVhDRUVERUQgPSA0XSA9IFwiREVBRExJTkVfRVhDRUVERURcIiwgbGVbbGUuTk9UX0ZPVU5EID0gNV0gPSBcIk5PVF9GT1VORFwiLCBcbmxlW2xlLkFMUkVBRFlfRVhJU1RTID0gNl0gPSBcIkFMUkVBRFlfRVhJU1RTXCIsIGxlW2xlLlBFUk1JU1NJT05fREVOSUVEID0gN10gPSBcIlBFUk1JU1NJT05fREVOSUVEXCIsIFxubGVbbGUuVU5BVVRIRU5USUNBVEVEID0gMTZdID0gXCJVTkFVVEhFTlRJQ0FURURcIiwgbGVbbGUuUkVTT1VSQ0VfRVhIQVVTVEVEID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiLCBcbmxlW2xlLkZBSUxFRF9QUkVDT05ESVRJT04gPSA5XSA9IFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLCBsZVtsZS5BQk9SVEVEID0gMTBdID0gXCJBQk9SVEVEXCIsIFxubGVbbGUuT1VUX09GX1JBTkdFID0gMTFdID0gXCJPVVRfT0ZfUkFOR0VcIiwgbGVbbGUuVU5JTVBMRU1FTlRFRCA9IDEyXSA9IFwiVU5JTVBMRU1FTlRFRFwiLCBcbmxlW2xlLklOVEVSTkFMID0gMTNdID0gXCJJTlRFUk5BTFwiLCBsZVtsZS5VTkFWQUlMQUJMRSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIiwgbGVbbGUuREFUQV9MT1NTID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIGdsb2JhbCwgc2luZ2xldG9uIGluc3RhbmNlIG9mIFRlc3RpbmdIb29rc1NwaS5cbiAqXG4gKiBUaGlzIHZhcmlhYmxlIHdpbGwgYmUgYG51bGxgIGluIGFsbCBjYXNlcyBfZXhjZXB0XyB3aGVuIHJ1bm5pbmcgZnJvbVxuICogaW50ZWdyYXRpb24gdGVzdHMgdGhhdCBoYXZlIHJlZ2lzdGVyZWQgY2FsbGJhY2tzIHRvIGJlIG5vdGlmaWVkIG9mIGV2ZW50c1xuICogdGhhdCBoYXBwZW4gZHVyaW5nIHRoZSB0ZXN0IGV4ZWN1dGlvbi5cbiAqL1xubGV0IGhlID0gbnVsbDtcblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYHRlc3RpbmdIb29rc1NwaWAgb2JqZWN0LlxuICogQHBhcmFtIGluc3RhbmNlIHRoZSBpbnN0YW5jZSB0byBzZXQuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBQbGF0Zm9ybSdzICdUZXh0RW5jb2RlcicgaW1wbGVtZW50YXRpb24uXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9uZXdUZXh0RW5jb2RlcigpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyO1xufVxuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBQbGF0Zm9ybSdzICdUZXh0RGVjb2RlcicgaW1wbGVtZW50YXRpb24uXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCBQZSA9IG5ldyBibG9vbUJsb2IuSW50ZWdlcihbIDQyOTQ5NjcyOTUsIDQyOTQ5NjcyOTUgXSwgMCk7XG5cbi8vIEhhc2ggYSBzdHJpbmcgdXNpbmcgbWQ1IGhhc2hpbmcgYWxnb3JpdGhtLlxuZnVuY3Rpb24gX19QUklWQVRFX2dldE1kNUhhc2hWYWx1ZShlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9uZXdUZXh0RW5jb2RlcigpLmVuY29kZShlKSwgbiA9IG5ldyBibG9vbUJsb2IuTWQ1O1xuICAgIHJldHVybiBuLnVwZGF0ZSh0KSwgbmV3IFVpbnQ4QXJyYXkobi5kaWdlc3QoKSk7XG59XG5cbi8vIEludGVycHJldCB0aGUgMTYgYnl0ZXMgYXJyYXkgYXMgdHdvIDY0LWJpdCB1bnNpZ25lZCBpbnRlZ2VycywgZW5jb2RlZCB1c2luZ1xuLy8gMuKAmXMgY29tcGxlbWVudCB1c2luZyBsaXR0bGUgZW5kaWFuLlxuZnVuY3Rpb24gX19QUklWQVRFX2dldDY0Qml0VWludHMoZSkge1xuICAgIGNvbnN0IHQgPSBuZXcgRGF0YVZpZXcoZS5idWZmZXIpLCBuID0gdC5nZXRVaW50MzIoMCwgLyogbGl0dGxlRW5kaWFuPSAqLyAhMCksIHIgPSB0LmdldFVpbnQzMig0LCAvKiBsaXR0bGVFbmRpYW49ICovICEwKSwgaSA9IHQuZ2V0VWludDMyKDgsIC8qIGxpdHRsZUVuZGlhbj0gKi8gITApLCBzID0gdC5nZXRVaW50MzIoMTIsIC8qIGxpdHRsZUVuZGlhbj0gKi8gITApO1xuICAgIHJldHVybiBbIG5ldyBibG9vbUJsb2IuSW50ZWdlcihbIG4sIHIgXSwgMCksIG5ldyBibG9vbUJsb2IuSW50ZWdlcihbIGksIHMgXSwgMCkgXTtcbn1cblxuY2xhc3MgQmxvb21GaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4pIHtcbiAgICAgICAgaWYgKHRoaXMuYml0bWFwID0gZSwgdGhpcy5wYWRkaW5nID0gdCwgdGhpcy5oYXNoQ291bnQgPSBuLCB0IDwgMCB8fCB0ID49IDgpIHRocm93IG5ldyBfX1BSSVZBVEVfQmxvb21GaWx0ZXJFcnJvcihgSW52YWxpZCBwYWRkaW5nOiAke3R9YCk7XG4gICAgICAgIGlmIChuIDwgMCkgdGhyb3cgbmV3IF9fUFJJVkFURV9CbG9vbUZpbHRlckVycm9yKGBJbnZhbGlkIGhhc2ggY291bnQ6ICR7bn1gKTtcbiAgICAgICAgaWYgKGUubGVuZ3RoID4gMCAmJiAwID09PSB0aGlzLmhhc2hDb3VudCkgXG4gICAgICAgIC8vIE9ubHkgZW1wdHkgYmxvb20gZmlsdGVyIGNhbiBoYXZlIDAgaGFzaCBjb3VudC5cbiAgICAgICAgdGhyb3cgbmV3IF9fUFJJVkFURV9CbG9vbUZpbHRlckVycm9yKGBJbnZhbGlkIGhhc2ggY291bnQ6ICR7bn1gKTtcbiAgICAgICAgaWYgKDAgPT09IGUubGVuZ3RoICYmIDAgIT09IHQpIFxuICAgICAgICAvLyBFbXB0eSBibG9vbSBmaWx0ZXIgc2hvdWxkIGhhdmUgMCBwYWRkaW5nLlxuICAgICAgICB0aHJvdyBuZXcgX19QUklWQVRFX0Jsb29tRmlsdGVyRXJyb3IoYEludmFsaWQgcGFkZGluZyB3aGVuIGJpdG1hcCBsZW5ndGggaXMgMDogJHt0fWApO1xuICAgICAgICB0aGlzLkllID0gOCAqIGUubGVuZ3RoIC0gdCwgXG4gICAgICAgIC8vIFNldCB0aGUgYml0IGNvdW50IGluIEludGVnZXIgdG8gYXZvaWQgcmVwZXRpdGlvbiBpbiBtaWdodENvbnRhaW4oKS5cbiAgICAgICAgdGhpcy5UZSA9IGJsb29tQmxvYi5JbnRlZ2VyLmZyb21OdW1iZXIodGhpcy5JZSk7XG4gICAgfVxuICAgIC8vIENhbGN1bGF0ZSB0aGUgaXRoIGhhc2ggdmFsdWUgYmFzZWQgb24gdGhlIGhhc2hlZCA2NGJpdCBpbnRlZ2VycyxcbiAgICAvLyBhbmQgY2FsY3VsYXRlIGl0cyBjb3JyZXNwb25kaW5nIGJpdCBpbmRleCBpbiB0aGUgYml0bWFwIHRvIGJlIGNoZWNrZWQuXG4gICAgRWUoZSwgdCwgbikge1xuICAgICAgICAvLyBDYWxjdWxhdGUgaGFzaGVkIHZhbHVlIGgoaSkgPSBoMSArIChpICogaDIpLlxuICAgICAgICBsZXQgciA9IGUuYWRkKHQubXVsdGlwbHkoYmxvb21CbG9iLkludGVnZXIuZnJvbU51bWJlcihuKSkpO1xuICAgICAgICAvLyBXcmFwIGlmIGhhc2ggdmFsdWUgb3ZlcmZsb3cgNjRiaXQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IHIuY29tcGFyZShQZSkgJiYgKHIgPSBuZXcgYmxvb21CbG9iLkludGVnZXIoWyByLmdldEJpdHMoMCksIHIuZ2V0Qml0cygxKSBdLCAwKSksIFxuICAgICAgICByLm1vZHVsbyh0aGlzLlRlKS50b051bWJlcigpO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gd2hldGhlciB0aGUgYml0IG9uIHRoZSBnaXZlbiBpbmRleCBpbiB0aGUgYml0bWFwIGlzIHNldCB0byAxLlxuICAgIGRlKGUpIHtcbiAgICAgICAgcmV0dXJuIDAgIT0gKHRoaXMuYml0bWFwW01hdGguZmxvb3IoZSAvIDgpXSAmIDEgPDwgZSAlIDgpO1xuICAgIH1cbiAgICBtaWdodENvbnRhaW4oZSkge1xuICAgICAgICAvLyBFbXB0eSBiaXRtYXAgc2hvdWxkIGFsd2F5cyByZXR1cm4gZmFsc2Ugb24gbWVtYmVyc2hpcCBjaGVjay5cbiAgICAgICAgaWYgKDAgPT09IHRoaXMuSWUpIHJldHVybiAhMTtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9nZXRNZDVIYXNoVmFsdWUoZSksIFtuLCByXSA9IF9fUFJJVkFURV9nZXQ2NEJpdFVpbnRzKHQpO1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHRoaXMuaGFzaENvdW50OyBlKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLkVlKG4sIHIsIGUpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRlKHQpKSByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlIGJsb29tIGZpbHRlciBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LiAqLyAgICBzdGF0aWMgY3JlYXRlKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IGUgJSA4ID09IDAgPyAwIDogOCAtIGUgJSA4LCBpID0gbmV3IFVpbnQ4QXJyYXkoTWF0aC5jZWlsKGUgLyA4KSksIHMgPSBuZXcgQmxvb21GaWx0ZXIoaSwgciwgdCk7XG4gICAgICAgIHJldHVybiBuLmZvckVhY2goKGUgPT4gcy5pbnNlcnQoZSkpKSwgcztcbiAgICB9XG4gICAgaW5zZXJ0KGUpIHtcbiAgICAgICAgaWYgKDAgPT09IHRoaXMuSWUpIHJldHVybjtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9nZXRNZDVIYXNoVmFsdWUoZSksIFtuLCByXSA9IF9fUFJJVkFURV9nZXQ2NEJpdFVpbnRzKHQpO1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHRoaXMuaGFzaENvdW50OyBlKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLkVlKG4sIHIsIGUpO1xuICAgICAgICAgICAgdGhpcy5BZSh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBBZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLmZsb29yKGUgLyA4KSwgbiA9IGUgJSA4O1xuICAgICAgICB0aGlzLmJpdG1hcFt0XSB8PSAxIDw8IG47XG4gICAgfVxufVxuXG5jbGFzcyBfX1BSSVZBVEVfQmxvb21GaWx0ZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5uYW1lID0gXCJCbG9vbUZpbHRlckVycm9yXCI7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBldmVudCBmcm9tIHRoZSBSZW1vdGVTdG9yZS4gSXQgaXMgc3BsaXQgaW50byB0YXJnZXRDaGFuZ2VzIChjaGFuZ2VzIHRvIHRoZVxuICogc3RhdGUgb3IgdGhlIHNldCBvZiBkb2N1bWVudHMgaW4gb3VyIHdhdGNoZWQgdGFyZ2V0cykgYW5kIGRvY3VtZW50VXBkYXRlc1xuICogKGNoYW5nZXMgdG8gdGhlIGFjdHVhbCBkb2N1bWVudHMpLlxuICovIGNsYXNzIFJlbW90ZUV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgc25hcHNob3QgdmVyc2lvbiB0aGlzIGV2ZW50IGJyaW5ncyB1cyB1cCB0bywgb3IgTUlOIGlmIG5vdCBzZXQuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqXG4gICAgICogQSBtYXAgZnJvbSB0YXJnZXQgdG8gY2hhbmdlcyB0byB0aGUgdGFyZ2V0LiBTZWUgVGFyZ2V0Q2hhbmdlLlxuICAgICAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIHRhcmdldHMgdGhhdCBpcyBrbm93biB0byBiZSBpbmNvbnNpc3RlbnQsIGFuZCB0aGUgcHVycG9zZSBmb3JcbiAgICAgKiByZS1saXN0ZW5pbmcuIExpc3RlbnMgZm9yIHRoZXNlIHRhcmdldHMgc2hvdWxkIGJlIHJlLWVzdGFibGlzaGVkIHdpdGhvdXRcbiAgICAgKiByZXN1bWUgdG9rZW5zLlxuICAgICAqL1xuICAgIG4sIFxuICAgIC8qKlxuICAgICAqIEEgc2V0IG9mIHdoaWNoIGRvY3VtZW50cyBoYXZlIGNoYW5nZWQgb3IgYmVlbiBkZWxldGVkLCBhbG9uZyB3aXRoIHRoZVxuICAgICAqIGRvYydzIG5ldyB2YWx1ZXMgKGlmIG5vdCBkZWxldGVkKS5cbiAgICAgKi9cbiAgICByLCBcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiB3aGljaCBkb2N1bWVudCB1cGRhdGVzIGFyZSBkdWUgb25seSB0byBsaW1ibyByZXNvbHV0aW9uIHRhcmdldHMuXG4gICAgICovXG4gICAgaSkge1xuICAgICAgICB0aGlzLnNuYXBzaG90VmVyc2lvbiA9IGUsIHRoaXMudGFyZ2V0Q2hhbmdlcyA9IHQsIHRoaXMudGFyZ2V0TWlzbWF0Y2hlcyA9IG4sIHRoaXMuZG9jdW1lbnRVcGRhdGVzID0gciwgXG4gICAgICAgIHRoaXMucmVzb2x2ZWRMaW1ib0RvY3VtZW50cyA9IGk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhBQ0s6IFZpZXdzIHJlcXVpcmUgUmVtb3RlRXZlbnRzIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB2aWV3IGlzXG4gICAgICogQ1VSUkVOVCwgYnV0IHNlY29uZGFyeSB0YWJzIGRvbid0IHJlY2VpdmUgcmVtb3RlIGV2ZW50cy4gU28gdGhpcyBtZXRob2QgaXNcbiAgICAgKiB1c2VkIHRvIGNyZWF0ZSBhIHN5bnRoZXNpemVkIFJlbW90ZUV2ZW50IHRoYXQgY2FuIGJlIHVzZWQgdG8gYXBwbHkgYVxuICAgICAqIENVUlJFTlQgc3RhdHVzIGNoYW5nZSB0byBhIFZpZXcsIGZvciBxdWVyaWVzIGV4ZWN1dGVkIGluIGEgZGlmZmVyZW50IHRhYi5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5XG4gICAgc3RhdGljIGNyZWF0ZVN5bnRoZXNpemVkUmVtb3RlRXZlbnRGb3JDdXJyZW50Q2hhbmdlKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IG5ldyBNYXA7XG4gICAgICAgIHJldHVybiByLnNldChlLCBUYXJnZXRDaGFuZ2UuY3JlYXRlU3ludGhlc2l6ZWRUYXJnZXRDaGFuZ2VGb3JDdXJyZW50Q2hhbmdlKGUsIHQsIG4pKSwgXG4gICAgICAgIG5ldyBSZW1vdGVFdmVudChTbmFwc2hvdFZlcnNpb24ubWluKCksIHIsIG5ldyBTb3J0ZWRNYXAoX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IpLCBfX1BSSVZBVEVfbXV0YWJsZURvY3VtZW50TWFwKCksIF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBUYXJnZXRDaGFuZ2Ugc3BlY2lmaWVzIHRoZSBzZXQgb2YgY2hhbmdlcyBmb3IgYSBzcGVjaWZpYyB0YXJnZXQgYXMgcGFydCBvZlxuICogYSBSZW1vdGVFdmVudC4gVGhlc2UgY2hhbmdlcyB0cmFjayB3aGljaCBkb2N1bWVudHMgYXJlIGFkZGVkLCBtb2RpZmllZCBvclxuICogcmVtb3ZlZCwgYXMgd2VsbCBhcyB0aGUgdGFyZ2V0J3MgcmVzdW1lIHRva2VuIGFuZCB3aGV0aGVyIHRoZSB0YXJnZXQgaXNcbiAqIG1hcmtlZCBDVVJSRU5ULlxuICogVGhlIGFjdHVhbCBjaGFuZ2VzICp0byogZG9jdW1lbnRzIGFyZSBub3QgcGFydCBvZiB0aGUgVGFyZ2V0Q2hhbmdlIHNpbmNlXG4gKiBkb2N1bWVudHMgbWF5IGJlIHBhcnQgb2YgbXVsdGlwbGUgdGFyZ2V0cy5cbiAqLyBjbGFzcyBUYXJnZXRDaGFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIEFuIG9wYXF1ZSwgc2VydmVyLWFzc2lnbmVkIHRva2VuIHRoYXQgYWxsb3dzIHdhdGNoaW5nIGEgcXVlcnkgdG8gYmUgcmVzdW1lZFxuICAgICAqIGFmdGVyIGRpc2Nvbm5lY3Rpbmcgd2l0aG91dCByZXRyYW5zbWl0dGluZyBhbGwgdGhlIGRhdGEgdGhhdCBtYXRjaGVzIHRoZVxuICAgICAqIHF1ZXJ5LiBUaGUgcmVzdW1lIHRva2VuIGVzc2VudGlhbGx5IGlkZW50aWZpZXMgYSBwb2ludCBpbiB0aW1lIGZyb20gd2hpY2hcbiAgICAgKiB0aGUgc2VydmVyIHNob3VsZCByZXN1bWUgc2VuZGluZyByZXN1bHRzLlxuICAgICAqL1xuICAgIGUsIFxuICAgIC8qKlxuICAgICAqIFRoZSBcImN1cnJlbnRcIiAoc3luY2VkKSBzdGF0dXMgb2YgdGhpcyB0YXJnZXQuIE5vdGUgdGhhdCBcImN1cnJlbnRcIlxuICAgICAqIGhhcyBzcGVjaWFsIG1lYW5pbmcgaW4gdGhlIFJQQyBwcm90b2NvbCB0aGF0IGltcGxpZXMgdGhhdCBhIHRhcmdldCBpc1xuICAgICAqIGJvdGggdXAtdG8tZGF0ZSBhbmQgY29uc2lzdGVudCB3aXRoIHRoZSByZXN0IG9mIHRoZSB3YXRjaCBzdHJlYW0uXG4gICAgICovXG4gICAgdCwgXG4gICAgLyoqXG4gICAgICogVGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCB3ZXJlIG5ld2x5IGFzc2lnbmVkIHRvIHRoaXMgdGFyZ2V0IGFzIHBhcnQgb2ZcbiAgICAgKiB0aGlzIHJlbW90ZSBldmVudC5cbiAgICAgKi9cbiAgICBuLCBcbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIGRvY3VtZW50cyB0aGF0IHdlcmUgYWxyZWFkeSBhc3NpZ25lZCB0byB0aGlzIHRhcmdldCBidXQgcmVjZWl2ZWRcbiAgICAgKiBhbiB1cGRhdGUgZHVyaW5nIHRoaXMgcmVtb3RlIGV2ZW50LlxuICAgICAqL1xuICAgIHIsIFxuICAgIC8qKlxuICAgICAqIFRoZSBzZXQgb2YgZG9jdW1lbnRzIHRoYXQgd2VyZSByZW1vdmVkIGZyb20gdGhpcyB0YXJnZXQgYXMgcGFydCBvZiB0aGlzXG4gICAgICogcmVtb3RlIGV2ZW50LlxuICAgICAqL1xuICAgIGkpIHtcbiAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IGUsIHRoaXMuY3VycmVudCA9IHQsIHRoaXMuYWRkZWREb2N1bWVudHMgPSBuLCB0aGlzLm1vZGlmaWVkRG9jdW1lbnRzID0gciwgXG4gICAgICAgIHRoaXMucmVtb3ZlZERvY3VtZW50cyA9IGk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gY3JlYXRlIGEgc3ludGhlc2l6ZWQgVGFyZ2V0Q2hhbmdlcyB0aGF0IGNhbiBiZSB1c2VkIHRvXG4gICAgICogYXBwbHkgYSBDVVJSRU5UIHN0YXR1cyBjaGFuZ2UgdG8gYSBWaWV3IChmb3IgcXVlcmllcyBleGVjdXRlZCBpbiBhIGRpZmZlcmVudFxuICAgICAqIHRhYikgb3IgZm9yIG5ldyBxdWVyaWVzICh0byByYWlzZSBzbmFwc2hvdHMgd2l0aCBjb3JyZWN0IENVUlJFTlQgc3RhdHVzKS5cbiAgICAgKi8gICAgc3RhdGljIGNyZWF0ZVN5bnRoZXNpemVkVGFyZ2V0Q2hhbmdlRm9yQ3VycmVudENoYW5nZShlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgVGFyZ2V0Q2hhbmdlKG4sIHQsIF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpLCBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKSwgX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIGNoYW5nZWQgZG9jdW1lbnQgYW5kIGEgbGlzdCBvZiB0YXJnZXQgaWRzIHRvIHdoaWNoIHRoaXMgY2hhbmdlXG4gKiBhcHBsaWVzLlxuICpcbiAqIElmIGRvY3VtZW50IGhhcyBiZWVuIGRlbGV0ZWQgTm9Eb2N1bWVudCB3aWxsIGJlIHByb3ZpZGVkLlxuICovIGNsYXNzIF9fUFJJVkFURV9Eb2N1bWVudFdhdGNoQ2hhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIG5ldyBkb2N1bWVudCBhcHBsaWVzIHRvIGFsbCBvZiB0aGVzZSB0YXJnZXRzLiAqL1xuICAgIGUsIFxuICAgIC8qKiBUaGUgbmV3IGRvY3VtZW50IGlzIHJlbW92ZWQgZnJvbSBhbGwgb2YgdGhlc2UgdGFyZ2V0cy4gKi9cbiAgICB0LCBcbiAgICAvKiogVGhlIGtleSBvZiB0aGUgZG9jdW1lbnQgZm9yIHRoaXMgY2hhbmdlLiAqL1xuICAgIG4sIFxuICAgIC8qKlxuICAgICAqIFRoZSBuZXcgZG9jdW1lbnQgb3IgTm9Eb2N1bWVudCBpZiBpdCB3YXMgZGVsZXRlZC4gSXMgbnVsbCBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCB3ZW50IG91dCBvZiB2aWV3IHdpdGhvdXQgdGhlIHNlcnZlciBzZW5kaW5nIGEgbmV3IGRvY3VtZW50LlxuICAgICAqL1xuICAgIHIpIHtcbiAgICAgICAgdGhpcy5SZSA9IGUsIHRoaXMucmVtb3ZlZFRhcmdldElkcyA9IHQsIHRoaXMua2V5ID0gbiwgdGhpcy5WZSA9IHI7XG4gICAgfVxufVxuXG5jbGFzcyBfX1BSSVZBVEVfRXhpc3RlbmNlRmlsdGVyQ2hhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSBlLCB0aGlzLm1lID0gdDtcbiAgICB9XG59XG5cbmNsYXNzIF9fUFJJVkFURV9XYXRjaFRhcmdldENoYW5nZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFdoYXQga2luZCBvZiBjaGFuZ2Ugb2NjdXJyZWQgdG8gdGhlIHdhdGNoIHRhcmdldC4gKi9cbiAgICBlLCBcbiAgICAvKiogVGhlIHRhcmdldCBJRHMgdGhhdCB3ZXJlIGFkZGVkL3JlbW92ZWQvc2V0LiAqL1xuICAgIHQsIFxuICAgIC8qKlxuICAgICAqIEFuIG9wYXF1ZSwgc2VydmVyLWFzc2lnbmVkIHRva2VuIHRoYXQgYWxsb3dzIHdhdGNoaW5nIGEgdGFyZ2V0IHRvIGJlXG4gICAgICogcmVzdW1lZCBhZnRlciBkaXNjb25uZWN0aW5nIHdpdGhvdXQgcmV0cmFuc21pdHRpbmcgYWxsIHRoZSBkYXRhIHRoYXRcbiAgICAgKiBtYXRjaGVzIHRoZSB0YXJnZXQuIFRoZSByZXN1bWUgdG9rZW4gZXNzZW50aWFsbHkgaWRlbnRpZmllcyBhIHBvaW50IGluXG4gICAgICogdGltZSBmcm9tIHdoaWNoIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlc3VtZSBzZW5kaW5nIHJlc3VsdHMuXG4gICAgICovXG4gICAgbiA9IEJ5dGVTdHJpbmcuRU1QVFlfQllURV9TVFJJTkdcbiAgICAvKiogQW4gUlBDIGVycm9yIGluZGljYXRpbmcgd2h5IHRoZSB3YXRjaCBmYWlsZWQuICovICwgciA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IGUsIHRoaXMudGFyZ2V0SWRzID0gdCwgdGhpcy5yZXN1bWVUb2tlbiA9IG4sIHRoaXMuY2F1c2UgPSByO1xuICAgIH1cbn1cblxuLyoqIFRyYWNrcyB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgYSBXYXRjaCB0YXJnZXQuICovIGNsYXNzIF9fUFJJVkFURV9UYXJnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVzcG9uc2VzIChhZGRzIG9yIHJlbW92ZXMpIHRoYXQgd2UgYXJlIHdhaXRpbmcgb24uXG4gICAgICAgICAqIFdlIG9ubHkgY29uc2lkZXIgdGFyZ2V0cyBhY3RpdmUgdGhhdCBoYXZlIG5vIHBlbmRpbmcgcmVzcG9uc2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZSA9IDAsIFxuICAgICAgICAvKipcbiAgICAgICAgICogS2VlcHMgdHJhY2sgb2YgdGhlIGRvY3VtZW50IGNoYW5nZXMgc2luY2UgdGhlIGxhc3QgcmFpc2VkIHNuYXBzaG90LlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGVzZSBjaGFuZ2VzIGFyZSBjb250aW51b3VzbHkgdXBkYXRlZCBhcyB3ZSByZWNlaXZlIGRvY3VtZW50IHVwZGF0ZXMgYW5kXG4gICAgICAgICAqIGFsd2F5cyByZWZsZWN0IHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzIGFnYWluc3QgdGhlIGxhc3QgaXNzdWVkIHNuYXBzaG90LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZSA9IF9fUFJJVkFURV9zbmFwc2hvdENoYW5nZXNNYXAoKSwgXG4gICAgICAgIC8qKiBTZWUgcHVibGljIGdldHRlcnMgZm9yIGV4cGxhbmF0aW9ucyBvZiB0aGVzZSBmaWVsZHMuICovXG4gICAgICAgIHRoaXMucGUgPSBCeXRlU3RyaW5nLkVNUFRZX0JZVEVfU1RSSU5HLCB0aGlzLnllID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGlzIHRhcmdldCBzdGF0ZSBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIG5leHQgc25hcHNob3QuIFdlXG4gICAgICAgICAqIGluaXRpYWxpemUgdG8gdHJ1ZSBzbyB0aGF0IG5ld2x5LWFkZGVkIHRhcmdldHMgYXJlIGluY2x1ZGVkIGluIHRoZSBuZXh0XG4gICAgICAgICAqIFJlbW90ZUV2ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53ZSA9ICEwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgdGFyZ2V0IGhhcyBiZWVuIG1hcmtlZCAnY3VycmVudCcuXG4gICAgICpcbiAgICAgKiAnQ3VycmVudCcgaGFzIHNwZWNpYWwgbWVhbmluZyBpbiB0aGUgUlBDIHByb3RvY29sOiBJdCBpbXBsaWVzIHRoYXQgdGhlXG4gICAgICogV2F0Y2ggYmFja2VuZCBoYXMgc2VudCB1cyBhbGwgY2hhbmdlcyB1cCB0byB0aGUgcG9pbnQgYXQgd2hpY2ggdGhlIHRhcmdldFxuICAgICAqIHdhcyBhZGRlZCBhbmQgdGhhdCB0aGUgdGFyZ2V0IGlzIGNvbnNpc3RlbnQgd2l0aCB0aGUgcmVzdCBvZiB0aGUgd2F0Y2hcbiAgICAgKiBzdHJlYW0uXG4gICAgICovICAgIGdldCBjdXJyZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZTtcbiAgICB9XG4gICAgLyoqIFRoZSBsYXN0IHJlc3VtZSB0b2tlbiBzZW50IHRvIHVzIGZvciB0aGlzIHRhcmdldC4gKi8gICAgZ2V0IHJlc3VtZVRva2VuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wZTtcbiAgICB9XG4gICAgLyoqIFdoZXRoZXIgdGhpcyB0YXJnZXQgaGFzIHBlbmRpbmcgdGFyZ2V0IGFkZHMgb3IgdGFyZ2V0IHJlbW92ZXMuICovICAgIGdldCBTZSgpIHtcbiAgICAgICAgcmV0dXJuIDAgIT09IHRoaXMuZmU7XG4gICAgfVxuICAgIC8qKiBXaGV0aGVyIHdlIGhhdmUgbW9kaWZpZWQgYW55IHN0YXRlIHRoYXQgc2hvdWxkIHRyaWdnZXIgYSBzbmFwc2hvdC4gKi8gICAgZ2V0IGJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgcmVzdW1lIHRva2VuIHRvIHRoZSBUYXJnZXRDaGFuZ2UsIGJ1dCBvbmx5IHdoZW4gaXQgaGFzIGEgbmV3XG4gICAgICogdmFsdWUuIEVtcHR5IHJlc3VtZVRva2VucyBhcmUgZGlzY2FyZGVkLlxuICAgICAqLyAgICBEZShlKSB7XG4gICAgICAgIGUuYXBwcm94aW1hdGVCeXRlU2l6ZSgpID4gMCAmJiAodGhpcy53ZSA9ICEwLCB0aGlzLnBlID0gZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0YXJnZXQgY2hhbmdlIGZyb20gdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiBUbyByZXNldCB0aGUgZG9jdW1lbnQgY2hhbmdlcyBhZnRlciByYWlzaW5nIHRoaXMgc25hcHNob3QsIGNhbGxcbiAgICAgKiBgY2xlYXJQZW5kaW5nQ2hhbmdlcygpYC5cbiAgICAgKi8gICAgQ2UoKSB7XG4gICAgICAgIGxldCBlID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCksIHQgPSBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKSwgbiA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZS5mb3JFYWNoKCgociwgaSkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgIGNhc2UgMCAvKiBDaGFuZ2VUeXBlLkFkZGVkICovIDpcbiAgICAgICAgICAgICAgICBlID0gZS5hZGQocik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyIC8qIENoYW5nZVR5cGUuTW9kaWZpZWQgKi8gOlxuICAgICAgICAgICAgICAgIHQgPSB0LmFkZChyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovIDpcbiAgICAgICAgICAgICAgICBuID0gbi5hZGQocik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBmYWlsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgbmV3IFRhcmdldENoYW5nZSh0aGlzLnBlLCB0aGlzLnllLCBlLCB0LCBuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBkb2N1bWVudCBjaGFuZ2VzIGFuZCBzZXRzIGBoYXNQZW5kaW5nQ2hhbmdlc2AgdG8gZmFsc2UuXG4gICAgICovICAgIHZlKCkge1xuICAgICAgICB0aGlzLndlID0gITEsIHRoaXMuZ2UgPSBfX1BSSVZBVEVfc25hcHNob3RDaGFuZ2VzTWFwKCk7XG4gICAgfVxuICAgIEZlKGUsIHQpIHtcbiAgICAgICAgdGhpcy53ZSA9ICEwLCB0aGlzLmdlID0gdGhpcy5nZS5pbnNlcnQoZSwgdCk7XG4gICAgfVxuICAgIE1lKGUpIHtcbiAgICAgICAgdGhpcy53ZSA9ICEwLCB0aGlzLmdlID0gdGhpcy5nZS5yZW1vdmUoZSk7XG4gICAgfVxuICAgIHhlKCkge1xuICAgICAgICB0aGlzLmZlICs9IDE7XG4gICAgfVxuICAgIE9lKCkge1xuICAgICAgICB0aGlzLmZlIC09IDEsIF9fUFJJVkFURV9oYXJkQXNzZXJ0KHRoaXMuZmUgPj0gMCk7XG4gICAgfVxuICAgIE5lKCkge1xuICAgICAgICB0aGlzLndlID0gITAsIHRoaXMueWUgPSAhMDtcbiAgICB9XG59XG5cbi8qKlxuICogQSBoZWxwZXIgY2xhc3MgdG8gYWNjdW11bGF0ZSB3YXRjaCBjaGFuZ2VzIGludG8gYSBSZW1vdGVFdmVudC5cbiAqL1xuY2xhc3MgX19QUklWQVRFX1dhdGNoQ2hhbmdlQWdncmVnYXRvciB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLkxlID0gZSwgXG4gICAgICAgIC8qKiBUaGUgaW50ZXJuYWwgc3RhdGUgb2YgYWxsIHRyYWNrZWQgdGFyZ2V0cy4gKi9cbiAgICAgICAgdGhpcy5CZSA9IG5ldyBNYXAsIFxuICAgICAgICAvKiogS2VlcHMgdHJhY2sgb2YgdGhlIGRvY3VtZW50cyB0byB1cGRhdGUgc2luY2UgdGhlIGxhc3QgcmFpc2VkIHNuYXBzaG90LiAqL1xuICAgICAgICB0aGlzLmtlID0gX19QUklWQVRFX211dGFibGVEb2N1bWVudE1hcCgpLCBcbiAgICAgICAgLyoqIEEgbWFwcGluZyBvZiBkb2N1bWVudCBrZXlzIHRvIHRoZWlyIHNldCBvZiB0YXJnZXQgSURzLiAqL1xuICAgICAgICB0aGlzLnFlID0gX19QUklWQVRFX2RvY3VtZW50VGFyZ2V0TWFwKCksIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBtYXAgb2YgdGFyZ2V0cyB3aXRoIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy4gVGhlc2UgdGFyZ2V0cyBhcmVcbiAgICAgICAgICoga25vd24gdG8gYmUgaW5jb25zaXN0ZW50IGFuZCB0aGVpciBsaXN0ZW5zIG5lZWRzIHRvIGJlIHJlLWVzdGFibGlzaGVkIGJ5XG4gICAgICAgICAqIFJlbW90ZVN0b3JlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5RZSA9IG5ldyBTb3J0ZWRNYXAoX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgYW5kIGFkZHMgdGhlIERvY3VtZW50V2F0Y2hDaGFuZ2UgdG8gdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMuXG4gICAgICovICAgIEtlKGUpIHtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIGUuUmUpIGUuVmUgJiYgZS5WZS5pc0ZvdW5kRG9jdW1lbnQoKSA/IHRoaXMuJGUodCwgZS5WZSkgOiB0aGlzLlVlKHQsIGUua2V5LCBlLlZlKTtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIGUucmVtb3ZlZFRhcmdldElkcykgdGhpcy5VZSh0LCBlLmtleSwgZS5WZSk7XG4gICAgfVxuICAgIC8qKiBQcm9jZXNzZXMgYW5kIGFkZHMgdGhlIFdhdGNoVGFyZ2V0Q2hhbmdlIHRvIHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzLiAqLyAgICBXZShlKSB7XG4gICAgICAgIHRoaXMuZm9yRWFjaFRhcmdldChlLCAodCA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gdGhpcy5HZSh0KTtcbiAgICAgICAgICAgIHN3aXRjaCAoZS5zdGF0ZSkge1xuICAgICAgICAgICAgICBjYXNlIDAgLyogV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5Ob0NoYW5nZSAqLyA6XG4gICAgICAgICAgICAgICAgdGhpcy56ZSh0KSAmJiBuLkRlKGUucmVzdW1lVG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMSAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLkFkZGVkICovIDpcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGRlY3JlbWVudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaFxuICAgICAgICAgICAgICAgIC8vIGZvciB0aGlzIHRhcmdldElkLlxuICAgICAgICAgICAgICAgIG4uT2UoKSwgbi5TZSB8fCBcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgZnJlc2hseSBhZGRlZCB0YXJnZXQsIHNvIHdlIG5lZWQgdG8gcmVzZXQgYW55IHN0YXRlXG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZSBoYWQgcHJldmlvdXNseS4gVGhpcyBjYW4gaGFwcGVuIGUuZy4gd2hlbiByZW1vdmUgYW5kIGFkZFxuICAgICAgICAgICAgICAgIC8vIGJhY2sgYSB0YXJnZXQgZm9yIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy5cbiAgICAgICAgICAgICAgICBuLnZlKCksIG4uRGUoZS5yZXN1bWVUb2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyIC8qIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuUmVtb3ZlZCAqLyA6XG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHJlbW92ZWQgdGFyZ2V0cyB0byB3ZSBjYW4gcG9zdC1maWx0ZXIgYW5kXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSB0YXJnZXQgY2hhbmdlcy5cbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGRlY3JlbWVudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaFxuICAgICAgICAgICAgICAgIC8vIGZvciB0aGlzIHRhcmdldElkLlxuICAgICAgICAgICAgICAgIG4uT2UoKSwgbi5TZSB8fCB0aGlzLnJlbW92ZVRhcmdldCh0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDMgLyogV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5DdXJyZW50ICovIDpcbiAgICAgICAgICAgICAgICB0aGlzLnplKHQpICYmIChuLk5lKCksIG4uRGUoZS5yZXN1bWVUb2tlbikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNCAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlc2V0ICovIDpcbiAgICAgICAgICAgICAgICB0aGlzLnplKHQpICYmIChcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgdGFyZ2V0IGFuZCBzeW50aGVzaXplcyByZW1vdmVzIGZvciBhbGwgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudHMuIFRoZSBiYWNrZW5kIHdpbGwgcmUtYWRkIGFueSBkb2N1bWVudHMgdGhhdCBzdGlsbFxuICAgICAgICAgICAgICAgIC8vIG1hdGNoIHRoZSB0YXJnZXQgYmVmb3JlIGl0IHNlbmRzIHRoZSBuZXh0IGdsb2JhbCBzbmFwc2hvdC5cbiAgICAgICAgICAgICAgICB0aGlzLmplKHQpLCBuLkRlKGUucmVzdW1lVG9rZW4pKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGZhaWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGFsbCB0YXJnZXRJZHMgdGhhdCB0aGUgd2F0Y2ggY2hhbmdlIGFwcGxpZXMgdG86IGVpdGhlciB0aGVcbiAgICAgKiB0YXJnZXRJZHMgZXhwbGljaXRseSBsaXN0ZWQgaW4gdGhlIGNoYW5nZSBvciB0aGUgdGFyZ2V0SWRzIG9mIGFsbCBjdXJyZW50bHlcbiAgICAgKiBhY3RpdmUgdGFyZ2V0cy5cbiAgICAgKi8gICAgZm9yRWFjaFRhcmdldChlLCB0KSB7XG4gICAgICAgIGUudGFyZ2V0SWRzLmxlbmd0aCA+IDAgPyBlLnRhcmdldElkcy5mb3JFYWNoKHQpIDogdGhpcy5CZS5mb3JFYWNoKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgdGhpcy56ZShuKSAmJiB0KG4pO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgZXhpc3RlbmNlIGZpbHRlcnMgYW5kIHN5bnRoZXNpemVzIGRlbGV0ZXMgZm9yIGZpbHRlciBtaXNtYXRjaGVzLlxuICAgICAqIFRhcmdldHMgdGhhdCBhcmUgaW52YWxpZGF0ZWQgYnkgZmlsdGVyIG1pc21hdGNoZXMgYXJlIGFkZGVkIHRvXG4gICAgICogYHBlbmRpbmdUYXJnZXRSZXNldHNgLlxuICAgICAqLyAgICBIZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLnRhcmdldElkLCBuID0gZS5tZS5jb3VudCwgciA9IHRoaXMuSmUodCk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gci50YXJnZXQ7XG4gICAgICAgICAgICBpZiAoX19QUklWQVRFX3RhcmdldElzRG9jdW1lbnRUYXJnZXQoaSkpIGlmICgwID09PSBuKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGV4aXN0ZW5jZSBmaWx0ZXIgdG9sZCB1cyB0aGUgZG9jdW1lbnQgZG9lcyBub3QgZXhpc3QuIFdlIGRlZHVjZVxuICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhpcyBkb2N1bWVudCBkb2VzIG5vdCBleGlzdCBhbmQgYXBwbHkgYSBkZWxldGVkIGRvY3VtZW50IHRvXG4gICAgICAgICAgICAgICAgLy8gb3VyIHVwZGF0ZXMuIFdpdGhvdXQgYXBwbHlpbmcgdGhpcyBkZWxldGVkIGRvY3VtZW50IHRoZXJlIG1pZ2h0IGJlXG4gICAgICAgICAgICAgICAgLy8gYW5vdGhlciBxdWVyeSB0aGF0IHdpbGwgcmFpc2UgdGhpcyBkb2N1bWVudCBhcyBwYXJ0IG9mIGEgc25hcHNob3RcbiAgICAgICAgICAgICAgICAvLyB1bnRpbCBpdCBpcyByZXNvbHZlZCwgZXNzZW50aWFsbHkgZXhwb3NpbmcgaW5jb25zaXN0ZW5jeSBiZXR3ZWVuXG4gICAgICAgICAgICAgICAgLy8gcXVlcmllcy5cbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IERvY3VtZW50S2V5KGkucGF0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5VZSh0LCBlLCBNdXRhYmxlRG9jdW1lbnQubmV3Tm9Eb2N1bWVudChlLCBTbmFwc2hvdFZlcnNpb24ubWluKCkpKTtcbiAgICAgICAgICAgIH0gZWxzZSBfX1BSSVZBVEVfaGFyZEFzc2VydCgxID09PSBuKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuWWUodCk7XG4gICAgICAgICAgICAgICAgLy8gRXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaC4gTWFyayB0aGUgZG9jdW1lbnRzIGFzIGJlaW5nIGluIGxpbWJvLCBhbmRcbiAgICAgICAgICAgICAgICAvLyByYWlzZSBhIHNuYXBzaG90IHdpdGggYGlzRnJvbUNhY2hlOnRydWVgLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAociAhPT0gbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBibG9vbSBmaWx0ZXIgdG8gaWRlbnRpZnkgYW5kIG1hcmsgcmVtb3ZlZCBkb2N1bWVudHMuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLlplKGUpLCBpID0gbiA/IHRoaXMuWGUobiwgZSwgcikgOiAxIC8qIEJsb29tRmlsdGVyQXBwbGljYXRpb25TdGF0dXMuU2tpcHBlZCAqLztcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgLyogQmxvb21GaWx0ZXJBcHBsaWNhdGlvblN0YXR1cy5TdWNjZXNzICovICE9PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBibG9vbSBmaWx0ZXIgYXBwbGljYXRpb24gZmFpbHMsIHdlIHJlc2V0IHRoZSBtYXBwaW5nIGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciByZS1ydW4gb2YgdGhlIHF1ZXJ5LlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5qZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSAyIC8qIEJsb29tRmlsdGVyQXBwbGljYXRpb25TdGF0dXMuRmFsc2VQb3NpdGl2ZSAqLyA9PT0gaSA/IFwiVGFyZ2V0UHVycG9zZUV4aXN0ZW5jZUZpbHRlck1pc21hdGNoQmxvb21cIiAvKiBUYXJnZXRQdXJwb3NlLkV4aXN0ZW5jZUZpbHRlck1pc21hdGNoQmxvb20gKi8gOiBcIlRhcmdldFB1cnBvc2VFeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaFwiIC8qIFRhcmdldFB1cnBvc2UuRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2ggKi87XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlFlID0gdGhpcy5RZS5pbnNlcnQodCwgZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PSBoZSB8fCBoZS5ldChmdW5jdGlvbiBfX1BSSVZBVEVfY3JlYXRlRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2hJbmZvRm9yVGVzdGluZ0hvb2tzKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzLCBvLCBfLCBhLCB1LCBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbENhY2hlQ291bnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RlbmNlRmlsdGVyQ291bnQ6IHQuY291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2VJZDogbi5kYXRhYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0SWQ6IG4ucHJvamVjdElkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBoID0gdC51bmNoYW5nZWROYW1lcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGggJiYgKGwuYmxvb21GaWx0ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGllZDogMCAvKiBCbG9vbUZpbHRlckFwcGxpY2F0aW9uU3RhdHVzLlN1Y2Nlc3MgKi8gPT09IGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaENvdW50OiBudWxsICE9PSAocyA9IG51bGwgPT0gaCA/IHZvaWQgMCA6IGguaGFzaENvdW50KSAmJiB2b2lkIDAgIT09IHMgPyBzIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRtYXBMZW5ndGg6IG51bGwgIT09IChhID0gbnVsbCA9PT0gKF8gPSBudWxsID09PSAobyA9IG51bGwgPT0gaCA/IHZvaWQgMCA6IGguYml0cykgfHwgdm9pZCAwID09PSBvID8gdm9pZCAwIDogby5iaXRtYXApIHx8IHZvaWQgMCA9PT0gXyA/IHZvaWQgMCA6IF8ubGVuZ3RoKSAmJiB2b2lkIDAgIT09IGEgPyBhIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBudWxsICE9PSAoYyA9IG51bGwgPT09ICh1ID0gbnVsbCA9PSBoID8gdm9pZCAwIDogaC5iaXRzKSB8fCB2b2lkIDAgPT09IHUgPyB2b2lkIDAgOiB1LnBhZGRpbmcpICYmIHZvaWQgMCAhPT0gYyA/IGMgOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0Q29udGFpbjogZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCAhPT0gKHQgPSBudWxsID09IHIgPyB2b2lkIDAgOiByLm1pZ2h0Q29udGFpbihlKSkgJiYgdm9pZCAwICE9PSB0ICYmIHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAociwgZS5tZSwgdGhpcy5MZS50dCgpLCBuLCBpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIHRoZSBibG9vbSBmaWx0ZXIgZnJvbSB0aGUgXCJ1bmNoYW5nZWRfbmFtZXNcIiBmaWVsZCBvZiBhbiBleGlzdGVuY2VcbiAgICAgKiBmaWx0ZXIuXG4gICAgICovICAgIFplKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IGUubWUudW5jaGFuZ2VkTmFtZXM7XG4gICAgICAgIGlmICghdCB8fCAhdC5iaXRzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3Qge2JpdHM6IHtiaXRtYXA6IG4gPSBcIlwiLCBwYWRkaW5nOiByID0gMH0sIGhhc2hDb3VudDogaSA9IDB9ID0gdDtcbiAgICAgICAgbGV0IHMsIG87XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzID0gX19QUklWQVRFX25vcm1hbGl6ZUJ5dGVTdHJpbmcobikudG9VaW50OEFycmF5KCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgX19QUklWQVRFX0Jhc2U2NERlY29kZUVycm9yKSByZXR1cm4gX19QUklWQVRFX2xvZ1dhcm4oXCJEZWNvZGluZyB0aGUgYmFzZTY0IGJsb29tIGZpbHRlciBpbiBleGlzdGVuY2UgZmlsdGVyIGZhaWxlZCAoXCIgKyBlLm1lc3NhZ2UgKyBcIik7IGlnbm9yaW5nIHRoZSBibG9vbSBmaWx0ZXIgYW5kIGZhbGxpbmcgYmFjayB0byBmdWxsIHJlLXF1ZXJ5LlwiKSwgXG4gICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQmxvb21GaWx0ZXIgdGhyb3dzIGVycm9yIGlmIHRoZSBpbnB1dHMgYXJlIGludmFsaWQuXG4gICAgICAgICAgICBvID0gbmV3IEJsb29tRmlsdGVyKHMsIHIsIGkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gX19QUklWQVRFX2xvZ1dhcm4oZSBpbnN0YW5jZW9mIF9fUFJJVkFURV9CbG9vbUZpbHRlckVycm9yID8gXCJCbG9vbUZpbHRlciBlcnJvcjogXCIgOiBcIkFwcGx5aW5nIGJsb29tIGZpbHRlciBmYWlsZWQ6IFwiLCBlKSwgXG4gICAgICAgICAgICBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwID09PSBvLkllID8gbnVsbCA6IG87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IGJsb29tIGZpbHRlciB0byByZW1vdmUgdGhlIGRlbGV0ZWQgZG9jdW1lbnRzLCBhbmQgcmV0dXJuIHRoZVxuICAgICAqIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgKi8gICAgWGUoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gdC5tZS5jb3VudCA9PT0gbiAtIHRoaXMubnQoZSwgdC50YXJnZXRJZCkgPyAwIC8qIEJsb29tRmlsdGVyQXBwbGljYXRpb25TdGF0dXMuU3VjY2VzcyAqLyA6IDIgLyogQmxvb21GaWx0ZXJBcHBsaWNhdGlvblN0YXR1cy5GYWxzZVBvc2l0aXZlICovO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgb3V0IHJlbW92ZWQgZG9jdW1lbnRzIGJhc2VkIG9uIGJsb29tIGZpbHRlciBtZW1iZXJzaGlwIHJlc3VsdCBhbmRcbiAgICAgKiByZXR1cm4gbnVtYmVyIG9mIGRvY3VtZW50cyByZW1vdmVkLlxuICAgICAqLyAgICBudChlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLkxlLmdldFJlbW90ZUtleXNGb3JUYXJnZXQodCk7XG4gICAgICAgIGxldCByID0gMDtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgobiA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5MZS50dCgpLCBzID0gYHByb2plY3RzLyR7aS5wcm9qZWN0SWR9L2RhdGFiYXNlcy8ke2kuZGF0YWJhc2V9L2RvY3VtZW50cy8ke24ucGF0aC5jYW5vbmljYWxTdHJpbmcoKX1gO1xuICAgICAgICAgICAgZS5taWdodENvbnRhaW4ocykgfHwgKHRoaXMuVWUodCwgbiwgLyp1cGRhdGVkRG9jdW1lbnQ9Ki8gbnVsbCksIHIrKyk7XG4gICAgICAgIH0pKSwgcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGN1cnJlbnRseSBhY2N1bXVsYXRlZCBzdGF0ZSBpbnRvIGEgcmVtb3RlIGV2ZW50IGF0IHRoZVxuICAgICAqIHByb3ZpZGVkIHNuYXBzaG90IHZlcnNpb24uIFJlc2V0cyB0aGUgYWNjdW11bGF0ZWQgY2hhbmdlcyBiZWZvcmUgcmV0dXJuaW5nLlxuICAgICAqLyAgICBydChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgTWFwO1xuICAgICAgICB0aGlzLkJlLmZvckVhY2goKChuLCByKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5KZShyKTtcbiAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4uY3VycmVudCAmJiBfX1BSSVZBVEVfdGFyZ2V0SXNEb2N1bWVudFRhcmdldChpLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9jdW1lbnQgcXVlcmllcyBmb3IgZG9jdW1lbnQgdGhhdCBkb24ndCBleGlzdCBjYW4gcHJvZHVjZSBhbiBlbXB0eVxuICAgICAgICAgICAgICAgICAgICAvLyByZXN1bHQgc2V0LiBUbyB1cGRhdGUgb3VyIGxvY2FsIGNhY2hlLCB3ZSBzeW50aGVzaXplIGEgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGlmIHdlIGhhdmUgbm90IHByZXZpb3VzbHkgcmVjZWl2ZWQgdGhlIGRvY3VtZW50LiBUaGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmVzIHRoZSBsaW1ibyBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQsIHJlbW92aW5nIGl0IGZyb21cbiAgICAgICAgICAgICAgICAgICAgLy8gbGltYm9Eb2N1bWVudFJlZnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogSWRlYWxseSB3ZSB3b3VsZCBoYXZlIGFuIGV4cGxpY2l0IGxvb2t1cCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCByZXN1bHRpbmcgaW4gYW4gZXhwbGljaXQgZGVsZXRlIG1lc3NhZ2UgYW5kIHdlIGNvdWxkXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGlzIHNwZWNpYWwgbG9naWMuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgRG9jdW1lbnRLZXkoaS50YXJnZXQucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHRoaXMua2UuZ2V0KHQpIHx8IHRoaXMuaXQociwgdCkgfHwgdGhpcy5VZShyLCB0LCBNdXRhYmxlRG9jdW1lbnQubmV3Tm9Eb2N1bWVudCh0LCBlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG4uYmUgJiYgKHQuc2V0KHIsIG4uQ2UoKSksIG4udmUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgbGV0IG4gPSBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKTtcbiAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2V0IG9mIGxpbWJvLW9ubHkgZG9jdW1lbnQgdXBkYXRlcyBhcyB0aGUgR0MgbG9naWNcbiAgICAgICAgLy8gc3BlY2lhbC1jYXNlcyBkb2N1bWVudHMgdGhhdCBkbyBub3QgYXBwZWFyIGluIHRoZSB0YXJnZXQgY2FjaGUuXG4gICAgICAgIFxuICAgICAgICAvLyBUT0RPKGdzb2x0aXMpOiBFeHBhbmQgb24gdGhpcyBjb21tZW50IG9uY2UgR0MgaXMgYXZhaWxhYmxlIGluIHRoZSBKU1xuICAgICAgICAvLyBjbGllbnQuXG4gICAgICAgICAgICAgICAgdGhpcy5xZS5mb3JFYWNoKCgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgbGV0IHIgPSAhMDtcbiAgICAgICAgICAgIHQuZm9yRWFjaFdoaWxlKChlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5KZShlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXQgfHwgXCJUYXJnZXRQdXJwb3NlTGltYm9SZXNvbHV0aW9uXCIgLyogVGFyZ2V0UHVycG9zZS5MaW1ib1Jlc29sdXRpb24gKi8gPT09IHQucHVycG9zZSB8fCAociA9ICExLCBcbiAgICAgICAgICAgICAgICAhMSk7XG4gICAgICAgICAgICB9KSksIHIgJiYgKG4gPSBuLmFkZChlKSk7XG4gICAgICAgIH0pKSwgdGhpcy5rZS5mb3JFYWNoKCgodCwgbikgPT4gbi5zZXRSZWFkVGltZShlKSkpO1xuICAgICAgICBjb25zdCByID0gbmV3IFJlbW90ZUV2ZW50KGUsIHQsIHRoaXMuUWUsIHRoaXMua2UsIG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5rZSA9IF9fUFJJVkFURV9tdXRhYmxlRG9jdW1lbnRNYXAoKSwgdGhpcy5xZSA9IF9fUFJJVkFURV9kb2N1bWVudFRhcmdldE1hcCgpLCBcbiAgICAgICAgdGhpcy5RZSA9IG5ldyBTb3J0ZWRNYXAoX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IpLCByO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBwcm92aWRlZCBkb2N1bWVudCB0byB0aGUgaW50ZXJuYWwgbGlzdCBvZiBkb2N1bWVudCB1cGRhdGVzIGFuZFxuICAgICAqIGl0cyBkb2N1bWVudCBrZXkgdG8gdGhlIGdpdmVuIHRhcmdldCdzIG1hcHBpbmcuXG4gICAgICovXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAgICAkZShlLCB0KSB7XG4gICAgICAgIGlmICghdGhpcy56ZShlKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBuID0gdGhpcy5pdChlLCB0LmtleSkgPyAyIC8qIENoYW5nZVR5cGUuTW9kaWZpZWQgKi8gOiAwIC8qIENoYW5nZVR5cGUuQWRkZWQgKi87XG4gICAgICAgIHRoaXMuR2UoZSkuRmUodC5rZXksIG4pLCB0aGlzLmtlID0gdGhpcy5rZS5pbnNlcnQodC5rZXksIHQpLCB0aGlzLnFlID0gdGhpcy5xZS5pbnNlcnQodC5rZXksIHRoaXMuc3QodC5rZXkpLmFkZChlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3ZpZGVkIGRvY3VtZW50IGZyb20gdGhlIHRhcmdldCBtYXBwaW5nLiBJZiB0aGVcbiAgICAgKiBkb2N1bWVudCBubyBsb25nZXIgbWF0Y2hlcyB0aGUgdGFyZ2V0LCBidXQgdGhlIGRvY3VtZW50J3Mgc3RhdGUgaXMgc3RpbGxcbiAgICAgKiBrbm93biAoZS5nLiB3ZSBrbm93IHRoYXQgdGhlIGRvY3VtZW50IHdhcyBkZWxldGVkIG9yIHdlIHJlY2VpdmVkIHRoZSBjaGFuZ2VcbiAgICAgKiB0aGF0IGNhdXNlZCB0aGUgZmlsdGVyIG1pc21hdGNoKSwgdGhlIG5ldyBkb2N1bWVudCBjYW4gYmUgcHJvdmlkZWRcbiAgICAgKiB0byB1cGRhdGUgdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZS5cbiAgICAgKi9cbiAgICAvLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICAgIFVlKGUsIHQsIG4pIHtcbiAgICAgICAgaWYgKCF0aGlzLnplKGUpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLkdlKGUpO1xuICAgICAgICB0aGlzLml0KGUsIHQpID8gci5GZSh0LCAxIC8qIENoYW5nZVR5cGUuUmVtb3ZlZCAqLykgOiBcbiAgICAgICAgLy8gVGhlIGRvY3VtZW50IG1heSBoYXZlIGVudGVyZWQgYW5kIGxlZnQgdGhlIHRhcmdldCBiZWZvcmUgd2UgcmFpc2VkIGFcbiAgICAgICAgLy8gc25hcHNob3QsIHNvIHdlIGNhbiBqdXN0IGlnbm9yZSB0aGUgY2hhbmdlLlxuICAgICAgICByLk1lKHQpLCB0aGlzLnFlID0gdGhpcy5xZS5pbnNlcnQodCwgdGhpcy5zdCh0KS5kZWxldGUoZSkpLCBuICYmICh0aGlzLmtlID0gdGhpcy5rZS5pbnNlcnQodCwgbikpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXQoZSkge1xuICAgICAgICB0aGlzLkJlLmRlbGV0ZShlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBjb3VudCBvZiBkb2N1bWVudHMgaW4gdGhlIHRhcmdldC4gVGhpcyBpbmNsdWRlcyBib3RoXG4gICAgICogdGhlIG51bWJlciBvZiBkb2N1bWVudHMgdGhhdCB0aGUgTG9jYWxTdG9yZSBjb25zaWRlcnMgdG8gYmUgcGFydCBvZiB0aGVcbiAgICAgKiB0YXJnZXQgYXMgd2VsbCBhcyBhbnkgYWNjdW11bGF0ZWQgY2hhbmdlcy5cbiAgICAgKi8gICAgWWUoZSkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5HZShlKS5DZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5MZS5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KGUpLnNpemUgKyB0LmFkZGVkRG9jdW1lbnRzLnNpemUgLSB0LnJlbW92ZWREb2N1bWVudHMuc2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVtZW50IHRoZSBudW1iZXIgb2YgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaCBiZWZvcmUgd2UgY2FuIGNvbnNpZGVyIHRoZVxuICAgICAqIHNlcnZlciB0byBiZSAnaW4tc3luYycgd2l0aCB0aGUgY2xpZW50J3MgYWN0aXZlIHRhcmdldHMuXG4gICAgICovICAgIHhlKGUpIHtcbiAgICAgICAgdGhpcy5HZShlKS54ZSgpO1xuICAgIH1cbiAgICBHZShlKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcy5CZS5nZXQoZSk7XG4gICAgICAgIHJldHVybiB0IHx8ICh0ID0gbmV3IF9fUFJJVkFURV9UYXJnZXRTdGF0ZSwgdGhpcy5CZS5zZXQoZSwgdCkpLCB0O1xuICAgIH1cbiAgICBzdChlKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcy5xZS5nZXQoZSk7XG4gICAgICAgIHJldHVybiB0IHx8ICh0ID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvciksIHRoaXMucWUgPSB0aGlzLnFlLmluc2VydChlLCB0KSksIFxuICAgICAgICB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyB0aGF0IHRoZSB1c2VyIGlzIHN0aWxsIGludGVyZXN0ZWQgaW4gdGhpcyB0YXJnZXQgKGJ5IGNhbGxpbmdcbiAgICAgKiBgZ2V0VGFyZ2V0RGF0YUZvclRhcmdldCgpYCkgYW5kIHRoYXQgd2UgYXJlIG5vdCB3YWl0aW5nIGZvciBwZW5kaW5nIEFERHNcbiAgICAgKiBmcm9tIHdhdGNoLlxuICAgICAqLyAgICB6ZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBudWxsICE9PSB0aGlzLkplKGUpO1xuICAgICAgICByZXR1cm4gdCB8fCBfX1BSSVZBVEVfbG9nRGVidWcoXCJXYXRjaENoYW5nZUFnZ3JlZ2F0b3JcIiwgXCJEZXRlY3RlZCBpbmFjdGl2ZSB0YXJnZXRcIiwgZSksIFxuICAgICAgICB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBUYXJnZXREYXRhIGZvciBhbiBhY3RpdmUgdGFyZ2V0IChpLmUuIGEgdGFyZ2V0IHRoYXQgdGhlIHVzZXJcbiAgICAgKiBpcyBzdGlsbCBpbnRlcmVzdGVkIGluIHRoYXQgaGFzIG5vIG91dHN0YW5kaW5nIHRhcmdldCBjaGFuZ2UgcmVxdWVzdHMpLlxuICAgICAqLyAgICBKZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLkJlLmdldChlKTtcbiAgICAgICAgcmV0dXJuIHQgJiYgdC5TZSA/IG51bGwgOiB0aGlzLkxlLm90KGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHN0YXRlIG9mIGEgV2F0Y2ggdGFyZ2V0IHRvIGl0cyBpbml0aWFsIHN0YXRlIChlLmcuIHNldHNcbiAgICAgKiAnY3VycmVudCcgdG8gZmFsc2UsIGNsZWFycyB0aGUgcmVzdW1lIHRva2VuIGFuZCByZW1vdmVzIGl0cyB0YXJnZXQgbWFwcGluZ1xuICAgICAqIGZyb20gYWxsIGRvY3VtZW50cykuXG4gICAgICovICAgIGplKGUpIHtcbiAgICAgICAgdGhpcy5CZS5zZXQoZSwgbmV3IF9fUFJJVkFURV9UYXJnZXRTdGF0ZSk7XG4gICAgICAgIHRoaXMuTGUuZ2V0UmVtb3RlS2V5c0ZvclRhcmdldChlKS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuVWUoZSwgdCwgLyp1cGRhdGVkRG9jdW1lbnQ9Ki8gbnVsbCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBMb2NhbFN0b3JlIGNvbnNpZGVycyB0aGUgZG9jdW1lbnQgdG8gYmUgcGFydCBvZiB0aGVcbiAgICAgKiBzcGVjaWZpZWQgdGFyZ2V0LlxuICAgICAqLyAgICBpdChlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkxlLmdldFJlbW90ZUtleXNGb3JUYXJnZXQoZSkuaGFzKHQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2RvY3VtZW50VGFyZ2V0TWFwKCkge1xuICAgIHJldHVybiBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfc25hcHNob3RDaGFuZ2VzTWFwKCkge1xuICAgIHJldHVybiBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpO1xufVxuXG5jb25zdCBJZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgZSA9IHtcbiAgICAgICAgYXNjOiBcIkFTQ0VORElOR1wiLFxuICAgICAgICBkZXNjOiBcIkRFU0NFTkRJTkdcIlxuICAgIH07XG4gICAgcmV0dXJuIGU7XG59KSgpLCBUZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgZSA9IHtcbiAgICAgICAgXCI8XCI6IFwiTEVTU19USEFOXCIsXG4gICAgICAgIFwiPD1cIjogXCJMRVNTX1RIQU5fT1JfRVFVQUxcIixcbiAgICAgICAgXCI+XCI6IFwiR1JFQVRFUl9USEFOXCIsXG4gICAgICAgIFwiPj1cIjogXCJHUkVBVEVSX1RIQU5fT1JfRVFVQUxcIixcbiAgICAgICAgXCI9PVwiOiBcIkVRVUFMXCIsXG4gICAgICAgIFwiIT1cIjogXCJOT1RfRVFVQUxcIixcbiAgICAgICAgXCJhcnJheS1jb250YWluc1wiOiBcIkFSUkFZX0NPTlRBSU5TXCIsXG4gICAgICAgIGluOiBcIklOXCIsXG4gICAgICAgIFwibm90LWluXCI6IFwiTk9UX0lOXCIsXG4gICAgICAgIFwiYXJyYXktY29udGFpbnMtYW55XCI6IFwiQVJSQVlfQ09OVEFJTlNfQU5ZXCJcbiAgICB9O1xuICAgIHJldHVybiBlO1xufSkoKSwgRWUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGUgPSB7XG4gICAgICAgIGFuZDogXCJBTkRcIixcbiAgICAgICAgb3I6IFwiT1JcIlxuICAgIH07XG4gICAgcmV0dXJuIGU7XG59KSgpO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZ2VuZXJhdGVzIEpzb25PYmplY3QgdmFsdWVzIGZvciB0aGUgRGF0YXN0b3JlIEFQSSBzdWl0YWJsZSBmb3JcbiAqIHNlbmRpbmcgdG8gZWl0aGVyIEdSUEMgc3R1YiBtZXRob2RzIG9yIHZpYSB0aGUgSlNPTi9IVFRQIFJFU1QgQVBJLlxuICpcbiAqIFRoZSBzZXJpYWxpemVyIHN1cHBvcnRzIGJvdGggUHJvdG9idWYuanMgYW5kIFByb3RvMyBKU09OIGZvcm1hdHMuIEJ5XG4gKiBzZXR0aW5nIGB1c2VQcm90bzNKc29uYCB0byB0cnVlLCB0aGUgc2VyaWFsaXplciB3aWxsIHVzZSB0aGUgUHJvdG8zIEpTT05cbiAqIGZvcm1hdC5cbiAqXG4gKiBGb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgUHJvdG8zIEpTT04gZm9ybWF0IGNoZWNrXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzL2RvY3MvcHJvdG8zI2pzb25cbiAqXG4gKiBUT0RPKGtsaW10KTogV2UgY2FuIHJlbW92ZSB0aGUgZGF0YWJhc2VJZCBhcmd1bWVudCBpZiB3ZSBrZWVwIHRoZSBmdWxsXG4gKiByZXNvdXJjZSBuYW1lIGluIGRvY3VtZW50cy5cbiAqL1xuY2xhc3MgSnNvblByb3RvU2VyaWFsaXplciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLmRhdGFiYXNlSWQgPSBlLCB0aGlzLnVzZVByb3RvM0pzb24gPSB0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGEgbnVtYmVyIChvciBudWxsKSB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG9cbiAqIGEgZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUgcHJvdG8uXG4gKiBETyBOT1QgVVNFIFRISVMgRk9SIEFOWVRISU5HIEVMU0UuXG4gKiBUaGlzIG1ldGhvZCBjaGVhdHMuIEl0J3MgdHlwZWQgYXMgcmV0dXJuaW5nIFwibnVtYmVyXCIgYmVjYXVzZSB0aGF0J3Mgd2hhdFxuICogb3VyIGdlbmVyYXRlZCBwcm90byBpbnRlcmZhY2VzIHNheSBJbnQzMlZhbHVlIG11c3QgYmUuIEJ1dCBHUlBDIGFjdHVhbGx5XG4gKiBleHBlY3RzIGEgeyB2YWx1ZTogPG51bWJlcj4gfSBzdHJ1Y3QuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV90b0ludDMyUHJvdG8oZSwgdCkge1xuICAgIHJldHVybiBlLnVzZVByb3RvM0pzb24gfHwgX19QUklWQVRFX2lzTnVsbE9yVW5kZWZpbmVkKHQpID8gdCA6IHtcbiAgICAgICAgdmFsdWU6IHRcbiAgICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgKG9yIG51bGwpIGZyb20gYSBnb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSBwcm90by5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGEgRGF0ZSB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG8gYSBwcm90by5cbiAqL1xuZnVuY3Rpb24gdG9UaW1lc3RhbXAoZSwgdCkge1xuICAgIGlmIChlLnVzZVByb3RvM0pzb24pIHtcbiAgICAgICAgcmV0dXJuIGAke25ldyBEYXRlKDFlMyAqIHQuc2Vjb25kcykudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQqLywgXCJcIikucmVwbGFjZShcIlpcIiwgXCJcIil9LiR7KFwiMDAwMDAwMDAwXCIgKyB0Lm5hbm9zZWNvbmRzKS5zbGljZSgtOSl9WmA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlY29uZHM6IFwiXCIgKyB0LnNlY29uZHMsXG4gICAgICAgIG5hbm9zOiB0Lm5hbm9zZWNvbmRzXG4gICAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGJ5dGVzIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW4gYSBwcm90by5cbiAqXG4gKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfdG9CeXRlcyhlLCB0KSB7XG4gICAgcmV0dXJuIGUudXNlUHJvdG8zSnNvbiA/IHQudG9CYXNlNjQoKSA6IHQudG9VaW50OEFycmF5KCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIEJ5dGVTdHJpbmcgYmFzZWQgb24gdGhlIHByb3RvIHN0cmluZyB2YWx1ZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfdG9WZXJzaW9uKGUsIHQpIHtcbiAgICByZXR1cm4gdG9UaW1lc3RhbXAoZSwgdC50b1RpbWVzdGFtcCgpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2Zyb21WZXJzaW9uKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2hhcmRBc3NlcnQoISFlKSwgU25hcHNob3RWZXJzaW9uLmZyb21UaW1lc3RhbXAoZnVuY3Rpb24gZnJvbVRpbWVzdGFtcChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfbm9ybWFsaXplVGltZXN0YW1wKGUpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcCh0LnNlY29uZHMsIHQubmFub3MpO1xuICAgIH0oZSkpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfdG9SZXNvdXJjZU5hbWUoZSwgdCkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfdG9SZXNvdXJjZVBhdGgoZSwgdCkuY2Fub25pY2FsU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV90b1Jlc291cmNlUGF0aChlLCB0KSB7XG4gICAgY29uc3QgbiA9IGZ1bmN0aW9uIF9fUFJJVkFURV9mdWxseVF1YWxpZmllZFByZWZpeFBhdGgoZSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlc291cmNlUGF0aChbIFwicHJvamVjdHNcIiwgZS5wcm9qZWN0SWQsIFwiZGF0YWJhc2VzXCIsIGUuZGF0YWJhc2UgXSk7XG4gICAgfShlKS5jaGlsZChcImRvY3VtZW50c1wiKTtcbiAgICByZXR1cm4gdm9pZCAwID09PSB0ID8gbiA6IG4uY2hpbGQodCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tUmVzb3VyY2VOYW1lKGUpIHtcbiAgICBjb25zdCB0ID0gUmVzb3VyY2VQYXRoLmZyb21TdHJpbmcoZSk7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9oYXJkQXNzZXJ0KF9fUFJJVkFURV9pc1ZhbGlkUmVzb3VyY2VOYW1lKHQpKSwgdDtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RvTmFtZShlLCB0KSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV90b1Jlc291cmNlTmFtZShlLmRhdGFiYXNlSWQsIHQucGF0aCk7XG59XG5cbmZ1bmN0aW9uIGZyb21OYW1lKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2Zyb21SZXNvdXJjZU5hbWUodCk7XG4gICAgaWYgKG4uZ2V0KDEpICE9PSBlLmRhdGFiYXNlSWQucHJvamVjdElkKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIlRyaWVkIHRvIGRlc2VyaWFsaXplIGtleSBmcm9tIGRpZmZlcmVudCBwcm9qZWN0OiBcIiArIG4uZ2V0KDEpICsgXCIgdnMgXCIgKyBlLmRhdGFiYXNlSWQucHJvamVjdElkKTtcbiAgICBpZiAobi5nZXQoMykgIT09IGUuZGF0YWJhc2VJZC5kYXRhYmFzZSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJUcmllZCB0byBkZXNlcmlhbGl6ZSBrZXkgZnJvbSBkaWZmZXJlbnQgZGF0YWJhc2U6IFwiICsgbi5nZXQoMykgKyBcIiB2cyBcIiArIGUuZGF0YWJhc2VJZC5kYXRhYmFzZSk7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudEtleShfX1BSSVZBVEVfZXh0cmFjdExvY2FsUGF0aEZyb21SZXNvdXJjZU5hbWUobikpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfdG9RdWVyeVBhdGgoZSwgdCkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfdG9SZXNvdXJjZU5hbWUoZS5kYXRhYmFzZUlkLCB0KTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2Zyb21RdWVyeVBhdGgoZSkge1xuICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfZnJvbVJlc291cmNlTmFtZShlKTtcbiAgICAvLyBJbiB2MWJldGExIHF1ZXJpZXMgZm9yIGNvbGxlY3Rpb25zIGF0IHRoZSByb290IGRpZCBub3QgaGF2ZSBhIHRyYWlsaW5nXG4gICAgLy8gXCIvZG9jdW1lbnRzXCIuIEluIHYxIGFsbCByZXNvdXJjZSBwYXRocyBjb250YWluIFwiL2RvY3VtZW50c1wiLiBQcmVzZXJ2ZSB0aGVcbiAgICAvLyBhYmlsaXR5IHRvIHJlYWQgdGhlIHYxYmV0YTEgZm9ybSBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHF1ZXJpZXMgcGVyc2lzdGVkXG4gICAgLy8gaW4gdGhlIGxvY2FsIHRhcmdldCBjYWNoZS5cbiAgICAgICAgcmV0dXJuIDQgPT09IHQubGVuZ3RoID8gUmVzb3VyY2VQYXRoLmVtcHR5UGF0aCgpIDogX19QUklWQVRFX2V4dHJhY3RMb2NhbFBhdGhGcm9tUmVzb3VyY2VOYW1lKHQpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZ2V0RW5jb2RlZERhdGFiYXNlSWQoZSkge1xuICAgIHJldHVybiBuZXcgUmVzb3VyY2VQYXRoKFsgXCJwcm9qZWN0c1wiLCBlLmRhdGFiYXNlSWQucHJvamVjdElkLCBcImRhdGFiYXNlc1wiLCBlLmRhdGFiYXNlSWQuZGF0YWJhc2UgXSkuY2Fub25pY2FsU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9leHRyYWN0TG9jYWxQYXRoRnJvbVJlc291cmNlTmFtZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9oYXJkQXNzZXJ0KGUubGVuZ3RoID4gNCAmJiBcImRvY3VtZW50c1wiID09PSBlLmdldCg0KSksIGUucG9wRmlyc3QoNSk7XG59XG5cbi8qKiBDcmVhdGVzIGEgRG9jdW1lbnQgcHJvdG8gZnJvbSBrZXkgYW5kIGZpZWxkcyAoYnV0IG5vIGNyZWF0ZS91cGRhdGUgdGltZSkgKi8gZnVuY3Rpb24gX19QUklWQVRFX3RvTXV0YXRpb25Eb2N1bWVudChlLCB0LCBuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogX19QUklWQVRFX3RvTmFtZShlLCB0KSxcbiAgICAgICAgZmllbGRzOiBuLnZhbHVlLm1hcFZhbHVlLmZpZWxkc1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tRG9jdW1lbnQoZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBmcm9tTmFtZShlLCB0Lm5hbWUpLCBpID0gX19QUklWQVRFX2Zyb21WZXJzaW9uKHQudXBkYXRlVGltZSksIHMgPSB0LmNyZWF0ZVRpbWUgPyBfX1BSSVZBVEVfZnJvbVZlcnNpb24odC5jcmVhdGVUaW1lKSA6IFNuYXBzaG90VmVyc2lvbi5taW4oKSwgbyA9IG5ldyBPYmplY3RWYWx1ZSh7XG4gICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICBmaWVsZHM6IHQuZmllbGRzXG4gICAgICAgIH1cbiAgICB9KSwgXyA9IE11dGFibGVEb2N1bWVudC5uZXdGb3VuZERvY3VtZW50KHIsIGksIHMsIG8pO1xuICAgIHJldHVybiBuICYmIF8uc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCksIG4gPyBfLnNldEhhc0NvbW1pdHRlZE11dGF0aW9ucygpIDogXztcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2Zyb21CYXRjaEdldERvY3VtZW50c1Jlc3BvbnNlKGUsIHQpIHtcbiAgICByZXR1cm4gXCJmb3VuZFwiIGluIHQgPyBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbUZvdW5kKGUsIHQpIHtcbiAgICAgICAgX19QUklWQVRFX2hhcmRBc3NlcnQoISF0LmZvdW5kKSwgdC5mb3VuZC5uYW1lLCB0LmZvdW5kLnVwZGF0ZVRpbWU7XG4gICAgICAgIGNvbnN0IG4gPSBmcm9tTmFtZShlLCB0LmZvdW5kLm5hbWUpLCByID0gX19QUklWQVRFX2Zyb21WZXJzaW9uKHQuZm91bmQudXBkYXRlVGltZSksIGkgPSB0LmZvdW5kLmNyZWF0ZVRpbWUgPyBfX1BSSVZBVEVfZnJvbVZlcnNpb24odC5mb3VuZC5jcmVhdGVUaW1lKSA6IFNuYXBzaG90VmVyc2lvbi5taW4oKSwgcyA9IG5ldyBPYmplY3RWYWx1ZSh7XG4gICAgICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgICAgIGZpZWxkczogdC5mb3VuZC5maWVsZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBNdXRhYmxlRG9jdW1lbnQubmV3Rm91bmREb2N1bWVudChuLCByLCBpLCBzKTtcbiAgICB9KGUsIHQpIDogXCJtaXNzaW5nXCIgaW4gdCA/IGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tTWlzc2luZyhlLCB0KSB7XG4gICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KCEhdC5taXNzaW5nKSwgX19QUklWQVRFX2hhcmRBc3NlcnQoISF0LnJlYWRUaW1lKTtcbiAgICAgICAgY29uc3QgbiA9IGZyb21OYW1lKGUsIHQubWlzc2luZyksIHIgPSBfX1BSSVZBVEVfZnJvbVZlcnNpb24odC5yZWFkVGltZSk7XG4gICAgICAgIHJldHVybiBNdXRhYmxlRG9jdW1lbnQubmV3Tm9Eb2N1bWVudChuLCByKTtcbiAgICB9KGUsIHQpIDogZmFpbCgpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZnJvbVdhdGNoQ2hhbmdlKGUsIHQpIHtcbiAgICBsZXQgbjtcbiAgICBpZiAoXCJ0YXJnZXRDaGFuZ2VcIiBpbiB0KSB7XG4gICAgICAgIHQudGFyZ2V0Q2hhbmdlO1xuICAgICAgICAvLyBwcm90bzMgZGVmYXVsdCB2YWx1ZSBpcyB1bnNldCBpbiBKU09OICh1bmRlZmluZWQpLCBzbyB1c2UgJ05PX0NIQU5HRSdcbiAgICAgICAgLy8gaWYgdW5zZXRcbiAgICAgICAgY29uc3QgciA9IGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJOT19DSEFOR0VcIiA9PT0gZSA/IDAgLyogV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5Ob0NoYW5nZSAqLyA6IFwiQUREXCIgPT09IGUgPyAxIC8qIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuQWRkZWQgKi8gOiBcIlJFTU9WRVwiID09PSBlID8gMiAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlbW92ZWQgKi8gOiBcIkNVUlJFTlRcIiA9PT0gZSA/IDMgLyogV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5DdXJyZW50ICovIDogXCJSRVNFVFwiID09PSBlID8gNCAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlc2V0ICovIDogZmFpbCgpO1xuICAgICAgICB9KHQudGFyZ2V0Q2hhbmdlLnRhcmdldENoYW5nZVR5cGUgfHwgXCJOT19DSEFOR0VcIiksIGkgPSB0LnRhcmdldENoYW5nZS50YXJnZXRJZHMgfHwgW10sIHMgPSBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbUJ5dGVzKGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnVzZVByb3RvM0pzb24gPyAoX19QUklWQVRFX2hhcmRBc3NlcnQodm9pZCAwID09PSB0IHx8IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpLCBcbiAgICAgICAgICAgIEJ5dGVTdHJpbmcuZnJvbUJhc2U2NFN0cmluZyh0IHx8IFwiXCIpKSA6IChfX1BSSVZBVEVfaGFyZEFzc2VydCh2b2lkIDAgPT09IHQgfHwgXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgYm90aCBCdWZmZXIgYW5kIFVpbnQ4QXJyYXksXG4gICAgICAgICAgICAvLyBkZXNwaXRlIHRoZSBmYWN0IHRoYXQgQnVmZmVyIGV4dGVuZHMgVWludDhBcnJheS4gSW4gc29tZVxuICAgICAgICAgICAgLy8gZW52aXJvbm1lbnRzLCBzdWNoIGFzIGpzZG9tLCB0aGUgcHJvdG90eXBlIGNoYWluIG9mIEJ1ZmZlclxuICAgICAgICAgICAgLy8gZG9lcyBub3QgaW5kaWNhdGUgdGhhdCBpdCBleHRlbmRzIFVpbnQ4QXJyYXkuXG4gICAgICAgICAgICB0IGluc3RhbmNlb2YgQnVmZmVyIHx8IHQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSwgQnl0ZVN0cmluZy5mcm9tVWludDhBcnJheSh0IHx8IG5ldyBVaW50OEFycmF5KSk7XG4gICAgICAgIH0oZSwgdC50YXJnZXRDaGFuZ2UucmVzdW1lVG9rZW4pLCBvID0gdC50YXJnZXRDaGFuZ2UuY2F1c2UsIF8gPSBvICYmIGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tUnBjU3RhdHVzKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB2b2lkIDAgPT09IGUuY29kZSA/IEMuVU5LTk9XTiA6IF9fUFJJVkFURV9tYXBDb2RlRnJvbVJwY0NvZGUoZS5jb2RlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmlyZXN0b3JlRXJyb3IodCwgZS5tZXNzYWdlIHx8IFwiXCIpO1xuICAgICAgICB9KG8pO1xuICAgICAgICBuID0gbmV3IF9fUFJJVkFURV9XYXRjaFRhcmdldENoYW5nZShyLCBpLCBzLCBfIHx8IG51bGwpO1xuICAgIH0gZWxzZSBpZiAoXCJkb2N1bWVudENoYW5nZVwiIGluIHQpIHtcbiAgICAgICAgdC5kb2N1bWVudENoYW5nZTtcbiAgICAgICAgY29uc3QgciA9IHQuZG9jdW1lbnRDaGFuZ2U7XG4gICAgICAgIHIuZG9jdW1lbnQsIHIuZG9jdW1lbnQubmFtZSwgci5kb2N1bWVudC51cGRhdGVUaW1lO1xuICAgICAgICBjb25zdCBpID0gZnJvbU5hbWUoZSwgci5kb2N1bWVudC5uYW1lKSwgcyA9IF9fUFJJVkFURV9mcm9tVmVyc2lvbihyLmRvY3VtZW50LnVwZGF0ZVRpbWUpLCBvID0gci5kb2N1bWVudC5jcmVhdGVUaW1lID8gX19QUklWQVRFX2Zyb21WZXJzaW9uKHIuZG9jdW1lbnQuY3JlYXRlVGltZSkgOiBTbmFwc2hvdFZlcnNpb24ubWluKCksIF8gPSBuZXcgT2JqZWN0VmFsdWUoe1xuICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHIuZG9jdW1lbnQuZmllbGRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBhID0gTXV0YWJsZURvY3VtZW50Lm5ld0ZvdW5kRG9jdW1lbnQoaSwgcywgbywgXyksIHUgPSByLnRhcmdldElkcyB8fCBbXSwgYyA9IHIucmVtb3ZlZFRhcmdldElkcyB8fCBbXTtcbiAgICAgICAgbiA9IG5ldyBfX1BSSVZBVEVfRG9jdW1lbnRXYXRjaENoYW5nZSh1LCBjLCBhLmtleSwgYSk7XG4gICAgfSBlbHNlIGlmIChcImRvY3VtZW50RGVsZXRlXCIgaW4gdCkge1xuICAgICAgICB0LmRvY3VtZW50RGVsZXRlO1xuICAgICAgICBjb25zdCByID0gdC5kb2N1bWVudERlbGV0ZTtcbiAgICAgICAgci5kb2N1bWVudDtcbiAgICAgICAgY29uc3QgaSA9IGZyb21OYW1lKGUsIHIuZG9jdW1lbnQpLCBzID0gci5yZWFkVGltZSA/IF9fUFJJVkFURV9mcm9tVmVyc2lvbihyLnJlYWRUaW1lKSA6IFNuYXBzaG90VmVyc2lvbi5taW4oKSwgbyA9IE11dGFibGVEb2N1bWVudC5uZXdOb0RvY3VtZW50KGksIHMpLCBfID0gci5yZW1vdmVkVGFyZ2V0SWRzIHx8IFtdO1xuICAgICAgICBuID0gbmV3IF9fUFJJVkFURV9Eb2N1bWVudFdhdGNoQ2hhbmdlKFtdLCBfLCBvLmtleSwgbyk7XG4gICAgfSBlbHNlIGlmIChcImRvY3VtZW50UmVtb3ZlXCIgaW4gdCkge1xuICAgICAgICB0LmRvY3VtZW50UmVtb3ZlO1xuICAgICAgICBjb25zdCByID0gdC5kb2N1bWVudFJlbW92ZTtcbiAgICAgICAgci5kb2N1bWVudDtcbiAgICAgICAgY29uc3QgaSA9IGZyb21OYW1lKGUsIHIuZG9jdW1lbnQpLCBzID0gci5yZW1vdmVkVGFyZ2V0SWRzIHx8IFtdO1xuICAgICAgICBuID0gbmV3IF9fUFJJVkFURV9Eb2N1bWVudFdhdGNoQ2hhbmdlKFtdLCBzLCBpLCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIShcImZpbHRlclwiIGluIHQpKSByZXR1cm4gZmFpbCgpO1xuICAgICAgICB7XG4gICAgICAgICAgICB0LmZpbHRlcjtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmZpbHRlcjtcbiAgICAgICAgICAgIGUudGFyZ2V0SWQ7XG4gICAgICAgICAgICBjb25zdCB7Y291bnQ6IHIgPSAwLCB1bmNoYW5nZWROYW1lczogaX0gPSBlLCBzID0gbmV3IEV4aXN0ZW5jZUZpbHRlcihyLCBpKSwgbyA9IGUudGFyZ2V0SWQ7XG4gICAgICAgICAgICBuID0gbmV3IF9fUFJJVkFURV9FeGlzdGVuY2VGaWx0ZXJDaGFuZ2Uobywgcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbmZ1bmN0aW9uIHRvTXV0YXRpb24oZSwgdCkge1xuICAgIGxldCBuO1xuICAgIGlmICh0IGluc3RhbmNlb2YgX19QUklWQVRFX1NldE11dGF0aW9uKSBuID0ge1xuICAgICAgICB1cGRhdGU6IF9fUFJJVkFURV90b011dGF0aW9uRG9jdW1lbnQoZSwgdC5rZXksIHQudmFsdWUpXG4gICAgfTsgZWxzZSBpZiAodCBpbnN0YW5jZW9mIF9fUFJJVkFURV9EZWxldGVNdXRhdGlvbikgbiA9IHtcbiAgICAgICAgZGVsZXRlOiBfX1BSSVZBVEVfdG9OYW1lKGUsIHQua2V5KVxuICAgIH07IGVsc2UgaWYgKHQgaW5zdGFuY2VvZiBfX1BSSVZBVEVfUGF0Y2hNdXRhdGlvbikgbiA9IHtcbiAgICAgICAgdXBkYXRlOiBfX1BSSVZBVEVfdG9NdXRhdGlvbkRvY3VtZW50KGUsIHQua2V5LCB0LmRhdGEpLFxuICAgICAgICB1cGRhdGVNYXNrOiBfX1BSSVZBVEVfdG9Eb2N1bWVudE1hc2sodC5maWVsZE1hc2spXG4gICAgfTsgZWxzZSB7XG4gICAgICAgIGlmICghKHQgaW5zdGFuY2VvZiBfX1BSSVZBVEVfVmVyaWZ5TXV0YXRpb24pKSByZXR1cm4gZmFpbCgpO1xuICAgICAgICBuID0ge1xuICAgICAgICAgICAgdmVyaWZ5OiBfX1BSSVZBVEVfdG9OYW1lKGUsIHQua2V5KVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdC5maWVsZFRyYW5zZm9ybXMubGVuZ3RoID4gMCAmJiAobi51cGRhdGVUcmFuc2Zvcm1zID0gdC5maWVsZFRyYW5zZm9ybXMubWFwKChlID0+IGZ1bmN0aW9uIF9fUFJJVkFURV90b0ZpZWxkVHJhbnNmb3JtKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHQudHJhbnNmb3JtO1xuICAgICAgICBpZiAobiBpbnN0YW5jZW9mIF9fUFJJVkFURV9TZXJ2ZXJUaW1lc3RhbXBUcmFuc2Zvcm0pIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZFBhdGg6IHQuZmllbGQuY2Fub25pY2FsU3RyaW5nKCksXG4gICAgICAgICAgICBzZXRUb1NlcnZlclZhbHVlOiBcIlJFUVVFU1RfVElNRVwiXG4gICAgICAgIH07XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgX19QUklWQVRFX0FycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24pIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZFBhdGg6IHQuZmllbGQuY2Fub25pY2FsU3RyaW5nKCksXG4gICAgICAgICAgICBhcHBlbmRNaXNzaW5nRWxlbWVudHM6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IG4uZWxlbWVudHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBfX1BSSVZBVEVfQXJyYXlSZW1vdmVUcmFuc2Zvcm1PcGVyYXRpb24pIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZFBhdGg6IHQuZmllbGQuY2Fub25pY2FsU3RyaW5nKCksXG4gICAgICAgICAgICByZW1vdmVBbGxGcm9tQXJyYXk6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IG4uZWxlbWVudHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBfX1BSSVZBVEVfTnVtZXJpY0luY3JlbWVudFRyYW5zZm9ybU9wZXJhdGlvbikgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkUGF0aDogdC5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSxcbiAgICAgICAgICAgIGluY3JlbWVudDogbi5QZVxuICAgICAgICB9O1xuICAgICAgICB0aHJvdyBmYWlsKCk7XG4gICAgfSgwLCBlKSkpKSwgdC5wcmVjb25kaXRpb24uaXNOb25lIHx8IChuLmN1cnJlbnREb2N1bWVudCA9IGZ1bmN0aW9uIF9fUFJJVkFURV90b1ByZWNvbmRpdGlvbihlLCB0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHQudXBkYXRlVGltZSA/IHtcbiAgICAgICAgICAgIHVwZGF0ZVRpbWU6IF9fUFJJVkFURV90b1ZlcnNpb24oZSwgdC51cGRhdGVUaW1lKVxuICAgICAgICB9IDogdm9pZCAwICE9PSB0LmV4aXN0cyA/IHtcbiAgICAgICAgICAgIGV4aXN0czogdC5leGlzdHNcbiAgICAgICAgfSA6IGZhaWwoKTtcbiAgICB9KGUsIHQucHJlY29uZGl0aW9uKSksIG47XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tTXV0YXRpb24oZSwgdCkge1xuICAgIGNvbnN0IG4gPSB0LmN1cnJlbnREb2N1bWVudCA/IGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tUHJlY29uZGl0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gZS51cGRhdGVUaW1lID8gUHJlY29uZGl0aW9uLnVwZGF0ZVRpbWUoX19QUklWQVRFX2Zyb21WZXJzaW9uKGUudXBkYXRlVGltZSkpIDogdm9pZCAwICE9PSBlLmV4aXN0cyA/IFByZWNvbmRpdGlvbi5leGlzdHMoZS5leGlzdHMpIDogUHJlY29uZGl0aW9uLm5vbmUoKTtcbiAgICB9KHQuY3VycmVudERvY3VtZW50KSA6IFByZWNvbmRpdGlvbi5ub25lKCksIHIgPSB0LnVwZGF0ZVRyYW5zZm9ybXMgPyB0LnVwZGF0ZVRyYW5zZm9ybXMubWFwKCh0ID0+IGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tRmllbGRUcmFuc2Zvcm0oZSwgdCkge1xuICAgICAgICBsZXQgbiA9IG51bGw7XG4gICAgICAgIGlmIChcInNldFRvU2VydmVyVmFsdWVcIiBpbiB0KSBfX1BSSVZBVEVfaGFyZEFzc2VydChcIlJFUVVFU1RfVElNRVwiID09PSB0LnNldFRvU2VydmVyVmFsdWUpLCBcbiAgICAgICAgbiA9IG5ldyBfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtOyBlbHNlIGlmIChcImFwcGVuZE1pc3NpbmdFbGVtZW50c1wiIGluIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmFwcGVuZE1pc3NpbmdFbGVtZW50cy52YWx1ZXMgfHwgW107XG4gICAgICAgICAgICBuID0gbmV3IF9fUFJJVkFURV9BcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uKGUpO1xuICAgICAgICB9IGVsc2UgaWYgKFwicmVtb3ZlQWxsRnJvbUFycmF5XCIgaW4gdCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHQucmVtb3ZlQWxsRnJvbUFycmF5LnZhbHVlcyB8fCBbXTtcbiAgICAgICAgICAgIG4gPSBuZXcgX19QUklWQVRFX0FycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uKGUpO1xuICAgICAgICB9IGVsc2UgXCJpbmNyZW1lbnRcIiBpbiB0ID8gbiA9IG5ldyBfX1BSSVZBVEVfTnVtZXJpY0luY3JlbWVudFRyYW5zZm9ybU9wZXJhdGlvbihlLCB0LmluY3JlbWVudCkgOiBmYWlsKCk7XG4gICAgICAgIGNvbnN0IHIgPSBGaWVsZFBhdGgkMS5mcm9tU2VydmVyRm9ybWF0KHQuZmllbGRQYXRoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFRyYW5zZm9ybShyLCBuKTtcbiAgICB9KGUsIHQpKSkgOiBbXTtcbiAgICBpZiAodC51cGRhdGUpIHtcbiAgICAgICAgdC51cGRhdGUubmFtZTtcbiAgICAgICAgY29uc3QgaSA9IGZyb21OYW1lKGUsIHQudXBkYXRlLm5hbWUpLCBzID0gbmV3IE9iamVjdFZhbHVlKHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiB0LnVwZGF0ZS5maWVsZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0LnVwZGF0ZU1hc2spIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbURvY3VtZW50TWFzayhlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGUuZmllbGRQYXRocyB8fCBbXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpZWxkTWFzayh0Lm1hcCgoZSA9PiBGaWVsZFBhdGgkMS5mcm9tU2VydmVyRm9ybWF0KGUpKSkpO1xuICAgICAgICAgICAgfSh0LnVwZGF0ZU1hc2spO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfUGF0Y2hNdXRhdGlvbihpLCBzLCBlLCBuLCByKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9TZXRNdXRhdGlvbihpLCBzLCBuLCByKTtcbiAgICB9XG4gICAgaWYgKHQuZGVsZXRlKSB7XG4gICAgICAgIGNvbnN0IHIgPSBmcm9tTmFtZShlLCB0LmRlbGV0ZSk7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX0RlbGV0ZU11dGF0aW9uKHIsIG4pO1xuICAgIH1cbiAgICBpZiAodC52ZXJpZnkpIHtcbiAgICAgICAgY29uc3QgciA9IGZyb21OYW1lKGUsIHQudmVyaWZ5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfVmVyaWZ5TXV0YXRpb24ociwgbik7XG4gICAgfVxuICAgIHJldHVybiBmYWlsKCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tV3JpdGVSZXN1bHRzKGUsIHQpIHtcbiAgICByZXR1cm4gZSAmJiBlLmxlbmd0aCA+IDAgPyAoX19QUklWQVRFX2hhcmRBc3NlcnQodm9pZCAwICE9PSB0KSwgZS5tYXAoKGUgPT4gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21Xcml0ZVJlc3VsdChlLCB0KSB7XG4gICAgICAgIC8vIE5PVEU6IERlbGV0ZXMgZG9uJ3QgaGF2ZSBhbiB1cGRhdGVUaW1lLlxuICAgICAgICBsZXQgbiA9IGUudXBkYXRlVGltZSA/IF9fUFJJVkFURV9mcm9tVmVyc2lvbihlLnVwZGF0ZVRpbWUpIDogX19QUklWQVRFX2Zyb21WZXJzaW9uKHQpO1xuICAgICAgICByZXR1cm4gbi5pc0VxdWFsKFNuYXBzaG90VmVyc2lvbi5taW4oKSkgJiYgKFxuICAgICAgICAvLyBUaGUgRmlyZXN0b3JlIEVtdWxhdG9yIGN1cnJlbnRseSByZXR1cm5zIGFuIHVwZGF0ZSB0aW1lIG9mIDAgZm9yXG4gICAgICAgIC8vIGRlbGV0ZXMgb2Ygbm9uLWV4aXN0aW5nIGRvY3VtZW50cyAocmF0aGVyIHRoYW4gbnVsbCkuIFRoaXMgYnJlYWtzIHRoZVxuICAgICAgICAvLyB0ZXN0IFwiZ2V0IGRlbGV0ZWQgZG9jIHdoaWxlIG9mZmxpbmUgd2l0aCBzb3VyY2U9Y2FjaGVcIiBhcyBOb0RvY3VtZW50c1xuICAgICAgICAvLyB3aXRoIHZlcnNpb24gMCBhcmUgZmlsdGVyZWQgYnkgSW5kZXhlZERiJ3MgUmVtb3RlRG9jdW1lbnRDYWNoZS5cbiAgICAgICAgLy8gVE9ETygjMjE0OSk6IFJlbW92ZSB0aGlzIHdoZW4gRW11bGF0b3IgaXMgZml4ZWRcbiAgICAgICAgbiA9IF9fUFJJVkFURV9mcm9tVmVyc2lvbih0KSksIG5ldyBNdXRhdGlvblJlc3VsdChuLCBlLnRyYW5zZm9ybVJlc3VsdHMgfHwgW10pO1xuICAgIH0oZSwgdCkpKSkgOiBbXTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RvRG9jdW1lbnRzVGFyZ2V0KGUsIHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkb2N1bWVudHM6IFsgX19QUklWQVRFX3RvUXVlcnlQYXRoKGUsIHQucGF0aCkgXVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV90b1F1ZXJ5VGFyZ2V0KGUsIHQpIHtcbiAgICAvLyBEaXNzZWN0IHRoZSBwYXRoIGludG8gcGFyZW50LCBjb2xsZWN0aW9uSWQsIGFuZCBvcHRpb25hbCBrZXkgZmlsdGVyLlxuICAgIGNvbnN0IG4gPSB7XG4gICAgICAgIHN0cnVjdHVyZWRRdWVyeToge31cbiAgICB9LCByID0gdC5wYXRoO1xuICAgIGxldCBpO1xuICAgIG51bGwgIT09IHQuY29sbGVjdGlvbkdyb3VwID8gKGkgPSByLCBuLnN0cnVjdHVyZWRRdWVyeS5mcm9tID0gWyB7XG4gICAgICAgIGNvbGxlY3Rpb25JZDogdC5jb2xsZWN0aW9uR3JvdXAsXG4gICAgICAgIGFsbERlc2NlbmRhbnRzOiAhMFxuICAgIH0gXSkgOiAoaSA9IHIucG9wTGFzdCgpLCBuLnN0cnVjdHVyZWRRdWVyeS5mcm9tID0gWyB7XG4gICAgICAgIGNvbGxlY3Rpb25JZDogci5sYXN0U2VnbWVudCgpXG4gICAgfSBdKSwgbi5wYXJlbnQgPSBfX1BSSVZBVEVfdG9RdWVyeVBhdGgoZSwgaSk7XG4gICAgY29uc3QgcyA9IGZ1bmN0aW9uIF9fUFJJVkFURV90b0ZpbHRlcnMoZSkge1xuICAgICAgICBpZiAoMCA9PT0gZS5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV90b0ZpbHRlcihDb21wb3NpdGVGaWx0ZXIuY3JlYXRlKGUsIFwiYW5kXCIgLyogQ29tcG9zaXRlT3BlcmF0b3IuQU5EICovKSk7XG4gICAgfSh0LmZpbHRlcnMpO1xuICAgIHMgJiYgKG4uc3RydWN0dXJlZFF1ZXJ5LndoZXJlID0gcyk7XG4gICAgY29uc3QgbyA9IGZ1bmN0aW9uIF9fUFJJVkFURV90b09yZGVyKGUpIHtcbiAgICAgICAgaWYgKDAgPT09IGUubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIHJldHVybiBlLm1hcCgoZSA9PiBcbiAgICAgICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfdG9Qcm9wZXJ0eU9yZGVyKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IF9fUFJJVkFURV90b0ZpZWxkUGF0aFJlZmVyZW5jZShlLmZpZWxkKSxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IF9fUFJJVkFURV90b0RpcmVjdGlvbihlLmRpcilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oZSkpKTtcbiAgICB9KHQub3JkZXJCeSk7XG4gICAgbyAmJiAobi5zdHJ1Y3R1cmVkUXVlcnkub3JkZXJCeSA9IG8pO1xuICAgIGNvbnN0IF8gPSBfX1BSSVZBVEVfdG9JbnQzMlByb3RvKGUsIHQubGltaXQpO1xuICAgIHJldHVybiBudWxsICE9PSBfICYmIChuLnN0cnVjdHVyZWRRdWVyeS5saW1pdCA9IF8pLCB0LnN0YXJ0QXQgJiYgKG4uc3RydWN0dXJlZFF1ZXJ5LnN0YXJ0QXQgPSBmdW5jdGlvbiBfX1BSSVZBVEVfdG9TdGFydEF0Q3Vyc29yKGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJlZm9yZTogZS5pbmNsdXNpdmUsXG4gICAgICAgICAgICB2YWx1ZXM6IGUucG9zaXRpb25cbiAgICAgICAgfTtcbiAgICB9KHQuc3RhcnRBdCkpLCB0LmVuZEF0ICYmIChuLnN0cnVjdHVyZWRRdWVyeS5lbmRBdCA9IGZ1bmN0aW9uIF9fUFJJVkFURV90b0VuZEF0Q3Vyc29yKGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJlZm9yZTogIWUuaW5jbHVzaXZlLFxuICAgICAgICAgICAgdmFsdWVzOiBlLnBvc2l0aW9uXG4gICAgICAgIH07XG4gICAgfSh0LmVuZEF0KSksIHtcbiAgICAgICAgX3Q6IG4sXG4gICAgICAgIHBhcmVudDogaVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV90b1J1bkFnZ3JlZ2F0aW9uUXVlcnlSZXF1ZXN0KGUsIHQsIG4sIHIpIHtcbiAgICBjb25zdCB7X3Q6IGksIHBhcmVudDogc30gPSBfX1BSSVZBVEVfdG9RdWVyeVRhcmdldChlLCB0KSwgbyA9IHt9LCBfID0gW107XG4gICAgbGV0IGEgPSAwO1xuICAgIHJldHVybiBuLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAvLyBNYXAgYWxsIGNsaWVudC1zaWRlIGFsaWFzZXMgdG8gYSB1bmlxdWUgc2hvcnQtZm9ybVxuICAgICAgICAvLyBhbGlhcy4gVGhpcyBhdm9pZHMgaXNzdWVzIHdpdGggY2xpZW50LXNpZGUgYWxpYXNlcyB0aGF0XG4gICAgICAgIC8vIGV4Y2VlZCB0aGUgMTUwMC1ieXRlIHN0cmluZyBzaXplIGxpbWl0LlxuICAgICAgICBjb25zdCB0ID0gciA/IGUuYWxpYXMgOiBcImFnZ3JlZ2F0ZV9cIiArIGErKztcbiAgICAgICAgb1t0XSA9IGUuYWxpYXMsIFwiY291bnRcIiA9PT0gZS5hZ2dyZWdhdGVUeXBlID8gXy5wdXNoKHtcbiAgICAgICAgICAgIGFsaWFzOiB0LFxuICAgICAgICAgICAgY291bnQ6IHt9XG4gICAgICAgIH0pIDogXCJhdmdcIiA9PT0gZS5hZ2dyZWdhdGVUeXBlID8gXy5wdXNoKHtcbiAgICAgICAgICAgIGFsaWFzOiB0LFxuICAgICAgICAgICAgYXZnOiB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IF9fUFJJVkFURV90b0ZpZWxkUGF0aFJlZmVyZW5jZShlLmZpZWxkUGF0aClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkgOiBcInN1bVwiID09PSBlLmFnZ3JlZ2F0ZVR5cGUgJiYgXy5wdXNoKHtcbiAgICAgICAgICAgIGFsaWFzOiB0LFxuICAgICAgICAgICAgc3VtOiB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IF9fUFJJVkFURV90b0ZpZWxkUGF0aFJlZmVyZW5jZShlLmZpZWxkUGF0aClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSkpLCB7XG4gICAgICAgIHJlcXVlc3Q6IHtcbiAgICAgICAgICAgIHN0cnVjdHVyZWRBZ2dyZWdhdGlvblF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgYWdncmVnYXRpb25zOiBfLFxuICAgICAgICAgICAgICAgIHN0cnVjdHVyZWRRdWVyeTogaS5zdHJ1Y3R1cmVkUXVlcnlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXJlbnQ6IGkucGFyZW50XG4gICAgICAgIH0sXG4gICAgICAgIHV0OiBvLFxuICAgICAgICBwYXJlbnQ6IHNcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY29udmVydFF1ZXJ5VGFyZ2V0VG9RdWVyeShlKSB7XG4gICAgbGV0IHQgPSBfX1BSSVZBVEVfZnJvbVF1ZXJ5UGF0aChlLnBhcmVudCk7XG4gICAgY29uc3QgbiA9IGUuc3RydWN0dXJlZFF1ZXJ5LCByID0gbi5mcm9tID8gbi5mcm9tLmxlbmd0aCA6IDA7XG4gICAgbGV0IGkgPSBudWxsO1xuICAgIGlmIChyID4gMCkge1xuICAgICAgICBfX1BSSVZBVEVfaGFyZEFzc2VydCgxID09PSByKTtcbiAgICAgICAgY29uc3QgZSA9IG4uZnJvbVswXTtcbiAgICAgICAgZS5hbGxEZXNjZW5kYW50cyA/IGkgPSBlLmNvbGxlY3Rpb25JZCA6IHQgPSB0LmNoaWxkKGUuY29sbGVjdGlvbklkKTtcbiAgICB9XG4gICAgbGV0IHMgPSBbXTtcbiAgICBuLndoZXJlICYmIChzID0gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21GaWx0ZXJzKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9mcm9tRmlsdGVyKGUpO1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIENvbXBvc2l0ZUZpbHRlciAmJiBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNGbGF0Q29uanVuY3Rpb24odCkpIHJldHVybiB0LmdldEZpbHRlcnMoKTtcbiAgICAgICAgcmV0dXJuIFsgdCBdO1xuICAgIH0obi53aGVyZSkpO1xuICAgIGxldCBvID0gW107XG4gICAgbi5vcmRlckJ5ICYmIChvID0gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21PcmRlcihlKSB7XG4gICAgICAgIHJldHVybiBlLm1hcCgoZSA9PiBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbVByb3BlcnR5T3JkZXIoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPcmRlckJ5KF9fUFJJVkFURV9mcm9tRmllbGRQYXRoUmVmZXJlbmNlKGUuZmllbGQpLCBcbiAgICAgICAgICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tRGlyZWN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJBU0NFTkRJTkdcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYXNjXCIgLyogRGlyZWN0aW9uLkFTQ0VORElORyAqLztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBcIkRFU0NFTkRJTkdcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZGVzY1wiIC8qIERpcmVjdGlvbi5ERVNDRU5ESU5HICovO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgKGUuZGlyZWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgICAgICAoZSkpKTtcbiAgICB9KG4ub3JkZXJCeSkpO1xuICAgIGxldCBfID0gbnVsbDtcbiAgICBuLmxpbWl0ICYmIChfID0gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21JbnQzMlByb3RvKGUpIHtcbiAgICAgICAgbGV0IHQ7XG4gICAgICAgIHJldHVybiB0ID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgZSA/IGUudmFsdWUgOiBlLCBfX1BSSVZBVEVfaXNOdWxsT3JVbmRlZmluZWQodCkgPyBudWxsIDogdDtcbiAgICB9KG4ubGltaXQpKTtcbiAgICBsZXQgYSA9IG51bGw7XG4gICAgbi5zdGFydEF0ICYmIChhID0gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21TdGFydEF0Q3Vyc29yKGUpIHtcbiAgICAgICAgY29uc3QgdCA9ICEhZS5iZWZvcmUsIG4gPSBlLnZhbHVlcyB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG5ldyBCb3VuZChuLCB0KTtcbiAgICB9KG4uc3RhcnRBdCkpO1xuICAgIGxldCB1ID0gbnVsbDtcbiAgICByZXR1cm4gbi5lbmRBdCAmJiAodSA9IGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tRW5kQXRDdXJzb3IoZSkge1xuICAgICAgICBjb25zdCB0ID0gIWUuYmVmb3JlLCBuID0gZS52YWx1ZXMgfHwgW107XG4gICAgICAgIHJldHVybiBuZXcgQm91bmQobiwgdCk7XG4gICAgfVxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAobi5lbmRBdCkpLCBfX1BSSVZBVEVfbmV3UXVlcnkodCwgaSwgbywgcywgXywgXCJGXCIgLyogTGltaXRUeXBlLkZpcnN0ICovICwgYSwgdSk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV90b0xpc3RlblJlcXVlc3RMYWJlbHMoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBmdW5jdGlvbiBfX1BSSVZBVEVfdG9MYWJlbChlKSB7XG4gICAgICAgIHN3aXRjaCAoZSkge1xuICAgICAgICAgIGNhc2UgXCJUYXJnZXRQdXJwb3NlTGlzdGVuXCIgLyogVGFyZ2V0UHVycG9zZS5MaXN0ZW4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICBjYXNlIFwiVGFyZ2V0UHVycG9zZUV4aXN0ZW5jZUZpbHRlck1pc21hdGNoXCIgLyogVGFyZ2V0UHVycG9zZS5FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCAqLyA6XG4gICAgICAgICAgICByZXR1cm4gXCJleGlzdGVuY2UtZmlsdGVyLW1pc21hdGNoXCI7XG5cbiAgICAgICAgICBjYXNlIFwiVGFyZ2V0UHVycG9zZUV4aXN0ZW5jZUZpbHRlck1pc21hdGNoQmxvb21cIiAvKiBUYXJnZXRQdXJwb3NlLkV4aXN0ZW5jZUZpbHRlck1pc21hdGNoQmxvb20gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXhpc3RlbmNlLWZpbHRlci1taXNtYXRjaC1ibG9vbVwiO1xuXG4gICAgICAgICAgY2FzZSBcIlRhcmdldFB1cnBvc2VMaW1ib1Jlc29sdXRpb25cIiAvKiBUYXJnZXRQdXJwb3NlLkxpbWJvUmVzb2x1dGlvbiAqLyA6XG4gICAgICAgICAgICByZXR1cm4gXCJsaW1iby1kb2N1bWVudFwiO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWlsKCk7XG4gICAgICAgIH1cbiAgICB9KHQucHVycG9zZSk7XG4gICAgcmV0dXJuIG51bGwgPT0gbiA/IG51bGwgOiB7XG4gICAgICAgIFwiZ29vZy1saXN0ZW4tdGFnc1wiOiBuXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2Zyb21GaWx0ZXIoZSkge1xuICAgIHJldHVybiB2b2lkIDAgIT09IGUudW5hcnlGaWx0ZXIgPyBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbVVuYXJ5RmlsdGVyKGUpIHtcbiAgICAgICAgc3dpdGNoIChlLnVuYXJ5RmlsdGVyLm9wKSB7XG4gICAgICAgICAgY2FzZSBcIklTX05BTlwiOlxuICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9mcm9tRmllbGRQYXRoUmVmZXJlbmNlKGUudW5hcnlGaWx0ZXIuZmllbGQpO1xuICAgICAgICAgICAgcmV0dXJuIEZpZWxkRmlsdGVyLmNyZWF0ZSh0LCBcIj09XCIgLyogT3BlcmF0b3IuRVFVQUwgKi8gLCB7XG4gICAgICAgICAgICAgICAgZG91YmxlVmFsdWU6IE5hTlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjYXNlIFwiSVNfTlVMTFwiOlxuICAgICAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9mcm9tRmllbGRQYXRoUmVmZXJlbmNlKGUudW5hcnlGaWx0ZXIuZmllbGQpO1xuICAgICAgICAgICAgcmV0dXJuIEZpZWxkRmlsdGVyLmNyZWF0ZShuLCBcIj09XCIgLyogT3BlcmF0b3IuRVFVQUwgKi8gLCB7XG4gICAgICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjYXNlIFwiSVNfTk9UX05BTlwiOlxuICAgICAgICAgICAgY29uc3QgciA9IF9fUFJJVkFURV9mcm9tRmllbGRQYXRoUmVmZXJlbmNlKGUudW5hcnlGaWx0ZXIuZmllbGQpO1xuICAgICAgICAgICAgcmV0dXJuIEZpZWxkRmlsdGVyLmNyZWF0ZShyLCBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovICwge1xuICAgICAgICAgICAgICAgIGRvdWJsZVZhbHVlOiBOYU5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FzZSBcIklTX05PVF9OVUxMXCI6XG4gICAgICAgICAgICBjb25zdCBpID0gX19QUklWQVRFX2Zyb21GaWVsZFBhdGhSZWZlcmVuY2UoZS51bmFyeUZpbHRlci5maWVsZCk7XG4gICAgICAgICAgICByZXR1cm4gRmllbGRGaWx0ZXIuY3JlYXRlKGksIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi8gLCB7XG4gICAgICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhaWwoKTtcbiAgICAgICAgfVxuICAgIH0oZSkgOiB2b2lkIDAgIT09IGUuZmllbGRGaWx0ZXIgPyBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbUZpZWxkRmlsdGVyKGUpIHtcbiAgICAgICAgcmV0dXJuIEZpZWxkRmlsdGVyLmNyZWF0ZShfX1BSSVZBVEVfZnJvbUZpZWxkUGF0aFJlZmVyZW5jZShlLmZpZWxkRmlsdGVyLmZpZWxkKSwgZnVuY3Rpb24gX19QUklWQVRFX2Zyb21PcGVyYXRvck5hbWUoZSkge1xuICAgICAgICAgICAgc3dpdGNoIChlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJFUVVBTFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIj09XCIgLyogT3BlcmF0b3IuRVFVQUwgKi87XG5cbiAgICAgICAgICAgICAgY2FzZSBcIk5PVF9FUVVBTFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJHUkVBVEVSX1RIQU5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI+XCIgLyogT3BlcmF0b3IuR1JFQVRFUl9USEFOICovO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJHUkVBVEVSX1RIQU5fT1JfRVFVQUxcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI+PVwiIC8qIE9wZXJhdG9yLkdSRUFURVJfVEhBTl9PUl9FUVVBTCAqLztcblxuICAgICAgICAgICAgICBjYXNlIFwiTEVTU19USEFOXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiPFwiIC8qIE9wZXJhdG9yLkxFU1NfVEhBTiAqLztcblxuICAgICAgICAgICAgICBjYXNlIFwiTEVTU19USEFOX09SX0VRVUFMXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiPD1cIiAvKiBPcGVyYXRvci5MRVNTX1RIQU5fT1JfRVFVQUwgKi87XG5cbiAgICAgICAgICAgICAgY2FzZSBcIkFSUkFZX0NPTlRBSU5TXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYXJyYXktY29udGFpbnNcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOUyAqLztcblxuICAgICAgICAgICAgICBjYXNlIFwiSU5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJpblwiIC8qIE9wZXJhdG9yLklOICovO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJOT1RfSU5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi87XG5cbiAgICAgICAgICAgICAgY2FzZSBcIkFSUkFZX0NPTlRBSU5TX0FOWVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TX0FOWSAqLztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0oZS5maWVsZEZpbHRlci5vcCksIGUuZmllbGRGaWx0ZXIudmFsdWUpO1xuICAgIH0oZSkgOiB2b2lkIDAgIT09IGUuY29tcG9zaXRlRmlsdGVyID8gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21Db21wb3NpdGVGaWx0ZXIoZSkge1xuICAgICAgICByZXR1cm4gQ29tcG9zaXRlRmlsdGVyLmNyZWF0ZShlLmNvbXBvc2l0ZUZpbHRlci5maWx0ZXJzLm1hcCgoZSA9PiBfX1BSSVZBVEVfZnJvbUZpbHRlcihlKSkpLCBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbUNvbXBvc2l0ZU9wZXJhdG9yTmFtZShlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcIkFORFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImFuZFwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLkFORCAqLztcblxuICAgICAgICAgICAgICBjYXNlIFwiT1JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvclwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLk9SICovO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfShlLmNvbXBvc2l0ZUZpbHRlci5vcCkpO1xuICAgIH0oZSkgOiBmYWlsKCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV90b0RpcmVjdGlvbihlKSB7XG4gICAgcmV0dXJuIEllW2VdO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfdG9PcGVyYXRvck5hbWUoZSkge1xuICAgIHJldHVybiBUZVtlXTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RvQ29tcG9zaXRlT3BlcmF0b3JOYW1lKGUpIHtcbiAgICByZXR1cm4gRWVbZV07XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV90b0ZpZWxkUGF0aFJlZmVyZW5jZShlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmllbGRQYXRoOiBlLmNhbm9uaWNhbFN0cmluZygpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2Zyb21GaWVsZFBhdGhSZWZlcmVuY2UoZSkge1xuICAgIHJldHVybiBGaWVsZFBhdGgkMS5mcm9tU2VydmVyRm9ybWF0KGUuZmllbGRQYXRoKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RvRmlsdGVyKGUpIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyID8gZnVuY3Rpb24gX19QUklWQVRFX3RvVW5hcnlPckZpZWxkRmlsdGVyKGUpIHtcbiAgICAgICAgaWYgKFwiPT1cIiAvKiBPcGVyYXRvci5FUVVBTCAqLyA9PT0gZS5vcCkge1xuICAgICAgICAgICAgaWYgKF9fUFJJVkFURV9pc05hblZhbHVlKGUudmFsdWUpKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVuYXJ5RmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiBfX1BSSVZBVEVfdG9GaWVsZFBhdGhSZWZlcmVuY2UoZS5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgIG9wOiBcIklTX05BTlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChfX1BSSVZBVEVfaXNOdWxsVmFsdWUoZS52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IF9fUFJJVkFURV90b0ZpZWxkUGF0aFJlZmVyZW5jZShlLmZpZWxkKSxcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwiSVNfTlVMTFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovID09PSBlLm9wKSB7XG4gICAgICAgICAgICBpZiAoX19QUklWQVRFX2lzTmFuVmFsdWUoZS52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IF9fUFJJVkFURV90b0ZpZWxkUGF0aFJlZmVyZW5jZShlLmZpZWxkKSxcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwiSVNfTk9UX05BTlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChfX1BSSVZBVEVfaXNOdWxsVmFsdWUoZS52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IF9fUFJJVkFURV90b0ZpZWxkUGF0aFJlZmVyZW5jZShlLmZpZWxkKSxcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwiSVNfTk9UX05VTExcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IF9fUFJJVkFURV90b0ZpZWxkUGF0aFJlZmVyZW5jZShlLmZpZWxkKSxcbiAgICAgICAgICAgICAgICBvcDogX19QUklWQVRFX3RvT3BlcmF0b3JOYW1lKGUub3ApLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBlLnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfShlKSA6IGUgaW5zdGFuY2VvZiBDb21wb3NpdGVGaWx0ZXIgPyBmdW5jdGlvbiBfX1BSSVZBVEVfdG9Db21wb3NpdGVGaWx0ZXIoZSkge1xuICAgICAgICBjb25zdCB0ID0gZS5nZXRGaWx0ZXJzKCkubWFwKChlID0+IF9fUFJJVkFURV90b0ZpbHRlcihlKSkpO1xuICAgICAgICBpZiAoMSA9PT0gdC5sZW5ndGgpIHJldHVybiB0WzBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tcG9zaXRlRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgb3A6IF9fUFJJVkFURV90b0NvbXBvc2l0ZU9wZXJhdG9yTmFtZShlLm9wKSxcbiAgICAgICAgICAgICAgICBmaWx0ZXJzOiB0XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfShlKSA6IGZhaWwoKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RvRG9jdW1lbnRNYXNrKGUpIHtcbiAgICBjb25zdCB0ID0gW107XG4gICAgcmV0dXJuIGUuZmllbGRzLmZvckVhY2goKGUgPT4gdC5wdXNoKGUuY2Fub25pY2FsU3RyaW5nKCkpKSksIHtcbiAgICAgICAgZmllbGRQYXRoczogdFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9pc1ZhbGlkUmVzb3VyY2VOYW1lKGUpIHtcbiAgICAvLyBSZXNvdXJjZSBuYW1lcyBoYXZlIGF0IGxlYXN0IDQgY29tcG9uZW50cyAocHJvamVjdCBJRCwgZGF0YWJhc2UgSUQpXG4gICAgcmV0dXJuIGUubGVuZ3RoID49IDQgJiYgXCJwcm9qZWN0c1wiID09PSBlLmdldCgwKSAmJiBcImRhdGFiYXNlc1wiID09PSBlLmdldCgyKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW1tdXRhYmxlIHNldCBvZiBtZXRhZGF0YSB0aGF0IHRoZSBsb2NhbCBzdG9yZSB0cmFja3MgZm9yIGVhY2ggdGFyZ2V0LlxuICovIGNsYXNzIFRhcmdldERhdGEge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgdGFyZ2V0IGJlaW5nIGxpc3RlbmVkIHRvLiAqL1xuICAgIGUsIFxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgSUQgdG8gd2hpY2ggdGhlIHRhcmdldCBjb3JyZXNwb25kczsgQXNzaWduZWQgYnkgdGhlXG4gICAgICogTG9jYWxTdG9yZSBmb3IgdXNlciBsaXN0ZW5zIGFuZCBieSB0aGUgU3luY0VuZ2luZSBmb3IgbGltYm8gd2F0Y2hlcy5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKiogVGhlIHB1cnBvc2Ugb2YgdGhlIHRhcmdldC4gKi9cbiAgICBuLCBcbiAgICAvKipcbiAgICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBsYXN0IHRyYW5zYWN0aW9uIGR1cmluZyB3aGljaCB0aGlzIHRhcmdldCBkYXRhXG4gICAgICogd2FzIG1vZGlmaWVkLlxuICAgICAqL1xuICAgIHIsIFxuICAgIC8qKiBUaGUgbGF0ZXN0IHNuYXBzaG90IHZlcnNpb24gc2VlbiBmb3IgdGhpcyB0YXJnZXQuICovXG4gICAgaSA9IFNuYXBzaG90VmVyc2lvbi5taW4oKVxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHNuYXBzaG90IHZlcnNpb24gYXQgd2hpY2ggdGhlIGFzc29jaWF0ZWQgdmlld1xuICAgICAqIGNvbnRhaW5lZCBubyBsaW1ibyBkb2N1bWVudHMuXG4gICAgICovICwgcyA9IFNuYXBzaG90VmVyc2lvbi5taW4oKVxuICAgIC8qKlxuICAgICAqIEFuIG9wYXF1ZSwgc2VydmVyLWFzc2lnbmVkIHRva2VuIHRoYXQgYWxsb3dzIHdhdGNoaW5nIGEgdGFyZ2V0IHRvIGJlXG4gICAgICogcmVzdW1lZCBhZnRlciBkaXNjb25uZWN0aW5nIHdpdGhvdXQgcmV0cmFuc21pdHRpbmcgYWxsIHRoZSBkYXRhIHRoYXRcbiAgICAgKiBtYXRjaGVzIHRoZSB0YXJnZXQuIFRoZSByZXN1bWUgdG9rZW4gZXNzZW50aWFsbHkgaWRlbnRpZmllcyBhIHBvaW50IGluXG4gICAgICogdGltZSBmcm9tIHdoaWNoIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlc3VtZSBzZW5kaW5nIHJlc3VsdHMuXG4gICAgICovICwgbyA9IEJ5dGVTdHJpbmcuRU1QVFlfQllURV9TVFJJTkdcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGRvY3VtZW50cyB0aGF0IGxhc3QgbWF0Y2hlZCB0aGUgcXVlcnkgYXQgdGhlIHJlc3VtZSB0b2tlbiBvclxuICAgICAqIHJlYWQgdGltZS4gRG9jdW1lbnRzIGFyZSBjb3VudGVkIG9ubHkgd2hlbiBtYWtpbmcgYSBsaXN0ZW4gcmVxdWVzdCB3aXRoXG4gICAgICogcmVzdW1lIHRva2VuIG9yIHJlYWQgdGltZSwgb3RoZXJ3aXNlLCBrZWVwIGl0IG51bGwuXG4gICAgICovICwgXyA9IG51bGwpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBlLCB0aGlzLnRhcmdldElkID0gdCwgdGhpcy5wdXJwb3NlID0gbiwgdGhpcy5zZXF1ZW5jZU51bWJlciA9IHIsIHRoaXMuc25hcHNob3RWZXJzaW9uID0gaSwgXG4gICAgICAgIHRoaXMubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiA9IHMsIHRoaXMucmVzdW1lVG9rZW4gPSBvLCB0aGlzLmV4cGVjdGVkQ291bnQgPSBfO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyB0YXJnZXQgZGF0YSBpbnN0YW5jZSB3aXRoIGFuIHVwZGF0ZWQgc2VxdWVuY2UgbnVtYmVyLiAqLyAgICB3aXRoU2VxdWVuY2VOdW1iZXIoZSkge1xuICAgICAgICByZXR1cm4gbmV3IFRhcmdldERhdGEodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0SWQsIHRoaXMucHVycG9zZSwgZSwgdGhpcy5zbmFwc2hvdFZlcnNpb24sIHRoaXMubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiwgdGhpcy5yZXN1bWVUb2tlbiwgdGhpcy5leHBlY3RlZENvdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0YXJnZXQgZGF0YSBpbnN0YW5jZSB3aXRoIGFuIHVwZGF0ZWQgcmVzdW1lIHRva2VuIGFuZFxuICAgICAqIHNuYXBzaG90IHZlcnNpb24uXG4gICAgICovICAgIHdpdGhSZXN1bWVUb2tlbihlLCB0KSB7XG4gICAgICAgIHJldHVybiBuZXcgVGFyZ2V0RGF0YSh0aGlzLnRhcmdldCwgdGhpcy50YXJnZXRJZCwgdGhpcy5wdXJwb3NlLCB0aGlzLnNlcXVlbmNlTnVtYmVyLCB0LCB0aGlzLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24sIGUsIFxuICAgICAgICAvKiBleHBlY3RlZENvdW50PSAqLyBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0YXJnZXQgZGF0YSBpbnN0YW5jZSB3aXRoIGFuIHVwZGF0ZWQgZXhwZWN0ZWQgY291bnQuXG4gICAgICovICAgIHdpdGhFeHBlY3RlZENvdW50KGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUYXJnZXREYXRhKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldElkLCB0aGlzLnB1cnBvc2UsIHRoaXMuc2VxdWVuY2VOdW1iZXIsIHRoaXMuc25hcHNob3RWZXJzaW9uLCB0aGlzLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24sIHRoaXMucmVzdW1lVG9rZW4sIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRhcmdldCBkYXRhIGluc3RhbmNlIHdpdGggYW4gdXBkYXRlZCBsYXN0IGxpbWJvIGZyZWVcbiAgICAgKiBzbmFwc2hvdCB2ZXJzaW9uIG51bWJlci5cbiAgICAgKi8gICAgd2l0aExhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IFRhcmdldERhdGEodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0SWQsIHRoaXMucHVycG9zZSwgdGhpcy5zZXF1ZW5jZU51bWJlciwgdGhpcy5zbmFwc2hvdFZlcnNpb24sIGUsIHRoaXMucmVzdW1lVG9rZW4sIHRoaXMuZXhwZWN0ZWRDb3VudCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFNlcmlhbGl6ZXIgZm9yIHZhbHVlcyBzdG9yZWQgaW4gdGhlIExvY2FsU3RvcmUuICovIGNsYXNzIF9fUFJJVkFURV9Mb2NhbFNlcmlhbGl6ZXIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5jdCA9IGU7XG4gICAgfVxufVxuXG4vKiogRGVjb2RlcyBhIHJlbW90ZSBkb2N1bWVudCBmcm9tIHN0b3JhZ2UgbG9jYWxseSB0byBhIERvY3VtZW50LiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbURiUmVtb3RlRG9jdW1lbnQoZSwgdCkge1xuICAgIGxldCBuO1xuICAgIGlmICh0LmRvY3VtZW50KSBuID0gX19QUklWQVRFX2Zyb21Eb2N1bWVudChlLmN0LCB0LmRvY3VtZW50LCAhIXQuaGFzQ29tbWl0dGVkTXV0YXRpb25zKTsgZWxzZSBpZiAodC5ub0RvY3VtZW50KSB7XG4gICAgICAgIGNvbnN0IGUgPSBEb2N1bWVudEtleS5mcm9tU2VnbWVudHModC5ub0RvY3VtZW50LnBhdGgpLCByID0gX19QUklWQVRFX2Zyb21EYlRpbWVzdGFtcCh0Lm5vRG9jdW1lbnQucmVhZFRpbWUpO1xuICAgICAgICBuID0gTXV0YWJsZURvY3VtZW50Lm5ld05vRG9jdW1lbnQoZSwgciksIHQuaGFzQ29tbWl0dGVkTXV0YXRpb25zICYmIG4uc2V0SGFzQ29tbWl0dGVkTXV0YXRpb25zKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0LnVua25vd25Eb2N1bWVudCkgcmV0dXJuIGZhaWwoKTtcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZSA9IERvY3VtZW50S2V5LmZyb21TZWdtZW50cyh0LnVua25vd25Eb2N1bWVudC5wYXRoKSwgciA9IF9fUFJJVkFURV9mcm9tRGJUaW1lc3RhbXAodC51bmtub3duRG9jdW1lbnQudmVyc2lvbik7XG4gICAgICAgICAgICBuID0gTXV0YWJsZURvY3VtZW50Lm5ld1Vua25vd25Eb2N1bWVudChlLCByKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdC5yZWFkVGltZSAmJiBuLnNldFJlYWRUaW1lKGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tRGJUaW1lc3RhbXBLZXkoZSkge1xuICAgICAgICBjb25zdCB0ID0gbmV3IFRpbWVzdGFtcChlWzBdLCBlWzFdKTtcbiAgICAgICAgcmV0dXJuIFNuYXBzaG90VmVyc2lvbi5mcm9tVGltZXN0YW1wKHQpO1xuICAgIH0odC5yZWFkVGltZSkpLCBuO1xufVxuXG4vKiogRW5jb2RlcyBhIGRvY3VtZW50IGZvciBzdG9yYWdlIGxvY2FsbHkuICovIGZ1bmN0aW9uIF9fUFJJVkFURV90b0RiUmVtb3RlRG9jdW1lbnQoZSwgdCkge1xuICAgIGNvbnN0IG4gPSB0LmtleSwgciA9IHtcbiAgICAgICAgcHJlZml4UGF0aDogbi5nZXRDb2xsZWN0aW9uUGF0aCgpLnBvcExhc3QoKS50b0FycmF5KCksXG4gICAgICAgIGNvbGxlY3Rpb25Hcm91cDogbi5jb2xsZWN0aW9uR3JvdXAsXG4gICAgICAgIGRvY3VtZW50SWQ6IG4ucGF0aC5sYXN0U2VnbWVudCgpLFxuICAgICAgICByZWFkVGltZTogX19QUklWQVRFX3RvRGJUaW1lc3RhbXBLZXkodC5yZWFkVGltZSksXG4gICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogdC5oYXNDb21taXR0ZWRNdXRhdGlvbnNcbiAgICB9O1xuICAgIGlmICh0LmlzRm91bmREb2N1bWVudCgpKSByLmRvY3VtZW50ID0gZnVuY3Rpb24gX19QUklWQVRFX3RvRG9jdW1lbnQoZSwgdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogX19QUklWQVRFX3RvTmFtZShlLCB0LmtleSksXG4gICAgICAgICAgICBmaWVsZHM6IHQuZGF0YS52YWx1ZS5tYXBWYWx1ZS5maWVsZHMsXG4gICAgICAgICAgICB1cGRhdGVUaW1lOiB0b1RpbWVzdGFtcChlLCB0LnZlcnNpb24udG9UaW1lc3RhbXAoKSksXG4gICAgICAgICAgICBjcmVhdGVUaW1lOiB0b1RpbWVzdGFtcChlLCB0LmNyZWF0ZVRpbWUudG9UaW1lc3RhbXAoKSlcbiAgICAgICAgfTtcbiAgICB9KGUuY3QsIHQpOyBlbHNlIGlmICh0LmlzTm9Eb2N1bWVudCgpKSByLm5vRG9jdW1lbnQgPSB7XG4gICAgICAgIHBhdGg6IG4ucGF0aC50b0FycmF5KCksXG4gICAgICAgIHJlYWRUaW1lOiBfX1BSSVZBVEVfdG9EYlRpbWVzdGFtcCh0LnZlcnNpb24pXG4gICAgfTsgZWxzZSB7XG4gICAgICAgIGlmICghdC5pc1Vua25vd25Eb2N1bWVudCgpKSByZXR1cm4gZmFpbCgpO1xuICAgICAgICByLnVua25vd25Eb2N1bWVudCA9IHtcbiAgICAgICAgICAgIHBhdGg6IG4ucGF0aC50b0FycmF5KCksXG4gICAgICAgICAgICB2ZXJzaW9uOiBfX1BSSVZBVEVfdG9EYlRpbWVzdGFtcCh0LnZlcnNpb24pXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfdG9EYlRpbWVzdGFtcEtleShlKSB7XG4gICAgY29uc3QgdCA9IGUudG9UaW1lc3RhbXAoKTtcbiAgICByZXR1cm4gWyB0LnNlY29uZHMsIHQubmFub3NlY29uZHMgXTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RvRGJUaW1lc3RhbXAoZSkge1xuICAgIGNvbnN0IHQgPSBlLnRvVGltZXN0YW1wKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2Vjb25kczogdC5zZWNvbmRzLFxuICAgICAgICBuYW5vc2Vjb25kczogdC5uYW5vc2Vjb25kc1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tRGJUaW1lc3RhbXAoZSkge1xuICAgIGNvbnN0IHQgPSBuZXcgVGltZXN0YW1wKGUuc2Vjb25kcywgZS5uYW5vc2Vjb25kcyk7XG4gICAgcmV0dXJuIFNuYXBzaG90VmVyc2lvbi5mcm9tVGltZXN0YW1wKHQpO1xufVxuXG4vKiogRW5jb2RlcyBhIGJhdGNoIG9mIG11dGF0aW9ucyBpbnRvIGEgRGJNdXRhdGlvbkJhdGNoIGZvciBsb2NhbCBzdG9yYWdlLiAqL1xuLyoqIERlY29kZXMgYSBEYk11dGF0aW9uQmF0Y2ggaW50byBhIE11dGF0aW9uQmF0Y2ggKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tRGJNdXRhdGlvbkJhdGNoKGUsIHQpIHtcbiAgICBjb25zdCBuID0gKHQuYmFzZU11dGF0aW9ucyB8fCBbXSkubWFwKCh0ID0+IF9fUFJJVkFURV9mcm9tTXV0YXRpb24oZS5jdCwgdCkpKTtcbiAgICAvLyBTcXVhc2ggb2xkIHRyYW5zZm9ybSBtdXRhdGlvbnMgaW50byBleGlzdGluZyBwYXRjaCBvciBzZXQgbXV0YXRpb25zLlxuICAgIC8vIFRoZSByZXBsYWNlbWVudCBvZiByZXByZXNlbnRpbmcgYHRyYW5zZm9ybXNgIHdpdGggYHVwZGF0ZV90cmFuc2Zvcm1zYFxuICAgIC8vIG9uIHRoZSBTREsgbWVhbnMgdGhhdCBvbGQgYHRyYW5zZm9ybWAgbXV0YXRpb25zIHN0b3JlZCBpbiBJbmRleGVkREIgbmVlZFxuICAgIC8vIHRvIGJlIHVwZGF0ZWQgdG8gYHVwZGF0ZV90cmFuc2Zvcm1zYC5cbiAgICAvLyBUT0RPKGIvMTc0NjA4Mzc0KTogUmVtb3ZlIHRoaXMgY29kZSBvbmNlIHdlIHBlcmZvcm0gYSBzY2hlbWEgbWlncmF0aW9uLlxuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHQubXV0YXRpb25zLmxlbmd0aCAtIDE7ICsrZSkge1xuICAgICAgICBjb25zdCBuID0gdC5tdXRhdGlvbnNbZV07XG4gICAgICAgIGlmIChlICsgMSA8IHQubXV0YXRpb25zLmxlbmd0aCAmJiB2b2lkIDAgIT09IHQubXV0YXRpb25zW2UgKyAxXS50cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0Lm11dGF0aW9uc1tlICsgMV07XG4gICAgICAgICAgICBuLnVwZGF0ZVRyYW5zZm9ybXMgPSByLnRyYW5zZm9ybS5maWVsZFRyYW5zZm9ybXMsIHQubXV0YXRpb25zLnNwbGljZShlICsgMSwgMSksIFxuICAgICAgICAgICAgKytlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHIgPSB0Lm11dGF0aW9ucy5tYXAoKHQgPT4gX19QUklWQVRFX2Zyb21NdXRhdGlvbihlLmN0LCB0KSkpLCBpID0gVGltZXN0YW1wLmZyb21NaWxsaXModC5sb2NhbFdyaXRlVGltZU1zKTtcbiAgICByZXR1cm4gbmV3IE11dGF0aW9uQmF0Y2godC5iYXRjaElkLCBpLCBuLCByKTtcbn1cblxuLyoqIERlY29kZXMgYSBEYlRhcmdldCBpbnRvIFRhcmdldERhdGEgKi8gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21EYlRhcmdldChlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9mcm9tRGJUaW1lc3RhbXAoZS5yZWFkVGltZSksIG4gPSB2b2lkIDAgIT09IGUubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiA/IF9fUFJJVkFURV9mcm9tRGJUaW1lc3RhbXAoZS5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uKSA6IFNuYXBzaG90VmVyc2lvbi5taW4oKTtcbiAgICBsZXQgcjtcbiAgICByZXR1cm4gciA9IFxuICAgIC8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gZm9yIGZpZ3VyaW5nIG91dCB3aGF0IGtpbmQgb2YgcXVlcnkgaGFzIGJlZW4gc3RvcmVkLlxuICovXG4gICAgZnVuY3Rpb24gX19QUklWQVRFX2lzRG9jdW1lbnRRdWVyeShlKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IGUuZG9jdW1lbnRzO1xuICAgIH1cbiAgICAvKiogRW5jb2RlcyBhIERiQnVuZGxlIHRvIGEgQnVuZGxlTWV0YWRhdGEgb2JqZWN0LiAqLyAoZS5xdWVyeSkgPyBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbURvY3VtZW50c1RhcmdldChlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfaGFyZEFzc2VydCgxID09PSBlLmRvY3VtZW50cy5sZW5ndGgpLCBfX1BSSVZBVEVfcXVlcnlUb1RhcmdldChfX1BSSVZBVEVfbmV3UXVlcnlGb3JQYXRoKF9fUFJJVkFURV9mcm9tUXVlcnlQYXRoKGUuZG9jdW1lbnRzWzBdKSkpO1xuICAgIH0oZS5xdWVyeSkgOiBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbVF1ZXJ5VGFyZ2V0KGUpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9xdWVyeVRvVGFyZ2V0KF9fUFJJVkFURV9jb252ZXJ0UXVlcnlUYXJnZXRUb1F1ZXJ5KGUpKTtcbiAgICB9KGUucXVlcnkpLCBuZXcgVGFyZ2V0RGF0YShyLCBlLnRhcmdldElkLCBcIlRhcmdldFB1cnBvc2VMaXN0ZW5cIiAvKiBUYXJnZXRQdXJwb3NlLkxpc3RlbiAqLyAsIGUubGFzdExpc3RlblNlcXVlbmNlTnVtYmVyLCB0LCBuLCBCeXRlU3RyaW5nLmZyb21CYXNlNjRTdHJpbmcoZS5yZXN1bWVUb2tlbikpO1xufVxuXG4vKiogRW5jb2RlcyBUYXJnZXREYXRhIGludG8gYSBEYlRhcmdldCBmb3Igc3RvcmFnZSBsb2NhbGx5LiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfdG9EYlRhcmdldChlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV90b0RiVGltZXN0YW1wKHQuc25hcHNob3RWZXJzaW9uKSwgciA9IF9fUFJJVkFURV90b0RiVGltZXN0YW1wKHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbik7XG4gICAgbGV0IGk7XG4gICAgaSA9IF9fUFJJVkFURV90YXJnZXRJc0RvY3VtZW50VGFyZ2V0KHQudGFyZ2V0KSA/IF9fUFJJVkFURV90b0RvY3VtZW50c1RhcmdldChlLmN0LCB0LnRhcmdldCkgOiBfX1BSSVZBVEVfdG9RdWVyeVRhcmdldChlLmN0LCB0LnRhcmdldCkuX3Q7XG4gICAgLy8gV2UgY2FuJ3Qgc3RvcmUgdGhlIHJlc3VtZVRva2VuIGFzIGEgQnl0ZVN0cmluZyBpbiBJbmRleGVkRGIsIHNvIHdlXG4gICAgLy8gY29udmVydCBpdCB0byBhIGJhc2U2NCBzdHJpbmcgZm9yIHN0b3JhZ2UuXG4gICAgICAgIGNvbnN0IHMgPSB0LnJlc3VtZVRva2VuLnRvQmFzZTY0KCk7XG4gICAgLy8gbGFzdExpc3RlblNlcXVlbmNlTnVtYmVyIGlzIGFsd2F5cyAwIHVudGlsIHdlIGRvIHJlYWwgR0MuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgIHRhcmdldElkOiB0LnRhcmdldElkLFxuICAgICAgICBjYW5vbmljYWxJZDogX19QUklWQVRFX2Nhbm9uaWZ5VGFyZ2V0KHQudGFyZ2V0KSxcbiAgICAgICAgcmVhZFRpbWU6IG4sXG4gICAgICAgIHJlc3VtZVRva2VuOiBzLFxuICAgICAgICBsYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXI6IHQuc2VxdWVuY2VOdW1iZXIsXG4gICAgICAgIGxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb246IHIsXG4gICAgICAgIHF1ZXJ5OiBpXG4gICAgfTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgYEJ1bmRsZWRRdWVyeWAgZnJvbSBidW5kbGUgcHJvdG8gdG8gYSBRdWVyeSBvYmplY3QuXG4gKlxuICogVGhpcyByZWNvbnN0cnVjdHMgdGhlIG9yaWdpbmFsIHF1ZXJ5IHVzZWQgdG8gYnVpbGQgdGhlIGJ1bmRsZSBiZWluZyBsb2FkZWQsXG4gKiBpbmNsdWRpbmcgZmVhdHVyZXMgZXhpc3RzIG9ubHkgaW4gU0RLcyAoZm9yIGV4YW1wbGU6IGxpbWl0LXRvLWxhc3QpLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfZnJvbUJ1bmRsZWRRdWVyeShlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9jb252ZXJ0UXVlcnlUYXJnZXRUb1F1ZXJ5KHtcbiAgICAgICAgcGFyZW50OiBlLnBhcmVudCxcbiAgICAgICAgc3RydWN0dXJlZFF1ZXJ5OiBlLnN0cnVjdHVyZWRRdWVyeVxuICAgIH0pO1xuICAgIHJldHVybiBcIkxBU1RcIiA9PT0gZS5saW1pdFR5cGUgPyBfX1BSSVZBVEVfcXVlcnlXaXRoTGltaXQodCwgdC5saW1pdCwgXCJMXCIgLyogTGltaXRUeXBlLkxhc3QgKi8pIDogdDtcbn1cblxuLyoqIEVuY29kZXMgYSBOYW1lZFF1ZXJ5IHByb3RvIG9iamVjdCB0byBhIE5hbWVkUXVlcnkgbW9kZWwgb2JqZWN0LiAqL1xuLyoqIEVuY29kZXMgYSBEYkRvY3VtZW50T3ZlcmxheSBvYmplY3QgdG8gYW4gT3ZlcmxheSBtb2RlbCBvYmplY3QuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfZnJvbURiRG9jdW1lbnRPdmVybGF5KGUsIHQpIHtcbiAgICByZXR1cm4gbmV3IE92ZXJsYXkodC5sYXJnZXN0QmF0Y2hJZCwgX19QUklWQVRFX2Zyb21NdXRhdGlvbihlLmN0LCB0Lm92ZXJsYXlNdXRhdGlvbikpO1xufVxuXG4vKiogRGVjb2RlcyBhbiBPdmVybGF5IG1vZGVsIG9iamVjdCBpbnRvIGEgRGJEb2N1bWVudE92ZXJsYXkgb2JqZWN0LiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBEYkRvY3VtZW50T3ZlcmxheUtleSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiB1c2VyIGFuZFxuICogZG9jdW1lbnQga2V5LlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfdG9EYkRvY3VtZW50T3ZlcmxheUtleShlLCB0KSB7XG4gICAgY29uc3QgbiA9IHQucGF0aC5sYXN0U2VnbWVudCgpO1xuICAgIHJldHVybiBbIGUsIF9fUFJJVkFURV9lbmNvZGVSZXNvdXJjZVBhdGgodC5wYXRoLnBvcExhc3QoKSksIG4gXTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3RvRGJJbmRleFN0YXRlKGUsIHQsIG4sIHIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbmRleElkOiBlLFxuICAgICAgICB1aWQ6IHQsXG4gICAgICAgIHNlcXVlbmNlTnVtYmVyOiBuLFxuICAgICAgICByZWFkVGltZTogX19QUklWQVRFX3RvRGJUaW1lc3RhbXAoci5yZWFkVGltZSksXG4gICAgICAgIGRvY3VtZW50S2V5OiBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKHIuZG9jdW1lbnRLZXkucGF0aCksXG4gICAgICAgIGxhcmdlc3RCYXRjaElkOiByLmxhcmdlc3RCYXRjaElkXG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgX19QUklWQVRFX0luZGV4ZWREYkJ1bmRsZUNhY2hlIHtcbiAgICBnZXRCdW5kbGVNZXRhZGF0YShlLCB0KSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfYnVuZGxlc1N0b3JlKGUpLmdldCh0KS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGlmIChlKSByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21EYkJ1bmRsZShlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGUuYnVuZGxlSWQsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVRpbWU6IF9fUFJJVkFURV9mcm9tRGJUaW1lc3RhbXAoZS5jcmVhdGVUaW1lKSxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogZS52ZXJzaW9uXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKiBFbmNvZGVzIGEgQnVuZGxlTWV0YWRhdGEgdG8gYSBEYkJ1bmRsZS4gKi8gKGUpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHNhdmVCdW5kbGVNZXRhZGF0YShlLCB0KSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfYnVuZGxlc1N0b3JlKGUpLnB1dChmdW5jdGlvbiBfX1BSSVZBVEVfdG9EYkJ1bmRsZShlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJ1bmRsZUlkOiBlLmlkLFxuICAgICAgICAgICAgICAgIGNyZWF0ZVRpbWU6IF9fUFJJVkFURV90b0RiVGltZXN0YW1wKF9fUFJJVkFURV9mcm9tVmVyc2lvbihlLmNyZWF0ZVRpbWUpKSxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBlLnZlcnNpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEVuY29kZXMgYSBEYk5hbWVkUXVlcnkgdG8gYSBOYW1lZFF1ZXJ5LiAqLyAodCkpO1xuICAgIH1cbiAgICBnZXROYW1lZFF1ZXJ5KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9uYW1lZFF1ZXJpZXNTdG9yZShlKS5nZXQodCkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBpZiAoZSkgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9mcm9tRGJOYW1lZFF1ZXJ5KGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBfX1BSSVZBVEVfZnJvbUJ1bmRsZWRRdWVyeShlLmJ1bmRsZWRRdWVyeSksXG4gICAgICAgICAgICAgICAgICAgIHJlYWRUaW1lOiBfX1BSSVZBVEVfZnJvbURiVGltZXN0YW1wKGUucmVhZFRpbWUpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKiBFbmNvZGVzIGEgTmFtZWRRdWVyeSBmcm9tIGEgYnVuZGxlIHByb3RvIHRvIGEgRGJOYW1lZFF1ZXJ5LiAqLyAoZSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgc2F2ZU5hbWVkUXVlcnkoZSwgdCkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX25hbWVkUXVlcmllc1N0b3JlKGUpLnB1dChmdW5jdGlvbiBfX1BSSVZBVEVfdG9EYk5hbWVkUXVlcnkoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBlLm5hbWUsXG4gICAgICAgICAgICAgICAgcmVhZFRpbWU6IF9fUFJJVkFURV90b0RiVGltZXN0YW1wKF9fUFJJVkFURV9mcm9tVmVyc2lvbihlLnJlYWRUaW1lKSksXG4gICAgICAgICAgICAgICAgYnVuZGxlZFF1ZXJ5OiBlLmJ1bmRsZWRRdWVyeVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSh0KSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgYnVuZGxlcyBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2J1bmRsZXNTdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcImJ1bmRsZXNcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBuYW1lZFF1ZXJpZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9uYW1lZFF1ZXJpZXNTdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcIm5hbWVkUXVlcmllc1wiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgRG9jdW1lbnRPdmVybGF5Q2FjaGUgdXNpbmcgSW5kZXhlZERiLlxuICovIGNsYXNzIF9fUFJJVkFURV9JbmRleGVkRGJEb2N1bWVudE92ZXJsYXlDYWNoZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgLSBUaGUgZG9jdW1lbnQgc2VyaWFsaXplci5cbiAgICAgKiBAcGFyYW0gdXNlcklkIC0gVGhlIHVzZXJJZCBmb3Igd2hpY2ggd2UgYXJlIGFjY2Vzc2luZyBvdmVybGF5cy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IGUsIHRoaXMudXNlcklkID0gdDtcbiAgICB9XG4gICAgc3RhdGljIGx0KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHQudWlkIHx8IFwiXCI7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX0luZGV4ZWREYkRvY3VtZW50T3ZlcmxheUNhY2hlKGUsIG4pO1xuICAgIH1cbiAgICBnZXRPdmVybGF5KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9kb2N1bWVudE92ZXJsYXlTdG9yZShlKS5nZXQoX19QUklWQVRFX3RvRGJEb2N1bWVudE92ZXJsYXlLZXkodGhpcy51c2VySWQsIHQpKS5uZXh0KChlID0+IGUgPyBfX1BSSVZBVEVfZnJvbURiRG9jdW1lbnRPdmVybGF5KHRoaXMuc2VyaWFsaXplciwgZSkgOiBudWxsKSk7XG4gICAgfVxuICAgIGdldE92ZXJsYXlzKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9uZXdPdmVybGF5TWFwKCk7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UuZm9yRWFjaCh0LCAodCA9PiB0aGlzLmdldE92ZXJsYXkoZSwgdCkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBudWxsICE9PSBlICYmIG4uc2V0KHQsIGUpO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIHNhdmVPdmVybGF5cyhlLCB0LCBuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBbXTtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgoKG4sIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgT3ZlcmxheSh0LCBpKTtcbiAgICAgICAgICAgIHIucHVzaCh0aGlzLmh0KGUsIHMpKTtcbiAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihyKTtcbiAgICB9XG4gICAgcmVtb3ZlT3ZlcmxheXNGb3JCYXRjaElkKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IG5ldyBTZXQ7XG4gICAgICAgIC8vIEdldCB0aGUgc2V0IG9mIHVuaXF1ZSBjb2xsZWN0aW9uIHBhdGhzLlxuICAgICAgICAgICAgICAgIHQuZm9yRWFjaCgoZSA9PiByLmFkZChfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKGUuZ2V0Q29sbGVjdGlvblBhdGgoKSkpKSk7XG4gICAgICAgIGNvbnN0IGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIHIuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgdCwgbiBdLCBbIHRoaXMudXNlcklkLCB0LCBuICsgMSBdLCBcbiAgICAgICAgICAgIC8qbG93ZXJPcGVuPSovICExLCBcbiAgICAgICAgICAgIC8qdXBwZXJPcGVuPSovICEwKTtcbiAgICAgICAgICAgIGkucHVzaChfX1BSSVZBVEVfZG9jdW1lbnRPdmVybGF5U3RvcmUoZSkuaihcImNvbGxlY3Rpb25QYXRoT3ZlcmxheUluZGV4XCIsIHIpKTtcbiAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihpKTtcbiAgICB9XG4gICAgZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IF9fUFJJVkFURV9uZXdPdmVybGF5TWFwKCksIGkgPSBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKHQpLCBzID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgaSwgbiBdLCBbIHRoaXMudXNlcklkLCBpLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICEwKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9kb2N1bWVudE92ZXJsYXlTdG9yZShlKS5VKFwiY29sbGVjdGlvblBhdGhPdmVybGF5SW5kZXhcIiwgcykubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBfX1BSSVZBVEVfZnJvbURiRG9jdW1lbnRPdmVybGF5KHRoaXMuc2VyaWFsaXplciwgdCk7XG4gICAgICAgICAgICAgICAgci5zZXQoZS5nZXRLZXkoKSwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRPdmVybGF5c0ZvckNvbGxlY3Rpb25Hcm91cChlLCB0LCBuLCByKSB7XG4gICAgICAgIGNvbnN0IGkgPSBfX1BSSVZBVEVfbmV3T3ZlcmxheU1hcCgpO1xuICAgICAgICBsZXQgcztcbiAgICAgICAgLy8gV2Ugd2FudCBiYXRjaCBJRHMgbGFyZ2VyIHRoYW4gYHNpbmNlQmF0Y2hJZGAsIGFuZCBzbyB0aGUgbG93ZXIgYm91bmRcbiAgICAgICAgLy8gaXMgbm90IGluY2x1c2l2ZS5cbiAgICAgICAgICAgICAgICBjb25zdCBvID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgdCwgbiBdLCBbIHRoaXMudXNlcklkLCB0LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICEwKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9kb2N1bWVudE92ZXJsYXlTdG9yZShlKS5KKHtcbiAgICAgICAgICAgIGluZGV4OiBcImNvbGxlY3Rpb25Hcm91cE92ZXJsYXlJbmRleFwiLFxuICAgICAgICAgICAgcmFuZ2U6IG9cbiAgICAgICAgfSwgKChlLCB0LCBuKSA9PiB7XG4gICAgICAgICAgICAvLyBXZSBkbyBub3Qgd2FudCB0byByZXR1cm4gcGFydGlhbCBiYXRjaCBvdmVybGF5cywgZXZlbiBpZiB0aGUgc2l6ZVxuICAgICAgICAgICAgLy8gb2YgdGhlIHJlc3VsdCBzZXQgZXhjZWVkcyB0aGUgZ2l2ZW4gYGNvdW50YCBhcmd1bWVudC4gVGhlcmVmb3JlLCB3ZVxuICAgICAgICAgICAgLy8gY29udGludWUgdG8gYWdncmVnYXRlIHJlc3VsdHMgZXZlbiBhZnRlciB0aGUgcmVzdWx0IHNpemUgZXhjZWVkc1xuICAgICAgICAgICAgLy8gYGNvdW50YCBpZiB0aGVyZSBhcmUgbW9yZSBvdmVybGF5cyBmcm9tIHRoZSBgY3VycmVudEJhdGNoSWRgLlxuICAgICAgICAgICAgY29uc3QgbyA9IF9fUFJJVkFURV9mcm9tRGJEb2N1bWVudE92ZXJsYXkodGhpcy5zZXJpYWxpemVyLCB0KTtcbiAgICAgICAgICAgIGkuc2l6ZSgpIDwgciB8fCBvLmxhcmdlc3RCYXRjaElkID09PSBzID8gKGkuc2V0KG8uZ2V0S2V5KCksIG8pLCBzID0gby5sYXJnZXN0QmF0Y2hJZCkgOiBuLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgaHQoZSwgdCkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX2RvY3VtZW50T3ZlcmxheVN0b3JlKGUpLnB1dChmdW5jdGlvbiBfX1BSSVZBVEVfdG9EYkRvY3VtZW50T3ZlcmxheShlLCB0LCBuKSB7XG4gICAgICAgICAgICBjb25zdCBbciwgaSwgc10gPSBfX1BSSVZBVEVfdG9EYkRvY3VtZW50T3ZlcmxheUtleSh0LCBuLm11dGF0aW9uLmtleSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVzZXJJZDogdCxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uUGF0aDogaSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudElkOiBzLFxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25Hcm91cDogbi5tdXRhdGlvbi5rZXkuZ2V0Q29sbGVjdGlvbkdyb3VwKCksXG4gICAgICAgICAgICAgICAgbGFyZ2VzdEJhdGNoSWQ6IG4ubGFyZ2VzdEJhdGNoSWQsXG4gICAgICAgICAgICAgICAgb3ZlcmxheU11dGF0aW9uOiB0b011dGF0aW9uKGUuY3QsIG4ubXV0YXRpb24pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHRoaXMuc2VyaWFsaXplciwgdGhpcy51c2VySWQsIHQpKTtcbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBkb2N1bWVudCBvdmVybGF5IG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZG9jdW1lbnRPdmVybGF5U3RvcmUoZSkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfZ2V0U3RvcmUoZSwgXCJkb2N1bWVudE92ZXJsYXlzXCIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gTm90ZTogVGhpcyBjb2RlIGlzIGNvcGllZCBmcm9tIHRoZSBiYWNrZW5kLiBDb2RlIHRoYXQgaXMgbm90IHVzZWQgYnlcbi8vIEZpcmVzdG9yZSB3YXMgcmVtb3ZlZC5cbi8qKiBGaXJlc3RvcmUgaW5kZXggdmFsdWUgd3JpdGVyLiAgKi9cbmNsYXNzIF9fUFJJVkFURV9GaXJlc3RvcmVJbmRleFZhbHVlV3JpdGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHt9XG4gICAgLy8gVGhlIHdyaXRlIG1ldGhvZHMgYmVsb3cgc2hvcnQtY2lyY3VpdCB3cml0aW5nIHRlcm1pbmF0b3JzIGZvciB2YWx1ZXNcbiAgICAvLyBjb250YWluaW5nIGEgKHRlcm1pbmF0aW5nKSB0cnVuY2F0ZWQgdmFsdWUuXG4gICAgLy8gQXMgYW4gZXhhbXBsZSwgY29uc2lkZXIgdGhlIHJlc3VsdGluZyBlbmNvZGluZyBmb3I6XG4gICAgLy8gW1wiYmFyXCIsIFsyLCBcImZvb1wiXV0gLT4gKFNUUklORywgXCJiYXJcIiwgVEVSTSwgQVJSQVksIE5VTUJFUiwgMiwgU1RSSU5HLCBcImZvb1wiLCBURVJNLCBURVJNLCBURVJNKVxuICAgIC8vIFtcImJhclwiLCBbMiwgdHJ1bmNhdGVkKFwiZm9vXCIpXV0gLT4gKFNUUklORywgXCJiYXJcIiwgVEVSTSwgQVJSQVksIE5VTUJFUiwgMiwgU1RSSU5HLCBcImZvb1wiLCBUUlVOQylcbiAgICAvLyBbXCJiYXJcIiwgdHJ1bmNhdGVkKFtcImZvb1wiXSldIC0+IChTVFJJTkcsIFwiYmFyXCIsIFRFUk0sIEFSUkFZLiBTVFJJTkcsIFwiZm9vXCIsIFRFUk0sIFRSVU5DKVxuICAgIC8qKiBXcml0ZXMgYW4gaW5kZXggdmFsdWUuICAqL1xuICAgIFB0KGUsIHQpIHtcbiAgICAgICAgdGhpcy5JdChlLCB0KSwgXG4gICAgICAgIC8vIFdyaXRlIHNlcGFyYXRvciB0byBzcGxpdCBpbmRleCB2YWx1ZXNcbiAgICAgICAgLy8gKHNlZSBnby9maXJlc3RvcmUtc3RvcmFnZS1mb3JtYXQjZW5jb2RpbmdzKS5cbiAgICAgICAgdC5UdCgpO1xuICAgIH1cbiAgICBJdChlLCB0KSB7XG4gICAgICAgIGlmIChcIm51bGxWYWx1ZVwiIGluIGUpIHRoaXMuRXQodCwgNSk7IGVsc2UgaWYgKFwiYm9vbGVhblZhbHVlXCIgaW4gZSkgdGhpcy5FdCh0LCAxMCksIFxuICAgICAgICB0LmR0KGUuYm9vbGVhblZhbHVlID8gMSA6IDApOyBlbHNlIGlmIChcImludGVnZXJWYWx1ZVwiIGluIGUpIHRoaXMuRXQodCwgMTUpLCB0LmR0KF9fUFJJVkFURV9ub3JtYWxpemVOdW1iZXIoZS5pbnRlZ2VyVmFsdWUpKTsgZWxzZSBpZiAoXCJkb3VibGVWYWx1ZVwiIGluIGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKGUuZG91YmxlVmFsdWUpO1xuICAgICAgICAgICAgaXNOYU4obikgPyB0aGlzLkV0KHQsIDEzKSA6ICh0aGlzLkV0KHQsIDE1KSwgX19QUklWQVRFX2lzTmVnYXRpdmVaZXJvKG4pID8gXG4gICAgICAgICAgICAvLyAtMC4wLCAwIGFuZCAwLjAgYXJlIGFsbCBjb25zaWRlcmVkIHRoZSBzYW1lXG4gICAgICAgICAgICB0LmR0KDApIDogdC5kdChuKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXCJ0aW1lc3RhbXBWYWx1ZVwiIGluIGUpIHtcbiAgICAgICAgICAgIGxldCBuID0gZS50aW1lc3RhbXBWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuRXQodCwgMjApLCBcInN0cmluZ1wiID09IHR5cGVvZiBuICYmIChuID0gX19QUklWQVRFX25vcm1hbGl6ZVRpbWVzdGFtcChuKSksIHQuQXQoYCR7bi5zZWNvbmRzIHx8IFwiXCJ9YCksIFxuICAgICAgICAgICAgdC5kdChuLm5hbm9zIHx8IDApO1xuICAgICAgICB9IGVsc2UgaWYgKFwic3RyaW5nVmFsdWVcIiBpbiBlKSB0aGlzLlJ0KGUuc3RyaW5nVmFsdWUsIHQpLCB0aGlzLlZ0KHQpOyBlbHNlIGlmIChcImJ5dGVzVmFsdWVcIiBpbiBlKSB0aGlzLkV0KHQsIDMwKSwgXG4gICAgICAgIHQuZnQoX19QUklWQVRFX25vcm1hbGl6ZUJ5dGVTdHJpbmcoZS5ieXRlc1ZhbHVlKSksIHRoaXMuVnQodCk7IGVsc2UgaWYgKFwicmVmZXJlbmNlVmFsdWVcIiBpbiBlKSB0aGlzLmd0KGUucmVmZXJlbmNlVmFsdWUsIHQpOyBlbHNlIGlmIChcImdlb1BvaW50VmFsdWVcIiBpbiBlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gZS5nZW9Qb2ludFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5FdCh0LCA0NSksIHQuZHQobi5sYXRpdHVkZSB8fCAwKSwgdC5kdChuLmxvbmdpdHVkZSB8fCAwKTtcbiAgICAgICAgfSBlbHNlIFwibWFwVmFsdWVcIiBpbiBlID8gX19QUklWQVRFX2lzTWF4VmFsdWUoZSkgPyB0aGlzLkV0KHQsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSA6ICh0aGlzLnl0KGUubWFwVmFsdWUsIHQpLCBcbiAgICAgICAgdGhpcy5WdCh0KSkgOiBcImFycmF5VmFsdWVcIiBpbiBlID8gKHRoaXMud3QoZS5hcnJheVZhbHVlLCB0KSwgdGhpcy5WdCh0KSkgOiBmYWlsKCk7XG4gICAgfVxuICAgIFJ0KGUsIHQpIHtcbiAgICAgICAgdGhpcy5FdCh0LCAyNSksIHRoaXMuU3QoZSwgdCk7XG4gICAgfVxuICAgIFN0KGUsIHQpIHtcbiAgICAgICAgdC5BdChlKTtcbiAgICB9XG4gICAgeXQoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gZS5maWVsZHMgfHwge307XG4gICAgICAgIHRoaXMuRXQodCwgNTUpO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgT2JqZWN0LmtleXMobikpIHRoaXMuUnQoZSwgdCksIHRoaXMuSXQobltlXSwgdCk7XG4gICAgfVxuICAgIHd0KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IGUudmFsdWVzIHx8IFtdO1xuICAgICAgICB0aGlzLkV0KHQsIDUwKTtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIG4pIHRoaXMuSXQoZSwgdCk7XG4gICAgfVxuICAgIGd0KGUsIHQpIHtcbiAgICAgICAgdGhpcy5FdCh0LCAzNyk7XG4gICAgICAgIERvY3VtZW50S2V5LmZyb21OYW1lKGUpLnBhdGguZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0aGlzLkV0KHQsIDYwKSwgdGhpcy5TdChlLCB0KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBFdChlLCB0KSB7XG4gICAgICAgIGUuZHQodCk7XG4gICAgfVxuICAgIFZ0KGUpIHtcbiAgICAgICAgLy8gV2hpbGUgdGhlIFNESyBkb2VzIG5vdCBpbXBsZW1lbnQgdHJ1bmNhdGlvbiwgdGhlIHRydW5jYXRpb24gbWFya2VyIGlzXG4gICAgICAgIC8vIHVzZWQgdG8gdGVybWluYXRlIGFsbCB2YXJpYWJsZSBsZW5ndGggdmFsdWVzICh3aGljaCBhcmUgc3RyaW5ncywgYnl0ZXMsXG4gICAgICAgIC8vIHJlZmVyZW5jZXMsIGFycmF5cyBhbmQgbWFwcykuXG4gICAgICAgIGUuZHQoMik7XG4gICAgfVxufVxuXG5fX1BSSVZBVEVfRmlyZXN0b3JlSW5kZXhWYWx1ZVdyaXRlci5idCA9IG5ldyBfX1BSSVZBVEVfRmlyZXN0b3JlSW5kZXhWYWx1ZVdyaXRlcjtcblxuLyoqXG4gKiBDb3VudHMgdGhlIG51bWJlciBvZiB6ZXJvcyBpbiBhIGJ5dGUuXG4gKlxuICogVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAqL1xuZnVuY3Rpb24gX19QUklWQVRFX251bWJlck9mTGVhZGluZ1plcm9zSW5CeXRlKGUpIHtcbiAgICBpZiAoMCA9PT0gZSkgcmV0dXJuIDg7XG4gICAgbGV0IHQgPSAwO1xuICAgIHJldHVybiBlID4+IDQgPT0gMCAmJiAoXG4gICAgLy8gVGVzdCBpZiB0aGUgZmlyc3QgZm91ciBiaXRzIGFyZSB6ZXJvLlxuICAgIHQgKz0gNCwgZSA8PD0gNCksIGUgPj4gNiA9PSAwICYmIChcbiAgICAvLyBUZXN0IGlmIHRoZSBmaXJzdCB0d28gKG9yIG5leHQgdHdvKSBiaXRzIGFyZSB6ZXJvLlxuICAgIHQgKz0gMiwgZSA8PD0gMiksIGUgPj4gNyA9PSAwICYmIChcbiAgICAvLyBUZXN0IGlmIHRoZSByZW1haW5pbmcgYml0IGlzIHplcm8uXG4gICAgdCArPSAxKSwgdDtcbn1cblxuLyoqIENvdW50cyB0aGUgbnVtYmVyIG9mIGxlYWRpbmcgemVyb3MgaW4gdGhlIGdpdmVuIGJ5dGUgYXJyYXkuICovXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBcInZhbHVlXCIuIExlYWRpbmcgemVybyBieXRlc1xuICogYXJlIHNraXBwZWQuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV91bnNpZ25lZE51bUxlbmd0aChlKSB7XG4gICAgLy8gVGhpcyBpcyBqdXN0IHRoZSBudW1iZXIgb2YgYnl0ZXMgZm9yIHRoZSB1bnNpZ25lZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICAgIGNvbnN0IHQgPSA2NCAtIGZ1bmN0aW9uIF9fUFJJVkFURV9udW1iZXJPZkxlYWRpbmdaZXJvcyhlKSB7XG4gICAgICAgIGxldCB0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCA4OyArK24pIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfbnVtYmVyT2ZMZWFkaW5nWmVyb3NJbkJ5dGUoMjU1ICYgZVtuXSk7XG4gICAgICAgICAgICBpZiAodCArPSByLCA4ICE9PSByKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9KGUpO1xuICAgIHJldHVybiBNYXRoLmNlaWwodCAvIDgpO1xufVxuXG4vKipcbiAqIE9yZGVyZWRDb2RlV3JpdGVyIGlzIGEgbWluaW1hbC1hbGxvY2F0aW9uIGltcGxlbWVudGF0aW9uIG9mIHRoZSB3cml0aW5nXG4gKiBiZWhhdmlvciBkZWZpbmVkIGJ5IHRoZSBiYWNrZW5kLlxuICpcbiAqIFRoZSBjb2RlIGlzIHBvcnRlZCBmcm9tIGl0cyBKYXZhIGNvdW50ZXJwYXJ0LlxuICovIGNsYXNzIF9fUFJJVkFURV9PcmRlcmVkQ29kZVdyaXRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMTAyNCksIHRoaXMucG9zaXRpb24gPSAwO1xuICAgIH1cbiAgICBEdChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgICAgbGV0IG4gPSB0Lm5leHQoKTtcbiAgICAgICAgZm9yICg7IW4uZG9uZTsgKSB0aGlzLkN0KG4udmFsdWUpLCBuID0gdC5uZXh0KCk7XG4gICAgICAgIHRoaXMudnQoKTtcbiAgICB9XG4gICAgRnQoZSkge1xuICAgICAgICBjb25zdCB0ID0gZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgIGxldCBuID0gdC5uZXh0KCk7XG4gICAgICAgIGZvciAoOyFuLmRvbmU7ICkgdGhpcy5NdChuLnZhbHVlKSwgbiA9IHQubmV4dCgpO1xuICAgICAgICB0aGlzLnh0KCk7XG4gICAgfVxuICAgIC8qKiBXcml0ZXMgdXRmOCBieXRlcyBpbnRvIHRoaXMgYnl0ZSBzZXF1ZW5jZSwgYXNjZW5kaW5nLiAqLyAgICBPdChlKSB7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gdC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgaWYgKGUgPCAxMjgpIHRoaXMuQ3QoZSk7IGVsc2UgaWYgKGUgPCAyMDQ4KSB0aGlzLkN0KDk2MCB8IGUgPj4+IDYpLCB0aGlzLkN0KDEyOCB8IDYzICYgZSk7IGVsc2UgaWYgKHQgPCBcIlxcdWQ4MDBcIiB8fCBcIlxcdWRiZmZcIiA8IHQpIHRoaXMuQ3QoNDgwIHwgZSA+Pj4gMTIpLCBcbiAgICAgICAgICAgIHRoaXMuQ3QoMTI4IHwgNjMgJiBlID4+PiA2KSwgdGhpcy5DdCgxMjggfCA2MyAmIGUpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5jb2RlUG9pbnRBdCgwKTtcbiAgICAgICAgICAgICAgICB0aGlzLkN0KDI0MCB8IGUgPj4+IDE4KSwgdGhpcy5DdCgxMjggfCA2MyAmIGUgPj4+IDEyKSwgdGhpcy5DdCgxMjggfCA2MyAmIGUgPj4+IDYpLCBcbiAgICAgICAgICAgICAgICB0aGlzLkN0KDEyOCB8IDYzICYgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52dCgpO1xuICAgIH1cbiAgICAvKiogV3JpdGVzIHV0ZjggYnl0ZXMgaW50byB0aGlzIGJ5dGUgc2VxdWVuY2UsIGRlc2NlbmRpbmcgKi8gICAgTnQoZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHQuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGlmIChlIDwgMTI4KSB0aGlzLk10KGUpOyBlbHNlIGlmIChlIDwgMjA0OCkgdGhpcy5NdCg5NjAgfCBlID4+PiA2KSwgdGhpcy5NdCgxMjggfCA2MyAmIGUpOyBlbHNlIGlmICh0IDwgXCJcXHVkODAwXCIgfHwgXCJcXHVkYmZmXCIgPCB0KSB0aGlzLk10KDQ4MCB8IGUgPj4+IDEyKSwgXG4gICAgICAgICAgICB0aGlzLk10KDEyOCB8IDYzICYgZSA+Pj4gNiksIHRoaXMuTXQoMTI4IHwgNjMgJiBlKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuY29kZVBvaW50QXQoMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5NdCgyNDAgfCBlID4+PiAxOCksIHRoaXMuTXQoMTI4IHwgNjMgJiBlID4+PiAxMiksIHRoaXMuTXQoMTI4IHwgNjMgJiBlID4+PiA2KSwgXG4gICAgICAgICAgICAgICAgdGhpcy5NdCgxMjggfCA2MyAmIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMueHQoKTtcbiAgICB9XG4gICAgTHQoZSkge1xuICAgICAgICAvLyBWYWx1ZXMgYXJlIGVuY29kZWQgd2l0aCBhIHNpbmdsZSBieXRlIGxlbmd0aCBwcmVmaXgsIGZvbGxvd2VkIGJ5IHRoZVxuICAgICAgICAvLyBhY3R1YWwgdmFsdWUgaW4gYmlnLWVuZGlhbiBmb3JtYXQgd2l0aCBsZWFkaW5nIDAgYnl0ZXMgZHJvcHBlZC5cbiAgICAgICAgY29uc3QgdCA9IHRoaXMuQnQoZSksIG4gPSBfX1BSSVZBVEVfdW5zaWduZWROdW1MZW5ndGgodCk7XG4gICAgICAgIHRoaXMua3QoMSArIG4pLCB0aGlzLmJ1ZmZlclt0aGlzLnBvc2l0aW9uKytdID0gMjU1ICYgbjtcbiAgICAgICAgLy8gV3JpdGUgdGhlIGxlbmd0aFxuICAgICAgICBmb3IgKGxldCBlID0gdC5sZW5ndGggLSBuOyBlIDwgdC5sZW5ndGg7ICsrZSkgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IDI1NSAmIHRbZV07XG4gICAgfVxuICAgIHF0KGUpIHtcbiAgICAgICAgLy8gVmFsdWVzIGFyZSBlbmNvZGVkIHdpdGggYSBzaW5nbGUgYnl0ZSBsZW5ndGggcHJlZml4LCBmb2xsb3dlZCBieSB0aGVcbiAgICAgICAgLy8gaW52ZXJ0ZWQgdmFsdWUgaW4gYmlnLWVuZGlhbiBmb3JtYXQgd2l0aCBsZWFkaW5nIDAgYnl0ZXMgZHJvcHBlZC5cbiAgICAgICAgY29uc3QgdCA9IHRoaXMuQnQoZSksIG4gPSBfX1BSSVZBVEVfdW5zaWduZWROdW1MZW5ndGgodCk7XG4gICAgICAgIHRoaXMua3QoMSArIG4pLCB0aGlzLmJ1ZmZlclt0aGlzLnBvc2l0aW9uKytdID0gfigyNTUgJiBuKTtcbiAgICAgICAgLy8gV3JpdGUgdGhlIGxlbmd0aFxuICAgICAgICBmb3IgKGxldCBlID0gdC5sZW5ndGggLSBuOyBlIDwgdC5sZW5ndGg7ICsrZSkgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IH4oMjU1ICYgdFtlXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyB0aGUgXCJpbmZpbml0eVwiIGJ5dGUgc2VxdWVuY2UgdGhhdCBzb3J0cyBhZnRlciBhbGwgb3RoZXIgYnl0ZVxuICAgICAqIHNlcXVlbmNlcyB3cml0dGVuIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKi8gICAgUXQoKSB7XG4gICAgICAgIHRoaXMuS3QoMjU1KSwgdGhpcy5LdCgyNTUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgdGhlIFwiaW5maW5pdHlcIiBieXRlIHNlcXVlbmNlIHRoYXQgc29ydHMgYmVmb3JlIGFsbCBvdGhlciBieXRlXG4gICAgICogc2VxdWVuY2VzIHdyaXR0ZW4gaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKi8gICAgJHQoKSB7XG4gICAgICAgIHRoaXMuVXQoMjU1KSwgdGhpcy5VdCgyNTUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGJ1ZmZlciBzdWNoIHRoYXQgaXQgaXMgdGhlIHNhbWUgYXMgd2hlbiBpdCB3YXMgbmV3bHlcbiAgICAgKiBjb25zdHJ1Y3RlZC5cbiAgICAgKi8gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSAwO1xuICAgIH1cbiAgICBzZWVkKGUpIHtcbiAgICAgICAgdGhpcy5rdChlLmxlbmd0aCksIHRoaXMuYnVmZmVyLnNldChlLCB0aGlzLnBvc2l0aW9uKSwgdGhpcy5wb3NpdGlvbiArPSBlLmxlbmd0aDtcbiAgICB9XG4gICAgLyoqIE1ha2VzIGEgY29weSBvZiB0aGUgZW5jb2RlZCBieXRlcyBpbiB0aGlzIGJ1ZmZlci4gICovICAgIFd0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoMCwgdGhpcy5wb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYHZhbGAgaW50byBhbiBlbmNvZGluZyBzbyB0aGF0IHRoZSBvcmRlciBtYXRjaGVzIHRoZSBJRUVFIDc1NFxuICAgICAqIGZsb2F0aW5nLXBvaW50IGNvbXBhcmlzb24gcmVzdWx0cyB3aXRoIHRoZSBmb2xsb3dpbmcgZXhjZXB0aW9uczpcbiAgICAgKiAgIC0wLjAgPCAwLjBcbiAgICAgKiAgIGFsbCBub24tTmFOIDwgTmFOXG4gICAgICogICBOYU4gPSBOYU5cbiAgICAgKi8gICAgQnQoZSkge1xuICAgICAgICBjb25zdCB0ID0gXG4gICAgICAgIC8qKiBDb252ZXJ0cyBhIEphdmFTY3JpcHQgbnVtYmVyIHRvIGEgYnl0ZSBhcnJheSAodXNpbmcgYmlnIGVuZGlhbiBlbmNvZGluZykuICovXG4gICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9kb3VibGVUb0xvbmdCaXRzKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDgpKTtcbiAgICAgICAgICAgIHJldHVybiB0LnNldEZsb2F0NjQoMCwgZSwgLyogbGl0dGxlRW5kaWFuPSAqLyAhMSksIG5ldyBVaW50OEFycmF5KHQuYnVmZmVyKTtcbiAgICAgICAgfShlKSwgbiA9IDAgIT0gKDEyOCAmIHRbMF0pO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZmlyc3QgYml0IGlzIHNldC4gV2UgdXNlIGEgYml0IG1hc2sgc2luY2UgdmFsdWVbMF0gaXNcbiAgICAgICAgLy8gZW5jb2RlZCBhcyBhIG51bWJlciBmcm9tIDAgdG8gMjU1LlxuICAgICAgICAgICAgICAgIC8vIFJldmVydCB0aGUgdHdvIGNvbXBsZW1lbnQgdG8gZ2V0IG5hdHVyYWwgb3JkZXJpbmdcbiAgICAgICAgdFswXSBePSBuID8gMjU1IDogMTI4O1xuICAgICAgICBmb3IgKGxldCBlID0gMTsgZSA8IHQubGVuZ3RoOyArK2UpIHRbZV0gXj0gbiA/IDI1NSA6IDA7XG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cbiAgICAvKiogV3JpdGVzIGEgc2luZ2xlIGJ5dGUgYXNjZW5kaW5nIHRvIHRoZSBidWZmZXIuICovICAgIEN0KGUpIHtcbiAgICAgICAgY29uc3QgdCA9IDI1NSAmIGU7XG4gICAgICAgIDAgPT09IHQgPyAodGhpcy5LdCgwKSwgdGhpcy5LdCgyNTUpKSA6IDI1NSA9PT0gdCA/ICh0aGlzLkt0KDI1NSksIHRoaXMuS3QoMCkpIDogdGhpcy5LdCh0KTtcbiAgICB9XG4gICAgLyoqIFdyaXRlcyBhIHNpbmdsZSBieXRlIGRlc2NlbmRpbmcgdG8gdGhlIGJ1ZmZlci4gICovICAgIE10KGUpIHtcbiAgICAgICAgY29uc3QgdCA9IDI1NSAmIGU7XG4gICAgICAgIDAgPT09IHQgPyAodGhpcy5VdCgwKSwgdGhpcy5VdCgyNTUpKSA6IDI1NSA9PT0gdCA/ICh0aGlzLlV0KDI1NSksIHRoaXMuVXQoMCkpIDogdGhpcy5VdChlKTtcbiAgICB9XG4gICAgdnQoKSB7XG4gICAgICAgIHRoaXMuS3QoMCksIHRoaXMuS3QoMSk7XG4gICAgfVxuICAgIHh0KCkge1xuICAgICAgICB0aGlzLlV0KDApLCB0aGlzLlV0KDEpO1xuICAgIH1cbiAgICBLdChlKSB7XG4gICAgICAgIHRoaXMua3QoMSksIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSBlO1xuICAgIH1cbiAgICBVdChlKSB7XG4gICAgICAgIHRoaXMua3QoMSksIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSB+ZTtcbiAgICB9XG4gICAga3QoZSkge1xuICAgICAgICBjb25zdCB0ID0gZSArIHRoaXMucG9zaXRpb247XG4gICAgICAgIGlmICh0IDw9IHRoaXMuYnVmZmVyLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAvLyBUcnkgZG91YmxpbmcuXG4gICAgICAgICAgICAgICAgbGV0IG4gPSAyICogdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgICAgICAvLyBTdGlsbCBub3QgYmlnIGVub3VnaD8gSnVzdCBhbGxvY2F0ZSB0aGUgcmlnaHQgc2l6ZS5cbiAgICAgICAgICAgICAgICBuIDwgdCAmJiAobiA9IHQpO1xuICAgICAgICAvLyBDcmVhdGUgdGhlIG5ldyBidWZmZXIuXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgICByLnNldCh0aGlzLmJ1ZmZlciksIC8vIGNvcHkgb2xkIGRhdGFcbiAgICAgICAgdGhpcy5idWZmZXIgPSByO1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX0FzY2VuZGluZ0luZGV4Qnl0ZUVuY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5HdCA9IGU7XG4gICAgfVxuICAgIGZ0KGUpIHtcbiAgICAgICAgdGhpcy5HdC5EdChlKTtcbiAgICB9XG4gICAgQXQoZSkge1xuICAgICAgICB0aGlzLkd0Lk90KGUpO1xuICAgIH1cbiAgICBkdChlKSB7XG4gICAgICAgIHRoaXMuR3QuTHQoZSk7XG4gICAgfVxuICAgIFR0KCkge1xuICAgICAgICB0aGlzLkd0LlF0KCk7XG4gICAgfVxufVxuXG5jbGFzcyBfX1BSSVZBVEVfRGVzY2VuZGluZ0luZGV4Qnl0ZUVuY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5HdCA9IGU7XG4gICAgfVxuICAgIGZ0KGUpIHtcbiAgICAgICAgdGhpcy5HdC5GdChlKTtcbiAgICB9XG4gICAgQXQoZSkge1xuICAgICAgICB0aGlzLkd0Lk50KGUpO1xuICAgIH1cbiAgICBkdChlKSB7XG4gICAgICAgIHRoaXMuR3QucXQoZSk7XG4gICAgfVxuICAgIFR0KCkge1xuICAgICAgICB0aGlzLkd0LiR0KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYERpcmVjdGlvbmFsSW5kZXhCeXRlRW5jb2RlcmAgdXNpbmcgYE9yZGVyZWRDb2RlV3JpdGVyYCBmb3IgdGhlXG4gKiBhY3R1YWwgZW5jb2RpbmcuXG4gKi8gY2xhc3MgX19QUklWQVRFX0luZGV4Qnl0ZUVuY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLkd0ID0gbmV3IF9fUFJJVkFURV9PcmRlcmVkQ29kZVdyaXRlciwgdGhpcy56dCA9IG5ldyBfX1BSSVZBVEVfQXNjZW5kaW5nSW5kZXhCeXRlRW5jb2Rlcih0aGlzLkd0KSwgXG4gICAgICAgIHRoaXMuanQgPSBuZXcgX19QUklWQVRFX0Rlc2NlbmRpbmdJbmRleEJ5dGVFbmNvZGVyKHRoaXMuR3QpO1xuICAgIH1cbiAgICBzZWVkKGUpIHtcbiAgICAgICAgdGhpcy5HdC5zZWVkKGUpO1xuICAgIH1cbiAgICBIdChlKSB7XG4gICAgICAgIHJldHVybiAwIC8qIEluZGV4S2luZC5BU0NFTkRJTkcgKi8gPT09IGUgPyB0aGlzLnp0IDogdGhpcy5qdDtcbiAgICB9XG4gICAgV3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkd0Lld0KCk7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLkd0LnJlc2V0KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFJlcHJlc2VudHMgYW4gaW5kZXggZW50cnkgc2F2ZWQgYnkgdGhlIFNESyBpbiBwZXJzaXN0ZWQgc3RvcmFnZS4gKi8gY2xhc3MgX19QUklWQVRFX0luZGV4RW50cnkge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgdGhpcy5pbmRleElkID0gZSwgdGhpcy5kb2N1bWVudEtleSA9IHQsIHRoaXMuYXJyYXlWYWx1ZSA9IG4sIHRoaXMuZGlyZWN0aW9uYWxWYWx1ZSA9IHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gSW5kZXhFbnRyeSBlbnRyeSB0aGF0IHNvcnRzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjdXJyZW50XG4gICAgICogZGlyZWN0aW9uYWwgdmFsdWUuXG4gICAgICovICAgIEp0KCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcy5kaXJlY3Rpb25hbFZhbHVlLmxlbmd0aCwgdCA9IDAgPT09IGUgfHwgMjU1ID09PSB0aGlzLmRpcmVjdGlvbmFsVmFsdWVbZSAtIDFdID8gZSArIDEgOiBlLCBuID0gbmV3IFVpbnQ4QXJyYXkodCk7XG4gICAgICAgIHJldHVybiBuLnNldCh0aGlzLmRpcmVjdGlvbmFsVmFsdWUsIDApLCB0ICE9PSBlID8gbi5zZXQoWyAwIF0sIHRoaXMuZGlyZWN0aW9uYWxWYWx1ZS5sZW5ndGgpIDogKytuW24ubGVuZ3RoIC0gMV0sIFxuICAgICAgICBuZXcgX19QUklWQVRFX0luZGV4RW50cnkodGhpcy5pbmRleElkLCB0aGlzLmRvY3VtZW50S2V5LCB0aGlzLmFycmF5VmFsdWUsIG4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2luZGV4RW50cnlDb21wYXJhdG9yKGUsIHQpIHtcbiAgICBsZXQgbiA9IGUuaW5kZXhJZCAtIHQuaW5kZXhJZDtcbiAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiAobiA9IF9fUFJJVkFURV9jb21wYXJlQnl0ZUFycmF5cyhlLmFycmF5VmFsdWUsIHQuYXJyYXlWYWx1ZSksIFxuICAgIDAgIT09IG4gPyBuIDogKG4gPSBfX1BSSVZBVEVfY29tcGFyZUJ5dGVBcnJheXMoZS5kaXJlY3Rpb25hbFZhbHVlLCB0LmRpcmVjdGlvbmFsVmFsdWUpLCBcbiAgICAwICE9PSBuID8gbiA6IERvY3VtZW50S2V5LmNvbXBhcmF0b3IoZS5kb2N1bWVudEtleSwgdC5kb2N1bWVudEtleSkpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2NvbXBhcmVCeXRlQXJyYXlzKGUsIHQpIHtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGUubGVuZ3RoICYmIG4gPCB0Lmxlbmd0aDsgKytuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBlW25dIC0gdFtuXTtcbiAgICAgICAgaWYgKDAgIT09IHIpIHJldHVybiByO1xuICAgIH1cbiAgICByZXR1cm4gZS5sZW5ndGggLSB0Lmxlbmd0aDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBsaWdodCBxdWVyeSBwbGFubmVyIGZvciBGaXJlc3RvcmUuXG4gKlxuICogVGhpcyBjbGFzcyBtYXRjaGVzIGEgYEZpZWxkSW5kZXhgIGFnYWluc3QgYSBGaXJlc3RvcmUgUXVlcnkgYFRhcmdldGAuIEl0XG4gKiBkZXRlcm1pbmVzIHdoZXRoZXIgYSBnaXZlbiBpbmRleCBjYW4gYmUgdXNlZCB0byBzZXJ2ZSB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHRhYmxlIHNob3djYXNlcyBzb21lIHBvc3NpYmxlIGluZGV4IGNvbmZpZ3VyYXRpb25zOlxuICpcbiAqIFF1ZXJ5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEluZGV4XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogd2hlcmUoJ2EnLCAnPT0nLCAnYScpLndoZXJlKCdiJywgJz09JywgJ2InKSAgICAgICAgIHwgYSBBU0MsIGIgREVTQ1xuICogd2hlcmUoJ2EnLCAnPT0nLCAnYScpLndoZXJlKCdiJywgJz09JywgJ2InKSAgICAgICAgIHwgYSBBU0NcbiAqIHdoZXJlKCdhJywgJz09JywgJ2EnKS53aGVyZSgnYicsICc9PScsICdiJykgICAgICAgICB8IGIgREVTQ1xuICogd2hlcmUoJ2EnLCAnPj0nLCAnYScpLm9yZGVyQnkoJ2EnKSAgICAgICAgICAgICAgICAgIHwgYSBBU0NcbiAqIHdoZXJlKCdhJywgJz49JywgJ2EnKS5vcmRlckJ5KCdhJywgJ2Rlc2MnKSAgICAgICAgICB8IGEgREVTQ1xuICogd2hlcmUoJ2EnLCAnPj0nLCAnYScpLm9yZGVyQnkoJ2EnKS5vcmRlckJ5KCdiJykgICAgIHwgYSBBU0MsIGIgQVNDXG4gKiB3aGVyZSgnYScsICc+PScsICdhJykub3JkZXJCeSgnYScpLm9yZGVyQnkoJ2InKSAgICAgfCBhIEFTQ1xuICogd2hlcmUoJ2EnLCAnYXJyYXktY29udGFpbnMnLCAnYScpLm9yZGVyQnkoJ2InKSAgICAgIHwgYSBDT05UQUlOUywgYiBBU0NFTkRJTkdcbiAqIHdoZXJlKCdhJywgJ2FycmF5LWNvbnRhaW5zJywgJ2EnKS5vcmRlckJ5KCdiJykgICAgICB8IGEgQ09OVEFJTlNcbiAqLyBjbGFzcyBfX1BSSVZBVEVfVGFyZ2V0SW5kZXhNYXRjaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIC8vIFRoZSBpbmVxdWFsaXR5IGZpbHRlcnMgb2YgdGhlIHRhcmdldCAoaWYgaXQgZXhpc3RzKS5cbiAgICAgICAgLy8gTm90ZTogVGhlIHNvcnQgb24gRmllbGRGaWx0ZXJzIGlzIG5vdCByZXF1aXJlZC4gVXNpbmcgU29ydGVkU2V0IGhlcmUganVzdCB0byB1dGlsaXplIHRoZSBjdXN0b21cbiAgICAgICAgLy8gY29tcGFyYXRvci5cbiAgICAgICAgdGhpcy5ZdCA9IG5ldyBTb3J0ZWRTZXQoKChlLCB0KSA9PiBGaWVsZFBhdGgkMS5jb21wYXJhdG9yKGUuZmllbGQsIHQuZmllbGQpKSksIHRoaXMuY29sbGVjdGlvbklkID0gbnVsbCAhPSBlLmNvbGxlY3Rpb25Hcm91cCA/IGUuY29sbGVjdGlvbkdyb3VwIDogZS5wYXRoLmxhc3RTZWdtZW50KCksIFxuICAgICAgICB0aGlzLlp0ID0gZS5vcmRlckJ5LCB0aGlzLlh0ID0gW107XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBlLmZpbHRlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0O1xuICAgICAgICAgICAgZS5pc0luZXF1YWxpdHkoKSA/IHRoaXMuWXQgPSB0aGlzLll0LmFkZChlKSA6IHRoaXMuWHQucHVzaChlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLll0LnNpemUgPiAxO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGluZGV4IGNhbiBiZSB1c2VkIHRvIHNlcnZlIHRoZSBUYXJnZXRJbmRleE1hdGNoZXInc1xuICAgICAqIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEFuIGluZGV4IGlzIGNvbnNpZGVyZWQgY2FwYWJsZSBvZiBzZXJ2aW5nIHRoZSB0YXJnZXQgd2hlbjpcbiAgICAgKiAtIFRoZSB0YXJnZXQgdXNlcyBhbGwgaW5kZXggc2VnbWVudHMgZm9yIGl0cyBmaWx0ZXJzIGFuZCBvcmRlckJ5IGNsYXVzZXMuXG4gICAgICogICBUaGUgdGFyZ2V0IGNhbiBoYXZlIGFkZGl0aW9uYWwgZmlsdGVyIGFuZCBvcmRlckJ5IGNsYXVzZXMsIGJ1dCBub3RcbiAgICAgKiAgIGZld2VyLlxuICAgICAqIC0gSWYgYW4gQXJyYXlDb250YWlucy9BcnJheUNvbnRhaW5zQW55ZmlsdGVyIGlzIHVzZWQsIHRoZSBpbmRleCBtdXN0IGFsc29cbiAgICAgKiAgIGhhdmUgYSBjb3JyZXNwb25kaW5nIGBDT05UQUlOU2Agc2VnbWVudC5cbiAgICAgKiAtIEFsbCBkaXJlY3Rpb25hbCBpbmRleCBzZWdtZW50cyBjYW4gYmUgbWFwcGVkIHRvIHRoZSB0YXJnZXQgYXMgYSBzZXJpZXMgb2ZcbiAgICAgKiAgIGVxdWFsaXR5IGZpbHRlcnMsIGEgc2luZ2xlIGluZXF1YWxpdHkgZmlsdGVyIGFuZCBhIHNlcmllcyBvZiBvcmRlckJ5XG4gICAgICogICBjbGF1c2VzLlxuICAgICAqIC0gVGhlIHNlZ21lbnRzIHRoYXQgcmVwcmVzZW50IHRoZSBlcXVhbGl0eSBmaWx0ZXJzIG1heSBhcHBlYXIgb3V0IG9mIG9yZGVyLlxuICAgICAqIC0gVGhlIG9wdGlvbmFsIHNlZ21lbnQgZm9yIHRoZSBpbmVxdWFsaXR5IGZpbHRlciBtdXN0IGFwcGVhciBhZnRlciBhbGxcbiAgICAgKiAgIGVxdWFsaXR5IHNlZ21lbnRzLlxuICAgICAqIC0gVGhlIHNlZ21lbnRzIHRoYXQgcmVwcmVzZW50IHRoYXQgb3JkZXJCeSBjbGF1c2Ugb2YgdGhlIHRhcmdldCBtdXN0IGFwcGVhclxuICAgICAqICAgaW4gb3JkZXIgYWZ0ZXIgYWxsIGVxdWFsaXR5IGFuZCBpbmVxdWFsaXR5IHNlZ21lbnRzLiBTaW5nbGUgb3JkZXJCeVxuICAgICAqICAgY2xhdXNlcyBjYW5ub3QgYmUgc2tpcHBlZCwgYnV0IGEgY29udGludW91cyBvcmRlckJ5IHN1ZmZpeCBtYXkgYmVcbiAgICAgKiAgIG9taXR0ZWQuXG4gICAgICovICAgIHRuKGUpIHtcbiAgICAgICAgaWYgKF9fUFJJVkFURV9oYXJkQXNzZXJ0KGUuY29sbGVjdGlvbkdyb3VwID09PSB0aGlzLmNvbGxlY3Rpb25JZCksIHRoaXMuZW4pIFxuICAgICAgICAvLyBPbmx5IHNpbmdsZSBpbmVxdWFsaXR5IGlzIHN1cHBvcnRlZCBmb3Igbm93LlxuICAgICAgICAvLyBUT0RPKEFkZCBzdXBwb3J0IGZvciBtdWx0aXBsZSBpbmVxdWFsaXR5IHF1ZXJ5KTogYi8yOTg0NDEwNDNcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBhcnJheSBlbGVtZW50LCBmaW5kIGEgbWF0Y2hpbmcgZmlsdGVyLlxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfZmllbGRJbmRleEdldEFycmF5U2VnbWVudChlKTtcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gdCAmJiAhdGhpcy5ubih0KSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2ZpZWxkSW5kZXhHZXREaXJlY3Rpb25hbFNlZ21lbnRzKGUpO1xuICAgICAgICBsZXQgciA9IG5ldyBTZXQsIGkgPSAwLCBzID0gMDtcbiAgICAgICAgLy8gUHJvY2VzcyBhbGwgZXF1YWxpdGllcyBmaXJzdC4gRXF1YWxpdGllcyBjYW4gYXBwZWFyIG91dCBvZiBvcmRlci5cbiAgICAgICAgZm9yICg7aSA8IG4ubGVuZ3RoICYmIHRoaXMubm4obltpXSk7ICsraSkgciA9IHIuYWRkKG5baV0uZmllbGRQYXRoLmNhbm9uaWNhbFN0cmluZygpKTtcbiAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBoYXZlIHByb2Nlc3NlZCBhbGwgc2VnbWVudHMsIGFsbCBzZWdtZW50cyBhcmUgdXNlZCB0byBzZXJ2ZVxuICAgICAgICAvLyB0aGUgZXF1YWxpdHkgZmlsdGVycyBhbmQgd2UgZG8gbm90IG5lZWQgdG8gbWFwIGFueSBzZWdtZW50cyB0byB0aGVcbiAgICAgICAgLy8gdGFyZ2V0J3MgaW5lcXVhbGl0eSBhbmQgb3JkZXJCeSBjbGF1c2VzLlxuICAgICAgICAgICAgICAgIGlmIChpID09PSBuLmxlbmd0aCkgcmV0dXJuICEwO1xuICAgICAgICBpZiAodGhpcy5ZdC5zaXplID4gMCkge1xuICAgICAgICAgICAgLy8gT25seSBhIHNpbmdsZSBpbmVxdWFsaXR5IGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuIEdldCB0aGUgb25seSBlbnRyeSBpbiB0aGUgc2V0LlxuICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuWXQuZ2V0SXRlcmF0b3IoKS5nZXROZXh0KCk7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBpbmVxdWFsaXR5IGZpbHRlciBhbmQgdGhlIGZpZWxkIHdhcyBub3QgaW4gb25lIG9mIHRoZVxuICAgICAgICAgICAgLy8gZXF1YWxpdHkgZmlsdGVycyBhYm92ZSwgdGhlIG5leHQgc2VnbWVudCBtdXN0IG1hdGNoIGJvdGggdGhlIGZpbHRlclxuICAgICAgICAgICAgLy8gYW5kIHRoZSBmaXJzdCBvcmRlckJ5IGNsYXVzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghci5oYXMoZS5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucm4oZSwgdCkgfHwgIXRoaXMuc24odGhpcy5adFtzKytdLCB0KSkgcmV0dXJuICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKytpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsbCByZW1haW5pbmcgc2VnbWVudHMgbmVlZCB0byByZXByZXNlbnQgdGhlIHByZWZpeCBvZiB0aGUgdGFyZ2V0J3NcbiAgICAgICAgLy8gb3JkZXJCeS5cbiAgICAgICAgICAgICAgICBmb3IgKDtpIDwgbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZSA9IG5baV07XG4gICAgICAgICAgICBpZiAocyA+PSB0aGlzLlp0Lmxlbmd0aCB8fCAhdGhpcy5zbih0aGlzLlp0W3MrK10sIGUpKSByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZnVsbCBtYXRjaGVkIGZpZWxkIGluZGV4IGZvciB0aGlzIHRhcmdldC4gQ3VycmVudGx5IG11bHRpcGxlXG4gICAgICogaW5lcXVhbGl0eSBxdWVyeSBpcyBub3Qgc3VwcG9ydGVkIHNvIGZ1bmN0aW9uIHJldHVybnMgbnVsbC5cbiAgICAgKi8gICAgb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmVuKSByZXR1cm4gbnVsbDtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBtYWtlIHN1cmUgb25seSBvbmUgc2VnbWVudCBjcmVhdGVkIGZvciBvbmUgZmllbGQuIEZvciBleGFtcGxlLFxuICAgICAgICAvLyBpbiBjYXNlIGxpa2UgYSA9PSAzIGFuZCBhID4gMiwgSW5kZXgge2EgQVNDRU5ESU5HfSB3aWxsIG9ubHkgYmUgY3JlYXRlZFxuICAgICAgICAvLyBvbmNlLlxuICAgICAgICAgICAgICAgIGxldCBlID0gbmV3IFNvcnRlZFNldChGaWVsZFBhdGgkMS5jb21wYXJhdG9yKTtcbiAgICAgICAgY29uc3QgdCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdGhpcy5YdCkge1xuICAgICAgICAgICAgaWYgKG4uZmllbGQuaXNLZXlGaWVsZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChcImFycmF5LWNvbnRhaW5zXCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlMgKi8gPT09IG4ub3AgfHwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOU19BTlkgKi8gPT09IG4ub3ApIHQucHVzaChuZXcgSW5kZXhTZWdtZW50KG4uZmllbGQsIDIgLyogSW5kZXhLaW5kLkNPTlRBSU5TICovKSk7IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChlLmhhcyhuLmZpZWxkKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgZSA9IGUuYWRkKG4uZmllbGQpLCB0LnB1c2gobmV3IEluZGV4U2VnbWVudChuLmZpZWxkLCAwIC8qIEluZGV4S2luZC5BU0NFTkRJTkcgKi8pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBOb3RlOiBXZSBkbyBub3QgZXhwbGljaXRseSBjaGVjayBgdGhpcy5pbmVxdWFsaXR5RmlsdGVyYCBidXQgcmF0aGVyIHJlbHlcbiAgICAgICAgLy8gb24gdGhlIHRhcmdldCBkZWZpbmluZyBhbiBhcHByb3ByaWF0ZSBcIm9yZGVyIGJ5XCIgdG8gZW5zdXJlIHRoYXQgdGhlXG4gICAgICAgIC8vIHJlcXVpcmVkIGluZGV4IHNlZ21lbnQgaXMgYWRkZWQuIFRoZSBxdWVyeSBlbmdpbmUgd291bGQgcmVqZWN0IGEgcXVlcnlcbiAgICAgICAgLy8gd2l0aCBhbiBpbmVxdWFsaXR5IGZpbHRlciB0aGF0IGxhY2tzIHRoZSByZXF1aXJlZCBvcmRlci1ieSBjbGF1c2UuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHRoaXMuWnQpIFxuICAgICAgICAvLyBTdG9wIGFkZGluZyBtb3JlIHNlZ21lbnRzIGlmIHdlIHNlZSBhIG9yZGVyLWJ5IG9uIGtleS4gVHlwaWNhbGx5IHRoaXNcbiAgICAgICAgLy8gaXMgdGhlIGRlZmF1bHQgaW1wbGljaXQgb3JkZXItYnkgd2hpY2ggaXMgY292ZXJlZCBpbiB0aGUgaW5kZXhfZW50cnlcbiAgICAgICAgLy8gdGFibGUgYXMgYSBzZXBhcmF0ZSBjb2x1bW4uIElmIGl0IGlzIG5vdCB0aGUgZGVmYXVsdCBvcmRlci1ieSwgdGhlXG4gICAgICAgIC8vIGdlbmVyYXRlZCBpbmRleCB3aWxsIGJlIG1pc3Npbmcgc29tZSBzZWdtZW50cyBvcHRpbWl6ZWQgZm9yIG9yZGVyLWJ5cyxcbiAgICAgICAgLy8gd2hpY2ggaXMgcHJvYmFibHkgZmluZS5cbiAgICAgICAgbi5maWVsZC5pc0tleUZpZWxkKCkgfHwgZS5oYXMobi5maWVsZCkgfHwgKGUgPSBlLmFkZChuLmZpZWxkKSwgdC5wdXNoKG5ldyBJbmRleFNlZ21lbnQobi5maWVsZCwgXCJhc2NcIiAvKiBEaXJlY3Rpb24uQVNDRU5ESU5HICovID09PSBuLmRpciA/IDAgLyogSW5kZXhLaW5kLkFTQ0VORElORyAqLyA6IDEgLyogSW5kZXhLaW5kLkRFU0NFTkRJTkcgKi8pKSk7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRJbmRleChGaWVsZEluZGV4LlVOS05PV05fSUQsIHRoaXMuY29sbGVjdGlvbklkLCB0LCBJbmRleFN0YXRlLmVtcHR5KCkpO1xuICAgIH1cbiAgICBubihlKSB7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLlh0KSBpZiAodGhpcy5ybih0LCBlKSkgcmV0dXJuICEwO1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIHJuKGUsIHQpIHtcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gZSB8fCAhZS5maWVsZC5pc0VxdWFsKHQuZmllbGRQYXRoKSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCBuID0gXCJhcnJheS1jb250YWluc1wiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TICovID09PSBlLm9wIHx8IFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovID09PSBlLm9wO1xuICAgICAgICByZXR1cm4gMiAvKiBJbmRleEtpbmQuQ09OVEFJTlMgKi8gPT09IHQua2luZCA9PT0gbjtcbiAgICB9XG4gICAgc24oZSwgdCkge1xuICAgICAgICByZXR1cm4gISFlLmZpZWxkLmlzRXF1YWwodC5maWVsZFBhdGgpICYmICgwIC8qIEluZGV4S2luZC5BU0NFTkRJTkcgKi8gPT09IHQua2luZCAmJiBcImFzY1wiIC8qIERpcmVjdGlvbi5BU0NFTkRJTkcgKi8gPT09IGUuZGlyIHx8IDEgLyogSW5kZXhLaW5kLkRFU0NFTkRJTkcgKi8gPT09IHQua2luZCAmJiBcImRlc2NcIiAvKiBEaXJlY3Rpb24uREVTQ0VORElORyAqLyA9PT0gZS5kaXIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUHJvdmlkZXMgdXRpbGl0eSBmdW5jdGlvbnMgdGhhdCBoZWxwIHdpdGggYm9vbGVhbiBsb2dpYyB0cmFuc2Zvcm1hdGlvbnMgbmVlZGVkIGZvciBoYW5kbGluZ1xuICogY29tcGxleCBmaWx0ZXJzIHVzZWQgaW4gcXVlcmllcy5cbiAqL1xuLyoqXG4gKiBUaGUgYGluYCBmaWx0ZXIgaXMgb25seSBhIHN5bnRhY3RpYyBzdWdhciBvdmVyIGEgZGlzanVuY3Rpb24gb2YgZXF1YWxpdGllcy4gRm9yIGluc3RhbmNlOiBgYSBpblxuICogWzEsMiwzXWAgaXMgaW4gZmFjdCBgYT09MSB8fCBhPT0yIHx8IGE9PTNgLiBUaGlzIG1ldGhvZCBleHBhbmRzIGFueSBgaW5gIGZpbHRlciBpbiB0aGUgZ2l2ZW5cbiAqIGlucHV0IGludG8gYSBkaXNqdW5jdGlvbiBvZiBlcXVhbGl0eSBmaWx0ZXJzIGFuZCByZXR1cm5zIHRoZSBleHBhbmRlZCBmaWx0ZXIuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2NvbXB1dGVJbkV4cGFuc2lvbihlKSB7XG4gICAgdmFyIHQsIG47XG4gICAgaWYgKF9fUFJJVkFURV9oYXJkQXNzZXJ0KGUgaW5zdGFuY2VvZiBGaWVsZEZpbHRlciB8fCBlIGluc3RhbmNlb2YgQ29tcG9zaXRlRmlsdGVyKSwgXG4gICAgZSBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyKSB7XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgX19QUklWQVRFX0luRmlsdGVyKSB7XG4gICAgICAgICAgICBjb25zdCByID0gKG51bGwgPT09IChuID0gbnVsbCA9PT0gKHQgPSBlLnZhbHVlLmFycmF5VmFsdWUpIHx8IHZvaWQgMCA9PT0gdCA/IHZvaWQgMCA6IHQudmFsdWVzKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLm1hcCgodCA9PiBGaWVsZEZpbHRlci5jcmVhdGUoZS5maWVsZCwgXCI9PVwiIC8qIE9wZXJhdG9yLkVRVUFMICovICwgdCkpKSkgfHwgW107XG4gICAgICAgICAgICByZXR1cm4gQ29tcG9zaXRlRmlsdGVyLmNyZWF0ZShyLCBcIm9yXCIgLyogQ29tcG9zaXRlT3BlcmF0b3IuT1IgKi8pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgcmVhY2hlZCBvdGhlciBraW5kcyBvZiBmaWVsZCBmaWx0ZXJzLlxuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgLy8gV2UgaGF2ZSBhIGNvbXBvc2l0ZSBmaWx0ZXIuXG4gICAgICAgIGNvbnN0IHIgPSBlLmZpbHRlcnMubWFwKChlID0+IF9fUFJJVkFURV9jb21wdXRlSW5FeHBhbnNpb24oZSkpKTtcbiAgICByZXR1cm4gQ29tcG9zaXRlRmlsdGVyLmNyZWF0ZShyLCBlLm9wKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIGNvbXBvc2l0ZSBmaWx0ZXIsIHJldHVybnMgdGhlIGxpc3Qgb2YgdGVybXMgaW4gaXRzIGRpc2p1bmN0aXZlIG5vcm1hbCBmb3JtLlxuICpcbiAqIDxwPkVhY2ggZWxlbWVudCBpbiB0aGUgcmV0dXJuIHZhbHVlIGlzIG9uZSB0ZXJtIG9mIHRoZSByZXN1bHRpbmcgRE5GLiBGb3IgaW5zdGFuY2U6IEZvciB0aGVcbiAqIGlucHV0OiAoQSB8fCBCKSAmJiBDLCB0aGUgRE5GIGZvcm0gaXM6IChBICYmIEMpIHx8IChCICYmIEMpLCBhbmQgdGhlIHJldHVybiB2YWx1ZSBpcyBhIGxpc3RcbiAqIHdpdGggdHdvIGVsZW1lbnRzOiBhIGNvbXBvc2l0ZSBmaWx0ZXIgdGhhdCBwZXJmb3JtcyAoQSAmJiBDKSwgYW5kIGEgY29tcG9zaXRlIGZpbHRlciB0aGF0XG4gKiBwZXJmb3JtcyAoQiAmJiBDKS5cbiAqXG4gKiBAcGFyYW0gZmlsdGVyIHRoZSBjb21wb3NpdGUgZmlsdGVyIHRvIGNhbGN1bGF0ZSBETkYgdHJhbnNmb3JtIGZvci5cbiAqIEByZXR1cm4gdGhlIHRlcm1zIGluIHRoZSBETkYgdHJhbnNmb3JtLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9nZXREbmZUZXJtcyhlKSB7XG4gICAgaWYgKDAgPT09IGUuZ2V0RmlsdGVycygpLmxlbmd0aCkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfY29tcHV0ZURpc3RyaWJ1dGVkTm9ybWFsRm9ybShfX1BSSVZBVEVfY29tcHV0ZUluRXhwYW5zaW9uKGUpKTtcbiAgICByZXR1cm4gX19QUklWQVRFX2hhcmRBc3NlcnQoX19QUklWQVRFX2lzRGlzanVuY3RpdmVOb3JtYWxGb3JtKHQpKSwgX19QUklWQVRFX2lzU2luZ2xlRmllbGRGaWx0ZXIodCkgfHwgX19QUklWQVRFX2lzRmxhdENvbmp1bmN0aW9uKHQpID8gWyB0IF0gOiB0LmdldEZpbHRlcnMoKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gZmlsdGVyIGlzIGEgc2luZ2xlIGZpZWxkIGZpbHRlci4gZS5nLiAoYSA9PSAxMCkuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9pc1NpbmdsZUZpZWxkRmlsdGVyKGUpIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gZmlsdGVyIGlzIHRoZSBjb25qdW5jdGlvbiBvZiBvbmUgb3IgbW9yZSBmaWVsZCBmaWx0ZXJzLiBlLmcuIChhID09IDEwXG4gKiAmJiBiID09IDIwKVxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9pc0ZsYXRDb25qdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDb21wb3NpdGVGaWx0ZXIgJiYgX19QUklWQVRFX2NvbXBvc2l0ZUZpbHRlcklzRmxhdENvbmp1bmN0aW9uKGUpO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGZpbHRlciBpcyBpbiBkaXNqdW5jdGl2ZSBub3JtYWwgZm9ybSAoRE5GKS5cbiAqXG4gKiA8cD5JbiBib29sZWFuIGxvZ2ljLCBhIGRpc2p1bmN0aXZlIG5vcm1hbCBmb3JtIChETkYpIGlzIGEgY2Fub25pY2FsIG5vcm1hbCBmb3JtIG9mIGEgbG9naWNhbFxuICogZm9ybXVsYSBjb25zaXN0aW5nIG9mIGEgZGlzanVuY3Rpb24gb2YgY29uanVuY3Rpb25zOyBpdCBjYW4gYWxzbyBiZSBkZXNjcmliZWQgYXMgYW4gT1Igb2YgQU5Ecy5cbiAqXG4gKiA8cD5Gb3IgbW9yZSBpbmZvLCB2aXNpdDogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzanVuY3RpdmVfbm9ybWFsX2Zvcm1cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfaXNEaXNqdW5jdGl2ZU5vcm1hbEZvcm0oZSkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfaXNTaW5nbGVGaWVsZEZpbHRlcihlKSB8fCBfX1BSSVZBVEVfaXNGbGF0Q29uanVuY3Rpb24oZSkgfHwgXG4gICAgLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGZpbHRlciBpcyB0aGUgZGlzanVuY3Rpb24gb2Ygb25lIG9yIG1vcmUgXCJmbGF0IGNvbmp1bmN0aW9uc1wiIGFuZFxuICogZmllbGQgZmlsdGVycy4gZS5nLiAoYSA9PSAxMCkgfHwgKGI9PTIwICYmIGM9PTMwKVxuICovXG4gICAgZnVuY3Rpb24gX19QUklWQVRFX2lzRGlzanVuY3Rpb25PZkZpZWxkRmlsdGVyc0FuZEZsYXRDb25qdW5jdGlvbnMoZSkge1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIENvbXBvc2l0ZUZpbHRlciAmJiBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNEaXNqdW5jdGlvbihlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGUuZ2V0RmlsdGVycygpKSBpZiAoIV9fUFJJVkFURV9pc1NpbmdsZUZpZWxkRmlsdGVyKHQpICYmICFfX1BSSVZBVEVfaXNGbGF0Q29uanVuY3Rpb24odCkpIHJldHVybiAhMTtcbiAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITE7XG4gICAgfShlKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2NvbXB1dGVEaXN0cmlidXRlZE5vcm1hbEZvcm0oZSkge1xuICAgIGlmIChfX1BSSVZBVEVfaGFyZEFzc2VydChlIGluc3RhbmNlb2YgRmllbGRGaWx0ZXIgfHwgZSBpbnN0YW5jZW9mIENvbXBvc2l0ZUZpbHRlciksIFxuICAgIGUgaW5zdGFuY2VvZiBGaWVsZEZpbHRlcikgcmV0dXJuIGU7XG4gICAgaWYgKDEgPT09IGUuZmlsdGVycy5sZW5ndGgpIHJldHVybiBfX1BSSVZBVEVfY29tcHV0ZURpc3RyaWJ1dGVkTm9ybWFsRm9ybShlLmZpbHRlcnNbMF0pO1xuICAgIC8vIENvbXB1dGUgRE5GIGZvciBlYWNoIG9mIHRoZSBzdWJmaWx0ZXJzIGZpcnN0XG4gICAgICAgIGNvbnN0IHQgPSBlLmZpbHRlcnMubWFwKChlID0+IF9fUFJJVkFURV9jb21wdXRlRGlzdHJpYnV0ZWROb3JtYWxGb3JtKGUpKSk7XG4gICAgbGV0IG4gPSBDb21wb3NpdGVGaWx0ZXIuY3JlYXRlKHQsIGUub3ApO1xuICAgIHJldHVybiBuID0gX19QUklWQVRFX2FwcGx5QXNzb2NpYXRpb24obiksIF9fUFJJVkFURV9pc0Rpc2p1bmN0aXZlTm9ybWFsRm9ybShuKSA/IG4gOiAoX19QUklWQVRFX2hhcmRBc3NlcnQobiBpbnN0YW5jZW9mIENvbXBvc2l0ZUZpbHRlciksIFxuICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KF9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJJc0Nvbmp1bmN0aW9uKG4pKSwgX19QUklWQVRFX2hhcmRBc3NlcnQobi5maWx0ZXJzLmxlbmd0aCA+IDEpLCBcbiAgICBuLmZpbHRlcnMucmVkdWNlKCgoZSwgdCkgPT4gX19QUklWQVRFX2FwcGx5RGlzdHJpYnV0aW9uKGUsIHQpKSkpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfYXBwbHlEaXN0cmlidXRpb24oZSwgdCkge1xuICAgIGxldCBuO1xuICAgIHJldHVybiBfX1BSSVZBVEVfaGFyZEFzc2VydChlIGluc3RhbmNlb2YgRmllbGRGaWx0ZXIgfHwgZSBpbnN0YW5jZW9mIENvbXBvc2l0ZUZpbHRlciksIFxuICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KHQgaW5zdGFuY2VvZiBGaWVsZEZpbHRlciB8fCB0IGluc3RhbmNlb2YgQ29tcG9zaXRlRmlsdGVyKSwgXG4gICAgLy8gRmllbGRGaWx0ZXIgRmllbGRGaWx0ZXJcbiAgICBuID0gZSBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyID8gdCBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyID8gZnVuY3Rpb24gX19QUklWQVRFX2FwcGx5RGlzdHJpYnV0aW9uRmllbGRGaWx0ZXJzKGUsIHQpIHtcbiAgICAgICAgLy8gQ29uanVuY3Rpb24gZGlzdHJpYnV0aW9uIGZvciB0d28gZmllbGQgZmlsdGVycyBpcyB0aGUgY29uanVuY3Rpb24gb2YgdGhlbS5cbiAgICAgICAgcmV0dXJuIENvbXBvc2l0ZUZpbHRlci5jcmVhdGUoWyBlLCB0IF0sIFwiYW5kXCIgLyogQ29tcG9zaXRlT3BlcmF0b3IuQU5EICovKTtcbiAgICB9KGUsIHQpIDogX19QUklWQVRFX2FwcGx5RGlzdHJpYnV0aW9uRmllbGRBbmRDb21wb3NpdGVGaWx0ZXJzKGUsIHQpIDogdCBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyID8gX19QUklWQVRFX2FwcGx5RGlzdHJpYnV0aW9uRmllbGRBbmRDb21wb3NpdGVGaWx0ZXJzKHQsIGUpIDogZnVuY3Rpb24gX19QUklWQVRFX2FwcGx5RGlzdHJpYnV0aW9uQ29tcG9zaXRlRmlsdGVycyhlLCB0KSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBmb3VyIGNhc2VzOlxuICAgICAgICAvLyAoQSAmIEIpICYgKEMgJiBEKSAtLT4gKEEgJiBCICYgQyAmIEQpXG4gICAgICAgIC8vIChBICYgQikgJiAoQyB8IEQpIC0tPiAoQSAmIEIgJiBDKSB8IChBICYgQiAmIEQpXG4gICAgICAgIC8vIChBIHwgQikgJiAoQyAmIEQpIC0tPiAoQyAmIEQgJiBBKSB8IChDICYgRCAmIEIpXG4gICAgICAgIC8vIChBIHwgQikgJiAoQyB8IEQpIC0tPiAoQSAmIEMpIHwgKEEgJiBEKSB8IChCICYgQykgfCAoQiAmIEQpXG4gICAgICAgIC8vIENhc2UgMSBpcyBhIG1lcmdlLlxuICAgICAgICBpZiAoX19QUklWQVRFX2hhcmRBc3NlcnQoZS5maWx0ZXJzLmxlbmd0aCA+IDAgJiYgdC5maWx0ZXJzLmxlbmd0aCA+IDApLCBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNDb25qdW5jdGlvbihlKSAmJiBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNDb25qdW5jdGlvbih0KSkgcmV0dXJuIF9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJXaXRoQWRkZWRGaWx0ZXJzKGUsIHQuZ2V0RmlsdGVycygpKTtcbiAgICAgICAgLy8gQ2FzZSAyLDMsNCBhbGwgaGF2ZSBhdCBsZWFzdCBvbmUgc2lkZSAobGhzIG9yIHJocykgdGhhdCBpcyBhIGRpc2p1bmN0aW9uLiBJbiBhbGwgdGhyZWUgY2FzZXNcbiAgICAgICAgLy8gd2Ugc2hvdWxkIHRha2UgZWFjaCBlbGVtZW50IG9mIHRoZSBkaXNqdW5jdGlvbiBhbmQgZGlzdHJpYnV0ZSBpdCBvdmVyIHRoZSBvdGhlciBzaWRlLCBhbmRcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXNqdW5jdGlvbiBvZiB0aGUgZGlzdHJpYnV0aW9uIHJlc3VsdHMuXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJJc0Rpc2p1bmN0aW9uKGUpID8gZSA6IHQsIHIgPSBfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNEaXNqdW5jdGlvbihlKSA/IHQgOiBlLCBpID0gbi5maWx0ZXJzLm1hcCgoZSA9PiBfX1BSSVZBVEVfYXBwbHlEaXN0cmlidXRpb24oZSwgcikpKTtcbiAgICAgICAgcmV0dXJuIENvbXBvc2l0ZUZpbHRlci5jcmVhdGUoaSwgXCJvclwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLk9SICovKTtcbiAgICB9KGUsIHQpLCBfX1BSSVZBVEVfYXBwbHlBc3NvY2lhdGlvbihuKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2FwcGx5RGlzdHJpYnV0aW9uRmllbGRBbmRDb21wb3NpdGVGaWx0ZXJzKGUsIHQpIHtcbiAgICAvLyBUaGVyZSBhcmUgdHdvIGNhc2VzOlxuICAgIC8vIEEgJiAoQiAmIEMpIC0tPiAoQSAmIEIgJiBDKVxuICAgIC8vIEEgJiAoQiB8IEMpIC0tPiAoQSAmIEIpIHwgKEEgJiBDKVxuICAgIGlmIChfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNDb25qdW5jdGlvbih0KSkgXG4gICAgLy8gQ2FzZSAxXG4gICAgcmV0dXJuIF9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJXaXRoQWRkZWRGaWx0ZXJzKHQsIGUuZ2V0RmlsdGVycygpKTtcbiAgICB7XG4gICAgICAgIC8vIENhc2UgMlxuICAgICAgICBjb25zdCBuID0gdC5maWx0ZXJzLm1hcCgodCA9PiBfX1BSSVZBVEVfYXBwbHlEaXN0cmlidXRpb24oZSwgdCkpKTtcbiAgICAgICAgcmV0dXJuIENvbXBvc2l0ZUZpbHRlci5jcmVhdGUobiwgXCJvclwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLk9SICovKTtcbiAgICB9XG59XG5cbi8qKlxuICogQXBwbGllcyB0aGUgYXNzb2NpYXRpdml0eSBwcm9wZXJ0eSB0byB0aGUgZ2l2ZW4gZmlsdGVyIGFuZCByZXR1cm5zIHRoZSByZXN1bHRpbmcgZmlsdGVyLlxuICpcbiAqIDx1bD5cbiAqICAgPGxpPkEgfCAoQiB8IEMpID09IChBIHwgQikgfCBDID09IChBIHwgQiB8IEMpXG4gKiAgIDxsaT5BICYgKEIgJiBDKSA9PSAoQSAmIEIpICYgQyA9PSAoQSAmIEIgJiBDKVxuICogPC91bD5cbiAqXG4gKiA8cD5Gb3IgbW9yZSBpbmZvLCB2aXNpdDogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXNzb2NpYXRpdmVfcHJvcGVydHkjUHJvcG9zaXRpb25hbF9sb2dpY1xuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9hcHBseUFzc29jaWF0aW9uKGUpIHtcbiAgICBpZiAoX19QUklWQVRFX2hhcmRBc3NlcnQoZSBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyIHx8IGUgaW5zdGFuY2VvZiBDb21wb3NpdGVGaWx0ZXIpLCBcbiAgICBlIGluc3RhbmNlb2YgRmllbGRGaWx0ZXIpIHJldHVybiBlO1xuICAgIGNvbnN0IHQgPSBlLmdldEZpbHRlcnMoKTtcbiAgICAvLyBJZiB0aGUgY29tcG9zaXRlIGZpbHRlciBvbmx5IGNvbnRhaW5zIDEgZmlsdGVyLCBhcHBseSBhc3NvY2lhdGl2aXR5IHRvIGl0LlxuICAgICAgICBpZiAoMSA9PT0gdC5sZW5ndGgpIHJldHVybiBfX1BSSVZBVEVfYXBwbHlBc3NvY2lhdGlvbih0WzBdKTtcbiAgICAvLyBBc3NvY2lhdGl2aXR5IGFwcGxpZWQgdG8gYSBmbGF0IGNvbXBvc2l0ZSBmaWx0ZXIgcmVzdWx0cyBpcyBpdHNlbGYuXG4gICAgICAgIGlmIChfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNGbGF0KGUpKSByZXR1cm4gZTtcbiAgICAvLyBGaXJzdCBhcHBseSBhc3NvY2lhdGl2aXR5IHRvIGFsbCBzdWJmaWx0ZXJzLiBUaGlzIHdpbGwgaW4gdHVybiByZWN1cnNpdmVseSBhcHBseVxuICAgIC8vIGFzc29jaWF0aXZpdHkgdG8gYWxsIG5lc3RlZCBjb21wb3NpdGUgZmlsdGVycyBhbmQgZmllbGQgZmlsdGVycy5cbiAgICAgICAgY29uc3QgbiA9IHQubWFwKChlID0+IF9fUFJJVkFURV9hcHBseUFzc29jaWF0aW9uKGUpKSksIHIgPSBbXTtcbiAgICAvLyBGb3IgY29tcG9zaXRlIHN1YmZpbHRlcnMgdGhhdCBwZXJmb3JtIHRoZSBzYW1lIGtpbmQgb2YgbG9naWNhbCBvcGVyYXRpb24gYXMgYGNvbXBvc2l0ZUZpbHRlcmBcbiAgICAvLyB0YWtlIG91dCB0aGVpciBmaWx0ZXJzIGFuZCBhZGQgdGhlbSB0byBgY29tcG9zaXRlRmlsdGVyYC4gRm9yIGV4YW1wbGU6XG4gICAgLy8gY29tcG9zaXRlRmlsdGVyID0gKEEgfCAoQiB8IEMgfCBEKSlcbiAgICAvLyBjb21wb3NpdGVTdWJmaWx0ZXIgPSAoQiB8IEMgfCBEKVxuICAgIC8vIFJlc3VsdDogKEEgfCBCIHwgQyB8IEQpXG4gICAgLy8gTm90ZSB0aGF0IHRoZSBgY29tcG9zaXRlU3ViZmlsdGVyYCBoYXMgYmVlbiBlbGltaW5hdGVkLCBhbmQgaXRzIGZpbHRlcnMgKEIsIEMsIEQpIGhhdmUgYmVlblxuICAgIC8vIGFkZGVkIHRvIHRoZSB0b3AtbGV2ZWwgXCJjb21wb3NpdGVGaWx0ZXJcIi5cbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgodCA9PiB7XG4gICAgICAgIHQgaW5zdGFuY2VvZiBGaWVsZEZpbHRlciA/IHIucHVzaCh0KSA6IHQgaW5zdGFuY2VvZiBDb21wb3NpdGVGaWx0ZXIgJiYgKHQub3AgPT09IGUub3AgPyBcbiAgICAgICAgLy8gY29tcG9zaXRlRmlsdGVyOiAoQSB8IChCIHwgQykpXG4gICAgICAgIC8vIGNvbXBvc2l0ZVN1YmZpbHRlcjogKEIgfCBDKVxuICAgICAgICAvLyBSZXN1bHQ6IChBIHwgQiB8IEMpXG4gICAgICAgIHIucHVzaCguLi50LmZpbHRlcnMpIDogXG4gICAgICAgIC8vIGNvbXBvc2l0ZUZpbHRlcjogKEEgfCAoQiAmIEMpKVxuICAgICAgICAvLyBjb21wb3NpdGVTdWJmaWx0ZXI6IChCICYgQylcbiAgICAgICAgLy8gUmVzdWx0OiAoQSB8IChCICYgQykpXG4gICAgICAgIHIucHVzaCh0KSk7XG4gICAgfSkpLCAxID09PSByLmxlbmd0aCA/IHJbMF0gOiBDb21wb3NpdGVGaWx0ZXIuY3JlYXRlKHIsIGUub3ApO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBpbi1tZW1vcnkgaW1wbGVtZW50YXRpb24gb2YgSW5kZXhNYW5hZ2VyLlxuICovIGNsYXNzIF9fUFJJVkFURV9NZW1vcnlJbmRleE1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9uID0gbmV3IF9fUFJJVkFURV9NZW1vcnlDb2xsZWN0aW9uUGFyZW50SW5kZXg7XG4gICAgfVxuICAgIGFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX24uYWRkKHQpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXRDb2xsZWN0aW9uUGFyZW50cyhlLCB0KSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLl9uLmdldEVudHJpZXModCkpO1xuICAgIH1cbiAgICBhZGRGaWVsZEluZGV4KGUsIHQpIHtcbiAgICAgICAgLy8gRmllbGQgaW5kaWNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIG1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGRlbGV0ZUZpZWxkSW5kZXgoZSwgdCkge1xuICAgICAgICAvLyBGaWVsZCBpbmRpY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggbWVtb3J5IHBlcnNpc3RlbmNlLlxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZGVsZXRlQWxsRmllbGRJbmRleGVzKGUpIHtcbiAgICAgICAgLy8gRmllbGQgaW5kaWNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIG1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNyZWF0ZVRhcmdldEluZGV4ZXMoZSwgdCkge1xuICAgICAgICAvLyBGaWVsZCBpbmRpY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggbWVtb3J5IHBlcnNpc3RlbmNlLlxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdUYXJnZXQoZSwgdCkge1xuICAgICAgICAvLyBGaWVsZCBpbmRpY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggbWVtb3J5IHBlcnNpc3RlbmNlLlxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGdldEluZGV4VHlwZShlLCB0KSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgwIC8qIEluZGV4VHlwZS5OT05FICovKTtcbiAgICB9XG4gICAgZ2V0RmllbGRJbmRleGVzKGUsIHQpIHtcbiAgICAgICAgLy8gRmllbGQgaW5kaWNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIG1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgICB9XG4gICAgZ2V0TmV4dENvbGxlY3Rpb25Hcm91cFRvVXBkYXRlKGUpIHtcbiAgICAgICAgLy8gRmllbGQgaW5kaWNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIG1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBnZXRNaW5PZmZzZXQoZSwgdCkge1xuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoSW5kZXhPZmZzZXQubWluKCkpO1xuICAgIH1cbiAgICBnZXRNaW5PZmZzZXRGcm9tQ29sbGVjdGlvbkdyb3VwKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKEluZGV4T2Zmc2V0Lm1pbigpKTtcbiAgICB9XG4gICAgdXBkYXRlQ29sbGVjdGlvbkdyb3VwKGUsIHQsIG4pIHtcbiAgICAgICAgLy8gRmllbGQgaW5kaWNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIG1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHVwZGF0ZUluZGV4RW50cmllcyhlLCB0KSB7XG4gICAgICAgIC8vIEZpZWxkIGluZGljZXMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBtZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgY29sbGVjdGlvbi1wYXJlbnQgaW5kZXggZXhwb3NlZCBieSBNZW1vcnlJbmRleE1hbmFnZXIuXG4gKiBBbHNvIHVzZWQgZm9yIGluLW1lbW9yeSBjYWNoaW5nIGJ5IEluZGV4ZWREYkluZGV4TWFuYWdlciBhbmQgaW5pdGlhbCBpbmRleCBwb3B1bGF0aW9uXG4gKiBpbiBpbmRleGVkZGJfc2NoZW1hLnRzXG4gKi8gY2xhc3MgX19QUklWQVRFX01lbW9yeUNvbGxlY3Rpb25QYXJlbnRJbmRleCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSB7fTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBmYWxzZSBpZiB0aGUgZW50cnkgYWxyZWFkeSBleGlzdGVkLlxuICAgIGFkZChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLmxhc3RTZWdtZW50KCksIG4gPSBlLnBvcExhc3QoKSwgciA9IHRoaXMuaW5kZXhbdF0gfHwgbmV3IFNvcnRlZFNldChSZXNvdXJjZVBhdGguY29tcGFyYXRvciksIGkgPSAhci5oYXMobik7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4W3RdID0gci5hZGQobiksIGk7XG4gICAgfVxuICAgIGhhcyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLmxhc3RTZWdtZW50KCksIG4gPSBlLnBvcExhc3QoKSwgciA9IHRoaXMuaW5kZXhbdF07XG4gICAgICAgIHJldHVybiByICYmIHIuaGFzKG4pO1xuICAgIH1cbiAgICBnZXRFbnRyaWVzKGUpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmluZGV4W2VdIHx8IG5ldyBTb3J0ZWRTZXQoUmVzb3VyY2VQYXRoLmNvbXBhcmF0b3IpKS50b0FycmF5KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBkZSA9IG5ldyBVaW50OEFycmF5KDApO1xuXG4vKipcbiAqIEEgcGVyc2lzdGVkIGltcGxlbWVudGF0aW9uIG9mIEluZGV4TWFuYWdlci5cbiAqXG4gKiBQT1JUSU5HIE5PVEU6IFVubGlrZSBpT1MgYW5kIEFuZHJvaWQsIHRoZSBXZWIgU0RLIGRvZXMgbm90IG1lbW9pemUgaW5kZXhcbiAqIGRhdGEgYXMgaXQgc3VwcG9ydHMgbXVsdGktdGFiIGFjY2Vzcy5cbiAqL1xuY2xhc3MgX19QUklWQVRFX0luZGV4ZWREYkluZGV4TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLmRhdGFiYXNlSWQgPSB0LCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGluLW1lbW9yeSBjb3B5IG9mIHRoZSBpbmRleCBlbnRyaWVzIHdlJ3ZlIGFscmVhZHkgd3JpdHRlbiBzaW5jZSB0aGUgU0RLXG4gICAgICAgICAqIGxhdW5jaGVkLiBVc2VkIHRvIGF2b2lkIHJlLXdyaXRpbmcgdGhlIHNhbWUgZW50cnkgcmVwZWF0ZWRseS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBpcyAqTk9UKiBhIGNvbXBsZXRlIGNhY2hlIG9mIHdoYXQncyBpbiBwZXJzaXN0ZW5jZSBhbmQgc28gY2FuIG5ldmVyIGJlXG4gICAgICAgICAqIHVzZWQgdG8gc2F0aXNmeSByZWFkcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW4gPSBuZXcgX19QUklWQVRFX01lbW9yeUNvbGxlY3Rpb25QYXJlbnRJbmRleCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXBzIGZyb20gYSB0YXJnZXQgdG8gaXRzIGVxdWl2YWxlbnQgbGlzdCBvZiBzdWItdGFyZ2V0cy4gRWFjaCBzdWItdGFyZ2V0XG4gICAgICAgICAqIGNvbnRhaW5zIG9ubHkgb25lIHRlcm0gZnJvbSB0aGUgdGFyZ2V0J3MgZGlzanVuY3RpdmUgbm9ybWFsIGZvcm0gKERORikuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVuID0gbmV3IE9iamVjdE1hcCgoZSA9PiBfX1BSSVZBVEVfY2Fub25pZnlUYXJnZXQoZSkpLCAoKGUsIHQpID0+IF9fUFJJVkFURV90YXJnZXRFcXVhbHMoZSwgdCkpKSwgXG4gICAgICAgIHRoaXMudWlkID0gZS51aWQgfHwgXCJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBlbnRyeSB0byB0aGUgY29sbGVjdGlvbiBwYXJlbnQgaW5kZXguXG4gICAgICpcbiAgICAgKiBSZXBlYXRlZCBjYWxscyBmb3IgdGhlIHNhbWUgY29sbGVjdGlvblBhdGggc2hvdWxkIGJlIGF2b2lkZWQgd2l0aGluIGFcbiAgICAgKiB0cmFuc2FjdGlvbiBhcyBJbmRleGVkRGJJbmRleE1hbmFnZXIgb25seSBjYWNoZXMgd3JpdGVzIG9uY2UgYSB0cmFuc2FjdGlvblxuICAgICAqIGhhcyBiZWVuIGNvbW1pdHRlZC5cbiAgICAgKi8gICAgYWRkVG9Db2xsZWN0aW9uUGFyZW50SW5kZXgoZSwgdCkge1xuICAgICAgICBpZiAoIXRoaXMuYW4uaGFzKHQpKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdC5sYXN0U2VnbWVudCgpLCByID0gdC5wb3BMYXN0KCk7XG4gICAgICAgICAgICBlLmFkZE9uQ29tbWl0dGVkTGlzdGVuZXIoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGNvbGxlY3Rpb24gdG8gdGhlIGluIG1lbW9yeSBjYWNoZSBvbmx5IGlmIHRoZSB0cmFuc2FjdGlvbiB3YXNcbiAgICAgICAgICAgICAgICAvLyBzdWNjZXNzZnVsbHkgY29tbWl0dGVkLlxuICAgICAgICAgICAgICAgIHRoaXMuYW4uYWRkKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3QgaSA9IHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWQ6IG4sXG4gICAgICAgICAgICAgICAgcGFyZW50OiBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKHIpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9jb2xsZWN0aW9uUGFyZW50c1N0b3JlKGUpLnB1dChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZ2V0Q29sbGVjdGlvblBhcmVudHMoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gW10sIHIgPSBJREJLZXlSYW5nZS5ib3VuZChbIHQsIFwiXCIgXSwgWyBfX1BSSVZBVEVfaW1tZWRpYXRlU3VjY2Vzc29yKHQpLCBcIlwiIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9jb2xsZWN0aW9uUGFyZW50c1N0b3JlKGUpLlUocikubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHIgb2YgZSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgY29sbGVjdGlvbklkIGd1YXJkIHNob3VsZG4ndCBiZSBuZWNlc3NhcnkgKGFuZCBpc24ndCBhcyBsb25nXG4gICAgICAgICAgICAgICAgLy8gYXMgd2UncmUgcnVubmluZyBpbiBhIHJlYWwgYnJvd3NlciksIGJ1dCB0aGVyZSdzIGEgYnVnIGluXG4gICAgICAgICAgICAgICAgLy8gaW5kZXhlZGRic2hpbSB0aGF0IGJyZWFrcyBvdXIgcmFuZ2UgaW4gb3VyIHRlc3RzIHJ1bm5pbmcgaW4gbm9kZTpcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXhlbWNsaW9uL0luZGV4ZWREQlNoaW0vaXNzdWVzLzMzNFxuICAgICAgICAgICAgICAgIGlmIChyLmNvbGxlY3Rpb25JZCAhPT0gdCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgbi5wdXNoKF9fUFJJVkFURV9kZWNvZGVSZXNvdXJjZVBhdGgoci5wYXJlbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGFkZEZpZWxkSW5kZXgoZSwgdCkge1xuICAgICAgICAvLyBUT0RPKGluZGV4aW5nKTogVmVyaWZ5IHRoYXQgdGhlIGF1dG8taW5jcmVtZW50aW5nIGluZGV4IElEIHdvcmtzIGluXG4gICAgICAgIC8vIFNhZmFyaSAmIEZpcmVmb3guXG4gICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfaW5kZXhDb25maWd1cmF0aW9uU3RvcmUoZSksIHIgPSBmdW5jdGlvbiBfX1BSSVZBVEVfdG9EYkluZGV4Q29uZmlndXJhdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGluZGV4SWQ6IGUuaW5kZXhJZCxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uR3JvdXA6IGUuY29sbGVjdGlvbkdyb3VwLFxuICAgICAgICAgICAgICAgIGZpZWxkczogZS5maWVsZHMubWFwKChlID0+IFsgZS5maWVsZFBhdGguY2Fub25pY2FsU3RyaW5nKCksIGUua2luZCBdKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0odCk7XG4gICAgICAgIGRlbGV0ZSByLmluZGV4SWQ7XG4gICAgICAgIC8vIGBpbmRleElkYCBpcyBhdXRvLXBvcHVsYXRlZCBieSBJbmRleGVkRGJcbiAgICAgICAgY29uc3QgaSA9IG4uYWRkKHIpO1xuICAgICAgICBpZiAodC5pbmRleFN0YXRlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2luZGV4U3RhdGVTdG9yZShlKTtcbiAgICAgICAgICAgIHJldHVybiBpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgIG4ucHV0KF9fUFJJVkFURV90b0RiSW5kZXhTdGF0ZShlLCB0aGlzLnVpZCwgdC5pbmRleFN0YXRlLnNlcXVlbmNlTnVtYmVyLCB0LmluZGV4U3RhdGUub2Zmc2V0KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGkubmV4dCgpO1xuICAgIH1cbiAgICBkZWxldGVGaWVsZEluZGV4KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9pbmRleENvbmZpZ3VyYXRpb25TdG9yZShlKSwgciA9IF9fUFJJVkFURV9pbmRleFN0YXRlU3RvcmUoZSksIGkgPSBfX1BSSVZBVEVfaW5kZXhFbnRyaWVzU3RvcmUoZSk7XG4gICAgICAgIHJldHVybiBuLmRlbGV0ZSh0LmluZGV4SWQpLm5leHQoKCgpID0+IHIuZGVsZXRlKElEQktleVJhbmdlLmJvdW5kKFsgdC5pbmRleElkIF0sIFsgdC5pbmRleElkICsgMSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCkpKSkubmV4dCgoKCkgPT4gaS5kZWxldGUoSURCS2V5UmFuZ2UuYm91bmQoWyB0LmluZGV4SWQgXSwgWyB0LmluZGV4SWQgKyAxIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKSkpKTtcbiAgICB9XG4gICAgZGVsZXRlQWxsRmllbGRJbmRleGVzKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9pbmRleENvbmZpZ3VyYXRpb25TdG9yZShlKSwgbiA9IF9fUFJJVkFURV9pbmRleEVudHJpZXNTdG9yZShlKSwgciA9IF9fUFJJVkFURV9pbmRleFN0YXRlU3RvcmUoZSk7XG4gICAgICAgIHJldHVybiB0LmooKS5uZXh0KCgoKSA9PiBuLmooKSkpLm5leHQoKCgpID0+IHIuaigpKSk7XG4gICAgfVxuICAgIGNyZWF0ZVRhcmdldEluZGV4ZXMoZSwgdCkge1xuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2godGhpcy5jbih0KSwgKHQgPT4gdGhpcy5nZXRJbmRleFR5cGUoZSwgdCkubmV4dCgobiA9PiB7XG4gICAgICAgICAgICBpZiAoMCAvKiBJbmRleFR5cGUuTk9ORSAqLyA9PT0gbiB8fCAxIC8qIEluZGV4VHlwZS5QQVJUSUFMICovID09PSBuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBfX1BSSVZBVEVfVGFyZ2V0SW5kZXhNYXRjaGVyKHQpLm9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gbikgcmV0dXJuIHRoaXMuYWRkRmllbGRJbmRleChlLCBuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpKSk7XG4gICAgfVxuICAgIGdldERvY3VtZW50c01hdGNoaW5nVGFyZ2V0KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9pbmRleEVudHJpZXNTdG9yZShlKTtcbiAgICAgICAgbGV0IHIgPSAhMDtcbiAgICAgICAgY29uc3QgaSA9IG5ldyBNYXA7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UuZm9yRWFjaCh0aGlzLmNuKHQpLCAodCA9PiB0aGlzLmxuKGUsIHQpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgciAmJiAociA9ICEhZSksIGkuc2V0KHQsIGUpO1xuICAgICAgICB9KSkpKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgIGxldCBlID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IFtdO1xuICAgICAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UuZm9yRWFjaChpLCAoKGksIHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiSW5kZXhlZERiSW5kZXhNYW5hZ2VyXCIsIGBVc2luZyBpbmRleCAke2Z1bmN0aW9uIF9fUFJJVkFURV9maWVsZEluZGV4VG9TdHJpbmcoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBpZD0ke2UuaW5kZXhJZH18Y2c9JHtlLmNvbGxlY3Rpb25Hcm91cH18Zj0ke2UuZmllbGRzLm1hcCgoZSA9PiBgJHtlLmZpZWxkUGF0aH06JHtlLmtpbmR9YCkpLmpvaW4oXCIsXCIpfWA7XG4gICAgICAgICAgICAgICAgICAgIH0oaSl9IHRvIGV4ZWN1dGUgJHtfX1BSSVZBVEVfY2Fub25pZnlUYXJnZXQodCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBmdW5jdGlvbiBfX1BSSVZBVEVfdGFyZ2V0R2V0QXJyYXlWYWx1ZXMoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9maWVsZEluZGV4R2V0QXJyYXlTZWdtZW50KHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbikgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgX19QUklWQVRFX3RhcmdldEdldEZpZWxkRmlsdGVyc0ZvclBhdGgoZSwgbi5maWVsZFBhdGgpKSBzd2l0Y2ggKHQub3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TX0FOWSAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQudmFsdWUuYXJyYXlWYWx1ZS52YWx1ZXMgfHwgW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFycmF5LWNvbnRhaW5zXCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlMgKi8gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIHQudmFsdWUgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1haW5pbmcgZmlsdGVycyBhcmUgbm90IGFycmF5IGZpbHRlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvKipcbiAqIFJldHVybnMgdGhlIGxpc3Qgb2YgdmFsdWVzIHRoYXQgYXJlIHVzZWQgaW4gIT0gb3IgTk9UX0lOIGZpbHRlcnMuIFJldHVybnNcbiAqIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gc3VjaCBmaWx0ZXJzLlxuICovIChzLCBpKSwgXyA9IGZ1bmN0aW9uIF9fUFJJVkFURV90YXJnZXRHZXROb3RJblZhbHVlcyhlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IE1hcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgciBvZiBfX1BSSVZBVEVfZmllbGRJbmRleEdldERpcmVjdGlvbmFsU2VnbWVudHModCkpIGZvciAoY29uc3QgdCBvZiBfX1BSSVZBVEVfdGFyZ2V0R2V0RmllbGRGaWx0ZXJzRm9yUGF0aChlLCByLmZpZWxkUGF0aCkpIHN3aXRjaCAodC5vcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiPT1cIiAvKiBPcGVyYXRvci5FUVVBTCAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpblwiIC8qIE9wZXJhdG9yLklOICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmNvZGUgZXF1YWxpdHkgcHJlZml4LCB3aGljaCBpcyBlbmNvZGVkIGluIHRoZSBpbmRleCB2YWx1ZSBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgaW5lcXVhbGl0eSAoZS5nLiBgYSA9PSAnYScgJiYgYiAhPSAnYidgIGlzIGVuY29kZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBgdmFsdWUgIT0gJ2FiJ2ApLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2V0KHIuZmllbGRQYXRoLmNhbm9uaWNhbFN0cmluZygpLCB0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RJbi9Ob3RFcXVhbCBpcyBhbHdheXMgYSBzdWZmaXguIFRoZXJlIGNhbm5vdCBiZSBhbnkgcmVtYWluaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VnbWVudHMgYW5kIGhlbmNlIHdlIGNhbiByZXR1cm4gZWFybHkgaGVyZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZXQoci5maWVsZFBhdGguY2Fub25pY2FsU3RyaW5nKCksIHQudmFsdWUpLCBBcnJheS5mcm9tKG4udmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbWFpbmluZyBmaWx0ZXJzIGNhbm5vdCBiZSB1c2VkIGFzIG5vdEluIGJvdW5kcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICogUmV0dXJucyBhIGxvd2VyIGJvdW5kIG9mIGZpZWxkIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgc3RhcnRpbmcgcG9pbnQgdG9cbiAqIHNjYW4gdGhlIGluZGV4IGRlZmluZWQgYnkgYGZpZWxkSW5kZXhgLiBSZXR1cm5zIGBNSU5fVkFMVUVgIGlmIG5vIGxvd2VyIGJvdW5kXG4gKiBleGlzdHMuXG4gKi8gKHMsIGkpLCBhID0gZnVuY3Rpb24gX19QUklWQVRFX3RhcmdldEdldExvd2VyQm91bmQoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHIgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIHNlZ21lbnQsIHJldHJpZXZlIGEgbG93ZXIgYm91bmQgaWYgdGhlcmUgaXMgYSBzdWl0YWJsZSBmaWx0ZXIgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0QXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgX19QUklWQVRFX2ZpZWxkSW5kZXhHZXREaXJlY3Rpb25hbFNlZ21lbnRzKHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IDAgLyogSW5kZXhLaW5kLkFTQ0VORElORyAqLyA9PT0gaS5raW5kID8gX19QUklWQVRFX3RhcmdldEdldEFzY2VuZGluZ0JvdW5kKGUsIGkuZmllbGRQYXRoLCBlLnN0YXJ0QXQpIDogX19QUklWQVRFX3RhcmdldEdldERlc2NlbmRpbmdCb3VuZChlLCBpLmZpZWxkUGF0aCwgZS5zdGFydEF0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2godC52YWx1ZSksIHIgJiYgKHIgPSB0LmluY2x1c2l2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJvdW5kKG4sIHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICogUmV0dXJucyBhbiB1cHBlciBib3VuZCBvZiBmaWVsZCB2YWx1ZXMgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBlbmRpbmcgcG9pbnRcbiAqIHdoZW4gc2Nhbm5pbmcgdGhlIGluZGV4IGRlZmluZWQgYnkgYGZpZWxkSW5kZXhgLiBSZXR1cm5zIGBNQVhfVkFMVUVgIGlmIG5vXG4gKiB1cHBlciBib3VuZCBleGlzdHMuXG4gKi8gKHMsIGkpLCB1ID0gZnVuY3Rpb24gX19QUklWQVRFX3RhcmdldEdldFVwcGVyQm91bmQoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHIgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIHNlZ21lbnQsIHJldHJpZXZlIGFuIHVwcGVyIGJvdW5kIGlmIHRoZXJlIGlzIGEgc3VpdGFibGUgZmlsdGVyIG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmRBdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBfX1BSSVZBVEVfZmllbGRJbmRleEdldERpcmVjdGlvbmFsU2VnbWVudHModCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gMCAvKiBJbmRleEtpbmQuQVNDRU5ESU5HICovID09PSBpLmtpbmQgPyBfX1BSSVZBVEVfdGFyZ2V0R2V0RGVzY2VuZGluZ0JvdW5kKGUsIGkuZmllbGRQYXRoLCBlLmVuZEF0KSA6IF9fUFJJVkFURV90YXJnZXRHZXRBc2NlbmRpbmdCb3VuZChlLCBpLmZpZWxkUGF0aCwgZS5lbmRBdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5wdXNoKHQudmFsdWUpLCByICYmIChyID0gdC5pbmNsdXNpdmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCb3VuZChuLCByKTtcbiAgICAgICAgICAgICAgICAgICAgfShzLCBpKSwgYyA9IHRoaXMuaG4oaSwgcywgYSksIGwgPSB0aGlzLmhuKGksIHMsIHUpLCBoID0gdGhpcy5QbihpLCBzLCBfKSwgUCA9IHRoaXMuSW4oaS5pbmRleElkLCBvLCBjLCBhLmluY2x1c2l2ZSwgbCwgdS5pbmNsdXNpdmUsIGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2goUCwgKGkgPT4gbi5HKGksIHQubGltaXQpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gRG9jdW1lbnRLZXkuZnJvbVNlZ21lbnRzKHQuZG9jdW1lbnRLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuaGFzKG4pIHx8IChlID0gZS5hZGQobiksIHIucHVzaChuKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICAgICAgICAgIH0pKS5uZXh0KCgoKSA9PiByKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgY24oZSkge1xuICAgICAgICBsZXQgdCA9IHRoaXMudW4uZ2V0KGUpO1xuICAgICAgICBpZiAodCkgcmV0dXJuIHQ7XG4gICAgICAgIGlmICgwID09PSBlLmZpbHRlcnMubGVuZ3RoKSB0ID0gWyBlIF07IGVsc2Uge1xuICAgICAgICAgICAgdCA9IF9fUFJJVkFURV9nZXREbmZUZXJtcyhDb21wb3NpdGVGaWx0ZXIuY3JlYXRlKGUuZmlsdGVycywgXCJhbmRcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5BTkQgKi8pKS5tYXAoKHQgPT4gX19QUklWQVRFX25ld1RhcmdldChlLnBhdGgsIGUuY29sbGVjdGlvbkdyb3VwLCBlLm9yZGVyQnksIHQuZ2V0RmlsdGVycygpLCBlLmxpbWl0LCBlLnN0YXJ0QXQsIGUuZW5kQXQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudW4uc2V0KGUsIHQpLCB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEga2V5IHJhbmdlIHF1ZXJ5IG9uIGBEYkluZGV4RW50cnlTdG9yZWAgdGhhdCB1bmlvbnMgYWxsXG4gICAgICogYm91bmRzLlxuICAgICAqLyAgICBJbihlLCB0LCBuLCByLCBpLCBzLCBvKSB7XG4gICAgICAgIC8vIFRoZSBudW1iZXIgb2YgdG90YWwgaW5kZXggc2NhbnMgd2UgdW5pb24gdG9nZXRoZXIuIFRoaXMgaXMgc2ltaWxhciB0byBhXG4gICAgICAgIC8vIGRpc3RyaWJ1dGVkIG5vcm1hbCBmb3JtLCBidXQgYWRhcHRlZCBmb3IgYXJyYXkgdmFsdWVzLiBXZSBjcmVhdGUgYSBzaW5nbGVcbiAgICAgICAgLy8gaW5kZXggcmFuZ2UgcGVyIHZhbHVlIGluIGFuIEFSUkFZX0NPTlRBSU5TIG9yIEFSUkFZX0NPTlRBSU5TX0FOWSBmaWx0ZXJcbiAgICAgICAgLy8gY29tYmluZWQgd2l0aCB0aGUgdmFsdWVzIGZyb20gdGhlIHF1ZXJ5IGJvdW5kcy5cbiAgICAgICAgY29uc3QgXyA9IChudWxsICE9IHQgPyB0Lmxlbmd0aCA6IDEpICogTWF0aC5tYXgobi5sZW5ndGgsIGkubGVuZ3RoKSwgYSA9IF8gLyAobnVsbCAhPSB0ID8gdC5sZW5ndGggOiAxKSwgdSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IF87ICsrYykge1xuICAgICAgICAgICAgY29uc3QgXyA9IHQgPyB0aGlzLlRuKHRbYyAvIGFdKSA6IGRlLCBsID0gdGhpcy5FbihlLCBfLCBuW2MgJSBhXSwgciksIGggPSB0aGlzLmRuKGUsIF8sIGlbYyAlIGFdLCBzKSwgUCA9IG8ubWFwKCh0ID0+IHRoaXMuRW4oZSwgXywgdCwgXG4gICAgICAgICAgICAvKiBpbmNsdXNpdmU9ICovICEwKSkpO1xuICAgICAgICAgICAgdS5wdXNoKC4uLnRoaXMuY3JlYXRlUmFuZ2UobCwgaCwgUCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1O1xuICAgIH1cbiAgICAvKiogR2VuZXJhdGVzIHRoZSBsb3dlciBib3VuZCBmb3IgYGFycmF5VmFsdWVgIGFuZCBgZGlyZWN0aW9uYWxWYWx1ZWAuICovICAgIEVuKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgY29uc3QgaSA9IG5ldyBfX1BSSVZBVEVfSW5kZXhFbnRyeShlLCBEb2N1bWVudEtleS5lbXB0eSgpLCB0LCBuKTtcbiAgICAgICAgcmV0dXJuIHIgPyBpIDogaS5KdCgpO1xuICAgIH1cbiAgICAvKiogR2VuZXJhdGVzIHRoZSB1cHBlciBib3VuZCBmb3IgYGFycmF5VmFsdWVgIGFuZCBgZGlyZWN0aW9uYWxWYWx1ZWAuICovICAgIGRuKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgY29uc3QgaSA9IG5ldyBfX1BSSVZBVEVfSW5kZXhFbnRyeShlLCBEb2N1bWVudEtleS5lbXB0eSgpLCB0LCBuKTtcbiAgICAgICAgcmV0dXJuIHIgPyBpLkp0KCkgOiBpO1xuICAgIH1cbiAgICBsbihlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgX19QUklWQVRFX1RhcmdldEluZGV4TWF0Y2hlcih0KSwgciA9IG51bGwgIT0gdC5jb2xsZWN0aW9uR3JvdXAgPyB0LmNvbGxlY3Rpb25Hcm91cCA6IHQucGF0aC5sYXN0U2VnbWVudCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGaWVsZEluZGV4ZXMoZSwgcikubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluZGV4IHdpdGggdGhlIG1vc3QgbnVtYmVyIG9mIHNlZ21lbnRzLlxuICAgICAgICAgICAgbGV0IHQgPSBudWxsO1xuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIGUpIHtcbiAgICAgICAgICAgICAgICBuLnRuKHIpICYmICghdCB8fCByLmZpZWxkcy5sZW5ndGggPiB0LmZpZWxkcy5sZW5ndGgpICYmICh0ID0gcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRJbmRleFR5cGUoZSwgdCkge1xuICAgICAgICBsZXQgbiA9IDIgLyogSW5kZXhUeXBlLkZVTEwgKi87XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLmNuKHQpO1xuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2gociwgKHQgPT4gdGhpcy5sbihlLCB0KS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGUgPyAwIC8qIEluZGV4VHlwZS5OT05FICovICE9PSBuICYmIGUuZmllbGRzLmxlbmd0aCA8IGZ1bmN0aW9uIF9fUFJJVkFURV90YXJnZXRHZXRTZWdtZW50Q291bnQoZSkge1xuICAgICAgICAgICAgICAgIGxldCB0ID0gbmV3IFNvcnRlZFNldChGaWVsZFBhdGgkMS5jb21wYXJhdG9yKSwgbiA9ICExO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgciBvZiBlLmZpbHRlcnMpIGZvciAoY29uc3QgZSBvZiByLmdldEZsYXR0ZW5lZEZpbHRlcnMoKSkgXG4gICAgICAgICAgICAgICAgLy8gX19uYW1lX18gaXMgbm90IGFuIGV4cGxpY2l0IHNlZ21lbnQgb2YgYW55IGluZGV4LCBzbyB3ZSBkb24ndCBuZWVkIHRvXG4gICAgICAgICAgICAgICAgLy8gY291bnQgaXQuXG4gICAgICAgICAgICAgICAgZS5maWVsZC5pc0tleUZpZWxkKCkgfHwgKFxuICAgICAgICAgICAgICAgIC8vIEFSUkFZX0NPTlRBSU5TIG9yIEFSUkFZX0NPTlRBSU5TX0FOWSBmaWx0ZXJzIG11c3QgYmUgY291bnRlZCBzZXBhcmF0ZWx5LlxuICAgICAgICAgICAgICAgIC8vIEZvciBpbnN0YW5jZSwgaXQgaXMgcG9zc2libGUgdG8gaGF2ZSBhbiBpbmRleCBmb3IgXCJhIEFSUkFZIGEgQVNDXCIuIEV2ZW5cbiAgICAgICAgICAgICAgICAvLyB0aG91Z2ggdGhlc2UgYXJlIG9uIHRoZSBzYW1lIGZpZWxkLCB0aGV5IHNob3VsZCBiZSBjb3VudGVkIGFzIHR3b1xuICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRlIHNlZ21lbnRzIGluIGFuIGluZGV4LlxuICAgICAgICAgICAgICAgIFwiYXJyYXktY29udGFpbnNcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOUyAqLyA9PT0gZS5vcCB8fCBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TX0FOWSAqLyA9PT0gZS5vcCA/IG4gPSAhMCA6IHQgPSB0LmFkZChlLmZpZWxkKSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGUub3JkZXJCeSkgXG4gICAgICAgICAgICAgICAgLy8gX19uYW1lX18gaXMgbm90IGFuIGV4cGxpY2l0IHNlZ21lbnQgb2YgYW55IGluZGV4LCBzbyB3ZSBkb24ndCBuZWVkIHRvXG4gICAgICAgICAgICAgICAgLy8gY291bnQgaXQuXG4gICAgICAgICAgICAgICAgbi5maWVsZC5pc0tleUZpZWxkKCkgfHwgKHQgPSB0LmFkZChuLmZpZWxkKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuc2l6ZSArIChuID8gMSA6IDApO1xuICAgICAgICAgICAgfSh0KSAmJiAobiA9IDEgLyogSW5kZXhUeXBlLlBBUlRJQUwgKi8pIDogbiA9IDAgLyogSW5kZXhUeXBlLk5PTkUgKi87XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IFxuICAgICAgICAvLyBPUiBxdWVyaWVzIGhhdmUgbW9yZSB0aGFuIG9uZSBzdWItdGFyZ2V0IChvbmUgc3ViLXRhcmdldCBwZXIgRE5GIHRlcm0pLiBXZSBjdXJyZW50bHkgY29uc2lkZXJcbiAgICAgICAgLy8gT1IgcXVlcmllcyB0aGF0IGhhdmUgYSBgbGltaXRgIHRvIGhhdmUgYSBwYXJ0aWFsIGluZGV4LiBGb3Igc3VjaCBxdWVyaWVzIHdlIHBlcmZvcm0gc29ydGluZ1xuICAgICAgICAvLyBhbmQgYXBwbHkgdGhlIGxpbWl0IGluIG1lbW9yeSBhcyBhIHBvc3QtcHJvY2Vzc2luZyBzdGVwLlxuICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfdGFyZ2V0SGFzTGltaXQoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgIT09IGUubGltaXQ7XG4gICAgICAgIH0odCkgJiYgci5sZW5ndGggPiAxICYmIDIgLyogSW5kZXhUeXBlLkZVTEwgKi8gPT09IG4gPyAxIC8qIEluZGV4VHlwZS5QQVJUSUFMICovIDogbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBieXRlIGVuY29kZWQgZm9ybSBvZiB0aGUgZGlyZWN0aW9uYWwgdmFsdWVzIGluIHRoZSBmaWVsZCBpbmRleC5cbiAgICAgKiBSZXR1cm5zIGBudWxsYCBpZiB0aGUgZG9jdW1lbnQgZG9lcyBub3QgaGF2ZSBhbGwgZmllbGRzIHNwZWNpZmllZCBpbiB0aGVcbiAgICAgKiBpbmRleC5cbiAgICAgKi8gICAgQW4oZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gbmV3IF9fUFJJVkFURV9JbmRleEJ5dGVFbmNvZGVyO1xuICAgICAgICBmb3IgKGNvbnN0IHIgb2YgX19QUklWQVRFX2ZpZWxkSW5kZXhHZXREaXJlY3Rpb25hbFNlZ21lbnRzKGUpKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gdC5kYXRhLmZpZWxkKHIuZmllbGRQYXRoKTtcbiAgICAgICAgICAgIGlmIChudWxsID09IGUpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgY29uc3QgaSA9IG4uSHQoci5raW5kKTtcbiAgICAgICAgICAgIF9fUFJJVkFURV9GaXJlc3RvcmVJbmRleFZhbHVlV3JpdGVyLmJ0LlB0KGUsIGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuLld0KCk7XG4gICAgfVxuICAgIC8qKiBFbmNvZGVzIGEgc2luZ2xlIHZhbHVlIHRvIHRoZSBhc2NlbmRpbmcgaW5kZXggZm9ybWF0LiAqLyAgICBUbihlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgX19QUklWQVRFX0luZGV4Qnl0ZUVuY29kZXI7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfRmlyZXN0b3JlSW5kZXhWYWx1ZVdyaXRlci5idC5QdChlLCB0Lkh0KDAgLyogSW5kZXhLaW5kLkFTQ0VORElORyAqLykpLCBcbiAgICAgICAgdC5XdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGVuY29kZWQgZm9ybSBvZiB0aGUgZG9jdW1lbnQga2V5IHRoYXQgc29ydHMgYmFzZWQgb24gdGhlIGtleVxuICAgICAqIG9yZGVyaW5nIG9mIHRoZSBmaWVsZCBpbmRleC5cbiAgICAgKi8gICAgUm4oZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gbmV3IF9fUFJJVkFURV9JbmRleEJ5dGVFbmNvZGVyO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX0ZpcmVzdG9yZUluZGV4VmFsdWVXcml0ZXIuYnQuUHQoX19QUklWQVRFX3JlZlZhbHVlKHRoaXMuZGF0YWJhc2VJZCwgdCksIG4uSHQoZnVuY3Rpb24gX19QUklWQVRFX2ZpZWxkSW5kZXhHZXRLZXlPcmRlcihlKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX2ZpZWxkSW5kZXhHZXREaXJlY3Rpb25hbFNlZ21lbnRzKGUpO1xuICAgICAgICAgICAgcmV0dXJuIDAgPT09IHQubGVuZ3RoID8gMCAvKiBJbmRleEtpbmQuQVNDRU5ESU5HICovIDogdFt0Lmxlbmd0aCAtIDFdLmtpbmQ7XG4gICAgICAgIH0oZSkpKSwgbi5XdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBnaXZlbiBmaWVsZCB2YWx1ZXMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIGluIGB0YXJnZXRgLlxuICAgICAqIEZvciBJTiBxdWVyaWVzLCBhIGxpc3Qgb2YgcG9zc2libGUgdmFsdWVzIGlzIHJldHVybmVkLlxuICAgICAqLyAgICBQbihlLCB0LCBuKSB7XG4gICAgICAgIGlmIChudWxsID09PSBuKSByZXR1cm4gW107XG4gICAgICAgIGxldCByID0gW107XG4gICAgICAgIHIucHVzaChuZXcgX19QUklWQVRFX0luZGV4Qnl0ZUVuY29kZXIpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiBfX1BSSVZBVEVfZmllbGRJbmRleEdldERpcmVjdGlvbmFsU2VnbWVudHMoZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBuW2krK107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgcikgaWYgKHRoaXMuVm4odCwgcy5maWVsZFBhdGgpICYmIGlzQXJyYXkoZSkpIHIgPSB0aGlzLm1uKHIsIHMsIGUpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbi5IdChzLmtpbmQpO1xuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9GaXJlc3RvcmVJbmRleFZhbHVlV3JpdGVyLmJ0LlB0KGUsIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZuKHIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBnaXZlbiBib3VuZHMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIGluIGB0YXJnZXRgLiBGb3IgSU5cbiAgICAgKiBxdWVyaWVzLCBhIGxpc3Qgb2YgcG9zc2libGUgdmFsdWVzIGlzIHJldHVybmVkLlxuICAgICAqLyAgICBobihlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlBuKGUsIHQsIG4ucG9zaXRpb24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgYnl0ZSByZXByZXNlbnRhdGlvbiBmb3IgdGhlIHByb3ZpZGVkIGVuY29kZXJzLiAqLyAgICBmbihlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBlLmxlbmd0aDsgKytuKSB0W25dID0gZVtuXS5XdCgpO1xuICAgICAgICByZXR1cm4gdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNlcGFyYXRlIGVuY29kZXIgZm9yIGVhY2ggZWxlbWVudCBvZiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIFRoZSBtZXRob2QgYXBwZW5kcyBlYWNoIHZhbHVlIHRvIGFsbCBleGlzdGluZyBlbmNvZGVycyAoZS5nLiBmaWx0ZXIoXCJhXCIsXG4gICAgICogXCI9PVwiLCBcImExXCIpLmZpbHRlcihcImJcIiwgXCJpblwiLCBbXCJiMVwiLCBcImIyXCJdKSBiZWNvbWVzIFtcImExLGIxXCIsIFwiYTEsYjJcIl0pLiBBXG4gICAgICogbGlzdCBvZiBuZXcgZW5jb2RlcnMgaXMgcmV0dXJuZWQuXG4gICAgICovICAgIG1uKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IFsgLi4uZSBdLCBpID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiBuLmFycmF5VmFsdWUudmFsdWVzIHx8IFtdKSBmb3IgKGNvbnN0IG4gb2Ygcikge1xuICAgICAgICAgICAgY29uc3QgciA9IG5ldyBfX1BSSVZBVEVfSW5kZXhCeXRlRW5jb2RlcjtcbiAgICAgICAgICAgIHIuc2VlZChuLld0KCkpLCBfX1BSSVZBVEVfRmlyZXN0b3JlSW5kZXhWYWx1ZVdyaXRlci5idC5QdChlLCByLkh0KHQua2luZCkpLCBpLnB1c2gocik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIFZuKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuICEhZS5maWx0ZXJzLmZpbmQoKGUgPT4gZSBpbnN0YW5jZW9mIEZpZWxkRmlsdGVyICYmIGUuZmllbGQuaXNFcXVhbCh0KSAmJiAoXCJpblwiIC8qIE9wZXJhdG9yLklOICovID09PSBlLm9wIHx8IFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovID09PSBlLm9wKSkpO1xuICAgIH1cbiAgICBnZXRGaWVsZEluZGV4ZXMoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2luZGV4Q29uZmlndXJhdGlvblN0b3JlKGUpLCByID0gX19QUklWQVRFX2luZGV4U3RhdGVTdG9yZShlKTtcbiAgICAgICAgcmV0dXJuICh0ID8gbi5VKFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIiwgSURCS2V5UmFuZ2UuYm91bmQodCwgdCkpIDogbi5VKCkpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgdCA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKGUsIChlID0+IHIuZ2V0KFsgZS5pbmRleElkLCB0aGlzLnVpZCBdKS5uZXh0KChuID0+IHtcbiAgICAgICAgICAgICAgICB0LnB1c2goZnVuY3Rpb24gX19QUklWQVRFX2Zyb21EYkluZGV4Q29uZmlndXJhdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0ID8gbmV3IEluZGV4U3RhdGUodC5zZXF1ZW5jZU51bWJlciwgbmV3IEluZGV4T2Zmc2V0KF9fUFJJVkFURV9mcm9tRGJUaW1lc3RhbXAodC5yZWFkVGltZSksIG5ldyBEb2N1bWVudEtleShfX1BSSVZBVEVfZGVjb2RlUmVzb3VyY2VQYXRoKHQuZG9jdW1lbnRLZXkpKSwgdC5sYXJnZXN0QmF0Y2hJZCkpIDogSW5kZXhTdGF0ZS5lbXB0eSgpLCByID0gZS5maWVsZHMubWFwKCgoW2UsIHRdKSA9PiBuZXcgSW5kZXhTZWdtZW50KEZpZWxkUGF0aCQxLmZyb21TZXJ2ZXJGb3JtYXQoZSksIHQpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmllbGRJbmRleChlLmluZGV4SWQsIGUuY29sbGVjdGlvbkdyb3VwLCByLCBuKTtcbiAgICAgICAgICAgICAgICB9KGUsIG4pKTtcbiAgICAgICAgICAgIH0pKSkpLm5leHQoKCgpID0+IHQpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXROZXh0Q29sbGVjdGlvbkdyb3VwVG9VcGRhdGUoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGaWVsZEluZGV4ZXMoZSkubmV4dCgoZSA9PiAwID09PSBlLmxlbmd0aCA/IG51bGwgOiAoZS5zb3J0KCgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IGUuaW5kZXhTdGF0ZS5zZXF1ZW5jZU51bWJlciAtIHQuaW5kZXhTdGF0ZS5zZXF1ZW5jZU51bWJlcjtcbiAgICAgICAgICAgIHJldHVybiAwICE9PSBuID8gbiA6IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKGUuY29sbGVjdGlvbkdyb3VwLCB0LmNvbGxlY3Rpb25Hcm91cCk7XG4gICAgICAgIH0pKSwgZVswXS5jb2xsZWN0aW9uR3JvdXApKSk7XG4gICAgfVxuICAgIHVwZGF0ZUNvbGxlY3Rpb25Hcm91cChlLCB0LCBuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfaW5kZXhDb25maWd1cmF0aW9uU3RvcmUoZSksIGkgPSBfX1BSSVZBVEVfaW5kZXhTdGF0ZVN0b3JlKGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5nbihlKS5uZXh0KChlID0+IHIuVShcImNvbGxlY3Rpb25Hcm91cEluZGV4XCIsIElEQktleVJhbmdlLmJvdW5kKHQsIHQpKS5uZXh0KCh0ID0+IFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHQsICh0ID0+IGkucHV0KF9fUFJJVkFURV90b0RiSW5kZXhTdGF0ZSh0LmluZGV4SWQsIHRoaXMudWlkLCBlLCBuKSkpKSkpKSk7XG4gICAgfVxuICAgIHVwZGF0ZUluZGV4RW50cmllcyhlLCB0KSB7XG4gICAgICAgIC8vIFBvcnRpbmcgTm90ZTogYGdldEZpZWxkSW5kZXhlcygpYCBvbiBXZWIgZG9lcyBub3QgY2FjaGUgaW5kZXggbG9va3VwcyBhc1xuICAgICAgICAvLyBpdCBjb3VsZCBiZSB1c2VkIGFjcm9zcyBkaWZmZXJlbnQgSW5kZXhlZERCIHRyYW5zYWN0aW9ucy4gQXMgYW55IGNhY2hlZFxuICAgICAgICAvLyBkYXRhIG1pZ2h0IGJlIGludmFsaWRhdGVkIGJ5IG90aGVyIG11bHRpLXRhYiBjbGllbnRzLCB3ZSBjYW4gb25seSB0cnVzdFxuICAgICAgICAvLyBkYXRhIHdpdGhpbiBhIHNpbmdsZSBJbmRleGVkREIgdHJhbnNhY3Rpb24uIFdlIHRoZXJlZm9yZSBhZGQgYSBjYWNoZVxuICAgICAgICAvLyBoZXJlLlxuICAgICAgICBjb25zdCBuID0gbmV3IE1hcDtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHQsICgodCwgcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IG4uZ2V0KHQuY29sbGVjdGlvbkdyb3VwKTtcbiAgICAgICAgICAgIHJldHVybiAoaSA/IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKGkpIDogdGhpcy5nZXRGaWVsZEluZGV4ZXMoZSwgdC5jb2xsZWN0aW9uR3JvdXApKS5uZXh0KChpID0+IChuLnNldCh0LmNvbGxlY3Rpb25Hcm91cCwgaSksIFxuICAgICAgICAgICAgUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2goaSwgKG4gPT4gdGhpcy5wbihlLCB0LCBuKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy55bihyLCBuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5pc0VxdWFsKGkpID8gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKSA6IHRoaXMud24oZSwgciwgbiwgdCwgaSk7XG4gICAgICAgICAgICB9KSkpKSkpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBTbihlLCB0LCBuLCByKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfaW5kZXhFbnRyaWVzU3RvcmUoZSkucHV0KHtcbiAgICAgICAgICAgIGluZGV4SWQ6IHIuaW5kZXhJZCxcbiAgICAgICAgICAgIHVpZDogdGhpcy51aWQsXG4gICAgICAgICAgICBhcnJheVZhbHVlOiByLmFycmF5VmFsdWUsXG4gICAgICAgICAgICBkaXJlY3Rpb25hbFZhbHVlOiByLmRpcmVjdGlvbmFsVmFsdWUsXG4gICAgICAgICAgICBvcmRlcmVkRG9jdW1lbnRLZXk6IHRoaXMuUm4obiwgdC5rZXkpLFxuICAgICAgICAgICAgZG9jdW1lbnRLZXk6IHQua2V5LnBhdGgudG9BcnJheSgpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBibihlLCB0LCBuLCByKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfaW5kZXhFbnRyaWVzU3RvcmUoZSkuZGVsZXRlKFsgci5pbmRleElkLCB0aGlzLnVpZCwgci5hcnJheVZhbHVlLCByLmRpcmVjdGlvbmFsVmFsdWUsIHRoaXMuUm4obiwgdC5rZXkpLCB0LmtleS5wYXRoLnRvQXJyYXkoKSBdKTtcbiAgICB9XG4gICAgcG4oZSwgdCwgbikge1xuICAgICAgICBjb25zdCByID0gX19QUklWQVRFX2luZGV4RW50cmllc1N0b3JlKGUpO1xuICAgICAgICBsZXQgaSA9IG5ldyBTb3J0ZWRTZXQoX19QUklWQVRFX2luZGV4RW50cnlDb21wYXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIHIuSih7XG4gICAgICAgICAgICBpbmRleDogXCJkb2N1bWVudEtleUluZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogSURCS2V5UmFuZ2Uub25seShbIG4uaW5kZXhJZCwgdGhpcy51aWQsIHRoaXMuUm4obiwgdCkgXSlcbiAgICAgICAgfSwgKChlLCByKSA9PiB7XG4gICAgICAgICAgICBpID0gaS5hZGQobmV3IF9fUFJJVkFURV9JbmRleEVudHJ5KG4uaW5kZXhJZCwgdCwgci5hcnJheVZhbHVlLCByLmRpcmVjdGlvbmFsVmFsdWUpKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgdGhlIGluZGV4IGVudHJpZXMgZm9yIHRoZSBnaXZlbiBkb2N1bWVudC4gKi8gICAgeW4oZSwgdCkge1xuICAgICAgICBsZXQgbiA9IG5ldyBTb3J0ZWRTZXQoX19QUklWQVRFX2luZGV4RW50cnlDb21wYXJhdG9yKTtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuQW4odCwgZSk7XG4gICAgICAgIGlmIChudWxsID09IHIpIHJldHVybiBuO1xuICAgICAgICBjb25zdCBpID0gX19QUklWQVRFX2ZpZWxkSW5kZXhHZXRBcnJheVNlZ21lbnQodCk7XG4gICAgICAgIGlmIChudWxsICE9IGkpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBlLmRhdGEuZmllbGQoaS5maWVsZFBhdGgpO1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkocykpIGZvciAoY29uc3QgaSBvZiBzLmFycmF5VmFsdWUudmFsdWVzIHx8IFtdKSBuID0gbi5hZGQobmV3IF9fUFJJVkFURV9JbmRleEVudHJ5KHQuaW5kZXhJZCwgZS5rZXksIHRoaXMuVG4oaSksIHIpKTtcbiAgICAgICAgfSBlbHNlIG4gPSBuLmFkZChuZXcgX19QUklWQVRFX0luZGV4RW50cnkodC5pbmRleElkLCBlLmtleSwgZGUsIHIpKTtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGluZGV4IGVudHJpZXMgZm9yIHRoZSBwcm92aWRlZCBkb2N1bWVudCBieSBkZWxldGluZyBlbnRyaWVzXG4gICAgICogdGhhdCBhcmUgbm8gbG9uZ2VyIHJlZmVyZW5jZWQgaW4gYG5ld0VudHJpZXNgIGFuZCBhZGRpbmcgYWxsIG5ld2x5IGFkZGVkXG4gICAgICogZW50cmllcy5cbiAgICAgKi8gICAgd24oZSwgdCwgbiwgciwgaSkge1xuICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJJbmRleGVkRGJJbmRleE1hbmFnZXJcIiwgXCJVcGRhdGluZyBpbmRleCBlbnRyaWVzIGZvciBkb2N1bWVudCAnJXMnXCIsIHQua2V5KTtcbiAgICAgICAgY29uc3QgcyA9IFtdO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2RpZmZTb3J0ZWRTZXRzKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBlLmdldEl0ZXJhdG9yKCksIG8gPSB0LmdldEl0ZXJhdG9yKCk7XG4gICAgICAgICAgICBsZXQgXyA9IF9fUFJJVkFURV9hZHZhbmNlSXRlcmF0b3IocyksIGEgPSBfX1BSSVZBVEVfYWR2YW5jZUl0ZXJhdG9yKG8pO1xuICAgICAgICAgICAgLy8gV2FsayB0aHJvdWdoIHRoZSB0d28gc2V0cyBhdCB0aGUgc2FtZSB0aW1lLCB1c2luZyB0aGUgb3JkZXJpbmcgZGVmaW5lZCBieVxuICAgICAgICAgICAgLy8gYGNvbXBhcmF0b3JgLlxuICAgICAgICAgICAgZm9yICg7XyB8fCBhOyApIHtcbiAgICAgICAgICAgICAgICBsZXQgZSA9ICExLCB0ID0gITE7XG4gICAgICAgICAgICAgICAgaWYgKF8gJiYgYSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbihfLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgciA8IDAgPyBcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgd2FzIHJlbW92ZWQgaWYgdGhlIG5leHQgZWxlbWVudCBpbiBvdXIgb3JkZXJlZFxuICAgICAgICAgICAgICAgICAgICAvLyB3YWxrdGhyb3VnaCBpcyBvbmx5IGluIGBiZWZvcmVgLlxuICAgICAgICAgICAgICAgICAgICB0ID0gITAgOiByID4gMCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IHdhcyBhZGRlZCBpZiB0aGUgbmV4dCBlbGVtZW50IGluIG91ciBvcmRlcmVkIHdhbGt0aHJvdWdoXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIG9ubHkgaW4gYGFmdGVyYC5cbiAgICAgICAgICAgICAgICAgICAgZSA9ICEwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgbnVsbCAhPSBfID8gdCA9ICEwIDogZSA9ICEwO1xuICAgICAgICAgICAgICAgIGUgPyAocihhKSwgYSA9IF9fUFJJVkFURV9hZHZhbmNlSXRlcmF0b3IobykpIDogdCA/IChpKF8pLCBfID0gX19QUklWQVRFX2FkdmFuY2VJdGVyYXRvcihzKSkgOiAoXyA9IF9fUFJJVkFURV9hZHZhbmNlSXRlcmF0b3IocyksIFxuICAgICAgICAgICAgICAgIGEgPSBfX1BSSVZBVEVfYWR2YW5jZUl0ZXJhdG9yKG8pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfShyLCBpLCBfX1BSSVZBVEVfaW5kZXhFbnRyeUNvbXBhcmF0b3IsIChcbiAgICAgICAgLyogb25BZGQ9ICovIHIgPT4ge1xuICAgICAgICAgICAgcy5wdXNoKHRoaXMuU24oZSwgdCwgbiwgcikpO1xuICAgICAgICB9KSwgKFxuICAgICAgICAvKiBvblJlbW92ZT0gKi8gciA9PiB7XG4gICAgICAgICAgICBzLnB1c2godGhpcy5ibihlLCB0LCBuLCByKSk7XG4gICAgICAgIH0pKSwgUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3Iocyk7XG4gICAgfVxuICAgIGduKGUpIHtcbiAgICAgICAgbGV0IHQgPSAxO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX2luZGV4U3RhdGVTdG9yZShlKS5KKHtcbiAgICAgICAgICAgIGluZGV4OiBcInNlcXVlbmNlTnVtYmVySW5kZXhcIixcbiAgICAgICAgICAgIHJldmVyc2U6ICEwLFxuICAgICAgICAgICAgcmFuZ2U6IElEQktleVJhbmdlLnVwcGVyQm91bmQoWyB0aGlzLnVpZCwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgXSlcbiAgICAgICAgfSwgKChlLCBuLCByKSA9PiB7XG4gICAgICAgICAgICByLmRvbmUoKSwgdCA9IG4uc2VxdWVuY2VOdW1iZXIgKyAxO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gdCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHNldCBvZiBJREIgcmFuZ2VzIHRoYXQgc3BsaXRzIHRoZSBleGlzdGluZyByYW5nZSBhbmQgZXhjbHVkZXNcbiAgICAgKiBhbnkgdmFsdWVzIHRoYXQgbWF0Y2ggdGhlIGBub3RJblZhbHVlYCBmcm9tIHRoZXNlIHJhbmdlcy4gQXMgYW4gZXhhbXBsZSxcbiAgICAgKiAnW2ZvbyA+IDIgJiYgZm9vICE9IDNdYCBiZWNvbWVzICBgW2ZvbyA+IDIgJiYgPCAzLCBmb28gPiAzXWAuXG4gICAgICovICAgIGNyZWF0ZVJhbmdlKGUsIHQsIG4pIHtcbiAgICAgICAgLy8gVGhlIG5vdEluIHZhbHVlcyBuZWVkIHRvIGJlIHNvcnRlZCBhbmQgdW5pcXVlIHNvIHRoYXQgd2UgY2FuIHJldHVybiBhXG4gICAgICAgIC8vIHNvcnRlZCBzZXQgb2Ygbm9uLW92ZXJsYXBwaW5nIHJhbmdlcy5cbiAgICAgICAgbiA9IG4uc29ydCgoKGUsIHQpID0+IF9fUFJJVkFURV9pbmRleEVudHJ5Q29tcGFyYXRvcihlLCB0KSkpLmZpbHRlcigoKGUsIHQsIG4pID0+ICF0IHx8IDAgIT09IF9fUFJJVkFURV9pbmRleEVudHJ5Q29tcGFyYXRvcihlLCBuW3QgLSAxXSkpKTtcbiAgICAgICAgY29uc3QgciA9IFtdO1xuICAgICAgICByLnB1c2goZSk7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiBuKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2luZGV4RW50cnlDb21wYXJhdG9yKGksIGUpLCBzID0gX19QUklWQVRFX2luZGV4RW50cnlDb21wYXJhdG9yKGksIHQpO1xuICAgICAgICAgICAgaWYgKDAgPT09IG4pIFxuICAgICAgICAgICAgLy8gYG5vdEluVmFsdWVgIGlzIHRoZSBsb3dlciBib3VuZC4gV2UgdGhlcmVmb3JlIG5lZWQgdG8gcmFpc2UgdGhlIGJvdW5kXG4gICAgICAgICAgICAvLyB0byB0aGUgbmV4dCB2YWx1ZS5cbiAgICAgICAgICAgIHJbMF0gPSBlLkp0KCk7IGVsc2UgaWYgKG4gPiAwICYmIHMgPCAwKSBcbiAgICAgICAgICAgIC8vIGBub3RJblZhbHVlYCBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSByYW5nZVxuICAgICAgICAgICAgci5wdXNoKGkpLCByLnB1c2goaS5KdCgpKTsgZWxzZSBpZiAocyA+IDApIFxuICAgICAgICAgICAgLy8gYG5vdEluVmFsdWVgIChhbmQgYWxsIGZvbGxvd2luZyB2YWx1ZXMpIGFyZSBvdXQgb2YgdGhlIHJhbmdlXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByLnB1c2godCk7XG4gICAgICAgIGNvbnN0IGkgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCByLmxlbmd0aDsgZSArPSAyKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBlbmNvdW50ZXIgdHdvIGJvdW5kcyB0aGF0IHdpbGwgY3JlYXRlIGFuIHVubWF0Y2hhYmxlIGtleSByYW5nZSxcbiAgICAgICAgICAgIC8vIHRoZW4gd2UgcmV0dXJuIGFuIGVtcHR5IHNldCBvZiBrZXkgcmFuZ2VzLlxuICAgICAgICAgICAgaWYgKHRoaXMuRG4ocltlXSwgcltlICsgMV0pKSByZXR1cm4gW107XG4gICAgICAgICAgICBjb25zdCB0ID0gWyByW2VdLmluZGV4SWQsIHRoaXMudWlkLCByW2VdLmFycmF5VmFsdWUsIHJbZV0uZGlyZWN0aW9uYWxWYWx1ZSwgZGUsIFtdIF0sIG4gPSBbIHJbZSArIDFdLmluZGV4SWQsIHRoaXMudWlkLCByW2UgKyAxXS5hcnJheVZhbHVlLCByW2UgKyAxXS5kaXJlY3Rpb25hbFZhbHVlLCBkZSwgW10gXTtcbiAgICAgICAgICAgIGkucHVzaChJREJLZXlSYW5nZS5ib3VuZCh0LCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIERuKGUsIHQpIHtcbiAgICAgICAgLy8gSWYgbG93ZXIgYm91bmQgaXMgZ3JlYXRlciB0aGFuIHRoZSB1cHBlciBib3VuZCwgdGhlbiB0aGUga2V5XG4gICAgICAgIC8vIHJhbmdlIGNhbiBuZXZlciBiZSBtYXRjaGVkLlxuICAgICAgICByZXR1cm4gX19QUklWQVRFX2luZGV4RW50cnlDb21wYXJhdG9yKGUsIHQpID4gMDtcbiAgICB9XG4gICAgZ2V0TWluT2Zmc2V0RnJvbUNvbGxlY3Rpb25Hcm91cChlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEZpZWxkSW5kZXhlcyhlLCB0KS5uZXh0KF9fUFJJVkFURV9nZXRNaW5PZmZzZXRGcm9tRmllbGRJbmRleGVzKTtcbiAgICB9XG4gICAgZ2V0TWluT2Zmc2V0KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5tYXBBcnJheSh0aGlzLmNuKHQpLCAodCA9PiB0aGlzLmxuKGUsIHQpLm5leHQoKGUgPT4gZSB8fCBmYWlsKCkpKSkpLm5leHQoX19QUklWQVRFX2dldE1pbk9mZnNldEZyb21GaWVsZEluZGV4ZXMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGNvbGxlY3Rpb25QYXJlbnRzXG4gKiBkb2N1bWVudCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfY29sbGVjdGlvblBhcmVudHNTdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcImNvbGxlY3Rpb25QYXJlbnRzXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgaW5kZXggZW50cnkgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9pbmRleEVudHJpZXNTdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcImluZGV4RW50cmllc1wiKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGluZGV4IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9pbmRleENvbmZpZ3VyYXRpb25TdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcImluZGV4Q29uZmlndXJhdGlvblwiKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGluZGV4IHN0YXRlIG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfaW5kZXhTdGF0ZVN0b3JlKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2dldFN0b3JlKGUsIFwiaW5kZXhTdGF0ZVwiKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2dldE1pbk9mZnNldEZyb21GaWVsZEluZGV4ZXMoZSkge1xuICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KDAgIT09IGUubGVuZ3RoKTtcbiAgICBsZXQgdCA9IGVbMF0uaW5kZXhTdGF0ZS5vZmZzZXQsIG4gPSB0Lmxhcmdlc3RCYXRjaElkO1xuICAgIGZvciAobGV0IHIgPSAxOyByIDwgZS5sZW5ndGg7IHIrKykge1xuICAgICAgICBjb25zdCBpID0gZVtyXS5pbmRleFN0YXRlLm9mZnNldDtcbiAgICAgICAgX19QUklWQVRFX2luZGV4T2Zmc2V0Q29tcGFyYXRvcihpLCB0KSA8IDAgJiYgKHQgPSBpKSwgbiA8IGkubGFyZ2VzdEJhdGNoSWQgJiYgKG4gPSBpLmxhcmdlc3RCYXRjaElkKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbmRleE9mZnNldCh0LnJlYWRUaW1lLCB0LmRvY3VtZW50S2V5LCBuKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgQWUgPSB7XG4gICAgZGlkUnVuOiAhMSxcbiAgICBzZXF1ZW5jZU51bWJlcnNDb2xsZWN0ZWQ6IDAsXG4gICAgdGFyZ2V0c1JlbW92ZWQ6IDAsXG4gICAgZG9jdW1lbnRzUmVtb3ZlZDogMFxufTtcblxuY2xhc3MgTHJ1UGFyYW1zIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvLyBXaGVuIHdlIGF0dGVtcHQgdG8gY29sbGVjdCwgd2Ugd2lsbCBvbmx5IGRvIHNvIGlmIHRoZSBjYWNoZSBzaXplIGlzIGdyZWF0ZXIgdGhhbiB0aGlzXG4gICAgLy8gdGhyZXNob2xkLiBQYXNzaW5nIGBDT0xMRUNUSU9OX0RJU0FCTEVEYCBoZXJlIHdpbGwgY2F1c2UgY29sbGVjdGlvbiB0byBhbHdheXMgYmUgc2tpcHBlZC5cbiAgICBlLCBcbiAgICAvLyBUaGUgcGVyY2VudGFnZSBvZiBzZXF1ZW5jZSBudW1iZXJzIHRoYXQgd2Ugd2lsbCBhdHRlbXB0IHRvIGNvbGxlY3RcbiAgICB0LCBcbiAgICAvLyBBIGNhcCBvbiB0aGUgdG90YWwgbnVtYmVyIG9mIHNlcXVlbmNlIG51bWJlcnMgdGhhdCB3aWxsIGJlIGNvbGxlY3RlZC4gVGhpcyBwcmV2ZW50c1xuICAgIC8vIHVzIGZyb20gY29sbGVjdGluZyBhIGh1Z2UgbnVtYmVyIG9mIHNlcXVlbmNlIG51bWJlcnMgaWYgdGhlIGNhY2hlIGhhcyBncm93biB2ZXJ5IGxhcmdlLlxuICAgIG4pIHtcbiAgICAgICAgdGhpcy5jYWNoZVNpemVDb2xsZWN0aW9uVGhyZXNob2xkID0gZSwgdGhpcy5wZXJjZW50aWxlVG9Db2xsZWN0ID0gdCwgdGhpcy5tYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0ID0gbjtcbiAgICB9XG4gICAgc3RhdGljIHdpdGhDYWNoZVNpemUoZSkge1xuICAgICAgICByZXR1cm4gbmV3IExydVBhcmFtcyhlLCBMcnVQYXJhbXMuREVGQVVMVF9DT0xMRUNUSU9OX1BFUkNFTlRJTEUsIExydVBhcmFtcy5ERUZBVUxUX01BWF9TRVFVRU5DRV9OVU1CRVJTX1RPX0NPTExFQ1QpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRGVsZXRlIGEgbXV0YXRpb24gYmF0Y2ggYW5kIHRoZSBhc3NvY2lhdGVkIGRvY3VtZW50IG11dGF0aW9ucy5cbiAqIEByZXR1cm5zIEEgUGVyc2lzdGVuY2VQcm9taXNlIG9mIHRoZSBkb2N1bWVudCBtdXRhdGlvbnMgdGhhdCB3ZXJlIHJlbW92ZWQuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZU11dGF0aW9uQmF0Y2goZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBlLnN0b3JlKFwibXV0YXRpb25zXCIpLCBpID0gZS5zdG9yZShcImRvY3VtZW50TXV0YXRpb25zXCIpLCBzID0gW10sIG8gPSBJREJLZXlSYW5nZS5vbmx5KG4uYmF0Y2hJZCk7XG4gICAgbGV0IF8gPSAwO1xuICAgIGNvbnN0IGEgPSByLkooe1xuICAgICAgICByYW5nZTogb1xuICAgIH0sICgoZSwgdCwgbikgPT4gKF8rKywgbi5kZWxldGUoKSkpKTtcbiAgICBzLnB1c2goYS5uZXh0KCgoKSA9PiB7XG4gICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KDEgPT09IF8pO1xuICAgIH0pKSk7XG4gICAgY29uc3QgdSA9IFtdO1xuICAgIGZvciAoY29uc3QgZSBvZiBuLm11dGF0aW9ucykge1xuICAgICAgICBjb25zdCByID0gX19QUklWQVRFX25ld0RiRG9jdW1lbnRNdXRhdGlvbktleSh0LCBlLmtleS5wYXRoLCBuLmJhdGNoSWQpO1xuICAgICAgICBzLnB1c2goaS5kZWxldGUocikpLCB1LnB1c2goZS5rZXkpO1xuICAgIH1cbiAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IocykubmV4dCgoKCkgPT4gdSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXBwcm94aW1hdGUgc2l6ZSBmb3IgdGhlIGdpdmVuIGRvY3VtZW50LlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9kYkRvY3VtZW50U2l6ZShlKSB7XG4gICAgaWYgKCFlKSByZXR1cm4gMDtcbiAgICBsZXQgdDtcbiAgICBpZiAoZS5kb2N1bWVudCkgdCA9IGUuZG9jdW1lbnQ7IGVsc2UgaWYgKGUudW5rbm93bkRvY3VtZW50KSB0ID0gZS51bmtub3duRG9jdW1lbnQ7IGVsc2Uge1xuICAgICAgICBpZiAoIWUubm9Eb2N1bWVudCkgdGhyb3cgZmFpbCgpO1xuICAgICAgICB0ID0gZS5ub0RvY3VtZW50O1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodCkubGVuZ3RoO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIEEgbXV0YXRpb24gcXVldWUgZm9yIGEgc3BlY2lmaWMgdXNlciwgYmFja2VkIGJ5IEluZGV4ZWREQi4gKi8gTHJ1UGFyYW1zLkRFRkFVTFRfQ09MTEVDVElPTl9QRVJDRU5USUxFID0gMTAsIFxuTHJ1UGFyYW1zLkRFRkFVTFRfTUFYX1NFUVVFTkNFX05VTUJFUlNfVE9fQ09MTEVDVCA9IDFlMywgTHJ1UGFyYW1zLkRFRkFVTFQgPSBuZXcgTHJ1UGFyYW1zKDQxOTQzMDQwLCBMcnVQYXJhbXMuREVGQVVMVF9DT0xMRUNUSU9OX1BFUkNFTlRJTEUsIExydVBhcmFtcy5ERUZBVUxUX01BWF9TRVFVRU5DRV9OVU1CRVJTX1RPX0NPTExFQ1QpLCBcbkxydVBhcmFtcy5ESVNBQkxFRCA9IG5ldyBMcnVQYXJhbXMoLTEsIDAsIDApO1xuXG5jbGFzcyBfX1BSSVZBVEVfSW5kZXhlZERiTXV0YXRpb25RdWV1ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIG5vcm1hbGl6ZWQgdXNlcklkIChlLmcuIG51bGwgVUlEID0+IFwiXCIgdXNlcklkKSB1c2VkIHRvIHN0b3JlIC9cbiAgICAgKiByZXRyaWV2ZSBtdXRhdGlvbnMuXG4gICAgICovXG4gICAgZSwgdCwgbiwgcikge1xuICAgICAgICB0aGlzLnVzZXJJZCA9IGUsIHRoaXMuc2VyaWFsaXplciA9IHQsIHRoaXMuaW5kZXhNYW5hZ2VyID0gbiwgdGhpcy5yZWZlcmVuY2VEZWxlZ2F0ZSA9IHIsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FjaGVzIHRoZSBkb2N1bWVudCBrZXlzIGZvciBwZW5kaW5nIG11dGF0aW9uIGJhdGNoZXMuIElmIHRoZSBtdXRhdGlvblxuICAgICAgICAgKiBoYXMgYmVlbiByZW1vdmVkIGZyb20gSW5kZXhlZERiLCB0aGUgY2FjaGVkIHZhbHVlIG1heSBjb250aW51ZSB0b1xuICAgICAgICAgKiBiZSB1c2VkIHRvIHJldHJpZXZlIHRoZSBiYXRjaCdzIGRvY3VtZW50IGtleXMuIFRvIHJlbW92ZSBhIGNhY2hlZCB2YWx1ZVxuICAgICAgICAgKiBsb2NhbGx5LCBgcmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzKClgIHNob3VsZCBiZSBpbnZva2VkIGVpdGhlciBkaXJlY3RseVxuICAgICAgICAgKiBvciB0aHJvdWdoIGByZW1vdmVNdXRhdGlvbkJhdGNoZXMoKWAuXG4gICAgICAgICAqXG4gICAgICAgICAqIFdpdGggbXVsdGktdGFiLCB3aGVuIHRoZSBwcmltYXJ5IGNsaWVudCBhY2tub3dsZWRnZXMgb3IgcmVqZWN0cyBhIG11dGF0aW9uLFxuICAgICAgICAgKiB0aGlzIGNhY2hlIGlzIHVzZWQgYnkgc2Vjb25kYXJ5IGNsaWVudHMgdG8gaW52YWxpZGF0ZSB0aGUgbG9jYWxcbiAgICAgICAgICogdmlldyBvZiB0aGUgZG9jdW1lbnRzIHRoYXQgd2VyZSBwcmV2aW91c2x5IGFmZmVjdGVkIGJ5IHRoZSBtdXRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgICAgIHRoaXMuQ24gPSB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtdXRhdGlvbiBxdWV1ZSBmb3IgdGhlIGdpdmVuIHVzZXIuXG4gICAgICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlciBmb3Igd2hpY2ggdG8gY3JlYXRlIGEgbXV0YXRpb24gcXVldWUuXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgLSBUaGUgc2VyaWFsaXplciB0byB1c2Ugd2hlbiBwZXJzaXN0aW5nIHRvIEluZGV4ZWREYi5cbiAgICAgKi8gICAgc3RhdGljIGx0KGUsIHQsIG4sIHIpIHtcbiAgICAgICAgLy8gVE9ETyhtY2cpOiBGaWd1cmUgb3V0IHdoYXQgY29uc3RyYWludHMgdGhlcmUgYXJlIG9uIHVzZXJJRHNcbiAgICAgICAgLy8gSW4gcGFydGljdWxhciwgYXJlIHRoZXJlIGFueSByZXNlcnZlZCBjaGFyYWN0ZXJzPyBhcmUgZW1wdHkgaWRzIGFsbG93ZWQ/XG4gICAgICAgIC8vIEZvciB0aGUgbW9tZW50IHN0b3JlIHRoZXNlIHRvZ2V0aGVyIGluIHRoZSBzYW1lIG11dGF0aW9ucyB0YWJsZSBhc3N1bWluZ1xuICAgICAgICAvLyB0aGF0IGVtcHR5IHVzZXJJRHMgYXJlbid0IGFsbG93ZWQuXG4gICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KFwiXCIgIT09IGUudWlkKTtcbiAgICAgICAgY29uc3QgaSA9IGUuaXNBdXRoZW50aWNhdGVkKCkgPyBlLnVpZCA6IFwiXCI7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX0luZGV4ZWREYk11dGF0aW9uUXVldWUoaSwgdCwgbiwgcik7XG4gICAgfVxuICAgIGNoZWNrRW1wdHkoZSkge1xuICAgICAgICBsZXQgdCA9ICEwO1xuICAgICAgICBjb25zdCBuID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZIF0sIFsgdGhpcy51c2VySWQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9tdXRhdGlvbnNTdG9yZShlKS5KKHtcbiAgICAgICAgICAgIGluZGV4OiBcInVzZXJNdXRhdGlvbnNJbmRleFwiLFxuICAgICAgICAgICAgcmFuZ2U6IG5cbiAgICAgICAgfSwgKChlLCBuLCByKSA9PiB7XG4gICAgICAgICAgICB0ID0gITEsIHIuZG9uZSgpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gdCkpO1xuICAgIH1cbiAgICBhZGRNdXRhdGlvbkJhdGNoKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgY29uc3QgaSA9IF9fUFJJVkFURV9kb2N1bWVudE11dGF0aW9uc1N0b3JlKGUpLCBzID0gX19QUklWQVRFX211dGF0aW9uc1N0b3JlKGUpO1xuICAgICAgICAvLyBUaGUgSW5kZXhlZERiIGltcGxlbWVudGF0aW9uIGluIENocm9tZSAoYW5kIEZpcmVmb3gpIGRvZXMgbm90IGhhbmRsZVxuICAgICAgICAvLyBjb21wb3VuZCBpbmRpY2VzIHRoYXQgaW5jbHVkZSBhdXRvLWdlbmVyYXRlZCBrZXlzIGNvcnJlY3RseS4gVG8gZW5zdXJlXG4gICAgICAgIC8vIHRoYXQgdGhlIGluZGV4IGVudHJ5IGlzIGFkZGVkIGNvcnJlY3RseSBpbiBhbGwgYnJvd3NlcnMsIHdlIHBlcmZvcm0gdHdvXG4gICAgICAgIC8vIHdyaXRlczogVGhlIGZpcnN0IHdyaXRlIGlzIHVzZWQgdG8gcmV0cmlldmUgdGhlIG5leHQgYXV0by1nZW5lcmF0ZWQgQmF0Y2hcbiAgICAgICAgLy8gSUQsIGFuZCB0aGUgc2Vjb25kIHdyaXRlIHBvcHVsYXRlcyB0aGUgaW5kZXggYW5kIHN0b3JlcyB0aGUgYWN0dWFsXG4gICAgICAgIC8vIG11dGF0aW9uIGJhdGNoLlxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTcwMTk3MlxuICAgICAgICAvLyBXZSB3cml0ZSBhbiBlbXB0eSBvYmplY3QgdG8gb2J0YWluIGtleVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4gcy5hZGQoe30pLm5leHQoKG8gPT4ge1xuICAgICAgICAgICAgX19QUklWQVRFX2hhcmRBc3NlcnQoXCJudW1iZXJcIiA9PSB0eXBlb2Ygbyk7XG4gICAgICAgICAgICBjb25zdCBfID0gbmV3IE11dGF0aW9uQmF0Y2gobywgdCwgbiwgciksIGEgPSBmdW5jdGlvbiBfX1BSSVZBVEVfdG9EYk11dGF0aW9uQmF0Y2goZSwgdCwgbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLmJhc2VNdXRhdGlvbnMubWFwKCh0ID0+IHRvTXV0YXRpb24oZS5jdCwgdCkpKSwgaSA9IG4ubXV0YXRpb25zLm1hcCgodCA9PiB0b011dGF0aW9uKGUuY3QsIHQpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiB0LFxuICAgICAgICAgICAgICAgICAgICBiYXRjaElkOiBuLmJhdGNoSWQsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsV3JpdGVUaW1lTXM6IG4ubG9jYWxXcml0ZVRpbWUudG9NaWxsaXMoKSxcbiAgICAgICAgICAgICAgICAgICAgYmFzZU11dGF0aW9uczogcixcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25zOiBpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0odGhpcy5zZXJpYWxpemVyLCB0aGlzLnVzZXJJZCwgXyksIHUgPSBbXTtcbiAgICAgICAgICAgIGxldCBjID0gbmV3IFNvcnRlZFNldCgoKGUsIHQpID0+IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKGUuY2Fub25pY2FsU3RyaW5nKCksIHQuY2Fub25pY2FsU3RyaW5nKCkpKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2Ygcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfbmV3RGJEb2N1bWVudE11dGF0aW9uS2V5KHRoaXMudXNlcklkLCBlLmtleS5wYXRoLCBvKTtcbiAgICAgICAgICAgICAgICBjID0gYy5hZGQoZS5rZXkucGF0aC5wb3BMYXN0KCkpLCB1LnB1c2gocy5wdXQoYSkpLCB1LnB1c2goaS5wdXQodCwgTykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGMuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICAgICAgdS5wdXNoKHRoaXMuaW5kZXhNYW5hZ2VyLmFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KGUsIHQpKTtcbiAgICAgICAgICAgIH0pKSwgZS5hZGRPbkNvbW1pdHRlZExpc3RlbmVyKCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5DbltvXSA9IF8ua2V5cygpO1xuICAgICAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcih1KS5uZXh0KCgoKSA9PiBfKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgbG9va3VwTXV0YXRpb25CYXRjaChlLCB0KSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbXV0YXRpb25zU3RvcmUoZSkuZ2V0KHQpLm5leHQoKGUgPT4gZSA/IChfX1BSSVZBVEVfaGFyZEFzc2VydChlLnVzZXJJZCA9PT0gdGhpcy51c2VySWQpLCBcbiAgICAgICAgX19QUklWQVRFX2Zyb21EYk11dGF0aW9uQmF0Y2godGhpcy5zZXJpYWxpemVyLCBlKSkgOiBudWxsKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvY3VtZW50IGtleXMgZm9yIHRoZSBtdXRhdGlvbiBiYXRjaCB3aXRoIHRoZSBnaXZlbiBiYXRjaElkLlxuICAgICAqIEZvciBwcmltYXJ5IGNsaWVudHMsIHRoaXMgbWV0aG9kIHJldHVybnMgYG51bGxgIGFmdGVyXG4gICAgICogYHJlbW92ZU11dGF0aW9uQmF0Y2hlcygpYCBoYXMgYmVlbiBjYWxsZWQuIFNlY29uZGFyeSBjbGllbnRzIHJldHVybiBhXG4gICAgICogY2FjaGVkIHJlc3VsdCB1bnRpbCBgcmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzKClgIGlzIGludm9rZWQuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICB2bihlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkNuW3RdID8gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodGhpcy5Dblt0XSkgOiB0aGlzLmxvb2t1cE11dGF0aW9uQmF0Y2goZSwgdCkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmtleXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Dblt0XSA9IG4sIG47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXROZXh0TXV0YXRpb25CYXRjaEFmdGVyQmF0Y2hJZChlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0ICsgMSwgciA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoWyB0aGlzLnVzZXJJZCwgbiBdKTtcbiAgICAgICAgbGV0IGkgPSBudWxsO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX211dGF0aW9uc1N0b3JlKGUpLkooe1xuICAgICAgICAgICAgaW5kZXg6IFwidXNlck11dGF0aW9uc0luZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogclxuICAgICAgICB9LCAoKGUsIHQsIHIpID0+IHtcbiAgICAgICAgICAgIHQudXNlcklkID09PSB0aGlzLnVzZXJJZCAmJiAoX19QUklWQVRFX2hhcmRBc3NlcnQodC5iYXRjaElkID49IG4pLCBpID0gX19QUklWQVRFX2Zyb21EYk11dGF0aW9uQmF0Y2godGhpcy5zZXJpYWxpemVyLCB0KSksIFxuICAgICAgICAgICAgci5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBpKSk7XG4gICAgfVxuICAgIGdldEhpZ2hlc3RVbmFja25vd2xlZGdlZEJhdGNoSWQoZSkge1xuICAgICAgICBjb25zdCB0ID0gSURCS2V5UmFuZ2UudXBwZXJCb3VuZChbIHRoaXMudXNlcklkLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSk7XG4gICAgICAgIGxldCBuID0gLTE7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbXV0YXRpb25zU3RvcmUoZSkuSih7XG4gICAgICAgICAgICBpbmRleDogXCJ1c2VyTXV0YXRpb25zSW5kZXhcIixcbiAgICAgICAgICAgIHJhbmdlOiB0LFxuICAgICAgICAgICAgcmV2ZXJzZTogITBcbiAgICAgICAgfSwgKChlLCB0LCByKSA9PiB7XG4gICAgICAgICAgICBuID0gdC5iYXRjaElkLCByLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IG4pKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IElEQktleVJhbmdlLmJvdW5kKFsgdGhpcy51c2VySWQsIC0xIF0sIFsgdGhpcy51c2VySWQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9tdXRhdGlvbnNTdG9yZShlKS5VKFwidXNlck11dGF0aW9uc0luZGV4XCIsIHQpLm5leHQoKGUgPT4gZS5tYXAoKGUgPT4gX19QUklWQVRFX2Zyb21EYk11dGF0aW9uQmF0Y2godGhpcy5zZXJpYWxpemVyLCBlKSkpKSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5KGUsIHQpIHtcbiAgICAgICAgLy8gU2NhbiB0aGUgZG9jdW1lbnQtbXV0YXRpb24gaW5kZXggc3RhcnRpbmcgd2l0aCBhIHByZWZpeCBzdGFydGluZyB3aXRoXG4gICAgICAgIC8vIHRoZSBnaXZlbiBkb2N1bWVudEtleS5cbiAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9uZXdEYkRvY3VtZW50TXV0YXRpb25QcmVmaXhGb3JQYXRoKHRoaXMudXNlcklkLCB0LnBhdGgpLCByID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChuKSwgaSA9IFtdO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX2RvY3VtZW50TXV0YXRpb25zU3RvcmUoZSkuSih7XG4gICAgICAgICAgICByYW5nZTogclxuICAgICAgICB9LCAoKG4sIHIsIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtvLCBfLCBhXSA9IG4sIHUgPSBfX1BSSVZBVEVfZGVjb2RlUmVzb3VyY2VQYXRoKF8pO1xuICAgICAgICAgICAgLy8gT25seSBjb25zaWRlciByb3dzIG1hdGNoaW5nIGV4YWN0bHkgdGhlIHNwZWNpZmljIGtleSBvZlxuICAgICAgICAgICAgLy8gaW50ZXJlc3QuIE5vdGUgdGhhdCBiZWNhdXNlIHdlIG9yZGVyIGJ5IHBhdGggZmlyc3QsIGFuZCB3ZVxuICAgICAgICAgICAgLy8gb3JkZXIgdGVybWluYXRvcnMgYmVmb3JlIHBhdGggc2VwYXJhdG9ycywgd2UnbGwgZW5jb3VudGVyIGFsbFxuICAgICAgICAgICAgLy8gdGhlIGluZGV4IHJvd3MgZm9yIGRvY3VtZW50S2V5IGNvbnRpZ3VvdXNseS4gSW4gcGFydGljdWxhciwgYWxsXG4gICAgICAgICAgICAvLyB0aGUgcm93cyBmb3IgZG9jdW1lbnRLZXkgd2lsbCBvY2N1ciBiZWZvcmUgYW55IHJvd3MgZm9yXG4gICAgICAgICAgICAvLyBkb2N1bWVudHMgbmVzdGVkIGluIGEgc3ViY29sbGVjdGlvbiBiZW5lYXRoIGRvY3VtZW50S2V5IHNvIHdlXG4gICAgICAgICAgICAvLyBjYW4gc3RvcCBhcyBzb29uIGFzIHdlIGhpdCBhbnkgc3VjaCByb3cuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobyA9PT0gdGhpcy51c2VySWQgJiYgdC5wYXRoLmlzRXF1YWwodSkpIFxuICAgICAgICAgICAgLy8gTG9vayB1cCB0aGUgbXV0YXRpb24gYmF0Y2ggaW4gdGhlIHN0b3JlLlxuICAgICAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9tdXRhdGlvbnNTdG9yZShlKS5nZXQoYSkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlKSB0aHJvdyBmYWlsKCk7XG4gICAgICAgICAgICAgICAgX19QUklWQVRFX2hhcmRBc3NlcnQoZS51c2VySWQgPT09IHRoaXMudXNlcklkKSwgaS5wdXNoKF9fUFJJVkFURV9mcm9tRGJNdXRhdGlvbkJhdGNoKHRoaXMuc2VyaWFsaXplciwgZSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcy5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBpKSk7XG4gICAgfVxuICAgIGdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyhlLCB0KSB7XG4gICAgICAgIGxldCBuID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcik7XG4gICAgICAgIGNvbnN0IHIgPSBbXTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gX19QUklWQVRFX25ld0RiRG9jdW1lbnRNdXRhdGlvblByZWZpeEZvclBhdGgodGhpcy51c2VySWQsIHQucGF0aCksIHMgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKGkpLCBvID0gX19QUklWQVRFX2RvY3VtZW50TXV0YXRpb25zU3RvcmUoZSkuSih7XG4gICAgICAgICAgICAgICAgcmFuZ2U6IHNcbiAgICAgICAgICAgIH0sICgoZSwgciwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtzLCBvLCBfXSA9IGUsIGEgPSBfX1BSSVZBVEVfZGVjb2RlUmVzb3VyY2VQYXRoKG8pO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgY29uc2lkZXIgcm93cyBtYXRjaGluZyBleGFjdGx5IHRoZSBzcGVjaWZpYyBrZXkgb2ZcbiAgICAgICAgICAgICAgICAvLyBpbnRlcmVzdC4gTm90ZSB0aGF0IGJlY2F1c2Ugd2Ugb3JkZXIgYnkgcGF0aCBmaXJzdCwgYW5kIHdlXG4gICAgICAgICAgICAgICAgLy8gb3JkZXIgdGVybWluYXRvcnMgYmVmb3JlIHBhdGggc2VwYXJhdG9ycywgd2UnbGwgZW5jb3VudGVyIGFsbFxuICAgICAgICAgICAgICAgIC8vIHRoZSBpbmRleCByb3dzIGZvciBkb2N1bWVudEtleSBjb250aWd1b3VzbHkuIEluIHBhcnRpY3VsYXIsIGFsbFxuICAgICAgICAgICAgICAgIC8vIHRoZSByb3dzIGZvciBkb2N1bWVudEtleSB3aWxsIG9jY3VyIGJlZm9yZSBhbnkgcm93cyBmb3JcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudHMgbmVzdGVkIGluIGEgc3ViY29sbGVjdGlvbiBiZW5lYXRoIGRvY3VtZW50S2V5IHNvIHdlXG4gICAgICAgICAgICAgICAgLy8gY2FuIHN0b3AgYXMgc29vbiBhcyB3ZSBoaXQgYW55IHN1Y2ggcm93LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID09PSB0aGlzLnVzZXJJZCAmJiB0LnBhdGguaXNFcXVhbChhKSA/IG4gPSBuLmFkZChfKSA6IGkuZG9uZSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgci5wdXNoKG8pO1xuICAgICAgICB9KSksIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHIpLm5leHQoKCgpID0+IHRoaXMuRm4oZSwgbikpKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nUXVlcnkoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gdC5wYXRoLCByID0gbi5sZW5ndGggKyAxLCBpID0gX19QUklWQVRFX25ld0RiRG9jdW1lbnRNdXRhdGlvblByZWZpeEZvclBhdGgodGhpcy51c2VySWQsIG4pLCBzID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChpKTtcbiAgICAgICAgLy8gQ29sbGVjdCB1cCB1bmlxdWUgYmF0Y2hJRHMgZW5jb3VudGVyZWQgZHVyaW5nIGEgc2NhbiBvZiB0aGUgaW5kZXguIFVzZSBhXG4gICAgICAgIC8vIFNvcnRlZFNldCB0byBhY2N1bXVsYXRlIGJhdGNoIElEcyBzbyB0aGV5IGNhbiBiZSB0cmF2ZXJzZWQgaW4gb3JkZXIgaW4gYVxuICAgICAgICAvLyBzY2FuIG9mIHRoZSBtYWluIHRhYmxlLlxuICAgICAgICBsZXQgbyA9IG5ldyBTb3J0ZWRTZXQoX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IpO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX2RvY3VtZW50TXV0YXRpb25zU3RvcmUoZSkuSih7XG4gICAgICAgICAgICByYW5nZTogc1xuICAgICAgICB9LCAoKGUsIHQsIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtzLCBfLCBhXSA9IGUsIHUgPSBfX1BSSVZBVEVfZGVjb2RlUmVzb3VyY2VQYXRoKF8pO1xuICAgICAgICAgICAgcyA9PT0gdGhpcy51c2VySWQgJiYgbi5pc1ByZWZpeE9mKHUpID8gXG4gICAgICAgICAgICAvLyBSb3dzIHdpdGggZG9jdW1lbnQga2V5cyBtb3JlIHRoYW4gb25lIHNlZ21lbnQgbG9uZ2VyIHRoYW4gdGhlXG4gICAgICAgICAgICAvLyBxdWVyeSBwYXRoIGNhbid0IGJlIG1hdGNoZXMuIEZvciBleGFtcGxlLCBhIHF1ZXJ5IG9uICdyb29tcydcbiAgICAgICAgICAgIC8vIGNhbid0IG1hdGNoIHRoZSBkb2N1bWVudCAvcm9vbXMvYWJjL21lc3NhZ2VzL3h5eC5cbiAgICAgICAgICAgIC8vIFRPRE8obWNnKTogd2UnbGwgbmVlZCBhIGRpZmZlcmVudCBzY2FubmVyIHdoZW4gd2UgaW1wbGVtZW50XG4gICAgICAgICAgICAvLyBhbmNlc3RvciBxdWVyaWVzLlxuICAgICAgICAgICAgdS5sZW5ndGggPT09IHIgJiYgKG8gPSBvLmFkZChhKSkgOiBpLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHRoaXMuRm4oZSwgbykpKTtcbiAgICB9XG4gICAgRm4oZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gW10sIHIgPSBbXTtcbiAgICAgICAgLy8gVE9ETyhyb2Nrd29vZCk6IEltcGxlbWVudCB0aGlzIHVzaW5nIGl0ZXJhdGUuXG4gICAgICAgIHJldHVybiB0LmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgci5wdXNoKF9fUFJJVkFURV9tdXRhdGlvbnNTdG9yZShlKS5nZXQodCkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IGUpIHRocm93IGZhaWwoKTtcbiAgICAgICAgICAgICAgICBfX1BSSVZBVEVfaGFyZEFzc2VydChlLnVzZXJJZCA9PT0gdGhpcy51c2VySWQpLCBuLnB1c2goX19QUklWQVRFX2Zyb21EYk11dGF0aW9uQmF0Y2godGhpcy5zZXJpYWxpemVyLCBlKSk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9KSksIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHIpLm5leHQoKCgpID0+IG4pKTtcbiAgICB9XG4gICAgcmVtb3ZlTXV0YXRpb25CYXRjaChlLCB0KSB7XG4gICAgICAgIHJldHVybiByZW1vdmVNdXRhdGlvbkJhdGNoKGUuX2UsIHRoaXMudXNlcklkLCB0KS5uZXh0KChuID0+IChlLmFkZE9uQ29tbWl0dGVkTGlzdGVuZXIoKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuTW4odC5iYXRjaElkKTtcbiAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2UuZm9yRWFjaChuLCAodCA9PiB0aGlzLnJlZmVyZW5jZURlbGVnYXRlLm1hcmtQb3RlbnRpYWxseU9ycGhhbmVkKGUsIHQpKSkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgY2FjaGVkIGtleXMgZm9yIGEgbXV0YXRpb24gYmF0Y2guIFRoaXMgbWV0aG9kIHNob3VsZCBiZVxuICAgICAqIGNhbGxlZCBieSBzZWNvbmRhcnkgY2xpZW50cyBhZnRlciB0aGV5IHByb2Nlc3MgbXV0YXRpb24gdXBkYXRlcy5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCBkb2VzIG5vdCBoYXZlIHRvIGJlIGNhbGxlZCBmcm9tIHByaW1hcnkgY2xpZW50cyBhc1xuICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIGNhY2hlIGVudHJpZXMgYXJlIGNsZWFyZWQgd2hlbiBhbiBhY2tub3dsZWRnZWQgb3JcbiAgICAgKiByZWplY3RlZCBiYXRjaCBpcyByZW1vdmVkIGZyb20gdGhlIG11dGF0aW9uIHF1ZXVlLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHlcbiAgICBNbihlKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLkNuW2VdO1xuICAgIH1cbiAgICBwZXJmb3JtQ29uc2lzdGVuY3lDaGVjayhlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrRW1wdHkoZSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBpZiAoIXQpIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgLy8gVmVyaWZ5IHRoYXQgdGhlcmUgYXJlIG5vIGVudHJpZXMgaW4gdGhlIGRvY3VtZW50TXV0YXRpb25zIGluZGV4IGlmXG4gICAgICAgICAgICAvLyB0aGUgcXVldWUgaXMgZW1wdHkuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChcbiAgICAgICAgICAgIC8qKlxuICogQ3JlYXRlcyBhIFt1c2VySWRdIGtleSBmb3IgdXNlIGluIHRoZSBEYkRvY3VtZW50TXV0YXRpb25zIGluZGV4IHRvIGl0ZXJhdGVcbiAqIG92ZXIgYWxsIG9mIGEgdXNlcidzIGRvY3VtZW50IG11dGF0aW9ucy5cbiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gX19QUklWQVRFX25ld0RiRG9jdW1lbnRNdXRhdGlvblByZWZpeEZvclVzZXIoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbIGUgXTtcbiAgICAgICAgICAgIH0odGhpcy51c2VySWQpKSwgciA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9kb2N1bWVudE11dGF0aW9uc1N0b3JlKGUpLkooe1xuICAgICAgICAgICAgICAgIHJhbmdlOiBuXG4gICAgICAgICAgICB9LCAoKGUsIHQsIG4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZVswXSA9PT0gdGhpcy51c2VySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9kZWNvZGVSZXNvdXJjZVBhdGgoZVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHIucHVzaCh0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Ugbi5kb25lKCk7XG4gICAgICAgICAgICB9KSkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KDAgPT09IHIubGVuZ3RoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBjb250YWluc0tleShlLCB0KSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbXV0YXRpb25RdWV1ZUNvbnRhaW5zS2V5KGUsIHRoaXMudXNlcklkLCB0KTtcbiAgICB9XG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seSAoc3RhdGUgaXMgaGVsZCBpbiBtZW1vcnkgaW4gb3RoZXIgY2xpZW50cykuXG4gICAgLyoqIFJldHVybnMgdGhlIG11dGF0aW9uIHF1ZXVlJ3MgbWV0YWRhdGEgZnJvbSBJbmRleGVkRGIuICovXG4gICAgeG4oZSkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX211dGF0aW9uUXVldWVzU3RvcmUoZSkuZ2V0KHRoaXMudXNlcklkKS5uZXh0KChlID0+IGUgfHwge1xuICAgICAgICAgICAgdXNlcklkOiB0aGlzLnVzZXJJZCxcbiAgICAgICAgICAgIGxhc3RBY2tub3dsZWRnZWRCYXRjaElkOiAtMSxcbiAgICAgICAgICAgIGxhc3RTdHJlYW1Ub2tlbjogXCJcIlxuICAgICAgICB9KSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIG11dGF0aW9uIHF1ZXVlIGZvciB0aGUgZ2l2ZW4gdXNlciBjb250YWlucyBhIHBlbmRpbmdcbiAqICAgICAgICAgbXV0YXRpb24gZm9yIHRoZSBnaXZlbiBrZXkuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX211dGF0aW9uUXVldWVDb250YWluc0tleShlLCB0LCBuKSB7XG4gICAgY29uc3QgciA9IF9fUFJJVkFURV9uZXdEYkRvY3VtZW50TXV0YXRpb25QcmVmaXhGb3JQYXRoKHQsIG4ucGF0aCksIGkgPSByWzFdLCBzID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChyKTtcbiAgICBsZXQgbyA9ICExO1xuICAgIHJldHVybiBfX1BSSVZBVEVfZG9jdW1lbnRNdXRhdGlvbnNTdG9yZShlKS5KKHtcbiAgICAgICAgcmFuZ2U6IHMsXG4gICAgICAgIEg6ICEwXG4gICAgfSwgKChlLCBuLCByKSA9PiB7XG4gICAgICAgIGNvbnN0IFtzLCBfLCAvKmJhdGNoSUQqLyBhXSA9IGU7XG4gICAgICAgIHMgPT09IHQgJiYgXyA9PT0gaSAmJiAobyA9ICEwKSwgci5kb25lKCk7XG4gICAgfSkpLm5leHQoKCgpID0+IG8pKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBhbnkgbXV0YXRpb24gcXVldWUgY29udGFpbnMgdGhlIGdpdmVuIGRvY3VtZW50LiAqL1xuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG11dGF0aW9ucyBvYmplY3Qgc3RvcmUuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9tdXRhdGlvbnNTdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcIm11dGF0aW9uc1wiKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG11dGF0aW9uUXVldWVzIG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZG9jdW1lbnRNdXRhdGlvbnNTdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcImRvY3VtZW50TXV0YXRpb25zXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgbXV0YXRpb25RdWV1ZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9tdXRhdGlvblF1ZXVlc1N0b3JlKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2dldFN0b3JlKGUsIFwibXV0YXRpb25RdWV1ZXNcIik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogT2Zmc2V0IHRvIGVuc3VyZSBub24tb3ZlcmxhcHBpbmcgdGFyZ2V0IGlkcy4gKi9cbi8qKlxuICogR2VuZXJhdGVzIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZyB0YXJnZXQgSURzIGZvciBzZW5kaW5nIHRhcmdldHMgdG8gdGhlXG4gKiB3YXRjaCBzdHJlYW0uXG4gKlxuICogVGhlIGNsaWVudCBjb25zdHJ1Y3RzIHR3byBnZW5lcmF0b3JzLCBvbmUgZm9yIHRoZSB0YXJnZXQgY2FjaGUsIGFuZCBvbmUgZm9yXG4gKiBmb3IgdGhlIHN5bmMgZW5naW5lICh0byBnZW5lcmF0ZSBsaW1ibyBkb2N1bWVudHMgdGFyZ2V0cykuIFRoZXNlXG4gKiBnZW5lcmF0b3JzIHByb2R1Y2Ugbm9uLW92ZXJsYXBwaW5nIElEcyAoYnkgdXNpbmcgZXZlbiBhbmQgb2RkIElEc1xuICogcmVzcGVjdGl2ZWx5KS5cbiAqXG4gKiBCeSBzZXBhcmF0aW5nIHRoZSB0YXJnZXQgSUQgc3BhY2UsIHRoZSBxdWVyeSBjYWNoZSBjYW4gZ2VuZXJhdGUgdGFyZ2V0IElEc1xuICogdGhhdCBwZXJzaXN0IGFjcm9zcyBjbGllbnQgcmVzdGFydHMsIHdoaWxlIHN5bmMgZW5naW5lIGNhbiBpbmRlcGVuZGVudGx5XG4gKiBnZW5lcmF0ZSBpbi1tZW1vcnkgdGFyZ2V0IElEcyB0aGF0IGFyZSB0cmFuc2llbnQgYW5kIGNhbiBiZSByZXVzZWQgYWZ0ZXIgYVxuICogcmVzdGFydC5cbiAqL1xuY2xhc3MgX19QUklWQVRFX1RhcmdldElkR2VuZXJhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHRoaXMuT24gPSBlO1xuICAgIH1cbiAgICBuZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5PbiArPSAyLCB0aGlzLk9uO1xuICAgIH1cbiAgICBzdGF0aWMgTm4oKSB7XG4gICAgICAgIC8vIFRoZSB0YXJnZXQgY2FjaGUgZ2VuZXJhdG9yIG11c3QgcmV0dXJuICcyJyBpbiBpdHMgZmlyc3QgY2FsbCB0byBgbmV4dCgpYFxuICAgICAgICAvLyBhcyB0aGVyZSBpcyBubyBkaWZmZXJlbnRpYXRpb24gaW4gdGhlIHByb3RvY29sIGxheWVyIGJldHdlZW4gYW4gdW5zZXRcbiAgICAgICAgLy8gbnVtYmVyIGFuZCB0aGUgbnVtYmVyICcwJy4gSWYgd2Ugd2VyZSB0byBzZW50IGEgdGFyZ2V0IHdpdGggdGFyZ2V0IElEXG4gICAgICAgIC8vICcwJywgdGhlIGJhY2tlbmQgd291bGQgY29uc2lkZXIgaXQgdW5zZXQgYW5kIHJlcGxhY2UgaXQgd2l0aCBpdHMgb3duIElELlxuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9UYXJnZXRJZEdlbmVyYXRvcigwKTtcbiAgICB9XG4gICAgc3RhdGljIExuKCkge1xuICAgICAgICAvLyBTeW5jIGVuZ2luZSBhc3NpZ25zIHRhcmdldCBJRHMgZm9yIGxpbWJvIGRvY3VtZW50IGRldGVjdGlvbi5cbiAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfVGFyZ2V0SWRHZW5lcmF0b3IoLTEpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgX19QUklWQVRFX0luZGV4ZWREYlRhcmdldENhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUgPSBlLCB0aGlzLnNlcmlhbGl6ZXIgPSB0O1xuICAgIH1cbiAgICAvLyBQT1JUSU5HIE5PVEU6IFdlIGRvbid0IGNhY2hlIGdsb2JhbCBtZXRhZGF0YSBmb3IgdGhlIHRhcmdldCBjYWNoZSwgc2luY2VcbiAgICAvLyBzb21lIG9mIGl0IChpbiBwYXJ0aWN1bGFyIGBoaWdoZXN0VGFyZ2V0SWRgKSBjYW4gYmUgbW9kaWZpZWQgYnkgc2Vjb25kYXJ5XG4gICAgLy8gdGFicy4gV2UgY291bGQgcGVyaGFwcyBiZSBtb3JlIGdyYW51bGFyIChhbmQgZS5nLiBzdGlsbCBjYWNoZVxuICAgIC8vIGBsYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uYCBpbiBtZW1vcnkpIGJ1dCBmb3Igc2ltcGxpY2l0eSB3ZSBjdXJyZW50bHkgZ29cbiAgICAvLyB0byBJbmRleGVkRGIgd2hlbmV2ZXIgd2UgbmVlZCB0byByZWFkIG1ldGFkYXRhLiBXZSBjYW4gcmV2aXNpdCBpZiBpdCB0dXJuc1xuICAgIC8vIG91dCB0byBoYXZlIGEgbWVhbmluZ2Z1bCBwZXJmb3JtYW5jZSBpbXBhY3QuXG4gICAgYWxsb2NhdGVUYXJnZXRJZChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkJuKGUpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBfX1BSSVZBVEVfVGFyZ2V0SWRHZW5lcmF0b3IodC5oaWdoZXN0VGFyZ2V0SWQpO1xuICAgICAgICAgICAgcmV0dXJuIHQuaGlnaGVzdFRhcmdldElkID0gbi5uZXh0KCksIHRoaXMua24oZSwgdCkubmV4dCgoKCkgPT4gdC5oaWdoZXN0VGFyZ2V0SWQpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuQm4oZSkubmV4dCgoZSA9PiBTbmFwc2hvdFZlcnNpb24uZnJvbVRpbWVzdGFtcChuZXcgVGltZXN0YW1wKGUubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbi5zZWNvbmRzLCBlLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24ubmFub3NlY29uZHMpKSkpO1xuICAgIH1cbiAgICBnZXRIaWdoZXN0U2VxdWVuY2VOdW1iZXIoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5CbihlKS5uZXh0KChlID0+IGUuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyKSk7XG4gICAgfVxuICAgIHNldFRhcmdldHNNZXRhZGF0YShlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkJuKGUpLm5leHQoKHIgPT4gKHIuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyID0gdCwgbiAmJiAoci5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uID0gbi50b1RpbWVzdGFtcCgpKSwgXG4gICAgICAgIHQgPiByLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciAmJiAoci5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgPSB0KSwgdGhpcy5rbihlLCByKSkpKTtcbiAgICB9XG4gICAgYWRkVGFyZ2V0RGF0YShlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnFuKGUsIHQpLm5leHQoKCgpID0+IHRoaXMuQm4oZSkubmV4dCgobiA9PiAobi50YXJnZXRDb3VudCArPSAxLCB0aGlzLlFuKHQsIG4pLCBcbiAgICAgICAgdGhpcy5rbihlLCBuKSkpKSkpO1xuICAgIH1cbiAgICB1cGRhdGVUYXJnZXREYXRhKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucW4oZSwgdCk7XG4gICAgfVxuICAgIHJlbW92ZVRhcmdldERhdGEoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVNYXRjaGluZ0tleXNGb3JUYXJnZXRJZChlLCB0LnRhcmdldElkKS5uZXh0KCgoKSA9PiBfX1BSSVZBVEVfdGFyZ2V0c1N0b3JlKGUpLmRlbGV0ZSh0LnRhcmdldElkKSkpLm5leHQoKCgpID0+IHRoaXMuQm4oZSkpKS5uZXh0KCh0ID0+IChfX1BSSVZBVEVfaGFyZEFzc2VydCh0LnRhcmdldENvdW50ID4gMCksIFxuICAgICAgICB0LnRhcmdldENvdW50IC09IDEsIHRoaXMua24oZSwgdCkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERyb3BzIGFueSB0YXJnZXRzIHdpdGggc2VxdWVuY2UgbnVtYmVyIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdXBwZXIgYm91bmQsIGV4Y2VwdGluZyB0aG9zZVxuICAgICAqIHByZXNlbnQgaW4gYGFjdGl2ZVRhcmdldElkc2AuIERvY3VtZW50IGFzc29jaWF0aW9ucyBmb3IgdGhlIHJlbW92ZWQgdGFyZ2V0cyBhcmUgYWxzbyByZW1vdmVkLlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB0YXJnZXRzIHJlbW92ZWQuXG4gICAgICovICAgIHJlbW92ZVRhcmdldHMoZSwgdCwgbikge1xuICAgICAgICBsZXQgciA9IDA7XG4gICAgICAgIGNvbnN0IGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV90YXJnZXRzU3RvcmUoZSkuSigoKHMsIG8pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IF8gPSBfX1BSSVZBVEVfZnJvbURiVGFyZ2V0KG8pO1xuICAgICAgICAgICAgXy5zZXF1ZW5jZU51bWJlciA8PSB0ICYmIG51bGwgPT09IG4uZ2V0KF8udGFyZ2V0SWQpICYmIChyKyssIGkucHVzaCh0aGlzLnJlbW92ZVRhcmdldERhdGEoZSwgXykpKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKGkpKSkubmV4dCgoKCkgPT4gcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsIHByb3ZpZGVkIGZ1bmN0aW9uIHdpdGggZWFjaCBgVGFyZ2V0RGF0YWAgdGhhdCB3ZSBoYXZlIGNhY2hlZC5cbiAgICAgKi8gICAgZm9yRWFjaFRhcmdldChlLCB0KSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfdGFyZ2V0c1N0b3JlKGUpLkooKChlLCBuKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gX19QUklWQVRFX2Zyb21EYlRhcmdldChuKTtcbiAgICAgICAgICAgIHQocik7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgQm4oZSkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX2dsb2JhbFRhcmdldFN0b3JlKGUpLmdldChcInRhcmdldEdsb2JhbEtleVwiKS5uZXh0KChlID0+IChfX1BSSVZBVEVfaGFyZEFzc2VydChudWxsICE9PSBlKSwgXG4gICAgICAgIGUpKSk7XG4gICAgfVxuICAgIGtuKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9nbG9iYWxUYXJnZXRTdG9yZShlKS5wdXQoXCJ0YXJnZXRHbG9iYWxLZXlcIiwgdCk7XG4gICAgfVxuICAgIHFuKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV90YXJnZXRzU3RvcmUoZSkucHV0KF9fUFJJVkFURV90b0RiVGFyZ2V0KHRoaXMuc2VyaWFsaXplciwgdCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbi1wbGFjZSB1cGRhdGVzIHRoZSBwcm92aWRlZCBtZXRhZGF0YSB0byBhY2NvdW50IGZvciB2YWx1ZXMgaW4gdGhlIGdpdmVuXG4gICAgICogVGFyZ2V0RGF0YS4gU2F2aW5nIGlzIGRvbmUgc2VwYXJhdGVseS4gUmV0dXJucyB0cnVlIGlmIHRoZXJlIHdlcmUgYW55XG4gICAgICogY2hhbmdlcyB0byB0aGUgbWV0YWRhdGEuXG4gICAgICovICAgIFFuKGUsIHQpIHtcbiAgICAgICAgbGV0IG4gPSAhMTtcbiAgICAgICAgcmV0dXJuIGUudGFyZ2V0SWQgPiB0LmhpZ2hlc3RUYXJnZXRJZCAmJiAodC5oaWdoZXN0VGFyZ2V0SWQgPSBlLnRhcmdldElkLCBuID0gITApLCBcbiAgICAgICAgZS5zZXF1ZW5jZU51bWJlciA+IHQuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyICYmICh0LmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IGUuc2VxdWVuY2VOdW1iZXIsIFxuICAgICAgICBuID0gITApLCBuO1xuICAgIH1cbiAgICBnZXRUYXJnZXRDb3VudChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkJuKGUpLm5leHQoKGUgPT4gZS50YXJnZXRDb3VudCkpO1xuICAgIH1cbiAgICBnZXRUYXJnZXREYXRhKGUsIHQpIHtcbiAgICAgICAgLy8gSXRlcmF0aW5nIGJ5IHRoZSBjYW5vbmljYWxJZCBtYXkgeWllbGQgbW9yZSB0aGFuIG9uZSByZXN1bHQgYmVjYXVzZVxuICAgICAgICAvLyBjYW5vbmljYWxJZCB2YWx1ZXMgYXJlIG5vdCByZXF1aXJlZCB0byBiZSB1bmlxdWUgcGVyIHRhcmdldC4gVGhpcyBxdWVyeVxuICAgICAgICAvLyBkZXBlbmRzIG9uIHRoZSBxdWVyeVRhcmdldHMgaW5kZXggdG8gYmUgZWZmaWNpZW50LlxuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2Nhbm9uaWZ5VGFyZ2V0KHQpLCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyBuLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgXSwgWyBuLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSk7XG4gICAgICAgIGxldCBpID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV90YXJnZXRzU3RvcmUoZSkuSih7XG4gICAgICAgICAgICByYW5nZTogcixcbiAgICAgICAgICAgIGluZGV4OiBcInF1ZXJ5VGFyZ2V0c0luZGV4XCJcbiAgICAgICAgfSwgKChlLCBuLCByKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gX19QUklWQVRFX2Zyb21EYlRhcmdldChuKTtcbiAgICAgICAgICAgIC8vIEFmdGVyIGZpbmRpbmcgYSBwb3RlbnRpYWwgbWF0Y2gsIGNoZWNrIHRoYXQgdGhlIHRhcmdldCBpc1xuICAgICAgICAgICAgLy8gYWN0dWFsbHkgZXF1YWwgdG8gdGhlIHJlcXVlc3RlZCB0YXJnZXQuXG4gICAgICAgICAgICAgICAgICAgICAgICBfX1BSSVZBVEVfdGFyZ2V0RXF1YWxzKHQsIHMudGFyZ2V0KSAmJiAoaSA9IHMsIHIuZG9uZSgpKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgYWRkTWF0Y2hpbmdLZXlzKGUsIHQsIG4pIHtcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBUaGUgcmV2ZXJzZSBpbmRleCAoZG9jdW1lbnRzVGFyZ2V0cykgaXMgbWFpbnRhaW5lZCBieVxuICAgICAgICAvLyBJbmRleGVkRGIuXG4gICAgICAgIGNvbnN0IHIgPSBbXSwgaSA9IF9fUFJJVkFURV9kb2N1bWVudFRhcmdldFN0b3JlKGUpO1xuICAgICAgICByZXR1cm4gdC5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKHQucGF0aCk7XG4gICAgICAgICAgICByLnB1c2goaS5wdXQoe1xuICAgICAgICAgICAgICAgIHRhcmdldElkOiBuLFxuICAgICAgICAgICAgICAgIHBhdGg6IHNcbiAgICAgICAgICAgIH0pKSwgci5wdXNoKHRoaXMucmVmZXJlbmNlRGVsZWdhdGUuYWRkUmVmZXJlbmNlKGUsIG4sIHQpKTtcbiAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihyKTtcbiAgICB9XG4gICAgcmVtb3ZlTWF0Y2hpbmdLZXlzKGUsIHQsIG4pIHtcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBUaGUgcmV2ZXJzZSBpbmRleCAoZG9jdW1lbnRzVGFyZ2V0cykgaXMgbWFpbnRhaW5lZCBieVxuICAgICAgICAvLyBJbmRleGVkRGIuXG4gICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfZG9jdW1lbnRUYXJnZXRTdG9yZShlKTtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHQsICh0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKHQucGF0aCk7XG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IoWyByLmRlbGV0ZShbIG4sIGkgXSksIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUucmVtb3ZlUmVmZXJlbmNlKGUsIG4sIHQpIF0pO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9kb2N1bWVudFRhcmdldFN0b3JlKGUpLCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0IF0sIFsgdCArIDEgXSwgXG4gICAgICAgIC8qbG93ZXJPcGVuPSovICExLCBcbiAgICAgICAgLyp1cHBlck9wZW49Ki8gITApO1xuICAgICAgICByZXR1cm4gbi5kZWxldGUocik7XG4gICAgfVxuICAgIGdldE1hdGNoaW5nS2V5c0ZvclRhcmdldElkKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IElEQktleVJhbmdlLmJvdW5kKFsgdCBdLCBbIHQgKyAxIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKSwgciA9IF9fUFJJVkFURV9kb2N1bWVudFRhcmdldFN0b3JlKGUpO1xuICAgICAgICBsZXQgaSA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpO1xuICAgICAgICByZXR1cm4gci5KKHtcbiAgICAgICAgICAgIHJhbmdlOiBuLFxuICAgICAgICAgICAgSDogITBcbiAgICAgICAgfSwgKChlLCB0LCBuKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gX19QUklWQVRFX2RlY29kZVJlc291cmNlUGF0aChlWzFdKSwgcyA9IG5ldyBEb2N1bWVudEtleShyKTtcbiAgICAgICAgICAgIGkgPSBpLmFkZChzKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgY29udGFpbnNLZXkoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2VuY29kZVJlc291cmNlUGF0aCh0LnBhdGgpLCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyBuIF0sIFsgX19QUklWQVRFX2ltbWVkaWF0ZVN1Y2Nlc3NvcihuKSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9kb2N1bWVudFRhcmdldFN0b3JlKGUpLkooe1xuICAgICAgICAgICAgaW5kZXg6IFwiZG9jdW1lbnRUYXJnZXRzSW5kZXhcIixcbiAgICAgICAgICAgIEg6ICEwLFxuICAgICAgICAgICAgcmFuZ2U6IHJcbiAgICAgICAgfSwgKChbZSwgdF0sIG4sIHIpID0+IHtcbiAgICAgICAgICAgIC8vIEhhdmluZyBhIHNlbnRpbmVsIHJvdyBmb3IgYSBkb2N1bWVudCBkb2VzIG5vdCBjb3VudCBhcyBjb250YWluaW5nIHRoYXQgZG9jdW1lbnQ7XG4gICAgICAgICAgICAvLyBGb3IgdGhlIHRhcmdldCBjYWNoZSwgY29udGFpbmluZyB0aGUgZG9jdW1lbnQgbWVhbnMgdGhlIGRvY3VtZW50IGlzIHBhcnQgb2Ygc29tZVxuICAgICAgICAgICAgLy8gdGFyZ2V0LlxuICAgICAgICAgICAgMCAhPT0gZSAmJiAoaSsrLCByLmRvbmUoKSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBpID4gMCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBhIFRhcmdldERhdGEgZW50cnkgYnkgdGFyZ2V0IElELlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldElkIC0gVGhlIHRhcmdldCBJRCBvZiB0aGUgVGFyZ2V0RGF0YSBlbnRyeSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIFRoZSBjYWNoZWQgVGFyZ2V0RGF0YSBlbnRyeSwgb3IgbnVsbCBpZiB0aGUgY2FjaGUgaGFzIG5vIGVudHJ5IGZvclxuICAgICAqIHRoZSB0YXJnZXQuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICBvdChlLCB0KSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfdGFyZ2V0c1N0b3JlKGUpLmdldCh0KS5uZXh0KChlID0+IGUgPyBfX1BSSVZBVEVfZnJvbURiVGFyZ2V0KGUpIDogbnVsbCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHF1ZXJpZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV90YXJnZXRzU3RvcmUoZSkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfZ2V0U3RvcmUoZSwgXCJ0YXJnZXRzXCIpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgdGFyZ2V0IGdsb2JhbHMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9nbG9iYWxUYXJnZXRTdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcInRhcmdldEdsb2JhbFwiKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGRvY3VtZW50IHRhcmdldCBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2RvY3VtZW50VGFyZ2V0U3RvcmUoZSkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfZ2V0U3RvcmUoZSwgXCJ0YXJnZXREb2N1bWVudHNcIik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9idWZmZXJFbnRyeUNvbXBhcmF0b3IoW2UsIHRdLCBbbiwgcl0pIHtcbiAgICBjb25zdCBpID0gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IoZSwgbik7XG4gICAgcmV0dXJuIDAgPT09IGkgPyBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcih0LCByKSA6IGk7XG59XG5cbi8qKlxuICogVXNlZCB0byBjYWxjdWxhdGUgdGhlIG50aCBzZXF1ZW5jZSBudW1iZXIuIEtlZXBzIGEgcm9sbGluZyBidWZmZXIgb2YgdGhlXG4gKiBsb3dlc3QgbiB2YWx1ZXMgcGFzc2VkIHRvIGBhZGRFbGVtZW50YCwgYW5kIGZpbmFsbHkgcmVwb3J0cyB0aGUgbGFyZ2VzdCBvZlxuICogdGhlbSBpbiBgbWF4VmFsdWVgLlxuICovIGNsYXNzIF9fUFJJVkFURV9Sb2xsaW5nU2VxdWVuY2VOdW1iZXJCdWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5LbiA9IGUsIHRoaXMuYnVmZmVyID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfYnVmZmVyRW50cnlDb21wYXJhdG9yKSwgdGhpcy4kbiA9IDA7XG4gICAgfVxuICAgIFVuKCkge1xuICAgICAgICByZXR1cm4gKyt0aGlzLiRuO1xuICAgIH1cbiAgICBXbihlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBbIGUsIHRoaXMuVW4oKSBdO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIuc2l6ZSA8IHRoaXMuS24pIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuYWRkKHQpOyBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmJ1ZmZlci5sYXN0KCk7XG4gICAgICAgICAgICBfX1BSSVZBVEVfYnVmZmVyRW50cnlDb21wYXJhdG9yKHQsIGUpIDwgMCAmJiAodGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5kZWxldGUoZSkuYWRkKHQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIC8vIEd1YXJhbnRlZWQgdG8gYmUgbm9uLWVtcHR5LiBJZiB3ZSBkZWNpZGUgd2UgYXJlIG5vdCBjb2xsZWN0aW5nIGFueVxuICAgICAgICAvLyBzZXF1ZW5jZSBudW1iZXJzLCBudGhTZXF1ZW5jZU51bWJlciBiZWxvdyBzaG9ydC1jaXJjdWl0cy4gSWYgd2UgaGF2ZVxuICAgICAgICAvLyBkZWNpZGVkIHRoYXQgd2UgYXJlIGNvbGxlY3RpbmcgbiBzZXF1ZW5jZSBudW1iZXJzLCBpdCdzIGJlY2F1c2UgbiBpcyBzb21lXG4gICAgICAgIC8vIHBlcmNlbnRhZ2Ugb2YgdGhlIGV4aXN0aW5nIHNlcXVlbmNlIG51bWJlcnMuIFRoYXQgbWVhbnMgd2Ugc2hvdWxkIG5ldmVyXG4gICAgICAgIC8vIGJlIGluIGEgc2l0dWF0aW9uIHdoZXJlIHdlIGFyZSBjb2xsZWN0aW5nIHNlcXVlbmNlIG51bWJlcnMgYnV0IGRvbid0XG4gICAgICAgIC8vIGFjdHVhbGx5IGhhdmUgYW55LlxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGFzdCgpWzBdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgc2NoZWR1bGluZyBvZiBMUlUgZ2FyYmFnZSBjb2xsZWN0aW9uLiBJdCBoYW5kbGVzIGNoZWNraW5nXG4gKiB3aGV0aGVyIG9yIG5vdCBHQyBpcyBlbmFibGVkLCBhcyB3ZWxsIGFzIHdoaWNoIGRlbGF5IHRvIHVzZSBiZWZvcmUgdGhlIG5leHQgcnVuLlxuICovIGNsYXNzIF9fUFJJVkFURV9McnVTY2hlZHVsZXIge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4pIHtcbiAgICAgICAgdGhpcy5nYXJiYWdlQ29sbGVjdG9yID0gZSwgdGhpcy5hc3luY1F1ZXVlID0gdCwgdGhpcy5sb2NhbFN0b3JlID0gbiwgdGhpcy5HbiA9IG51bGw7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICAtMSAhPT0gdGhpcy5nYXJiYWdlQ29sbGVjdG9yLnBhcmFtcy5jYWNoZVNpemVDb2xsZWN0aW9uVGhyZXNob2xkICYmIHRoaXMuem4oNmU0KTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5HbiAmJiAodGhpcy5Hbi5jYW5jZWwoKSwgdGhpcy5HbiA9IG51bGwpO1xuICAgIH1cbiAgICBnZXQgc3RhcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuR247XG4gICAgfVxuICAgIHpuKGUpIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBgR2FyYmFnZSBjb2xsZWN0aW9uIHNjaGVkdWxlZCBpbiAke2V9bXNgKSwgXG4gICAgICAgIHRoaXMuR24gPSB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZUFmdGVyRGVsYXkoXCJscnVfZ2FyYmFnZV9jb2xsZWN0aW9uXCIgLyogVGltZXJJZC5McnVHYXJiYWdlQ29sbGVjdGlvbiAqLyAsIGUsIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLkduID0gbnVsbDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2NhbFN0b3JlLmNvbGxlY3RHYXJiYWdlKHRoaXMuZ2FyYmFnZUNvbGxlY3Rvcik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgX19QUklWQVRFX2lzSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvcihlKSA/IF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkxydUdhcmJhZ2VDb2xsZWN0b3JcIiwgXCJJZ25vcmluZyBJbmRleGVkREIgZXJyb3IgZHVyaW5nIGdhcmJhZ2UgY29sbGVjdGlvbjogXCIsIGUpIDogYXdhaXQgX19QUklWQVRFX2lnbm9yZUlmUHJpbWFyeUxlYXNlTG9zcyhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuem4oM2U1KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBzdGVwcyBmb3IgTFJVIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfTHJ1R2FyYmFnZUNvbGxlY3RvckltcGwge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy5qbiA9IGUsIHRoaXMucGFyYW1zID0gdDtcbiAgICB9XG4gICAgY2FsY3VsYXRlVGFyZ2V0Q291bnQoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qbi5IbihlKS5uZXh0KChlID0+IE1hdGguZmxvb3IodCAvIDEwMCAqIGUpKSk7XG4gICAgfVxuICAgIG50aFNlcXVlbmNlTnVtYmVyKGUsIHQpIHtcbiAgICAgICAgaWYgKDAgPT09IHQpIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShfX1BSSVZBVEVfTGlzdGVuU2VxdWVuY2Uub2UpO1xuICAgICAgICBjb25zdCBuID0gbmV3IF9fUFJJVkFURV9Sb2xsaW5nU2VxdWVuY2VOdW1iZXJCdWZmZXIodCk7XG4gICAgICAgIHJldHVybiB0aGlzLmpuLmZvckVhY2hUYXJnZXQoZSwgKGUgPT4gbi5XbihlLnNlcXVlbmNlTnVtYmVyKSkpLm5leHQoKCgpID0+IHRoaXMuam4uSm4oZSwgKGUgPT4gbi5XbihlKSkpKSkubmV4dCgoKCkgPT4gbi5tYXhWYWx1ZSkpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXRzKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuam4ucmVtb3ZlVGFyZ2V0cyhlLCB0LCBuKTtcbiAgICB9XG4gICAgcmVtb3ZlT3JwaGFuZWREb2N1bWVudHMoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qbi5yZW1vdmVPcnBoYW5lZERvY3VtZW50cyhlLCB0KTtcbiAgICB9XG4gICAgY29sbGVjdChlLCB0KSB7XG4gICAgICAgIHJldHVybiAtMSA9PT0gdGhpcy5wYXJhbXMuY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCA/IChfX1BSSVZBVEVfbG9nRGVidWcoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiR2FyYmFnZSBjb2xsZWN0aW9uIHNraXBwZWQ7IGRpc2FibGVkXCIpLCBcbiAgICAgICAgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoQWUpKSA6IHRoaXMuZ2V0Q2FjaGVTaXplKGUpLm5leHQoKG4gPT4gbiA8IHRoaXMucGFyYW1zLmNhY2hlU2l6ZUNvbGxlY3Rpb25UaHJlc2hvbGQgPyAoX19QUklWQVRFX2xvZ0RlYnVnKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBgR2FyYmFnZSBjb2xsZWN0aW9uIHNraXBwZWQ7IENhY2hlIHNpemUgJHtufSBpcyBsb3dlciB0aGFuIHRocmVzaG9sZCAke3RoaXMucGFyYW1zLmNhY2hlU2l6ZUNvbGxlY3Rpb25UaHJlc2hvbGR9YCksIFxuICAgICAgICBBZSkgOiB0aGlzLlluKGUsIHQpKSk7XG4gICAgfVxuICAgIGdldENhY2hlU2l6ZShlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpuLmdldENhY2hlU2l6ZShlKTtcbiAgICB9XG4gICAgWW4oZSwgdCkge1xuICAgICAgICBsZXQgbiwgciwgaSwgcywgbywgYSwgdTtcbiAgICAgICAgY29uc3QgYyA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZVRhcmdldENvdW50KGUsIHRoaXMucGFyYW1zLnBlcmNlbnRpbGVUb0NvbGxlY3QpLm5leHQoKHQgPT4gKFxuICAgICAgICAvLyBDYXAgYXQgdGhlIGNvbmZpZ3VyZWQgbWF4XG4gICAgICAgIHQgPiB0aGlzLnBhcmFtcy5tYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0ID8gKF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkxydUdhcmJhZ2VDb2xsZWN0b3JcIiwgYENhcHBpbmcgc2VxdWVuY2UgbnVtYmVycyB0byBjb2xsZWN0IGRvd24gdG8gdGhlIG1heGltdW0gb2YgJHt0aGlzLnBhcmFtcy5tYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0fSBmcm9tICR7dH1gKSwgXG4gICAgICAgIHIgPSB0aGlzLnBhcmFtcy5tYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0KSA6IHIgPSB0LCBzID0gRGF0ZS5ub3coKSwgdGhpcy5udGhTZXF1ZW5jZU51bWJlcihlLCByKSkpKS5uZXh0KChyID0+IChuID0gciwgXG4gICAgICAgIG8gPSBEYXRlLm5vdygpLCB0aGlzLnJlbW92ZVRhcmdldHMoZSwgbiwgdCkpKSkubmV4dCgodCA9PiAoaSA9IHQsIGEgPSBEYXRlLm5vdygpLCBcbiAgICAgICAgdGhpcy5yZW1vdmVPcnBoYW5lZERvY3VtZW50cyhlLCBuKSkpKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGlmICh1ID0gRGF0ZS5ub3coKSwgX19QUklWQVRFX2dldExvZ0xldmVsKCkgPD0gbG9nZ2VyLkxvZ0xldmVsLkRFQlVHKSB7XG4gICAgICAgICAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBgTFJVIEdhcmJhZ2UgQ29sbGVjdGlvblxcblxcdENvdW50ZWQgdGFyZ2V0cyBpbiAke3MgLSBjfW1zXFxuXFx0RGV0ZXJtaW5lZCBsZWFzdCByZWNlbnRseSB1c2VkICR7cn0gaW4gYCArIChvIC0gcykgKyBcIm1zXFxuXCIgKyBgXFx0UmVtb3ZlZCAke2l9IHRhcmdldHMgaW4gYCArIChhIC0gbykgKyBcIm1zXFxuXCIgKyBgXFx0UmVtb3ZlZCAke2V9IGRvY3VtZW50cyBpbiBgICsgKHUgLSBhKSArIFwibXNcXG5cIiArIGBUb3RhbCBEdXJhdGlvbjogJHt1IC0gY31tc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgICBkaWRSdW46ICEwLFxuICAgICAgICAgICAgICAgIHNlcXVlbmNlTnVtYmVyc0NvbGxlY3RlZDogcixcbiAgICAgICAgICAgICAgICB0YXJnZXRzUmVtb3ZlZDogaSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudHNSZW1vdmVkOiBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX25ld0xydUdhcmJhZ2VDb2xsZWN0b3IoZSwgdCkge1xuICAgIHJldHVybiBuZXcgX19QUklWQVRFX0xydUdhcmJhZ2VDb2xsZWN0b3JJbXBsKGUsIHQpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFByb3ZpZGVzIExSVSBmdW5jdGlvbmFsaXR5IGZvciBJbmRleGVkREIgcGVyc2lzdGVuY2UuICovIGNsYXNzIF9fUFJJVkFURV9JbmRleGVkRGJMcnVEZWxlZ2F0ZUltcGwge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy5kYiA9IGUsIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IF9fUFJJVkFURV9uZXdMcnVHYXJiYWdlQ29sbGVjdG9yKHRoaXMsIHQpO1xuICAgIH1cbiAgICBIbihlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLlpuKGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5nZXRUYXJnZXRDYWNoZSgpLmdldFRhcmdldENvdW50KGUpLm5leHQoKGUgPT4gdC5uZXh0KCh0ID0+IGUgKyB0KSkpKTtcbiAgICB9XG4gICAgWm4oZSkge1xuICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLkpuKGUsIChlID0+IHtcbiAgICAgICAgICAgIHQrKztcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHQpKTtcbiAgICB9XG4gICAgZm9yRWFjaFRhcmdldChlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLmdldFRhcmdldENhY2hlKCkuZm9yRWFjaFRhcmdldChlLCB0KTtcbiAgICB9XG4gICAgSm4oZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5YbihlLCAoKGUsIG4pID0+IHQobikpKTtcbiAgICB9XG4gICAgYWRkUmVmZXJlbmNlKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV93cml0ZVNlbnRpbmVsS2V5KGUsIG4pO1xuICAgIH1cbiAgICByZW1vdmVSZWZlcmVuY2UoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3dyaXRlU2VudGluZWxLZXkoZSwgbik7XG4gICAgfVxuICAgIHJlbW92ZVRhcmdldHMoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5nZXRUYXJnZXRDYWNoZSgpLnJlbW92ZVRhcmdldHMoZSwgdCwgbik7XG4gICAgfVxuICAgIG1hcmtQb3RlbnRpYWxseU9ycGhhbmVkKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV93cml0ZVNlbnRpbmVsS2V5KGUsIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYW55dGhpbmcgd291bGQgcHJldmVudCB0aGlzIGRvY3VtZW50IGZyb20gYmVpbmcgZ2FyYmFnZVxuICAgICAqIGNvbGxlY3RlZCwgZ2l2ZW4gdGhhdCB0aGUgZG9jdW1lbnQgaW4gcXVlc3Rpb24gaXMgbm90IHByZXNlbnQgaW4gYW55XG4gICAgICogdGFyZ2V0cyBhbmQgaGFzIGEgc2VxdWVuY2UgbnVtYmVyIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdXBwZXIgYm91bmQgZm9yXG4gICAgICogdGhlIGNvbGxlY3Rpb24gcnVuLlxuICAgICAqLyAgICBlcihlLCB0KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfbXV0YXRpb25RdWV1ZXNDb250YWluS2V5KGUsIHQpIHtcbiAgICAgICAgICAgIGxldCBuID0gITE7XG4gICAgICAgICAgICByZXR1cm4gX19QUklWQVRFX211dGF0aW9uUXVldWVzU3RvcmUoZSkuWSgociA9PiBfX1BSSVZBVEVfbXV0YXRpb25RdWV1ZUNvbnRhaW5zS2V5KGUsIHIsIHQpLm5leHQoKGUgPT4gKGUgJiYgKG4gPSAhMCksIFxuICAgICAgICAgICAgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoIWUpKSkpKSkubmV4dCgoKCkgPT4gbikpO1xuICAgICAgICB9KGUsIHQpO1xuICAgIH1cbiAgICByZW1vdmVPcnBoYW5lZERvY3VtZW50cyhlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmRiLmdldFJlbW90ZURvY3VtZW50Q2FjaGUoKS5uZXdDaGFuZ2VCdWZmZXIoKSwgciA9IFtdO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLlhuKGUsICgocywgbykgPT4ge1xuICAgICAgICAgICAgaWYgKG8gPD0gdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVyKGUsIHMpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXQpIFxuICAgICAgICAgICAgICAgICAgICAvLyBPdXIgc2l6ZSBhY2NvdW50aW5nIHJlcXVpcmVzIHVzIHRvIHJlYWQgYWxsIGRvY3VtZW50cyBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZpbmcgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkrKywgbi5nZXRFbnRyeShlLCBzKS5uZXh0KCgoKSA9PiAobi5yZW1vdmVFbnRyeShzLCBTbmFwc2hvdFZlcnNpb24ubWluKCkpLCBcbiAgICAgICAgICAgICAgICAgICAgX19QUklWQVRFX2RvY3VtZW50VGFyZ2V0U3RvcmUoZSkuZGVsZXRlKGZ1bmN0aW9uIF9fUFJJVkFURV9zZW50aW5lbEtleSQxKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDAsIF9fUFJJVkFURV9lbmNvZGVSZXNvdXJjZVBhdGgoZS5wYXRoKSBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICogQHJldHVybnMgQSB2YWx1ZSBzdWl0YWJsZSBmb3Igd3JpdGluZyBhIHNlbnRpbmVsIHJvdyBpbiB0aGUgdGFyZ2V0LWRvY3VtZW50XG4gKiBzdG9yZS5cbiAqLyAocykpKSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICByLnB1c2godCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihyKSkpLm5leHQoKCgpID0+IG4uYXBwbHkoZSkpKS5uZXh0KCgoKSA9PiBpKSk7XG4gICAgfVxuICAgIHJlbW92ZVRhcmdldChlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0LndpdGhTZXF1ZW5jZU51bWJlcihlLmN1cnJlbnRTZXF1ZW5jZU51bWJlcik7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLmdldFRhcmdldENhY2hlKCkudXBkYXRlVGFyZ2V0RGF0YShlLCBuKTtcbiAgICB9XG4gICAgdXBkYXRlTGltYm9Eb2N1bWVudChlLCB0KSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfd3JpdGVTZW50aW5lbEtleShlLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbCBwcm92aWRlZCBmdW5jdGlvbiBmb3IgZWFjaCBkb2N1bWVudCBpbiB0aGUgY2FjaGUgdGhhdCBpcyAnb3JwaGFuZWQnLiBPcnBoYW5lZFxuICAgICAqIG1lYW5zIG5vdCBhIHBhcnQgb2YgYW55IHRhcmdldCwgc28gdGhlIG9ubHkgZW50cnkgaW4gdGhlIHRhcmdldC1kb2N1bWVudCBpbmRleCBmb3JcbiAgICAgKiB0aGF0IGRvY3VtZW50IHdpbGwgYmUgdGhlIHNlbnRpbmVsIHJvdyAodGFyZ2V0SWQgMCksIHdoaWNoIHdpbGwgYWxzbyBoYXZlIHRoZSBzZXF1ZW5jZVxuICAgICAqIG51bWJlciBmb3IgdGhlIGxhc3QgdGltZSB0aGUgZG9jdW1lbnQgd2FzIGFjY2Vzc2VkLlxuICAgICAqLyAgICBYbihlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZG9jdW1lbnRUYXJnZXRTdG9yZShlKTtcbiAgICAgICAgbGV0IHIsIGkgPSBfX1BSSVZBVEVfTGlzdGVuU2VxdWVuY2Uub2U7XG4gICAgICAgIHJldHVybiBuLkooe1xuICAgICAgICAgICAgaW5kZXg6IFwiZG9jdW1lbnRUYXJnZXRzSW5kZXhcIlxuICAgICAgICB9LCAoKFtlLCBuXSwge3BhdGg6IHMsIHNlcXVlbmNlTnVtYmVyOiBvfSkgPT4ge1xuICAgICAgICAgICAgMCA9PT0gZSA/IChcbiAgICAgICAgICAgIC8vIGlmIG5leHRUb1JlcG9ydCBpcyB2YWxpZCwgcmVwb3J0IGl0LCB0aGlzIGlzIGEgbmV3IGtleSBzbyB0aGVcbiAgICAgICAgICAgIC8vIGxhc3Qgb25lIG11c3Qgbm90IGJlIGEgbWVtYmVyIG9mIGFueSB0YXJnZXRzLlxuICAgICAgICAgICAgaSAhPT0gX19QUklWQVRFX0xpc3RlblNlcXVlbmNlLm9lICYmIHQobmV3IERvY3VtZW50S2V5KF9fUFJJVkFURV9kZWNvZGVSZXNvdXJjZVBhdGgocikpLCBpKSwgXG4gICAgICAgICAgICAvLyBzZXQgbmV4dFRvUmVwb3J0IHRvIGJlIHRoaXMgc2VxdWVuY2UgbnVtYmVyLiBJdCdzIHRoZSBuZXh0IG9uZSB3ZVxuICAgICAgICAgICAgLy8gbWlnaHQgcmVwb3J0LCBpZiB3ZSBkb24ndCBmaW5kIGFueSB0YXJnZXRzIGZvciB0aGlzIGRvY3VtZW50LlxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHRoZSBzZXF1ZW5jZSBudW1iZXIgbXVzdCBiZSBkZWZpbmVkIHdoZW4gdGhlIHRhcmdldElkXG4gICAgICAgICAgICAvLyBpcyAwLlxuICAgICAgICAgICAgaSA9IG8sIHIgPSBzKSA6IFxuICAgICAgICAgICAgLy8gc2V0IG5leHRUb1JlcG9ydCB0byBiZSBpbnZhbGlkLCB3ZSBrbm93IHdlIGRvbid0IG5lZWQgdG8gcmVwb3J0XG4gICAgICAgICAgICAvLyB0aGlzIG9uZSBzaW5jZSB3ZSBmb3VuZCBhIHRhcmdldCBmb3IgaXQuXG4gICAgICAgICAgICBpID0gX19QUklWQVRFX0xpc3RlblNlcXVlbmNlLm9lO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgLy8gU2luY2Ugd2UgcmVwb3J0IHNlcXVlbmNlIG51bWJlcnMgYWZ0ZXIgZ2V0dGluZyB0byB0aGUgbmV4dCBrZXksIHdlXG4gICAgICAgICAgICAvLyBuZWVkIHRvIGNoZWNrIGlmIHRoZSBsYXN0IGtleSB3ZSBpdGVyYXRlZCBvdmVyIHdhcyBhbiBvcnBoYW5lZFxuICAgICAgICAgICAgLy8gZG9jdW1lbnQgYW5kIHJlcG9ydCBpdC5cbiAgICAgICAgICAgIGkgIT09IF9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZS5vZSAmJiB0KG5ldyBEb2N1bWVudEtleShfX1BSSVZBVEVfZGVjb2RlUmVzb3VyY2VQYXRoKHIpKSwgaSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0Q2FjaGVTaXplKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIuZ2V0UmVtb3RlRG9jdW1lbnRDYWNoZSgpLmdldFNpemUoZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfd3JpdGVTZW50aW5lbEtleShlLCB0KSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9kb2N1bWVudFRhcmdldFN0b3JlKGUpLnB1dChmdW5jdGlvbiBfX1BSSVZBVEVfc2VudGluZWxSb3coZSwgdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGFyZ2V0SWQ6IDAsXG4gICAgICAgICAgICBwYXRoOiBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKGUucGF0aCksXG4gICAgICAgICAgICBzZXF1ZW5jZU51bWJlcjogdFxuICAgICAgICB9O1xuICAgIH0odCwgZS5jdXJyZW50U2VxdWVuY2VOdW1iZXIpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaW4tbWVtb3J5IGJ1ZmZlciBvZiBlbnRyaWVzIHRvIGJlIHdyaXR0ZW4gdG8gYSBSZW1vdGVEb2N1bWVudENhY2hlLlxuICogSXQgY2FuIGJlIHVzZWQgdG8gYmF0Y2ggdXAgYSBzZXQgb2YgY2hhbmdlcyB0byBiZSB3cml0dGVuIHRvIHRoZSBjYWNoZSwgYnV0XG4gKiBhZGRpdGlvbmFsbHkgc3VwcG9ydHMgcmVhZGluZyBlbnRyaWVzIGJhY2sgd2l0aCB0aGUgYGdldEVudHJ5KClgIG1ldGhvZCxcbiAqIGZhbGxpbmcgYmFjayB0byB0aGUgdW5kZXJseWluZyBSZW1vdGVEb2N1bWVudENhY2hlIGlmIG5vIGVudHJ5IGlzXG4gKiBidWZmZXJlZC5cbiAqXG4gKiBFbnRyaWVzIGFkZGVkIHRvIHRoZSBjYWNoZSAqbXVzdCogYmUgcmVhZCBmaXJzdC4gVGhpcyBpcyB0byBmYWNpbGl0YXRlXG4gKiBjYWxjdWxhdGluZyB0aGUgc2l6ZSBkZWx0YSBvZiB0aGUgcGVuZGluZyBjaGFuZ2VzLlxuICpcbiAqIFBPUlRJTkcgTk9URTogVGhpcyBjbGFzcyB3YXMgaW1wbGVtZW50ZWQgdGhlbiByZW1vdmVkIGZyb20gb3RoZXIgcGxhdGZvcm1zLlxuICogSWYgYnl0ZS1jb3VudGluZyBlbmRzIHVwIGJlaW5nIG5lZWRlZCBvbiB0aGUgb3RoZXIgcGxhdGZvcm1zLCBjb25zaWRlclxuICogcG9ydGluZyB0aGlzIGNsYXNzIGFzIHBhcnQgb2YgdGhhdCBpbXBsZW1lbnRhdGlvbiB3b3JrLlxuICovIGNsYXNzIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gQSBtYXBwaW5nIG9mIGRvY3VtZW50IGtleSB0byB0aGUgbmV3IGNhY2hlIGVudHJ5IHRoYXQgc2hvdWxkIGJlIHdyaXR0ZW4uXG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IG5ldyBPYmplY3RNYXAoKGUgPT4gZS50b1N0cmluZygpKSwgKChlLCB0KSA9PiBlLmlzRXF1YWwodCkpKSwgdGhpcy5jaGFuZ2VzQXBwbGllZCA9ICExO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCdWZmZXJzIGEgYFJlbW90ZURvY3VtZW50Q2FjaGUuYWRkRW50cnkoKWAgY2FsbC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gb25seSBtb2RpZnkgZG9jdW1lbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gcmV0cmlldmVkIHZpYVxuICAgICAqIGBnZXRFbnRyeSgpL2dldEVudHJpZXMoKWAgKGVuZm9yY2VkIHZpYSBJbmRleGVkRGJzIGBhcHBseSgpYCkuXG4gICAgICovICAgIGFkZEVudHJ5KGUpIHtcbiAgICAgICAgdGhpcy5hc3NlcnROb3RBcHBsaWVkKCksIHRoaXMuY2hhbmdlcy5zZXQoZS5rZXksIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCdWZmZXJzIGEgYFJlbW90ZURvY3VtZW50Q2FjaGUucmVtb3ZlRW50cnkoKWAgY2FsbC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gb25seSByZW1vdmUgZG9jdW1lbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gcmV0cmlldmVkIHZpYVxuICAgICAqIGBnZXRFbnRyeSgpL2dldEVudHJpZXMoKWAgKGVuZm9yY2VkIHZpYSBJbmRleGVkRGJzIGBhcHBseSgpYCkuXG4gICAgICovICAgIHJlbW92ZUVudHJ5KGUsIHQpIHtcbiAgICAgICAgdGhpcy5hc3NlcnROb3RBcHBsaWVkKCksIHRoaXMuY2hhbmdlcy5zZXQoZSwgTXV0YWJsZURvY3VtZW50Lm5ld0ludmFsaWREb2N1bWVudChlKS5zZXRSZWFkVGltZSh0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIGFuIGVudHJ5IGluIHRoZSBjYWNoZS4gVGhlIGJ1ZmZlcmVkIGNoYW5nZXMgd2lsbCBmaXJzdCBiZSBjaGVja2VkLFxuICAgICAqIGFuZCBpZiBubyBidWZmZXJlZCBjaGFuZ2UgYXBwbGllcywgdGhpcyB3aWxsIGZvcndhcmQgdG9cbiAgICAgKiBgUmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyeSgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiAtIFRoZSB0cmFuc2FjdGlvbiBpbiB3aGljaCB0byBwZXJmb3JtIGFueSBwZXJzaXN0ZW5jZVxuICAgICAqICAgICBvcGVyYXRpb25zLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleSAtIFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGxvb2sgdXAuXG4gICAgICogQHJldHVybnMgVGhlIGNhY2hlZCBkb2N1bWVudCBvciBhbiBpbnZhbGlkIGRvY3VtZW50IGlmIHdlIGhhdmUgbm90aGluZ1xuICAgICAqIGNhY2hlZC5cbiAgICAgKi8gICAgZ2V0RW50cnkoZSwgdCkge1xuICAgICAgICB0aGlzLmFzc2VydE5vdEFwcGxpZWQoKTtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuY2hhbmdlcy5nZXQodCk7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IG4gPyBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShuKSA6IHRoaXMuZ2V0RnJvbUNhY2hlKGUsIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBzZXZlcmFsIGVudHJpZXMgaW4gdGhlIGNhY2hlLCBmb3J3YXJkaW5nIHRvXG4gICAgICogYFJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0RW50cnkoKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gLSBUaGUgdHJhbnNhY3Rpb24gaW4gd2hpY2ggdG8gcGVyZm9ybSBhbnkgcGVyc2lzdGVuY2VcbiAgICAgKiAgICAgb3BlcmF0aW9ucy5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRLZXlzIC0gVGhlIGtleXMgb2YgdGhlIGVudHJpZXMgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyBBIG1hcCBvZiBjYWNoZWQgZG9jdW1lbnRzLCBpbmRleGVkIGJ5IGtleS4gSWYgYW4gZW50cnkgY2Fubm90IGJlXG4gICAgICogICAgIGZvdW5kLCB0aGUgY29ycmVzcG9uZGluZyBrZXkgd2lsbCBiZSBtYXBwZWQgdG8gYW4gaW52YWxpZCBkb2N1bWVudC5cbiAgICAgKi8gICAgZ2V0RW50cmllcyhlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFsbEZyb21DYWNoZShlLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBidWZmZXJlZCBjaGFuZ2VzIHRvIHRoZSB1bmRlcmx5aW5nIFJlbW90ZURvY3VtZW50Q2FjaGUsIHVzaW5nXG4gICAgICogdGhlIHByb3ZpZGVkIHRyYW5zYWN0aW9uLlxuICAgICAqLyAgICBhcHBseShlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2VydE5vdEFwcGxpZWQoKSwgdGhpcy5jaGFuZ2VzQXBwbGllZCA9ICEwLCB0aGlzLmFwcGx5Q2hhbmdlcyhlKTtcbiAgICB9XG4gICAgLyoqIEhlbHBlciB0byBhc3NlcnQgdGhpcy5jaGFuZ2VzIGlzIG5vdCBudWxsICAqLyAgICBhc3NlcnROb3RBcHBsaWVkKCkge31cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIFJlbW90ZURvY3VtZW50Q2FjaGUgZm9yIEluZGV4ZWREYi4gVG8gY29uc3RydWN0LCBpbnZva2VcbiAqIGBuZXdJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlKClgLlxuICovIGNsYXNzIF9fUFJJVkFURV9JbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLnNlcmlhbGl6ZXIgPSBlO1xuICAgIH1cbiAgICBzZXRJbmRleE1hbmFnZXIoZSkge1xuICAgICAgICB0aGlzLmluZGV4TWFuYWdlciA9IGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHN1cHBsaWVkIGVudHJpZXMgdG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQWxsIGNhbGxzIG9mIGBhZGRFbnRyeWAgYXJlIHJlcXVpcmVkIHRvIGdvIHRocm91Z2ggdGhlIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyXG4gICAgICogcmV0dXJuZWQgYnkgYG5ld0NoYW5nZUJ1ZmZlcigpYCB0byBlbnN1cmUgcHJvcGVyIGFjY291bnRpbmcgb2YgbWV0YWRhdGEuXG4gICAgICovICAgIGFkZEVudHJ5KGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9yZW1vdGVEb2N1bWVudHNTdG9yZShlKS5wdXQobik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBkb2N1bWVudCBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgcmVtb3ZlRW50cnlgICBhcmUgcmVxdWlyZWQgdG8gZ28gdGhyb3VnaCB0aGUgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXJcbiAgICAgKiByZXR1cm5lZCBieSBgbmV3Q2hhbmdlQnVmZmVyKClgIHRvIGVuc3VyZSBwcm9wZXIgYWNjb3VudGluZyBvZiBtZXRhZGF0YS5cbiAgICAgKi8gICAgcmVtb3ZlRW50cnkoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3JlbW90ZURvY3VtZW50c1N0b3JlKGUpLmRlbGV0ZShcbiAgICAgICAgLyoqXG4gKiBSZXR1cm5zIGEga2V5IHRoYXQgY2FuIGJlIHVzZWQgZm9yIGRvY3VtZW50IGxvb2t1cHMgdmlhIHRoZSBwcmltYXJ5IGtleSBvZlxuICogdGhlIERiUmVtb3RlRG9jdW1lbnQgb2JqZWN0IHN0b3JlLlxuICovXG4gICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9kYlJlYWRUaW1lS2V5KGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLnBhdGgudG9BcnJheSgpO1xuICAgICAgICAgICAgcmV0dXJuIFsgXG4gICAgICAgICAgICAvKiBwcmVmaXggcGF0aCAqLyBuLnNsaWNlKDAsIG4ubGVuZ3RoIC0gMiksIFxuICAgICAgICAgICAgLyogY29sbGVjdGlvbiBpZCAqLyBuW24ubGVuZ3RoIC0gMl0sIF9fUFJJVkFURV90b0RiVGltZXN0YW1wS2V5KHQpLCBcbiAgICAgICAgICAgIC8qIGRvY3VtZW50IGlkICovIG5bbi5sZW5ndGggLSAxXSBdO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogUmV0dXJucyBhIGtleSB0aGF0IGNhbiBiZSB1c2VkIGZvciBkb2N1bWVudCBsb29rdXBzIG9uIHRoZVxuICogYERiUmVtb3RlRG9jdW1lbnREb2N1bWVudENvbGxlY3Rpb25Hcm91cEluZGV4YCBpbmRleC5cbiAqLyAodCwgbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IGNhY2hlIHNpemUuXG4gICAgICpcbiAgICAgKiBDYWxsZXJzIHRvIGBhZGRFbnRyeSgpYCBhbmQgYHJlbW92ZUVudHJ5KClgICptdXN0KiBjYWxsIHRoaXMgYWZ0ZXJ3YXJkcyB0byB1cGRhdGUgdGhlXG4gICAgICogY2FjaGUncyBtZXRhZGF0YS5cbiAgICAgKi8gICAgdXBkYXRlTWV0YWRhdGEoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXRhZGF0YShlKS5uZXh0KChuID0+IChuLmJ5dGVTaXplICs9IHQsIHRoaXMudHIoZSwgbikpKSk7XG4gICAgfVxuICAgIGdldEVudHJ5KGUsIHQpIHtcbiAgICAgICAgbGV0IG4gPSBNdXRhYmxlRG9jdW1lbnQubmV3SW52YWxpZERvY3VtZW50KHQpO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3JlbW90ZURvY3VtZW50c1N0b3JlKGUpLkooe1xuICAgICAgICAgICAgaW5kZXg6IFwiZG9jdW1lbnRLZXlJbmRleFwiLFxuICAgICAgICAgICAgcmFuZ2U6IElEQktleVJhbmdlLm9ubHkoX19QUklWQVRFX2RiS2V5KHQpKVxuICAgICAgICB9LCAoKGUsIHIpID0+IHtcbiAgICAgICAgICAgIG4gPSB0aGlzLm5yKHQsIHIpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBhbiBlbnRyeSBpbiB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRLZXkgLSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIFRoZSBjYWNoZWQgZG9jdW1lbnQgZW50cnkgYW5kIGl0cyBzaXplLlxuICAgICAqLyAgICBycihlLCB0KSB7XG4gICAgICAgIGxldCBuID0ge1xuICAgICAgICAgICAgc2l6ZTogMCxcbiAgICAgICAgICAgIGRvY3VtZW50OiBNdXRhYmxlRG9jdW1lbnQubmV3SW52YWxpZERvY3VtZW50KHQpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfcmVtb3RlRG9jdW1lbnRzU3RvcmUoZSkuSih7XG4gICAgICAgICAgICBpbmRleDogXCJkb2N1bWVudEtleUluZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogSURCS2V5UmFuZ2Uub25seShfX1BSSVZBVEVfZGJLZXkodCkpXG4gICAgICAgIH0sICgoZSwgcikgPT4ge1xuICAgICAgICAgICAgbiA9IHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudDogdGhpcy5ucih0LCByKSxcbiAgICAgICAgICAgICAgICBzaXplOiBfX1BSSVZBVEVfZGJEb2N1bWVudFNpemUocilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIGdldEVudHJpZXMoZSwgdCkge1xuICAgICAgICBsZXQgbiA9IF9fUFJJVkFURV9tdXRhYmxlRG9jdW1lbnRNYXAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXIoZSwgdCwgKChlLCB0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5ucihlLCB0KTtcbiAgICAgICAgICAgIG4gPSBuLmluc2VydChlLCByKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IG4pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9va3MgdXAgc2V2ZXJhbCBlbnRyaWVzIGluIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleXMgLSBUaGUgc2V0IG9mIGtleXMgZW50cmllcyB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIEEgbWFwIG9mIGRvY3VtZW50cyBpbmRleGVkIGJ5IGtleSBhbmQgYSBtYXAgb2Ygc2l6ZXMgaW5kZXhlZCBieVxuICAgICAqICAgICBrZXkgKHplcm8gaWYgdGhlIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0KS5cbiAgICAgKi8gICAgc3IoZSwgdCkge1xuICAgICAgICBsZXQgbiA9IF9fUFJJVkFURV9tdXRhYmxlRG9jdW1lbnRNYXAoKSwgciA9IG5ldyBTb3J0ZWRNYXAoRG9jdW1lbnRLZXkuY29tcGFyYXRvcik7XG4gICAgICAgIHJldHVybiB0aGlzLmlyKGUsIHQsICgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMubnIoZSwgdCk7XG4gICAgICAgICAgICBuID0gbi5pbnNlcnQoZSwgaSksIHIgPSByLmluc2VydChlLCBfX1BSSVZBVEVfZGJEb2N1bWVudFNpemUodCkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gKHtcbiAgICAgICAgICAgIGRvY3VtZW50czogbixcbiAgICAgICAgICAgIF9yOiByXG4gICAgICAgIH0pKSk7XG4gICAgfVxuICAgIGlyKGUsIHQsIG4pIHtcbiAgICAgICAgaWYgKHQuaXNFbXB0eSgpKSByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgbGV0IHIgPSBuZXcgU29ydGVkU2V0KF9fUFJJVkFURV9kYktleUNvbXBhcmF0b3IpO1xuICAgICAgICB0LmZvckVhY2goKGUgPT4gciA9IHIuYWRkKGUpKSk7XG4gICAgICAgIGNvbnN0IGkgPSBJREJLZXlSYW5nZS5ib3VuZChfX1BSSVZBVEVfZGJLZXkoci5maXJzdCgpKSwgX19QUklWQVRFX2RiS2V5KHIubGFzdCgpKSksIHMgPSByLmdldEl0ZXJhdG9yKCk7XG4gICAgICAgIGxldCBvID0gcy5nZXROZXh0KCk7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfcmVtb3RlRG9jdW1lbnRzU3RvcmUoZSkuSih7XG4gICAgICAgICAgICBpbmRleDogXCJkb2N1bWVudEtleUluZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogaVxuICAgICAgICB9LCAoKGUsIHQsIHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBEb2N1bWVudEtleS5mcm9tU2VnbWVudHMoWyAuLi50LnByZWZpeFBhdGgsIHQuY29sbGVjdGlvbkdyb3VwLCB0LmRvY3VtZW50SWQgXSk7XG4gICAgICAgICAgICAvLyBHbyB0aHJvdWdoIGtleXMgbm90IGZvdW5kIGluIGNhY2hlLlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7byAmJiBfX1BSSVZBVEVfZGJLZXlDb21wYXJhdG9yKG8sIGkpIDwgMDsgKSBuKG8sIG51bGwpLCBvID0gcy5nZXROZXh0KCk7XG4gICAgICAgICAgICBvICYmIG8uaXNFcXVhbChpKSAmJiAoXG4gICAgICAgICAgICAvLyBLZXkgZm91bmQgaW4gY2FjaGUuXG4gICAgICAgICAgICBuKG8sIHQpLCBvID0gcy5oYXNOZXh0KCkgPyBzLmdldE5leHQoKSA6IG51bGwpLCBcbiAgICAgICAgICAgIC8vIFNraXAgdG8gdGhlIG5leHQga2V5IChpZiB0aGVyZSBpcyBvbmUpLlxuICAgICAgICAgICAgbyA/IHIuJChfX1BSSVZBVEVfZGJLZXkobykpIDogci5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBUaGUgcmVzdCBvZiB0aGUga2V5cyBhcmUgbm90IGluIHRoZSBjYWNoZS4gT25lIGNhc2Ugd2hlcmUgYGl0ZXJhdGVgXG4gICAgICAgICAgICAvLyBhYm92ZSB3b24ndCBnbyB0aHJvdWdoIHRoZW0gaXMgd2hlbiB0aGUgY2FjaGUgaXMgZW1wdHkuXG4gICAgICAgICAgICBmb3IgKDtvOyApIG4obywgbnVsbCksIG8gPSBzLmhhc05leHQoKSA/IHMuZ2V0TmV4dCgpIDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgY29uc3QgcyA9IHQucGF0aCwgbyA9IFsgcy5wb3BMYXN0KCkudG9BcnJheSgpLCBzLmxhc3RTZWdtZW50KCksIF9fUFJJVkFURV90b0RiVGltZXN0YW1wS2V5KG4ucmVhZFRpbWUpLCBuLmRvY3VtZW50S2V5LnBhdGguaXNFbXB0eSgpID8gXCJcIiA6IG4uZG9jdW1lbnRLZXkucGF0aC5sYXN0U2VnbWVudCgpIF0sIF8gPSBbIHMucG9wTGFzdCgpLnRvQXJyYXkoKSwgcy5sYXN0U2VnbWVudCgpLCBbIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiBdLCBcIlwiIF07XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfcmVtb3RlRG9jdW1lbnRzU3RvcmUoZSkuVShJREJLZXlSYW5nZS5ib3VuZChvLCBfLCAhMCkpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgbnVsbCA9PSBpIHx8IGkuaW5jcmVtZW50RG9jdW1lbnRSZWFkQ291bnQoZS5sZW5ndGgpO1xuICAgICAgICAgICAgbGV0IG4gPSBfX1BSSVZBVEVfbXV0YWJsZURvY3VtZW50TWFwKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLm5yKERvY3VtZW50S2V5LmZyb21TZWdtZW50cyhpLnByZWZpeFBhdGguY29uY2F0KGkuY29sbGVjdGlvbkdyb3VwLCBpLmRvY3VtZW50SWQpKSwgaSk7XG4gICAgICAgICAgICAgICAgZS5pc0ZvdW5kRG9jdW1lbnQoKSAmJiAoX19QUklWQVRFX3F1ZXJ5TWF0Y2hlcyh0LCBlKSB8fCByLmhhcyhlLmtleSkpICYmIChcbiAgICAgICAgICAgICAgICAvLyBFaXRoZXIgdGhlIGRvY3VtZW50IG1hdGNoZXMgdGhlIGdpdmVuIHF1ZXJ5LCBvciBpdCBpcyBtdXRhdGVkLlxuICAgICAgICAgICAgICAgIG4gPSBuLmluc2VydChlLmtleSwgZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0QWxsRnJvbUNvbGxlY3Rpb25Hcm91cChlLCB0LCBuLCByKSB7XG4gICAgICAgIGxldCBpID0gX19QUklWQVRFX211dGFibGVEb2N1bWVudE1hcCgpO1xuICAgICAgICBjb25zdCBzID0gX19QUklWQVRFX2RiQ29sbGVjdGlvbkdyb3VwS2V5KHQsIG4pLCBvID0gX19QUklWQVRFX2RiQ29sbGVjdGlvbkdyb3VwS2V5KHQsIEluZGV4T2Zmc2V0Lm1heCgpKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9yZW1vdGVEb2N1bWVudHNTdG9yZShlKS5KKHtcbiAgICAgICAgICAgIGluZGV4OiBcImNvbGxlY3Rpb25Hcm91cEluZGV4XCIsXG4gICAgICAgICAgICByYW5nZTogSURCS2V5UmFuZ2UuYm91bmQocywgbywgITApXG4gICAgICAgIH0sICgoZSwgdCwgbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMubnIoRG9jdW1lbnRLZXkuZnJvbVNlZ21lbnRzKHQucHJlZml4UGF0aC5jb25jYXQodC5jb2xsZWN0aW9uR3JvdXAsIHQuZG9jdW1lbnRJZCkpLCB0KTtcbiAgICAgICAgICAgIGkgPSBpLmluc2VydChzLmtleSwgcyksIGkuc2l6ZSA9PT0gciAmJiBuLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IGkpKTtcbiAgICB9XG4gICAgbmV3Q2hhbmdlQnVmZmVyKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIodGhpcywgISFlICYmIGUudHJhY2tSZW1vdmFscyk7XG4gICAgfVxuICAgIGdldFNpemUoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXRhZGF0YShlKS5uZXh0KChlID0+IGUuYnl0ZVNpemUpKTtcbiAgICB9XG4gICAgZ2V0TWV0YWRhdGEoZSkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX2RvY3VtZW50R2xvYmFsU3RvcmUoZSkuZ2V0KFwicmVtb3RlRG9jdW1lbnRHbG9iYWxLZXlcIikubmV4dCgoZSA9PiAoX19QUklWQVRFX2hhcmRBc3NlcnQoISFlKSwgXG4gICAgICAgIGUpKSk7XG4gICAgfVxuICAgIHRyKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9kb2N1bWVudEdsb2JhbFN0b3JlKGUpLnB1dChcInJlbW90ZURvY3VtZW50R2xvYmFsS2V5XCIsIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGBkYlJlbW90ZURvY2AgYW5kIHJldHVybnMgdGhlIGRvY3VtZW50IChvciBhbiBpbnZhbGlkIGRvY3VtZW50IGlmXG4gICAgICogdGhlIGRvY3VtZW50IGNvcnJlc3BvbmRzIHRvIHRoZSBmb3JtYXQgdXNlZCBmb3Igc2VudGluZWwgZGVsZXRlcykuXG4gICAgICovICAgIG5yKGUsIHQpIHtcbiAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBfX1BSSVZBVEVfZnJvbURiUmVtb3RlRG9jdW1lbnQodGhpcy5zZXJpYWxpemVyLCB0KTtcbiAgICAgICAgICAgIC8vIFdoZXRoZXIgdGhlIGRvY3VtZW50IGlzIGEgc2VudGluZWwgcmVtb3ZhbCBhbmQgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGBnZXROZXdEb2N1bWVudENoYW5nZXMoKWBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGUuaXNOb0RvY3VtZW50KCkgJiYgZS52ZXJzaW9uLmlzRXF1YWwoU25hcHNob3RWZXJzaW9uLm1pbigpKSkpIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNdXRhYmxlRG9jdW1lbnQubmV3SW52YWxpZERvY3VtZW50KGUpO1xuICAgIH1cbn1cblxuLyoqIENyZWF0ZXMgYSBuZXcgSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZS4gKi8gZnVuY3Rpb24gX19QUklWQVRFX25ld0luZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUoZSkge1xuICAgIHJldHVybiBuZXcgX19QUklWQVRFX0luZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGVJbXBsKGUpO1xufVxuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGRldGFpbHMgb2YgYWRkaW5nIGFuZCB1cGRhdGluZyBkb2N1bWVudHMgaW4gdGhlIEluZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUuXG4gKlxuICogVW5saWtlIHRoZSBNZW1vcnlSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlciwgdGhlIEluZGV4ZWREYiBpbXBsZW1lbnRhdGlvbiBjb21wdXRlcyB0aGUgc2l6ZVxuICogZGVsdGEgZm9yIGFsbCBzdWJtaXR0ZWQgY2hhbmdlcy4gVGhpcyBhdm9pZHMgaGF2aW5nIHRvIHJlLXJlYWQgYWxsIGRvY3VtZW50cyBmcm9tIEluZGV4ZWREYlxuICogd2hlbiB3ZSBhcHBseSB0aGUgY2hhbmdlcy5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIgZXh0ZW5kcyBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRvY3VtZW50Q2FjaGUgLSBUaGUgSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZSB0byBhcHBseSB0aGUgY2hhbmdlcyB0by5cbiAgICAgKiBAcGFyYW0gdHJhY2tSZW1vdmFscyAtIFdoZXRoZXIgdG8gY3JlYXRlIHNlbnRpbmVsIGRlbGV0ZXMgdGhhdCBjYW4gYmUgdHJhY2tlZCBieVxuICAgICAqIGBnZXROZXdEb2N1bWVudENoYW5nZXMoKWAuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcigpLCB0aGlzLmFyID0gZSwgdGhpcy50cmFja1JlbW92YWxzID0gdCwgXG4gICAgICAgIC8vIEEgbWFwIG9mIGRvY3VtZW50IHNpemVzIGFuZCByZWFkIHRpbWVzIHByaW9yIHRvIGFwcGx5aW5nIHRoZSBjaGFuZ2VzIGluXG4gICAgICAgIC8vIHRoaXMgYnVmZmVyLlxuICAgICAgICB0aGlzLnVyID0gbmV3IE9iamVjdE1hcCgoZSA9PiBlLnRvU3RyaW5nKCkpLCAoKGUsIHQpID0+IGUuaXNFcXVhbCh0KSkpO1xuICAgIH1cbiAgICBhcHBseUNoYW5nZXMoZSkge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIGxldCBuID0gMCwgciA9IG5ldyBTb3J0ZWRTZXQoKChlLCB0KSA9PiBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcihlLmNhbm9uaWNhbFN0cmluZygpLCB0LmNhbm9uaWNhbFN0cmluZygpKSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFuZ2VzLmZvckVhY2goKChpLCBzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvID0gdGhpcy51ci5nZXQoaSk7XG4gICAgICAgICAgICBpZiAodC5wdXNoKHRoaXMuYXIucmVtb3ZlRW50cnkoZSwgaSwgby5yZWFkVGltZSkpLCBzLmlzVmFsaWREb2N1bWVudCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgXyA9IF9fUFJJVkFURV90b0RiUmVtb3RlRG9jdW1lbnQodGhpcy5hci5zZXJpYWxpemVyLCBzKTtcbiAgICAgICAgICAgICAgICByID0gci5hZGQoaS5wYXRoLnBvcExhc3QoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IF9fUFJJVkFURV9kYkRvY3VtZW50U2l6ZShfKTtcbiAgICAgICAgICAgICAgICBuICs9IGEgLSBvLnNpemUsIHQucHVzaCh0aGlzLmFyLmFkZEVudHJ5KGUsIGksIF8pKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobiAtPSBvLnNpemUsIHRoaXMudHJhY2tSZW1vdmFscykge1xuICAgICAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIHRyYWNrIHJlbW92YWxzLCB3ZSBzdG9yZSBhIFwic2VudGluZWwgZGVsZXRlXCIgaW4gdGhlXG4gICAgICAgICAgICAgICAgLy8gUmVtb3RlRG9jdW1lbnRDYWNoZS4gVGhpcyBlbnRyeSBpcyByZXByZXNlbnRlZCBieSBhIE5vRG9jdW1lbnRcbiAgICAgICAgICAgICAgICAvLyB3aXRoIGEgdmVyc2lvbiBvZiAwIGFuZCBpZ25vcmVkIGJ5IGBtYXliZURlY29kZURvY3VtZW50KClgIGJ1dFxuICAgICAgICAgICAgICAgIC8vIHByZXNlcnZlZCBpbiBgZ2V0TmV3RG9jdW1lbnRDaGFuZ2VzKClgLlxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfdG9EYlJlbW90ZURvY3VtZW50KHRoaXMuYXIuc2VyaWFsaXplciwgcy5jb252ZXJ0VG9Ob0RvY3VtZW50KFNuYXBzaG90VmVyc2lvbi5taW4oKSkpO1xuICAgICAgICAgICAgICAgIHQucHVzaCh0aGlzLmFyLmFkZEVudHJ5KGUsIGksIG4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCByLmZvckVhY2goKG4gPT4ge1xuICAgICAgICAgICAgdC5wdXNoKHRoaXMuYXIuaW5kZXhNYW5hZ2VyLmFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KGUsIG4pKTtcbiAgICAgICAgfSkpLCB0LnB1c2godGhpcy5hci51cGRhdGVNZXRhZGF0YShlLCBuKSksIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHQpO1xuICAgIH1cbiAgICBnZXRGcm9tQ2FjaGUoZSwgdCkge1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHNpemUgb2YgZXZlcnl0aGluZyB3ZSBsb2FkIGZyb20gdGhlIGNhY2hlIHNvIHdlIGNhbiBjb21wdXRlIGEgZGVsdGEgbGF0ZXIuXG4gICAgICAgIHJldHVybiB0aGlzLmFyLnJyKGUsIHQpLm5leHQoKGUgPT4gKHRoaXMudXIuc2V0KHQsIHtcbiAgICAgICAgICAgIHNpemU6IGUuc2l6ZSxcbiAgICAgICAgICAgIHJlYWRUaW1lOiBlLmRvY3VtZW50LnJlYWRUaW1lXG4gICAgICAgIH0pLCBlLmRvY3VtZW50KSkpO1xuICAgIH1cbiAgICBnZXRBbGxGcm9tQ2FjaGUoZSwgdCkge1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHNpemUgb2YgZXZlcnl0aGluZyB3ZSBsb2FkIGZyb20gdGhlIGNhY2hlIHNvIHdlIGNhbiBjb21wdXRlXG4gICAgICAgIC8vIGEgZGVsdGEgbGF0ZXIuXG4gICAgICAgIHJldHVybiB0aGlzLmFyLnNyKGUsIHQpLm5leHQoKCh7ZG9jdW1lbnRzOiBlLCBfcjogdH0pID0+IChcbiAgICAgICAgLy8gTm90ZTogYGdldEFsbEZyb21DYWNoZWAgcmV0dXJucyB0d28gbWFwcyBpbnN0ZWFkIG9mIGEgc2luZ2xlIG1hcCBmcm9tXG4gICAgICAgIC8vIGtleXMgdG8gYERvY3VtZW50U2l6ZUVudHJ5YHMuIFRoaXMgaXMgdG8gYWxsb3cgcmV0dXJuaW5nIHRoZVxuICAgICAgICAvLyBgTXV0YWJsZURvY3VtZW50TWFwYCBkaXJlY3RseSwgd2l0aG91dCBhIGNvbnZlcnNpb24uXG4gICAgICAgIHQuZm9yRWFjaCgoKHQsIG4pID0+IHtcbiAgICAgICAgICAgIHRoaXMudXIuc2V0KHQsIHtcbiAgICAgICAgICAgICAgICBzaXplOiBuLFxuICAgICAgICAgICAgICAgIHJlYWRUaW1lOiBlLmdldCh0KS5yZWFkVGltZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKSwgZSkpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9kb2N1bWVudEdsb2JhbFN0b3JlKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2dldFN0b3JlKGUsIFwicmVtb3RlRG9jdW1lbnRHbG9iYWxcIik7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSByZW1vdGVEb2N1bWVudHMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9yZW1vdGVEb2N1bWVudHNTdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9nZXRTdG9yZShlLCBcInJlbW90ZURvY3VtZW50c1YxNFwiKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEga2V5IHRoYXQgY2FuIGJlIHVzZWQgZm9yIGRvY3VtZW50IGxvb2t1cHMgb24gdGhlXG4gKiBgRGJSZW1vdGVEb2N1bWVudERvY3VtZW50S2V5SW5kZXhgIGluZGV4LlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9kYktleShlKSB7XG4gICAgY29uc3QgdCA9IGUucGF0aC50b0FycmF5KCk7XG4gICAgcmV0dXJuIFsgXG4gICAgLyogcHJlZml4IHBhdGggKi8gdC5zbGljZSgwLCB0Lmxlbmd0aCAtIDIpLCBcbiAgICAvKiBjb2xsZWN0aW9uIGlkICovIHRbdC5sZW5ndGggLSAyXSwgXG4gICAgLyogZG9jdW1lbnQgaWQgKi8gdFt0Lmxlbmd0aCAtIDFdIF07XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9kYkNvbGxlY3Rpb25Hcm91cEtleShlLCB0KSB7XG4gICAgY29uc3QgbiA9IHQuZG9jdW1lbnRLZXkucGF0aC50b0FycmF5KCk7XG4gICAgcmV0dXJuIFsgXG4gICAgLyogY29sbGVjdGlvbiBpZCAqLyBlLCBfX1BSSVZBVEVfdG9EYlRpbWVzdGFtcEtleSh0LnJlYWRUaW1lKSwgXG4gICAgLyogcHJlZml4IHBhdGggKi8gbi5zbGljZSgwLCBuLmxlbmd0aCAtIDIpLCBcbiAgICAvKiBkb2N1bWVudCBpZCAqLyBuLmxlbmd0aCA+IDAgPyBuW24ubGVuZ3RoIC0gMV0gOiBcIlwiIF07XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciB0aGF0IGNvbXBhcmVzIGRvY3VtZW50IGtleXMgYWNjb3JkaW5nIHRvIHRoZSBwcmltYXJ5IGtleSBzb3J0aW5nXG4gKiB1c2VkIGJ5IHRoZSBgRGJSZW1vdGVEb2N1bWVudERvY3VtZW50YCBzdG9yZSAoYnkgcHJlZml4IHBhdGgsIGNvbGxlY3Rpb24gaWRcbiAqIGFuZCB0aGVuIGRvY3VtZW50IElEKS5cbiAqXG4gKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9kYktleUNvbXBhcmF0b3IoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBlLnBhdGgudG9BcnJheSgpLCByID0gdC5wYXRoLnRvQXJyYXkoKTtcbiAgICAvLyBUaGUgb3JkZXJpbmcgaXMgYmFzZWQgb24gaHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL2JsaW5rLysvZmU1YzIxZmVmOTRkYWU3MWMxYzMzNDQ3NzViOGQ4YTdmN2U2ZDllYy9Tb3VyY2UvbW9kdWxlcy9pbmRleGVkZGIvSURCS2V5LmNwcCM3NFxuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGxldCBlID0gMDsgZSA8IG4ubGVuZ3RoIC0gMiAmJiBlIDwgci5sZW5ndGggLSAyOyArK2UpIGlmIChpID0gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IobltlXSwgcltlXSksIFxuICAgIGkpIHJldHVybiBpO1xuICAgIHJldHVybiBpID0gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3Iobi5sZW5ndGgsIHIubGVuZ3RoKSwgaSB8fCAoaSA9IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKG5bbi5sZW5ndGggLSAyXSwgcltyLmxlbmd0aCAtIDJdKSwgXG4gICAgaSB8fCBfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcihuW24ubGVuZ3RoIC0gMV0sIHJbci5sZW5ndGggLSAxXSkpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBTY2hlbWEgVmVyc2lvbiBmb3IgdGhlIFdlYiBjbGllbnQ6XG4gKiAxLiAgSW5pdGlhbCB2ZXJzaW9uIGluY2x1ZGluZyBNdXRhdGlvbiBRdWV1ZSwgUXVlcnkgQ2FjaGUsIGFuZCBSZW1vdGVcbiAqICAgICBEb2N1bWVudCBDYWNoZVxuICogMi4gIFVzZWQgdG8gZW5zdXJlIGEgdGFyZ2V0R2xvYmFsIG9iamVjdCBleGlzdHMgYW5kIGFkZCB0YXJnZXRDb3VudCB0byBpdC4gTm9cbiAqICAgICBsb25nZXIgcmVxdWlyZWQgYmVjYXVzZSBtaWdyYXRpb24gMyB1bmNvbmRpdGlvbmFsbHkgY2xlYXJzIGl0LlxuICogMy4gIERyb3BwZWQgYW5kIHJlLWNyZWF0ZWQgUXVlcnkgQ2FjaGUgdG8gZGVhbCB3aXRoIGNhY2hlIGNvcnJ1cHRpb24gcmVsYXRlZFxuICogICAgIHRvIGxpbWJvIHJlc29sdXRpb24uIEFkZHJlc3Nlc1xuICogICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1pb3Mtc2RrL2lzc3Vlcy8xNTQ4XG4gKiA0LiAgTXVsdGktVGFiIFN1cHBvcnQuXG4gKiA1LiAgUmVtb3ZhbCBvZiBoZWxkIHdyaXRlIGFja3MuXG4gKiA2LiAgQ3JlYXRlIGRvY3VtZW50IGdsb2JhbCBmb3IgdHJhY2tpbmcgZG9jdW1lbnQgY2FjaGUgc2l6ZS5cbiAqIDcuICBFbnN1cmUgZXZlcnkgY2FjaGVkIGRvY3VtZW50IGhhcyBhIHNlbnRpbmVsIHJvdyB3aXRoIGEgc2VxdWVuY2UgbnVtYmVyLlxuICogOC4gIEFkZCBjb2xsZWN0aW9uLXBhcmVudCBpbmRleCBmb3IgQ29sbGVjdGlvbiBHcm91cCBxdWVyaWVzLlxuICogOS4gIENoYW5nZSBSZW1vdGVEb2N1bWVudENoYW5nZXMgc3RvcmUgdG8gYmUga2V5ZWQgYnkgcmVhZFRpbWUgcmF0aGVyIHRoYW5cbiAqICAgICBhbiBhdXRvLWluY3JlbWVudGluZyBJRC4gVGhpcyBpcyByZXF1aXJlZCBmb3IgSW5kZXgtRnJlZSBxdWVyaWVzLlxuICogMTAuIFJld3JpdGUgdGhlIGNhbm9uaWNhbCBJRHMgdG8gdGhlIGV4cGxpY2l0IFByb3RvYnVmLWJhc2VkIGZvcm1hdC5cbiAqIDExLiBBZGQgYnVuZGxlcyBhbmQgbmFtZWRfcXVlcmllcyBmb3IgYnVuZGxlIHN1cHBvcnQuXG4gKiAxMi4gQWRkIGRvY3VtZW50IG92ZXJsYXlzLlxuICogMTMuIFJld3JpdGUgdGhlIGtleXMgb2YgdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZSB0byBhbGxvdyBmb3IgZWZmaWNpZW50XG4gKiAgICAgZG9jdW1lbnQgbG9va3VwIHZpYSBgZ2V0QWxsKClgLlxuICogMTQuIEFkZCBvdmVybGF5cy5cbiAqIDE1LiBBZGQgaW5kZXhpbmcgc3VwcG9ydC5cbiAqIDE2LiBQYXJzZSB0aW1lc3RhbXAgc3RyaW5ncyBiZWZvcmUgY3JlYXRpbmcgaW5kZXggZW50cmllcy5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIGxvY2FsIHZpZXcgKG92ZXJsYXkpIG9mIGEgZG9jdW1lbnQsIGFuZCB0aGUgZmllbGRzIHRoYXQgYXJlXG4gKiBsb2NhbGx5IG11dGF0ZWQuXG4gKi9cbmNsYXNzIE92ZXJsYXllZERvY3VtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgZmllbGRzIHRoYXQgYXJlIGxvY2FsbHkgbXV0YXRlZCBieSBwYXRjaCBtdXRhdGlvbnMuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgb3ZlcmxheWVkXHRkb2N1bWVudCBpcyBmcm9tIHNldCBvciBkZWxldGUgbXV0YXRpb25zLCB0aGlzIGlzIGBudWxsYC5cbiAgICAgKiBJZiB0aGVyZSBpcyBubyBvdmVybGF5IChtdXRhdGlvbikgZm9yIHRoZSBkb2N1bWVudCwgdGhpcyBpcyBhbiBlbXB0eSBgRmllbGRNYXNrYC5cbiAgICAgKi9cbiAgICB0KSB7XG4gICAgICAgIHRoaXMub3ZlcmxheWVkRG9jdW1lbnQgPSBlLCB0aGlzLm11dGF0ZWRGaWVsZHMgPSB0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSByZWFkb25seSB2aWV3IG9mIHRoZSBsb2NhbCBzdGF0ZSBvZiBhbGwgZG9jdW1lbnRzIHdlJ3JlIHRyYWNraW5nIChpLmUuIHdlXG4gKiBoYXZlIGEgY2FjaGVkIHZlcnNpb24gaW4gcmVtb3RlRG9jdW1lbnRDYWNoZSBvciBsb2NhbCBtdXRhdGlvbnMgZm9yIHRoZVxuICogZG9jdW1lbnQpLiBUaGUgdmlldyBpcyBjb21wdXRlZCBieSBhcHBseWluZyB0aGUgbXV0YXRpb25zIGluIHRoZVxuICogTXV0YXRpb25RdWV1ZSB0byB0aGUgUmVtb3RlRG9jdW1lbnRDYWNoZS5cbiAqLyBjbGFzcyBMb2NhbERvY3VtZW50c1ZpZXcge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlID0gZSwgdGhpcy5tdXRhdGlvblF1ZXVlID0gdCwgdGhpcy5kb2N1bWVudE92ZXJsYXlDYWNoZSA9IG4sIFxuICAgICAgICB0aGlzLmluZGV4TWFuYWdlciA9IHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbG9jYWwgdmlldyBvZiB0aGUgZG9jdW1lbnQgaWRlbnRpZmllZCBieSBga2V5YC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIExvY2FsIHZpZXcgb2YgdGhlIGRvY3VtZW50IG9yIG51bGwgaWYgd2UgZG9uJ3QgaGF2ZSBhbnkgY2FjaGVkXG4gICAgICogc3RhdGUgZm9yIGl0LlxuICAgICAqLyAgICBnZXREb2N1bWVudChlLCB0KSB7XG4gICAgICAgIGxldCBuID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRPdmVybGF5Q2FjaGUuZ2V0T3ZlcmxheShlLCB0KS5uZXh0KChyID0+IChuID0gciwgdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmdldEVudHJ5KGUsIHQpKSkpLm5leHQoKGUgPT4gKG51bGwgIT09IG4gJiYgX19QUklWQVRFX211dGF0aW9uQXBwbHlUb0xvY2FsVmlldyhuLm11dGF0aW9uLCBlLCBGaWVsZE1hc2suZW1wdHkoKSwgVGltZXN0YW1wLm5vdygpKSwgXG4gICAgICAgIGUpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxvY2FsIHZpZXcgb2YgdGhlIGRvY3VtZW50cyBpZGVudGlmaWVkIGJ5IGBrZXlzYC5cbiAgICAgKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgY2FjaGVkIHN0YXRlIGZvciBhIGRvY3VtZW50IGluIGBrZXlzYCwgYSBOb0RvY3VtZW50IHdpbGxcbiAgICAgKiBiZSBzdG9yZWQgZm9yIHRoYXQga2V5IGluIHRoZSByZXN1bHRpbmcgc2V0LlxuICAgICAqLyAgICBnZXREb2N1bWVudHMoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmdldEVudHJpZXMoZSwgdCkubmV4dCgodCA9PiB0aGlzLmdldExvY2FsVmlld09mRG9jdW1lbnRzKGUsIHQsIF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpKS5uZXh0KCgoKSA9PiB0KSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2ltaWxhciB0byBgZ2V0RG9jdW1lbnRzYCwgYnV0IGNyZWF0ZXMgdGhlIGxvY2FsIHZpZXcgZnJvbSB0aGUgZ2l2ZW5cbiAgICAgKiBgYmFzZURvY3NgIHdpdGhvdXQgcmV0cmlldmluZyBkb2N1bWVudHMgZnJvbSB0aGUgbG9jYWwgc3RvcmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gLSBUaGUgdHJhbnNhY3Rpb24gdGhpcyBvcGVyYXRpb24gaXMgc2NvcGVkIHRvLlxuICAgICAqIEBwYXJhbSBkb2NzIC0gVGhlIGRvY3VtZW50cyB0byBhcHBseSBsb2NhbCBtdXRhdGlvbnMgdG8gZ2V0IHRoZSBsb2NhbCB2aWV3cy5cbiAgICAgKiBAcGFyYW0gZXhpc3RlbmNlU3RhdGVDaGFuZ2VkIC0gVGhlIHNldCBvZiBkb2N1bWVudCBrZXlzIHdob3NlIGV4aXN0ZW5jZSBzdGF0ZVxuICAgICAqICAgaXMgY2hhbmdlZC4gVGhpcyBpcyB1c2VmdWwgdG8gZGV0ZXJtaW5lIGlmIHNvbWUgZG9jdW1lbnRzIG92ZXJsYXkgbmVlZHNcbiAgICAgKiAgIHRvIGJlIHJlY2FsY3VsYXRlZC5cbiAgICAgKi8gICAgZ2V0TG9jYWxWaWV3T2ZEb2N1bWVudHMoZSwgdCwgbiA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpKSB7XG4gICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfbmV3T3ZlcmxheU1hcCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wb3B1bGF0ZU92ZXJsYXlzKGUsIHIsIHQpLm5leHQoKCgpID0+IHRoaXMuY29tcHV0ZVZpZXdzKGUsIHQsIHIsIG4pLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgbGV0IHQgPSBkb2N1bWVudE1hcCgpO1xuICAgICAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoKGUsIG4pID0+IHtcbiAgICAgICAgICAgICAgICB0ID0gdC5pbnNlcnQoZSwgbi5vdmVybGF5ZWREb2N1bWVudCk7XG4gICAgICAgICAgICB9KSksIHQ7XG4gICAgICAgIH0pKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBvdmVybGF5ZWQgZG9jdW1lbnRzIGZvciB0aGUgZ2l2ZW4gZG9jdW1lbnQgbWFwLCB3aGljaCB3aWxsIGluY2x1ZGVcbiAgICAgKiB0aGUgbG9jYWwgdmlldyBvZiB0aG9zZSBkb2N1bWVudHMgYW5kIGEgYEZpZWxkTWFza2AgaW5kaWNhdGluZyB3aGljaCBmaWVsZHNcbiAgICAgKiBhcmUgbXV0YXRlZCBsb2NhbGx5LCBgbnVsbGAgaWYgb3ZlcmxheSBpcyBhIFNldCBvciBEZWxldGUgbXV0YXRpb24uXG4gICAgICovICAgIGdldE92ZXJsYXllZERvY3VtZW50cyhlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfbmV3T3ZlcmxheU1hcCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wb3B1bGF0ZU92ZXJsYXlzKGUsIG4sIHQpLm5leHQoKCgpID0+IHRoaXMuY29tcHV0ZVZpZXdzKGUsIHQsIG4sIF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBvdmVybGF5cyBmb3Ige0Bjb2RlIGRvY3N9IGFuZCBhZGRzIHRoZW0gdG8gcHJvdmlkZWQgb3ZlcmxheSBtYXBcbiAgICAgKiBpZiB0aGUgbWFwIGRvZXMgbm90IGFscmVhZHkgY29udGFpbiBhbiBlbnRyeSBmb3IgdGhlIGdpdmVuIGRvY3VtZW50IGtleS5cbiAgICAgKi8gICAgcG9wdWxhdGVPdmVybGF5cyhlLCB0LCBuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBbXTtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0LmhhcyhlKSB8fCByLnB1c2goZSk7XG4gICAgICAgIH0pKSwgdGhpcy5kb2N1bWVudE92ZXJsYXlDYWNoZS5nZXRPdmVybGF5cyhlLCByKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGUuZm9yRWFjaCgoKGUsIG4pID0+IHtcbiAgICAgICAgICAgICAgICB0LnNldChlLCBuKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbG9jYWwgdmlldyBmb3IgdGhlIGdpdmVuIGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2NzIC0gVGhlIGRvY3VtZW50cyB0byBjb21wdXRlIHZpZXdzIGZvci4gSXQgYWxzbyBoYXMgdGhlIGJhc2VcbiAgICAgKiAgIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gb3ZlcmxheXMgLSBUaGUgb3ZlcmxheXMgdGhhdCBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGdpdmVuIGJhc2VcbiAgICAgKiAgIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gZXhpc3RlbmNlU3RhdGVDaGFuZ2VkIC0gQSBzZXQgb2YgZG9jdW1lbnRzIHdob3NlIGV4aXN0ZW5jZSBzdGF0ZXNcbiAgICAgKiAgIG1pZ2h0IGhhdmUgY2hhbmdlZC4gVGhpcyBpcyB1c2VkIHRvIGRldGVybWluZSBpZiB3ZSBuZWVkIHRvIHJlLWNhbGN1bGF0ZVxuICAgICAqICAgb3ZlcmxheXMgZnJvbSBtdXRhdGlvbiBxdWV1ZXMuXG4gICAgICogQHJldHVybiBBIG1hcCByZXByZXNlbnRzIHRoZSBsb2NhbCBkb2N1bWVudHMgdmlldy5cbiAgICAgKi8gICAgY29tcHV0ZVZpZXdzKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgbGV0IGkgPSBfX1BSSVZBVEVfbXV0YWJsZURvY3VtZW50TWFwKCk7XG4gICAgICAgIGNvbnN0IHMgPSBfX1BSSVZBVEVfbmV3RG9jdW1lbnRLZXlNYXAoKSwgbyA9IGZ1bmN0aW9uIF9fUFJJVkFURV9uZXdPdmVybGF5ZWREb2N1bWVudE1hcCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX1BSSVZBVEVfbmV3RG9jdW1lbnRLZXlNYXAoKTtcbiAgICAgICAgfSgpO1xuICAgICAgICByZXR1cm4gdC5mb3JFYWNoKCgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbyA9IG4uZ2V0KHQua2V5KTtcbiAgICAgICAgICAgIC8vIFJlY2FsY3VsYXRlIGFuIG92ZXJsYXkgaWYgdGhlIGRvY3VtZW50J3MgZXhpc3RlbmNlIHN0YXRlIGNoYW5nZWQgZHVlIHRvXG4gICAgICAgICAgICAvLyBhIHJlbW90ZSBldmVudCAqYW5kKiB0aGUgb3ZlcmxheSBpcyBhIFBhdGNoTXV0YXRpb24uIFRoaXMgaXMgYmVjYXVzZVxuICAgICAgICAgICAgLy8gZG9jdW1lbnQgZXhpc3RlbmNlIHN0YXRlIGNhbiBjaGFuZ2UgaWYgc29tZSBwYXRjaCBtdXRhdGlvbidzXG4gICAgICAgICAgICAvLyBwcmVjb25kaXRpb25zIGFyZSBtZXQuXG4gICAgICAgICAgICAvLyBOT1RFOiB3ZSByZWNhbGN1bGF0ZSB3aGVuIGBvdmVybGF5YCBpcyB1bmRlZmluZWQgYXMgd2VsbCwgYmVjYXVzZSB0aGVyZVxuICAgICAgICAgICAgLy8gbWlnaHQgYmUgYSBwYXRjaCBtdXRhdGlvbiB3aG9zZSBwcmVjb25kaXRpb24gZG9lcyBub3QgbWF0Y2ggYmVmb3JlIHRoZVxuICAgICAgICAgICAgLy8gY2hhbmdlIChoZW5jZSBvdmVybGF5IGlzIHVuZGVmaW5lZCksIGJ1dCB3b3VsZCBub3cgbWF0Y2guXG4gICAgICAgICAgICAgICAgICAgICAgICByLmhhcyh0LmtleSkgJiYgKHZvaWQgMCA9PT0gbyB8fCBvLm11dGF0aW9uIGluc3RhbmNlb2YgX19QUklWQVRFX1BhdGNoTXV0YXRpb24pID8gaSA9IGkuaW5zZXJ0KHQua2V5LCB0KSA6IHZvaWQgMCAhPT0gbyA/IChzLnNldCh0LmtleSwgby5tdXRhdGlvbi5nZXRGaWVsZE1hc2soKSksIFxuICAgICAgICAgICAgX19QUklWQVRFX211dGF0aW9uQXBwbHlUb0xvY2FsVmlldyhvLm11dGF0aW9uLCB0LCBvLm11dGF0aW9uLmdldEZpZWxkTWFzaygpLCBUaW1lc3RhbXAubm93KCkpKSA6IFxuICAgICAgICAgICAgLy8gbm8gb3ZlcmxheSBleGlzdHNcbiAgICAgICAgICAgIC8vIFVzaW5nIEVNUFRZIHRvIGluZGljYXRlIHRoZXJlIGlzIG5vIG92ZXJsYXkgZm9yIHRoZSBkb2N1bWVudC5cbiAgICAgICAgICAgIHMuc2V0KHQua2V5LCBGaWVsZE1hc2suZW1wdHkoKSk7XG4gICAgICAgIH0pKSwgdGhpcy5yZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5cyhlLCBpKS5uZXh0KChlID0+IChlLmZvckVhY2goKChlLCB0KSA9PiBzLnNldChlLCB0KSkpLCBcbiAgICAgICAgdC5mb3JFYWNoKCgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgdmFyIG47XG4gICAgICAgICAgICByZXR1cm4gby5zZXQoZSwgbmV3IE92ZXJsYXllZERvY3VtZW50KHQsIG51bGwgIT09IChuID0gcy5nZXQoZSkpICYmIHZvaWQgMCAhPT0gbiA/IG4gOiBudWxsKSk7XG4gICAgICAgIH0pKSwgbykpKTtcbiAgICB9XG4gICAgcmVjYWxjdWxhdGVBbmRTYXZlT3ZlcmxheXMoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX25ld0RvY3VtZW50S2V5TWFwKCk7XG4gICAgICAgIC8vIEEgcmV2ZXJzZSBsb29rdXAgbWFwIGZyb20gYmF0Y2ggaWQgdG8gdGhlIGRvY3VtZW50cyB3aXRoaW4gdGhhdCBiYXRjaC5cbiAgICAgICAgICAgICAgICBsZXQgciA9IG5ldyBTb3J0ZWRNYXAoKChlLCB0KSA9PiBlIC0gdCkpLCBpID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLm11dGF0aW9uUXVldWUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXlzKGUsIHQpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGUpIGkua2V5cygpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0LmdldChlKTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gcykgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGxldCBvID0gbi5nZXQoZSkgfHwgRmllbGRNYXNrLmVtcHR5KCk7XG4gICAgICAgICAgICAgICAgbyA9IGkuYXBwbHlUb0xvY2FsVmlldyhzLCBvKSwgbi5zZXQoZSwgbyk7XG4gICAgICAgICAgICAgICAgY29uc3QgXyA9IChyLmdldChpLmJhdGNoSWQpIHx8IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpKS5hZGQoZSk7XG4gICAgICAgICAgICAgICAgciA9IHIuaW5zZXJ0KGkuYmF0Y2hJZCwgXyk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gW10sIG8gPSByLmdldFJldmVyc2VJdGVyYXRvcigpO1xuICAgICAgICAgICAgLy8gSXRlcmF0ZSBpbiBkZXNjZW5kaW5nIG9yZGVyIG9mIGJhdGNoIElEcywgYW5kIHNraXAgZG9jdW1lbnRzIHRoYXQgYXJlXG4gICAgICAgICAgICAvLyBhbHJlYWR5IHNhdmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7by5oYXNOZXh0KCk7ICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLmdldE5leHQoKSwgXyA9IHIua2V5LCBhID0gci52YWx1ZSwgdSA9IF9fUFJJVkFURV9uZXdNdXRhdGlvbk1hcCgpO1xuICAgICAgICAgICAgICAgIGEuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaS5oYXMoZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfY2FsY3VsYXRlT3ZlcmxheU11dGF0aW9uKHQuZ2V0KGUpLCBuLmdldChlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSByICYmIHUuc2V0KGUsIHIpLCBpID0gaS5hZGQoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSksIHMucHVzaCh0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlLnNhdmVPdmVybGF5cyhlLCBfLCB1KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3Iocyk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlY2FsY3VsYXRlcyBvdmVybGF5cyBieSByZWFkaW5nIHRoZSBkb2N1bWVudHMgZnJvbSByZW1vdGUgZG9jdW1lbnQgY2FjaGVcbiAgICAgKiBmaXJzdCwgYW5kIHNhdmVzIHRoZW0gYWZ0ZXIgdGhleSBhcmUgY2FsY3VsYXRlZC5cbiAgICAgKi8gICAgcmVjYWxjdWxhdGVBbmRTYXZlT3ZlcmxheXNGb3JEb2N1bWVudEtleXMoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmdldEVudHJpZXMoZSwgdCkubmV4dCgodCA9PiB0aGlzLnJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzKGUsIHQpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcXVlcnkgYWdhaW5zdCB0aGUgbG9jYWwgdmlldyBvZiBhbGwgZG9jdW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIC0gVGhlIHBlcnNpc3RlbmNlIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSBxdWVyeSAtIFRoZSBxdWVyeSB0byBtYXRjaCBkb2N1bWVudHMgYWdhaW5zdC5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gUmVhZCB0aW1lIGFuZCBrZXkgdG8gc3RhcnQgc2Nhbm5pbmcgYnkgKGV4Y2x1c2l2ZSkuXG4gICAgICogQHBhcmFtIGNvbnRleHQgLSBBIG9wdGlvbmFsIHRyYWNrZXIgdG8ga2VlcCBhIHJlY29yZCBvZiBpbXBvcnRhbnQgZGV0YWlsc1xuICAgICAqICAgZHVyaW5nIGRhdGFiYXNlIGxvY2FsIHF1ZXJ5IGV4ZWN1dGlvbi5cbiAgICAgKi8gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeShlLCB0LCBuLCByKSB7XG4gICAgICAgIC8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBxdWVyeSBtYXRjaGVzIGEgc2luZ2xlIGRvY3VtZW50IGJ5IHBhdGggKHJhdGhlciB0aGFuIGFcbiAqIGNvbGxlY3Rpb24pLlxuICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfaXNEb2N1bWVudFF1ZXJ5JDEoZSkge1xuICAgICAgICAgICAgcmV0dXJuIERvY3VtZW50S2V5LmlzRG9jdW1lbnRLZXkoZS5wYXRoKSAmJiBudWxsID09PSBlLmNvbGxlY3Rpb25Hcm91cCAmJiAwID09PSBlLmZpbHRlcnMubGVuZ3RoO1xuICAgICAgICB9KHQpID8gdGhpcy5nZXREb2N1bWVudHNNYXRjaGluZ0RvY3VtZW50UXVlcnkoZSwgdC5wYXRoKSA6IF9fUFJJVkFURV9pc0NvbGxlY3Rpb25Hcm91cFF1ZXJ5KHQpID8gdGhpcy5nZXREb2N1bWVudHNNYXRjaGluZ0NvbGxlY3Rpb25Hcm91cFF1ZXJ5KGUsIHQsIG4sIHIpIDogdGhpcy5nZXREb2N1bWVudHNNYXRjaGluZ0NvbGxlY3Rpb25RdWVyeShlLCB0LCBuLCByKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBjb2xsZWN0aW9uIGdyb3VwLCByZXR1cm5zIHRoZSBuZXh0IGRvY3VtZW50cyB0aGF0IGZvbGxvdyB0aGUgcHJvdmlkZWQgb2Zmc2V0LCBhbG9uZ1xuICAgICAqIHdpdGggYW4gdXBkYXRlZCBiYXRjaCBJRC5cbiAgICAgKlxuICAgICAqIDxwPlRoZSBkb2N1bWVudHMgcmV0dXJuZWQgYnkgdGhpcyBtZXRob2QgYXJlIG9yZGVyZWQgYnkgcmVtb3RlIHZlcnNpb24gZnJvbSB0aGUgcHJvdmlkZWRcbiAgICAgKiBvZmZzZXQuIElmIHRoZXJlIGFyZSBubyBtb3JlIHJlbW90ZSBkb2N1bWVudHMgYWZ0ZXIgdGhlIHByb3ZpZGVkIG9mZnNldCwgZG9jdW1lbnRzIHdpdGhcbiAgICAgKiBtdXRhdGlvbnMgaW4gb3JkZXIgb2YgYmF0Y2ggaWQgZnJvbSB0aGUgb2Zmc2V0IGFyZSByZXR1cm5lZC4gU2luY2UgYWxsIGRvY3VtZW50cyBpbiBhIGJhdGNoIGFyZVxuICAgICAqIHJldHVybmVkIHRvZ2V0aGVyLCB0aGUgdG90YWwgbnVtYmVyIG9mIGRvY3VtZW50cyByZXR1cm5lZCBjYW4gZXhjZWVkIHtAY29kZSBjb3VudH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbkdyb3VwIFRoZSBjb2xsZWN0aW9uIGdyb3VwIGZvciB0aGUgZG9jdW1lbnRzLlxuICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIG9mZnNldCB0byBpbmRleCBpbnRvLlxuICAgICAqIEBwYXJhbSBjb3VudCBUaGUgbnVtYmVyIG9mIGRvY3VtZW50cyB0byByZXR1cm5cbiAgICAgKiBAcmV0dXJuIEEgTG9jYWxXcml0ZVJlc3VsdCB3aXRoIHRoZSBkb2N1bWVudHMgdGhhdCBmb2xsb3cgdGhlIHByb3ZpZGVkIG9mZnNldCBhbmQgdGhlIGxhc3QgcHJvY2Vzc2VkIGJhdGNoIGlkLlxuICAgICAqLyAgICBnZXROZXh0RG9jdW1lbnRzKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRBbGxGcm9tQ29sbGVjdGlvbkdyb3VwKGUsIHQsIG4sIHIpLm5leHQoKGkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IHIgLSBpLnNpemUgPiAwID8gdGhpcy5kb2N1bWVudE92ZXJsYXlDYWNoZS5nZXRPdmVybGF5c0ZvckNvbGxlY3Rpb25Hcm91cChlLCB0LCBuLmxhcmdlc3RCYXRjaElkLCByIC0gaS5zaXplKSA6IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKF9fUFJJVkFURV9uZXdPdmVybGF5TWFwKCkpO1xuICAgICAgICAgICAgLy8gVGhlIGNhbGxzaXRlIHdpbGwgdXNlIHRoZSBsYXJnZXN0IGJhdGNoIElEIHRvZ2V0aGVyIHdpdGggdGhlIGxhdGVzdCByZWFkIHRpbWUgdG8gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5ldyBpbmRleCBvZmZzZXQuIFNpbmNlIHdlIG9ubHkgcHJvY2VzcyBiYXRjaCBJRHMgaWYgYWxsIHJlbW90ZSBkb2N1bWVudHMgaGF2ZSBiZWVuIHJlYWQsXG4gICAgICAgICAgICAvLyBubyBvdmVybGF5IHdpbGwgaW5jcmVhc2UgdGhlIG92ZXJhbGwgcmVhZCB0aW1lLiBUaGlzIGlzIHdoeSB3ZSBvbmx5IG5lZWQgdG8gc3BlY2lhbCBjYXNlXG4gICAgICAgICAgICAvLyB0aGUgYmF0Y2ggaWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbyA9IC0xLCBfID0gaTtcbiAgICAgICAgICAgIHJldHVybiBzLm5leHQoKHQgPT4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2godCwgKCh0LCBuKSA9PiAobyA8IG4ubGFyZ2VzdEJhdGNoSWQgJiYgKG8gPSBuLmxhcmdlc3RCYXRjaElkKSwgXG4gICAgICAgICAgICBpLmdldCh0KSA/IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCkgOiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0RW50cnkoZSwgdCkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgXyA9IF8uaW5zZXJ0KHQsIGUpO1xuICAgICAgICAgICAgfSkpKSkpLm5leHQoKCgpID0+IHRoaXMucG9wdWxhdGVPdmVybGF5cyhlLCB0LCBpKSkpLm5leHQoKCgpID0+IHRoaXMuY29tcHV0ZVZpZXdzKGUsIF8sIHQsIF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpKSkpLm5leHQoKGUgPT4gKHtcbiAgICAgICAgICAgICAgICBiYXRjaElkOiBvLFxuICAgICAgICAgICAgICAgIGNoYW5nZXM6IF9fUFJJVkFURV9jb252ZXJ0T3ZlcmxheWVkRG9jdW1lbnRNYXBUb0RvY3VtZW50TWFwKGUpXG4gICAgICAgICAgICB9KSkpKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdEb2N1bWVudFF1ZXJ5KGUsIHQpIHtcbiAgICAgICAgLy8gSnVzdCBkbyBhIHNpbXBsZSBkb2N1bWVudCBsb29rdXAuXG4gICAgICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50KGUsIG5ldyBEb2N1bWVudEtleSh0KSkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBsZXQgdCA9IGRvY3VtZW50TWFwKCk7XG4gICAgICAgICAgICByZXR1cm4gZS5pc0ZvdW5kRG9jdW1lbnQoKSAmJiAodCA9IHQuaW5zZXJ0KGUua2V5LCBlKSksIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uR3JvdXBRdWVyeShlLCB0LCBuLCByKSB7XG4gICAgICAgIGNvbnN0IGkgPSB0LmNvbGxlY3Rpb25Hcm91cDtcbiAgICAgICAgbGV0IHMgPSBkb2N1bWVudE1hcCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE1hbmFnZXIuZ2V0Q29sbGVjdGlvblBhcmVudHMoZSwgaSkubmV4dCgobyA9PiBQZXJzaXN0ZW5jZVByb21pc2UuZm9yRWFjaChvLCAobyA9PiB7XG4gICAgICAgICAgICBjb25zdCBfID0gZnVuY3Rpb24gX19QUklWQVRFX2FzQ29sbGVjdGlvblF1ZXJ5QXRQYXRoKGUsIHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9RdWVyeUltcGwodCwgXG4gICAgICAgICAgICAgICAgLypjb2xsZWN0aW9uR3JvdXA9Ki8gbnVsbCwgZS5leHBsaWNpdE9yZGVyQnkuc2xpY2UoKSwgZS5maWx0ZXJzLnNsaWNlKCksIGUubGltaXQsIGUubGltaXRUeXBlLCBlLnN0YXJ0QXQsIGUuZW5kQXQpO1xuICAgICAgICAgICAgfSh0LCBvLmNoaWxkKGkpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvblF1ZXJ5KGUsIF8sIG4sIHIpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGUuZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcyA9IHMuaW5zZXJ0KGUsIHQpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHMpKSkpO1xuICAgIH1cbiAgICBnZXREb2N1bWVudHNNYXRjaGluZ0NvbGxlY3Rpb25RdWVyeShlLCB0LCBuLCByKSB7XG4gICAgICAgIC8vIFF1ZXJ5IHRoZSByZW1vdGUgZG9jdW1lbnRzIGFuZCBvdmVybGF5IG11dGF0aW9ucy5cbiAgICAgICAgbGV0IGk7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlLmdldE92ZXJsYXlzRm9yQ29sbGVjdGlvbihlLCB0LnBhdGgsIG4ubGFyZ2VzdEJhdGNoSWQpLm5leHQoKHMgPT4gKGkgPSBzLCBcbiAgICAgICAgdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmdldERvY3VtZW50c01hdGNoaW5nUXVlcnkoZSwgdCwgbiwgaSwgcikpKSkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAvLyBBcyBkb2N1bWVudHMgbWlnaHQgbWF0Y2ggdGhlIHF1ZXJ5IGJlY2F1c2Ugb2YgdGhlaXIgb3ZlcmxheSB3ZSBuZWVkIHRvXG4gICAgICAgICAgICAvLyBpbmNsdWRlIGRvY3VtZW50cyBmb3IgYWxsIG92ZXJsYXlzIGluIHRoZSBpbml0aWFsIGRvY3VtZW50IHNldC5cbiAgICAgICAgICAgIGkuZm9yRWFjaCgoKHQsIG4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbi5nZXRLZXkoKTtcbiAgICAgICAgICAgICAgICBudWxsID09PSBlLmdldChyKSAmJiAoZSA9IGUuaW5zZXJ0KHIsIE11dGFibGVEb2N1bWVudC5uZXdJbnZhbGlkRG9jdW1lbnQocikpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBvdmVybGF5cyBhbmQgbWF0Y2ggYWdhaW5zdCB0aGUgcXVlcnkuXG4gICAgICAgICAgICBsZXQgbiA9IGRvY3VtZW50TWFwKCk7XG4gICAgICAgICAgICByZXR1cm4gZS5mb3JFYWNoKCgoZSwgcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBpLmdldChlKTtcbiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHMgJiYgX19QUklWQVRFX211dGF0aW9uQXBwbHlUb0xvY2FsVmlldyhzLm11dGF0aW9uLCByLCBGaWVsZE1hc2suZW1wdHkoKSwgVGltZXN0YW1wLm5vdygpKSwgXG4gICAgICAgICAgICAgICAgLy8gRmluYWxseSwgaW5zZXJ0IHRoZSBkb2N1bWVudHMgdGhhdCBzdGlsbCBtYXRjaCB0aGUgcXVlcnlcbiAgICAgICAgICAgICAgICBfX1BSSVZBVEVfcXVlcnlNYXRjaGVzKHQsIHIpICYmIChuID0gbi5pbnNlcnQoZSwgcikpO1xuICAgICAgICAgICAgfSkpLCBuO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfTWVtb3J5QnVuZGxlQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gZSwgdGhpcy5jciA9IG5ldyBNYXAsIHRoaXMubHIgPSBuZXcgTWFwO1xuICAgIH1cbiAgICBnZXRCdW5kbGVNZXRhZGF0YShlLCB0KSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLmNyLmdldCh0KSk7XG4gICAgfVxuICAgIHNhdmVCdW5kbGVNZXRhZGF0YShlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyLnNldCh0LmlkLCBcbiAgICAgICAgLyoqIERlY29kZXMgYSBCdW5kbGVNZXRhZGF0YSBwcm90byBpbnRvIGEgQnVuZGxlTWV0YWRhdGEgb2JqZWN0LiAqL1xuICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfZnJvbUJ1bmRsZU1ldGFkYXRhKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IGUuaWQsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogZS52ZXJzaW9uLFxuICAgICAgICAgICAgICAgIGNyZWF0ZVRpbWU6IF9fUFJJVkFURV9mcm9tVmVyc2lvbihlLmNyZWF0ZVRpbWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHQpKSwgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZ2V0TmFtZWRRdWVyeShlLCB0KSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLmxyLmdldCh0KSk7XG4gICAgfVxuICAgIHNhdmVOYW1lZFF1ZXJ5KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubHIuc2V0KHQubmFtZSwgZnVuY3Rpb24gX19QUklWQVRFX2Zyb21Qcm90b05hbWVkUXVlcnkoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBlLm5hbWUsXG4gICAgICAgICAgICAgICAgcXVlcnk6IF9fUFJJVkFURV9mcm9tQnVuZGxlZFF1ZXJ5KGUuYnVuZGxlZFF1ZXJ5KSxcbiAgICAgICAgICAgICAgICByZWFkVGltZTogX19QUklWQVRFX2Zyb21WZXJzaW9uKGUucmVhZFRpbWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHQpKSwgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGluLW1lbW9yeSBpbXBsZW1lbnRhdGlvbiBvZiBEb2N1bWVudE92ZXJsYXlDYWNoZS5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfTWVtb3J5RG9jdW1lbnRPdmVybGF5Q2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBBIG1hcCBzb3J0ZWQgYnkgRG9jdW1lbnRLZXksIHdob3NlIHZhbHVlIGlzIGEgcGFpciBvZiB0aGUgbGFyZ2VzdCBiYXRjaCBpZFxuICAgICAgICAvLyBmb3IgdGhlIG92ZXJsYXkgYW5kIHRoZSBvdmVybGF5IGl0c2VsZi5cbiAgICAgICAgdGhpcy5vdmVybGF5cyA9IG5ldyBTb3J0ZWRNYXAoRG9jdW1lbnRLZXkuY29tcGFyYXRvciksIHRoaXMuaHIgPSBuZXcgTWFwO1xuICAgIH1cbiAgICBnZXRPdmVybGF5KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMub3ZlcmxheXMuZ2V0KHQpKTtcbiAgICB9XG4gICAgZ2V0T3ZlcmxheXMoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX25ld092ZXJsYXlNYXAoKTtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHQsICh0ID0+IHRoaXMuZ2V0T3ZlcmxheShlLCB0KS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIG51bGwgIT09IGUgJiYgbi5zZXQodCwgZSk7XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IG4pKTtcbiAgICB9XG4gICAgc2F2ZU92ZXJsYXlzKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgoKG4sIHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaHQoZSwgdCwgcik7XG4gICAgICAgIH0pKSwgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlT3ZlcmxheXNGb3JCYXRjaElkKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuaHIuZ2V0KG4pO1xuICAgICAgICByZXR1cm4gdm9pZCAwICE9PSByICYmIChyLmZvckVhY2goKGUgPT4gdGhpcy5vdmVybGF5cyA9IHRoaXMub3ZlcmxheXMucmVtb3ZlKGUpKSksIFxuICAgICAgICB0aGlzLmhyLmRlbGV0ZShuKSksIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGdldE92ZXJsYXlzRm9yQ29sbGVjdGlvbihlLCB0LCBuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfbmV3T3ZlcmxheU1hcCgpLCBpID0gdC5sZW5ndGggKyAxLCBzID0gbmV3IERvY3VtZW50S2V5KHQuY2hpbGQoXCJcIikpLCBvID0gdGhpcy5vdmVybGF5cy5nZXRJdGVyYXRvckZyb20ocyk7XG4gICAgICAgIGZvciAoO28uaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBvLmdldE5leHQoKS52YWx1ZSwgcyA9IGUuZ2V0S2V5KCk7XG4gICAgICAgICAgICBpZiAoIXQuaXNQcmVmaXhPZihzLnBhdGgpKSBicmVhaztcbiAgICAgICAgICAgIC8vIERvY3VtZW50cyBmcm9tIHN1Yi1jb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5wYXRoLmxlbmd0aCA9PT0gaSAmJiAoZS5sYXJnZXN0QmF0Y2hJZCA+IG4gJiYgci5zZXQoZS5nZXRLZXkoKSwgZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShyKTtcbiAgICB9XG4gICAgZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uR3JvdXAoZSwgdCwgbiwgcikge1xuICAgICAgICBsZXQgaSA9IG5ldyBTb3J0ZWRNYXAoKChlLCB0KSA9PiBlIC0gdCkpO1xuICAgICAgICBjb25zdCBzID0gdGhpcy5vdmVybGF5cy5nZXRJdGVyYXRvcigpO1xuICAgICAgICBmb3IgKDtzLmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gcy5nZXROZXh0KCkudmFsdWU7XG4gICAgICAgICAgICBpZiAoZS5nZXRLZXkoKS5nZXRDb2xsZWN0aW9uR3JvdXAoKSA9PT0gdCAmJiBlLmxhcmdlc3RCYXRjaElkID4gbikge1xuICAgICAgICAgICAgICAgIGxldCB0ID0gaS5nZXQoZS5sYXJnZXN0QmF0Y2hJZCk7XG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gdCAmJiAodCA9IF9fUFJJVkFURV9uZXdPdmVybGF5TWFwKCksIGkgPSBpLmluc2VydChlLmxhcmdlc3RCYXRjaElkLCB0KSksIFxuICAgICAgICAgICAgICAgIHQuc2V0KGUuZ2V0S2V5KCksIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG8gPSBfX1BSSVZBVEVfbmV3T3ZlcmxheU1hcCgpLCBfID0gaS5nZXRJdGVyYXRvcigpO1xuICAgICAgICBmb3IgKDtfLmhhc05leHQoKTsgKSB7XG4gICAgICAgICAgICBpZiAoXy5nZXROZXh0KCkudmFsdWUuZm9yRWFjaCgoKGUsIHQpID0+IG8uc2V0KGUsIHQpKSksIG8uc2l6ZSgpID49IHIpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShvKTtcbiAgICB9XG4gICAgaHQoZSwgdCwgbikge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGFzc29jaWF0aW9uIG9mIHRoZSBvdmVybGF5IHRvIGl0cyBiYXRjaCBpZC5cbiAgICAgICAgY29uc3QgciA9IHRoaXMub3ZlcmxheXMuZ2V0KG4ua2V5KTtcbiAgICAgICAgaWYgKG51bGwgIT09IHIpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmhyLmdldChyLmxhcmdlc3RCYXRjaElkKS5kZWxldGUobi5rZXkpO1xuICAgICAgICAgICAgdGhpcy5oci5zZXQoci5sYXJnZXN0QmF0Y2hJZCwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdmVybGF5cyA9IHRoaXMub3ZlcmxheXMuaW5zZXJ0KG4ua2V5LCBuZXcgT3ZlcmxheSh0LCBuKSk7XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYXNzb2NpYXRpb24gb2YgdGhpcyBvdmVybGF5IHRvIHRoZSBnaXZlbiBsYXJnZXN0QmF0Y2hJZC5cbiAgICAgICAgbGV0IGkgPSB0aGlzLmhyLmdldCh0KTtcbiAgICAgICAgdm9pZCAwID09PSBpICYmIChpID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCksIHRoaXMuaHIuc2V0KHQsIGkpKSwgdGhpcy5oci5zZXQodCwgaS5hZGQobi5rZXkpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiByZWZlcmVuY2VzIHRvIGEgZG9jdW1lbnQgZnJvbSBzb21lIGtpbmQgb2YgbnVtYmVyZWQgZW50aXR5XG4gKiAoZWl0aGVyIGEgdGFyZ2V0IElEIG9yIGJhdGNoIElEKS4gQXMgcmVmZXJlbmNlcyBhcmUgYWRkZWQgdG8gb3IgcmVtb3ZlZCBmcm9tXG4gKiB0aGUgc2V0IGNvcnJlc3BvbmRpbmcgZXZlbnRzIGFyZSBlbWl0dGVkIHRvIGEgcmVnaXN0ZXJlZCBnYXJiYWdlIGNvbGxlY3Rvci5cbiAqXG4gKiBFYWNoIHJlZmVyZW5jZSBpcyByZXByZXNlbnRlZCBieSBhIERvY3VtZW50UmVmZXJlbmNlIG9iamVjdC4gRWFjaCBvZiB0aGVtXG4gKiBjb250YWlucyBlbm91Z2ggaW5mb3JtYXRpb24gdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhlIHJlZmVyZW5jZS4gVGhleSBhcmUgYWxsXG4gKiBzdG9yZWQgcHJpbWFyaWx5IGluIGEgc2V0IHNvcnRlZCBieSBrZXkuIEEgZG9jdW1lbnQgaXMgY29uc2lkZXJlZCBnYXJiYWdlIGlmXG4gKiB0aGVyZSdzIG5vIHJlZmVyZW5jZXMgaW4gdGhhdCBzZXQgKHRoaXMgY2FuIGJlIGVmZmljaWVudGx5IGNoZWNrZWQgdGhhbmtzIHRvXG4gKiBzb3J0aW5nIGJ5IGtleSkuXG4gKlxuICogUmVmZXJlbmNlU2V0IGFsc28ga2VlcHMgYSBzZWNvbmRhcnkgc2V0IHRoYXQgY29udGFpbnMgcmVmZXJlbmNlcyBzb3J0ZWQgYnlcbiAqIElEcy4gVGhpcyBvbmUgaXMgdXNlZCB0byBlZmZpY2llbnRseSBpbXBsZW1lbnQgcmVtb3ZhbCBvZiBhbGwgcmVmZXJlbmNlcyBieVxuICogc29tZSB0YXJnZXQgSUQuXG4gKi8gY2xhc3MgX19QUklWQVRFX1JlZmVyZW5jZVNldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIEEgc2V0IG9mIG91dHN0YW5kaW5nIHJlZmVyZW5jZXMgdG8gYSBkb2N1bWVudCBzb3J0ZWQgYnkga2V5LlxuICAgICAgICB0aGlzLlByID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfRG9jUmVmZXJlbmNlLklyKSwgXG4gICAgICAgIC8vIEEgc2V0IG9mIG91dHN0YW5kaW5nIHJlZmVyZW5jZXMgdG8gYSBkb2N1bWVudCBzb3J0ZWQgYnkgdGFyZ2V0IGlkLlxuICAgICAgICB0aGlzLlRyID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfRG9jUmVmZXJlbmNlLkVyKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIHNldCBjb250YWlucyBubyByZWZlcmVuY2VzLiAqLyAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Qci5pc0VtcHR5KCk7XG4gICAgfVxuICAgIC8qKiBBZGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBnaXZlbiBkb2N1bWVudCBrZXkgZm9yIHRoZSBnaXZlbiBJRC4gKi8gICAgYWRkUmVmZXJlbmNlKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBfX1BSSVZBVEVfRG9jUmVmZXJlbmNlKGUsIHQpO1xuICAgICAgICB0aGlzLlByID0gdGhpcy5Qci5hZGQobiksIHRoaXMuVHIgPSB0aGlzLlRyLmFkZChuKTtcbiAgICB9XG4gICAgLyoqIEFkZCByZWZlcmVuY2VzIHRvIHRoZSBnaXZlbiBkb2N1bWVudCBrZXlzIGZvciB0aGUgZ2l2ZW4gSUQuICovICAgIGRyKGUsIHQpIHtcbiAgICAgICAgZS5mb3JFYWNoKChlID0+IHRoaXMuYWRkUmVmZXJlbmNlKGUsIHQpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSByZWZlcmVuY2UgdG8gdGhlIGdpdmVuIGRvY3VtZW50IGtleSBmb3IgdGhlIGdpdmVuXG4gICAgICogSUQuXG4gICAgICovICAgIHJlbW92ZVJlZmVyZW5jZShlLCB0KSB7XG4gICAgICAgIHRoaXMuQXIobmV3IF9fUFJJVkFURV9Eb2NSZWZlcmVuY2UoZSwgdCkpO1xuICAgIH1cbiAgICBScihlLCB0KSB7XG4gICAgICAgIGUuZm9yRWFjaCgoZSA9PiB0aGlzLnJlbW92ZVJlZmVyZW5jZShlLCB0KSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHJlZmVyZW5jZXMgd2l0aCBhIGdpdmVuIElELiBDYWxscyByZW1vdmVSZWYoKSBmb3IgZWFjaCBrZXlcbiAgICAgKiByZW1vdmVkLlxuICAgICAqLyAgICBWcihlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgRG9jdW1lbnRLZXkobmV3IFJlc291cmNlUGF0aChbXSkpLCBuID0gbmV3IF9fUFJJVkFURV9Eb2NSZWZlcmVuY2UodCwgZSksIHIgPSBuZXcgX19QUklWQVRFX0RvY1JlZmVyZW5jZSh0LCBlICsgMSksIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuVHIuZm9yRWFjaEluUmFuZ2UoWyBuLCByIF0sIChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuQXIoZSksIGkucHVzaChlLmtleSk7XG4gICAgICAgIH0pKSwgaTtcbiAgICB9XG4gICAgbXIoKSB7XG4gICAgICAgIHRoaXMuUHIuZm9yRWFjaCgoZSA9PiB0aGlzLkFyKGUpKSk7XG4gICAgfVxuICAgIEFyKGUpIHtcbiAgICAgICAgdGhpcy5QciA9IHRoaXMuUHIuZGVsZXRlKGUpLCB0aGlzLlRyID0gdGhpcy5Uci5kZWxldGUoZSk7XG4gICAgfVxuICAgIGdyKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IG5ldyBEb2N1bWVudEtleShuZXcgUmVzb3VyY2VQYXRoKFtdKSksIG4gPSBuZXcgX19QUklWQVRFX0RvY1JlZmVyZW5jZSh0LCBlKSwgciA9IG5ldyBfX1BSSVZBVEVfRG9jUmVmZXJlbmNlKHQsIGUgKyAxKTtcbiAgICAgICAgbGV0IGkgPSBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuVHIuZm9yRWFjaEluUmFuZ2UoWyBuLCByIF0sIChlID0+IHtcbiAgICAgICAgICAgIGkgPSBpLmFkZChlLmtleSk7XG4gICAgICAgIH0pKSwgaTtcbiAgICB9XG4gICAgY29udGFpbnNLZXkoZSkge1xuICAgICAgICBjb25zdCB0ID0gbmV3IF9fUFJJVkFURV9Eb2NSZWZlcmVuY2UoZSwgMCksIG4gPSB0aGlzLlByLmZpcnN0QWZ0ZXJPckVxdWFsKHQpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gbiAmJiBlLmlzRXF1YWwobi5rZXkpO1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX0RvY1JlZmVyZW5jZSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLmtleSA9IGUsIHRoaXMucHIgPSB0O1xuICAgIH1cbiAgICAvKiogQ29tcGFyZSBieSBrZXkgdGhlbiBieSBJRCAqLyAgICBzdGF0aWMgSXIoZSwgdCkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRLZXkuY29tcGFyYXRvcihlLmtleSwgdC5rZXkpIHx8IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKGUucHIsIHQucHIpO1xuICAgIH1cbiAgICAvKiogQ29tcGFyZSBieSBJRCB0aGVuIGJ5IGtleSAqLyAgICBzdGF0aWMgRXIoZSwgdCkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IoZS5wciwgdC5wcikgfHwgRG9jdW1lbnRLZXkuY29tcGFyYXRvcihlLmtleSwgdC5rZXkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgX19QUklWQVRFX01lbW9yeU11dGF0aW9uUXVldWUge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy5pbmRleE1hbmFnZXIgPSBlLCB0aGlzLnJlZmVyZW5jZURlbGVnYXRlID0gdCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2V0IG9mIGFsbCBtdXRhdGlvbnMgdGhhdCBoYXZlIGJlZW4gc2VudCBidXQgbm90IHlldCBiZWVuIGFwcGxpZWQgdG9cbiAgICAgICAgICogdGhlIGJhY2tlbmQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBbXSwgXG4gICAgICAgIC8qKiBOZXh0IHZhbHVlIHRvIHVzZSB3aGVuIGFzc2lnbmluZyBzZXF1ZW50aWFsIElEcyB0byBlYWNoIG11dGF0aW9uIGJhdGNoLiAqL1xuICAgICAgICB0aGlzLnlyID0gMSwgXG4gICAgICAgIC8qKiBBbiBvcmRlcmVkIG1hcHBpbmcgYmV0d2VlbiBkb2N1bWVudHMgYW5kIHRoZSBtdXRhdGlvbnMgYmF0Y2ggSURzLiAqL1xuICAgICAgICB0aGlzLndyID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfRG9jUmVmZXJlbmNlLklyKTtcbiAgICB9XG4gICAgY2hlY2tFbXB0eShlKSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgwID09PSB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoKTtcbiAgICB9XG4gICAgYWRkTXV0YXRpb25CYXRjaChlLCB0LCBuLCByKSB7XG4gICAgICAgIGNvbnN0IGkgPSB0aGlzLnlyO1xuICAgICAgICB0aGlzLnlyKyssIHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGggPiAwICYmIHRoaXMubXV0YXRpb25RdWV1ZVt0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgTXV0YXRpb25CYXRjaChpLCB0LCBuLCByKTtcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlLnB1c2gocyk7XG4gICAgICAgIC8vIFRyYWNrIHJlZmVyZW5jZXMgYnkgZG9jdW1lbnQga2V5IGFuZCBpbmRleCBjb2xsZWN0aW9uIHBhcmVudHMuXG4gICAgICAgIGZvciAoY29uc3QgdCBvZiByKSB0aGlzLndyID0gdGhpcy53ci5hZGQobmV3IF9fUFJJVkFURV9Eb2NSZWZlcmVuY2UodC5rZXksIGkpKSwgXG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyLmFkZFRvQ29sbGVjdGlvblBhcmVudEluZGV4KGUsIHQua2V5LnBhdGgucG9wTGFzdCgpKTtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHMpO1xuICAgIH1cbiAgICBsb29rdXBNdXRhdGlvbkJhdGNoKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMuU3IodCkpO1xuICAgIH1cbiAgICBnZXROZXh0TXV0YXRpb25CYXRjaEFmdGVyQmF0Y2hJZChlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0ICsgMSwgciA9IHRoaXMuYnIobiksIGkgPSByIDwgMCA/IDAgOiByO1xuICAgICAgICAvLyBUaGUgcmVxdWVzdGVkIGJhdGNoSWQgbWF5IHN0aWxsIGJlIG91dCBvZiByYW5nZSBzbyBub3JtYWxpemUgaXQgdG8gdGhlXG4gICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCA+IGkgPyB0aGlzLm11dGF0aW9uUXVldWVbaV0gOiBudWxsKTtcbiAgICB9XG4gICAgZ2V0SGlnaGVzdFVuYWNrbm93bGVkZ2VkQmF0Y2hJZCgpIHtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKDAgPT09IHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGggPyAtMSA6IHRoaXMueXIgLSAxKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzKGUpIHtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMubXV0YXRpb25RdWV1ZS5zbGljZSgpKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXkoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gbmV3IF9fUFJJVkFURV9Eb2NSZWZlcmVuY2UodCwgMCksIHIgPSBuZXcgX19QUklWQVRFX0RvY1JlZmVyZW5jZSh0LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpLCBpID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLndyLmZvckVhY2hJblJhbmdlKFsgbiwgciBdLCAoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5TcihlLnByKTtcbiAgICAgICAgICAgIGkucHVzaCh0KTtcbiAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShpKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXlzKGUsIHQpIHtcbiAgICAgICAgbGV0IG4gPSBuZXcgU29ydGVkU2V0KF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ID0gbmV3IF9fUFJJVkFURV9Eb2NSZWZlcmVuY2UoZSwgMCksIHIgPSBuZXcgX19QUklWQVRFX0RvY1JlZmVyZW5jZShlLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICAgICAgdGhpcy53ci5mb3JFYWNoSW5SYW5nZShbIHQsIHIgXSwgKGUgPT4ge1xuICAgICAgICAgICAgICAgIG4gPSBuLmFkZChlLnByKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLkRyKG4pKTtcbiAgICB9XG4gICAgZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nUXVlcnkoZSwgdCkge1xuICAgICAgICAvLyBVc2UgdGhlIHF1ZXJ5IHBhdGggYXMgYSBwcmVmaXggZm9yIHRlc3RpbmcgaWYgYSBkb2N1bWVudCBtYXRjaGVzIHRoZVxuICAgICAgICAvLyBxdWVyeS5cbiAgICAgICAgY29uc3QgbiA9IHQucGF0aCwgciA9IG4ubGVuZ3RoICsgMTtcbiAgICAgICAgLy8gQ29uc3RydWN0IGEgZG9jdW1lbnQgcmVmZXJlbmNlIGZvciBhY3R1YWxseSBzY2FubmluZyB0aGUgaW5kZXguIFVubGlrZVxuICAgICAgICAvLyB0aGUgcHJlZml4IHRoZSBkb2N1bWVudCBrZXkgaW4gdGhpcyByZWZlcmVuY2UgbXVzdCBoYXZlIGFuIGV2ZW4gbnVtYmVyIG9mXG4gICAgICAgIC8vIHNlZ21lbnRzLiBUaGUgZW1wdHkgc2VnbWVudCBjYW4gYmUgdXNlZCBhIHN1ZmZpeCBvZiB0aGUgcXVlcnkgcGF0aFxuICAgICAgICAvLyBiZWNhdXNlIGl0IHByZWNlZGVzIGFsbCBvdGhlciBzZWdtZW50cyBpbiBhbiBvcmRlcmVkIHRyYXZlcnNhbC5cbiAgICAgICAgbGV0IGkgPSBuO1xuICAgICAgICBEb2N1bWVudEtleS5pc0RvY3VtZW50S2V5KGkpIHx8IChpID0gaS5jaGlsZChcIlwiKSk7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgX19QUklWQVRFX0RvY1JlZmVyZW5jZShuZXcgRG9jdW1lbnRLZXkoaSksIDApO1xuICAgICAgICAvLyBGaW5kIHVuaXF1ZSBiYXRjaElEcyByZWZlcmVuY2VkIGJ5IGFsbCBkb2N1bWVudHMgcG90ZW50aWFsbHkgbWF0Y2hpbmcgdGhlXG4gICAgICAgIC8vIHF1ZXJ5LlxuICAgICAgICAgICAgICAgIGxldCBvID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvcik7XG4gICAgICAgIHJldHVybiB0aGlzLndyLmZvckVhY2hXaGlsZSgoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZS5rZXkucGF0aDtcbiAgICAgICAgICAgIHJldHVybiAhIW4uaXNQcmVmaXhPZih0KSAmJiAoXG4gICAgICAgICAgICAvLyBSb3dzIHdpdGggZG9jdW1lbnQga2V5cyBtb3JlIHRoYW4gb25lIHNlZ21lbnQgbG9uZ2VyIHRoYW4gdGhlIHF1ZXJ5XG4gICAgICAgICAgICAvLyBwYXRoIGNhbid0IGJlIG1hdGNoZXMuIEZvciBleGFtcGxlLCBhIHF1ZXJ5IG9uICdyb29tcycgY2FuJ3QgbWF0Y2hcbiAgICAgICAgICAgIC8vIHRoZSBkb2N1bWVudCAvcm9vbXMvYWJjL21lc3NhZ2VzL3h5eC5cbiAgICAgICAgICAgIC8vIFRPRE8obWNnKTogd2UnbGwgbmVlZCBhIGRpZmZlcmVudCBzY2FubmVyIHdoZW4gd2UgaW1wbGVtZW50XG4gICAgICAgICAgICAvLyBhbmNlc3RvciBxdWVyaWVzLlxuICAgICAgICAgICAgdC5sZW5ndGggPT09IHIgJiYgKG8gPSBvLmFkZChlLnByKSksICEwKTtcbiAgICAgICAgfSksIHMpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLkRyKG8pKTtcbiAgICB9XG4gICAgRHIoZSkge1xuICAgICAgICAvLyBDb25zdHJ1Y3QgYW4gYXJyYXkgb2YgbWF0Y2hpbmcgYmF0Y2hlcywgc29ydGVkIGJ5IGJhdGNoSUQgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgLy8gbXVsdGlwbGUgbXV0YXRpb25zIGFmZmVjdGluZyB0aGUgc2FtZSBkb2N1bWVudCBrZXkgYXJlIGFwcGxpZWQgaW4gb3JkZXIuXG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gdGhpcy5TcihlKTtcbiAgICAgICAgICAgIG51bGwgIT09IG4gJiYgdC5wdXNoKG4pO1xuICAgICAgICB9KSksIHQ7XG4gICAgfVxuICAgIHJlbW92ZU11dGF0aW9uQmF0Y2goZSwgdCkge1xuICAgICAgICBfX1BSSVZBVEVfaGFyZEFzc2VydCgwID09PSB0aGlzLkNyKHQuYmF0Y2hJZCwgXCJyZW1vdmVkXCIpKSwgdGhpcy5tdXRhdGlvblF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGxldCBuID0gdGhpcy53cjtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHQubXV0YXRpb25zLCAociA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gbmV3IF9fUFJJVkFURV9Eb2NSZWZlcmVuY2Uoci5rZXksIHQuYmF0Y2hJZCk7XG4gICAgICAgICAgICByZXR1cm4gbiA9IG4uZGVsZXRlKGkpLCB0aGlzLnJlZmVyZW5jZURlbGVnYXRlLm1hcmtQb3RlbnRpYWxseU9ycGhhbmVkKGUsIHIua2V5KTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud3IgPSBuO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIE1uKGUpIHtcbiAgICAgICAgLy8gTm8tb3Agc2luY2UgdGhlIG1lbW9yeSBtdXRhdGlvbiBxdWV1ZSBkb2VzIG5vdCBtYWludGFpbiBhIHNlcGFyYXRlIGNhY2hlLlxuICAgIH1cbiAgICBjb250YWluc0tleShlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgX19QUklWQVRFX0RvY1JlZmVyZW5jZSh0LCAwKSwgciA9IHRoaXMud3IuZmlyc3RBZnRlck9yRXF1YWwobik7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0LmlzRXF1YWwociAmJiByLmtleSkpO1xuICAgIH1cbiAgICBwZXJmb3JtQ29uc2lzdGVuY3lDaGVjayhlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm11dGF0aW9uUXVldWUubGVuZ3RoLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIGJhdGNoSWQgaW4gdGhlIG11dGF0aW9uIHF1ZXVlIGFuZCBhc3NlcnRzIHRoYXRcbiAgICAgKiB0aGUgcmVzdWx0aW5nIGluZGV4IGlzIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBxdWV1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiYXRjaElkIC0gVGhlIGJhdGNoSWQgdG8gc2VhcmNoIGZvclxuICAgICAqIEBwYXJhbSBhY3Rpb24gLSBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGNhbGxlciBpcyBkb2luZywgcGhyYXNlZCBpbiBwYXNzaXZlXG4gICAgICogZm9ybSAoZS5nLiBcImFja25vd2xlZGdlZFwiIGluIGEgcm91dGluZSB0aGF0IGFja25vd2xlZGdlcyBiYXRjaGVzKS5cbiAgICAgKi8gICAgQ3IoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5icihlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZS4gVGhpcyBvcGVyYXRpb25cbiAgICAgKiBpcyBPKDEpLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGNvbXB1dGVkIGluZGV4IG9mIHRoZSBiYXRjaCB3aXRoIHRoZSBnaXZlbiBiYXRjaElkLCBiYXNlZCBvblxuICAgICAqIHRoZSBzdGF0ZSBvZiB0aGUgcXVldWUuIE5vdGUgdGhpcyBpbmRleCBjYW4gYmUgbmVnYXRpdmUgaWYgdGhlIHJlcXVlc3RlZFxuICAgICAqIGJhdGNoSWQgaGFzIGFscmVhZHkgYmVlbiByZW12b2VkIGZyb20gdGhlIHF1ZXVlIG9yIHBhc3QgdGhlIGVuZCBvZiB0aGVcbiAgICAgKiBxdWV1ZSBpZiB0aGUgYmF0Y2hJZCBpcyBsYXJnZXIgdGhhbiB0aGUgbGFzdCBhZGRlZCBiYXRjaC5cbiAgICAgKi8gICAgYnIoZSkge1xuICAgICAgICBpZiAoMCA9PT0gdGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCkgXG4gICAgICAgIC8vIEFzIGFuIGluZGV4IHRoaXMgaXMgcGFzdCB0aGUgZW5kIG9mIHRoZSBxdWV1ZVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgLy8gRXhhbWluZSB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlIHRvIGZpZ3VyZSBvdXQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVcbiAgICAgICAgLy8gYmF0Y2hJZCBhbmQgaW5kZXhlcyBpbiB0aGUgYXJyYXkuIE5vdGUgdGhhdCBzaW5jZSB0aGUgcXVldWUgaXMgb3JkZXJlZFxuICAgICAgICAvLyBieSBiYXRjaElkLCBpZiB0aGUgZmlyc3QgYmF0Y2ggaGFzIGEgbGFyZ2VyIGJhdGNoSWQgdGhlbiB0aGUgcmVxdWVzdGVkXG4gICAgICAgIC8vIGJhdGNoSWQgZG9lc24ndCBleGlzdCBpbiB0aGUgcXVldWUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgLSB0aGlzLm11dGF0aW9uUXVldWVbMF0uYmF0Y2hJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSB2ZXJzaW9uIG9mIGxvb2t1cE11dGF0aW9uQmF0Y2ggdGhhdCBkb2Vzbid0IHJldHVybiBhIHByb21pc2UsIHRoaXMgbWFrZXNcbiAgICAgKiBvdGhlciBmdW5jdGlvbnMgdGhhdCB1c2VzIHRoaXMgY29kZSBlYXNpZXIgdG8gcmVhZCBhbmQgbW9yZSBlZmZpY2VudC5cbiAgICAgKi8gICAgU3IoZSkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5icihlKTtcbiAgICAgICAgaWYgKHQgPCAwIHx8IHQgPj0gdGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLm11dGF0aW9uUXVldWVbdF07XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGUgbWVtb3J5LW9ubHkgUmVtb3RlRG9jdW1lbnRDYWNoZSBmb3IgSW5kZXhlZERiLiBUbyBjb25zdHJ1Y3QsIGludm9rZVxuICogYG5ld01lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGUoKWAuXG4gKi9cbmNsYXNzIF9fUFJJVkFURV9NZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlSW1wbCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNpemVyIC0gVXNlZCB0byBhc3Nlc3MgdGhlIHNpemUgb2YgYSBkb2N1bWVudC4gRm9yIGVhZ2VyIEdDLCB0aGlzIGlzXG4gICAgICogZXhwZWN0ZWQgdG8ganVzdCByZXR1cm4gMCB0byBhdm9pZCB1bm5lY2Vzc2FyaWx5IGRvaW5nIHRoZSB3b3JrIG9mXG4gICAgICogY2FsY3VsYXRpbmcgdGhlIHNpemUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLnZyID0gZSwgXG4gICAgICAgIC8qKiBVbmRlcmx5aW5nIGNhY2hlIG9mIGRvY3VtZW50cyBhbmQgdGhlaXIgcmVhZCB0aW1lcy4gKi9cbiAgICAgICAgdGhpcy5kb2NzID0gZnVuY3Rpb24gX19QUklWQVRFX2RvY3VtZW50RW50cnlNYXAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcChEb2N1bWVudEtleS5jb21wYXJhdG9yKTtcbiAgICAgICAgfSgpLCBcbiAgICAgICAgLyoqIFNpemUgb2YgYWxsIGNhY2hlZCBkb2N1bWVudHMuICovXG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuICAgIHNldEluZGV4TWFuYWdlcihlKSB7XG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyID0gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgc3VwcGxpZWQgZW50cnkgdG8gdGhlIGNhY2hlIGFuZCB1cGRhdGVzIHRoZSBjYWNoZSBzaXplIGFzIGFwcHJvcHJpYXRlLlxuICAgICAqXG4gICAgICogQWxsIGNhbGxzIG9mIGBhZGRFbnRyeWAgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAuXG4gICAgICovICAgIGFkZEVudHJ5KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHQua2V5LCByID0gdGhpcy5kb2NzLmdldChuKSwgaSA9IHIgPyByLnNpemUgOiAwLCBzID0gdGhpcy52cih0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jcyA9IHRoaXMuZG9jcy5pbnNlcnQobiwge1xuICAgICAgICAgICAgZG9jdW1lbnQ6IHQubXV0YWJsZUNvcHkoKSxcbiAgICAgICAgICAgIHNpemU6IHNcbiAgICAgICAgfSksIHRoaXMuc2l6ZSArPSBzIC0gaSwgdGhpcy5pbmRleE1hbmFnZXIuYWRkVG9Db2xsZWN0aW9uUGFyZW50SW5kZXgoZSwgbi5wYXRoLnBvcExhc3QoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBlbnRyeSBmcm9tIHRoZSBjYWNoZSBhbmQgdXBkYXRlcyB0aGUgY2FjaGUgc2l6ZSBhcyBhcHByb3ByaWF0ZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgcmVtb3ZlRW50cnlgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAuXG4gICAgICovICAgIHJlbW92ZUVudHJ5KGUpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuZG9jcy5nZXQoZSk7XG4gICAgICAgIHQgJiYgKHRoaXMuZG9jcyA9IHRoaXMuZG9jcy5yZW1vdmUoZSksIHRoaXMuc2l6ZSAtPSB0LnNpemUpO1xuICAgIH1cbiAgICBnZXRFbnRyeShlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLmRvY3MuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUobiA/IG4uZG9jdW1lbnQubXV0YWJsZUNvcHkoKSA6IE11dGFibGVEb2N1bWVudC5uZXdJbnZhbGlkRG9jdW1lbnQodCkpO1xuICAgIH1cbiAgICBnZXRFbnRyaWVzKGUsIHQpIHtcbiAgICAgICAgbGV0IG4gPSBfX1BSSVZBVEVfbXV0YWJsZURvY3VtZW50TWFwKCk7XG4gICAgICAgIHJldHVybiB0LmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZG9jcy5nZXQoZSk7XG4gICAgICAgICAgICBuID0gbi5pbnNlcnQoZSwgdCA/IHQuZG9jdW1lbnQubXV0YWJsZUNvcHkoKSA6IE11dGFibGVEb2N1bWVudC5uZXdJbnZhbGlkRG9jdW1lbnQoZSkpO1xuICAgICAgICB9KSksIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKG4pO1xuICAgIH1cbiAgICBnZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KGUsIHQsIG4sIHIpIHtcbiAgICAgICAgbGV0IGkgPSBfX1BSSVZBVEVfbXV0YWJsZURvY3VtZW50TWFwKCk7XG4gICAgICAgIC8vIERvY3VtZW50cyBhcmUgb3JkZXJlZCBieSBrZXksIHNvIHdlIGNhbiB1c2UgYSBwcmVmaXggc2NhbiB0byBuYXJyb3cgZG93blxuICAgICAgICAvLyB0aGUgZG9jdW1lbnRzIHdlIG5lZWQgdG8gbWF0Y2ggdGhlIHF1ZXJ5IGFnYWluc3QuXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHQucGF0aCwgbyA9IG5ldyBEb2N1bWVudEtleShzLmNoaWxkKFwiXCIpKSwgXyA9IHRoaXMuZG9jcy5nZXRJdGVyYXRvckZyb20obyk7XG4gICAgICAgIGZvciAoO18uaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IHtrZXk6IGUsIHZhbHVlOiB7ZG9jdW1lbnQ6IG99fSA9IF8uZ2V0TmV4dCgpO1xuICAgICAgICAgICAgaWYgKCFzLmlzUHJlZml4T2YoZS5wYXRoKSkgYnJlYWs7XG4gICAgICAgICAgICBlLnBhdGgubGVuZ3RoID4gcy5sZW5ndGggKyAxIHx8IChfX1BSSVZBVEVfaW5kZXhPZmZzZXRDb21wYXJhdG9yKF9fUFJJVkFURV9uZXdJbmRleE9mZnNldEZyb21Eb2N1bWVudChvKSwgbikgPD0gMCB8fCAoci5oYXMoby5rZXkpIHx8IF9fUFJJVkFURV9xdWVyeU1hdGNoZXModCwgbykpICYmIChpID0gaS5pbnNlcnQoby5rZXksIG8ubXV0YWJsZUNvcHkoKSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoaSk7XG4gICAgfVxuICAgIGdldEFsbEZyb21Db2xsZWN0aW9uR3JvdXAoZSwgdCwgbiwgcikge1xuICAgICAgICAvLyBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgZnJvbSB0aGUgSW5kZXhCYWNrZmlsbGVyIGlmIHBlcnNpc3RlbmNlXG4gICAgICAgIC8vIGlzIGVuYWJsZWQuXG4gICAgICAgIGZhaWwoKTtcbiAgICB9XG4gICAgRnIoZSwgdCkge1xuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2godGhpcy5kb2NzLCAoZSA9PiB0KGUpKSk7XG4gICAgfVxuICAgIG5ld0NoYW5nZUJ1ZmZlcihlKSB7XG4gICAgICAgIC8vIGB0cmFja1JlbW92YWxzYCBpcyBpZ25vcmVzIHNpbmNlIHRoZSBNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlIGtlZXBzXG4gICAgICAgIC8vIGEgc2VwYXJhdGUgY2hhbmdlbG9nIGFuZCBkb2VzIG5vdCBuZWVkIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHJlbW92YWxzLlxuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9NZW1vcnlSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlcih0aGlzKTtcbiAgICB9XG4gICAgZ2V0U2l6ZShlKSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLnNpemUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1lbW9yeS1vbmx5IFJlbW90ZURvY3VtZW50Q2FjaGUuXG4gKlxuICogQHBhcmFtIHNpemVyIC0gVXNlZCB0byBhc3Nlc3MgdGhlIHNpemUgb2YgYSBkb2N1bWVudC4gRm9yIGVhZ2VyIEdDLCB0aGlzIGlzXG4gKiBleHBlY3RlZCB0byBqdXN0IHJldHVybiAwIHRvIGF2b2lkIHVubmVjZXNzYXJpbHkgZG9pbmcgdGhlIHdvcmsgb2ZcbiAqIGNhbGN1bGF0aW5nIHRoZSBzaXplLlxuICovXG4vKipcbiAqIEhhbmRsZXMgdGhlIGRldGFpbHMgb2YgYWRkaW5nIGFuZCB1cGRhdGluZyBkb2N1bWVudHMgaW4gdGhlIE1lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGUuXG4gKi9cbmNsYXNzIF9fUFJJVkFURV9NZW1vcnlSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlciBleHRlbmRzIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuYXIgPSBlO1xuICAgIH1cbiAgICBhcHBseUNoYW5nZXMoZSkge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5nZXMuZm9yRWFjaCgoKG4sIHIpID0+IHtcbiAgICAgICAgICAgIHIuaXNWYWxpZERvY3VtZW50KCkgPyB0LnB1c2godGhpcy5hci5hZGRFbnRyeShlLCByKSkgOiB0aGlzLmFyLnJlbW92ZUVudHJ5KG4pO1xuICAgICAgICB9KSksIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHQpO1xuICAgIH1cbiAgICBnZXRGcm9tQ2FjaGUoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hci5nZXRFbnRyeShlLCB0KTtcbiAgICB9XG4gICAgZ2V0QWxsRnJvbUNhY2hlKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXIuZ2V0RW50cmllcyhlLCB0KTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIF9fUFJJVkFURV9NZW1vcnlUYXJnZXRDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gZSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXBzIGEgdGFyZ2V0IHRvIHRoZSBkYXRhIGFib3V0IHRoYXQgdGFyZ2V0XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLk1yID0gbmV3IE9iamVjdE1hcCgoZSA9PiBfX1BSSVZBVEVfY2Fub25pZnlUYXJnZXQoZSkpLCBfX1BSSVZBVEVfdGFyZ2V0RXF1YWxzKSwgXG4gICAgICAgIC8qKiBUaGUgbGFzdCByZWNlaXZlZCBzbmFwc2hvdCB2ZXJzaW9uLiAqL1xuICAgICAgICB0aGlzLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24gPSBTbmFwc2hvdFZlcnNpb24ubWluKCksIFxuICAgICAgICAvKiogVGhlIGhpZ2hlc3QgbnVtYmVyZWQgdGFyZ2V0IElEIGVuY291bnRlcmVkLiAqL1xuICAgICAgICB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IDAsIFxuICAgICAgICAvKiogVGhlIGhpZ2hlc3Qgc2VxdWVuY2UgbnVtYmVyIGVuY291bnRlcmVkLiAqL1xuICAgICAgICB0aGlzLk9yID0gMCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG9yZGVyZWQgYmlkaXJlY3Rpb25hbCBtYXBwaW5nIGJldHdlZW4gZG9jdW1lbnRzIGFuZCB0aGUgcmVtb3RlIHRhcmdldFxuICAgICAgICAgKiBJRHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLk5yID0gbmV3IF9fUFJJVkFURV9SZWZlcmVuY2VTZXQsIHRoaXMudGFyZ2V0Q291bnQgPSAwLCB0aGlzLkxyID0gX19QUklWQVRFX1RhcmdldElkR2VuZXJhdG9yLk5uKCk7XG4gICAgfVxuICAgIGZvckVhY2hUYXJnZXQoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Nci5mb3JFYWNoKCgoZSwgbikgPT4gdChuKSkpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbik7XG4gICAgfVxuICAgIGdldEhpZ2hlc3RTZXF1ZW5jZU51bWJlcihlKSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLk9yKTtcbiAgICB9XG4gICAgYWxsb2NhdGVUYXJnZXRJZChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IHRoaXMuTHIubmV4dCgpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLmhpZ2hlc3RUYXJnZXRJZCk7XG4gICAgfVxuICAgIHNldFRhcmdldHNNZXRhZGF0YShlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiBuICYmICh0aGlzLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24gPSBuKSwgdCA+IHRoaXMuT3IgJiYgKHRoaXMuT3IgPSB0KSwgXG4gICAgICAgIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHFuKGUpIHtcbiAgICAgICAgdGhpcy5Nci5zZXQoZS50YXJnZXQsIGUpO1xuICAgICAgICBjb25zdCB0ID0gZS50YXJnZXRJZDtcbiAgICAgICAgdCA+IHRoaXMuaGlnaGVzdFRhcmdldElkICYmICh0aGlzLkxyID0gbmV3IF9fUFJJVkFURV9UYXJnZXRJZEdlbmVyYXRvcih0KSwgdGhpcy5oaWdoZXN0VGFyZ2V0SWQgPSB0KSwgXG4gICAgICAgIGUuc2VxdWVuY2VOdW1iZXIgPiB0aGlzLk9yICYmICh0aGlzLk9yID0gZS5zZXF1ZW5jZU51bWJlcik7XG4gICAgfVxuICAgIGFkZFRhcmdldERhdGEoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xbih0KSwgdGhpcy50YXJnZXRDb3VudCArPSAxLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICB1cGRhdGVUYXJnZXREYXRhKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucW4odCksIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJlbW92ZVRhcmdldERhdGEoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Nci5kZWxldGUodC50YXJnZXQpLCB0aGlzLk5yLlZyKHQudGFyZ2V0SWQpLCB0aGlzLnRhcmdldENvdW50IC09IDEsIFxuICAgICAgICBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXRzKGUsIHQsIG4pIHtcbiAgICAgICAgbGV0IHIgPSAwO1xuICAgICAgICBjb25zdCBpID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLk1yLmZvckVhY2goKChzLCBvKSA9PiB7XG4gICAgICAgICAgICBvLnNlcXVlbmNlTnVtYmVyIDw9IHQgJiYgbnVsbCA9PT0gbi5nZXQoby50YXJnZXRJZCkgJiYgKHRoaXMuTXIuZGVsZXRlKHMpLCBpLnB1c2godGhpcy5yZW1vdmVNYXRjaGluZ0tleXNGb3JUYXJnZXRJZChlLCBvLnRhcmdldElkKSksIFxuICAgICAgICAgICAgcisrKTtcbiAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihpKS5uZXh0KCgoKSA9PiByKSk7XG4gICAgfVxuICAgIGdldFRhcmdldENvdW50KGUpIHtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMudGFyZ2V0Q291bnQpO1xuICAgIH1cbiAgICBnZXRUYXJnZXREYXRhKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuTXIuZ2V0KHQpIHx8IG51bGw7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShuKTtcbiAgICB9XG4gICAgYWRkTWF0Y2hpbmdLZXlzKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTnIuZHIodCwgbiksIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJlbW92ZU1hdGNoaW5nS2V5cyhlLCB0LCBuKSB7XG4gICAgICAgIHRoaXMuTnIuUnIodCwgbik7XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLnBlcnNpc3RlbmNlLnJlZmVyZW5jZURlbGVnYXRlLCBpID0gW107XG4gICAgICAgIHJldHVybiByICYmIHQuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBpLnB1c2goci5tYXJrUG90ZW50aWFsbHlPcnBoYW5lZChlLCB0KSk7XG4gICAgICAgIH0pKSwgUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IoaSk7XG4gICAgfVxuICAgIHJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTnIuVnIodCksIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGdldE1hdGNoaW5nS2V5c0ZvclRhcmdldElkKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuTnIuZ3IodCk7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShuKTtcbiAgICB9XG4gICAgY29udGFpbnNLZXkoZSwgdCkge1xuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodGhpcy5Oci5jb250YWluc0tleSh0KSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIG1lbW9yeS1iYWNrZWQgaW5zdGFuY2Ugb2YgUGVyc2lzdGVuY2UuIERhdGEgaXMgc3RvcmVkIG9ubHkgaW4gUkFNIGFuZFxuICogbm90IHBlcnNpc3RlZCBhY3Jvc3Mgc2Vzc2lvbnMuXG4gKi9cbmNsYXNzIF9fUFJJVkFURV9NZW1vcnlQZXJzaXN0ZW5jZSB7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnN0cnVjdG9yIGFjY2VwdHMgYSBmYWN0b3J5IGZvciBjcmVhdGluZyBhIHJlZmVyZW5jZSBkZWxlZ2F0ZS4gVGhpc1xuICAgICAqIGFsbG93cyBib3RoIHRoZSBkZWxlZ2F0ZSBhbmQgdGhpcyBpbnN0YW5jZSB0byBoYXZlIHN0cm9uZyByZWZlcmVuY2VzIHRvXG4gICAgICogZWFjaCBvdGhlciB3aXRob3V0IGhhdmluZyBudWxsYWJsZSBmaWVsZHMgdGhhdCB3b3VsZCB0aGVuIG5lZWQgdG8gYmVcbiAgICAgKiBjaGVja2VkIG9yIGFzc2VydGVkIG9uIGV2ZXJ5IGFjY2Vzcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMuQnIgPSB7fSwgdGhpcy5vdmVybGF5cyA9IHt9LCB0aGlzLmtyID0gbmV3IF9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZSgwKSwgdGhpcy5xciA9ICExLCBcbiAgICAgICAgdGhpcy5xciA9ICEwLCB0aGlzLnJlZmVyZW5jZURlbGVnYXRlID0gZSh0aGlzKSwgdGhpcy5RciA9IG5ldyBfX1BSSVZBVEVfTWVtb3J5VGFyZ2V0Q2FjaGUodGhpcyk7XG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyID0gbmV3IF9fUFJJVkFURV9NZW1vcnlJbmRleE1hbmFnZXIsIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZSA9IGZ1bmN0aW9uIF9fUFJJVkFURV9uZXdNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX01lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGVJbXBsKGUpO1xuICAgICAgICB9KChlID0+IHRoaXMucmVmZXJlbmNlRGVsZWdhdGUuS3IoZSkpKSwgdGhpcy5zZXJpYWxpemVyID0gbmV3IF9fUFJJVkFURV9Mb2NhbFNlcmlhbGl6ZXIodCksIFxuICAgICAgICB0aGlzLiRyID0gbmV3IF9fUFJJVkFURV9NZW1vcnlCdW5kbGVDYWNoZSh0aGlzLnNlcmlhbGl6ZXIpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBzaHV0ZG93bigpIHtcbiAgICAgICAgLy8gTm8gZHVyYWJsZSBzdGF0ZSB0byBlbnN1cmUgaXMgY2xvc2VkIG9uIHNodXRkb3duLlxuICAgICAgICByZXR1cm4gdGhpcy5xciA9ICExLCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZ2V0IHN0YXJ0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnFyO1xuICAgIH1cbiAgICBzZXREYXRhYmFzZURlbGV0ZWRMaXN0ZW5lcigpIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfVxuICAgIHNldE5ldHdvcmtFbmFibGVkKCkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG4gICAgZ2V0SW5kZXhNYW5hZ2VyKGUpIHtcbiAgICAgICAgLy8gV2UgZG8gbm90IGN1cnJlbnRseSBzdXBwb3J0IGluZGljZXMgZm9yIG1lbW9yeSBwZXJzaXN0ZW5jZSwgc28gd2UgY2FuXG4gICAgICAgIC8vIHJldHVybiB0aGUgc2FtZSBzaGFyZWQgaW5zdGFuY2Ugb2YgdGhlIG1lbW9yeSBpbmRleCBtYW5hZ2VyLlxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE1hbmFnZXI7XG4gICAgfVxuICAgIGdldERvY3VtZW50T3ZlcmxheUNhY2hlKGUpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzLm92ZXJsYXlzW2UudG9LZXkoKV07XG4gICAgICAgIHJldHVybiB0IHx8ICh0ID0gbmV3IF9fUFJJVkFURV9NZW1vcnlEb2N1bWVudE92ZXJsYXlDYWNoZSwgdGhpcy5vdmVybGF5c1tlLnRvS2V5KCldID0gdCksIFxuICAgICAgICB0O1xuICAgIH1cbiAgICBnZXRNdXRhdGlvblF1ZXVlKGUsIHQpIHtcbiAgICAgICAgbGV0IG4gPSB0aGlzLkJyW2UudG9LZXkoKV07XG4gICAgICAgIHJldHVybiBuIHx8IChuID0gbmV3IF9fUFJJVkFURV9NZW1vcnlNdXRhdGlvblF1ZXVlKHQsIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUpLCB0aGlzLkJyW2UudG9LZXkoKV0gPSBuKSwgXG4gICAgICAgIG47XG4gICAgfVxuICAgIGdldFRhcmdldENhY2hlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5RcjtcbiAgICB9XG4gICAgZ2V0UmVtb3RlRG9jdW1lbnRDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZTtcbiAgICB9XG4gICAgZ2V0QnVuZGxlQ2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRyO1xuICAgIH1cbiAgICBydW5UcmFuc2FjdGlvbihlLCB0LCBuKSB7XG4gICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIk1lbW9yeVBlcnNpc3RlbmNlXCIsIFwiU3RhcnRpbmcgdHJhbnNhY3Rpb246XCIsIGUpO1xuICAgICAgICBjb25zdCByID0gbmV3IF9fUFJJVkFURV9NZW1vcnlUcmFuc2FjdGlvbih0aGlzLmtyLm5leHQoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmVyZW5jZURlbGVnYXRlLlVyKCksIG4ocikubmV4dCgoZSA9PiB0aGlzLnJlZmVyZW5jZURlbGVnYXRlLldyKHIpLm5leHQoKCgpID0+IGUpKSkpLnRvUHJvbWlzZSgpLnRoZW4oKGUgPT4gKHIucmFpc2VPbkNvbW1pdHRlZEV2ZW50KCksIFxuICAgICAgICBlKSkpO1xuICAgIH1cbiAgICBHcihlLCB0KSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2Uub3IoT2JqZWN0LnZhbHVlcyh0aGlzLkJyKS5tYXAoKG4gPT4gKCkgPT4gbi5jb250YWluc0tleShlLCB0KSkpKTtcbiAgICB9XG59XG5cbi8qKlxuICogTWVtb3J5IHBlcnNpc3RlbmNlIGlzIG5vdCBhY3R1YWxseSB0cmFuc2FjdGlvbmFsLCBidXQgZnV0dXJlIGltcGxlbWVudGF0aW9uc1xuICogbWF5IGhhdmUgdHJhbnNhY3Rpb24tc2NvcGVkIHN0YXRlLlxuICovIGNsYXNzIF9fUFJJVkFURV9NZW1vcnlUcmFuc2FjdGlvbiBleHRlbmRzIFBlcnNpc3RlbmNlVHJhbnNhY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5jdXJyZW50U2VxdWVuY2VOdW1iZXIgPSBlO1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX01lbW9yeUVhZ2VyRGVsZWdhdGUge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZSA9IGUsIFxuICAgICAgICAvKiogVHJhY2tzIGFsbCBkb2N1bWVudHMgdGhhdCBhcmUgYWN0aXZlIGluIFF1ZXJ5IHZpZXdzLiAqL1xuICAgICAgICB0aGlzLnpyID0gbmV3IF9fUFJJVkFURV9SZWZlcmVuY2VTZXQsIFxuICAgICAgICAvKiogVGhlIGxpc3Qgb2YgZG9jdW1lbnRzIHRoYXQgYXJlIHBvdGVudGlhbGx5IEdDZWQgYWZ0ZXIgZWFjaCB0cmFuc2FjdGlvbi4gKi9cbiAgICAgICAgdGhpcy5qciA9IG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBIcihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX01lbW9yeUVhZ2VyRGVsZWdhdGUoZSk7XG4gICAgfVxuICAgIGdldCBKcigpIHtcbiAgICAgICAgaWYgKHRoaXMuanIpIHJldHVybiB0aGlzLmpyO1xuICAgICAgICB0aHJvdyBmYWlsKCk7XG4gICAgfVxuICAgIGFkZFJlZmVyZW5jZShlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnpyLmFkZFJlZmVyZW5jZShuLCB0KSwgdGhpcy5Kci5kZWxldGUobi50b1N0cmluZygpKSwgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuenIucmVtb3ZlUmVmZXJlbmNlKG4sIHQpLCB0aGlzLkpyLmFkZChuLnRvU3RyaW5nKCkpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBtYXJrUG90ZW50aWFsbHlPcnBoYW5lZChlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLkpyLmFkZCh0LnRvU3RyaW5nKCkpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXQoZSwgdCkge1xuICAgICAgICB0aGlzLnpyLlZyKHQudGFyZ2V0SWQpLmZvckVhY2goKGUgPT4gdGhpcy5Kci5hZGQoZS50b1N0cmluZygpKSkpO1xuICAgICAgICBjb25zdCBuID0gdGhpcy5wZXJzaXN0ZW5jZS5nZXRUYXJnZXRDYWNoZSgpO1xuICAgICAgICByZXR1cm4gbi5nZXRNYXRjaGluZ0tleXNGb3JUYXJnZXRJZChlLCB0LnRhcmdldElkKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGUuZm9yRWFjaCgoZSA9PiB0aGlzLkpyLmFkZChlLnRvU3RyaW5nKCkpKSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiBuLnJlbW92ZVRhcmdldERhdGEoZSwgdCkpKTtcbiAgICB9XG4gICAgVXIoKSB7XG4gICAgICAgIHRoaXMuanIgPSBuZXcgU2V0O1xuICAgIH1cbiAgICBXcihlKSB7XG4gICAgICAgIC8vIFJlbW92ZSBuZXdseSBvcnBoYW5lZCBkb2N1bWVudHMuXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnBlcnNpc3RlbmNlLmdldFJlbW90ZURvY3VtZW50Q2FjaGUoKS5uZXdDaGFuZ2VCdWZmZXIoKTtcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHRoaXMuSnIsIChuID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBEb2N1bWVudEtleS5mcm9tUGF0aChuKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLllyKGUsIHIpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGUgfHwgdC5yZW1vdmVFbnRyeShyLCBTbmFwc2hvdFZlcnNpb24ubWluKCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gKHRoaXMuanIgPSBudWxsLCB0LmFwcGx5KGUpKSkpO1xuICAgIH1cbiAgICB1cGRhdGVMaW1ib0RvY3VtZW50KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWXIoZSwgdCkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBlID8gdGhpcy5Kci5kZWxldGUodC50b1N0cmluZygpKSA6IHRoaXMuSnIuYWRkKHQudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgS3IoZSkge1xuICAgICAgICAvLyBGb3IgZWFnZXIgR0MsIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhlIGRvY3VtZW50IHNpemUsIHRoZXJlIGFyZSBubyBzaXplIHRocmVzaG9sZHMuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBZcihlLCB0KSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2Uub3IoWyAoKSA9PiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLnpyLmNvbnRhaW5zS2V5KHQpKSwgKCkgPT4gdGhpcy5wZXJzaXN0ZW5jZS5nZXRUYXJnZXRDYWNoZSgpLmNvbnRhaW5zS2V5KGUsIHQpLCAoKSA9PiB0aGlzLnBlcnNpc3RlbmNlLkdyKGUsIHQpIF0pO1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX01lbW9yeUxydURlbGVnYXRlIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2UgPSBlLCB0aGlzLlpyID0gbmV3IE9iamVjdE1hcCgoZSA9PiBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKGUucGF0aCkpLCAoKGUsIHQpID0+IGUuaXNFcXVhbCh0KSkpLCBcbiAgICAgICAgdGhpcy5nYXJiYWdlQ29sbGVjdG9yID0gX19QUklWQVRFX25ld0xydUdhcmJhZ2VDb2xsZWN0b3IodGhpcywgdCk7XG4gICAgfVxuICAgIHN0YXRpYyBIcihlLCB0KSB7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX01lbW9yeUxydURlbGVnYXRlKGUsIHQpO1xuICAgIH1cbiAgICAvLyBOby1vcHMsIHByZXNlbnQgc28gbWVtb3J5IHBlcnNpc3RlbmNlIGRvZXNuJ3QgaGF2ZSB0byBjYXJlIHdoaWNoIGRlbGVnYXRlXG4gICAgLy8gaXQgaGFzLlxuICAgIFVyKCkge31cbiAgICBXcihlKSB7XG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBmb3JFYWNoVGFyZ2V0KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuZ2V0VGFyZ2V0Q2FjaGUoKS5mb3JFYWNoVGFyZ2V0KGUsIHQpO1xuICAgIH1cbiAgICBIbihlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLlpuKGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5nZXRUYXJnZXRDYWNoZSgpLmdldFRhcmdldENvdW50KGUpLm5leHQoKGUgPT4gdC5uZXh0KCh0ID0+IGUgKyB0KSkpKTtcbiAgICB9XG4gICAgWm4oZSkge1xuICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLkpuKGUsIChlID0+IHtcbiAgICAgICAgICAgIHQrKztcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHQpKTtcbiAgICB9XG4gICAgSm4oZSwgdCkge1xuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2godGhpcy5aciwgKChuLCByKSA9PiB0aGlzLmVyKGUsIG4sIHIpLm5leHQoKGUgPT4gZSA/IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCkgOiB0KHIpKSkpKTtcbiAgICB9XG4gICAgcmVtb3ZlVGFyZ2V0cyhlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLmdldFRhcmdldENhY2hlKCkucmVtb3ZlVGFyZ2V0cyhlLCB0LCBuKTtcbiAgICB9XG4gICAgcmVtb3ZlT3JwaGFuZWREb2N1bWVudHMoZSwgdCkge1xuICAgICAgICBsZXQgbiA9IDA7XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLnBlcnNpc3RlbmNlLmdldFJlbW90ZURvY3VtZW50Q2FjaGUoKSwgaSA9IHIubmV3Q2hhbmdlQnVmZmVyKCk7XG4gICAgICAgIHJldHVybiByLkZyKGUsIChyID0+IHRoaXMuZXIoZSwgciwgdCkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBlIHx8IChuKyssIGkucmVtb3ZlRW50cnkociwgU25hcHNob3RWZXJzaW9uLm1pbigpKSk7XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IGkuYXBwbHkoZSkpKS5uZXh0KCgoKSA9PiBuKSk7XG4gICAgfVxuICAgIG1hcmtQb3RlbnRpYWxseU9ycGhhbmVkKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWnIuc2V0KHQsIGUuY3VycmVudFNlcXVlbmNlTnVtYmVyKSwgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlVGFyZ2V0KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHQud2l0aFNlcXVlbmNlTnVtYmVyKGUuY3VycmVudFNlcXVlbmNlTnVtYmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuZ2V0VGFyZ2V0Q2FjaGUoKS51cGRhdGVUYXJnZXREYXRhKGUsIG4pO1xuICAgIH1cbiAgICBhZGRSZWZlcmVuY2UoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5aci5zZXQobiwgZS5jdXJyZW50U2VxdWVuY2VOdW1iZXIpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZW1vdmVSZWZlcmVuY2UoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5aci5zZXQobiwgZS5jdXJyZW50U2VxdWVuY2VOdW1iZXIpLCBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICB1cGRhdGVMaW1ib0RvY3VtZW50KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWnIuc2V0KHQsIGUuY3VycmVudFNlcXVlbmNlTnVtYmVyKSwgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgS3IoZSkge1xuICAgICAgICBsZXQgdCA9IGUua2V5LnRvU3RyaW5nKCkubGVuZ3RoO1xuICAgICAgICByZXR1cm4gZS5pc0ZvdW5kRG9jdW1lbnQoKSAmJiAodCArPSBfX1BSSVZBVEVfZXN0aW1hdGVCeXRlU2l6ZShlLmRhdGEudmFsdWUpKSwgdDtcbiAgICB9XG4gICAgZXIoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLm9yKFsgKCkgPT4gdGhpcy5wZXJzaXN0ZW5jZS5HcihlLCB0KSwgKCkgPT4gdGhpcy5wZXJzaXN0ZW5jZS5nZXRUYXJnZXRDYWNoZSgpLmNvbnRhaW5zS2V5KGUsIHQpLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlID0gdGhpcy5aci5nZXQodCk7XG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodm9pZCAwICE9PSBlICYmIGUgPiBuKTtcbiAgICAgICAgfSBdKTtcbiAgICB9XG4gICAgZ2V0Q2FjaGVTaXplKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuZ2V0UmVtb3RlRG9jdW1lbnRDYWNoZSgpLmdldFNpemUoZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFBlcmZvcm1zIGRhdGFiYXNlIGNyZWF0aW9uIGFuZCBzY2hlbWEgdXBncmFkZXMuICovIGNsYXNzIF9fUFJJVkFURV9TY2hlbWFDb252ZXJ0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgZGF0YWJhc2UgY3JlYXRpb24gYW5kIHNjaGVtYSB1cGdyYWRlcy5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBpbiBwcm9kdWN0aW9uLCB0aGlzIG1ldGhvZCBpcyBvbmx5IGV2ZXIgdXNlZCB0byB1cGdyYWRlIHRoZSBzY2hlbWFcbiAgICAgKiB0byBTQ0hFTUFfVkVSU0lPTi4gRGlmZmVyZW50IHZhbHVlcyBvZiB0b1ZlcnNpb24gYXJlIG9ubHkgdXNlZCBmb3IgdGVzdGluZ1xuICAgICAqIGFuZCBsb2NhbCBmZWF0dXJlIGRldmVsb3BtZW50LlxuICAgICAqLyAgICBPKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgY29uc3QgaSA9IG5ldyBfX1BSSVZBVEVfU2ltcGxlRGJUcmFuc2FjdGlvbihcImNyZWF0ZU9yVXBncmFkZVwiLCB0KTtcbiAgICAgICAgbiA8IDEgJiYgciA+PSAxICYmICghZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZVByaW1hcnlDbGllbnRTdG9yZShlKSB7XG4gICAgICAgICAgICBlLmNyZWF0ZU9iamVjdFN0b3JlKFwib3duZXJcIik7XG4gICAgICAgIH0oZSksIGZ1bmN0aW9uIF9fUFJJVkFURV9jcmVhdGVNdXRhdGlvblF1ZXVlKGUpIHtcbiAgICAgICAgICAgIGUuY3JlYXRlT2JqZWN0U3RvcmUoXCJtdXRhdGlvblF1ZXVlc1wiLCB7XG4gICAgICAgICAgICAgICAga2V5UGF0aDogXCJ1c2VySWRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlLmNyZWF0ZU9iamVjdFN0b3JlKFwibXV0YXRpb25zXCIsIHtcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBcImJhdGNoSWRcIixcbiAgICAgICAgICAgICAgICBhdXRvSW5jcmVtZW50OiAhMFxuICAgICAgICAgICAgfSkuY3JlYXRlSW5kZXgoXCJ1c2VyTXV0YXRpb25zSW5kZXhcIiwgeCwge1xuICAgICAgICAgICAgICAgIHVuaXF1ZTogITBcbiAgICAgICAgICAgIH0pLCBlLmNyZWF0ZU9iamVjdFN0b3JlKFwiZG9jdW1lbnRNdXRhdGlvbnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBVcGdyYWRlIGZ1bmN0aW9uIHRvIG1pZ3JhdGUgdGhlICdtdXRhdGlvbnMnIHN0b3JlIGZyb20gVjEgdG8gVjMuIExvYWRzXG4gKiBhbmQgcmV3cml0ZXMgYWxsIGRhdGEuXG4gKi8gKGUpLCBfX1BSSVZBVEVfY3JlYXRlUXVlcnlDYWNoZShlKSwgZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZUxlZ2FjeVJlbW90ZURvY3VtZW50Q2FjaGUoZSkge1xuICAgICAgICAgICAgZS5jcmVhdGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50c1wiKTtcbiAgICAgICAgfShlKSk7XG4gICAgICAgIC8vIE1pZ3JhdGlvbiAyIHRvIHBvcHVsYXRlIHRoZSB0YXJnZXRHbG9iYWwgb2JqZWN0IG5vIGxvbmdlciBuZWVkZWQgc2luY2VcbiAgICAgICAgLy8gbWlncmF0aW9uIDMgdW5jb25kaXRpb25hbGx5IGNsZWFycyBpdC5cbiAgICAgICAgICAgICAgICBsZXQgcyA9IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHJldHVybiBuIDwgMyAmJiByID49IDMgJiYgKFxuICAgICAgICAvLyBCcmFuZCBuZXcgY2xpZW50cyBkb24ndCBuZWVkIHRvIGRyb3AgYW5kIHJlY3JlYXRlLS1vbmx5IGNsaWVudHMgdGhhdFxuICAgICAgICAvLyBwb3RlbnRpYWxseSBoYXZlIGNvcnJ1cHQgZGF0YS5cbiAgICAgICAgMCAhPT0gbiAmJiAoIWZ1bmN0aW9uIF9fUFJJVkFURV9kcm9wUXVlcnlDYWNoZShlKSB7XG4gICAgICAgICAgICBlLmRlbGV0ZU9iamVjdFN0b3JlKFwidGFyZ2V0RG9jdW1lbnRzXCIpLCBlLmRlbGV0ZU9iamVjdFN0b3JlKFwidGFyZ2V0c1wiKSwgZS5kZWxldGVPYmplY3RTdG9yZShcInRhcmdldEdsb2JhbFwiKTtcbiAgICAgICAgfShlKSwgX19QUklWQVRFX2NyZWF0ZVF1ZXJ5Q2FjaGUoZSkpLCBzID0gcy5uZXh0KCgoKSA9PiBcbiAgICAgICAgLyoqXG4gKiBDcmVhdGVzIHRoZSB0YXJnZXQgZ2xvYmFsIHNpbmdsZXRvbiByb3cuXG4gKlxuICogQHBhcmFtIHR4biAtIFRoZSB2ZXJzaW9uIHVwZ3JhZGUgdHJhbnNhY3Rpb24gZm9yIGluZGV4ZWRkYlxuICovXG4gICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV93cml0ZUVtcHR5VGFyZ2V0R2xvYmFsRW50cnkoZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGUuc3RvcmUoXCJ0YXJnZXRHbG9iYWxcIiksIG4gPSB7XG4gICAgICAgICAgICAgICAgaGlnaGVzdFRhcmdldElkOiAwLFxuICAgICAgICAgICAgICAgIGhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcjogMCxcbiAgICAgICAgICAgICAgICBsYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uOiBTbmFwc2hvdFZlcnNpb24ubWluKCkudG9UaW1lc3RhbXAoKSxcbiAgICAgICAgICAgICAgICB0YXJnZXRDb3VudDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB0LnB1dChcInRhcmdldEdsb2JhbEtleVwiLCBuKTtcbiAgICAgICAgfShpKSkpKSwgbiA8IDQgJiYgciA+PSA0ICYmICgwICE9PSBuICYmIChcbiAgICAgICAgLy8gU2NoZW1hIHZlcnNpb24gMyB1c2VzIGF1dG8tZ2VuZXJhdGVkIGtleXMgdG8gZ2VuZXJhdGUgZ2xvYmFsbHkgdW5pcXVlXG4gICAgICAgIC8vIG11dGF0aW9uIGJhdGNoIElEcyAodGhpcyB3YXMgcHJldmlvdXNseSBlbnN1cmVkIGludGVybmFsbHkgYnkgdGhlXG4gICAgICAgIC8vIGNsaWVudCkuIFRvIG1pZ3JhdGUgdG8gdGhlIG5ldyBzY2hlbWEsIHdlIGhhdmUgdG8gcmVhZCBhbGwgbXV0YXRpb25zXG4gICAgICAgIC8vIGFuZCB3cml0ZSB0aGVtIGJhY2sgb3V0LiBXZSBwcmVzZXJ2ZSB0aGUgZXhpc3RpbmcgYmF0Y2ggSURzIHRvIGd1YXJhbnRlZVxuICAgICAgICAvLyBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIG9iamVjdCBzdG9yZXMuIEFueSBmdXJ0aGVyIG11dGF0aW9uIGJhdGNoIElEcyB3aWxsXG4gICAgICAgIC8vIGJlIGF1dG8tZ2VuZXJhdGVkLlxuICAgICAgICBzID0gcy5uZXh0KCgoKSA9PiBmdW5jdGlvbiBfX1BSSVZBVEVfdXBncmFkZU11dGF0aW9uQmF0Y2hTY2hlbWFBbmRNaWdyYXRlRGF0YShlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5zdG9yZShcIm11dGF0aW9uc1wiKS5VKCkubmV4dCgobiA9PiB7XG4gICAgICAgICAgICAgICAgZS5kZWxldGVPYmplY3RTdG9yZShcIm11dGF0aW9uc1wiKTtcbiAgICAgICAgICAgICAgICBlLmNyZWF0ZU9iamVjdFN0b3JlKFwibXV0YXRpb25zXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogXCJiYXRjaElkXCIsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9JbmNyZW1lbnQ6ICEwXG4gICAgICAgICAgICAgICAgfSkuY3JlYXRlSW5kZXgoXCJ1c2VyTXV0YXRpb25zSW5kZXhcIiwgeCwge1xuICAgICAgICAgICAgICAgICAgICB1bmlxdWU6ICEwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHQuc3RvcmUoXCJtdXRhdGlvbnNcIiksIGkgPSBuLm1hcCgoZSA9PiByLnB1dChlKSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfShlLCBpKSkpKSwgcyA9IHMubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgIWZ1bmN0aW9uIF9fUFJJVkFURV9jcmVhdGVDbGllbnRNZXRhZGF0YVN0b3JlKGUpIHtcbiAgICAgICAgICAgICAgICBlLmNyZWF0ZU9iamVjdFN0b3JlKFwiY2xpZW50TWV0YWRhdGFcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiBcImNsaWVudElkXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0oZSk7XG4gICAgICAgIH0pKSksIG4gPCA1ICYmIHIgPj0gNSAmJiAocyA9IHMubmV4dCgoKCkgPT4gdGhpcy5YcihpKSkpKSwgbiA8IDYgJiYgciA+PSA2ICYmIChzID0gcy5uZXh0KCgoKSA9PiAoZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZURvY3VtZW50R2xvYmFsU3RvcmUoZSkge1xuICAgICAgICAgICAgZS5jcmVhdGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50R2xvYmFsXCIpO1xuICAgICAgICB9KGUpLCB0aGlzLmVpKGkpKSkpKSwgbiA8IDcgJiYgciA+PSA3ICYmIChzID0gcy5uZXh0KCgoKSA9PiB0aGlzLnRpKGkpKSkpLCBuIDwgOCAmJiByID49IDggJiYgKHMgPSBzLm5leHQoKCgpID0+IHRoaXMubmkoZSwgaSkpKSksIFxuICAgICAgICBuIDwgOSAmJiByID49IDkgJiYgKHMgPSBzLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIE11bHRpLVRhYiB1c2VkIHRvIG1hbmFnZSBpdHMgb3duIGNoYW5nZWxvZywgYnV0IHRoaXMgaGFzIGJlZW4gbW92ZWRcbiAgICAgICAgICAgIC8vIHRvIHRoZSBEYlJlbW90ZURvY3VtZW50IG9iamVjdCBzdG9yZSBpdHNlbGYuIFNpbmNlIHRoZSBwcmV2aW91cyBjaGFuZ2VcbiAgICAgICAgICAgIC8vIGxvZyBvbmx5IGNvbnRhaW5lZCB0cmFuc2llbnQgZGF0YSwgd2UgY2FuIGRyb3AgaXRzIG9iamVjdCBzdG9yZS5cbiAgICAgICAgICAgICFmdW5jdGlvbiBfX1BSSVZBVEVfZHJvcFJlbW90ZURvY3VtZW50Q2hhbmdlc1N0b3JlKGUpIHtcbiAgICAgICAgICAgICAgICBlLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoXCJyZW1vdGVEb2N1bWVudENoYW5nZXNcIikgJiYgZS5kZWxldGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50Q2hhbmdlc1wiKTtcbiAgICAgICAgICAgIH0oZSk7XG4gICAgICAgICAgICAvLyBOb3RlOiBTY2hlbWEgdmVyc2lvbiA5IHVzZWQgdG8gY3JlYXRlIGEgcmVhZCB0aW1lIGluZGV4IGZvciB0aGVcbiAgICAgICAgICAgIC8vIFJlbW90ZURvY3VtZW50Q2FjaGUuIFRoaXMgaXMgbm93IGRvbmUgd2l0aCBzY2hlbWEgdmVyc2lvbiAxMy5cbiAgICAgICAgICAgICAgICB9KSkpLCBuIDwgMTAgJiYgciA+PSAxMCAmJiAocyA9IHMubmV4dCgoKCkgPT4gdGhpcy5yaShpKSkpKSwgbiA8IDExICYmIHIgPj0gMTEgJiYgKHMgPSBzLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgICFmdW5jdGlvbiBfX1BSSVZBVEVfY3JlYXRlQnVuZGxlc1N0b3JlKGUpIHtcbiAgICAgICAgICAgICAgICBlLmNyZWF0ZU9iamVjdFN0b3JlKFwiYnVuZGxlc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleVBhdGg6IFwiYnVuZGxlSWRcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfShlKSwgZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZU5hbWVkUXVlcmllc1N0b3JlKGUpIHtcbiAgICAgICAgICAgICAgICBlLmNyZWF0ZU9iamVjdFN0b3JlKFwibmFtZWRRdWVyaWVzXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogXCJuYW1lXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0oZSk7XG4gICAgICAgIH0pKSksIG4gPCAxMiAmJiByID49IDEyICYmIChzID0gcy5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICAhZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZURvY3VtZW50T3ZlcmxheVN0b3JlKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS5jcmVhdGVPYmplY3RTdG9yZShcImRvY3VtZW50T3ZlcmxheXNcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiB6XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdC5jcmVhdGVJbmRleChcImNvbGxlY3Rpb25QYXRoT3ZlcmxheUluZGV4XCIsIGosIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiAhMVxuICAgICAgICAgICAgICAgIH0pLCB0LmNyZWF0ZUluZGV4KFwiY29sbGVjdGlvbkdyb3VwT3ZlcmxheUluZGV4XCIsIEgsIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiAhMVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfShlKTtcbiAgICAgICAgfSkpKSwgbiA8IDEzICYmIHIgPj0gMTMgJiYgKHMgPSBzLm5leHQoKCgpID0+IGZ1bmN0aW9uIF9fUFJJVkFURV9jcmVhdGVSZW1vdGVEb2N1bWVudENhY2hlKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLmNyZWF0ZU9iamVjdFN0b3JlKFwicmVtb3RlRG9jdW1lbnRzVjE0XCIsIHtcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBOXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHQuY3JlYXRlSW5kZXgoXCJkb2N1bWVudEtleUluZGV4XCIsIEwpLCB0LmNyZWF0ZUluZGV4KFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIiwgQik7XG4gICAgICAgIH0oZSkpKS5uZXh0KCgoKSA9PiB0aGlzLmlpKGUsIGkpKSkubmV4dCgoKCkgPT4gZS5kZWxldGVPYmplY3RTdG9yZShcInJlbW90ZURvY3VtZW50c1wiKSkpKSwgXG4gICAgICAgIG4gPCAxNCAmJiByID49IDE0ICYmIChzID0gcy5uZXh0KCgoKSA9PiB0aGlzLnNpKGUsIGkpKSkpLCBuIDwgMTUgJiYgciA+PSAxNSAmJiAocyA9IHMubmV4dCgoKCkgPT4gZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZUZpZWxkSW5kZXgoZSkge1xuICAgICAgICAgICAgZS5jcmVhdGVPYmplY3RTdG9yZShcImluZGV4Q29uZmlndXJhdGlvblwiLCB7XG4gICAgICAgICAgICAgICAga2V5UGF0aDogXCJpbmRleElkXCIsXG4gICAgICAgICAgICAgICAgYXV0b0luY3JlbWVudDogITBcbiAgICAgICAgICAgIH0pLmNyZWF0ZUluZGV4KFwiY29sbGVjdGlvbkdyb3VwSW5kZXhcIiwgXCJjb2xsZWN0aW9uR3JvdXBcIiwge1xuICAgICAgICAgICAgICAgIHVuaXF1ZTogITFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZS5jcmVhdGVPYmplY3RTdG9yZShcImluZGV4U3RhdGVcIiwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6ICRcbiAgICAgICAgICAgIH0pLmNyZWF0ZUluZGV4KFwic2VxdWVuY2VOdW1iZXJJbmRleFwiLCBVLCB7XG4gICAgICAgICAgICAgICAgdW5pcXVlOiAhMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlLmNyZWF0ZU9iamVjdFN0b3JlKFwiaW5kZXhFbnRyaWVzXCIsIHtcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBXXG4gICAgICAgICAgICB9KS5jcmVhdGVJbmRleChcImRvY3VtZW50S2V5SW5kZXhcIiwgRywge1xuICAgICAgICAgICAgICAgIHVuaXF1ZTogITFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KGUpKSkpLCBuIDwgMTYgJiYgciA+PSAxNiAmJiAoXG4gICAgICAgIC8vIENsZWFyIHRoZSBvYmplY3Qgc3RvcmVzIHRvIHJlbW92ZSBwb3NzaWJseSBjb3JydXB0ZWQgaW5kZXggZW50cmllc1xuICAgICAgICBzID0gcy5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICB0Lm9iamVjdFN0b3JlKFwiaW5kZXhTdGF0ZVwiKS5jbGVhcigpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgdC5vYmplY3RTdG9yZShcImluZGV4RW50cmllc1wiKS5jbGVhcigpO1xuICAgICAgICB9KSkpLCBzO1xuICAgIH1cbiAgICBlaShlKSB7XG4gICAgICAgIGxldCB0ID0gMDtcbiAgICAgICAgcmV0dXJuIGUuc3RvcmUoXCJyZW1vdGVEb2N1bWVudHNcIikuSigoKGUsIG4pID0+IHtcbiAgICAgICAgICAgIHQgKz0gX19QUklWQVRFX2RiRG9jdW1lbnRTaXplKG4pO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IHtcbiAgICAgICAgICAgICAgICBieXRlU2l6ZTogdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBlLnN0b3JlKFwicmVtb3RlRG9jdW1lbnRHbG9iYWxcIikucHV0KFwicmVtb3RlRG9jdW1lbnRHbG9iYWxLZXlcIiwgbik7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgWHIoZSkge1xuICAgICAgICBjb25zdCB0ID0gZS5zdG9yZShcIm11dGF0aW9uUXVldWVzXCIpLCBuID0gZS5zdG9yZShcIm11dGF0aW9uc1wiKTtcbiAgICAgICAgcmV0dXJuIHQuVSgpLm5leHQoKHQgPT4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2godCwgKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IElEQktleVJhbmdlLmJvdW5kKFsgdC51c2VySWQsIC0xIF0sIFsgdC51c2VySWQsIHQubGFzdEFja25vd2xlZGdlZEJhdGNoSWQgXSk7XG4gICAgICAgICAgICByZXR1cm4gbi5VKFwidXNlck11dGF0aW9uc0luZGV4XCIsIHIpLm5leHQoKG4gPT4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2gobiwgKG4gPT4ge1xuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KG4udXNlcklkID09PSB0LnVzZXJJZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IF9fUFJJVkFURV9mcm9tRGJNdXRhdGlvbkJhdGNoKHRoaXMuc2VyaWFsaXplciwgbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZU11dGF0aW9uQmF0Y2goZSwgdC51c2VySWQsIHIpLm5leHQoKCgpID0+IHt9KSk7XG4gICAgICAgICAgICB9KSkpKTtcbiAgICAgICAgfSkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgdGhhdCBldmVyeSBkb2N1bWVudCBpbiB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlIGhhcyBhIGNvcnJlc3BvbmRpbmcgc2VudGluZWwgcm93XG4gICAgICogd2l0aCBhIHNlcXVlbmNlIG51bWJlci4gTWlzc2luZyByb3dzIGFyZSBnaXZlbiB0aGUgbW9zdCByZWNlbnRseSB1c2VkIHNlcXVlbmNlIG51bWJlci5cbiAgICAgKi8gICAgdGkoZSkge1xuICAgICAgICBjb25zdCB0ID0gZS5zdG9yZShcInRhcmdldERvY3VtZW50c1wiKSwgbiA9IGUuc3RvcmUoXCJyZW1vdGVEb2N1bWVudHNcIik7XG4gICAgICAgIHJldHVybiBlLnN0b3JlKFwidGFyZ2V0R2xvYmFsXCIpLmdldChcInRhcmdldEdsb2JhbEtleVwiKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiBuLkooKChuLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBSZXNvdXJjZVBhdGgobiksIG8gPSBmdW5jdGlvbiBfX1BSSVZBVEVfc2VudGluZWxLZXkoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAwLCBfX1BSSVZBVEVfZW5jb2RlUmVzb3VyY2VQYXRoKGUpIF07XG4gICAgICAgICAgICAgICAgfShzKTtcbiAgICAgICAgICAgICAgICByLnB1c2godC5nZXQobykubmV4dCgobiA9PiBuID8gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKSA6IChuID0+IHQucHV0KHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IF9fUFJJVkFURV9lbmNvZGVSZXNvdXJjZVBhdGgobiksXG4gICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlTnVtYmVyOiBlLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlclxuICAgICAgICAgICAgICAgIH0pKShzKSkpKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KCgoKSA9PiBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihyKSkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIG5pKGUsIHQpIHtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBpbmRleC5cbiAgICAgICAgZS5jcmVhdGVPYmplY3RTdG9yZShcImNvbGxlY3Rpb25QYXJlbnRzXCIsIHtcbiAgICAgICAgICAgIGtleVBhdGg6IEtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG4gPSB0LnN0b3JlKFwiY29sbGVjdGlvblBhcmVudHNcIiksIHIgPSBuZXcgX19QUklWQVRFX01lbW9yeUNvbGxlY3Rpb25QYXJlbnRJbmRleCwgYWRkRW50cnkgPSBlID0+IHtcbiAgICAgICAgICAgIGlmIChyLmFkZChlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmxhc3RTZWdtZW50KCksIHIgPSBlLnBvcExhc3QoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5wdXQoe1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWQ6IHQsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogX19QUklWQVRFX2VuY29kZVJlc291cmNlUGF0aChyKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBIZWxwZXIgdG8gYWRkIGFuIGluZGV4IGVudHJ5IGlmZiB3ZSBoYXZlbid0IGFscmVhZHkgd3JpdHRlbiBpdC5cbiAgICAgICAgICAgICAgICAvLyBJbmRleCBleGlzdGluZyByZW1vdGUgZG9jdW1lbnRzLlxuICAgICAgICByZXR1cm4gdC5zdG9yZShcInJlbW90ZURvY3VtZW50c1wiKS5KKHtcbiAgICAgICAgICAgIEg6ICEwXG4gICAgICAgIH0sICgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBSZXNvdXJjZVBhdGgoZSk7XG4gICAgICAgICAgICByZXR1cm4gYWRkRW50cnkobi5wb3BMYXN0KCkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gdC5zdG9yZShcImRvY3VtZW50TXV0YXRpb25zXCIpLkooe1xuICAgICAgICAgICAgSDogITBcbiAgICAgICAgfSwgKChbZSwgdCwgbl0sIHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBfX1BSSVZBVEVfZGVjb2RlUmVzb3VyY2VQYXRoKHQpO1xuICAgICAgICAgICAgcmV0dXJuIGFkZEVudHJ5KGkucG9wTGFzdCgpKTtcbiAgICAgICAgfSkpKSk7XG4gICAgfVxuICAgIHJpKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IGUuc3RvcmUoXCJ0YXJnZXRzXCIpO1xuICAgICAgICByZXR1cm4gdC5KKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IF9fUFJJVkFURV9mcm9tRGJUYXJnZXQobiksIGkgPSBfX1BSSVZBVEVfdG9EYlRhcmdldCh0aGlzLnNlcmlhbGl6ZXIsIHIpO1xuICAgICAgICAgICAgcmV0dXJuIHQucHV0KGkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlpKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHQuc3RvcmUoXCJyZW1vdGVEb2N1bWVudHNcIiksIHIgPSBbXTtcbiAgICAgICAgcmV0dXJuIG4uSigoKGUsIG4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LnN0b3JlKFwicmVtb3RlRG9jdW1lbnRzVjE0XCIpLCBzID0gZnVuY3Rpb24gX19QUklWQVRFX2V4dHJhY3RLZXkoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmRvY3VtZW50ID8gbmV3IERvY3VtZW50S2V5KFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKGUuZG9jdW1lbnQubmFtZSkucG9wRmlyc3QoNSkpIDogZS5ub0RvY3VtZW50ID8gRG9jdW1lbnRLZXkuZnJvbVNlZ21lbnRzKGUubm9Eb2N1bWVudC5wYXRoKSA6IGUudW5rbm93bkRvY3VtZW50ID8gRG9jdW1lbnRLZXkuZnJvbVNlZ21lbnRzKGUudW5rbm93bkRvY3VtZW50LnBhdGgpIDogZmFpbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gKG4pLnBhdGgudG9BcnJheSgpLCBvID0ge1xuICAgICAgICAgICAgICAgIHByZWZpeFBhdGg6IHMuc2xpY2UoMCwgcy5sZW5ndGggLSAyKSxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uR3JvdXA6IHNbcy5sZW5ndGggLSAyXSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudElkOiBzW3MubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICAgICAgcmVhZFRpbWU6IG4ucmVhZFRpbWUgfHwgWyAwLCAwIF0sXG4gICAgICAgICAgICAgICAgdW5rbm93bkRvY3VtZW50OiBuLnVua25vd25Eb2N1bWVudCxcbiAgICAgICAgICAgICAgICBub0RvY3VtZW50OiBuLm5vRG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQ6IG4uZG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zOiAhIW4uaGFzQ29tbWl0dGVkTXV0YXRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgci5wdXNoKGkucHV0KG8pKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHIpKSk7XG4gICAgfVxuICAgIHNpKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IHQuc3RvcmUoXCJtdXRhdGlvbnNcIiksIHIgPSBfX1BSSVZBVEVfbmV3SW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZSh0aGlzLnNlcmlhbGl6ZXIpLCBpID0gbmV3IF9fUFJJVkFURV9NZW1vcnlQZXJzaXN0ZW5jZShfX1BSSVZBVEVfTWVtb3J5RWFnZXJEZWxlZ2F0ZS5IciwgdGhpcy5zZXJpYWxpemVyLmN0KTtcbiAgICAgICAgcmV0dXJuIG4uVSgpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBNYXA7XG4gICAgICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgICBsZXQgciA9IG51bGwgIT09ICh0ID0gbi5nZXQoZS51c2VySWQpKSAmJiB2b2lkIDAgIT09IHQgPyB0IDogX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCk7XG4gICAgICAgICAgICAgICAgX19QUklWQVRFX2Zyb21EYk11dGF0aW9uQmF0Y2godGhpcy5zZXJpYWxpemVyLCBlKS5rZXlzKCkuZm9yRWFjaCgoZSA9PiByID0gci5hZGQoZSkpKSwgXG4gICAgICAgICAgICAgICAgbi5zZXQoZS51c2VySWQsIHIpO1xuICAgICAgICAgICAgfSkpLCBQZXJzaXN0ZW5jZVByb21pc2UuZm9yRWFjaChuLCAoKGUsIG4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IFVzZXIobiksIG8gPSBfX1BSSVZBVEVfSW5kZXhlZERiRG9jdW1lbnRPdmVybGF5Q2FjaGUubHQodGhpcy5zZXJpYWxpemVyLCBzKSwgXyA9IGkuZ2V0SW5kZXhNYW5hZ2VyKHMpLCBhID0gX19QUklWQVRFX0luZGV4ZWREYk11dGF0aW9uUXVldWUubHQocywgdGhpcy5zZXJpYWxpemVyLCBfLCBpLnJlZmVyZW5jZURlbGVnYXRlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExvY2FsRG9jdW1lbnRzVmlldyhyLCBhLCBvLCBfKS5yZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5c0ZvckRvY3VtZW50S2V5cyhuZXcgX19QUklWQVRFX0luZGV4ZWREYlRyYW5zYWN0aW9uKHQsIF9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZS5vZSksIGUpLm5leHQoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZVF1ZXJ5Q2FjaGUoZSkge1xuICAgIGUuY3JlYXRlT2JqZWN0U3RvcmUoXCJ0YXJnZXREb2N1bWVudHNcIiwge1xuICAgICAgICBrZXlQYXRoOiBxXG4gICAgfSkuY3JlYXRlSW5kZXgoXCJkb2N1bWVudFRhcmdldHNJbmRleFwiLCBRLCB7XG4gICAgICAgIHVuaXF1ZTogITBcbiAgICB9KTtcbiAgICAvLyBOT1RFOiBUaGlzIGlzIHVuaXF1ZSBvbmx5IGJlY2F1c2UgdGhlIFRhcmdldElkIGlzIHRoZSBzdWZmaXguXG4gICAgZS5jcmVhdGVPYmplY3RTdG9yZShcInRhcmdldHNcIiwge1xuICAgICAgICBrZXlQYXRoOiBcInRhcmdldElkXCJcbiAgICB9KS5jcmVhdGVJbmRleChcInF1ZXJ5VGFyZ2V0c0luZGV4XCIsIGssIHtcbiAgICAgICAgdW5pcXVlOiAhMFxuICAgIH0pLCBlLmNyZWF0ZU9iamVjdFN0b3JlKFwidGFyZ2V0R2xvYmFsXCIpO1xufVxuXG5jb25zdCBSZSA9IFwiRmFpbGVkIHRvIG9idGFpbiBleGNsdXNpdmUgYWNjZXNzIHRvIHRoZSBwZXJzaXN0ZW5jZSBsYXllci4gVG8gYWxsb3cgc2hhcmVkIGFjY2VzcywgbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbiBoYXMgdG8gYmUgZW5hYmxlZCBpbiBhbGwgdGFicy4gSWYgeW91IGFyZSB1c2luZyBgZXhwZXJpbWVudGFsRm9yY2VPd25pbmdUYWI6dHJ1ZWAsIG1ha2Ugc3VyZSB0aGF0IG9ubHkgb25lIHRhYiBoYXMgcGVyc2lzdGVuY2UgZW5hYmxlZCBhdCBhbnkgZ2l2ZW4gdGltZS5cIjtcblxuLyoqXG4gKiBPbGRlc3QgYWNjZXB0YWJsZSBhZ2UgaW4gbWlsbGlzZWNvbmRzIGZvciBjbGllbnQgbWV0YWRhdGEgYmVmb3JlIHRoZSBjbGllbnRcbiAqIGlzIGNvbnNpZGVyZWQgaW5hY3RpdmUgYW5kIGl0cyBhc3NvY2lhdGVkIGRhdGEgaXMgZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gKi9cbi8qKlxuICogQW4gSW5kZXhlZERCLWJhY2tlZCBpbnN0YW5jZSBvZiBQZXJzaXN0ZW5jZS4gRGF0YSBpcyBzdG9yZWQgcGVyc2lzdGVudGx5XG4gKiBhY3Jvc3Mgc2Vzc2lvbnMuXG4gKlxuICogT24gV2ViIG9ubHksIHRoZSBGaXJlc3RvcmUgU0RLcyBzdXBwb3J0IHNoYXJlZCBhY2Nlc3MgdG8gaXRzIHBlcnNpc3RlbmNlXG4gKiBsYXllci4gVGhpcyBhbGxvd3MgbXVsdGlwbGUgYnJvd3NlciB0YWJzIHRvIHJlYWQgYW5kIHdyaXRlIHRvIEluZGV4ZWREYiBhbmRcbiAqIHRvIHN5bmNocm9uaXplIHN0YXRlIGV2ZW4gd2l0aG91dCBuZXR3b3JrIGNvbm5lY3Rpdml0eS4gU2hhcmVkIGFjY2VzcyBpc1xuICogY3VycmVudGx5IG9wdGlvbmFsIGFuZCBub3QgZW5hYmxlZCB1bmxlc3MgYWxsIGNsaWVudHMgaW52b2tlXG4gKiBgZW5hYmxlUGVyc2lzdGVuY2UoKWAgd2l0aCBge3N5bmNocm9uaXplVGFiczp0cnVlfWAuXG4gKlxuICogSW4gbXVsdGktdGFiIG1vZGUsIGlmIG11bHRpcGxlIGNsaWVudHMgYXJlIGFjdGl2ZSBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgU0RLXG4gKiB3aWxsIGRlc2lnbmF0ZSBvbmUgY2xpZW50IGFzIHRoZSDigJxwcmltYXJ5IGNsaWVudOKAnS4gQW4gZWZmb3J0IGlzIG1hZGUgdG8gcGlja1xuICogYSB2aXNpYmxlLCBuZXR3b3JrLWNvbm5lY3RlZCBhbmQgYWN0aXZlIGNsaWVudCwgYW5kIHRoaXMgY2xpZW50IGlzXG4gKiByZXNwb25zaWJsZSBmb3IgbGV0dGluZyBvdGhlciBjbGllbnRzIGtub3cgYWJvdXQgaXRzIHByZXNlbmNlLiBUaGUgcHJpbWFyeVxuICogY2xpZW50IHdyaXRlcyBhIHVuaXF1ZSBjbGllbnQtZ2VuZXJhdGVkIGlkZW50aWZpZXIgKHRoZSBjbGllbnQgSUQpIHRvXG4gKiBJbmRleGVkRGLigJlzIOKAnG93bmVy4oCdIHN0b3JlIGV2ZXJ5IDQgc2Vjb25kcy4gSWYgdGhlIHByaW1hcnkgY2xpZW50IGZhaWxzIHRvXG4gKiB1cGRhdGUgdGhpcyBlbnRyeSwgYW5vdGhlciBjbGllbnQgY2FuIGFjcXVpcmUgdGhlIGxlYXNlIGFuZCB0YWtlIG92ZXIgYXNcbiAqIHByaW1hcnkuXG4gKlxuICogU29tZSBwZXJzaXN0ZW5jZSBvcGVyYXRpb25zIGluIHRoZSBTREsgYXJlIGRlc2lnbmF0ZWQgYXMgcHJpbWFyeS1jbGllbnQgb25seVxuICogb3BlcmF0aW9ucy4gVGhpcyBpbmNsdWRlcyB0aGUgYWNrbm93bGVkZ21lbnQgb2YgbXV0YXRpb25zIGFuZCBhbGwgdXBkYXRlcyBvZlxuICogcmVtb3RlIGRvY3VtZW50cy4gVGhlIGVmZmVjdHMgb2YgdGhlc2Ugb3BlcmF0aW9ucyBhcmUgd3JpdHRlbiB0byBwZXJzaXN0ZW5jZVxuICogYW5kIHRoZW4gYnJvYWRjYXN0IHRvIG90aGVyIHRhYnMgdmlhIExvY2FsU3RvcmFnZSAoc2VlXG4gKiBgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlYCksIHdoaWNoIHRoZW4gcmVmcmVzaCB0aGVpciBzdGF0ZSBmcm9tXG4gKiBwZXJzaXN0ZW5jZS5cbiAqXG4gKiBTaW1pbGFybHksIHRoZSBwcmltYXJ5IGNsaWVudCBsaXN0ZW5zIHRvIG5vdGlmaWNhdGlvbnMgc2VudCBieSBzZWNvbmRhcnlcbiAqIGNsaWVudHMgdG8gZGlzY292ZXIgcGVyc2lzdGVuY2UgY2hhbmdlcyB3cml0dGVuIGJ5IHNlY29uZGFyeSBjbGllbnRzLCBzdWNoIGFzXG4gKiB0aGUgYWRkaXRpb24gb2YgbmV3IG11dGF0aW9ucyBhbmQgcXVlcnkgdGFyZ2V0cy5cbiAqXG4gKiBJZiBtdWx0aS10YWIgaXMgbm90IGVuYWJsZWQgYW5kIGFub3RoZXIgdGFiIGFscmVhZHkgb2J0YWluZWQgdGhlIHByaW1hcnlcbiAqIGxlYXNlLCBJbmRleGVkRGJQZXJzaXN0ZW5jZSBlbnRlcnMgYSBmYWlsZWQgc3RhdGUgYW5kIGFsbCBzdWJzZXF1ZW50XG4gKiBvcGVyYXRpb25zIHdpbGwgYXV0b21hdGljYWxseSBmYWlsLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgdGhlcmUgaXMgYW4gb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiBhIHRhYiBpcyBjbG9zZWQsIHRoZVxuICogcHJpbWFyeSBsZWFzZSBpcyByZWxlYXNlZCBpbW1lZGlhdGVseSAodGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCB0byBtYWtlXG4gKiBzdXJlIHRoYXQgYSByZWZyZXNoZWQgdGFiIGlzIGFibGUgdG8gaW1tZWRpYXRlbHkgcmUtYWNxdWlyZSB0aGUgcHJpbWFyeVxuICogbGVhc2UpLiBVbmZvcnR1bmF0ZWx5LCBJbmRleGVkREIgY2Fubm90IGJlIHJlbGlhYmx5IHVzZWQgaW4gd2luZG93LnVubG9hZFxuICogc2luY2UgaXQgaXMgYW4gYXN5bmNocm9ub3VzIEFQSS4gU28gaW4gYWRkaXRpb24gdG8gYXR0ZW1wdGluZyB0byBnaXZlIHVwIHRoZVxuICogbGVhc2UsIHRoZSBsZWFzZWhvbGRlciB3cml0ZXMgaXRzIGNsaWVudCBJRCB0byBhIFwiem9tYmllZENsaWVudFwiIGVudHJ5IGluXG4gKiBMb2NhbFN0b3JhZ2Ugd2hpY2ggYWN0cyBhcyBhbiBpbmRpY2F0b3IgdGhhdCBhbm90aGVyIHRhYiBzaG91bGQgZ28gYWhlYWQgYW5kXG4gKiB0YWtlIHRoZSBwcmltYXJ5IGxlYXNlIGltbWVkaWF0ZWx5IHJlZ2FyZGxlc3Mgb2YgdGhlIGN1cnJlbnQgbGVhc2UgdGltZXN0YW1wLlxuICpcbiAqIFRPRE8oYi8xMTQyMjYyMzQpOiBSZW1vdmUgYHN5bmNocm9uaXplVGFic2Agc2VjdGlvbiB3aGVuIG11bHRpLXRhYiBpcyBub1xuICogbG9uZ2VyIG9wdGlvbmFsLlxuICovXG5jbGFzcyBfX1BSSVZBVEVfSW5kZXhlZERiUGVyc2lzdGVuY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gc3luY2hyb25pemUgdGhlIGluLW1lbW9yeSBzdGF0ZSBvZiBtdWx0aXBsZSB0YWJzIGFuZCBzaGFyZVxuICAgICAqIGFjY2VzcyB0byBsb2NhbCBwZXJzaXN0ZW5jZS5cbiAgICAgKi9cbiAgICBlLCB0LCBuLCByLCBpLCBzLCBvLCBfLCBhLCBcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgZm9yY2VmdWxseSBvYnRhaW5zIGRhdGFiYXNlIGFjY2Vzcy4gRXhpc3RpbmcgdGFicyB3aWxsXG4gICAgICogbm8gbG9uZ2VyIGJlIGFibGUgdG8gYWNjZXNzIEluZGV4ZWREQi5cbiAgICAgKi9cbiAgICB1LCBjID0gMTYpIHtcbiAgICAgICAgaWYgKHRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24gPSBlLCB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gdCwgdGhpcy5jbGllbnRJZCA9IG4sIFxuICAgICAgICB0aGlzLm9pID0gaSwgdGhpcy53aW5kb3cgPSBzLCB0aGlzLmRvY3VtZW50ID0gbywgdGhpcy5faSA9IGEsIHRoaXMuYWkgPSB1LCB0aGlzLnVpID0gYywgXG4gICAgICAgIHRoaXMua3IgPSBudWxsLCB0aGlzLnFyID0gITEsIHRoaXMuaXNQcmltYXJ5ID0gITEsIHRoaXMubmV0d29ya0VuYWJsZWQgPSAhMCwgXG4gICAgICAgIC8qKiBPdXIgd2luZG93LnVubG9hZCBoYW5kbGVyLCBpZiByZWdpc3RlcmVkLiAqL1xuICAgICAgICB0aGlzLmNpID0gbnVsbCwgdGhpcy5pbkZvcmVncm91bmQgPSAhMSwgXG4gICAgICAgIC8qKiBPdXIgJ3Zpc2liaWxpdHljaGFuZ2UnIGxpc3RlbmVyIGlmIHJlZ2lzdGVyZWQuICovXG4gICAgICAgIHRoaXMubGkgPSBudWxsLCBcbiAgICAgICAgLyoqIFRoZSBjbGllbnQgbWV0YWRhdGEgcmVmcmVzaCB0YXNrLiAqL1xuICAgICAgICB0aGlzLmhpID0gbnVsbCwgXG4gICAgICAgIC8qKiBUaGUgbGFzdCB0aW1lIHdlIGdhcmJhZ2UgY29sbGVjdGVkIHRoZSBjbGllbnQgbWV0YWRhdGEgb2JqZWN0IHN0b3JlLiAqL1xuICAgICAgICB0aGlzLlBpID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLCBcbiAgICAgICAgLyoqIEEgbGlzdGVuZXIgdG8gbm90aWZ5IG9uIHByaW1hcnkgc3RhdGUgY2hhbmdlcy4gKi9cbiAgICAgICAgdGhpcy5JaSA9IGUgPT4gUHJvbWlzZS5yZXNvbHZlKCksICFfX1BSSVZBVEVfSW5kZXhlZERiUGVyc2lzdGVuY2UuRCgpKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5VTklNUExFTUVOVEVELCBcIlRoaXMgcGxhdGZvcm0gaXMgZWl0aGVyIG1pc3NpbmcgSW5kZXhlZERCIG9yIGlzIGtub3duIHRvIGhhdmUgYW4gaW5jb21wbGV0ZSBpbXBsZW1lbnRhdGlvbi4gT2ZmbGluZSBwZXJzaXN0ZW5jZSBoYXMgYmVlbiBkaXNhYmxlZC5cIik7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUgPSBuZXcgX19QUklWQVRFX0luZGV4ZWREYkxydURlbGVnYXRlSW1wbCh0aGlzLCByKSwgdGhpcy5UaSA9IHQgKyBcIm1haW5cIiwgXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IG5ldyBfX1BSSVZBVEVfTG9jYWxTZXJpYWxpemVyKF8pLCB0aGlzLkVpID0gbmV3IF9fUFJJVkFURV9TaW1wbGVEYih0aGlzLlRpLCB0aGlzLnVpLCBuZXcgX19QUklWQVRFX1NjaGVtYUNvbnZlcnRlcih0aGlzLnNlcmlhbGl6ZXIpKSwgXG4gICAgICAgIHRoaXMuUXIgPSBuZXcgX19QUklWQVRFX0luZGV4ZWREYlRhcmdldENhY2hlKHRoaXMucmVmZXJlbmNlRGVsZWdhdGUsIHRoaXMuc2VyaWFsaXplciksIFxuICAgICAgICB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUgPSBfX1BSSVZBVEVfbmV3SW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZSh0aGlzLnNlcmlhbGl6ZXIpLCBcbiAgICAgICAgdGhpcy4kciA9IG5ldyBfX1BSSVZBVEVfSW5kZXhlZERiQnVuZGxlQ2FjaGUsIHRoaXMud2luZG93ICYmIHRoaXMud2luZG93LmxvY2FsU3RvcmFnZSA/IHRoaXMuZGkgPSB0aGlzLndpbmRvdy5sb2NhbFN0b3JhZ2UgOiAodGhpcy5kaSA9IG51bGwsIFxuICAgICAgICAhMSA9PT0gdSAmJiBfX1BSSVZBVEVfbG9nRXJyb3IoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIkxvY2FsU3RvcmFnZSBpcyB1bmF2YWlsYWJsZS4gQXMgYSByZXN1bHQsIHBlcnNpc3RlbmNlIG1heSBub3Qgd29yayByZWxpYWJseS4gSW4gcGFydGljdWxhciBlbmFibGVQZXJzaXN0ZW5jZSgpIGNvdWxkIGZhaWwgaW1tZWRpYXRlbHkgYWZ0ZXIgcmVmcmVzaGluZyB0aGUgcGFnZS5cIikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0IHRvIHN0YXJ0IEluZGV4ZWREYiBwZXJzaXN0ZW5jZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgcGVyc2lzdGVuY2Ugd2FzIGVuYWJsZWQuXG4gICAgICovICAgIHN0YXJ0KCkge1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGV4cGVjdGVkIHRvIGZhaWwgc29tZXRpbWVzIChpbiB0aGUgY2FzZSBvZiBhbm90aGVyIHRhYlxuICAgICAgICAvLyBhbHJlYWR5IGhhdmluZyB0aGUgcGVyc2lzdGVuY2UgbG9jayksIHNvIGl0J3MgdGhlIGZpcnN0IHRoaW5nIHdlIHNob3VsZFxuICAgICAgICAvLyBkby5cbiAgICAgICAgcmV0dXJuIHRoaXMuQWkoKS50aGVuKCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNQcmltYXJ5ICYmICF0aGlzLmFsbG93VGFiU3luY2hyb25pemF0aW9uKSBcbiAgICAgICAgICAgIC8vIEZhaWwgYHN0YXJ0KClgIGlmIGBzeW5jaHJvbml6ZVRhYnNgIGlzIGRpc2FibGVkIGFuZCB3ZSBjYW5ub3RcbiAgICAgICAgICAgIC8vIG9idGFpbiB0aGUgcHJpbWFyeSBsZWFzZS5cbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLkZBSUxFRF9QUkVDT05ESVRJT04sIFJlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlJpKCksIHRoaXMuVmkoKSwgdGhpcy5taSgpLCB0aGlzLnJ1blRyYW5zYWN0aW9uKFwiZ2V0SGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyXCIsIFwicmVhZG9ubHlcIiwgKGUgPT4gdGhpcy5Rci5nZXRIaWdoZXN0U2VxdWVuY2VOdW1iZXIoZSkpKTtcbiAgICAgICAgfSkpLnRoZW4oKGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5rciA9IG5ldyBfX1BSSVZBVEVfTGlzdGVuU2VxdWVuY2UoZSwgdGhpcy5faSk7XG4gICAgICAgIH0pKS50aGVuKCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnFyID0gITA7XG4gICAgICAgIH0pKS5jYXRjaCgoZSA9PiAodGhpcy5FaSAmJiB0aGlzLkVpLmNsb3NlKCksIFByb21pc2UucmVqZWN0KGUpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciB0aGF0IGdldHMgY2FsbGVkIHdoZW4gdGhlIHByaW1hcnkgc3RhdGUgb2YgdGhlXG4gICAgICogaW5zdGFuY2UgY2hhbmdlcy4gVXBvbiByZWdpc3RlcmluZywgdGhpcyBsaXN0ZW5lciBpcyBpbnZva2VkIGltbWVkaWF0ZWx5XG4gICAgICogd2l0aCB0aGUgY3VycmVudCBwcmltYXJ5IHN0YXRlLlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi8gICAgZmkoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5JaSA9IGFzeW5jIHQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCkgcmV0dXJuIGUodCk7XG4gICAgICAgIH0sIGUodGhpcy5pc1ByaW1hcnkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciB0aGF0IGdldHMgY2FsbGVkIHdoZW4gdGhlIGRhdGFiYXNlIHJlY2VpdmVzIGFcbiAgICAgKiB2ZXJzaW9uIGNoYW5nZSBldmVudCBpbmRpY2F0aW5nIHRoYXQgaXQgaGFzIGRlbGV0ZWQuXG4gICAgICpcbiAgICAgKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBXZWIgbXVsdGktdGFiLlxuICAgICAqLyAgICBzZXREYXRhYmFzZURlbGV0ZWRMaXN0ZW5lcihlKSB7XG4gICAgICAgIHRoaXMuRWkuTCgoYXN5bmMgdCA9PiB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBhbiBhdHRlbXB0IGlzIG1hZGUgdG8gZGVsZXRlIEluZGV4ZWREQi5cbiAgICAgICAgICAgIG51bGwgPT09IHQubmV3VmVyc2lvbiAmJiBhd2FpdCBlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRqdXN0cyB0aGUgY3VycmVudCBuZXR3b3JrIHN0YXRlIGluIHRoZSBjbGllbnQncyBtZXRhZGF0YSwgcG90ZW50aWFsbHlcbiAgICAgKiBhZmZlY3RpbmcgdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgICpcbiAgICAgKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBXZWIgbXVsdGktdGFiLlxuICAgICAqLyAgICBzZXROZXR3b3JrRW5hYmxlZChlKSB7XG4gICAgICAgIHRoaXMubmV0d29ya0VuYWJsZWQgIT09IGUgJiYgKHRoaXMubmV0d29ya0VuYWJsZWQgPSBlLCBcbiAgICAgICAgLy8gU2NoZWR1bGUgYSBwcmltYXJ5IGxlYXNlIHJlZnJlc2ggZm9yIGltbWVkaWF0ZSBleGVjdXRpb24uIFRoZSBldmVudHVhbFxuICAgICAgICAvLyBsZWFzZSB1cGRhdGUgd2lsbCBiZSBwcm9wYWdhdGVkIHZpYSBgcHJpbWFyeVN0YXRlTGlzdGVuZXJgLlxuICAgICAgICB0aGlzLm9pLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCAmJiBhd2FpdCB0aGlzLkFpKCk7XG4gICAgICAgIH0pKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGNsaWVudCBtZXRhZGF0YSBpbiBJbmRleGVkRGIgYW5kIGF0dGVtcHRzIHRvIGVpdGhlciBvYnRhaW4gb3JcbiAgICAgKiBleHRlbmQgdGhlIHByaW1hcnkgbGVhc2UgZm9yIHRoZSBsb2NhbCBjbGllbnQuIEFzeW5jaHJvbm91c2x5IG5vdGlmaWVzIHRoZVxuICAgICAqIHByaW1hcnkgc3RhdGUgbGlzdGVuZXIgaWYgdGhlIGNsaWVudCBlaXRoZXIgbmV3bHkgb2J0YWluZWQgb3IgcmVsZWFzZWQgaXRzXG4gICAgICogcHJpbWFyeSBsZWFzZS5cbiAgICAgKi8gICAgQWkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1blRyYW5zYWN0aW9uKFwidXBkYXRlQ2xpZW50TWV0YWRhdGFBbmRUcnlCZWNvbWVQcmltYXJ5XCIsIFwicmVhZHdyaXRlXCIsIChlID0+IF9fUFJJVkFURV9jbGllbnRNZXRhZGF0YVN0b3JlKGUpLnB1dCh7XG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIHVwZGF0ZVRpbWVNczogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIG5ldHdvcmtFbmFibGVkOiB0aGlzLm5ldHdvcmtFbmFibGVkLFxuICAgICAgICAgICAgaW5Gb3JlZ3JvdW5kOiB0aGlzLmluRm9yZWdyb3VuZFxuICAgICAgICB9KS5uZXh0KCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ByaW1hcnkpIHJldHVybiB0aGlzLmdpKGUpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGUgfHwgKHRoaXMuaXNQcmltYXJ5ID0gITEsIHRoaXMub2kuZW5xdWV1ZVJldHJ5YWJsZSgoKCkgPT4gdGhpcy5JaSghMSkpKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KCgoKSA9PiB0aGlzLnBpKGUpKSkubmV4dCgodCA9PiB0aGlzLmlzUHJpbWFyeSAmJiAhdCA/IHRoaXMueWkoZSkubmV4dCgoKCkgPT4gITEpKSA6ICEhdCAmJiB0aGlzLndpKGUpLm5leHQoKCgpID0+ICEwKSkpKSkpLmNhdGNoKChlID0+IHtcbiAgICAgICAgICAgIGlmIChfX1BSSVZBVEVfaXNJbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yKGUpKSBcbiAgICAgICAgICAgIC8vIFByb2NlZWQgd2l0aCB0aGUgZXhpc3Rpbmcgc3RhdGUuIEFueSBzdWJzZXF1ZW50IGFjY2VzcyB0b1xuICAgICAgICAgICAgLy8gSW5kZXhlZERCIHdpbGwgdmVyaWZ5IHRoZSBsZWFzZS5cbiAgICAgICAgICAgIHJldHVybiBfX1BSSVZBVEVfbG9nRGVidWcoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIkZhaWxlZCB0byBleHRlbmQgb3duZXIgbGVhc2U6IFwiLCBlKSwgXG4gICAgICAgICAgICB0aGlzLmlzUHJpbWFyeTtcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbikgdGhyb3cgZTtcbiAgICAgICAgICAgIHJldHVybiBfX1BSSVZBVEVfbG9nRGVidWcoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIlJlbGVhc2luZyBvd25lciBsZWFzZSBhZnRlciBlcnJvciBkdXJpbmcgbGVhc2UgcmVmcmVzaFwiLCBlKSwgXG4gICAgICAgICAgICAvKiBpc1ByaW1hcnk9ICovICExO1xuICAgICAgICB9KSkudGhlbigoZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzUHJpbWFyeSAhPT0gZSAmJiB0aGlzLm9pLmVucXVldWVSZXRyeWFibGUoKCgpID0+IHRoaXMuSWkoZSkpKSwgdGhpcy5pc1ByaW1hcnkgPSBlO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdpKGUpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9wcmltYXJ5Q2xpZW50U3RvcmUoZSkuZ2V0KFwib3duZXJcIikubmV4dCgoZSA9PiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLlNpKGUpKSkpO1xuICAgIH1cbiAgICBiaShlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfY2xpZW50TWV0YWRhdGFTdG9yZShlKS5kZWxldGUodGhpcy5jbGllbnRJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24gdGhyZXNob2xkIGhhcyBwYXNzZWQsIHBydW5lcyB0aGVcbiAgICAgKiBSZW1vdGVEb2N1bWVudENoYW5nZXMgYW5kIHRoZSBDbGllbnRNZXRhZGF0YSBzdG9yZSBiYXNlZCBvbiB0aGUgbGFzdCB1cGRhdGVcbiAgICAgKiB0aW1lIG9mIGFsbCBjbGllbnRzLlxuICAgICAqLyAgICBhc3luYyBEaSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQcmltYXJ5ICYmICF0aGlzLkNpKHRoaXMuUGksIDE4ZTUpKSB7XG4gICAgICAgICAgICB0aGlzLlBpID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBhd2FpdCB0aGlzLnJ1blRyYW5zYWN0aW9uKFwibWF5YmVHYXJiYWdlQ29sbGVjdE11bHRpQ2xpZW50U3RhdGVcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9nZXRTdG9yZShlLCBcImNsaWVudE1ldGFkYXRhXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0LlUoKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMudmkoZSwgMThlNSksIHIgPSBlLmZpbHRlcigoZSA9PiAtMSA9PT0gbi5pbmRleE9mKGUpKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBtZXRhZGF0YSBmb3IgY2xpZW50cyB0aGF0IGFyZSBubyBsb25nZXIgY29uc2lkZXJlZCBhY3RpdmUuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UuZm9yRWFjaChyLCAoZSA9PiB0LmRlbGV0ZShlLmNsaWVudElkKSkpLm5leHQoKCgpID0+IHIpKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSkuY2F0Y2goKCgpID0+IFtdKSk7XG4gICAgICAgICAgICAvLyBEZWxldGUgcG90ZW50aWFsIGxlZnRvdmVyIGVudHJpZXMgdGhhdCBtYXkgY29udGludWUgdG8gbWFyayB0aGVcbiAgICAgICAgICAgIC8vIGluYWN0aXZlIGNsaWVudHMgYXMgem9tYmllZCBpbiBMb2NhbFN0b3JhZ2UuXG4gICAgICAgICAgICAvLyBJZGVhbGx5IHdlJ2QgZGVsZXRlIHRoZSBJbmRleGVkRGIgYW5kIExvY2FsU3RvcmFnZSB6b21iaWUgZW50cmllcyBmb3JcbiAgICAgICAgICAgIC8vIHRoZSBjbGllbnQgYXRvbWljYWxseSwgYnV0IHdlIGNhbid0LiBTbyB3ZSBvcHQgdG8gZGVsZXRlIHRoZSBJbmRleGVkRGJcbiAgICAgICAgICAgIC8vIGVudHJpZXMgZmlyc3QgdG8gYXZvaWQgcG90ZW50aWFsbHkgcmV2aXZpbmcgYSB6b21iaWVkIGNsaWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpKSBmb3IgKGNvbnN0IHQgb2YgZSkgdGhpcy5kaS5yZW1vdmVJdGVtKHRoaXMuRmkodC5jbGllbnRJZCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhIHJlY3VycmluZyB0aW1lciB0byB1cGRhdGUgdGhlIGNsaWVudCBtZXRhZGF0YSBhbmQgdG8gZWl0aGVyXG4gICAgICogZXh0ZW5kIG9yIGFjcXVpcmUgdGhlIHByaW1hcnkgbGVhc2UgaWYgdGhlIGNsaWVudCBpcyBlbGlnaWJsZS5cbiAgICAgKi8gICAgbWkoKSB7XG4gICAgICAgIHRoaXMuaGkgPSB0aGlzLm9pLmVucXVldWVBZnRlckRlbGF5KFwiY2xpZW50X21ldGFkYXRhX3JlZnJlc2hcIiAvKiBUaW1lcklkLkNsaWVudE1ldGFkYXRhUmVmcmVzaCAqLyAsIDRlMywgKCgpID0+IHRoaXMuQWkoKS50aGVuKCgoKSA9PiB0aGlzLkRpKCkpKS50aGVuKCgoKSA9PiB0aGlzLm1pKCkpKSkpO1xuICAgIH1cbiAgICAvKiogQ2hlY2tzIHdoZXRoZXIgYGNsaWVudGAgaXMgdGhlIGxvY2FsIGNsaWVudC4gKi8gICAgU2koZSkge1xuICAgICAgICByZXR1cm4gISFlICYmIGUub3duZXJJZCA9PT0gdGhpcy5jbGllbnRJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXZhbHVhdGUgdGhlIHN0YXRlIG9mIGFsbCBhY3RpdmUgY2xpZW50cyBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGxvY2FsXG4gICAgICogY2xpZW50IGlzIG9yIGNhbiBhY3QgYXMgdGhlIGhvbGRlciBvZiB0aGUgcHJpbWFyeSBsZWFzZS4gUmV0dXJucyB3aGV0aGVyXG4gICAgICogdGhlIGNsaWVudCBpcyBlbGlnaWJsZSBmb3IgdGhlIGxlYXNlLCBidXQgZG9lcyBub3QgYWN0dWFsbHkgYWNxdWlyZSBpdC5cbiAgICAgKiBNYXkgcmV0dXJuICdmYWxzZScgZXZlbiBpZiB0aGVyZSBpcyBubyBhY3RpdmUgbGVhc2Vob2xkZXIgYW5kIGFub3RoZXJcbiAgICAgKiAoZm9yZWdyb3VuZCkgY2xpZW50IHNob3VsZCBiZWNvbWUgbGVhc2Vob2xkZXIgaW5zdGVhZC5cbiAgICAgKi8gICAgcGkoZSkge1xuICAgICAgICBpZiAodGhpcy5haSkgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCEwKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9wcmltYXJ5Q2xpZW50U3RvcmUoZSkuZ2V0KFwib3duZXJcIikubmV4dCgodCA9PiB7XG4gICAgICAgICAgICAvLyBBIGNsaWVudCBpcyBlbGlnaWJsZSBmb3IgdGhlIHByaW1hcnkgbGVhc2UgaWY6XG4gICAgICAgICAgICAvLyAtIGl0cyBuZXR3b3JrIGlzIGVuYWJsZWQgYW5kIHRoZSBjbGllbnQncyB0YWIgaXMgaW4gdGhlIGZvcmVncm91bmQuXG4gICAgICAgICAgICAvLyAtIGl0cyBuZXR3b3JrIGlzIGVuYWJsZWQgYW5kIG5vIG90aGVyIGNsaWVudCdzIHRhYiBpcyBpbiB0aGVcbiAgICAgICAgICAgIC8vICAgZm9yZWdyb3VuZC5cbiAgICAgICAgICAgIC8vIC0gZXZlcnkgY2xpZW50cyBuZXR3b3JrIGlzIGRpc2FibGVkIGFuZCB0aGUgY2xpZW50J3MgdGFiIGlzIGluIHRoZVxuICAgICAgICAgICAgLy8gICBmb3JlZ3JvdW5kLlxuICAgICAgICAgICAgLy8gLSBldmVyeSBjbGllbnRzIG5ldHdvcmsgaXMgZGlzYWJsZWQgYW5kIG5vIG90aGVyIGNsaWVudCdzIHRhYiBpcyBpblxuICAgICAgICAgICAgLy8gICB0aGUgZm9yZWdyb3VuZC5cbiAgICAgICAgICAgIC8vIC0gdGhlIGBmb3JjZU93bmluZ1RhYmAgc2V0dGluZyB3YXMgcGFzc2VkIGluLlxuICAgICAgICAgICAgaWYgKG51bGwgIT09IHQgJiYgdGhpcy5DaSh0LmxlYXNlVGltZXN0YW1wTXMsIDVlMykgJiYgIXRoaXMuTWkodC5vd25lcklkKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLlNpKHQpICYmIHRoaXMubmV0d29ya0VuYWJsZWQpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuU2kodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmFsbG93VGFiU3luY2hyb25pemF0aW9uKSBcbiAgICAgICAgICAgICAgICAgICAgLy8gRmFpbCB0aGUgYGNhbkFjdEFzUHJpbWFyeWAgY2hlY2sgaWYgdGhlIGN1cnJlbnQgbGVhc2Vob2xkZXIgaGFzXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBvcHRlZCBpbnRvIG11bHRpLXRhYiBzeW5jaHJvbml6YXRpb24uIElmIHRoaXMgaGFwcGVucyBhdFxuICAgICAgICAgICAgICAgICAgICAvLyBjbGllbnQgc3RhcnR1cCwgd2UgcmVqZWN0IHRoZSBQcm9taXNlIHJldHVybmVkIGJ5XG4gICAgICAgICAgICAgICAgICAgIC8vIGBlbmFibGVQZXJzaXN0ZW5jZSgpYCBhbmQgdGhlIHVzZXIgY2FuIGNvbnRpbnVlIHRvIHVzZSBGaXJlc3RvcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCBpbi1tZW1vcnkgcGVyc2lzdGVuY2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgZmFpbHMgZHVyaW5nIGEgbGVhc2UgcmVmcmVzaCwgd2Ugd2lsbCBpbnN0ZWFkIGJsb2NrIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBBc3luY1F1ZXVlIGZyb20gZXhlY3V0aW5nIGZ1cnRoZXIgb3BlcmF0aW9ucy4gTm90ZSB0aGF0IHRoaXMgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYWNjZXB0YWJsZSBzaW5jZSBtaXhpbmcgJiBtYXRjaGluZyBkaWZmZXJlbnQgYHN5bmNocm9uaXplVGFic2BcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0dGluZ3MgaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhiLzExNDIyNjIzNCk6IFJlbW92ZSB0aGlzIGNoZWNrIHdoZW4gYHN5bmNocm9uaXplVGFic2AgY2FuXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIGxvbmdlciBiZSB0dXJuZWQgb2ZmLlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5GQUlMRURfUFJFQ09ORElUSU9OLCBSZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gISghdGhpcy5uZXR3b3JrRW5hYmxlZCB8fCAhdGhpcy5pbkZvcmVncm91bmQpIHx8IF9fUFJJVkFURV9jbGllbnRNZXRhZGF0YVN0b3JlKGUpLlUoKS5uZXh0KChlID0+IHZvaWQgMCA9PT0gdGhpcy52aShlLCA1ZTMpLmZpbmQoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsaWVudElkICE9PSBlLmNsaWVudElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSAhdGhpcy5uZXR3b3JrRW5hYmxlZCAmJiBlLm5ldHdvcmtFbmFibGVkLCBuID0gIXRoaXMuaW5Gb3JlZ3JvdW5kICYmIGUuaW5Gb3JlZ3JvdW5kLCByID0gdGhpcy5uZXR3b3JrRW5hYmxlZCA9PT0gZS5uZXR3b3JrRW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgfHwgbiAmJiByKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICB9KSkubmV4dCgoZSA9PiAodGhpcy5pc1ByaW1hcnkgIT09IGUgJiYgX19QUklWQVRFX2xvZ0RlYnVnKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgYENsaWVudCAke2UgPyBcImlzXCIgOiBcImlzIG5vdFwifSBlbGlnaWJsZSBmb3IgYSBwcmltYXJ5IGxlYXNlLmApLCBcbiAgICAgICAgZSkpKTtcbiAgICB9XG4gICAgYXN5bmMgc2h1dGRvd24oKSB7XG4gICAgICAgIC8vIFRoZSBzaHV0ZG93bigpIG9wZXJhdGlvbnMgYXJlIGlkZW1wb3RlbnQgYW5kIGNhbiBiZSBjYWxsZWQgZXZlbiB3aGVuXG4gICAgICAgIC8vIHN0YXJ0KCkgYWJvcnRlZCAoZS5nLiBiZWNhdXNlIGl0IGNvdWxkbid0IGFjcXVpcmUgdGhlIHBlcnNpc3RlbmNlIGxlYXNlKS5cbiAgICAgICAgdGhpcy5xciA9ICExLCB0aGlzLnhpKCksIHRoaXMuaGkgJiYgKHRoaXMuaGkuY2FuY2VsKCksIHRoaXMuaGkgPSBudWxsKSwgdGhpcy5PaSgpLCBcbiAgICAgICAgdGhpcy5OaSgpLCBcbiAgICAgICAgLy8gVXNlIGBTaW1wbGVEYi5ydW5UcmFuc2FjdGlvbmAgZGlyZWN0bHkgdG8gYXZvaWQgZmFpbGluZyBpZiBhbm90aGVyIHRhYlxuICAgICAgICAvLyBoYXMgb2J0YWluZWQgdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgICAgIGF3YWl0IHRoaXMuRWkucnVuVHJhbnNhY3Rpb24oXCJzaHV0ZG93blwiLCBcInJlYWR3cml0ZVwiLCBbIFwib3duZXJcIiwgXCJjbGllbnRNZXRhZGF0YVwiIF0sIChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgX19QUklWQVRFX0luZGV4ZWREYlRyYW5zYWN0aW9uKGUsIF9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZS5vZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy55aSh0KS5uZXh0KCgoKSA9PiB0aGlzLmJpKHQpKSk7XG4gICAgICAgIH0pKSwgdGhpcy5FaS5jbG9zZSgpLCBcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBlbnRyeSBtYXJraW5nIHRoZSBjbGllbnQgYXMgem9tYmllZCBmcm9tIExvY2FsU3RvcmFnZSBzaW5jZVxuICAgICAgICAvLyB3ZSBzdWNjZXNzZnVsbHkgZGVsZXRlZCBpdHMgbWV0YWRhdGEgZnJvbSBJbmRleGVkRGIuXG4gICAgICAgIHRoaXMuTGkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjbGllbnRzIHRoYXQgYXJlIG5vdCB6b21iaWVkIGFuZCBoYXZlIGFuIHVwZGF0ZVRpbWUgd2l0aGluIHRoZVxuICAgICAqIHByb3ZpZGVkIHRocmVzaG9sZC5cbiAgICAgKi8gICAgdmkoZSwgdCkge1xuICAgICAgICByZXR1cm4gZS5maWx0ZXIoKGUgPT4gdGhpcy5DaShlLnVwZGF0ZVRpbWVNcywgdCkgJiYgIXRoaXMuTWkoZS5jbGllbnRJZCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSURzIG9mIHRoZSBjbGllbnRzIHRoYXQgYXJlIGN1cnJlbnRseSBhY3RpdmUuIElmIG11bHRpLXRhYlxuICAgICAqIGlzIG5vdCBzdXBwb3J0ZWQsIHJldHVybnMgYW4gYXJyYXkgdGhhdCBvbmx5IGNvbnRhaW5zIHRoZSBsb2NhbCBjbGllbnQnc1xuICAgICAqIElELlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi8gICAgQmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1blRyYW5zYWN0aW9uKFwiZ2V0QWN0aXZlQ2xpZW50c1wiLCBcInJlYWRvbmx5XCIsIChlID0+IF9fUFJJVkFURV9jbGllbnRNZXRhZGF0YVN0b3JlKGUpLlUoKS5uZXh0KChlID0+IHRoaXMudmkoZSwgMThlNSkubWFwKChlID0+IGUuY2xpZW50SWQpKSkpKSk7XG4gICAgfVxuICAgIGdldCBzdGFydGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xcjtcbiAgICB9XG4gICAgZ2V0TXV0YXRpb25RdWV1ZShlLCB0KSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfSW5kZXhlZERiTXV0YXRpb25RdWV1ZS5sdChlLCB0aGlzLnNlcmlhbGl6ZXIsIHQsIHRoaXMucmVmZXJlbmNlRGVsZWdhdGUpO1xuICAgIH1cbiAgICBnZXRUYXJnZXRDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUXI7XG4gICAgfVxuICAgIGdldFJlbW90ZURvY3VtZW50Q2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGU7XG4gICAgfVxuICAgIGdldEluZGV4TWFuYWdlcihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX0luZGV4ZWREYkluZGV4TWFuYWdlcihlLCB0aGlzLnNlcmlhbGl6ZXIuY3QuZGF0YWJhc2VJZCk7XG4gICAgfVxuICAgIGdldERvY3VtZW50T3ZlcmxheUNhY2hlKGUpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9JbmRleGVkRGJEb2N1bWVudE92ZXJsYXlDYWNoZS5sdCh0aGlzLnNlcmlhbGl6ZXIsIGUpO1xuICAgIH1cbiAgICBnZXRCdW5kbGVDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHI7XG4gICAgfVxuICAgIHJ1blRyYW5zYWN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJTdGFydGluZyB0cmFuc2FjdGlvbjpcIiwgZSk7XG4gICAgICAgIGNvbnN0IHIgPSBcInJlYWRvbmx5XCIgPT09IHQgPyBcInJlYWRvbmx5XCIgOiBcInJlYWR3cml0ZVwiLCBpID0gXG4gICAgICAgIC8qKiBSZXR1cm5zIHRoZSBvYmplY3Qgc3RvcmVzIGZvciB0aGUgcHJvdmlkZWQgc2NoZW1hLiAqL1xuICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfZ2V0T2JqZWN0U3RvcmVzKGUpIHtcbiAgICAgICAgICAgIHJldHVybiAxNiA9PT0gZSA/IHRlIDogMTUgPT09IGUgPyBlZSA6IDE0ID09PSBlID8gWCA6IDEzID09PSBlID8gWiA6IDEyID09PSBlID8gWSA6IDExID09PSBlID8gSiA6IHZvaWQgZmFpbCgpO1xuICAgICAgICB9KHRoaXMudWkpO1xuICAgICAgICBsZXQgcztcbiAgICAgICAgLy8gRG8gYWxsIHRyYW5zYWN0aW9ucyBhcyByZWFkd3JpdGUgYWdhaW5zdCBhbGwgb2JqZWN0IHN0b3Jlcywgc2luY2Ugd2VcbiAgICAgICAgLy8gYXJlIHRoZSBvbmx5IHJlYWRlci93cml0ZXIuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuRWkucnVuVHJhbnNhY3Rpb24oZSwgciwgaSwgKHIgPT4gKHMgPSBuZXcgX19QUklWQVRFX0luZGV4ZWREYlRyYW5zYWN0aW9uKHIsIHRoaXMua3IgPyB0aGlzLmtyLm5leHQoKSA6IF9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZS5vZSksIFxuICAgICAgICBcInJlYWR3cml0ZS1wcmltYXJ5XCIgPT09IHQgPyB0aGlzLmdpKHMpLm5leHQoKGUgPT4gISFlIHx8IHRoaXMucGkocykpKS5uZXh0KCh0ID0+IHtcbiAgICAgICAgICAgIGlmICghdCkgdGhyb3cgX19QUklWQVRFX2xvZ0Vycm9yKGBGYWlsZWQgdG8gb2J0YWluIHByaW1hcnkgbGVhc2UgZm9yIGFjdGlvbiAnJHtlfScuYCksIFxuICAgICAgICAgICAgdGhpcy5pc1ByaW1hcnkgPSAhMSwgdGhpcy5vaS5lbnF1ZXVlUmV0cnlhYmxlKCgoKSA9PiB0aGlzLklpKCExKSkpLCBuZXcgRmlyZXN0b3JlRXJyb3IoQy5GQUlMRURfUFJFQ09ORElUSU9OLCBGKTtcbiAgICAgICAgICAgIHJldHVybiBuKHMpO1xuICAgICAgICB9KSkubmV4dCgoZSA9PiB0aGlzLndpKHMpLm5leHQoKCgpID0+IGUpKSkpIDogdGhpcy5raShzKS5uZXh0KCgoKSA9PiBuKHMpKSkpKSkudGhlbigoZSA9PiAocy5yYWlzZU9uQ29tbWl0dGVkRXZlbnQoKSwgXG4gICAgICAgIGUpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgdGhlIGN1cnJlbnQgdGFiIGlzIHRoZSBwcmltYXJ5IGxlYXNlaG9sZGVyIG9yIGFsdGVybmF0aXZlbHlcbiAgICAgKiB0aGF0IHRoZSBsZWFzZWhvbGRlciBoYXMgb3B0ZWQgaW50byBtdWx0aS10YWIgc3luY2hyb25pemF0aW9uLlxuICAgICAqL1xuICAgIC8vIFRPRE8oYi8xMTQyMjYyMzQpOiBSZW1vdmUgdGhpcyBjaGVjayB3aGVuIGBzeW5jaHJvbml6ZVRhYnNgIGNhbiBubyBsb25nZXJcbiAgICAvLyBiZSB0dXJuZWQgb2ZmLlxuICAgIGtpKGUpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9wcmltYXJ5Q2xpZW50U3RvcmUoZSkuZ2V0KFwib3duZXJcIikubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gZSAmJiB0aGlzLkNpKGUubGVhc2VUaW1lc3RhbXBNcywgNWUzKSAmJiAhdGhpcy5NaShlLm93bmVySWQpICYmICF0aGlzLlNpKGUpICYmICEodGhpcy5haSB8fCB0aGlzLmFsbG93VGFiU3luY2hyb25pemF0aW9uICYmIGUuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5GQUlMRURfUFJFQ09ORElUSU9OLCBSZSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT2J0YWlucyBvciBleHRlbmRzIHRoZSBuZXcgcHJpbWFyeSBsZWFzZSBmb3IgdGhlIGxvY2FsIGNsaWVudC4gVGhpc1xuICAgICAqIG1ldGhvZCBkb2VzIG5vdCB2ZXJpZnkgdGhhdCB0aGUgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGlzIGxlYXNlLlxuICAgICAqLyAgICB3aShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB7XG4gICAgICAgICAgICBvd25lcklkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgYWxsb3dUYWJTeW5jaHJvbml6YXRpb246IHRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24sXG4gICAgICAgICAgICBsZWFzZVRpbWVzdGFtcE1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfcHJpbWFyeUNsaWVudFN0b3JlKGUpLnB1dChcIm93bmVyXCIsIHQpO1xuICAgIH1cbiAgICBzdGF0aWMgRCgpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9TaW1wbGVEYi5EKCk7XG4gICAgfVxuICAgIC8qKiBDaGVja3MgdGhlIHByaW1hcnkgbGVhc2UgYW5kIHJlbW92ZXMgaXQgaWYgd2UgYXJlIHRoZSBjdXJyZW50IHByaW1hcnkuICovICAgIHlpKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9wcmltYXJ5Q2xpZW50U3RvcmUoZSk7XG4gICAgICAgIHJldHVybiB0LmdldChcIm93bmVyXCIpLm5leHQoKGUgPT4gdGhpcy5TaShlKSA/IChfX1BSSVZBVEVfbG9nRGVidWcoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIlJlbGVhc2luZyBwcmltYXJ5IGxlYXNlLlwiKSwgXG4gICAgICAgIHQuZGVsZXRlKFwib3duZXJcIikpIDogUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKSkpO1xuICAgIH1cbiAgICAvKiogVmVyaWZpZXMgdGhhdCBgdXBkYXRlVGltZU1zYCBpcyB3aXRoaW4gYG1heEFnZU1zYC4gKi8gICAgQ2koZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuICEoZSA8IG4gLSB0KSAmJiAoIShlID4gbikgfHwgKF9fUFJJVkFURV9sb2dFcnJvcihgRGV0ZWN0ZWQgYW4gdXBkYXRlIHRpbWUgdGhhdCBpcyBpbiB0aGUgZnV0dXJlOiAke2V9ID4gJHtufWApLCBcbiAgICAgICAgITEpKTtcbiAgICB9XG4gICAgUmkoKSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMuZG9jdW1lbnQgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJiYgKHRoaXMubGkgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9pLmVucXVldWVBbmRGb3JnZXQoKCgpID0+ICh0aGlzLmluRm9yZWdyb3VuZCA9IFwidmlzaWJsZVwiID09PSB0aGlzLmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSwgXG4gICAgICAgICAgICB0aGlzLkFpKCkpKSk7XG4gICAgICAgIH0sIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5saSksIHRoaXMuaW5Gb3JlZ3JvdW5kID0gXCJ2aXNpYmxlXCIgPT09IHRoaXMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlKTtcbiAgICB9XG4gICAgT2koKSB7XG4gICAgICAgIHRoaXMubGkgJiYgKHRoaXMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5saSksIHRoaXMubGkgPSBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSB3aW5kb3cudW5sb2FkIGhhbmRsZXIgdGhhdCB3aWxsIHN5bmNocm9ub3VzbHkgd3JpdGUgb3VyXG4gICAgICogY2xpZW50SWQgdG8gYSBcInpvbWJpZSBjbGllbnQgaWRcIiBsb2NhdGlvbiBpbiBMb2NhbFN0b3JhZ2UuIFRoaXMgY2FuIGJlIHVzZWRcbiAgICAgKiBieSB0YWJzIHRyeWluZyB0byBhY3F1aXJlIHRoZSBwcmltYXJ5IGxlYXNlIHRvIGRldGVybWluZSB0aGF0IHRoZSBsZWFzZVxuICAgICAqIGlzIG5vIGxvbmdlciB2YWxpZCBldmVuIGlmIHRoZSB0aW1lc3RhbXAgaXMgcmVjZW50LiBUaGlzIGlzIHBhcnRpY3VsYXJseVxuICAgICAqIGltcG9ydGFudCBmb3IgdGhlIHJlZnJlc2ggY2FzZSAoc28gdGhlIHRhYiBjb3JyZWN0bHkgcmUtYWNxdWlyZXMgdGhlXG4gICAgICogcHJpbWFyeSBsZWFzZSkuIExvY2FsU3RvcmFnZSBpcyB1c2VkIGZvciB0aGlzIHJhdGhlciB0aGFuIEluZGV4ZWREYiBiZWNhdXNlXG4gICAgICogaXQgaXMgYSBzeW5jaHJvbm91cyBBUEkgYW5kIHNvIGNhbiBiZSB1c2VkIHJlbGlhYmx5IGZyb20gIGFuIHVubG9hZFxuICAgICAqIGhhbmRsZXIuXG4gICAgICovICAgIFZpKCkge1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiAobnVsbCA9PT0gKGUgPSB0aGlzLndpbmRvdykgfHwgdm9pZCAwID09PSBlID8gdm9pZCAwIDogZS5hZGRFdmVudExpc3RlbmVyKSAmJiAodGhpcy5jaSA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIE5vdGU6IEluIHRoZW9yeSwgdGhpcyBzaG91bGQgYmUgc2NoZWR1bGVkIG9uIHRoZSBBc3luY1F1ZXVlIHNpbmNlIGl0XG4gICAgICAgICAgICAvLyBhY2Nlc3NlcyBpbnRlcm5hbCBzdGF0ZS4gV2UgZXhlY3V0ZSB0aGlzIGNvZGUgZGlyZWN0bHkgZHVyaW5nIHNodXRkb3duXG4gICAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBhIGNoYW5jZSB0byBydW4uXG4gICAgICAgICAgICB0aGlzLnhpKCk7XG4gICAgICAgICAgICBjb25zdCBlID0gLyg/OlZlcnNpb258TW9iaWxlKVxcLzFbNDU2XS87XG4gICAgICAgICAgICB1dGlsLmlzU2FmYXJpKCkgJiYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKGUpIHx8IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goZSkpICYmIFxuICAgICAgICAgICAgLy8gT24gU2FmYXJpIDE0LCAxNSwgYW5kIDE2LCB3ZSBkbyBub3QgcnVuIGFueSBjbGVhbnVwIGFjdGlvbnMgYXMgaXQgbWlnaHRcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgYSBidWcgdGhhdCBwcmV2ZW50cyBTYWZhcmkgZnJvbSByZS1vcGVuaW5nIEluZGV4ZWREQiBkdXJpbmdcbiAgICAgICAgICAgIC8vIHRoZSBuZXh0IHBhZ2UgbG9hZC5cbiAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjI2NTQ3XG4gICAgICAgICAgICB0aGlzLm9pLmVudGVyUmVzdHJpY3RlZE1vZGUoLyogcHVyZ2VFeGlzdGluZ1Rhc2tzPSAqLyAhMCksIHRoaXMub2kuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gdGhpcy5zaHV0ZG93bigpKSk7XG4gICAgICAgIH0sIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCB0aGlzLmNpKSk7XG4gICAgfVxuICAgIE5pKCkge1xuICAgICAgICB0aGlzLmNpICYmICh0aGlzLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgdGhpcy5jaSksIHRoaXMuY2kgPSBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgY2xpZW50IGlzIFwiem9tYmllZFwiIGJhc2VkIG9uIGl0cyBMb2NhbFN0b3JhZ2UgZW50cnkuXG4gICAgICogQ2xpZW50cyBiZWNvbWUgem9tYmllZCB3aGVuIHRoZWlyIHRhYiBjbG9zZXMgd2l0aG91dCBydW5uaW5nIGFsbCBvZiB0aGVcbiAgICAgKiBjbGVhbnVwIGxvZ2ljIGluIGBzaHV0ZG93bigpYC5cbiAgICAgKi8gICAgTWkoZSkge1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBudWxsICE9PSAobnVsbCA9PT0gKHQgPSB0aGlzLmRpKSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LmdldEl0ZW0odGhpcy5GaShlKSkpO1xuICAgICAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIGBDbGllbnQgJyR7ZX0nICR7biA/IFwiaXNcIiA6IFwiaXMgbm90XCJ9IHpvbWJpZWQgaW4gTG9jYWxTdG9yYWdlYCksIFxuICAgICAgICAgICAgbjtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gR3JhY2VmdWxseSBoYW5kbGUgaWYgTG9jYWxTdG9yYWdlIGlzbid0IHdvcmtpbmcuXG4gICAgICAgICAgICByZXR1cm4gX19QUklWQVRFX2xvZ0Vycm9yKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJGYWlsZWQgdG8gZ2V0IHpvbWJpZWQgY2xpZW50IGlkLlwiLCBlKSwgXG4gICAgICAgICAgICAhMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvcmQgY2xpZW50IGFzIHpvbWJpZWQgKGEgY2xpZW50IHRoYXQgaGFkIGl0cyB0YWIgY2xvc2VkKS4gWm9tYmllZFxuICAgICAqIGNsaWVudHMgYXJlIGlnbm9yZWQgZHVyaW5nIHByaW1hcnkgdGFiIHNlbGVjdGlvbi5cbiAgICAgKi8gICAgeGkoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpKSB0cnkge1xuICAgICAgICAgICAgdGhpcy5kaS5zZXRJdGVtKHRoaXMuRmkodGhpcy5jbGllbnRJZCksIFN0cmluZyhEYXRlLm5vdygpKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEdyYWNlZnVsbHkgaGFuZGxlIGlmIExvY2FsU3RvcmFnZSBpc24ndCBhdmFpbGFibGUgLyB3b3JraW5nLlxuICAgICAgICAgICAgX19QUklWQVRFX2xvZ0Vycm9yKFwiRmFpbGVkIHRvIHNldCB6b21iaWUgY2xpZW50IGlkLlwiLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogUmVtb3ZlcyB0aGUgem9tYmllZCBjbGllbnQgZW50cnkgaWYgaXQgZXhpc3RzLiAqLyAgICBMaSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGkpIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRpLnJlbW92ZUl0ZW0odGhpcy5GaSh0aGlzLmNsaWVudElkKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZVxuICAgICAgICB9XG4gICAgfVxuICAgIEZpKGUpIHtcbiAgICAgICAgcmV0dXJuIGBmaXJlc3RvcmVfem9tYmllXyR7dGhpcy5wZXJzaXN0ZW5jZUtleX1fJHtlfWA7XG4gICAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgcHJpbWFyeSBjbGllbnQgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9wcmltYXJ5Q2xpZW50U3RvcmUoZSkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfZ2V0U3RvcmUoZSwgXCJvd25lclwiKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGNsaWVudCBtZXRhZGF0YSBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2NsaWVudE1ldGFkYXRhU3RvcmUoZSkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfZ2V0U3RvcmUoZSwgXCJjbGllbnRNZXRhZGF0YVwiKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzdHJpbmcgdXNlZCBhcyBhIHByZWZpeCB3aGVuIHN0b3JpbmcgZGF0YSBpbiBJbmRleGVkREIgYW5kXG4gKiBMb2NhbFN0b3JhZ2UuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2luZGV4ZWREYlN0b3JhZ2VQcmVmaXgoZSwgdCkge1xuICAgIC8vIFVzZSB0d28gZGlmZmVyZW50IHByZWZpeCBmb3JtYXRzOlxuICAgIC8vICAgKiBmaXJlc3RvcmUgLyBwZXJzaXN0ZW5jZUtleSAvIHByb2plY3RJRCAuIGRhdGFiYXNlSUQgLyAuLi5cbiAgICAvLyAgICogZmlyZXN0b3JlIC8gcGVyc2lzdGVuY2VLZXkgLyBwcm9qZWN0SUQgLyAuLi5cbiAgICAvLyBwcm9qZWN0SURzIGFyZSBETlMtY29tcGF0aWJsZSBuYW1lcyBhbmQgY2Fubm90IGNvbnRhaW4gZG90c1xuICAgIC8vIHNvIHRoZXJlJ3Mgbm8gZGFuZ2VyIG9mIGNvbGxpc2lvbnMuXG4gICAgbGV0IG4gPSBlLnByb2plY3RJZDtcbiAgICByZXR1cm4gZS5pc0RlZmF1bHREYXRhYmFzZSB8fCAobiArPSBcIi5cIiArIGUuZGF0YWJhc2UpLCBcImZpcmVzdG9yZS9cIiArIHQgKyBcIi9cIiArIG4gKyBcIi9cIjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBzZXQgb2YgY2hhbmdlcyB0byB3aGF0IGRvY3VtZW50cyBhcmUgY3VycmVudGx5IGluIHZpZXcgYW5kIG91dCBvZiB2aWV3IGZvclxuICogYSBnaXZlbiBxdWVyeS4gVGhlc2UgY2hhbmdlcyBhcmUgc2VudCB0byB0aGUgTG9jYWxTdG9yZSBieSB0aGUgVmlldyAodmlhXG4gKiB0aGUgU3luY0VuZ2luZSkgYW5kIGFyZSB1c2VkIHRvIHBpbiAvIHVucGluIGRvY3VtZW50cyBhcyBhcHByb3ByaWF0ZS5cbiAqL1xuY2xhc3MgX19QUklWQVRFX0xvY2FsVmlld0NoYW5nZXMge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IGUsIHRoaXMuZnJvbUNhY2hlID0gdCwgdGhpcy5xaSA9IG4sIHRoaXMuUWkgPSByO1xuICAgIH1cbiAgICBzdGF0aWMgS2koZSwgdCkge1xuICAgICAgICBsZXQgbiA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpLCByID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0LmRvY0NoYW5nZXMpIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAwIC8qIENoYW5nZVR5cGUuQWRkZWQgKi8gOlxuICAgICAgICAgICAgbiA9IG4uYWRkKGUuZG9jLmtleSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gOlxuICAgICAgICAgICAgciA9IHIuYWRkKGUuZG9jLmtleSk7XG4gLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfTG9jYWxWaWV3Q2hhbmdlcyhlLCB0LmZyb21DYWNoZSwgbiwgcik7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIHRyYWNrZXIgdG8ga2VlcCBhIHJlY29yZCBvZiBpbXBvcnRhbnQgZGV0YWlscyBkdXJpbmcgZGF0YWJhc2UgbG9jYWwgcXVlcnlcbiAqIGV4ZWN1dGlvbi5cbiAqLyBjbGFzcyBRdWVyeUNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ291bnRzIHRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIHBhc3NlZCB0aHJvdWdoIGR1cmluZyBsb2NhbCBxdWVyeSBleGVjdXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9kb2N1bWVudFJlYWRDb3VudCA9IDA7XG4gICAgfVxuICAgIGdldCBkb2N1bWVudFJlYWRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50UmVhZENvdW50O1xuICAgIH1cbiAgICBpbmNyZW1lbnREb2N1bWVudFJlYWRDb3VudChlKSB7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50UmVhZENvdW50ICs9IGU7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGUgRmlyZXN0b3JlIHF1ZXJ5IGVuZ2luZS5cbiAqXG4gKiBGaXJlc3RvcmUgcXVlcmllcyBjYW4gYmUgZXhlY3V0ZWQgaW4gdGhyZWUgbW9kZXMuIFRoZSBRdWVyeSBFbmdpbmUgZGV0ZXJtaW5lc1xuICogd2hhdCBtb2RlIHRvIHVzZSBiYXNlZCBvbiB3aGF0IGRhdGEgaXMgcGVyc2lzdGVkLiBUaGUgbW9kZSBvbmx5IGRldGVybWluZXNcbiAqIHRoZSBydW50aW1lIGNvbXBsZXhpdHkgb2YgdGhlIHF1ZXJ5IC0gdGhlIHJlc3VsdCBzZXQgaXMgZXF1aXZhbGVudCBhY3Jvc3MgYWxsXG4gKiBpbXBsZW1lbnRhdGlvbnMuXG4gKlxuICogVGhlIFF1ZXJ5IGVuZ2luZSB3aWxsIHVzZSBpbmRleGVkLWJhc2VkIGV4ZWN1dGlvbiBpZiBhIHVzZXIgaGFzIGNvbmZpZ3VyZWRcbiAqIGFueSBpbmRleCB0aGF0IGNhbiBiZSB1c2VkIHRvIGV4ZWN1dGUgcXVlcnkgKHZpYSBgc2V0SW5kZXhDb25maWd1cmF0aW9uKClgKS5cbiAqIE90aGVyd2lzZSwgdGhlIGVuZ2luZSB3aWxsIHRyeSB0byBvcHRpbWl6ZSB0aGUgcXVlcnkgYnkgcmUtdXNpbmcgYSBwcmV2aW91c2x5XG4gKiBwZXJzaXN0ZWQgcXVlcnkgcmVzdWx0LiBJZiB0aGF0IGlzIG5vdCBwb3NzaWJsZSwgdGhlIHF1ZXJ5IHdpbGwgYmUgZXhlY3V0ZWRcbiAqIHZpYSBhIGZ1bGwgY29sbGVjdGlvbiBzY2FuLlxuICpcbiAqIEluZGV4LWJhc2VkIGV4ZWN1dGlvbiBpcyB0aGUgZGVmYXVsdCB3aGVuIGF2YWlsYWJsZS4gVGhlIHF1ZXJ5IGVuZ2luZVxuICogc3VwcG9ydHMgcGFydGlhbCBpbmRleGVkIGV4ZWN1dGlvbiBhbmQgbWVyZ2VzIHRoZSByZXN1bHQgZnJvbSB0aGUgaW5kZXhcbiAqIGxvb2t1cCB3aXRoIGRvY3VtZW50cyB0aGF0IGhhdmUgbm90IHlldCBiZWVuIGluZGV4ZWQuIFRoZSBpbmRleCBldmFsdWF0aW9uXG4gKiBtYXRjaGVzIHRoZSBiYWNrZW5kJ3MgZm9ybWF0IGFuZCBhcyBzdWNoLCB0aGUgU0RLIGNhbiB1c2UgaW5kZXhpbmcgZm9yIGFsbFxuICogcXVlcmllcyB0aGF0IHRoZSBiYWNrZW5kIHN1cHBvcnRzLlxuICpcbiAqIElmIG5vIGluZGV4IGV4aXN0cywgdGhlIHF1ZXJ5IGVuZ2luZSB0cmllcyB0byB0YWtlIGFkdmFudGFnZSBvZiB0aGUgdGFyZ2V0XG4gKiBkb2N1bWVudCBtYXBwaW5nIGluIHRoZSBUYXJnZXRDYWNoZS4gVGhlc2UgbWFwcGluZ3MgZXhpc3RzIGZvciBhbGwgcXVlcmllc1xuICogdGhhdCBoYXZlIGJlZW4gc3luY2VkIHdpdGggdGhlIGJhY2tlbmQgYXQgbGVhc3Qgb25jZSBhbmQgYWxsb3cgdGhlIHF1ZXJ5XG4gKiBlbmdpbmUgdG8gb25seSByZWFkIGRvY3VtZW50cyB0aGF0IHByZXZpb3VzbHkgbWF0Y2hlZCBhIHF1ZXJ5IHBsdXMgYW55XG4gKiBkb2N1bWVudHMgdGhhdCB3ZXJlIGVkaXRlZCBhZnRlciB0aGUgcXVlcnkgd2FzIGxhc3QgbGlzdGVuZWQgdG8uXG4gKlxuICogVGhlcmUgYXJlIHNvbWUgY2FzZXMgd2hlbiB0aGlzIG9wdGltaXphdGlvbiBpcyBub3QgZ3VhcmFudGVlZCB0byBwcm9kdWNlXG4gKiB0aGUgc2FtZSByZXN1bHRzIGFzIGZ1bGwgY29sbGVjdGlvbiBzY2Fucy4gSW4gdGhlc2UgY2FzZXMsIHF1ZXJ5XG4gKiBwcm9jZXNzaW5nIGZhbGxzIGJhY2sgdG8gZnVsbCBzY2Fucy4gVGhlc2UgY2FzZXMgYXJlOlxuICpcbiAqIC0gTGltaXQgcXVlcmllcyB3aGVyZSBhIGRvY3VtZW50IHRoYXQgbWF0Y2hlZCB0aGUgcXVlcnkgcHJldmlvdXNseSBubyBsb25nZXJcbiAqICAgbWF0Y2hlcyB0aGUgcXVlcnkuXG4gKlxuICogLSBMaW1pdCBxdWVyaWVzIHdoZXJlIGEgZG9jdW1lbnQgZWRpdCBtYXkgY2F1c2UgdGhlIGRvY3VtZW50IHRvIHNvcnQgYmVsb3dcbiAqICAgYW5vdGhlciBkb2N1bWVudCB0aGF0IGlzIGluIHRoZSBsb2NhbCBjYWNoZS5cbiAqXG4gKiAtIFF1ZXJpZXMgdGhhdCBoYXZlIG5ldmVyIGJlZW4gQ1VSUkVOVCBvciBmcmVlIG9mIGxpbWJvIGRvY3VtZW50cy5cbiAqL1xuY2xhc3MgX19QUklWQVRFX1F1ZXJ5RW5naW5lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy4kaSA9ICExLCB0aGlzLlVpID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICogU0RLIG9ubHkgZGVjaWRlcyB3aGV0aGVyIGl0IHNob3VsZCBjcmVhdGUgaW5kZXggd2hlbiBjb2xsZWN0aW9uIHNpemUgaXNcbiAgICAgICAgICogbGFyZ2VyIHRoYW4gdGhpcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuV2kgPSAxMDAsIHRoaXMuR2kgPSBcbiAgICAgICAgLyoqXG4gKiBUaGlzIGNvc3QgcmVwcmVzZW50cyB0aGUgZXZhbHVhdGlvbiByZXN1bHQgb2ZcbiAqICgoW2luZGV4LCBkb2NLZXldICsgW2RvY0tleSwgZG9jQ29udGVudF0pIHBlciBkb2N1bWVudCBpbiB0aGUgcmVzdWx0IHNldClcbiAqIC8gKFtkb2NLZXksIGRvY0NvbnRlbnRdIHBlciBkb2N1bWVudHMgaW4gZnVsbCBjb2xsZWN0aW9uIHNjYW4pIGNvbWluZyBmcm9tXG4gKiBleHBlcmltZW50IFtlbnRlciBQUiBleHBlcmltZW50IFVSTCBoZXJlXS5cbiAqL1xuICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfZ2V0RGVmYXVsdFJlbGF0aXZlSW5kZXhSZWFkQ29zdFBlckRvY3VtZW50KCkge1xuICAgICAgICAgICAgLy8gVGhlc2UgdmFsdWVzIHdlcmUgZGVyaXZlZCBmcm9tIGFuIGV4cGVyaW1lbnQgd2hlcmUgc2V2ZXJhbCBtZW1iZXJzIG9mIHRoZVxuICAgICAgICAgICAgLy8gRmlyZXN0b3JlIFNESyB0ZWFtIHJhbiBhIHBlcmZvcm1hbmNlIHRlc3QgaW4gdmFyaW91cyBlbnZpcm9ubWVudHMuXG4gICAgICAgICAgICAvLyBHb29nbGVycyBjYW4gc2VlIGIvMjk5Mjg0Mjg3IGZvciBkZXRhaWxzLlxuICAgICAgICAgICAgcmV0dXJuIHV0aWwuaXNTYWZhcmkoKSA/IDggOiBfX1BSSVZBVEVfZ2V0QW5kcm9pZFZlcnNpb24odXRpbC5nZXRVQSgpKSA+IDAgPyA2IDogNDtcbiAgICAgICAgfSgpO1xuICAgIH1cbiAgICAvKiogU2V0cyB0aGUgZG9jdW1lbnQgdmlldyB0byBxdWVyeSBhZ2FpbnN0LiAqLyAgICBpbml0aWFsaXplKGUsIHQpIHtcbiAgICAgICAgdGhpcy56aSA9IGUsIHRoaXMuaW5kZXhNYW5hZ2VyID0gdCwgdGhpcy4kaSA9ICEwO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhbGwgbG9jYWwgZG9jdW1lbnRzIG1hdGNoaW5nIHRoZSBzcGVjaWZpZWQgcXVlcnkuICovICAgIGdldERvY3VtZW50c01hdGNoaW5nUXVlcnkoZSwgdCwgbiwgcikge1xuICAgICAgICAvLyBTdG9yZXMgdGhlIHJlc3VsdCBmcm9tIGV4ZWN1dGluZyB0aGUgcXVlcnk7IHVzaW5nIHRoaXMgb2JqZWN0IGlzIG1vcmVcbiAgICAgICAgLy8gY29udmVuaWVudCB0aGFuIHBhc3NpbmcgdGhlIHJlc3VsdCBiZXR3ZWVuIHN0ZXBzIG9mIHRoZSBwZXJzaXN0ZW5jZVxuICAgICAgICAvLyB0cmFuc2FjdGlvbiBhbmQgaW1wcm92ZXMgcmVhZGFiaWxpdHkgY29tcGFyYXRpdmVseS5cbiAgICAgICAgY29uc3QgaSA9IHtcbiAgICAgICAgICAgIHJlc3VsdDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaShlLCB0KS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIGkucmVzdWx0ID0gZTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghaS5yZXN1bHQpIHJldHVybiB0aGlzLkhpKGUsIHQsIHIsIG4pLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGkucmVzdWx0ID0gZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLm5leHQoKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChpLnJlc3VsdCkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBRdWVyeUNvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5KaShlLCB0LCBuKS5uZXh0KChyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaS5yZXN1bHQgPSByLCB0aGlzLlVpKSByZXR1cm4gdGhpcy5ZaShlLCB0LCBuLCByLnNpemUpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoKCkgPT4gaS5yZXN1bHQpKTtcbiAgICB9XG4gICAgWWkoZSwgdCwgbiwgcikge1xuICAgICAgICByZXR1cm4gbi5kb2N1bWVudFJlYWRDb3VudCA8IHRoaXMuV2kgPyAoX19QUklWQVRFX2dldExvZ0xldmVsKCkgPD0gbG9nZ2VyLkxvZ0xldmVsLkRFQlVHICYmIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlF1ZXJ5RW5naW5lXCIsIFwiU0RLIHdpbGwgbm90IGNyZWF0ZSBjYWNoZSBpbmRleGVzIGZvciBxdWVyeTpcIiwgX19QUklWQVRFX3N0cmluZ2lmeVF1ZXJ5KHQpLCBcInNpbmNlIGl0IG9ubHkgY3JlYXRlcyBjYWNoZSBpbmRleGVzIGZvciBjb2xsZWN0aW9uIGNvbnRhaW5zXCIsIFwibW9yZSB0aGFuIG9yIGVxdWFsIHRvXCIsIHRoaXMuV2ksIFwiZG9jdW1lbnRzXCIpLCBcbiAgICAgICAgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKSkgOiAoX19QUklWQVRFX2dldExvZ0xldmVsKCkgPD0gbG9nZ2VyLkxvZ0xldmVsLkRFQlVHICYmIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlF1ZXJ5RW5naW5lXCIsIFwiUXVlcnk6XCIsIF9fUFJJVkFURV9zdHJpbmdpZnlRdWVyeSh0KSwgXCJzY2Fuc1wiLCBuLmRvY3VtZW50UmVhZENvdW50LCBcImxvY2FsIGRvY3VtZW50cyBhbmQgcmV0dXJuc1wiLCByLCBcImRvY3VtZW50cyBhcyByZXN1bHRzLlwiKSwgXG4gICAgICAgIG4uZG9jdW1lbnRSZWFkQ291bnQgPiB0aGlzLkdpICogciA/IChfX1BSSVZBVEVfZ2V0TG9nTGV2ZWwoKSA8PSBsb2dnZXIuTG9nTGV2ZWwuREVCVUcgJiYgX19QUklWQVRFX2xvZ0RlYnVnKFwiUXVlcnlFbmdpbmVcIiwgXCJUaGUgU0RLIGRlY2lkZXMgdG8gY3JlYXRlIGNhY2hlIGluZGV4ZXMgZm9yIHF1ZXJ5OlwiLCBfX1BSSVZBVEVfc3RyaW5naWZ5UXVlcnkodCksIFwiYXMgdXNpbmcgY2FjaGUgaW5kZXhlcyBtYXkgaGVscCBpbXByb3ZlIHBlcmZvcm1hbmNlLlwiKSwgXG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyLmNyZWF0ZVRhcmdldEluZGV4ZXMoZSwgX19QUklWQVRFX3F1ZXJ5VG9UYXJnZXQodCkpKSA6IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhbiBpbmRleGVkIHF1ZXJ5IHRoYXQgZXZhbHVhdGVzIHRoZSBxdWVyeSBiYXNlZCBvbiBhIGNvbGxlY3Rpb24nc1xuICAgICAqIHBlcnNpc3RlZCBpbmRleCB2YWx1ZXMuIFJldHVybnMgYG51bGxgIGlmIGFuIGluZGV4IGlzIG5vdCBhdmFpbGFibGUuXG4gICAgICovICAgIGppKGUsIHQpIHtcbiAgICAgICAgaWYgKF9fUFJJVkFURV9xdWVyeU1hdGNoZXNBbGxEb2N1bWVudHModCkpIFxuICAgICAgICAvLyBRdWVyaWVzIHRoYXQgbWF0Y2ggYWxsIGRvY3VtZW50cyBkb24ndCBiZW5lZml0IGZyb20gdXNpbmdcbiAgICAgICAgLy8ga2V5LWJhc2VkIGxvb2t1cHMuIEl0IGlzIG1vcmUgZWZmaWNpZW50IHRvIHNjYW4gYWxsIGRvY3VtZW50cyBpbiBhXG4gICAgICAgIC8vIGNvbGxlY3Rpb24sIHJhdGhlciB0aGFuIHRvIHBlcmZvcm0gaW5kaXZpZHVhbCBsb29rdXBzLlxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgIGxldCBuID0gX19QUklWQVRFX3F1ZXJ5VG9UYXJnZXQodCk7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4TWFuYWdlci5nZXRJbmRleFR5cGUoZSwgbikubmV4dCgociA9PiAwIC8qIEluZGV4VHlwZS5OT05FICovID09PSByID8gbnVsbCA6IChudWxsICE9PSB0LmxpbWl0ICYmIDEgLyogSW5kZXhUeXBlLlBBUlRJQUwgKi8gPT09IHIgJiYgKFxuICAgICAgICAvLyBXZSBjYW5ub3QgYXBwbHkgYSBsaW1pdCBmb3IgdGFyZ2V0cyB0aGF0IGFyZSBzZXJ2ZWQgdXNpbmcgYSBwYXJ0aWFsXG4gICAgICAgIC8vIGluZGV4LiBJZiBhIHBhcnRpYWwgaW5kZXggd2lsbCBiZSB1c2VkIHRvIHNlcnZlIHRoZSB0YXJnZXQsIHRoZVxuICAgICAgICAvLyBxdWVyeSBtYXkgcmV0dXJuIGEgc3VwZXJzZXQgb2YgZG9jdW1lbnRzIHRoYXQgbWF0Y2ggdGhlIHRhcmdldFxuICAgICAgICAvLyAoZS5nLiBpZiB0aGUgaW5kZXggZG9lc24ndCBpbmNsdWRlIGFsbCB0aGUgdGFyZ2V0J3MgZmlsdGVycyksIG9yXG4gICAgICAgIC8vIG1heSByZXR1cm4gdGhlIGNvcnJlY3Qgc2V0IG9mIGRvY3VtZW50cyBpbiB0aGUgd3Jvbmcgb3JkZXIgKGUuZy4gaWZcbiAgICAgICAgLy8gdGhlIGluZGV4IGRvZXNuJ3QgaW5jbHVkZSBhIHNlZ21lbnQgZm9yIG9uZSBvZiB0aGUgb3JkZXJCeXMpLlxuICAgICAgICAvLyBUaGVyZWZvcmUsIGEgbGltaXQgc2hvdWxkIG5vdCBiZSBhcHBsaWVkIGluIHN1Y2ggY2FzZXMuXG4gICAgICAgIHQgPSBfX1BSSVZBVEVfcXVlcnlXaXRoTGltaXQodCwgbnVsbCwgXCJGXCIgLyogTGltaXRUeXBlLkZpcnN0ICovKSwgbiA9IF9fUFJJVkFURV9xdWVyeVRvVGFyZ2V0KHQpKSwgXG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyLmdldERvY3VtZW50c01hdGNoaW5nVGFyZ2V0KGUsIG4pLm5leHQoKHIgPT4ge1xuICAgICAgICAgICAgY29uc3QgaSA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCguLi5yKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnppLmdldERvY3VtZW50cyhlLCBpKS5uZXh0KChyID0+IHRoaXMuaW5kZXhNYW5hZ2VyLmdldE1pbk9mZnNldChlLCBuKS5uZXh0KChuID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gdGhpcy5aaSh0LCByKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5YaSh0LCBzLCBpLCBuLnJlYWRUaW1lKSA/IHRoaXMuamkoZSwgX19QUklWQVRFX3F1ZXJ5V2l0aExpbWl0KHQsIG51bGwsIFwiRlwiIC8qIExpbWl0VHlwZS5GaXJzdCAqLykpIDogdGhpcy5lcyhlLCBzLCB0LCBuKTtcbiAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICB9KSkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcXVlcnkgYmFzZWQgb24gdGhlIHRhcmdldCdzIHBlcnNpc3RlZCBxdWVyeSBtYXBwaW5nLiBSZXR1cm5zXG4gICAgICogYG51bGxgIGlmIHRoZSBtYXBwaW5nIGlzIG5vdCBhdmFpbGFibGUgb3IgY2Fubm90IGJlIHVzZWQuXG4gICAgICovICAgIEhpKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9xdWVyeU1hdGNoZXNBbGxEb2N1bWVudHModCkgfHwgci5pc0VxdWFsKFNuYXBzaG90VmVyc2lvbi5taW4oKSkgPyBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShudWxsKSA6IHRoaXMuemkuZ2V0RG9jdW1lbnRzKGUsIG4pLm5leHQoKGkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMuWmkodCwgaSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5YaSh0LCBzLCBuLCByKSA/IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKG51bGwpIDogKF9fUFJJVkFURV9nZXRMb2dMZXZlbCgpIDw9IGxvZ2dlci5Mb2dMZXZlbC5ERUJVRyAmJiBfX1BSSVZBVEVfbG9nRGVidWcoXCJRdWVyeUVuZ2luZVwiLCBcIlJlLXVzaW5nIHByZXZpb3VzIHJlc3VsdCBmcm9tICVzIHRvIGV4ZWN1dGUgcXVlcnk6ICVzXCIsIHIudG9TdHJpbmcoKSwgX19QUklWQVRFX3N0cmluZ2lmeVF1ZXJ5KHQpKSwgXG4gICAgICAgICAgICB0aGlzLmVzKGUsIHMsIHQsIF9fUFJJVkFURV9uZXdJbmRleE9mZnNldFN1Y2Nlc3NvckZyb21SZWFkVGltZShyLCAtMSkpLm5leHQoKGUgPT4gZSkpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBRdWVyaWVzIHRoYXQgaGF2ZSBuZXZlciBzZWVuIGEgc25hcHNob3Qgd2l0aG91dCBsaW1ibyBmcmVlIGRvY3VtZW50c1xuICAgICAgICAvLyBzaG91bGQgYWxzbyBiZSBydW4gYXMgYSBmdWxsIGNvbGxlY3Rpb24gc2Nhbi5cbiAgICAgICAgfVxuICAgIC8qKiBBcHBsaWVzIHRoZSBxdWVyeSBmaWx0ZXIgYW5kIHNvcnRpbmcgdG8gdGhlIHByb3ZpZGVkIGRvY3VtZW50cy4gICovICAgIFppKGUsIHQpIHtcbiAgICAgICAgLy8gU29ydCB0aGUgZG9jdW1lbnRzIGFuZCByZS1hcHBseSB0aGUgcXVlcnkgZmlsdGVyIHNpbmNlIHByZXZpb3VzbHlcbiAgICAgICAgLy8gbWF0Y2hpbmcgZG9jdW1lbnRzIGRvIG5vdCBuZWNlc3NhcmlseSBzdGlsbCBtYXRjaCB0aGUgcXVlcnkuXG4gICAgICAgIGxldCBuID0gbmV3IFNvcnRlZFNldChfX1BSSVZBVEVfbmV3UXVlcnlDb21wYXJhdG9yKGUpKTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoKHQsIHIpID0+IHtcbiAgICAgICAgICAgIF9fUFJJVkFURV9xdWVyeU1hdGNoZXMoZSwgcikgJiYgKG4gPSBuLmFkZChyKSk7XG4gICAgICAgIH0pKSwgbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIGxpbWl0IHF1ZXJ5IG5lZWRzIHRvIGJlIHJlZmlsbGVkIGZyb20gY2FjaGUsIG1ha2luZyBpdFxuICAgICAqIGluZWxpZ2libGUgZm9yIGluZGV4LWZyZWUgZXhlY3V0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSBzb3J0ZWRQcmV2aW91c1Jlc3VsdHMgLSBUaGUgZG9jdW1lbnRzIHRoYXQgbWF0Y2hlZCB0aGUgcXVlcnkgd2hlbiBpdFxuICAgICAqIHdhcyBsYXN0IHN5bmNocm9uaXplZCwgc29ydGVkIGJ5IHRoZSBxdWVyeSdzIGNvbXBhcmF0b3IuXG4gICAgICogQHBhcmFtIHJlbW90ZUtleXMgLSBUaGUgZG9jdW1lbnQga2V5cyB0aGF0IG1hdGNoZWQgdGhlIHF1ZXJ5IGF0IHRoZSBsYXN0XG4gICAgICogc25hcHNob3QuXG4gICAgICogQHBhcmFtIGxpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiAtIFRoZSB2ZXJzaW9uIG9mIHRoZSBzbmFwc2hvdCB3aGVuIHRoZVxuICAgICAqIHF1ZXJ5IHdhcyBsYXN0IHN5bmNocm9uaXplZC5cbiAgICAgKi8gICAgWGkoZSwgdCwgbiwgcikge1xuICAgICAgICBpZiAobnVsbCA9PT0gZS5saW1pdCkgXG4gICAgICAgIC8vIFF1ZXJpZXMgd2l0aG91dCBsaW1pdHMgZG8gbm90IG5lZWQgdG8gYmUgcmVmaWxsZWQuXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgaWYgKG4uc2l6ZSAhPT0gdC5zaXplKSBcbiAgICAgICAgLy8gVGhlIHF1ZXJ5IG5lZWRzIHRvIGJlIHJlZmlsbGVkIGlmIGEgcHJldmlvdXNseSBtYXRjaGluZyBkb2N1bWVudCBub1xuICAgICAgICAvLyBsb25nZXIgbWF0Y2hlcy5cbiAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAvLyBMaW1pdCBxdWVyaWVzIGFyZSBub3QgZWxpZ2libGUgZm9yIGluZGV4LWZyZWUgcXVlcnkgZXhlY3V0aW9uIGlmIHRoZXJlIGlzXG4gICAgICAgIC8vIGEgcG90ZW50aWFsIHRoYXQgYW4gb2xkZXIgZG9jdW1lbnQgZnJvbSBjYWNoZSBub3cgc29ydHMgYmVmb3JlIGEgZG9jdW1lbnRcbiAgICAgICAgLy8gdGhhdCB3YXMgcHJldmlvdXNseSBwYXJ0IG9mIHRoZSBsaW1pdC4gVGhpcywgaG93ZXZlciwgY2FuIG9ubHkgaGFwcGVuIGlmXG4gICAgICAgIC8vIHRoZSBkb2N1bWVudCBhdCB0aGUgZWRnZSBvZiB0aGUgbGltaXQgZ29lcyBvdXQgb2YgbGltaXQuXG4gICAgICAgIC8vIElmIGEgZG9jdW1lbnQgdGhhdCBpcyBub3QgdGhlIGxpbWl0IGJvdW5kYXJ5IHNvcnRzIGRpZmZlcmVudGx5LFxuICAgICAgICAvLyB0aGUgYm91bmRhcnkgb2YgdGhlIGxpbWl0IGl0c2VsZiBkaWQgbm90IGNoYW5nZSBhbmQgZG9jdW1lbnRzIGZyb20gY2FjaGVcbiAgICAgICAgLy8gd2lsbCBjb250aW51ZSB0byBiZSBcInJlamVjdGVkXCIgYnkgdGhpcyBib3VuZGFyeS4gVGhlcmVmb3JlLCB3ZSBjYW4gaWdub3JlXG4gICAgICAgIC8vIGFueSBtb2RpZmljYXRpb25zIHRoYXQgZG9uJ3QgYWZmZWN0IHRoZSBsYXN0IGRvY3VtZW50LlxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBcIkZcIiAvKiBMaW1pdFR5cGUuRmlyc3QgKi8gPT09IGUubGltaXRUeXBlID8gdC5sYXN0KCkgOiB0LmZpcnN0KCk7XG4gICAgICAgIHJldHVybiAhIWkgJiYgKGkuaGFzUGVuZGluZ1dyaXRlcyB8fCBpLnZlcnNpb24uY29tcGFyZVRvKHIpID4gMCk7XG4gICAgfVxuICAgIEppKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9nZXRMb2dMZXZlbCgpIDw9IGxvZ2dlci5Mb2dMZXZlbC5ERUJVRyAmJiBfX1BSSVZBVEVfbG9nRGVidWcoXCJRdWVyeUVuZ2luZVwiLCBcIlVzaW5nIGZ1bGwgY29sbGVjdGlvbiBzY2FuIHRvIGV4ZWN1dGUgcXVlcnk6XCIsIF9fUFJJVkFURV9zdHJpbmdpZnlRdWVyeSh0KSksIFxuICAgICAgICB0aGlzLnppLmdldERvY3VtZW50c01hdGNoaW5nUXVlcnkoZSwgdCwgSW5kZXhPZmZzZXQubWluKCksIG4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21iaW5lcyB0aGUgcmVzdWx0cyBmcm9tIGFuIGluZGV4ZWQgZXhlY3V0aW9uIHdpdGggdGhlIHJlbWFpbmluZyBkb2N1bWVudHNcbiAgICAgKiB0aGF0IGhhdmUgbm90IHlldCBiZWVuIGluZGV4ZWQuXG4gICAgICovICAgIGVzKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgLy8gUmV0cmlldmUgYWxsIHJlc3VsdHMgZm9yIGRvY3VtZW50cyB0aGF0IHdlcmUgdXBkYXRlZCBzaW5jZSB0aGUgb2Zmc2V0LlxuICAgICAgICByZXR1cm4gdGhpcy56aS5nZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KGUsIG4sIHIpLm5leHQoKGUgPT4gKFxuICAgICAgICAvLyBNZXJnZSB3aXRoIGV4aXN0aW5nIHJlc3VsdHNcbiAgICAgICAgdC5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIGUgPSBlLmluc2VydCh0LmtleSwgdCk7XG4gICAgICAgIH0pKSwgZSkpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEltcGxlbWVudHMgYExvY2FsU3RvcmVgIGludGVyZmFjZS5cbiAqXG4gKiBOb3RlOiBzb21lIGZpZWxkIGRlZmluZWQgaW4gdGhpcyBjbGFzcyBtaWdodCBoYXZlIHB1YmxpYyBhY2Nlc3MgbGV2ZWwsIGJ1dFxuICogdGhlIGNsYXNzIGlzIG5vdCBleHBvcnRlZCBzbyB0aGV5IGFyZSBvbmx5IGFjY2Vzc2libGUgZnJvbSB0aGlzIG1vZHVsZS5cbiAqIFRoaXMgaXMgdXNlZnVsIHRvIGltcGxlbWVudCBvcHRpb25hbCBmZWF0dXJlcyAobGlrZSBidW5kbGVzKSBpbiBmcmVlXG4gKiBmdW5jdGlvbnMsIHN1Y2ggdGhhdCB0aGV5IGFyZSB0cmVlLXNoYWtlYWJsZS5cbiAqL1xuY2xhc3MgX19QUklWQVRFX0xvY2FsU3RvcmVJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogTWFuYWdlcyBvdXIgaW4tbWVtb3J5IG9yIGR1cmFibGUgcGVyc2lzdGVuY2UuICovXG4gICAgZSwgdCwgbiwgcikge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gZSwgdGhpcy50cyA9IHQsIHRoaXMuc2VyaWFsaXplciA9IHIsIFxuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBhIHRhcmdldElEIHRvIGRhdGEgYWJvdXQgaXRzIHRhcmdldC5cbiAgICAgICAgICpcbiAgICAgICAgICogUE9SVElORyBOT1RFOiBXZSBhcmUgdXNpbmcgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIG9uIFdlYiB0byBtYWtlIHJlLXJ1bnNcbiAgICAgICAgICogb2YgYGFwcGx5UmVtb3RlRXZlbnQoKWAgaWRlbXBvdGVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubnMgPSBuZXcgU29ydGVkTWFwKF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKSwgXG4gICAgICAgIC8qKiBNYXBzIGEgdGFyZ2V0IHRvIGl0cyB0YXJnZXRJRC4gKi9cbiAgICAgICAgLy8gVE9ETyh3dWFuZHkpOiBFdmFsdWF0ZSBpZiBUYXJnZXRJZCBjYW4gYmUgcGFydCBvZiBUYXJnZXQuXG4gICAgICAgIHRoaXMucnMgPSBuZXcgT2JqZWN0TWFwKChlID0+IF9fUFJJVkFURV9jYW5vbmlmeVRhcmdldChlKSksIF9fUFJJVkFURV90YXJnZXRFcXVhbHMpLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcGVyIGNvbGxlY3Rpb24gZ3JvdXAgaW5kZXggb2YgdGhlIGxhc3QgcmVhZCB0aW1lIHByb2Nlc3NlZCBieVxuICAgICAgICAgKiBgZ2V0TmV3RG9jdW1lbnRDaGFuZ2VzKClgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGZvciBtdWx0aS10YWIgc3luY2hyb25pemF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zcyA9IG5ldyBNYXAsIHRoaXMub3MgPSBlLmdldFJlbW90ZURvY3VtZW50Q2FjaGUoKSwgdGhpcy5RciA9IGUuZ2V0VGFyZ2V0Q2FjaGUoKSwgXG4gICAgICAgIHRoaXMuJHIgPSBlLmdldEJ1bmRsZUNhY2hlKCksIHRoaXMuX3Mobik7XG4gICAgfVxuICAgIF9zKGUpIHtcbiAgICAgICAgLy8gVE9ETyhpbmRleGluZyk6IEFkZCBzcGVjIHRlc3RzIHRoYXQgdGVzdCB0aGVzZSBjb21wb25lbnRzIGNoYW5nZSBhZnRlciBhXG4gICAgICAgIC8vIHVzZXIgY2hhbmdlXG4gICAgICAgIHRoaXMuZG9jdW1lbnRPdmVybGF5Q2FjaGUgPSB0aGlzLnBlcnNpc3RlbmNlLmdldERvY3VtZW50T3ZlcmxheUNhY2hlKGUpLCB0aGlzLmluZGV4TWFuYWdlciA9IHRoaXMucGVyc2lzdGVuY2UuZ2V0SW5kZXhNYW5hZ2VyKGUpLCBcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gdGhpcy5wZXJzaXN0ZW5jZS5nZXRNdXRhdGlvblF1ZXVlKGUsIHRoaXMuaW5kZXhNYW5hZ2VyKSwgdGhpcy5sb2NhbERvY3VtZW50cyA9IG5ldyBMb2NhbERvY3VtZW50c1ZpZXcodGhpcy5vcywgdGhpcy5tdXRhdGlvblF1ZXVlLCB0aGlzLmRvY3VtZW50T3ZlcmxheUNhY2hlLCB0aGlzLmluZGV4TWFuYWdlciksIFxuICAgICAgICB0aGlzLm9zLnNldEluZGV4TWFuYWdlcih0aGlzLmluZGV4TWFuYWdlciksIHRoaXMudHMuaW5pdGlhbGl6ZSh0aGlzLmxvY2FsRG9jdW1lbnRzLCB0aGlzLmluZGV4TWFuYWdlcik7XG4gICAgfVxuICAgIGNvbGxlY3RHYXJiYWdlKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJDb2xsZWN0IGdhcmJhZ2VcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAodCA9PiBlLmNvbGxlY3QodCwgdGhpcy5ucykpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9uZXdMb2NhbFN0b3JlKFxuLyoqIE1hbmFnZXMgb3VyIGluLW1lbW9yeSBvciBkdXJhYmxlIHBlcnNpc3RlbmNlLiAqL1xuZSwgdCwgbiwgcikge1xuICAgIHJldHVybiBuZXcgX19QUklWQVRFX0xvY2FsU3RvcmVJbXBsKGUsIHQsIG4sIHIpO1xufVxuXG4vKipcbiAqIFRlbGxzIHRoZSBMb2NhbFN0b3JlIHRoYXQgdGhlIGN1cnJlbnRseSBhdXRoZW50aWNhdGVkIHVzZXIgaGFzIGNoYW5nZWQuXG4gKlxuICogSW4gcmVzcG9uc2UgdGhlIGxvY2FsIHN0b3JlIHN3aXRjaGVzIHRoZSBtdXRhdGlvbiBxdWV1ZSB0byB0aGUgbmV3IHVzZXIgYW5kXG4gKiByZXR1cm5zIGFueSByZXN1bHRpbmcgZG9jdW1lbnQgY2hhbmdlcy5cbiAqL1xuLy8gUE9SVElORyBOT1RFOiBBbmRyb2lkIGFuZCBpT1Mgb25seSByZXR1cm4gdGhlIGRvY3VtZW50cyBhZmZlY3RlZCBieSB0aGVcbi8vIGNoYW5nZS5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlSGFuZGxlVXNlckNoYW5nZShlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgcmV0dXJuIGF3YWl0IG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJIYW5kbGUgdXNlciBjaGFuZ2VcIiwgXCJyZWFkb25seVwiLCAoZSA9PiB7XG4gICAgICAgIC8vIFN3YXAgb3V0IHRoZSBtdXRhdGlvbiBxdWV1ZSwgZ3JhYmJpbmcgdGhlIHBlbmRpbmcgbXV0YXRpb24gYmF0Y2hlc1xuICAgICAgICAvLyBiZWZvcmUgYW5kIGFmdGVyLlxuICAgICAgICBsZXQgcjtcbiAgICAgICAgcmV0dXJuIG4ubXV0YXRpb25RdWV1ZS5nZXRBbGxNdXRhdGlvbkJhdGNoZXMoZSkubmV4dCgoaSA9PiAociA9IGksIG4uX3ModCksIG4ubXV0YXRpb25RdWV1ZS5nZXRBbGxNdXRhdGlvbkJhdGNoZXMoZSkpKSkubmV4dCgodCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gW10sIHMgPSBbXTtcbiAgICAgICAgICAgIC8vIFVuaW9uIHRoZSBvbGQvbmV3IGNoYW5nZWQga2V5cy5cbiAgICAgICAgICAgIGxldCBvID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2Ygcikge1xuICAgICAgICAgICAgICAgIGkucHVzaChlLmJhdGNoSWQpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlLm11dGF0aW9ucykgbyA9IG8uYWRkKHQua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XG4gICAgICAgICAgICAgICAgcy5wdXNoKGUuYmF0Y2hJZCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGUubXV0YXRpb25zKSBvID0gby5hZGQodC5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBzZXQgb2YgYWxsIChwb3RlbnRpYWxseSkgY2hhbmdlZCBkb2N1bWVudHMgYW5kIHRoZSBsaXN0XG4gICAgICAgICAgICAvLyBvZiBtdXRhdGlvbiBiYXRjaCBJRHMgdGhhdCB3ZXJlIGFmZmVjdGVkIGJ5IGNoYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmxvY2FsRG9jdW1lbnRzLmdldERvY3VtZW50cyhlLCBvKS5uZXh0KChlID0+ICh7XG4gICAgICAgICAgICAgICAgdXM6IGUsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZEJhdGNoSWRzOiBpLFxuICAgICAgICAgICAgICAgIGFkZGVkQmF0Y2hJZHM6IHNcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qIEFjY2VwdHMgbG9jYWxseSBnZW5lcmF0ZWQgTXV0YXRpb25zIGFuZCBjb21taXQgdGhlbSB0byBzdG9yYWdlLiAqL1xuLyoqXG4gKiBBY2tub3dsZWRnZXMgdGhlIGdpdmVuIGJhdGNoLlxuICpcbiAqIE9uIHRoZSBoYXBweSBwYXRoIHdoZW4gYSBiYXRjaCBpcyBhY2tub3dsZWRnZWQsIHRoZSBsb2NhbCBzdG9yZSB3aWxsXG4gKlxuICogICsgcmVtb3ZlIHRoZSBiYXRjaCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZTtcbiAqICArIGFwcGx5IHRoZSBjaGFuZ2VzIHRvIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGU7XG4gKiAgKyByZWNhbGN1bGF0ZSB0aGUgbGF0ZW5jeSBjb21wZW5zYXRlZCB2aWV3IGltcGxpZWQgYnkgdGhvc2UgY2hhbmdlcyAodGhlcmVcbiAqICAgIG1heSBiZSBtdXRhdGlvbnMgaW4gdGhlIHF1ZXVlIHRoYXQgYWZmZWN0IHRoZSBkb2N1bWVudHMgYnV0IGhhdmVuJ3QgYmVlblxuICogICAgYWNrbm93bGVkZ2VkIHlldCk7IGFuZFxuICogICsgZ2l2ZSB0aGUgY2hhbmdlZCBkb2N1bWVudHMgYmFjayB0aGUgc3luYyBlbmdpbmVcbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIChtb2RpZmllZCkgZG9jdW1lbnRzLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZUFja25vd2xlZGdlQmF0Y2goZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiQWNrbm93bGVkZ2UgYmF0Y2hcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZSA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSB0LmJhdGNoLmtleXMoKSwgaSA9IG4ub3MubmV3Q2hhbmdlQnVmZmVyKHtcbiAgICAgICAgICAgIHRyYWNrUmVtb3ZhbHM6ICEwXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2FwcGx5V3JpdGVUb1JlbW90ZURvY3VtZW50cyhlLCB0LCBuLCByKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gbi5iYXRjaCwgcyA9IGkua2V5cygpO1xuICAgICAgICAgICAgbGV0IG8gPSBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHMuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgbyA9IG8ubmV4dCgoKCkgPT4gci5nZXRFbnRyeSh0LCBlKSkpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gbi5kb2NWZXJzaW9ucy5nZXQoZSk7XG4gICAgICAgICAgICAgICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KG51bGwgIT09IHMpLCB0LnZlcnNpb24uY29tcGFyZVRvKHMpIDwgMCAmJiAoaS5hcHBseVRvUmVtb3RlRG9jdW1lbnQodCwgbiksIFxuICAgICAgICAgICAgICAgICAgICB0LmlzVmFsaWREb2N1bWVudCgpICYmIChcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBjb21taXRWZXJzaW9uIGFzIHRoZSByZWFkVGltZSByYXRoZXIgdGhhbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQncyB1cGRhdGVUaW1lIHNpbmNlIHRoZSB1cGRhdGVUaW1lIGlzIG5vdCBhZHZhbmNlZFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdXBkYXRlcyB0aGF0IGRvIG5vdCBtb2RpZnkgdGhlIHVuZGVybHlpbmcgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0UmVhZFRpbWUobi5jb21taXRWZXJzaW9uKSwgci5hZGRFbnRyeSh0KSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKSwgby5uZXh0KCgoKSA9PiBlLm11dGF0aW9uUXVldWUucmVtb3ZlTXV0YXRpb25CYXRjaCh0LCBpKSkpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBSZXR1cm5zIHRoZSBsb2NhbCB2aWV3IG9mIHRoZSBkb2N1bWVudHMgYWZmZWN0ZWQgYnkgYSBtdXRhdGlvbiBiYXRjaC4gKi9cbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAgICAgKG4sIGUsIHQsIGkpLm5leHQoKCgpID0+IGkuYXBwbHkoZSkpKS5uZXh0KCgoKSA9PiBuLm11dGF0aW9uUXVldWUucGVyZm9ybUNvbnNpc3RlbmN5Q2hlY2soZSkpKS5uZXh0KCgoKSA9PiBuLmRvY3VtZW50T3ZlcmxheUNhY2hlLnJlbW92ZU92ZXJsYXlzRm9yQmF0Y2hJZChlLCByLCB0LmJhdGNoLmJhdGNoSWQpKSkubmV4dCgoKCkgPT4gbi5sb2NhbERvY3VtZW50cy5yZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5c0ZvckRvY3VtZW50S2V5cyhlLCBmdW5jdGlvbiBfX1BSSVZBVEVfZ2V0S2V5c1dpdGhUcmFuc2Zvcm1SZXN1bHRzKGUpIHtcbiAgICAgICAgICAgIGxldCB0ID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCk7XG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGUubXV0YXRpb25SZXN1bHRzLmxlbmd0aDsgKytuKSB7XG4gICAgICAgICAgICAgICAgZS5tdXRhdGlvblJlc3VsdHNbbl0udHJhbnNmb3JtUmVzdWx0cy5sZW5ndGggPiAwICYmICh0ID0gdC5hZGQoZS5iYXRjaC5tdXRhdGlvbnNbbl0ua2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJlbW92ZXMgbXV0YXRpb25zIGZyb20gdGhlIE11dGF0aW9uUXVldWUgZm9yIHRoZSBzcGVjaWZpZWQgYmF0Y2g7XG4gKiBMb2NhbERvY3VtZW50cyB3aWxsIGJlIHJlY2FsY3VsYXRlZC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIG1vZGlmaWVkIGRvY3VtZW50cy5cbiAqLyAodCkpKSkubmV4dCgoKCkgPT4gbi5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudHMoZSwgcikpKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGFzdCBjb25zaXN0ZW50IHNuYXBzaG90IHByb2Nlc3NlZCAodXNlZCBieSB0aGUgUmVtb3RlU3RvcmUgdG9cbiAqIGRldGVybWluZSB3aGV0aGVyIHRvIGJ1ZmZlciBpbmNvbWluZyBzbmFwc2hvdHMgZnJvbSB0aGUgYmFja2VuZCkuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlR2V0TGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbihlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgcmV0dXJuIHQucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJHZXQgbGFzdCByZW1vdGUgc25hcHNob3QgdmVyc2lvblwiLCBcInJlYWRvbmx5XCIsIChlID0+IHQuUXIuZ2V0TGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbihlKSkpO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIFwiZ3JvdW5kLXN0YXRlXCIgKHJlbW90ZSkgZG9jdW1lbnRzLiBXZSBhc3N1bWUgdGhhdCB0aGUgcmVtb3RlXG4gKiBldmVudCByZWZsZWN0cyBhbnkgd3JpdGUgYmF0Y2hlcyB0aGF0IGhhdmUgYmVlbiBhY2tub3dsZWRnZWQgb3IgcmVqZWN0ZWRcbiAqIChpLmUuIHdlIGRvIG5vdCByZS1hcHBseSBsb2NhbCBtdXRhdGlvbnMgdG8gdXBkYXRlcyBmcm9tIHRoaXMgZXZlbnQpLlxuICpcbiAqIExvY2FsRG9jdW1lbnRzIGFyZSByZS1jYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSByZW1haW5pbmcgbXV0YXRpb25zIGluIHRoZVxuICogcXVldWUuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2xvY2FsU3RvcmVBcHBseVJlbW90ZUV2ZW50VG9Mb2NhbENhY2hlKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgciA9IHQuc25hcHNob3RWZXJzaW9uO1xuICAgIGxldCBpID0gbi5ucztcbiAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkFwcGx5IHJlbW90ZSBldmVudFwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsIChlID0+IHtcbiAgICAgICAgY29uc3QgcyA9IG4ub3MubmV3Q2hhbmdlQnVmZmVyKHtcbiAgICAgICAgICAgIHRyYWNrUmVtb3ZhbHM6ICEwXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBSZXNldCBuZXdUYXJnZXREYXRhQnlUYXJnZXRNYXAgaW4gY2FzZSB0aGlzIHRyYW5zYWN0aW9uIGdldHMgcmUtcnVuLlxuICAgICAgICAgICAgICAgIGkgPSBuLm5zO1xuICAgICAgICBjb25zdCBvID0gW107XG4gICAgICAgIHQudGFyZ2V0Q2hhbmdlcy5mb3JFYWNoKCgocywgXykgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IGkuZ2V0KF8pO1xuICAgICAgICAgICAgaWYgKCFhKSByZXR1cm47XG4gICAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSB0aGUgcmVtb3RlIGtleXMgaWYgdGhlIHRhcmdldCBpcyBzdGlsbCBhY3RpdmUuIFRoaXNcbiAgICAgICAgICAgIC8vIGVuc3VyZXMgdGhhdCB3ZSBjYW4gcGVyc2lzdCB0aGUgdXBkYXRlZCB0YXJnZXQgZGF0YSBhbG9uZyB3aXRoXG4gICAgICAgICAgICAvLyB0aGUgdXBkYXRlZCBhc3NpZ25tZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgby5wdXNoKG4uUXIucmVtb3ZlTWF0Y2hpbmdLZXlzKGUsIHMucmVtb3ZlZERvY3VtZW50cywgXykubmV4dCgoKCkgPT4gbi5Rci5hZGRNYXRjaGluZ0tleXMoZSwgcy5hZGRlZERvY3VtZW50cywgXykpKSk7XG4gICAgICAgICAgICBsZXQgdSA9IGEud2l0aFNlcXVlbmNlTnVtYmVyKGUuY3VycmVudFNlcXVlbmNlTnVtYmVyKTtcbiAgICAgICAgICAgIG51bGwgIT09IHQudGFyZ2V0TWlzbWF0Y2hlcy5nZXQoXykgPyB1ID0gdS53aXRoUmVzdW1lVG9rZW4oQnl0ZVN0cmluZy5FTVBUWV9CWVRFX1NUUklORywgU25hcHNob3RWZXJzaW9uLm1pbigpKS53aXRoTGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbihTbmFwc2hvdFZlcnNpb24ubWluKCkpIDogcy5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkgPiAwICYmICh1ID0gdS53aXRoUmVzdW1lVG9rZW4ocy5yZXN1bWVUb2tlbiwgcikpLCBcbiAgICAgICAgICAgIGkgPSBpLmluc2VydChfLCB1KSwgXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRhcmdldCBkYXRhIGlmIHRoZXJlIGFyZSB0YXJnZXQgY2hhbmdlcyAob3IgaWZcbiAgICAgICAgICAgIC8vIHN1ZmZpY2llbnQgdGltZSBoYXMgcGFzc2VkIHNpbmNlIHRoZSBsYXN0IHVwZGF0ZSkuXG4gICAgICAgICAgICAvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbmV3VGFyZ2V0RGF0YSBzaG91bGQgYmUgcGVyc2lzdGVkIGR1cmluZyBhbiB1cGRhdGUgb2ZcbiAqIGFuIGFjdGl2ZSB0YXJnZXQuIFRhcmdldERhdGEgc2hvdWxkIGFsd2F5cyBiZSBwZXJzaXN0ZWQgd2hlbiBhIHRhcmdldCBpc1xuICogYmVpbmcgcmVsZWFzZWQgYW5kIHNob3VsZCBub3QgY2FsbCB0aGlzIGZ1bmN0aW9uLlxuICpcbiAqIFdoaWxlIHRoZSB0YXJnZXQgaXMgYWN0aXZlLCBUYXJnZXREYXRhIHVwZGF0ZXMgY2FuIGJlIG9taXR0ZWQgd2hlbiBub3RoaW5nXG4gKiBhYm91dCB0aGUgdGFyZ2V0IGhhcyBjaGFuZ2VkIGV4Y2VwdCBtZXRhZGF0YSBsaWtlIHRoZSByZXN1bWUgdG9rZW4gb3JcbiAqIHNuYXBzaG90IHZlcnNpb24uIE9jY2FzaW9uYWxseSBpdCdzIHdvcnRoIHRoZSBleHRyYSB3cml0ZSB0byBwcmV2ZW50IHRoZXNlXG4gKiB2YWx1ZXMgZnJvbSBnZXR0aW5nIHRvbyBzdGFsZSBhZnRlciBhIGNyYXNoLCBidXQgdGhpcyBkb2Vzbid0IGhhdmUgdG8gYmVcbiAqIHRvbyBmcmVxdWVudC5cbiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gX19QUklWQVRFX3Nob3VsZFBlcnNpc3RUYXJnZXREYXRhKGUsIHQsIG4pIHtcbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgcGVyc2lzdCB0YXJnZXQgZGF0YSBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgYSByZXN1bWUgdG9rZW4uXG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IGUucmVzdW1lVG9rZW4uYXBwcm94aW1hdGVCeXRlU2l6ZSgpKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgYWxsb3cgcmVzdW1lIHRva2VuIGNoYW5nZXMgdG8gYmUgYnVmZmVyZWQgaW5kZWZpbml0ZWx5LiBUaGlzXG4gICAgICAgICAgICAgICAgLy8gYWxsb3dzIHVzIHRvIGJlIHJlYXNvbmFibHkgdXAtdG8tZGF0ZSBhZnRlciBhIGNyYXNoIGFuZCBhdm9pZHMgbmVlZGluZ1xuICAgICAgICAgICAgICAgIC8vIHRvIGxvb3Agb3ZlciBhbGwgYWN0aXZlIHF1ZXJpZXMgb24gc2h1dGRvd24uIEVzcGVjaWFsbHkgaW4gdGhlIGJyb3dzZXJcbiAgICAgICAgICAgICAgICAvLyB3ZSBtYXkgbm90IGdldCB0aW1lIHRvIGRvIGFueXRoaW5nIGludGVyZXN0aW5nIHdoaWxlIHRoZSBjdXJyZW50IHRhYiBpc1xuICAgICAgICAgICAgICAgIC8vIGNsb3NpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnNuYXBzaG90VmVyc2lvbi50b01pY3Jvc2Vjb25kcygpIC0gZS5zbmFwc2hvdFZlcnNpb24udG9NaWNyb3NlY29uZHMoKSA+PSAzZTgpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgaWYgdGhlIG9ubHkgdGhpbmcgdGhhdCBoYXMgY2hhbmdlZCBhYm91dCBhIHRhcmdldCBpcyBpdHMgcmVzdW1lXG4gICAgICAgICAgICAgICAgLy8gdG9rZW4gaXQncyBub3Qgd29ydGggcGVyc2lzdGluZy4gTm90ZSB0aGF0IHRoZSBSZW1vdGVTdG9yZSBrZWVwcyBhblxuICAgICAgICAgICAgICAgIC8vIGluLW1lbW9yeSB2aWV3IG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRhcmdldHMgd2hpY2ggaW5jbHVkZXMgdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAvLyByZXN1bWUgdG9rZW4sIHNvIHN0cmVhbSBmYWlsdXJlIG9yIHVzZXIgY2hhbmdlcyB3aWxsIHN0aWxsIHVzZSBhblxuICAgICAgICAgICAgICAgIC8vIHVwLXRvLWRhdGUgcmVzdW1lIHRva2VuIHJlZ2FyZGxlc3Mgb2Ygd2hhdCB3ZSBkbyBoZXJlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5hZGRlZERvY3VtZW50cy5zaXplICsgbi5tb2RpZmllZERvY3VtZW50cy5zaXplICsgbi5yZW1vdmVkRG9jdW1lbnRzLnNpemUgPiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gKiBOb3RpZmllcyBsb2NhbCBzdG9yZSBvZiB0aGUgY2hhbmdlZCB2aWV3cyB0byBsb2NhbGx5IHBpbiBkb2N1bWVudHMuXG4gKi8gKGEsIHUsIHMpICYmIG8ucHVzaChuLlFyLnVwZGF0ZVRhcmdldERhdGEoZSwgdSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIGxldCBfID0gX19QUklWQVRFX211dGFibGVEb2N1bWVudE1hcCgpLCBhID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCk7XG4gICAgICAgIC8vIEhBQ0s6IFRoZSBvbmx5IHJlYXNvbiB3ZSBhbGxvdyBhIG51bGwgc25hcHNob3QgdmVyc2lvbiBpcyBzbyB0aGF0IHdlXG4gICAgICAgIC8vIGNhbiBzeW50aGVzaXplIHJlbW90ZSBldmVudHMgd2hlbiB3ZSBnZXQgcGVybWlzc2lvbiBkZW5pZWQgZXJyb3JzIHdoaWxlXG4gICAgICAgIC8vIHRyeWluZyB0byByZXNvbHZlIHRoZSBzdGF0ZSBvZiBhIGxvY2FsbHkgY2FjaGVkIGRvY3VtZW50IHRoYXQgaXMgaW5cbiAgICAgICAgLy8gbGltYm8uXG4gICAgICAgIGlmICh0LmRvY3VtZW50VXBkYXRlcy5mb3JFYWNoKChyID0+IHtcbiAgICAgICAgICAgIHQucmVzb2x2ZWRMaW1ib0RvY3VtZW50cy5oYXMocikgJiYgby5wdXNoKG4ucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUudXBkYXRlTGltYm9Eb2N1bWVudChlLCByKSk7XG4gICAgICAgIH0pKSwgXG4gICAgICAgIC8vIEVhY2ggbG9vcCBpdGVyYXRpb24gb25seSBhZmZlY3RzIGl0cyBcIm93blwiIGRvYywgc28gaXQncyBzYWZlIHRvIGdldCBhbGxcbiAgICAgICAgLy8gdGhlIHJlbW90ZSBkb2N1bWVudHMgaW4gYWR2YW5jZSBpbiBhIHNpbmdsZSBjYWxsLlxuICAgICAgICBvLnB1c2goX19QUklWQVRFX3BvcHVsYXRlRG9jdW1lbnRDaGFuZ2VCdWZmZXIoZSwgcywgdC5kb2N1bWVudFVwZGF0ZXMpLm5leHQoKGUgPT4ge1xuICAgICAgICAgICAgXyA9IGUuY3MsIGEgPSBlLmxzO1xuICAgICAgICB9KSkpLCAhci5pc0VxdWFsKFNuYXBzaG90VmVyc2lvbi5taW4oKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuLlFyLmdldExhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24oZSkubmV4dCgodCA9PiBuLlFyLnNldFRhcmdldHNNZXRhZGF0YShlLCBlLmN1cnJlbnRTZXF1ZW5jZU51bWJlciwgcikpKTtcbiAgICAgICAgICAgIG8ucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IobykubmV4dCgoKCkgPT4gcy5hcHBseShlKSkpLm5leHQoKCgpID0+IG4ubG9jYWxEb2N1bWVudHMuZ2V0TG9jYWxWaWV3T2ZEb2N1bWVudHMoZSwgXywgYSkpKS5uZXh0KCgoKSA9PiBfKSk7XG4gICAgfSkpLnRoZW4oKGUgPT4gKG4ubnMgPSBpLCBlKSkpO1xufVxuXG4vKipcbiAqIFBvcHVsYXRlcyBkb2N1bWVudCBjaGFuZ2UgYnVmZmVyIHdpdGggZG9jdW1lbnRzIGZyb20gYmFja2VuZCBvciBhIGJ1bmRsZS5cbiAqIFJldHVybnMgdGhlIGRvY3VtZW50IGNoYW5nZXMgcmVzdWx0aW5nIGZyb20gYXBwbHlpbmcgdGhvc2UgZG9jdW1lbnRzLCBhbmRcbiAqIGFsc28gYSBzZXQgb2YgZG9jdW1lbnRzIHdob3NlIGV4aXN0ZW5jZSBzdGF0ZSBhcmUgY2hhbmdlZCBhcyBhIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gdHhuIC0gVHJhbnNhY3Rpb24gdG8gdXNlIHRvIHJlYWQgZXhpc3RpbmcgZG9jdW1lbnRzIGZyb20gc3RvcmFnZS5cbiAqIEBwYXJhbSBkb2N1bWVudEJ1ZmZlciAtIERvY3VtZW50IGJ1ZmZlciB0byBjb2xsZWN0IHRoZSByZXN1bHRlZCBjaGFuZ2VzIHRvIGJlXG4gKiAgICAgICAgYXBwbGllZCB0byBzdG9yYWdlLlxuICogQHBhcmFtIGRvY3VtZW50cyAtIERvY3VtZW50cyB0byBiZSBhcHBsaWVkLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9wb3B1bGF0ZURvY3VtZW50Q2hhbmdlQnVmZmVyKGUsIHQsIG4pIHtcbiAgICBsZXQgciA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpLCBpID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCk7XG4gICAgcmV0dXJuIG4uZm9yRWFjaCgoZSA9PiByID0gci5hZGQoZSkpKSwgdC5nZXRFbnRyaWVzKGUsIHIpLm5leHQoKGUgPT4ge1xuICAgICAgICBsZXQgciA9IF9fUFJJVkFURV9tdXRhYmxlRG9jdW1lbnRNYXAoKTtcbiAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgoKG4sIHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG8gPSBlLmdldChuKTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHNlZSBpZiB0aGVyZSBpcyBhIGV4aXN0ZW5jZSBzdGF0ZSBjaGFuZ2UgZm9yIHRoaXMgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmlzRm91bmREb2N1bWVudCgpICE9PSBvLmlzRm91bmREb2N1bWVudCgpICYmIChpID0gaS5hZGQobikpLCBcbiAgICAgICAgICAgIC8vIE5vdGU6IFRoZSBvcmRlciBvZiB0aGUgc3RlcHMgYmVsb3cgaXMgaW1wb3J0YW50LCBzaW5jZSB3ZSB3YW50XG4gICAgICAgICAgICAvLyB0byBlbnN1cmUgdGhhdCByZWplY3RlZCBsaW1ibyByZXNvbHV0aW9ucyAod2hpY2ggZmFicmljYXRlXG4gICAgICAgICAgICAvLyBOb0RvY3VtZW50cyB3aXRoIFNuYXBzaG90VmVyc2lvbi5taW4oKSkgbmV2ZXIgYWRkIGRvY3VtZW50cyB0b1xuICAgICAgICAgICAgLy8gY2FjaGUuXG4gICAgICAgICAgICBzLmlzTm9Eb2N1bWVudCgpICYmIHMudmVyc2lvbi5pc0VxdWFsKFNuYXBzaG90VmVyc2lvbi5taW4oKSkgPyAoXG4gICAgICAgICAgICAvLyBOb0RvY3VtZW50cyB3aXRoIFNuYXBzaG90VmVyc2lvbi5taW4oKSBhcmUgdXNlZCBpbiBtYW51ZmFjdHVyZWRcbiAgICAgICAgICAgIC8vIGV2ZW50cy4gV2UgcmVtb3ZlIHRoZXNlIGRvY3VtZW50cyBmcm9tIGNhY2hlIHNpbmNlIHdlIGxvc3RcbiAgICAgICAgICAgIC8vIGFjY2Vzcy5cbiAgICAgICAgICAgIHQucmVtb3ZlRW50cnkobiwgcy5yZWFkVGltZSksIHIgPSByLmluc2VydChuLCBzKSkgOiAhby5pc1ZhbGlkRG9jdW1lbnQoKSB8fCBzLnZlcnNpb24uY29tcGFyZVRvKG8udmVyc2lvbikgPiAwIHx8IDAgPT09IHMudmVyc2lvbi5jb21wYXJlVG8oby52ZXJzaW9uKSAmJiBvLmhhc1BlbmRpbmdXcml0ZXMgPyAodC5hZGRFbnRyeShzKSwgXG4gICAgICAgICAgICByID0gci5pbnNlcnQobiwgcykpIDogX19QUklWQVRFX2xvZ0RlYnVnKFwiTG9jYWxTdG9yZVwiLCBcIklnbm9yaW5nIG91dGRhdGVkIHdhdGNoIHVwZGF0ZSBmb3IgXCIsIG4sIFwiLiBDdXJyZW50IHZlcnNpb246XCIsIG8udmVyc2lvbiwgXCIgV2F0Y2ggdmVyc2lvbjpcIiwgcy52ZXJzaW9uKTtcbiAgICAgICAgfSkpLCB7XG4gICAgICAgICAgICBjczogcixcbiAgICAgICAgICAgIGxzOiBpXG4gICAgICAgIH07XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG11dGF0aW9uIGJhdGNoIGFmdGVyIHRoZSBwYXNzZWQgaW4gYmF0Y2hJZCBpbiB0aGUgbXV0YXRpb24gcXVldWVcbiAqIG9yIG51bGwgaWYgZW1wdHkuXG4gKiBAcGFyYW0gYWZ0ZXJCYXRjaElkIC0gSWYgcHJvdmlkZWQsIHRoZSBiYXRjaCB0byBzZWFyY2ggYWZ0ZXIuXG4gKiBAcmV0dXJucyBUaGUgbmV4dCBtdXRhdGlvbiBvciBudWxsIGlmIHRoZXJlIHdhc24ndCBvbmUuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlR2V0TmV4dE11dGF0aW9uQmF0Y2goZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IG5leHQgbXV0YXRpb24gYmF0Y2hcIiwgXCJyZWFkb25seVwiLCAoZSA9PiAodm9pZCAwID09PSB0ICYmICh0ID0gLTEpLCBcbiAgICBuLm11dGF0aW9uUXVldWUuZ2V0TmV4dE11dGF0aW9uQmF0Y2hBZnRlckJhdGNoSWQoZSwgdCkpKSk7XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBEb2N1bWVudCB3aXRoIGEgZ2l2ZW4ga2V5IG9yIG51bGwgaWYgbm90XG4gKiBmb3VuZCAtIHVzZWQgZm9yIHRlc3RpbmcuXG4gKi9cbi8qKlxuICogQXNzaWducyB0aGUgZ2l2ZW4gdGFyZ2V0IGFuIGludGVybmFsIElEIHNvIHRoYXQgaXRzIHJlc3VsdHMgY2FuIGJlIHBpbm5lZCBzb1xuICogdGhleSBkb24ndCBnZXQgR0MnZC4gQSB0YXJnZXQgbXVzdCBiZSBhbGxvY2F0ZWQgaW4gdGhlIGxvY2FsIHN0b3JlIGJlZm9yZVxuICogdGhlIHN0b3JlIGNhbiBiZSB1c2VkIHRvIG1hbmFnZSBpdHMgdmlldy5cbiAqXG4gKiBBbGxvY2F0aW5nIGFuIGFscmVhZHkgYWxsb2NhdGVkIGBUYXJnZXRgIHdpbGwgcmV0dXJuIHRoZSBleGlzdGluZyBgVGFyZ2V0RGF0YWBcbiAqIGZvciB0aGF0IGBUYXJnZXRgLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZUFsbG9jYXRlVGFyZ2V0KGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkFsbG9jYXRlIHRhcmdldFwiLCBcInJlYWR3cml0ZVwiLCAoZSA9PiB7XG4gICAgICAgIGxldCByO1xuICAgICAgICByZXR1cm4gbi5Rci5nZXRUYXJnZXREYXRhKGUsIHQpLm5leHQoKGkgPT4gaSA/IChcbiAgICAgICAgLy8gVGhpcyB0YXJnZXQgaGFzIGJlZW4gbGlzdGVuZWQgdG8gcHJldmlvdXNseSwgc28gcmV1c2UgdGhlXG4gICAgICAgIC8vIHByZXZpb3VzIHRhcmdldElELlxuICAgICAgICAvLyBUT0RPKG1jZyk6IGZyZXNoZW4gbGFzdCBhY2Nlc3NlZCBkYXRlP1xuICAgICAgICByID0gaSwgUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUocikpIDogbi5Rci5hbGxvY2F0ZVRhcmdldElkKGUpLm5leHQoKGkgPT4gKHIgPSBuZXcgVGFyZ2V0RGF0YSh0LCBpLCBcIlRhcmdldFB1cnBvc2VMaXN0ZW5cIiAvKiBUYXJnZXRQdXJwb3NlLkxpc3RlbiAqLyAsIGUuY3VycmVudFNlcXVlbmNlTnVtYmVyKSwgXG4gICAgICAgIG4uUXIuYWRkVGFyZ2V0RGF0YShlLCByKS5uZXh0KCgoKSA9PiByKSkpKSkpKTtcbiAgICB9KSkudGhlbigoZSA9PiB7XG4gICAgICAgIC8vIElmIE11bHRpLVRhYiBpcyBlbmFibGVkLCB0aGUgZXhpc3RpbmcgdGFyZ2V0IGRhdGEgbWF5IGJlIG5ld2VyIHRoYW5cbiAgICAgICAgLy8gdGhlIGluLW1lbW9yeSBkYXRhXG4gICAgICAgIGNvbnN0IHIgPSBuLm5zLmdldChlLnRhcmdldElkKTtcbiAgICAgICAgcmV0dXJuIChudWxsID09PSByIHx8IGUuc25hcHNob3RWZXJzaW9uLmNvbXBhcmVUbyhyLnNuYXBzaG90VmVyc2lvbikgPiAwKSAmJiAobi5ucyA9IG4ubnMuaW5zZXJ0KGUudGFyZ2V0SWQsIGUpLCBcbiAgICAgICAgbi5ycy5zZXQodCwgZS50YXJnZXRJZCkpLCBlO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBUYXJnZXREYXRhIGFzIHNlZW4gYnkgdGhlIExvY2FsU3RvcmUsIGluY2x1ZGluZyB1cGRhdGVzIHRoYXQgbWF5XG4gKiBoYXZlIG5vdCB5ZXQgYmVlbiBwZXJzaXN0ZWQgdG8gdGhlIFRhcmdldENhY2hlLlxuICovXG4vLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuLyoqXG4gKiBVbnBpbnMgYWxsIHRoZSBkb2N1bWVudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiB0YXJnZXQuIElmXG4gKiBga2VlcFBlcnNpc3RlZFRhcmdldERhdGFgIGlzIHNldCB0byBmYWxzZSBhbmQgRWFnZXIgR0MgZW5hYmxlZCwgdGhlIG1ldGhvZFxuICogZGlyZWN0bHkgcmVtb3ZlcyB0aGUgYXNzb2NpYXRlZCB0YXJnZXQgZGF0YSBmcm9tIHRoZSB0YXJnZXQgY2FjaGUuXG4gKlxuICogUmVsZWFzaW5nIGEgbm9uLWV4aXN0aW5nIGBUYXJnZXRgIGlzIGEgbm8tb3AuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogYGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhYCBpcyBtdWx0aS10YWIgb25seS5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlUmVsZWFzZVRhcmdldChlLCB0LCBuKSB7XG4gICAgY29uc3QgciA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSksIGkgPSByLm5zLmdldCh0KSwgcyA9IG4gPyBcInJlYWR3cml0ZVwiIDogXCJyZWFkd3JpdGUtcHJpbWFyeVwiO1xuICAgIHRyeSB7XG4gICAgICAgIG4gfHwgYXdhaXQgci5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlJlbGVhc2UgdGFyZ2V0XCIsIHMsIChlID0+IHIucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUucmVtb3ZlVGFyZ2V0KGUsIGkpKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoIV9fUFJJVkFURV9pc0luZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IoZSkpIHRocm93IGU7XG4gICAgICAgIC8vIEFsbCBgcmVsZWFzZVRhcmdldGAgZG9lcyBpcyByZWNvcmQgdGhlIGZpbmFsIG1ldGFkYXRhIHN0YXRlIGZvciB0aGVcbiAgICAgICAgLy8gdGFyZ2V0LCBidXQgd2UndmUgYmVlbiByZWNvcmRpbmcgdGhpcyBwZXJpb2RpY2FsbHkgZHVyaW5nIHRhcmdldFxuICAgICAgICAvLyBhY3Rpdml0eS4gSWYgd2UgbG9zZSB0aGlzIHdyaXRlIHRoaXMgY291bGQgY2F1c2UgYSB2ZXJ5IHNsaWdodFxuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIHRoZSBvcmRlciBvZiB0YXJnZXQgZGVsZXRpb24gZHVyaW5nIEdDLCBidXQgd2VcbiAgICAgICAgLy8gZG9uJ3QgZGVmaW5lIGV4YWN0IExSVSBzZW1hbnRpY3Mgc28gdGhpcyBpcyBhY2NlcHRhYmxlLlxuICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJMb2NhbFN0b3JlXCIsIGBGYWlsZWQgdG8gdXBkYXRlIHNlcXVlbmNlIG51bWJlcnMgZm9yIHRhcmdldCAke3R9OiAke2V9YCk7XG4gICAgfVxuICAgIHIubnMgPSByLm5zLnJlbW92ZSh0KSwgci5ycy5kZWxldGUoaS50YXJnZXQpO1xufVxuXG4vKipcbiAqIFJ1bnMgdGhlIHNwZWNpZmllZCBxdWVyeSBhZ2FpbnN0IHRoZSBsb2NhbCBzdG9yZSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0cyxcbiAqIHBvdGVudGlhbGx5IHRha2luZyBhZHZhbnRhZ2Ugb2YgcXVlcnkgZGF0YSBmcm9tIHByZXZpb3VzIGV4ZWN1dGlvbnMgKHN1Y2hcbiAqIGFzIHRoZSBzZXQgb2YgcmVtb3RlIGtleXMpLlxuICpcbiAqIEBwYXJhbSB1c2VQcmV2aW91c1Jlc3VsdHMgLSBXaGV0aGVyIHJlc3VsdHMgZnJvbSBwcmV2aW91cyBleGVjdXRpb25zIGNhblxuICogYmUgdXNlZCB0byBvcHRpbWl6ZSB0aGlzIHF1ZXJ5IGV4ZWN1dGlvbi5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZUV4ZWN1dGVRdWVyeShlLCB0LCBuKSB7XG4gICAgY29uc3QgciA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgbGV0IGkgPSBTbmFwc2hvdFZlcnNpb24ubWluKCksIHMgPSBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKTtcbiAgICByZXR1cm4gci5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkV4ZWN1dGUgcXVlcnlcIiwgXCJyZWFkd3JpdGVcIiwgKC8vIFVzZSByZWFkd3JpdGUgaW5zdGVhZCBvZiByZWFkb25seSBzbyBpbmRleGVzIGNhbiBiZSBjcmVhdGVkXG4gICAgLy8gVXNlIHJlYWR3cml0ZSBpbnN0ZWFkIG9mIHJlYWRvbmx5IHNvIGluZGV4ZXMgY2FuIGJlIGNyZWF0ZWRcbiAgICBlID0+IGZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlR2V0VGFyZ2V0RGF0YShlLCB0LCBuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCBpID0gci5ycy5nZXQobik7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IGkgPyBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShyLm5zLmdldChpKSkgOiByLlFyLmdldFRhcmdldERhdGEodCwgbik7XG4gICAgfShyLCBlLCBfX1BSSVZBVEVfcXVlcnlUb1RhcmdldCh0KSkubmV4dCgodCA9PiB7XG4gICAgICAgIGlmICh0KSByZXR1cm4gaSA9IHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiwgci5Rci5nZXRNYXRjaGluZ0tleXNGb3JUYXJnZXRJZChlLCB0LnRhcmdldElkKS5uZXh0KChlID0+IHtcbiAgICAgICAgICAgIHMgPSBlO1xuICAgICAgICB9KSk7XG4gICAgfSkpLm5leHQoKCgpID0+IHIudHMuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeShlLCB0LCBuID8gaSA6IFNuYXBzaG90VmVyc2lvbi5taW4oKSwgbiA/IHMgOiBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKSkpKS5uZXh0KChlID0+IChfX1BSSVZBVEVfc2V0TWF4UmVhZFRpbWUociwgX19QUklWQVRFX3F1ZXJ5Q29sbGVjdGlvbkdyb3VwKHQpLCBlKSwgXG4gICAge1xuICAgICAgICBkb2N1bWVudHM6IGUsXG4gICAgICAgIGhzOiBzXG4gICAgfSkpKSkpO1xufVxuXG4vLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuZnVuY3Rpb24gX19QUklWQVRFX2xvY2FsU3RvcmVHZXRDYWNoZWRUYXJnZXQoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCByID0gX19QUklWQVRFX2RlYnVnQ2FzdChuLlFyKSwgaSA9IG4ubnMuZ2V0KHQpO1xuICAgIHJldHVybiBpID8gUHJvbWlzZS5yZXNvbHZlKGkudGFyZ2V0KSA6IG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJHZXQgdGFyZ2V0IGRhdGFcIiwgXCJyZWFkb25seVwiLCAoZSA9PiByLm90KGUsIHQpLm5leHQoKGUgPT4gZSA/IGUudGFyZ2V0IDogbnVsbCkpKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2V0IG9mIGRvY3VtZW50cyB0aGF0IGhhdmUgYmVlbiB1cGRhdGVkIHNpbmNlIHRoZSBsYXN0IGNhbGwuXG4gKiBJZiB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCByZXR1cm5zIHRoZSBzZXQgb2YgY2hhbmdlcyBzaW5jZSBjbGllbnRcbiAqIGluaXRpYWxpemF0aW9uLiBGdXJ0aGVyIGludm9jYXRpb25zIHdpbGwgcmV0dXJuIGRvY3VtZW50IHRoYXQgaGF2ZSBjaGFuZ2VkXG4gKiBzaW5jZSB0aGUgcHJpb3IgY2FsbC5cbiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlR2V0TmV3RG9jdW1lbnRDaGFuZ2VzKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgciA9IG4uc3MuZ2V0KHQpIHx8IFNuYXBzaG90VmVyc2lvbi5taW4oKTtcbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgbWF4aW11bSByZWFkIHRpbWUgZm9yIHRoZSBjb2xsZWN0aW9uLiBUaGlzIHNob3VsZCBhbHdheXNcbiAgICAvLyBleGlzdCwgYnV0IHRvIHJlZHVjZSB0aGUgY2hhbmNlIGZvciByZWdyZXNzaW9ucyB3ZSBkZWZhdWx0IHRvXG4gICAgLy8gU25hcHNob3RWZXJzaW9uLk1pbigpXG4gICAgLy8gVE9ETyhpbmRleGluZyk6IENvbnNpZGVyIHJlbW92aW5nIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBuZXcgZG9jdW1lbnQgY2hhbmdlc1wiLCBcInJlYWRvbmx5XCIsIChlID0+IG4ub3MuZ2V0QWxsRnJvbUNvbGxlY3Rpb25Hcm91cChlLCB0LCBfX1BSSVZBVEVfbmV3SW5kZXhPZmZzZXRTdWNjZXNzb3JGcm9tUmVhZFRpbWUociwgLTEpLCBcbiAgICAvKiBsaW1pdD0gKi8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSkudGhlbigoZSA9PiAoX19QUklWQVRFX3NldE1heFJlYWRUaW1lKG4sIHQsIGUpLCBcbiAgICBlKSkpO1xufVxuXG4vKiogU2V0cyB0aGUgY29sbGVjdGlvbiBncm91cCdzIG1heGltdW0gcmVhZCB0aW1lIGZyb20gdGhlIGdpdmVuIGRvY3VtZW50cy4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiBfX1BSSVZBVEVfc2V0TWF4UmVhZFRpbWUoZSwgdCwgbikge1xuICAgIGxldCByID0gZS5zcy5nZXQodCkgfHwgU25hcHNob3RWZXJzaW9uLm1pbigpO1xuICAgIG4uZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgdC5yZWFkVGltZS5jb21wYXJlVG8ocikgPiAwICYmIChyID0gdC5yZWFkVGltZSk7XG4gICAgfSkpLCBlLnNzLnNldCh0LCByKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRhcmdldCB1c2luZyB0aGUgZ2l2ZW4gYnVuZGxlIG5hbWUsIHdoaWNoIHdpbGwgYmUgdXNlZCB0b1xuICogaG9sZCB0aGUga2V5cyBvZiBhbGwgZG9jdW1lbnRzIGZyb20gdGhlIGJ1bmRsZSBpbiBxdWVyeS1kb2N1bWVudCBtYXBwaW5ncy5cbiAqIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBsb2FkZWQgZG9jdW1lbnRzIGRvIG5vdCBnZXQgZ2FyYmFnZSBjb2xsZWN0ZWRcbiAqIHJpZ2h0IGF3YXkuXG4gKi9cbi8qKlxuICogQXBwbGllcyB0aGUgZG9jdW1lbnRzIGZyb20gYSBidW5kbGUgdG8gdGhlIFwiZ3JvdW5kLXN0YXRlXCIgKHJlbW90ZSlcbiAqIGRvY3VtZW50cy5cbiAqXG4gKiBMb2NhbERvY3VtZW50cyBhcmUgcmUtY2FsY3VsYXRlZCBpZiB0aGVyZSBhcmUgcmVtYWluaW5nIG11dGF0aW9ucyBpbiB0aGVcbiAqIHF1ZXVlLlxuICovXG5hc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZUFwcGx5QnVuZGxlZERvY3VtZW50cyhlLCB0LCBuLCByKSB7XG4gICAgY29uc3QgaSA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgbGV0IHMgPSBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKSwgbyA9IF9fUFJJVkFURV9tdXRhYmxlRG9jdW1lbnRNYXAoKTtcbiAgICBmb3IgKGNvbnN0IGUgb2Ygbikge1xuICAgICAgICBjb25zdCBuID0gdC5QcyhlLm1ldGFkYXRhLm5hbWUpO1xuICAgICAgICBlLmRvY3VtZW50ICYmIChzID0gcy5hZGQobikpO1xuICAgICAgICBjb25zdCByID0gdC5JcyhlKTtcbiAgICAgICAgci5zZXRSZWFkVGltZSh0LlRzKGUubWV0YWRhdGEucmVhZFRpbWUpKSwgbyA9IG8uaW5zZXJ0KG4sIHIpO1xuICAgIH1cbiAgICBjb25zdCBfID0gaS5vcy5uZXdDaGFuZ2VCdWZmZXIoe1xuICAgICAgICB0cmFja1JlbW92YWxzOiAhMFxuICAgIH0pLCBhID0gYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVBbGxvY2F0ZVRhcmdldChpLCBmdW5jdGlvbiBfX1BSSVZBVEVfdW1icmVsbGFUYXJnZXQoZSkge1xuICAgICAgICAvLyBJdCBpcyBPSyB0aGF0IHRoZSBwYXRoIHVzZWQgZm9yIHRoZSBxdWVyeSBpcyBub3QgdmFsaWQsIGJlY2F1c2UgdGhpcyB3aWxsXG4gICAgICAgIC8vIG5vdCBiZSByZWFkIGFuZCBxdWVyaWVkLlxuICAgICAgICByZXR1cm4gX19QUklWQVRFX3F1ZXJ5VG9UYXJnZXQoX19QUklWQVRFX25ld1F1ZXJ5Rm9yUGF0aChSZXNvdXJjZVBhdGguZnJvbVN0cmluZyhgX19idW5kbGVfXy9kb2NzLyR7ZX1gKSkpO1xuICAgIH0ocikpO1xuICAgIC8vIEFsbG9jYXRlcyBhIHRhcmdldCB0byBob2xkIGFsbCBkb2N1bWVudCBrZXlzIGZyb20gdGhlIGJ1bmRsZSwgc3VjaCB0aGF0XG4gICAgLy8gdGhleSB3aWxsIG5vdCBnZXQgZ2FyYmFnZSBjb2xsZWN0ZWQgcmlnaHQgYXdheS5cbiAgICAgICAgcmV0dXJuIGkucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBcHBseSBidW5kbGUgZG9jdW1lbnRzXCIsIFwicmVhZHdyaXRlXCIsIChlID0+IF9fUFJJVkFURV9wb3B1bGF0ZURvY3VtZW50Q2hhbmdlQnVmZmVyKGUsIF8sIG8pLm5leHQoKHQgPT4gKF8uYXBwbHkoZSksIFxuICAgIHQpKSkubmV4dCgodCA9PiBpLlFyLnJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkKGUsIGEudGFyZ2V0SWQpLm5leHQoKCgpID0+IGkuUXIuYWRkTWF0Y2hpbmdLZXlzKGUsIHMsIGEudGFyZ2V0SWQpKSkubmV4dCgoKCkgPT4gaS5sb2NhbERvY3VtZW50cy5nZXRMb2NhbFZpZXdPZkRvY3VtZW50cyhlLCB0LmNzLCB0LmxzKSkpLm5leHQoKCgpID0+IHQuY3MpKSkpKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2Ugb2YgYSBib29sZWFuIHRvIGluZGljYXRlIGlmIHRoZSBnaXZlbiBidW5kbGUgaGFzIGFscmVhZHlcbiAqIGJlZW4gbG9hZGVkIGFuZCB0aGUgY3JlYXRlIHRpbWUgaXMgbmV3ZXIgdGhhbiB0aGUgY3VycmVudCBsb2FkaW5nIGJ1bmRsZS5cbiAqL1xuLyoqXG4gKiBTYXZlcyB0aGUgZ2l2ZW4gYE5hbWVkUXVlcnlgIHRvIGxvY2FsIHBlcnNpc3RlbmNlLlxuICovXG5hc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZVNhdmVOYW1lZFF1ZXJ5KGUsIHQsIG4gPSBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKSkge1xuICAgIC8vIEFsbG9jYXRlIGEgdGFyZ2V0IGZvciB0aGUgbmFtZWQgcXVlcnkgc3VjaCB0aGF0IGl0IGNhbiBiZSByZXN1bWVkXG4gICAgLy8gZnJvbSBhc3NvY2lhdGVkIHJlYWQgdGltZSBpZiB1c2VycyB1c2UgaXQgdG8gbGlzdGVuLlxuICAgIC8vIE5PVEU6IHRoaXMgYWxzbyBtZWFucyBpZiBubyBjb3JyZXNwb25kaW5nIHRhcmdldCBleGlzdHMsIHRoZSBuZXcgdGFyZ2V0XG4gICAgLy8gd2lsbCByZW1haW4gYWN0aXZlIGFuZCB3aWxsIG5vdCBnZXQgY29sbGVjdGVkLCB1bmxlc3MgdXNlcnMgaGFwcGVuIHRvXG4gICAgLy8gdW5saXN0ZW4gdGhlIHF1ZXJ5IHNvbWVob3cuXG4gICAgY29uc3QgciA9IGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlQWxsb2NhdGVUYXJnZXQoZSwgX19QUklWQVRFX3F1ZXJ5VG9UYXJnZXQoX19QUklWQVRFX2Zyb21CdW5kbGVkUXVlcnkodC5idW5kbGVkUXVlcnkpKSksIGkgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIHJldHVybiBpLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiU2F2ZSBuYW1lZCBxdWVyeVwiLCBcInJlYWR3cml0ZVwiLCAoZSA9PiB7XG4gICAgICAgIGNvbnN0IHMgPSBfX1BSSVZBVEVfZnJvbVZlcnNpb24odC5yZWFkVGltZSk7XG4gICAgICAgIC8vIFNpbXBseSBzYXZlIHRoZSBxdWVyeSBpdHNlbGYgaWYgaXQgaXMgb2xkZXIgdGhhbiB3aGF0IHRoZSBTREsgYWxyZWFkeVxuICAgICAgICAvLyBoYXMuXG4gICAgICAgICAgICAgICAgaWYgKHIuc25hcHNob3RWZXJzaW9uLmNvbXBhcmVUbyhzKSA+PSAwKSByZXR1cm4gaS4kci5zYXZlTmFtZWRRdWVyeShlLCB0KTtcbiAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIHRhcmdldCBkYXRhIGJlY2F1c2UgdGhlIHF1ZXJ5IGZyb20gdGhlIGJ1bmRsZSBpcyBuZXdlci5cbiAgICAgICAgICAgICAgICBjb25zdCBvID0gci53aXRoUmVzdW1lVG9rZW4oQnl0ZVN0cmluZy5FTVBUWV9CWVRFX1NUUklORywgcyk7XG4gICAgICAgIHJldHVybiBpLm5zID0gaS5ucy5pbnNlcnQoby50YXJnZXRJZCwgbyksIGkuUXIudXBkYXRlVGFyZ2V0RGF0YShlLCBvKS5uZXh0KCgoKSA9PiBpLlFyLnJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkKGUsIHIudGFyZ2V0SWQpKSkubmV4dCgoKCkgPT4gaS5Rci5hZGRNYXRjaGluZ0tleXMoZSwgbiwgci50YXJnZXRJZCkpKS5uZXh0KCgoKSA9PiBpLiRyLnNhdmVOYW1lZFF1ZXJ5KGUsIHQpKSk7XG4gICAgfSkpO1xufVxuXG4vKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIGEgY2xpZW50IHN0YXRlIGluIFdlYlN0b3JhZ2UgKi9cbmZ1bmN0aW9uIGNyZWF0ZVdlYlN0b3JhZ2VDbGllbnRTdGF0ZUtleShlLCB0KSB7XG4gICAgcmV0dXJuIGBmaXJlc3RvcmVfY2xpZW50c18ke2V9XyR7dH1gO1xufVxuXG4vLyBUaGUgZm9ybWF0IG9mIHRoZSBXZWJTdG9yYWdlIGtleSB0aGF0IHN0b3JlcyB0aGUgbXV0YXRpb24gc3RhdGUgaXM6XG4vLyAgICAgZmlyZXN0b3JlX211dGF0aW9uc188cGVyc2lzdGVuY2VfcHJlZml4Pl88YmF0Y2hfaWQ+XG4vLyAgICAgKGZvciB1bmF1dGhlbnRpY2F0ZWQgdXNlcnMpXG4vLyBvcjogZmlyZXN0b3JlX211dGF0aW9uc188cGVyc2lzdGVuY2VfcHJlZml4Pl88YmF0Y2hfaWQ+Xzx1c2VyX3VpZD5cblxuLy8gJ3VzZXJfdWlkJyBpcyBsYXN0IHRvIGF2b2lkIG5lZWRpbmcgdG8gZXNjYXBlICdfJyBjaGFyYWN0ZXJzIHRoYXQgaXQgbWlnaHRcbi8vIGNvbnRhaW4uXG4vKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIGEgbXV0YXRpb24gYmF0Y2ggaW4gV2ViU3RvcmFnZSAqL1xuZnVuY3Rpb24gY3JlYXRlV2ViU3RvcmFnZU11dGF0aW9uQmF0Y2hLZXkoZSwgdCwgbikge1xuICAgIGxldCByID0gYGZpcmVzdG9yZV9tdXRhdGlvbnNfJHtlfV8ke259YDtcbiAgICByZXR1cm4gdC5pc0F1dGhlbnRpY2F0ZWQoKSAmJiAociArPSBgXyR7dC51aWR9YCksIHI7XG59XG5cbi8vIFRoZSBmb3JtYXQgb2YgdGhlIFdlYlN0b3JhZ2Uga2V5IHRoYXQgc3RvcmVzIGEgcXVlcnkgdGFyZ2V0J3MgbWV0YWRhdGEgaXM6XG4vLyAgICAgZmlyZXN0b3JlX3RhcmdldHNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPHRhcmdldF9pZD5cbi8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBxdWVyeSBzdGF0ZSBpbiBXZWJTdG9yYWdlICovXG5mdW5jdGlvbiBjcmVhdGVXZWJTdG9yYWdlUXVlcnlUYXJnZXRNZXRhZGF0YUtleShlLCB0KSB7XG4gICAgcmV0dXJuIGBmaXJlc3RvcmVfdGFyZ2V0c18ke2V9XyR7dH1gO1xufVxuXG4vLyBUaGUgV2ViU3RvcmFnZSBwcmVmaXggdGhhdCBzdG9yZXMgdGhlIHByaW1hcnkgdGFiJ3Mgb25saW5lIHN0YXRlLiBUaGVcbi8vIGZvcm1hdCBvZiB0aGUga2V5IGlzOlxuLy8gICAgIGZpcmVzdG9yZV9vbmxpbmVfc3RhdGVfPHBlcnNpc3RlbmNlX3ByZWZpeD5cbi8qKlxuICogSG9sZHMgdGhlIHN0YXRlIG9mIGEgbXV0YXRpb24gYmF0Y2gsIGluY2x1ZGluZyBpdHMgdXNlciBJRCwgYmF0Y2ggSUQgYW5kXG4gKiB3aGV0aGVyIHRoZSBiYXRjaCBpcyAncGVuZGluZycsICdhY2tub3dsZWRnZWQnIG9yICdyZWplY3RlZCcuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3RpbmdcbmNsYXNzIF9fUFJJVkFURV9NdXRhdGlvbk1ldGFkYXRhIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByKSB7XG4gICAgICAgIHRoaXMudXNlciA9IGUsIHRoaXMuYmF0Y2hJZCA9IHQsIHRoaXMuc3RhdGUgPSBuLCB0aGlzLmVycm9yID0gcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgTXV0YXRpb25NZXRhZGF0YSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi8gICAgc3RhdGljIEVzKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IEpTT04ucGFyc2Uobik7XG4gICAgICAgIGxldCBpLCBzID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgciAmJiAtMSAhPT0gWyBcInBlbmRpbmdcIiwgXCJhY2tub3dsZWRnZWRcIiwgXCJyZWplY3RlZFwiIF0uaW5kZXhPZihyLnN0YXRlKSAmJiAodm9pZCAwID09PSByLmVycm9yIHx8IFwib2JqZWN0XCIgPT0gdHlwZW9mIHIuZXJyb3IpO1xuICAgICAgICByZXR1cm4gcyAmJiByLmVycm9yICYmIChzID0gXCJzdHJpbmdcIiA9PSB0eXBlb2Ygci5lcnJvci5tZXNzYWdlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHIuZXJyb3IuY29kZSwgXG4gICAgICAgIHMgJiYgKGkgPSBuZXcgRmlyZXN0b3JlRXJyb3Ioci5lcnJvci5jb2RlLCByLmVycm9yLm1lc3NhZ2UpKSksIHMgPyBuZXcgX19QUklWQVRFX011dGF0aW9uTWV0YWRhdGEoZSwgdCwgci5zdGF0ZSwgaSkgOiAoX19QUklWQVRFX2xvZ0Vycm9yKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgYEZhaWxlZCB0byBwYXJzZSBtdXRhdGlvbiBzdGF0ZSBmb3IgSUQgJyR7dH0nOiAke259YCksIFxuICAgICAgICBudWxsKTtcbiAgICB9XG4gICAgZHMoKSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHVwZGF0ZVRpbWVNczogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvciAmJiAoZS5lcnJvciA9IHtcbiAgICAgICAgICAgIGNvZGU6IHRoaXMuZXJyb3IuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMuZXJyb3IubWVzc2FnZVxuICAgICAgICB9KSwgSlNPTi5zdHJpbmdpZnkoZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEhvbGRzIHRoZSBzdGF0ZSBvZiBhIHF1ZXJ5IHRhcmdldCwgaW5jbHVkaW5nIGl0cyB0YXJnZXQgSUQgYW5kIHdoZXRoZXIgdGhlXG4gKiB0YXJnZXQgaXMgJ25vdC1jdXJyZW50JywgJ2N1cnJlbnQnIG9yICdyZWplY3RlZCcuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3RpbmdcbmNsYXNzIF9fUFJJVkFURV9RdWVyeVRhcmdldE1ldGFkYXRhIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSBlLCB0aGlzLnN0YXRlID0gdCwgdGhpcy5lcnJvciA9IG47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIFF1ZXJ5VGFyZ2V0TWV0YWRhdGEgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbiBpbiBXZWJTdG9yYWdlLlxuICAgICAqIExvZ3MgYSB3YXJuaW5nIGFuZCByZXR1cm5zIG51bGwgaWYgdGhlIGZvcm1hdCBvZiB0aGUgZGF0YSBpcyBub3QgdmFsaWQuXG4gICAgICovICAgIHN0YXRpYyBFcyhlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSBKU09OLnBhcnNlKHQpO1xuICAgICAgICBsZXQgciwgaSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIG4gJiYgLTEgIT09IFsgXCJub3QtY3VycmVudFwiLCBcImN1cnJlbnRcIiwgXCJyZWplY3RlZFwiIF0uaW5kZXhPZihuLnN0YXRlKSAmJiAodm9pZCAwID09PSBuLmVycm9yIHx8IFwib2JqZWN0XCIgPT0gdHlwZW9mIG4uZXJyb3IpO1xuICAgICAgICByZXR1cm4gaSAmJiBuLmVycm9yICYmIChpID0gXCJzdHJpbmdcIiA9PSB0eXBlb2Ygbi5lcnJvci5tZXNzYWdlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIG4uZXJyb3IuY29kZSwgXG4gICAgICAgIGkgJiYgKHIgPSBuZXcgRmlyZXN0b3JlRXJyb3Iobi5lcnJvci5jb2RlLCBuLmVycm9yLm1lc3NhZ2UpKSksIGkgPyBuZXcgX19QUklWQVRFX1F1ZXJ5VGFyZ2V0TWV0YWRhdGEoZSwgbi5zdGF0ZSwgcikgOiAoX19QUklWQVRFX2xvZ0Vycm9yKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgYEZhaWxlZCB0byBwYXJzZSB0YXJnZXQgc3RhdGUgZm9yIElEICcke2V9JzogJHt0fWApLCBcbiAgICAgICAgbnVsbCk7XG4gICAgfVxuICAgIGRzKCkge1xuICAgICAgICBjb25zdCBlID0ge1xuICAgICAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICB1cGRhdGVUaW1lTXM6IERhdGUubm93KClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IgJiYgKGUuZXJyb3IgPSB7XG4gICAgICAgICAgICBjb2RlOiB0aGlzLmVycm9yLmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLmVycm9yLm1lc3NhZ2VcbiAgICAgICAgfSksIEpTT04uc3RyaW5naWZ5KGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIGltbXV0YWJsZSBDbGllbnRTdGF0ZSBmb3IgYSBjbGllbnQgcmVhZCBmcm9tXG4gKiBXZWJTdG9yYWdlLCBjb250YWluaW5nIHRoZSBsaXN0IG9mIGFjdGl2ZSBxdWVyeSB0YXJnZXRzLlxuICovIGNsYXNzIF9fUFJJVkFURV9SZW1vdGVDbGllbnRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLmNsaWVudElkID0gZSwgdGhpcy5hY3RpdmVUYXJnZXRJZHMgPSB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBSZW1vdGVDbGllbnRTdGF0ZSBmcm9tIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi8gICAgc3RhdGljIEVzKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IEpTT04ucGFyc2UodCk7XG4gICAgICAgIGxldCByID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgbiAmJiBuLmFjdGl2ZVRhcmdldElkcyBpbnN0YW5jZW9mIEFycmF5LCBpID0gX19QUklWQVRFX3RhcmdldElkU2V0KCk7XG4gICAgICAgIGZvciAobGV0IGUgPSAwOyByICYmIGUgPCBuLmFjdGl2ZVRhcmdldElkcy5sZW5ndGg7ICsrZSkgciA9IGlzU2FmZUludGVnZXIobi5hY3RpdmVUYXJnZXRJZHNbZV0pLCBcbiAgICAgICAgaSA9IGkuYWRkKG4uYWN0aXZlVGFyZ2V0SWRzW2VdKTtcbiAgICAgICAgcmV0dXJuIHIgPyBuZXcgX19QUklWQVRFX1JlbW90ZUNsaWVudFN0YXRlKGUsIGkpIDogKF9fUFJJVkFURV9sb2dFcnJvcihcIlNoYXJlZENsaWVudFN0YXRlXCIsIGBGYWlsZWQgdG8gcGFyc2UgY2xpZW50IGRhdGEgZm9yIGluc3RhbmNlICcke2V9JzogJHt0fWApLCBcbiAgICAgICAgbnVsbCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyB0aGUgb25saW5lIHN0YXRlIGZvciBhbGwgY2xpZW50cyBwYXJ0aWNpcGF0aW5nIGluXG4gKiBtdWx0aS10YWIuIFRoZSBvbmxpbmUgc3RhdGUgaXMgb25seSB3cml0dGVuIHRvIGJ5IHRoZSBwcmltYXJ5IGNsaWVudCwgYW5kXG4gKiB1c2VkIGluIHNlY29uZGFyeSBjbGllbnRzIHRvIHVwZGF0ZSB0aGVpciBxdWVyeSB2aWV3cy5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfU2hhcmVkT25saW5lU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IGUsIHRoaXMub25saW5lU3RhdGUgPSB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBTaGFyZWRPbmxpbmVTdGF0ZSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi8gICAgc3RhdGljIEVzKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IEpTT04ucGFyc2UoZSk7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIC0xICE9PSBbIFwiVW5rbm93blwiLCBcIk9ubGluZVwiLCBcIk9mZmxpbmVcIiBdLmluZGV4T2YodC5vbmxpbmVTdGF0ZSkgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC5jbGllbnRJZCA/IG5ldyBfX1BSSVZBVEVfU2hhcmVkT25saW5lU3RhdGUodC5jbGllbnRJZCwgdC5vbmxpbmVTdGF0ZSkgOiAoX19QUklWQVRFX2xvZ0Vycm9yKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgYEZhaWxlZCB0byBwYXJzZSBvbmxpbmUgc3RhdGU6ICR7ZX1gKSwgXG4gICAgICAgIG51bGwpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBNZXRhZGF0YSBzdGF0ZSBvZiB0aGUgbG9jYWwgY2xpZW50LiBVbmxpa2UgYFJlbW90ZUNsaWVudFN0YXRlYCwgdGhpcyBjbGFzcyBpc1xuICogbXV0YWJsZSBhbmQga2VlcHMgdHJhY2sgb2YgYWxsIHBlbmRpbmcgbXV0YXRpb25zLCB3aGljaCBhbGxvd3MgdXMgdG9cbiAqIHVwZGF0ZSB0aGUgcmFuZ2Ugb2YgcGVuZGluZyBtdXRhdGlvbiBiYXRjaCBJRHMgYXMgbmV3IG11dGF0aW9ucyBhcmUgYWRkZWQgb3JcbiAqIHJlbW92ZWQuXG4gKlxuICogVGhlIGRhdGEgaW4gYExvY2FsQ2xpZW50U3RhdGVgIGlzIG5vdCByZWFkIGZyb20gV2ViU3RvcmFnZSBhbmQgaW5zdGVhZFxuICogdXBkYXRlZCB2aWEgaXRzIGluc3RhbmNlIG1ldGhvZHMuIFRoZSB1cGRhdGVkIHN0YXRlIGNhbiBiZSBzZXJpYWxpemVkIHZpYVxuICogYHRvV2ViU3RvcmFnZUpTT04oKWAuXG4gKi9cbi8vIFZpc2libGUgZm9yIHRlc3RpbmcuXG5jbGFzcyBfX1BSSVZBVEVfTG9jYWxDbGllbnRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gX19QUklWQVRFX3RhcmdldElkU2V0KCk7XG4gICAgfVxuICAgIEFzKGUpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVUYXJnZXRJZHMgPSB0aGlzLmFjdGl2ZVRhcmdldElkcy5hZGQoZSk7XG4gICAgfVxuICAgIFJzKGUpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVUYXJnZXRJZHMgPSB0aGlzLmFjdGl2ZVRhcmdldElkcy5kZWxldGUoZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgZW50cnkgaW50byBhIEpTT04tZW5jb2RlZCBmb3JtYXQgd2UgY2FuIHVzZSBmb3IgV2ViU3RvcmFnZS5cbiAgICAgKiBEb2VzIG5vdCBlbmNvZGUgYGNsaWVudElkYCBhcyBpdCBpcyBwYXJ0IG9mIHRoZSBrZXkgaW4gV2ViU3RvcmFnZS5cbiAgICAgKi8gICAgZHMoKSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgICBhY3RpdmVUYXJnZXRJZHM6IHRoaXMuYWN0aXZlVGFyZ2V0SWRzLnRvQXJyYXkoKSxcbiAgICAgICAgICAgIHVwZGF0ZVRpbWVNczogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIGBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGVgIHVzZXMgV2ViU3RvcmFnZSAod2luZG93LmxvY2FsU3RvcmFnZSkgYXMgdGhlXG4gKiBiYWNraW5nIHN0b3JlIGZvciB0aGUgU2hhcmVkQ2xpZW50U3RhdGUuIEl0IGtlZXBzIHRyYWNrIG9mIGFsbCBhY3RpdmVcbiAqIGNsaWVudHMgYW5kIHN1cHBvcnRzIG1vZGlmaWNhdGlvbnMgb2YgdGhlIGxvY2FsIGNsaWVudCdzIGRhdGEuXG4gKi8gY2xhc3MgX19QUklWQVRFX1dlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbiwgciwgaSkge1xuICAgICAgICB0aGlzLndpbmRvdyA9IGUsIHRoaXMub2kgPSB0LCB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gbiwgdGhpcy5WcyA9IHIsIHRoaXMuc3luY0VuZ2luZSA9IG51bGwsIFxuICAgICAgICB0aGlzLm9ubGluZVN0YXRlSGFuZGxlciA9IG51bGwsIHRoaXMuc2VxdWVuY2VOdW1iZXJIYW5kbGVyID0gbnVsbCwgdGhpcy5mcyA9IHRoaXMuZ3MuYmluZCh0aGlzKSwgXG4gICAgICAgIHRoaXMucHMgPSBuZXcgU29ydGVkTWFwKF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKSwgdGhpcy5zdGFydGVkID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FwdHVyZXMgV2ViU3RvcmFnZSBldmVudHMgdGhhdCBvY2N1ciBiZWZvcmUgYHN0YXJ0KClgIGlzIGNhbGxlZC4gVGhlc2VcbiAgICAgICAgICogZXZlbnRzIGFyZSByZXBsYXllZCBvbmNlIGBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGVgIGlzIHN0YXJ0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnlzID0gW107XG4gICAgICAgIC8vIEVzY2FwZSB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzIG1lbnRpb25lZCBoZXJlOlxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L0d1aWRlL1JlZ3VsYXJfRXhwcmVzc2lvbnNcbiAgICAgICAgY29uc3QgcyA9IG4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICB0aGlzLnN0b3JhZ2UgPSB0aGlzLndpbmRvdy5sb2NhbFN0b3JhZ2UsIHRoaXMuY3VycmVudFVzZXIgPSBpLCB0aGlzLndzID0gY3JlYXRlV2ViU3RvcmFnZUNsaWVudFN0YXRlS2V5KHRoaXMucGVyc2lzdGVuY2VLZXksIHRoaXMuVnMpLCBcbiAgICAgICAgdGhpcy5TcyA9IFxuICAgICAgICAvKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIHRoZSBjdXJyZW50IHNlcXVlbmNlIG51bWJlci4gKi9cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlV2ViU3RvcmFnZVNlcXVlbmNlTnVtYmVyS2V5KGUpIHtcbiAgICAgICAgICAgIHJldHVybiBgZmlyZXN0b3JlX3NlcXVlbmNlX251bWJlcl8ke2V9YDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAodGhpcy5wZXJzaXN0ZW5jZUtleSksIHRoaXMucHMgPSB0aGlzLnBzLmluc2VydCh0aGlzLlZzLCBuZXcgX19QUklWQVRFX0xvY2FsQ2xpZW50U3RhdGUpLCBcbiAgICAgICAgdGhpcy5icyA9IG5ldyBSZWdFeHAoYF5maXJlc3RvcmVfY2xpZW50c18ke3N9XyhbXl9dKikkYCksIHRoaXMuRHMgPSBuZXcgUmVnRXhwKGBeZmlyZXN0b3JlX211dGF0aW9uc18ke3N9XyhcXFxcZCspKD86XyguKikpPyRgKSwgXG4gICAgICAgIHRoaXMuQ3MgPSBuZXcgUmVnRXhwKGBeZmlyZXN0b3JlX3RhcmdldHNfJHtzfV8oXFxcXGQrKSRgKSwgdGhpcy52cyA9IFxuICAgICAgICAvKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIHRoZSBvbmxpbmUgc3RhdGUgb2YgdGhlIHByaW1hcnkgdGFiLiAqL1xuICAgICAgICBmdW5jdGlvbiBjcmVhdGVXZWJTdG9yYWdlT25saW5lU3RhdGVLZXkoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGBmaXJlc3RvcmVfb25saW5lX3N0YXRlXyR7ZX1gO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBXZWJTdG9yYWdlIHByZWZpeCB0aGF0IHBsYXlzIGFzIGEgZXZlbnQgdG8gaW5kaWNhdGUgdGhlIHJlbW90ZSBkb2N1bWVudHNcbiAgICAgICAgLy8gbWlnaHQgaGF2ZSBjaGFuZ2VkIGR1ZSB0byBzb21lIHNlY29uZGFyeSB0YWJzIGxvYWRpbmcgYSBidW5kbGUuXG4gICAgICAgIC8vIGZvcm1hdCBvZiB0aGUga2V5IGlzOlxuICAgICAgICAvLyAgICAgZmlyZXN0b3JlX2J1bmRsZV9sb2FkZWRfdjJfPHBlcnNpc3RlbmNlS2V5PlxuICAgICAgICAvLyBUaGUgdmVyc2lvbiBlbmRpbmcgd2l0aCBcInYyXCIgc3RvcmVzIHRoZSBsaXN0IG9mIG1vZGlmaWVkIGNvbGxlY3Rpb24gZ3JvdXBzLlxuICAgICAgICAodGhpcy5wZXJzaXN0ZW5jZUtleSksIHRoaXMuRnMgPSBmdW5jdGlvbiBjcmVhdGVCdW5kbGVMb2FkZWRLZXkoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGBmaXJlc3RvcmVfYnVuZGxlX2xvYWRlZF92Ml8ke2V9YDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgV2ViU3RvcmFnZSBrZXkgcHJlZml4IGZvciB0aGUga2V5IHRoYXQgc3RvcmVzIHRoZSBsYXN0IHNlcXVlbmNlIG51bWJlciBhbGxvY2F0ZWQuIFRoZSBrZXlcbiAgICAgICAgLy8gbG9va3MgbGlrZSAnZmlyZXN0b3JlX3NlcXVlbmNlX251bWJlcl88cGVyc2lzdGVuY2VfcHJlZml4PicuXG4gICAgICAgICh0aGlzLnBlcnNpc3RlbmNlS2V5KSwgXG4gICAgICAgIC8vIFJhdGhlciB0aGFuIGFkZGluZyB0aGUgc3RvcmFnZSBvYnNlcnZlciBkdXJpbmcgc3RhcnQoKSwgd2UgYWRkIHRoZVxuICAgICAgICAvLyBzdG9yYWdlIG9ic2VydmVyIGR1cmluZyBpbml0aWFsaXphdGlvbi4gVGhpcyBlbnN1cmVzIHRoYXQgd2UgY29sbGVjdFxuICAgICAgICAvLyBldmVudHMgYmVmb3JlIG90aGVyIGNvbXBvbmVudHMgcG9wdWxhdGUgdGhlaXIgaW5pdGlhbCBzdGF0ZSAoZHVyaW5nIHRoZWlyXG4gICAgICAgIC8vIHJlc3BlY3RpdmUgc3RhcnQoKSBjYWxscykuIE90aGVyd2lzZSwgd2UgbWlnaHQgZm9yIGV4YW1wbGUgbWlzcyBhXG4gICAgICAgIC8vIG11dGF0aW9uIHRoYXQgaXMgYWRkZWQgYWZ0ZXIgTG9jYWxTdG9yZSdzIHN0YXJ0KCkgcHJvY2Vzc2VkIHRoZSBleGlzdGluZ1xuICAgICAgICAvLyBtdXRhdGlvbnMgYnV0IGJlZm9yZSB3ZSBvYnNlcnZlIFdlYlN0b3JhZ2UgZXZlbnRzLlxuICAgICAgICB0aGlzLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic3RvcmFnZVwiLCB0aGlzLmZzKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgJ3RydWUnIGlmIFdlYlN0b3JhZ2UgaXMgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiAqLyAgICBzdGF0aWMgRChlKSB7XG4gICAgICAgIHJldHVybiAhKCFlIHx8ICFlLmxvY2FsU3RvcmFnZSk7XG4gICAgfVxuICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgbGlzdCBvZiBleGlzdGluZyBjbGllbnRzIHRvIGJhY2tmaWxsIHRoZSBkYXRhIGluXG4gICAgICAgIC8vIFNoYXJlZENsaWVudFN0YXRlLlxuICAgICAgICBjb25zdCBlID0gYXdhaXQgdGhpcy5zeW5jRW5naW5lLkJpKCk7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XG4gICAgICAgICAgICBpZiAodCA9PT0gdGhpcy5WcykgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBlID0gdGhpcy5nZXRJdGVtKGNyZWF0ZVdlYlN0b3JhZ2VDbGllbnRTdGF0ZUtleSh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0KSk7XG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfUmVtb3RlQ2xpZW50U3RhdGUuRXModCwgZSk7XG4gICAgICAgICAgICAgICAgbiAmJiAodGhpcy5wcyA9IHRoaXMucHMuaW5zZXJ0KG4uY2xpZW50SWQsIG4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLk1zKCk7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGFuIGV4aXN0aW5nIG9ubGluZSBzdGF0ZSBhbmQgY2FsbCB0aGUgY2FsbGJhY2sgaGFuZGxlclxuICAgICAgICAvLyBpZiBhcHBsaWNhYmxlLlxuICAgICAgICBjb25zdCB0ID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0odGhpcy52cyk7XG4gICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICBjb25zdCBlID0gdGhpcy54cyh0KTtcbiAgICAgICAgICAgIGUgJiYgdGhpcy5PcyhlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy55cykgdGhpcy5ncyhlKTtcbiAgICAgICAgdGhpcy55cyA9IFtdLCBcbiAgICAgICAgLy8gUmVnaXN0ZXIgYSB3aW5kb3cgdW5sb2FkIGhvb2sgdG8gcmVtb3ZlIHRoZSBjbGllbnQgbWV0YWRhdGEgZW50cnkgZnJvbVxuICAgICAgICAvLyBXZWJTdG9yYWdlIGV2ZW4gaWYgYHNodXRkb3duKClgIHdhcyBub3QgY2FsbGVkLlxuICAgICAgICB0aGlzLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgKCgpID0+IHRoaXMuc2h1dGRvd24oKSkpLCB0aGlzLnN0YXJ0ZWQgPSAhMDtcbiAgICB9XG4gICAgd3JpdGVTZXF1ZW5jZU51bWJlcihlKSB7XG4gICAgICAgIHRoaXMuc2V0SXRlbSh0aGlzLlNzLCBKU09OLnN0cmluZ2lmeShlKSk7XG4gICAgfVxuICAgIGdldEFsbEFjdGl2ZVF1ZXJ5VGFyZ2V0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTnModGhpcy5wcyk7XG4gICAgfVxuICAgIGlzQWN0aXZlUXVlcnlUYXJnZXQoZSkge1xuICAgICAgICBsZXQgdCA9ICExO1xuICAgICAgICByZXR1cm4gdGhpcy5wcy5mb3JFYWNoKCgobiwgcikgPT4ge1xuICAgICAgICAgICAgci5hY3RpdmVUYXJnZXRJZHMuaGFzKGUpICYmICh0ID0gITApO1xuICAgICAgICB9KSksIHQ7XG4gICAgfVxuICAgIGFkZFBlbmRpbmdNdXRhdGlvbihlKSB7XG4gICAgICAgIHRoaXMuTHMoZSwgXCJwZW5kaW5nXCIpO1xuICAgIH1cbiAgICB1cGRhdGVNdXRhdGlvblN0YXRlKGUsIHQsIG4pIHtcbiAgICAgICAgdGhpcy5McyhlLCB0LCBuKSwgXG4gICAgICAgIC8vIE9uY2UgYSBmaW5hbCBtdXRhdGlvbiByZXN1bHQgaXMgb2JzZXJ2ZWQgYnkgb3RoZXIgY2xpZW50cywgdGhleSBubyBsb25nZXJcbiAgICAgICAgLy8gYWNjZXNzIHRoZSBtdXRhdGlvbidzIG1ldGFkYXRhIGVudHJ5LiBTaW5jZSBXZWJTdG9yYWdlIHJlcGxheXMgZXZlbnRzXG4gICAgICAgIC8vIGluIG9yZGVyLCBpdCBpcyBzYWZlIHRvIGRlbGV0ZSB0aGUgZW50cnkgcmlnaHQgYWZ0ZXIgdXBkYXRpbmcgaXQuXG4gICAgICAgIHRoaXMuQnMoZSk7XG4gICAgfVxuICAgIGFkZExvY2FsUXVlcnlUYXJnZXQoZSkge1xuICAgICAgICBsZXQgdCA9IFwibm90LWN1cnJlbnRcIjtcbiAgICAgICAgLy8gTG9va3VwIGFuIGV4aXN0aW5nIHF1ZXJ5IHN0YXRlIGlmIHRoZSB0YXJnZXQgSUQgd2FzIGFscmVhZHkgcmVnaXN0ZXJlZFxuICAgICAgICAvLyBieSBhbm90aGVyIHRhYlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlUXVlcnlUYXJnZXQoZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShjcmVhdGVXZWJTdG9yYWdlUXVlcnlUYXJnZXRNZXRhZGF0YUtleSh0aGlzLnBlcnNpc3RlbmNlS2V5LCBlKSk7XG4gICAgICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfUXVlcnlUYXJnZXRNZXRhZGF0YS5FcyhlLCBuKTtcbiAgICAgICAgICAgICAgICByICYmICh0ID0gci5zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMua3MuQXMoZSksIHRoaXMuTXMoKSwgdDtcbiAgICB9XG4gICAgcmVtb3ZlTG9jYWxRdWVyeVRhcmdldChlKSB7XG4gICAgICAgIHRoaXMua3MuUnMoZSksIHRoaXMuTXMoKTtcbiAgICB9XG4gICAgaXNMb2NhbFF1ZXJ5VGFyZ2V0KGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua3MuYWN0aXZlVGFyZ2V0SWRzLmhhcyhlKTtcbiAgICB9XG4gICAgY2xlYXJRdWVyeVN0YXRlKGUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGNyZWF0ZVdlYlN0b3JhZ2VRdWVyeVRhcmdldE1ldGFkYXRhS2V5KHRoaXMucGVyc2lzdGVuY2VLZXksIGUpKTtcbiAgICB9XG4gICAgdXBkYXRlUXVlcnlTdGF0ZShlLCB0LCBuKSB7XG4gICAgICAgIHRoaXMucXMoZSwgdCwgbik7XG4gICAgfVxuICAgIGhhbmRsZVVzZXJDaGFuZ2UoZSwgdCwgbikge1xuICAgICAgICB0LmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5CcyhlKTtcbiAgICAgICAgfSkpLCB0aGlzLmN1cnJlbnRVc2VyID0gZSwgbi5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkUGVuZGluZ011dGF0aW9uKGUpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHNldE9ubGluZVN0YXRlKGUpIHtcbiAgICAgICAgdGhpcy5RcyhlKTtcbiAgICB9XG4gICAgbm90aWZ5QnVuZGxlTG9hZGVkKGUpIHtcbiAgICAgICAgdGhpcy5LcyhlKTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHRoaXMuc3RhcnRlZCAmJiAodGhpcy53aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgdGhpcy5mcyksIHRoaXMucmVtb3ZlSXRlbSh0aGlzLndzKSwgXG4gICAgICAgIHRoaXMuc3RhcnRlZCA9ICExKTtcbiAgICB9XG4gICAgZ2V0SXRlbShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShlKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiUkVBRFwiLCBlLCB0KSwgdDtcbiAgICB9XG4gICAgc2V0SXRlbShlLCB0KSB7XG4gICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiU0VUXCIsIGUsIHQpLCB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShlLCB0KTtcbiAgICB9XG4gICAgcmVtb3ZlSXRlbShlKSB7XG4gICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiUkVNT1ZFXCIsIGUpLCB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShlKTtcbiAgICB9XG4gICAgZ3MoZSkge1xuICAgICAgICAvLyBOb3RlOiBUaGUgZnVuY3Rpb24gaXMgdHlwZWQgdG8gdGFrZSBFdmVudCB0byBiZSBpbnRlcmZhY2UtY29tcGF0aWJsZSB3aXRoXG4gICAgICAgIC8vIGBXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcmAuXG4gICAgICAgIGNvbnN0IHQgPSBlO1xuICAgICAgICBpZiAodC5zdG9yYWdlQXJlYSA9PT0gdGhpcy5zdG9yYWdlKSB7XG4gICAgICAgICAgICBpZiAoX19QUklWQVRFX2xvZ0RlYnVnKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJFVkVOVFwiLCB0LmtleSwgdC5uZXdWYWx1ZSksIHQua2V5ID09PSB0aGlzLndzKSByZXR1cm4gdm9pZCBfX1BSSVZBVEVfbG9nRXJyb3IoXCJSZWNlaXZlZCBXZWJTdG9yYWdlIG5vdGlmaWNhdGlvbiBmb3IgbG9jYWwgY2hhbmdlLiBBbm90aGVyIGNsaWVudCBtaWdodCBoYXZlIGdhcmJhZ2UtY29sbGVjdGVkIG91ciBzdGF0ZVwiKTtcbiAgICAgICAgICAgIHRoaXMub2kuZW5xdWV1ZVJldHJ5YWJsZSgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHQua2V5KSBpZiAodGhpcy5icy50ZXN0KHQua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gdC5uZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLiRzKHQua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5VcyhlLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5Xcyh0LmtleSwgdC5uZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHJldHVybiB0aGlzLlVzKGUuY2xpZW50SWQsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuRHMudGVzdCh0LmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0Lm5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuR3ModC5rZXksIHQubmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlKSByZXR1cm4gdGhpcy56cyhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLkNzLnRlc3QodC5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdC5uZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmpzKHQua2V5LCB0Lm5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSkgcmV0dXJuIHRoaXMuSHMoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5rZXkgPT09IHRoaXMudnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0Lm5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMueHModC5uZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHJldHVybiB0aGlzLk9zKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQua2V5ID09PSB0aGlzLlNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gZnVuY3Rpb24gX19QUklWQVRFX2Zyb21XZWJTdG9yYWdlU2VxdWVuY2VOdW1iZXIoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ID0gX19QUklWQVRFX0xpc3RlblNlcXVlbmNlLm9lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9IGUpIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBKU09OLnBhcnNlKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX1BSSVZBVEVfaGFyZEFzc2VydChcIm51bWJlclwiID09IHR5cGVvZiBuKSwgdCA9IG47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX1BSSVZBVEVfbG9nRXJyb3IoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIkZhaWxlZCB0byByZWFkIHNlcXVlbmNlIG51bWJlciBmcm9tIFdlYlN0b3JhZ2VcIiwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gKiBgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGVgIGlzIGEgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIFNoYXJlZENsaWVudFN0YXRlIGZvclxuICogY2xpZW50cyB1c2luZyBtZW1vcnkgcGVyc2lzdGVuY2UuIFRoZSBzdGF0ZSBpbiB0aGlzIGNsYXNzIHJlbWFpbnMgZnVsbHlcbiAqIGlzb2xhdGVkIGFuZCBubyBzeW5jaHJvbml6YXRpb24gaXMgcGVyZm9ybWVkLlxuICovICh0Lm5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgIT09IF9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZS5vZSAmJiB0aGlzLnNlcXVlbmNlTnVtYmVySGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LmtleSA9PT0gdGhpcy5Gcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuSnModC5uZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChlLm1hcCgoZSA9PiB0aGlzLnN5bmNFbmdpbmUuWXMoZSkpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy55cy5wdXNoKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBrcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHMuZ2V0KHRoaXMuVnMpO1xuICAgIH1cbiAgICBNcygpIHtcbiAgICAgICAgdGhpcy5zZXRJdGVtKHRoaXMud3MsIHRoaXMua3MuZHMoKSk7XG4gICAgfVxuICAgIExzKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IG5ldyBfX1BSSVZBVEVfTXV0YXRpb25NZXRhZGF0YSh0aGlzLmN1cnJlbnRVc2VyLCBlLCB0LCBuKSwgaSA9IGNyZWF0ZVdlYlN0b3JhZ2VNdXRhdGlvbkJhdGNoS2V5KHRoaXMucGVyc2lzdGVuY2VLZXksIHRoaXMuY3VycmVudFVzZXIsIGUpO1xuICAgICAgICB0aGlzLnNldEl0ZW0oaSwgci5kcygpKTtcbiAgICB9XG4gICAgQnMoZSkge1xuICAgICAgICBjb25zdCB0ID0gY3JlYXRlV2ViU3RvcmFnZU11dGF0aW9uQmF0Y2hLZXkodGhpcy5wZXJzaXN0ZW5jZUtleSwgdGhpcy5jdXJyZW50VXNlciwgZSk7XG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbSh0KTtcbiAgICB9XG4gICAgUXMoZSkge1xuICAgICAgICBjb25zdCB0ID0ge1xuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuVnMsXG4gICAgICAgICAgICBvbmxpbmVTdGF0ZTogZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnZzLCBKU09OLnN0cmluZ2lmeSh0KSk7XG4gICAgfVxuICAgIHFzKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IGNyZWF0ZVdlYlN0b3JhZ2VRdWVyeVRhcmdldE1ldGFkYXRhS2V5KHRoaXMucGVyc2lzdGVuY2VLZXksIGUpLCBpID0gbmV3IF9fUFJJVkFURV9RdWVyeVRhcmdldE1ldGFkYXRhKGUsIHQsIG4pO1xuICAgICAgICB0aGlzLnNldEl0ZW0ociwgaS5kcygpKTtcbiAgICB9XG4gICAgS3MoZSkge1xuICAgICAgICBjb25zdCB0ID0gSlNPTi5zdHJpbmdpZnkoQXJyYXkuZnJvbShlKSk7XG4gICAgICAgIHRoaXMuc2V0SXRlbSh0aGlzLkZzLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgY2xpZW50IHN0YXRlIGtleSBpbiBXZWJTdG9yYWdlLiBSZXR1cm5zIG51bGwgaWYgdGhlIGtleSBkb2VzIG5vdFxuICAgICAqIG1hdGNoIHRoZSBleHBlY3RlZCBrZXkgZm9ybWF0LlxuICAgICAqLyAgICAkcyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmJzLmV4ZWMoZSk7XG4gICAgICAgIHJldHVybiB0ID8gdFsxXSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGNsaWVudCBzdGF0ZSBpbiBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWUgY291bGQgbm90XG4gICAgICogYmUgcGFyc2VkLlxuICAgICAqLyAgICBXcyhlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLiRzKGUpO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX1JlbW90ZUNsaWVudFN0YXRlLkVzKG4sIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBtdXRhdGlvbiBiYXRjaCBzdGF0ZSBpbiBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWVcbiAgICAgKiBjb3VsZCBub3QgYmUgcGFyc2VkLlxuICAgICAqLyAgICBHcyhlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLkRzLmV4ZWMoZSksIHIgPSBOdW1iZXIoblsxXSksIGkgPSB2b2lkIDAgIT09IG5bMl0gPyBuWzJdIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9NdXRhdGlvbk1ldGFkYXRhLkVzKG5ldyBVc2VyKGkpLCByLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgcXVlcnkgdGFyZ2V0IHN0YXRlIGZyb20gV2ViU3RvcmFnZS4gUmV0dXJucyAnbnVsbCcgaWYgdGhlIHZhbHVlXG4gICAgICogY291bGQgbm90IGJlIHBhcnNlZC5cbiAgICAgKi8gICAganMoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5Dcy5leGVjKGUpLCByID0gTnVtYmVyKG5bMV0pO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX1F1ZXJ5VGFyZ2V0TWV0YWRhdGEuRXMociwgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhbiBvbmxpbmUgc3RhdGUgZnJvbSBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWVcbiAgICAgKiBjb3VsZCBub3QgYmUgcGFyc2VkLlxuICAgICAqLyAgICB4cyhlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfU2hhcmVkT25saW5lU3RhdGUuRXMoZSk7XG4gICAgfVxuICAgIEpzKGUpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZSk7XG4gICAgfVxuICAgIGFzeW5jIHpzKGUpIHtcbiAgICAgICAgaWYgKGUudXNlci51aWQgPT09IHRoaXMuY3VycmVudFVzZXIudWlkKSByZXR1cm4gdGhpcy5zeW5jRW5naW5lLlpzKGUuYmF0Y2hJZCwgZS5zdGF0ZSwgZS5lcnJvcik7XG4gICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlNoYXJlZENsaWVudFN0YXRlXCIsIGBJZ25vcmluZyBtdXRhdGlvbiBmb3Igbm9uLWFjdGl2ZSB1c2VyICR7ZS51c2VyLnVpZH1gKTtcbiAgICB9XG4gICAgSHMoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeW5jRW5naW5lLlhzKGUudGFyZ2V0SWQsIGUuc3RhdGUsIGUuZXJyb3IpO1xuICAgIH1cbiAgICBVcyhlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0ID8gdGhpcy5wcy5pbnNlcnQoZSwgdCkgOiB0aGlzLnBzLnJlbW92ZShlKSwgciA9IHRoaXMuTnModGhpcy5wcyksIGkgPSB0aGlzLk5zKG4pLCBzID0gW10sIG8gPSBbXTtcbiAgICAgICAgcmV0dXJuIGkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICByLmhhcyhlKSB8fCBzLnB1c2goZSk7XG4gICAgICAgIH0pKSwgci5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIGkuaGFzKGUpIHx8IG8ucHVzaChlKTtcbiAgICAgICAgfSkpLCB0aGlzLnN5bmNFbmdpbmUuZW8ocywgbykudGhlbigoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcyA9IG47XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgT3MoZSkge1xuICAgICAgICAvLyBXZSBjaGVjayB3aGV0aGVyIHRoZSBjbGllbnQgdGhhdCB3cm90ZSB0aGlzIG9ubGluZSBzdGF0ZSBpcyBzdGlsbCBhY3RpdmVcbiAgICAgICAgLy8gYnkgY29tcGFyaW5nIGl0cyBjbGllbnQgSUQgdG8gdGhlIGxpc3Qgb2YgY2xpZW50cyBrZXB0IGFjdGl2ZSBpblxuICAgICAgICAvLyBJbmRleGVkRGIuIElmIGEgY2xpZW50IGRvZXMgbm90IHVwZGF0ZSB0aGVpciBJbmRleGVkRGIgY2xpZW50IHN0YXRlXG4gICAgICAgIC8vIHdpdGhpbiA1IHNlY29uZHMsIGl0IGlzIGNvbnNpZGVyZWQgaW5hY3RpdmUgYW5kIHdlIGRvbid0IGVtaXQgYW4gb25saW5lXG4gICAgICAgIC8vIHN0YXRlIGV2ZW50LlxuICAgICAgICB0aGlzLnBzLmdldChlLmNsaWVudElkKSAmJiB0aGlzLm9ubGluZVN0YXRlSGFuZGxlcihlLm9ubGluZVN0YXRlKTtcbiAgICB9XG4gICAgTnMoZSkge1xuICAgICAgICBsZXQgdCA9IF9fUFJJVkFURV90YXJnZXRJZFNldCgpO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgdCA9IHQudW5pb25XaXRoKG4uYWN0aXZlVGFyZ2V0SWRzKTtcbiAgICAgICAgfSkpLCB0O1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX01lbW9yeVNoYXJlZENsaWVudFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ubyA9IG5ldyBfX1BSSVZBVEVfTG9jYWxDbGllbnRTdGF0ZSwgdGhpcy5ybyA9IHt9LCB0aGlzLm9ubGluZVN0YXRlSGFuZGxlciA9IG51bGwsIFxuICAgICAgICB0aGlzLnNlcXVlbmNlTnVtYmVySGFuZGxlciA9IG51bGw7XG4gICAgfVxuICAgIGFkZFBlbmRpbmdNdXRhdGlvbihlKSB7XG4gICAgICAgIC8vIE5vIG9wLlxuICAgIH1cbiAgICB1cGRhdGVNdXRhdGlvblN0YXRlKGUsIHQsIG4pIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfVxuICAgIGFkZExvY2FsUXVlcnlUYXJnZXQoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5uby5BcyhlKSwgdGhpcy5yb1tlXSB8fCBcIm5vdC1jdXJyZW50XCI7XG4gICAgfVxuICAgIHVwZGF0ZVF1ZXJ5U3RhdGUoZSwgdCwgbikge1xuICAgICAgICB0aGlzLnJvW2VdID0gdDtcbiAgICB9XG4gICAgcmVtb3ZlTG9jYWxRdWVyeVRhcmdldChlKSB7XG4gICAgICAgIHRoaXMubm8uUnMoZSk7XG4gICAgfVxuICAgIGlzTG9jYWxRdWVyeVRhcmdldChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vLmFjdGl2ZVRhcmdldElkcy5oYXMoZSk7XG4gICAgfVxuICAgIGNsZWFyUXVlcnlTdGF0ZShlKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJvW2VdO1xuICAgIH1cbiAgICBnZXRBbGxBY3RpdmVRdWVyeVRhcmdldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vLmFjdGl2ZVRhcmdldElkcztcbiAgICB9XG4gICAgaXNBY3RpdmVRdWVyeVRhcmdldChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vLmFjdGl2ZVRhcmdldElkcy5oYXMoZSk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ubyA9IG5ldyBfX1BSSVZBVEVfTG9jYWxDbGllbnRTdGF0ZSwgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGhhbmRsZVVzZXJDaGFuZ2UoZSwgdCwgbikge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG4gICAgc2V0T25saW5lU3RhdGUoZSkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG4gICAgc2h1dGRvd24oKSB7fVxuICAgIHdyaXRlU2VxdWVuY2VOdW1iZXIoZSkge31cbiAgICBub3RpZnlCdW5kbGVMb2FkZWQoZSkge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIF9fUFJJVkFURV9Ob29wQ29ubmVjdGl2aXR5TW9uaXRvciB7XG4gICAgaW8oZSkge1xuICAgICAgICAvLyBOby1vcC5cbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIC8vIE5vLW9wLlxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFJlZmVyZW5jZXMgdG8gYHdpbmRvd2AgYXJlIGd1YXJkZWQgYnkgQnJvd3NlckNvbm5lY3Rpdml0eU1vbml0b3IuaXNBdmFpbGFibGUoKVxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vKipcbiAqIEJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgQ29ubmVjdGl2aXR5TW9uaXRvci5cbiAqL1xuY2xhc3MgX19QUklWQVRFX0Jyb3dzZXJDb25uZWN0aXZpdHlNb25pdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zbyA9ICgpID0+IHRoaXMub28oKSwgdGhpcy5fbyA9ICgpID0+IHRoaXMuYW8oKSwgdGhpcy51byA9IFtdLCB0aGlzLmNvKCk7XG4gICAgfVxuICAgIGlvKGUpIHtcbiAgICAgICAgdGhpcy51by5wdXNoKGUpO1xuICAgIH1cbiAgICBzaHV0ZG93bigpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgdGhpcy5zbyksIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCB0aGlzLl9vKTtcbiAgICB9XG4gICAgY28oKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib25saW5lXCIsIHRoaXMuc28pLCB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5fbyk7XG4gICAgfVxuICAgIG9vKCkge1xuICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJDb25uZWN0aXZpdHlNb25pdG9yXCIsIFwiTmV0d29yayBjb25uZWN0aXZpdHkgY2hhbmdlZDogQVZBSUxBQkxFXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy51bykgZSgwIC8qIE5ldHdvcmtTdGF0dXMuQVZBSUxBQkxFICovKTtcbiAgICB9XG4gICAgYW8oKSB7XG4gICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkNvbm5lY3Rpdml0eU1vbml0b3JcIiwgXCJOZXR3b3JrIGNvbm5lY3Rpdml0eSBjaGFuZ2VkOiBVTkFWQUlMQUJMRVwiKTtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMudW8pIGUoMSAvKiBOZXR3b3JrU3RhdHVzLlVOQVZBSUxBQkxFICovKTtcbiAgICB9XG4gICAgLy8gVE9ETyhjaGVuYnJpYW4pOiBDb25zaWRlciBwYXNzaW5nIGluIHdpbmRvdyBlaXRoZXIgaW50byB0aGlzIGNvbXBvbmVudCBvclxuICAgIC8vIGhlcmUgZm9yIHRlc3RpbmcgdmlhIEZha2VXaW5kb3cuXG4gICAgLyoqIENoZWNrcyB0aGF0IGFsbCB1c2VkIGF0dHJpYnV0ZXMgb2Ygd2luZG93IGFyZSBhdmFpbGFibGUuICovXG4gICAgc3RhdGljIEQoKSB7XG4gICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgJiYgdm9pZCAwICE9PSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAmJiB2b2lkIDAgIT09IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIG1vc3QgcmVjZW50IGludm9jYXRpb24gb2ZcbiAqIGBnZW5lcmF0ZVVuaXF1ZURlYnVnSWQoKWAsIG9yIG51bGwgaWYgaXQgaGFzIG5ldmVyIGJlZW4gaW52b2tlZC5cbiAqLyBsZXQgVmUgPSBudWxsO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhbmQgcmV0dXJucyBhbiBpbml0aWFsIHZhbHVlIGZvciBgbGFzdFVuaXF1ZURlYnVnSWRgLlxuICpcbiAqIFRoZSByZXR1cm5lZCB2YWx1ZSBpcyByYW5kb21seSBzZWxlY3RlZCBmcm9tIGEgcmFuZ2Ugb2YgaW50ZWdlcnMgdGhhdCBhcmVcbiAqIHJlcHJlc2VudGVkIGFzIDggaGV4YWRlY2ltYWwgZGlnaXRzLiBUaGlzIG1lYW5zIHRoYXQgKHdpdGhpbiByZWFzb24pIGFueVxuICogbnVtYmVycyBnZW5lcmF0ZWQgYnkgaW5jcmVtZW50aW5nIHRoZSByZXR1cm5lZCBudW1iZXIgYnkgMSB3aWxsIGFsc28gYmVcbiAqIHJlcHJlc2VudGVkIGJ5IDggaGV4YWRlY2ltYWwgZGlnaXRzLiBUaGlzIGxlYWRzIHRvIGFsbCBcIklEc1wiIGhhdmluZyB0aGUgc2FtZVxuICogbGVuZ3RoIHdoZW4gY29udmVydGVkIHRvIGEgaGV4YWRlY2ltYWwgc3RyaW5nLCBtYWtpbmcgcmVhZGluZyBsb2dzIGNvbnRhaW5pbmdcbiAqIHRoZXNlIElEcyBlYXNpZXIgdG8gZm9sbG93LiBBbmQgc2luY2UgdGhlIHJldHVybiB2YWx1ZSBpcyByYW5kb21seSBzZWxlY3RlZFxuICogaXQgd2lsbCBoZWxwIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBsb2dzIGZyb20gZGlmZmVyZW50IGV4ZWN1dGlvbnMuXG4gKi9cbi8qKlxuICogR2VuZXJhdGVzIGFuZCByZXR1cm5zIGEgdW5pcXVlIElEIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nLlxuICpcbiAqIFRoZSByZXR1cm5lZCBJRCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGRlYnVnIGxvZ2dpbmcgbWVzc2FnZXMgdG8gaGVscFxuICogY29ycmVsYXRlIGxvZyBtZXNzYWdlcyB0aGF0IG1heSBiZSBzcGF0aWFsbHkgc2VwYXJhdGVkIGluIHRoZSBsb2dzLCBidXRcbiAqIGxvZ2ljYWxseSByZWxhdGVkLiBGb3IgZXhhbXBsZSwgYSBuZXR3b3JrIGNvbm5lY3Rpb24gY291bGQgaW5jbHVkZSB0aGUgc2FtZVxuICogXCJkZWJ1ZyBJRFwiIHN0cmluZyBpbiBhbGwgb2YgaXRzIGxvZyBtZXNzYWdlcyB0byBoZWxwIHRyYWNlIGEgc3BlY2lmaWNcbiAqIGNvbm5lY3Rpb24gb3ZlciB0aW1lLlxuICpcbiAqIEByZXR1cm4gdGhlIDEwLWNoYXJhY3RlciBnZW5lcmF0ZWQgSUQgKGUuZy4gXCIweGExYjJjM2Q0XCIpLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfZ2VuZXJhdGVVbmlxdWVEZWJ1Z0lkKCkge1xuICAgIHJldHVybiBudWxsID09PSBWZSA/IFZlID0gZnVuY3Rpb24gX19QUklWQVRFX2dlbmVyYXRlSW5pdGlhbFVuaXF1ZURlYnVnSWQoKSB7XG4gICAgICAgIHJldHVybiAyNjg0MzU0NTYgKyBNYXRoLnJvdW5kKDIxNDc0ODM2NDggKiBNYXRoLnJhbmRvbSgpKTtcbiAgICB9KCkgOiBWZSsrLCBcIjB4XCIgKyBWZS50b1N0cmluZygxNik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNvbnN0IG1lID0ge1xuICAgIEJhdGNoR2V0RG9jdW1lbnRzOiBcImJhdGNoR2V0XCIsXG4gICAgQ29tbWl0OiBcImNvbW1pdFwiLFxuICAgIFJ1blF1ZXJ5OiBcInJ1blF1ZXJ5XCIsXG4gICAgUnVuQWdncmVnYXRpb25RdWVyeTogXCJydW5BZ2dyZWdhdGlvblF1ZXJ5XCJcbn07XG5cbi8qKlxuICogTWFwcyBSUEMgbmFtZXMgdG8gdGhlIGNvcnJlc3BvbmRpbmcgUkVTVCBlbmRwb2ludCBuYW1lLlxuICpcbiAqIFdlIHVzZSBhcnJheSBub3RhdGlvbiB0byBhdm9pZCBtYW5nbGluZy5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUHJvdmlkZXMgYSBzaW1wbGUgaGVscGVyIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB0aGUgU3RyZWFtIGludGVyZmFjZSB0b1xuICogYnJpZGdlIHRvIG90aGVyIGltcGxlbWVudGF0aW9ucyB0aGF0IGFyZSBzdHJlYW1zIGJ1dCBkbyBub3QgaW1wbGVtZW50IHRoZVxuICogaW50ZXJmYWNlLiBUaGUgc3RyZWFtIGNhbGxiYWNrcyBhcmUgaW52b2tlZCB3aXRoIHRoZSBjYWxsT24uLi4gbWV0aG9kcy5cbiAqL1xuY2xhc3MgX19QUklWQVRFX1N0cmVhbUJyaWRnZSB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLmxvID0gZS5sbywgdGhpcy5obyA9IGUuaG87XG4gICAgfVxuICAgIFBvKGUpIHtcbiAgICAgICAgdGhpcy5JbyA9IGU7XG4gICAgfVxuICAgIFRvKGUpIHtcbiAgICAgICAgdGhpcy5FbyA9IGU7XG4gICAgfVxuICAgIEFvKGUpIHtcbiAgICAgICAgdGhpcy5SbyA9IGU7XG4gICAgfVxuICAgIG9uTWVzc2FnZShlKSB7XG4gICAgICAgIHRoaXMuVm8gPSBlO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5obygpO1xuICAgIH1cbiAgICBzZW5kKGUpIHtcbiAgICAgICAgdGhpcy5sbyhlKTtcbiAgICB9XG4gICAgbW8oKSB7XG4gICAgICAgIHRoaXMuSW8oKTtcbiAgICB9XG4gICAgZm8oKSB7XG4gICAgICAgIHRoaXMuRW8oKTtcbiAgICB9XG4gICAgcG8oZSkge1xuICAgICAgICB0aGlzLlJvKGUpO1xuICAgIH1cbiAgICB5byhlKSB7XG4gICAgICAgIHRoaXMuVm8oZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCBmZSA9IFwiV2ViQ2hhbm5lbENvbm5lY3Rpb25cIjtcblxuY2xhc3MgX19QUklWQVRFX1dlYkNoYW5uZWxDb25uZWN0aW9uIGV4dGVuZHMgXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBSZXN0LWJhc2VkIGNvbm5lY3Rpb25zIHRvIHRoZSBiYWNrZW5kIChXZWJDaGFubmVsIGFuZFxuICogSFRUUCkuXG4gKi9cbmNsYXNzIF9fUFJJVkFURV9SZXN0Q29ubmVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLmRhdGFiYXNlSW5mbyA9IGUsIHRoaXMuZGF0YWJhc2VJZCA9IGUuZGF0YWJhc2VJZDtcbiAgICAgICAgY29uc3QgdCA9IGUuc3NsID8gXCJodHRwc1wiIDogXCJodHRwXCIsIG4gPSBlbmNvZGVVUklDb21wb25lbnQodGhpcy5kYXRhYmFzZUlkLnByb2plY3RJZCksIHIgPSBlbmNvZGVVUklDb21wb25lbnQodGhpcy5kYXRhYmFzZUlkLmRhdGFiYXNlKTtcbiAgICAgICAgdGhpcy53byA9IHQgKyBcIjovL1wiICsgZS5ob3N0LCB0aGlzLlNvID0gYHByb2plY3RzLyR7bn0vZGF0YWJhc2VzLyR7cn1gLCB0aGlzLmJvID0gXCIoZGVmYXVsdClcIiA9PT0gdGhpcy5kYXRhYmFzZUlkLmRhdGFiYXNlID8gYHByb2plY3RfaWQ9JHtufWAgOiBgcHJvamVjdF9pZD0ke259JmRhdGFiYXNlX2lkPSR7cn1gO1xuICAgIH1cbiAgICBnZXQgRG8oKSB7XG4gICAgICAgIC8vIEJvdGggYGludm9rZVJQQygpYCBhbmQgYGludm9rZVN0cmVhbWluZ1JQQygpYCB1c2UgdGhlaXIgYHBhdGhgIGFyZ3VtZW50cyB0byBkZXRlcm1pbmVcbiAgICAgICAgLy8gd2hlcmUgdG8gcnVuIHRoZSBxdWVyeSwgYW5kIGV4cGVjdCB0aGUgYHJlcXVlc3RgIHRvIE5PVCBzcGVjaWZ5IHRoZSBcInBhdGhcIi5cbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICBDbyhlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgIGNvbnN0IHMgPSBfX1BSSVZBVEVfZ2VuZXJhdGVVbmlxdWVEZWJ1Z0lkKCksIG8gPSB0aGlzLnZvKGUsIHQudG9VcmlFbmNvZGVkU3RyaW5nKCkpO1xuICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJSZXN0Q29ubmVjdGlvblwiLCBgU2VuZGluZyBSUEMgJyR7ZX0nICR7c306YCwgbywgbik7XG4gICAgICAgIGNvbnN0IF8gPSB7XG4gICAgICAgICAgICBcImdvb2dsZS1jbG91ZC1yZXNvdXJjZS1wcmVmaXhcIjogdGhpcy5TbyxcbiAgICAgICAgICAgIFwieC1nb29nLXJlcXVlc3QtcGFyYW1zXCI6IHRoaXMuYm9cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuRm8oXywgciwgaSksIHRoaXMuTW8oZSwgbywgXywgbikudGhlbigodCA9PiAoX19QUklWQVRFX2xvZ0RlYnVnKFwiUmVzdENvbm5lY3Rpb25cIiwgYFJlY2VpdmVkIFJQQyAnJHtlfScgJHtzfTogYCwgdCksIFxuICAgICAgICB0KSksICh0ID0+IHtcbiAgICAgICAgICAgIHRocm93IF9fUFJJVkFURV9sb2dXYXJuKFwiUmVzdENvbm5lY3Rpb25cIiwgYFJQQyAnJHtlfScgJHtzfSBmYWlsZWQgd2l0aCBlcnJvcjogYCwgdCwgXCJ1cmw6IFwiLCBvLCBcInJlcXVlc3Q6XCIsIG4pLCBcbiAgICAgICAgICAgIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgeG8oZSwgdCwgbiwgciwgaSwgcykge1xuICAgICAgICAvLyBUaGUgUkVTVCBBUEkgYXV0b21hdGljYWxseSBhZ2dyZWdhdGVzIGFsbCBvZiB0aGUgc3RyZWFtZWQgcmVzdWx0cywgc28gd2VcbiAgICAgICAgLy8gY2FuIGp1c3QgdXNlIHRoZSBub3JtYWwgaW52b2tlKCkgbWV0aG9kLlxuICAgICAgICByZXR1cm4gdGhpcy5DbyhlLCB0LCBuLCByLCBpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgdGhlIGhlYWRlcnMgZm9yIGEgcmVxdWVzdCwgYWRkaW5nIGFueSBhdXRob3JpemF0aW9uIHRva2VuIGlmXG4gICAgICogcHJlc2VudCBhbmQgYW55IGFkZGl0aW9uYWwgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gICAgICovICAgIEZvKGUsIHQsIG4pIHtcbiAgICAgICAgZVtcIlgtR29vZy1BcGktQ2xpZW50XCJdID0gXG4gICAgICAgIC8vIFNES19WRVJTSU9OIGlzIHVwZGF0ZWQgdG8gZGlmZmVyZW50IHZhbHVlIGF0IHJ1bnRpbWUgZGVwZW5kaW5nIG9uIHRoZSBlbnRyeSBwb2ludCxcbiAgICAgICAgLy8gc28gd2UgbmVlZCB0byBnZXQgaXRzIHZhbHVlIHdoZW4gd2UgbmVlZCBpdCBpbiBhIGZ1bmN0aW9uLlxuICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfZ2V0R29vZ0FwaUNsaWVudFZhbHVlKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZ2wtanMvIGZpcmUvXCIgKyBiO1xuICAgICAgICB9KCksIFxuICAgICAgICAvLyBDb250ZW50LVR5cGU6IHRleHQvcGxhaW4gd2lsbCBhdm9pZCBwcmVmbGlnaHQgcmVxdWVzdHMgd2hpY2ggbWlnaHRcbiAgICAgICAgLy8gbWVzcyB3aXRoIENPUlMgYW5kIHJlZGlyZWN0cyBieSBwcm94aWVzLiBJZiB3ZSBhZGQgY3VzdG9tIGhlYWRlcnNcbiAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIGNoYW5nZSB0aGlzIGNvZGUgdG8gcG90ZW50aWFsbHkgdXNlIHRoZSAkaHR0cE92ZXJ3cml0ZVxuICAgICAgICAvLyBwYXJhbWV0ZXIgc3VwcG9ydGVkIGJ5IEVTRiB0byBhdm9pZCB0cmlnZ2VyaW5nIHByZWZsaWdodCByZXF1ZXN0cy5cbiAgICAgICAgZVtcIkNvbnRlbnQtVHlwZVwiXSA9IFwidGV4dC9wbGFpblwiLCB0aGlzLmRhdGFiYXNlSW5mby5hcHBJZCAmJiAoZVtcIlgtRmlyZWJhc2UtR01QSURcIl0gPSB0aGlzLmRhdGFiYXNlSW5mby5hcHBJZCksIFxuICAgICAgICB0ICYmIHQuaGVhZGVycy5mb3JFYWNoKCgodCwgbikgPT4gZVtuXSA9IHQpKSwgbiAmJiBuLmhlYWRlcnMuZm9yRWFjaCgoKHQsIG4pID0+IGVbbl0gPSB0KSk7XG4gICAgfVxuICAgIHZvKGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IG1lW2VdO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy53b30vdjEvJHt0fToke259YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIGFuZCBjbGVhbnMgdXAgYW55IHJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbm5lY3Rpb24uIFRoaXNcbiAgICAgKiBpbXBsZW1lbnRhdGlvbiBpcyBhIG5vLW9wIGJlY2F1c2UgdGhlcmUgYXJlIG5vIHJlc291cmNlcyBhc3NvY2lhdGVkXG4gICAgICogd2l0aCB0aGUgUmVzdENvbm5lY3Rpb24gdGhhdCBuZWVkIHRvIGJlIGNsZWFuZWQgdXAuXG4gICAgICovICAgIHRlcm1pbmF0ZSgpIHtcbiAgICAgICAgLy8gTm8tb3BcbiAgICB9XG59IHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHN1cGVyKGUpLCB0aGlzLmZvcmNlTG9uZ1BvbGxpbmcgPSBlLmZvcmNlTG9uZ1BvbGxpbmcsIHRoaXMuYXV0b0RldGVjdExvbmdQb2xsaW5nID0gZS5hdXRvRGV0ZWN0TG9uZ1BvbGxpbmcsIFxuICAgICAgICB0aGlzLnVzZUZldGNoU3RyZWFtcyA9IGUudXNlRmV0Y2hTdHJlYW1zLCB0aGlzLmxvbmdQb2xsaW5nT3B0aW9ucyA9IGUubG9uZ1BvbGxpbmdPcHRpb25zO1xuICAgIH1cbiAgICBNbyhlLCB0LCBuLCByKSB7XG4gICAgICAgIGNvbnN0IGkgPSBfX1BSSVZBVEVfZ2VuZXJhdGVVbmlxdWVEZWJ1Z0lkKCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKHMsIG8pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IF8gPSBuZXcgd2ViY2hhbm5lbEJsb2IuWGhySW87XG4gICAgICAgICAgICBfLnNldFdpdGhDcmVkZW50aWFscyghMCksIF8ubGlzdGVuT25jZSh3ZWJjaGFubmVsQmxvYi5FdmVudFR5cGUuQ09NUExFVEUsICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfLmdldExhc3RFcnJvckNvZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2ViY2hhbm5lbEJsb2IuRXJyb3JDb2RlLk5PX0VSUk9SOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IF8uZ2V0UmVzcG9uc2VKc29uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoZmUsIGBYSFIgZm9yIFJQQyAnJHtlfScgJHtpfSByZWNlaXZlZDpgLCBKU09OLnN0cmluZ2lmeSh0KSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgcyh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSB3ZWJjaGFubmVsQmxvYi5FcnJvckNvZGUuVElNRU9VVDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhmZSwgYFJQQyAnJHtlfScgJHtpfSB0aW1lZCBvdXRgKSwgbyhuZXcgRmlyZXN0b3JlRXJyb3IoQy5ERUFETElORV9FWENFRURFRCwgXCJSZXF1ZXN0IHRpbWUgb3V0XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSB3ZWJjaGFubmVsQmxvYi5FcnJvckNvZGUuSFRUUF9FUlJPUjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBfLmdldFN0YXR1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9fUFJJVkFURV9sb2dEZWJ1ZyhmZSwgYFJQQyAnJHtlfScgJHtpfSBmYWlsZWQgd2l0aCBzdGF0dXM6YCwgbiwgXCJyZXNwb25zZSB0ZXh0OlwiLCBfLmdldFJlc3BvbnNlVGV4dCgpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBuID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlID0gXy5nZXRSZXNwb25zZUpzb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGUpICYmIChlID0gZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG51bGwgPT0gZSA/IHZvaWQgMCA6IGUuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgdC5zdGF0dXMgJiYgdC5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBmdW5jdGlvbiBfX1BSSVZBVEVfbWFwQ29kZUZyb21IdHRwUmVzcG9uc2VFcnJvclN0YXR1cyhlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL18vZywgXCItXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoQykuaW5kZXhPZih0KSA+PSAwID8gdCA6IEMuVU5LTk9XTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSh0LnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8obmV3IEZpcmVzdG9yZUVycm9yKGUsIHQubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBvKG5ldyBGaXJlc3RvcmVFcnJvcihDLlVOS05PV04sIFwiU2VydmVyIHJlc3BvbmRlZCB3aXRoIHN0YXR1cyBcIiArIF8uZ2V0U3RhdHVzKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlY2VpdmVkIGFuIEhUVFBfRVJST1IgYnV0IHRoZXJlJ3Mgbm8gc3RhdHVzIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIG1vc3QgcHJvYmFibHkgYSBjb25uZWN0aW9uIGlzc3VlXG4gICAgICAgICAgICAgICAgICAgICAgICBvKG5ldyBGaXJlc3RvcmVFcnJvcihDLlVOQVZBSUxBQkxFLCBcIkNvbm5lY3Rpb24gZmFpbGVkLlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoZmUsIGBSUEMgJyR7ZX0nICR7aX0gY29tcGxldGVkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBKU09OLnN0cmluZ2lmeShyKTtcbiAgICAgICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhmZSwgYFJQQyAnJHtlfScgJHtpfSBzZW5kaW5nIHJlcXVlc3Q6YCwgciksIF8uc2VuZCh0LCBcIlBPU1RcIiwgYSwgbiwgMTUpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIE9vKGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IF9fUFJJVkFURV9nZW5lcmF0ZVVuaXF1ZURlYnVnSWQoKSwgaSA9IFsgdGhpcy53bywgXCIvXCIsIFwiZ29vZ2xlLmZpcmVzdG9yZS52MS5GaXJlc3RvcmVcIiwgXCIvXCIsIGUsIFwiL2NoYW5uZWxcIiBdLCBzID0gd2ViY2hhbm5lbEJsb2IuY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCgpLCBvID0gd2ViY2hhbm5lbEJsb2IuZ2V0U3RhdEV2ZW50VGFyZ2V0KCksIF8gPSB7XG4gICAgICAgICAgICAvLyBSZXF1aXJlZCBmb3IgYmFja2VuZCBzdGlja2luZXNzLCByb3V0aW5nIGJlaGF2aW9yIGlzIGJhc2VkIG9uIHRoaXNcbiAgICAgICAgICAgIC8vIHBhcmFtZXRlci5cbiAgICAgICAgICAgIGh0dHBTZXNzaW9uSWRQYXJhbTogXCJnc2Vzc2lvbmlkXCIsXG4gICAgICAgICAgICBpbml0TWVzc2FnZUhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgbWVzc2FnZVVybFBhcmFtczoge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgcGFyYW0gaXMgdXNlZCB0byBpbXByb3ZlIHJvdXRpbmcgYW5kIHByb2plY3QgaXNvbGF0aW9uIGJ5IHRoZVxuICAgICAgICAgICAgICAgIC8vIGJhY2tlbmQgYW5kIG11c3QgYmUgaW5jbHVkZWQgaW4gZXZlcnkgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICBkYXRhYmFzZTogYHByb2plY3RzLyR7dGhpcy5kYXRhYmFzZUlkLnByb2plY3RJZH0vZGF0YWJhc2VzLyR7dGhpcy5kYXRhYmFzZUlkLmRhdGFiYXNlfWBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZW5kUmF3SnNvbjogITAsXG4gICAgICAgICAgICBzdXBwb3J0c0Nyb3NzRG9tYWluWGhyOiAhMCxcbiAgICAgICAgICAgIGludGVybmFsQ2hhbm5lbFBhcmFtczoge1xuICAgICAgICAgICAgICAgIC8vIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHRpbWVvdXQgKHJhbmRvbWl6ZWQgYmV0d2VlbiAxMC0yMCBzZWNvbmRzKSBzaW5jZVxuICAgICAgICAgICAgICAgIC8vIGEgbGFyZ2Ugd3JpdGUgYmF0Y2ggb24gYSBzbG93IGludGVybmV0IGNvbm5lY3Rpb24gbWF5IHRha2UgYSBsb25nXG4gICAgICAgICAgICAgICAgLy8gdGltZSB0byBzZW5kIHRvIHRoZSBiYWNrZW5kLiBSYXRoZXIgdGhhbiBoYXZlIFdlYkNoYW5uZWwgaW1wb3NlIGFcbiAgICAgICAgICAgICAgICAvLyB0aWdodCB0aW1lb3V0IHdoaWNoIGNvdWxkIGxlYWQgdG8gaW5maW5pdGUgdGltZW91dHMgYW5kIHJldHJpZXMsIHdlXG4gICAgICAgICAgICAgICAgLy8gc2V0IGl0IHZlcnkgbGFyZ2UgKDUtMTAgbWludXRlcykgYW5kIHJlbHkgb24gdGhlIGJyb3dzZXIncyBidWlsdGluXG4gICAgICAgICAgICAgICAgLy8gdGltZW91dHMgdG8ga2ljayBpbiBpZiB0aGUgcmVxdWVzdCBpc24ndCB3b3JraW5nLlxuICAgICAgICAgICAgICAgIGZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNczogNmU1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9yY2VMb25nUG9sbGluZzogdGhpcy5mb3JjZUxvbmdQb2xsaW5nLFxuICAgICAgICAgICAgZGV0ZWN0QnVmZmVyaW5nUHJveHk6IHRoaXMuYXV0b0RldGVjdExvbmdQb2xsaW5nXG4gICAgICAgIH0sIGEgPSB0aGlzLmxvbmdQb2xsaW5nT3B0aW9ucy50aW1lb3V0U2Vjb25kcztcbiAgICAgICAgdm9pZCAwICE9PSBhICYmIChfLmxvbmdQb2xsaW5nVGltZW91dCA9IE1hdGgucm91bmQoMWUzICogYSkpLCB0aGlzLnVzZUZldGNoU3RyZWFtcyAmJiAoXy54bWxIdHRwRmFjdG9yeSA9IG5ldyB3ZWJjaGFubmVsQmxvYi5GZXRjaFhtbEh0dHBGYWN0b3J5KHt9KSksIFxuICAgICAgICB0aGlzLkZvKF8uaW5pdE1lc3NhZ2VIZWFkZXJzLCB0LCBuKSwgXG4gICAgICAgIC8vIFNlbmRpbmcgdGhlIGN1c3RvbSBoZWFkZXJzIHdlIGp1c3QgYWRkZWQgdG8gcmVxdWVzdC5pbml0TWVzc2FnZUhlYWRlcnNcbiAgICAgICAgLy8gKEF1dGhvcml6YXRpb24sIGV0Yy4pIHdpbGwgdHJpZ2dlciB0aGUgYnJvd3NlciB0byBtYWtlIGEgQ09SUyBwcmVmbGlnaHRcbiAgICAgICAgLy8gcmVxdWVzdCBiZWNhdXNlIHRoZSBYSFIgd2lsbCBubyBsb25nZXIgbWVldCB0aGUgY3JpdGVyaWEgZm9yIGEgXCJzaW1wbGVcIlxuICAgICAgICAvLyBDT1JTIHJlcXVlc3Q6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQ09SUyNTaW1wbGVfcmVxdWVzdHNcbiAgICAgICAgLy8gVGhlcmVmb3JlIHRvIGF2b2lkIHRoZSBDT1JTIHByZWZsaWdodCByZXF1ZXN0IChhbiBleHRyYSBuZXR3b3JrXG4gICAgICAgIC8vIHJvdW5kdHJpcCksIHdlIHVzZSB0aGUgZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzIG9wdGlvbiB0byBzcGVjaWZ5IHRoYXRcbiAgICAgICAgLy8gdGhlIGhlYWRlcnMgc2hvdWxkIGluc3RlYWQgYmUgZW5jb2RlZCBpbiB0aGUgcmVxdWVzdCdzIFBPU1QgcGF5bG9hZCxcbiAgICAgICAgLy8gd2hpY2ggaXMgcmVjb2duaXplZCBieSB0aGUgd2ViY2hhbm5lbCBiYWNrZW5kLlxuICAgICAgICBfLmVuY29kZUluaXRNZXNzYWdlSGVhZGVycyA9ICEwO1xuICAgICAgICBjb25zdCB1ID0gaS5qb2luKFwiXCIpO1xuICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoZmUsIGBDcmVhdGluZyBSUEMgJyR7ZX0nIHN0cmVhbSAke3J9OiAke3V9YCwgXyk7XG4gICAgICAgIGNvbnN0IGMgPSBzLmNyZWF0ZVdlYkNoYW5uZWwodSwgXyk7XG4gICAgICAgIC8vIFdlYkNoYW5uZWwgc3VwcG9ydHMgc2VuZGluZyB0aGUgZmlyc3QgbWVzc2FnZSB3aXRoIHRoZSBoYW5kc2hha2UgLSBzYXZpbmdcbiAgICAgICAgLy8gYSBuZXR3b3JrIHJvdW5kIHRyaXAuIEhvd2V2ZXIsIGl0IHdpbGwgaGF2ZSB0byBjYWxsIHNlbmQgaW4gdGhlIHNhbWVcbiAgICAgICAgLy8gSlMgZXZlbnQgbG9vcCBhcyBvcGVuLiBJbiBvcmRlciB0byBlbmZvcmNlIHRoaXMsIHdlIGRlbGF5IGFjdHVhbGx5XG4gICAgICAgIC8vIG9wZW5pbmcgdGhlIFdlYkNoYW5uZWwgdW50aWwgc2VuZCBpcyBjYWxsZWQuIFdoZXRoZXIgd2UgaGF2ZSBjYWxsZWRcbiAgICAgICAgLy8gb3BlbiBpcyB0cmFja2VkIHdpdGggdGhpcyB2YXJpYWJsZS5cbiAgICAgICAgICAgICAgICBsZXQgbCA9ICExLCBoID0gITE7XG4gICAgICAgIC8vIEEgZmxhZyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgc3RyZWFtIHdhcyBjbG9zZWQgKGJ5IHVzIG9yIHRocm91Z2ggYW5cbiAgICAgICAgLy8gZXJyb3IvY2xvc2UgZXZlbnQpIHRvIGF2b2lkIGRlbGl2ZXJpbmcgbXVsdGlwbGUgY2xvc2UgZXZlbnRzIG9yIHNlbmRpbmdcbiAgICAgICAgLy8gb24gYSBjbG9zZWQgc3RyZWFtXG4gICAgICAgICAgICAgICAgY29uc3QgUCA9IG5ldyBfX1BSSVZBVEVfU3RyZWFtQnJpZGdlKHtcbiAgICAgICAgICAgIGxvOiB0ID0+IHtcbiAgICAgICAgICAgICAgICBoID8gX19QUklWQVRFX2xvZ0RlYnVnKGZlLCBgTm90IHNlbmRpbmcgYmVjYXVzZSBSUEMgJyR7ZX0nIHN0cmVhbSAke3J9IGlzIGNsb3NlZDpgLCB0KSA6IChsIHx8IChfX1BSSVZBVEVfbG9nRGVidWcoZmUsIGBPcGVuaW5nIFJQQyAnJHtlfScgc3RyZWFtICR7cn0gdHJhbnNwb3J0LmApLCBcbiAgICAgICAgICAgICAgICBjLm9wZW4oKSwgbCA9ICEwKSwgX19QUklWQVRFX2xvZ0RlYnVnKGZlLCBgUlBDICcke2V9JyBzdHJlYW0gJHtyfSBzZW5kaW5nOmAsIHQpLCBcbiAgICAgICAgICAgICAgICBjLnNlbmQodCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhvOiAoKSA9PiBjLmNsb3NlKClcbiAgICAgICAgfSksIF9fUFJJVkFURV91bmd1YXJkZWRFdmVudExpc3RlbiA9IChlLCB0LCBuKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IGNsb3N1cmUgdHlwaW5nIHNlZW1zIGJyb2tlbiBiZWNhdXNlIFdlYkNoYW5uZWwgZG9lc1xuICAgICAgICAgICAgLy8gbm90IGltcGxlbWVudCBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlXG4gICAgICAgICAgICBlLmxpc3Rlbih0LCAoZSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbihlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgIH0pLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIENsb3N1cmUgZXZlbnRzIGFyZSBndWFyZGVkIGFuZCBleGNlcHRpb25zIGFyZSBzd2FsbG93ZWQsIHNvIGNhdGNoIGFueVxuICAgICAgICAvLyBleGNlcHRpb24gYW5kIHJldGhyb3cgdXNpbmcgYSBzZXRUaW1lb3V0IHNvIHRoZXkgYmVjb21lIHZpc2libGUgYWdhaW4uXG4gICAgICAgIC8vIE5vdGUgdGhhdCBldmVudHVhbGx5IHRoaXMgZnVuY3Rpb24gY291bGQgZ28gYXdheSBpZiB3ZSBhcmUgY29uZmlkZW50XG4gICAgICAgIC8vIGVub3VnaCB0aGUgY29kZSBpcyBleGNlcHRpb24gZnJlZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gX19QUklWQVRFX3VuZ3VhcmRlZEV2ZW50TGlzdGVuKGMsIHdlYmNoYW5uZWxCbG9iLldlYkNoYW5uZWwuRXZlbnRUeXBlLk9QRU4sICgoKSA9PiB7XG4gICAgICAgICAgICBoIHx8IChfX1BSSVZBVEVfbG9nRGVidWcoZmUsIGBSUEMgJyR7ZX0nIHN0cmVhbSAke3J9IHRyYW5zcG9ydCBvcGVuZWQuYCksIFAubW8oKSk7XG4gICAgICAgIH0pKSwgX19QUklWQVRFX3VuZ3VhcmRlZEV2ZW50TGlzdGVuKGMsIHdlYmNoYW5uZWxCbG9iLldlYkNoYW5uZWwuRXZlbnRUeXBlLkNMT1NFLCAoKCkgPT4ge1xuICAgICAgICAgICAgaCB8fCAoaCA9ICEwLCBfX1BSSVZBVEVfbG9nRGVidWcoZmUsIGBSUEMgJyR7ZX0nIHN0cmVhbSAke3J9IHRyYW5zcG9ydCBjbG9zZWRgKSwgXG4gICAgICAgICAgICBQLnBvKCkpO1xuICAgICAgICB9KSksIF9fUFJJVkFURV91bmd1YXJkZWRFdmVudExpc3RlbihjLCB3ZWJjaGFubmVsQmxvYi5XZWJDaGFubmVsLkV2ZW50VHlwZS5FUlJPUiwgKHQgPT4ge1xuICAgICAgICAgICAgaCB8fCAoaCA9ICEwLCBfX1BSSVZBVEVfbG9nV2FybihmZSwgYFJQQyAnJHtlfScgc3RyZWFtICR7cn0gdHJhbnNwb3J0IGVycm9yZWQ6YCwgdCksIFxuICAgICAgICAgICAgUC5wbyhuZXcgRmlyZXN0b3JlRXJyb3IoQy5VTkFWQUlMQUJMRSwgXCJUaGUgb3BlcmF0aW9uIGNvdWxkIG5vdCBiZSBjb21wbGV0ZWRcIikpKTtcbiAgICAgICAgfSkpLCBfX1BSSVZBVEVfdW5ndWFyZGVkRXZlbnRMaXN0ZW4oYywgd2ViY2hhbm5lbEJsb2IuV2ViQ2hhbm5lbC5FdmVudFR5cGUuTUVTU0FHRSwgKHQgPT4ge1xuICAgICAgICAgICAgdmFyIG47XG4gICAgICAgICAgICBpZiAoIWgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5kYXRhWzBdO1xuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KCEhaSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhiLzM1MTQzODkxKTogVGhlcmUgaXMgYSBidWcgaW4gT25lIFBsYXRmb3JtIHRoYXQgY2F1c2VkIGVycm9yc1xuICAgICAgICAgICAgICAgIC8vIChhbmQgb25seSBlcnJvcnMpIHRvIGJlIHdyYXBwZWQgaW4gYW4gZXh0cmEgYXJyYXkuIFRvIGJlIGZvcndhcmRcbiAgICAgICAgICAgICAgICAvLyBjb21wYXRpYmxlIHdpdGggdGhlIGJ1ZyB3ZSBuZWVkIHRvIGNoZWNrIGVpdGhlciBjb25kaXRpb24uIFRoZSBsYXR0ZXJcbiAgICAgICAgICAgICAgICAvLyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBmaXggaGFzIGJlZW4gcm9sbGVkIG91dC5cbiAgICAgICAgICAgICAgICAvLyBVc2UgYW55IGJlY2F1c2UgbXNnRGF0YS5lcnJvciBpcyBub3QgdHlwZWQuXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGksIG8gPSBzLmVycm9yIHx8IChudWxsID09PSAobiA9IHNbMF0pIHx8IHZvaWQgMCA9PT0gbiA/IHZvaWQgMCA6IG4uZXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmIChvKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhmZSwgYFJQQyAnJHtlfScgc3RyZWFtICR7cn0gcmVjZWl2ZWQgZXJyb3I6YCwgbyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yLnN0YXR1cyB3aWxsIGJlIGEgc3RyaW5nIGxpa2UgJ09LJyBvciAnTk9UX0ZPVU5EJy5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG8uc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IFxuICAgICAgICAgICAgICAgICAgICAvKipcbiAqIE1hcHMgYW4gZXJyb3IgQ29kZSBmcm9tIGEgR1JQQyBzdGF0dXMgaWRlbnRpZmllciBsaWtlICdOT1RfRk9VTkQnLlxuICpcbiAqIEByZXR1cm5zIFRoZSBDb2RlIGVxdWl2YWxlbnQgdG8gdGhlIGdpdmVuIHN0YXR1cyBzdHJpbmcgb3IgdW5kZWZpbmVkIGlmXG4gKiAgICAgdGhlcmUgaXMgbm8gbWF0Y2guXG4gKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX19QUklWQVRFX21hcENvZGVGcm9tUnBjU3RhdHVzKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvb2t1cCBieSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gY2VbZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0KSByZXR1cm4gX19QUklWQVRFX21hcENvZGVGcm9tUnBjQ29kZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSh0KSwgaSA9IG8ubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBuICYmIChuID0gQy5JTlRFUk5BTCwgaSA9IFwiVW5rbm93biBlcnJvciBzdGF0dXM6IFwiICsgdCArIFwiIHdpdGggbWVzc2FnZSBcIiArIG8ubWVzc2FnZSksIFxuICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIGNsb3NlZCBzbyBubyBmdXJ0aGVyIGV2ZW50cyBhcmUgcHJvcGFnYXRlZFxuICAgICAgICAgICAgICAgICAgICBoID0gITAsIFAucG8obmV3IEZpcmVzdG9yZUVycm9yKG4sIGkpKSwgYy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBfX1BSSVZBVEVfbG9nRGVidWcoZmUsIGBSUEMgJyR7ZX0nIHN0cmVhbSAke3J9IHJlY2VpdmVkOmAsIGkpLCBQLnlvKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSksIF9fUFJJVkFURV91bmd1YXJkZWRFdmVudExpc3RlbihvLCB3ZWJjaGFubmVsQmxvYi5FdmVudC5TVEFUX0VWRU5ULCAodCA9PiB7XG4gICAgICAgICAgICB0LnN0YXQgPT09IHdlYmNoYW5uZWxCbG9iLlN0YXQuUFJPWFkgPyBfX1BSSVZBVEVfbG9nRGVidWcoZmUsIGBSUEMgJyR7ZX0nIHN0cmVhbSAke3J9IGRldGVjdGVkIGJ1ZmZlcmluZyBwcm94eWApIDogdC5zdGF0ID09PSB3ZWJjaGFubmVsQmxvYi5TdGF0Lk5PUFJPWFkgJiYgX19QUklWQVRFX2xvZ0RlYnVnKGZlLCBgUlBDICcke2V9JyBzdHJlYW0gJHtyfSBkZXRlY3RlZCBubyBidWZmZXJpbmcgcHJveHlgKTtcbiAgICAgICAgfSkpLCBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBUZWNobmljYWxseSB3ZSBjb3VsZC9zaG91bGQgd2FpdCBmb3IgdGhlIFdlYkNoYW5uZWwgb3BlbmVkIGV2ZW50LFxuICAgICAgICAgICAgLy8gYnV0IGJlY2F1c2Ugd2Ugd2FudCB0byBzZW5kIHRoZSBmaXJzdCBtZXNzYWdlIHdpdGggdGhlIFdlYkNoYW5uZWxcbiAgICAgICAgICAgIC8vIGhhbmRzaGFrZSB3ZSBwcmV0ZW5kIHRoZSBjaGFubmVsIG9wZW5lZCBoZXJlIChhc3luY2hyb25vdXNseSksIGFuZFxuICAgICAgICAgICAgLy8gdGhlbiBkZWxheSB0aGUgYWN0dWFsIG9wZW4gdW50aWwgdGhlIGZpcnN0IG1lc3NhZ2UgaXMgc2VudC5cbiAgICAgICAgICAgIFAuZm8oKTtcbiAgICAgICAgfSksIDApLCBQO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBJbml0aWFsaXplcyB0aGUgV2ViQ2hhbm5lbENvbm5lY3Rpb24gZm9yIHRoZSBicm93c2VyLiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBUaGUgUGxhdGZvcm0ncyAnd2luZG93JyBpbXBsZW1lbnRhdGlvbiBvciBudWxsIGlmIG5vdCBhdmFpbGFibGUuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfZ2V0V2luZG93KCkge1xuICAgIC8vIGB3aW5kb3dgIGlzIG5vdCBhbHdheXMgYXZhaWxhYmxlLCBlLmcuIGluIFJlYWN0TmF0aXZlIGFuZCBXZWJXb3JrZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogbnVsbDtcbn1cblxuLyoqIFRoZSBQbGF0Zm9ybSdzICdkb2N1bWVudCcgaW1wbGVtZW50YXRpb24gb3IgbnVsbCBpZiBub3QgYXZhaWxhYmxlLiAqLyBmdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgICAvLyBgZG9jdW1lbnRgIGlzIG5vdCBhbHdheXMgYXZhaWxhYmxlLCBlLmcuIGluIFJlYWN0TmF0aXZlIGFuZCBXZWJXb3JrZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZG9jdW1lbnQgPyBkb2N1bWVudCA6IG51bGw7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9uZXdTZXJpYWxpemVyKGUpIHtcbiAgICByZXR1cm4gbmV3IEpzb25Qcm90b1NlcmlhbGl6ZXIoZSwgLyogdXNlUHJvdG8zSnNvbj0gKi8gITApO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGhlbHBlciBmb3IgcnVubmluZyBkZWxheWVkIHRhc2tzIGZvbGxvd2luZyBhbiBleHBvbmVudGlhbCBiYWNrb2ZmIGN1cnZlXG4gKiBiZXR3ZWVuIGF0dGVtcHRzLlxuICpcbiAqIEVhY2ggZGVsYXkgaXMgbWFkZSB1cCBvZiBhIFwiYmFzZVwiIGRlbGF5IHdoaWNoIGZvbGxvd3MgdGhlIGV4cG9uZW50aWFsXG4gKiBiYWNrb2ZmIGN1cnZlLCBhbmQgYSArLy0gNTAlIFwiaml0dGVyXCIgdGhhdCBpcyBjYWxjdWxhdGVkIGFuZCBhZGRlZCB0byB0aGVcbiAqIGJhc2UgZGVsYXkuIFRoaXMgcHJldmVudHMgY2xpZW50cyBmcm9tIGFjY2lkZW50YWxseSBzeW5jaHJvbml6aW5nIHRoZWlyXG4gKiBkZWxheXMgY2F1c2luZyBzcGlrZXMgb2YgbG9hZCB0byB0aGUgYmFja2VuZC5cbiAqL1xuY2xhc3MgX19QUklWQVRFX0V4cG9uZW50aWFsQmFja29mZiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIEFzeW5jUXVldWUgdG8gcnVuIGJhY2tvZmYgb3BlcmF0aW9ucyBvbi5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgdG8gdXNlIHdoZW4gc2NoZWR1bGluZyBiYWNrb2ZmIG9wZXJhdGlvbnMgb24gdGhlIEFzeW5jUXVldWUuXG4gICAgICovXG4gICAgdCwgXG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgZGVsYXkgKHVzZWQgYXMgdGhlIGJhc2UgZGVsYXkgb24gdGhlIGZpcnN0IHJldHJ5IGF0dGVtcHQpLlxuICAgICAqIE5vdGUgdGhhdCBqaXR0ZXIgd2lsbCBzdGlsbCBiZSBhcHBsaWVkLCBzbyB0aGUgYWN0dWFsIGRlbGF5IGNvdWxkIGJlIGFzXG4gICAgICogbGl0dGxlIGFzIDAuNSppbml0aWFsRGVsYXlNcy5cbiAgICAgKi9cbiAgICBuID0gMWUzXG4gICAgLyoqXG4gICAgICogVGhlIG11bHRpcGxpZXIgdG8gdXNlIHRvIGRldGVybWluZSB0aGUgZXh0ZW5kZWQgYmFzZSBkZWxheSBhZnRlciBlYWNoXG4gICAgICogYXR0ZW1wdC5cbiAgICAgKi8gLCByID0gMS41XG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gYmFzZSBkZWxheSBhZnRlciB3aGljaCBubyBmdXJ0aGVyIGJhY2tvZmYgaXMgcGVyZm9ybWVkLlxuICAgICAqIE5vdGUgdGhhdCBqaXR0ZXIgd2lsbCBzdGlsbCBiZSBhcHBsaWVkLCBzbyB0aGUgYWN0dWFsIGRlbGF5IGNvdWxkIGJlIGFzXG4gICAgICogbXVjaCBhcyAxLjUqbWF4RGVsYXlNcy5cbiAgICAgKi8gLCBpID0gNmU0KSB7XG4gICAgICAgIHRoaXMub2kgPSBlLCB0aGlzLnRpbWVySWQgPSB0LCB0aGlzLk5vID0gbiwgdGhpcy5MbyA9IHIsIHRoaXMuQm8gPSBpLCB0aGlzLmtvID0gMCwgXG4gICAgICAgIHRoaXMucW8gPSBudWxsLCBcbiAgICAgICAgLyoqIFRoZSBsYXN0IGJhY2tvZmYgYXR0ZW1wdCwgYXMgZXBvY2ggbWlsbGlzZWNvbmRzLiAqL1xuICAgICAgICB0aGlzLlFvID0gRGF0ZS5ub3coKSwgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGJhY2tvZmYgZGVsYXkuXG4gICAgICpcbiAgICAgKiBUaGUgdmVyeSBuZXh0IGJhY2tvZmZBbmRXYWl0KCkgd2lsbCBoYXZlIG5vIGRlbGF5LiBJZiBpdCBpcyBjYWxsZWQgYWdhaW5cbiAgICAgKiAoaS5lLiBkdWUgdG8gYW4gZXJyb3IpLCBpbml0aWFsRGVsYXlNcyAocGx1cyBqaXR0ZXIpIHdpbGwgYmUgdXNlZCwgYW5kXG4gICAgICogc3Vic2VxdWVudCBvbmVzIHdpbGwgaW5jcmVhc2UgYWNjb3JkaW5nIHRvIHRoZSBiYWNrb2ZmRmFjdG9yLlxuICAgICAqLyAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5rbyA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgYmFja29mZiBkZWxheSB0byB0aGUgbWF4aW11bSBkZWxheSAoZS5nLiBmb3IgdXNlIGFmdGVyIGFcbiAgICAgKiBSRVNPVVJDRV9FWEhBVVNURUQgZXJyb3IpLlxuICAgICAqLyAgICBLbygpIHtcbiAgICAgICAgdGhpcy5rbyA9IHRoaXMuQm87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgY3VycmVudERlbGF5TXMsIGFuZCBpbmNyZWFzZXMgdGhlXG4gICAgICogZGVsYXkgZm9yIGFueSBzdWJzZXF1ZW50IGF0dGVtcHRzLiBJZiB0aGVyZSB3YXMgYSBwZW5kaW5nIGJhY2tvZmYgb3BlcmF0aW9uXG4gICAgICogYWxyZWFkeSwgaXQgd2lsbCBiZSBjYW5jZWxlZC5cbiAgICAgKi8gICAgJG8oZSkge1xuICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgYmFja29mZiBvcGVyYXRpb24uXG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIC8vIEZpcnN0IHNjaGVkdWxlIHVzaW5nIHRoZSBjdXJyZW50IGJhc2UgKHdoaWNoIG1heSBiZSAwIGFuZCBzaG91bGQgYmVcbiAgICAgICAgLy8gaG9ub3JlZCBhcyBzdWNoKS5cbiAgICAgICAgY29uc3QgdCA9IE1hdGguZmxvb3IodGhpcy5rbyArIHRoaXMuVW8oKSksIG4gPSBNYXRoLm1heCgwLCBEYXRlLm5vdygpIC0gdGhpcy5RbyksIHIgPSBNYXRoLm1heCgwLCB0IC0gbik7XG4gICAgICAgIC8vIEd1YXJkIGFnYWluc3QgbGFzdEF0dGVtcHRUaW1lIGJlaW5nIGluIHRoZSBmdXR1cmUgZHVlIHRvIGEgY2xvY2sgY2hhbmdlLlxuICAgICAgICAgICAgICAgIHIgPiAwICYmIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkV4cG9uZW50aWFsQmFja29mZlwiLCBgQmFja2luZyBvZmYgZm9yICR7cn0gbXMgKGJhc2UgZGVsYXk6ICR7dGhpcy5rb30gbXMsIGRlbGF5IHdpdGggaml0dGVyOiAke3R9IG1zLCBsYXN0IGF0dGVtcHQ6ICR7bn0gbXMgYWdvKWApLCBcbiAgICAgICAgdGhpcy5xbyA9IHRoaXMub2kuZW5xdWV1ZUFmdGVyRGVsYXkodGhpcy50aW1lcklkLCByLCAoKCkgPT4gKHRoaXMuUW8gPSBEYXRlLm5vdygpLCBcbiAgICAgICAgZSgpKSkpLCBcbiAgICAgICAgLy8gQXBwbHkgYmFja29mZiBmYWN0b3IgdG8gZGV0ZXJtaW5lIG5leHQgZGVsYXkgYW5kIGVuc3VyZSBpdCBpcyB3aXRoaW5cbiAgICAgICAgLy8gYm91bmRzLlxuICAgICAgICB0aGlzLmtvICo9IHRoaXMuTG8sIHRoaXMua28gPCB0aGlzLk5vICYmICh0aGlzLmtvID0gdGhpcy5ObyksIHRoaXMua28gPiB0aGlzLkJvICYmICh0aGlzLmtvID0gdGhpcy5Cbyk7XG4gICAgfVxuICAgIFdvKCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLnFvICYmICh0aGlzLnFvLnNraXBEZWxheSgpLCB0aGlzLnFvID0gbnVsbCk7XG4gICAgfVxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5xbyAmJiAodGhpcy5xby5jYW5jZWwoKSwgdGhpcy5xbyA9IG51bGwpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIHJhbmRvbSB2YWx1ZSBpbiB0aGUgcmFuZ2UgWy1jdXJyZW50QmFzZU1zLzIsIGN1cnJlbnRCYXNlTXMvMl0gKi8gICAgVW8oKSB7XG4gICAgICAgIHJldHVybiAoTWF0aC5yYW5kb20oKSAtIC41KSAqIHRoaXMua287XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIFBlcnNpc3RlbnRTdHJlYW0gaXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBzdHJlYW1pbmcgUlBDXG4gKiB0byB0aGUgRmlyZXN0b3JlIGJhY2tlbmQuIEl0J3MgYnVpbHQgb24gdG9wIG9mIHRoZSBjb25uZWN0aW9ucyBvd24gc3VwcG9ydFxuICogZm9yIHN0cmVhbWluZyBSUENzLCBhbmQgYWRkcyBzZXZlcmFsIGNyaXRpY2FsIGZlYXR1cmVzIGZvciBvdXIgY2xpZW50czpcbiAqXG4gKiAgIC0gRXhwb25lbnRpYWwgYmFja29mZiBvbiBmYWlsdXJlXG4gKiAgIC0gQXV0aGVudGljYXRpb24gdmlhIENyZWRlbnRpYWxzUHJvdmlkZXJcbiAqICAgLSBEaXNwYXRjaGluZyBhbGwgY2FsbGJhY2tzIGludG8gdGhlIHNoYXJlZCB3b3JrZXIgcXVldWVcbiAqICAgLSBDbG9zaW5nIGlkbGUgc3RyZWFtcyBhZnRlciA2MCBzZWNvbmRzIG9mIGluYWN0aXZpdHlcbiAqXG4gKiBTdWJjbGFzc2VzIG9mIFBlcnNpc3RlbnRTdHJlYW0gaW1wbGVtZW50IHNlcmlhbGl6YXRpb24gb2YgbW9kZWxzIHRvIGFuZFxuICogZnJvbSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJvdG9jb2wgYnVmZmVycyBmb3IgYSBzcGVjaWZpY1xuICogc3RyZWFtaW5nIFJQQy5cbiAqXG4gKiAjIyBTdGFydGluZyBhbmQgU3RvcHBpbmdcbiAqXG4gKiBTdHJlYW1pbmcgUlBDcyBhcmUgc3RhdGVmdWwgYW5kIG5lZWQgdG8gYmUgc3RhcnQoKWVkIGJlZm9yZSBtZXNzYWdlcyBjYW5cbiAqIGJlIHNlbnQgYW5kIHJlY2VpdmVkLiBUaGUgUGVyc2lzdGVudFN0cmVhbSB3aWxsIGNhbGwgdGhlIG9uT3BlbigpIGZ1bmN0aW9uXG4gKiBvZiB0aGUgbGlzdGVuZXIgb25jZSB0aGUgc3RyZWFtIGlzIHJlYWR5IHRvIGFjY2VwdCByZXF1ZXN0cy5cbiAqXG4gKiBTaG91bGQgYSBzdGFydCgpIGZhaWwsIFBlcnNpc3RlbnRTdHJlYW0gd2lsbCBjYWxsIHRoZSByZWdpc3RlcmVkIG9uQ2xvc2UoKVxuICogbGlzdGVuZXIgd2l0aCBhIEZpcmVzdG9yZUVycm9yIGluZGljYXRpbmcgd2hhdCB3ZW50IHdyb25nLlxuICpcbiAqIEEgUGVyc2lzdGVudFN0cmVhbSBjYW4gYmUgc3RhcnRlZCBhbmQgc3RvcHBlZCByZXBlYXRlZGx5LlxuICpcbiAqIEdlbmVyaWMgdHlwZXM6XG4gKiAgU2VuZFR5cGU6IFRoZSB0eXBlIG9mIHRoZSBvdXRnb2luZyBtZXNzYWdlIG9mIHRoZSB1bmRlcmx5aW5nXG4gKiAgICBjb25uZWN0aW9uIHN0cmVhbVxuICogIFJlY2VpdmVUeXBlOiBUaGUgdHlwZSBvZiB0aGUgaW5jb21pbmcgbWVzc2FnZSBvZiB0aGUgdW5kZXJseWluZ1xuICogICAgY29ubmVjdGlvbiBzdHJlYW1cbiAqICBMaXN0ZW5lclR5cGU6IFRoZSB0eXBlIG9mIHRoZSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgY2FsbGJhY2tzXG4gKi9cbmNsYXNzIF9fUFJJVkFURV9QZXJzaXN0ZW50U3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByLCBpLCBzLCBvLCBfKSB7XG4gICAgICAgIHRoaXMub2kgPSBlLCB0aGlzLkdvID0gbiwgdGhpcy56byA9IHIsIHRoaXMuY29ubmVjdGlvbiA9IGksIHRoaXMuYXV0aENyZWRlbnRpYWxzUHJvdmlkZXIgPSBzLCBcbiAgICAgICAgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzUHJvdmlkZXIgPSBvLCB0aGlzLmxpc3RlbmVyID0gXywgdGhpcy5zdGF0ZSA9IDAgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkluaXRpYWwgKi8gLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgY2xvc2UgY291bnQgdGhhdCdzIGluY3JlbWVudGVkIGV2ZXJ5IHRpbWUgdGhlIHN0cmVhbSBpcyBjbG9zZWQ7IHVzZWQgYnlcbiAgICAgICAgICogZ2V0Q2xvc2VHdWFyZGVkRGlzcGF0Y2hlcigpIHRvIGludmFsaWRhdGUgY2FsbGJhY2tzIHRoYXQgaGFwcGVuIGFmdGVyXG4gICAgICAgICAqIGNsb3NlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5qbyA9IDAsIHRoaXMuSG8gPSBudWxsLCB0aGlzLkpvID0gbnVsbCwgdGhpcy5zdHJlYW0gPSBudWxsLCB0aGlzLllvID0gbmV3IF9fUFJJVkFURV9FeHBvbmVudGlhbEJhY2tvZmYoZSwgdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBzdGFydCgpIGhhcyBiZWVuIGNhbGxlZCBhbmQgbm8gZXJyb3IgaGFzIG9jY3VycmVkLiBUcnVlXG4gICAgICogaW5kaWNhdGVzIHRoZSBzdHJlYW0gaXMgb3BlbiBvciBpbiB0aGUgcHJvY2VzcyBvZiBvcGVuaW5nICh3aGljaFxuICAgICAqIGVuY29tcGFzc2VzIHJlc3BlY3RpbmcgYmFja29mZiwgZ2V0dGluZyBhdXRoIHRva2VucywgYW5kIHN0YXJ0aW5nIHRoZVxuICAgICAqIGFjdHVhbCBSUEMpLiBVc2UgaXNPcGVuKCkgdG8gZGV0ZXJtaW5lIGlmIHRoZSBzdHJlYW0gaXMgb3BlbiBhbmQgcmVhZHkgZm9yXG4gICAgICogb3V0Ym91bmQgcmVxdWVzdHMuXG4gICAgICovICAgIFpvKCkge1xuICAgICAgICByZXR1cm4gMSAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuU3RhcnRpbmcgKi8gPT09IHRoaXMuc3RhdGUgfHwgNSAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuQmFja29mZiAqLyA9PT0gdGhpcy5zdGF0ZSB8fCB0aGlzLlhvKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdW5kZXJseWluZyBSUEMgaXMgb3BlbiAodGhlIG9uT3BlbigpIGxpc3RlbmVyIGhhcyBiZWVuXG4gICAgICogY2FsbGVkKSBhbmQgdGhlIHN0cmVhbSBpcyByZWFkeSBmb3Igb3V0Ym91bmQgcmVxdWVzdHMuXG4gICAgICovICAgIFhvKCkge1xuICAgICAgICByZXR1cm4gMiAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuT3BlbiAqLyA9PT0gdGhpcy5zdGF0ZSB8fCAzIC8qIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5IZWFsdGh5ICovID09PSB0aGlzLnN0YXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdGhlIFJQQy4gT25seSBhbGxvd2VkIGlmIGlzU3RhcnRlZCgpIHJldHVybnMgZmFsc2UuIFRoZSBzdHJlYW0gaXNcbiAgICAgKiBub3QgaW1tZWRpYXRlbHkgcmVhZHkgZm9yIHVzZTogb25PcGVuKCkgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIFJQQyBpc1xuICAgICAqIHJlYWR5IGZvciBvdXRib3VuZCByZXF1ZXN0cywgYXQgd2hpY2ggcG9pbnQgaXNPcGVuKCkgd2lsbCByZXR1cm4gdHJ1ZS5cbiAgICAgKlxuICAgICAqIFdoZW4gc3RhcnQgcmV0dXJucywgaXNTdGFydGVkKCkgd2lsbCByZXR1cm4gdHJ1ZS5cbiAgICAgKi8gICAgc3RhcnQoKSB7XG4gICAgICAgIDQgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkVycm9yICovICE9PSB0aGlzLnN0YXRlID8gdGhpcy5hdXRoKCkgOiB0aGlzLmVfKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBSUEMuIFRoaXMgY2FsbCBpcyBpZGVtcG90ZW50IGFuZCBhbGxvd2VkIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gICAgICogY3VycmVudCBpc1N0YXJ0ZWQoKSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFdoZW4gc3RvcCByZXR1cm5zLCBpc1N0YXJ0ZWQoKSBhbmQgaXNPcGVuKCkgd2lsbCBib3RoIHJldHVybiBmYWxzZS5cbiAgICAgKi8gICAgYXN5bmMgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5abygpICYmIGF3YWl0IHRoaXMuY2xvc2UoMCAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuSW5pdGlhbCAqLyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFmdGVyIGFuIGVycm9yIHRoZSBzdHJlYW0gd2lsbCB1c3VhbGx5IGJhY2sgb2ZmIG9uIHRoZSBuZXh0IGF0dGVtcHQgdG9cbiAgICAgKiBzdGFydCBpdC4gSWYgdGhlIGVycm9yIHdhcnJhbnRzIGFuIGltbWVkaWF0ZSByZXN0YXJ0IG9mIHRoZSBzdHJlYW0sIHRoZVxuICAgICAqIHNlbmRlciBjYW4gdXNlIHRoaXMgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcmVjZWl2ZXIgc2hvdWxkIG5vdCBiYWNrIG9mZi5cbiAgICAgKlxuICAgICAqIEVhY2ggZXJyb3Igd2lsbCBjYWxsIHRoZSBvbkNsb3NlKCkgbGlzdGVuZXIuIFRoYXQgZnVuY3Rpb24gY2FuIGRlY2lkZSB0b1xuICAgICAqIGluaGliaXQgYmFja29mZiBpZiByZXF1aXJlZC5cbiAgICAgKi8gICAgdF8oKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAwIC8qIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5Jbml0aWFsICovICwgdGhpcy5Zby5yZXNldCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJrcyB0aGlzIHN0cmVhbSBhcyBpZGxlLiBJZiBubyBmdXJ0aGVyIGFjdGlvbnMgYXJlIHBlcmZvcm1lZCBvbiB0aGVcbiAgICAgKiBzdHJlYW0gZm9yIG9uZSBtaW51dGUsIHRoZSBzdHJlYW0gd2lsbCBhdXRvbWF0aWNhbGx5IGNsb3NlIGl0c2VsZiBhbmRcbiAgICAgKiBub3RpZnkgdGhlIHN0cmVhbSdzIG9uQ2xvc2UoKSBoYW5kbGVyIHdpdGggU3RhdHVzLk9LLiBUaGUgc3RyZWFtIHdpbGwgdGhlblxuICAgICAqIGJlIGluIGEgIWlzU3RhcnRlZCgpIHN0YXRlLCByZXF1aXJpbmcgdGhlIGNhbGxlciB0byBzdGFydCB0aGUgc3RyZWFtIGFnYWluXG4gICAgICogYmVmb3JlIGZ1cnRoZXIgdXNlLlxuICAgICAqXG4gICAgICogT25seSBzdHJlYW1zIHRoYXQgYXJlIGluIHN0YXRlICdPcGVuJyBjYW4gYmUgbWFya2VkIGlkbGUsIGFzIGFsbCBvdGhlclxuICAgICAqIHN0YXRlcyBpbXBseSBwZW5kaW5nIG5ldHdvcmsgb3BlcmF0aW9ucy5cbiAgICAgKi8gICAgbl8oKSB7XG4gICAgICAgIC8vIFN0YXJ0cyB0aGUgaWRsZSB0aW1lIGlmIHdlIGFyZSBpbiBzdGF0ZSAnT3BlbicgYW5kIGFyZSBub3QgeWV0IGFscmVhZHlcbiAgICAgICAgLy8gcnVubmluZyBhIHRpbWVyIChpbiB3aGljaCBjYXNlIHRoZSBwcmV2aW91cyBpZGxlIHRpbWVvdXQgc3RpbGwgYXBwbGllcykuXG4gICAgICAgIHRoaXMuWG8oKSAmJiBudWxsID09PSB0aGlzLkhvICYmICh0aGlzLkhvID0gdGhpcy5vaS5lbnF1ZXVlQWZ0ZXJEZWxheSh0aGlzLkdvLCA2ZTQsICgoKSA9PiB0aGlzLnJfKCkpKSk7XG4gICAgfVxuICAgIC8qKiBTZW5kcyBhIG1lc3NhZ2UgdG8gdGhlIHVuZGVybHlpbmcgc3RyZWFtLiAqLyAgICBpXyhlKSB7XG4gICAgICAgIHRoaXMuc18oKSwgdGhpcy5zdHJlYW0uc2VuZChlKTtcbiAgICB9XG4gICAgLyoqIENhbGxlZCBieSB0aGUgaWRsZSB0aW1lciB3aGVuIHRoZSBzdHJlYW0gc2hvdWxkIGNsb3NlIGR1ZSB0byBpbmFjdGl2aXR5LiAqLyAgICBhc3luYyByXygpIHtcbiAgICAgICAgaWYgKHRoaXMuWG8oKSkgXG4gICAgICAgIC8vIFdoZW4gdGltaW5nIG91dCBhbiBpZGxlIHN0cmVhbSB0aGVyZSdzIG5vIHJlYXNvbiB0byBmb3JjZSB0aGUgc3RyZWFtIGludG8gYmFja29mZiB3aGVuXG4gICAgICAgIC8vIGl0IHJlc3RhcnRzIHNvIHNldCB0aGUgc3RyZWFtIHN0YXRlIHRvIEluaXRpYWwgaW5zdGVhZCBvZiBFcnJvci5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2UoMCAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuSW5pdGlhbCAqLyk7XG4gICAgfVxuICAgIC8qKiBNYXJrcyB0aGUgc3RyZWFtIGFzIGFjdGl2ZSBhZ2Fpbi4gKi8gICAgc18oKSB7XG4gICAgICAgIHRoaXMuSG8gJiYgKHRoaXMuSG8uY2FuY2VsKCksIHRoaXMuSG8gPSBudWxsKTtcbiAgICB9XG4gICAgLyoqIENhbmNlbHMgdGhlIGhlYWx0aCBjaGVjayBkZWxheWVkIG9wZXJhdGlvbi4gKi8gICAgb18oKSB7XG4gICAgICAgIHRoaXMuSm8gJiYgKHRoaXMuSm8uY2FuY2VsKCksIHRoaXMuSm8gPSBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBzdHJlYW0gYW5kIGNsZWFucyB1cCBhcyBuZWNlc3Nhcnk6XG4gICAgICpcbiAgICAgKiAqIGNsb3NlcyB0aGUgdW5kZXJseWluZyBHUlBDIHN0cmVhbTtcbiAgICAgKiAqIGNhbGxzIHRoZSBvbkNsb3NlIGhhbmRsZXIgd2l0aCB0aGUgZ2l2ZW4gJ2Vycm9yJztcbiAgICAgKiAqIHNldHMgaW50ZXJuYWwgc3RyZWFtIHN0YXRlIHRvICdmaW5hbFN0YXRlJztcbiAgICAgKiAqIGFkanVzdHMgdGhlIGJhY2tvZmYgdGltZXIgYmFzZWQgb24gdGhlIGVycm9yXG4gICAgICpcbiAgICAgKiBBIG5ldyBzdHJlYW0gY2FuIGJlIG9wZW5lZCBieSBjYWxsaW5nIHN0YXJ0KCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmluYWxTdGF0ZSAtIHRoZSBpbnRlbmRlZCBzdGF0ZSBvZiB0aGUgc3RyZWFtIGFmdGVyIGNsb3NpbmcuXG4gICAgICogQHBhcmFtIGVycm9yIC0gdGhlIGVycm9yIHRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgd2l0aC5cbiAgICAgKi8gICAgYXN5bmMgY2xvc2UoZSwgdCkge1xuICAgICAgICAvLyBDYW5jZWwgYW55IG91dHN0YW5kaW5nIHRpbWVycyAodGhleSdyZSBndWFyYW50ZWVkIG5vdCB0byBleGVjdXRlKS5cbiAgICAgICAgdGhpcy5zXygpLCB0aGlzLm9fKCksIHRoaXMuWW8uY2FuY2VsKCksIFxuICAgICAgICAvLyBJbnZhbGlkYXRlcyBhbnkgc3RyZWFtLXJlbGF0ZWQgY2FsbGJhY2tzIChlLmcuIGZyb20gYXV0aCBvciB0aGVcbiAgICAgICAgLy8gdW5kZXJseWluZyBzdHJlYW0pLCBndWFyYW50ZWVpbmcgdGhleSB3b24ndCBleGVjdXRlLlxuICAgICAgICB0aGlzLmpvKyssIDQgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkVycm9yICovICE9PSBlID8gXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYW4gaW50ZW50aW9uYWwgY2xvc2UgZW5zdXJlIHdlIGRvbid0IGRlbGF5IG91ciBuZXh0IGNvbm5lY3Rpb24gYXR0ZW1wdC5cbiAgICAgICAgdGhpcy5Zby5yZXNldCgpIDogdCAmJiB0LmNvZGUgPT09IEMuUkVTT1VSQ0VfRVhIQVVTVEVEID8gKFxuICAgICAgICAvLyBMb2cgdGhlIGVycm9yLiAoUHJvYmFibHkgZWl0aGVyICdxdW90YSBleGNlZWRlZCcgb3IgJ21heCBxdWV1ZSBsZW5ndGggcmVhY2hlZCcuKVxuICAgICAgICBfX1BSSVZBVEVfbG9nRXJyb3IodC50b1N0cmluZygpKSwgX19QUklWQVRFX2xvZ0Vycm9yKFwiVXNpbmcgbWF4aW11bSBiYWNrb2ZmIGRlbGF5IHRvIHByZXZlbnQgb3ZlcmxvYWRpbmcgdGhlIGJhY2tlbmQuXCIpLCBcbiAgICAgICAgdGhpcy5Zby5LbygpKSA6IHQgJiYgdC5jb2RlID09PSBDLlVOQVVUSEVOVElDQVRFRCAmJiAzIC8qIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5IZWFsdGh5ICovICE9PSB0aGlzLnN0YXRlICYmIChcbiAgICAgICAgLy8gXCJ1bmF1dGhlbnRpY2F0ZWRcIiBlcnJvciBtZWFucyB0aGUgdG9rZW4gd2FzIHJlamVjdGVkLiBUaGlzIHNob3VsZCByYXJlbHlcbiAgICAgICAgLy8gaGFwcGVuIHNpbmNlIGJvdGggQXV0aCBhbmQgQXBwQ2hlY2sgZW5zdXJlIGEgc3VmZmljaWVudCBUVEwgd2hlbiB3ZVxuICAgICAgICAvLyByZXF1ZXN0IGEgdG9rZW4uIElmIGEgdXNlciBtYW51YWxseSByZXNldHMgdGhlaXIgc3lzdGVtIGNsb2NrIHRoaXMgY2FuXG4gICAgICAgIC8vIGZhaWwsIGhvd2V2ZXIuIEluIHRoaXMgY2FzZSwgd2Ugc2hvdWxkIGdldCBhIENvZGUuVU5BVVRIRU5USUNBVEVEIGVycm9yXG4gICAgICAgIC8vIGJlZm9yZSB3ZSByZWNlaXZlZCB0aGUgZmlyc3QgbWVzc2FnZSBhbmQgd2UgbmVlZCB0byBpbnZhbGlkYXRlIHRoZSB0b2tlblxuICAgICAgICAvLyB0byBlbnN1cmUgdGhhdCB3ZSBmZXRjaCBhIG5ldyB0b2tlbi5cbiAgICAgICAgdGhpcy5hdXRoQ3JlZGVudGlhbHNQcm92aWRlci5pbnZhbGlkYXRlVG9rZW4oKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzUHJvdmlkZXIuaW52YWxpZGF0ZVRva2VuKCkpLCBcbiAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIHVuZGVybHlpbmcgc3RyZWFtIGJlY2F1c2Ugd2UgYXJlIG5vIGxvbmdlciBpbnRlcmVzdGVkIGluIGV2ZW50cy5cbiAgICAgICAgbnVsbCAhPT0gdGhpcy5zdHJlYW0gJiYgKHRoaXMuX18oKSwgdGhpcy5zdHJlYW0uY2xvc2UoKSwgdGhpcy5zdHJlYW0gPSBudWxsKSwgXG4gICAgICAgIC8vIFRoaXMgc3RhdGUgbXVzdCBiZSBhc3NpZ25lZCBiZWZvcmUgY2FsbGluZyBvbkNsb3NlKCkgdG8gYWxsb3cgdGhlIGNhbGxiYWNrIHRvXG4gICAgICAgIC8vIGluaGliaXQgYmFja29mZiBvciBvdGhlcndpc2UgbWFuaXB1bGF0ZSB0aGUgc3RhdGUgaW4gaXRzIG5vbi1zdGFydGVkIHN0YXRlLlxuICAgICAgICB0aGlzLnN0YXRlID0gZSwgXG4gICAgICAgIC8vIE5vdGlmeSB0aGUgbGlzdGVuZXIgdGhhdCB0aGUgc3RyZWFtIGNsb3NlZC5cbiAgICAgICAgYXdhaXQgdGhpcy5saXN0ZW5lci5Bbyh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuIGJlIG92ZXJyaWRkZW4gdG8gcGVyZm9ybSBhZGRpdGlvbmFsIGNsZWFudXAgYmVmb3JlIHRoZSBzdHJlYW0gaXMgY2xvc2VkLlxuICAgICAqIENhbGxpbmcgc3VwZXIudGVhckRvd24oKSBpcyBub3QgcmVxdWlyZWQuXG4gICAgICovICAgIF9fKCkge31cbiAgICBhdXRoKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gMSAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuU3RhcnRpbmcgKi87XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLmFfKHRoaXMuam8pLCB0ID0gdGhpcy5qbztcbiAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBKdXN0IHVzZSBkaXNwYXRjaElmTm90Q2xvc2VkLCBidXQgc2VlIFRPRE8gYmVsb3cuXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoWyB0aGlzLmF1dGhDcmVkZW50aWFsc1Byb3ZpZGVyLmdldFRva2VuKCksIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFsc1Byb3ZpZGVyLmdldFRva2VuKCkgXSkudGhlbigoKFtlLCBuXSkgPT4ge1xuICAgICAgICAgICAgLy8gU3RyZWFtIGNhbiBiZSBzdG9wcGVkIHdoaWxlIHdhaXRpbmcgZm9yIGF1dGhlbnRpY2F0aW9uLlxuICAgICAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBXZSByZWFsbHkgc2hvdWxkIGp1c3QgdXNlIGRpc3BhdGNoSWZOb3RDbG9zZWRcbiAgICAgICAgICAgIC8vIGFuZCBsZXQgdGhpcyBkaXNwYXRjaCBvbnRvIHRoZSBxdWV1ZSwgYnV0IHRoYXQgb3BlbmVkIGEgc3BlYyB0ZXN0IGNhblxuICAgICAgICAgICAgLy8gb2Ygd29ybXMgdGhhdCBJIGRvbid0IHdhbnQgdG8gZGVhbCB3aXRoIGluIHRoaXMgUFIuXG4gICAgICAgICAgICB0aGlzLmpvID09PSB0ICYmIFxuICAgICAgICAgICAgLy8gTm9ybWFsbHkgd2UnZCBoYXZlIHRvIHNjaGVkdWxlIHRoZSBjYWxsYmFjayBvbiB0aGUgQXN5bmNRdWV1ZS5cbiAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHRoZSBmb2xsb3dpbmcgY2FsbHMgYXJlIHNhZmUgdG8gYmUgY2FsbGVkIG91dHNpZGUgdGhlXG4gICAgICAgICAgICAvLyBBc3luY1F1ZXVlIHNpbmNlIHRoZXkgZG9uJ3QgY2hhaW4gYXN5bmNocm9ub3VzIGNhbGxzXG4gICAgICAgICAgICB0aGlzLnVfKGUsIG4pO1xuICAgICAgICB9KSwgKHQgPT4ge1xuICAgICAgICAgICAgZSgoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgRmlyZXN0b3JlRXJyb3IoQy5VTktOT1dOLCBcIkZldGNoaW5nIGF1dGggdG9rZW4gZmFpbGVkOiBcIiArIHQubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY18oZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdV8oZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5hXyh0aGlzLmpvKTtcbiAgICAgICAgdGhpcy5zdHJlYW0gPSB0aGlzLmxfKGUsIHQpLCB0aGlzLnN0cmVhbS5QbygoKCkgPT4ge1xuICAgICAgICAgICAgbigoKCkgPT4gdGhpcy5saXN0ZW5lci5QbygpKSk7XG4gICAgICAgIH0pKSwgdGhpcy5zdHJlYW0uVG8oKCgpID0+IHtcbiAgICAgICAgICAgIG4oKCgpID0+ICh0aGlzLnN0YXRlID0gMiAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuT3BlbiAqLyAsIHRoaXMuSm8gPSB0aGlzLm9pLmVucXVldWVBZnRlckRlbGF5KHRoaXMuem8sIDFlNCwgKCgpID0+ICh0aGlzLlhvKCkgJiYgKHRoaXMuc3RhdGUgPSAzIC8qIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5IZWFsdGh5ICovKSwgXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKSkpKSwgdGhpcy5saXN0ZW5lci5UbygpKSkpO1xuICAgICAgICB9KSksIHRoaXMuc3RyZWFtLkFvKChlID0+IHtcbiAgICAgICAgICAgIG4oKCgpID0+IHRoaXMuY18oZSkpKTtcbiAgICAgICAgfSkpLCB0aGlzLnN0cmVhbS5vbk1lc3NhZ2UoKGUgPT4ge1xuICAgICAgICAgICAgbigoKCkgPT4gdGhpcy5vbk1lc3NhZ2UoZSkpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlXygpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDUgLyogUGVyc2lzdGVudFN0cmVhbVN0YXRlLkJhY2tvZmYgKi8gLCB0aGlzLllvLiRvKChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gMCAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuSW5pdGlhbCAqLyAsIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvLyBWaXNpYmxlIGZvciB0ZXN0c1xuICAgIGNfKGUpIHtcbiAgICAgICAgLy8gSW4gdGhlb3J5IHRoZSBzdHJlYW0gY291bGQgY2xvc2UgY2xlYW5seSwgaG93ZXZlciwgaW4gb3VyIGN1cnJlbnQgbW9kZWxcbiAgICAgICAgLy8gd2UgbmV2ZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlY2F1c2UgaWYgd2Ugc3RvcCBhIHN0cmVhbSBvdXJzZWx2ZXMsXG4gICAgICAgIC8vIHRoaXMgY2FsbGJhY2sgd2lsbCBuZXZlciBiZSBjYWxsZWQuIFRvIHByZXZlbnQgY2FzZXMgd2hlcmUgd2UgcmV0cnlcbiAgICAgICAgLy8gd2l0aG91dCBhIGJhY2tvZmYgYWNjaWRlbnRhbGx5LCB3ZSBzZXQgdGhlIHN0cmVhbSB0byBlcnJvciBpbiBhbGwgY2FzZXMuXG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbG9nRGVidWcoXCJQZXJzaXN0ZW50U3RyZWFtXCIsIGBjbG9zZSB3aXRoIGVycm9yOiAke2V9YCksIHRoaXMuc3RyZWFtID0gbnVsbCwgXG4gICAgICAgIHRoaXMuY2xvc2UoNCAvKiBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuRXJyb3IgKi8gLCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIFwiZGlzcGF0Y2hlclwiIGZ1bmN0aW9uIHRoYXQgZGlzcGF0Y2hlcyBvcGVyYXRpb25zIG9udG8gdGhlXG4gICAgICogQXN5bmNRdWV1ZSBidXQgb25seSBydW5zIHRoZW0gaWYgY2xvc2VDb3VudCByZW1haW5zIHVuY2hhbmdlZC4gVGhpcyBhbGxvd3NcbiAgICAgKiB1cyB0byB0dXJuIGF1dGggLyBzdHJlYW0gY2FsbGJhY2tzIGludG8gbm8tb3BzIGlmIHRoZSBzdHJlYW0gaXMgY2xvc2VkIC9cbiAgICAgKiByZS1vcGVuZWQsIGV0Yy5cbiAgICAgKi8gICAgYV8oZSkge1xuICAgICAgICByZXR1cm4gdCA9PiB7XG4gICAgICAgICAgICB0aGlzLm9pLmVucXVldWVBbmRGb3JnZXQoKCgpID0+IHRoaXMuam8gPT09IGUgPyB0KCkgOiAoX19QUklWQVRFX2xvZ0RlYnVnKFwiUGVyc2lzdGVudFN0cmVhbVwiLCBcInN0cmVhbSBjYWxsYmFjayBza2lwcGVkIGJ5IGdldENsb3NlR3VhcmRlZERpc3BhdGNoZXIuXCIpLCBcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpKSkpO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIFBlcnNpc3RlbnRTdHJlYW0gdGhhdCBpbXBsZW1lbnRzIHRoZSBMaXN0ZW4gUlBDLlxuICpcbiAqIE9uY2UgdGhlIExpc3RlbiBzdHJlYW0gaGFzIGNhbGxlZCB0aGUgb25PcGVuKCkgbGlzdGVuZXIsIGFueSBudW1iZXIgb2ZcbiAqIGxpc3RlbigpIGFuZCB1bmxpc3RlbigpIGNhbGxzIGNhbiBiZSBtYWRlIHRvIGNvbnRyb2wgd2hhdCBjaGFuZ2VzIHdpbGwgYmVcbiAqIHNlbnQgZnJvbSB0aGUgc2VydmVyIGZvciBMaXN0ZW5SZXNwb25zZXMuXG4gKi8gY2xhc3MgX19QUklWQVRFX1BlcnNpc3RlbnRMaXN0ZW5TdHJlYW0gZXh0ZW5kcyBfX1BSSVZBVEVfUGVyc2lzdGVudFN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbiwgciwgaSwgcykge1xuICAgICAgICBzdXBlcihlLCBcImxpc3Rlbl9zdHJlYW1fY29ubmVjdGlvbl9iYWNrb2ZmXCIgLyogVGltZXJJZC5MaXN0ZW5TdHJlYW1Db25uZWN0aW9uQmFja29mZiAqLyAsIFwibGlzdGVuX3N0cmVhbV9pZGxlXCIgLyogVGltZXJJZC5MaXN0ZW5TdHJlYW1JZGxlICovICwgXCJoZWFsdGhfY2hlY2tfdGltZW91dFwiIC8qIFRpbWVySWQuSGVhbHRoQ2hlY2tUaW1lb3V0ICovICwgdCwgbiwgciwgcyksIFxuICAgICAgICB0aGlzLnNlcmlhbGl6ZXIgPSBpO1xuICAgIH1cbiAgICBsXyhlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uT28oXCJMaXN0ZW5cIiwgZSwgdCk7XG4gICAgfVxuICAgIG9uTWVzc2FnZShlKSB7XG4gICAgICAgIC8vIEEgc3VjY2Vzc2Z1bCByZXNwb25zZSBtZWFucyB0aGUgc3RyZWFtIGlzIGhlYWx0aHlcbiAgICAgICAgdGhpcy5Zby5yZXNldCgpO1xuICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX2Zyb21XYXRjaENoYW5nZSh0aGlzLnNlcmlhbGl6ZXIsIGUpLCBuID0gZnVuY3Rpb24gX19QUklWQVRFX3ZlcnNpb25Gcm9tTGlzdGVuUmVzcG9uc2UoZSkge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSBvbmx5IHJlYWNoZWQgYSBjb25zaXN0ZW50IHNuYXBzaG90IGZvciB0aGUgZW50aXJlIHN0cmVhbSBpZiB0aGVyZVxuICAgICAgICAgICAgLy8gaXMgYSByZWFkX3RpbWUgc2V0IGFuZCBpdCBhcHBsaWVzIHRvIGFsbCB0YXJnZXRzIChpLmUuIHRoZSBsaXN0IG9mXG4gICAgICAgICAgICAvLyB0YXJnZXRzIGlzIGVtcHR5KS4gVGhlIGJhY2tlbmQgaXMgZ3VhcmFudGVlZCB0byBzZW5kIHN1Y2ggcmVzcG9uc2VzLlxuICAgICAgICAgICAgaWYgKCEoXCJ0YXJnZXRDaGFuZ2VcIiBpbiBlKSkgcmV0dXJuIFNuYXBzaG90VmVyc2lvbi5taW4oKTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLnRhcmdldENoYW5nZTtcbiAgICAgICAgICAgIHJldHVybiB0LnRhcmdldElkcyAmJiB0LnRhcmdldElkcy5sZW5ndGggPyBTbmFwc2hvdFZlcnNpb24ubWluKCkgOiB0LnJlYWRUaW1lID8gX19QUklWQVRFX2Zyb21WZXJzaW9uKHQucmVhZFRpbWUpIDogU25hcHNob3RWZXJzaW9uLm1pbigpO1xuICAgICAgICB9KGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5oXyh0LCBuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGludGVyZXN0IGluIHRoZSByZXN1bHRzIG9mIHRoZSBnaXZlbiB0YXJnZXQuIElmIHRoZSB0YXJnZXRcbiAgICAgKiBpbmNsdWRlcyBhIHJlc3VtZVRva2VuIGl0IHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJlcXVlc3QuIFJlc3VsdHMgdGhhdFxuICAgICAqIGFmZmVjdCB0aGUgdGFyZ2V0IHdpbGwgYmUgc3RyZWFtZWQgYmFjayBhcyBXYXRjaENoYW5nZSBtZXNzYWdlcyB0aGF0XG4gICAgICogcmVmZXJlbmNlIHRoZSB0YXJnZXRJZC5cbiAgICAgKi8gICAgUF8oZSkge1xuICAgICAgICBjb25zdCB0ID0ge307XG4gICAgICAgIHQuZGF0YWJhc2UgPSBfX1BSSVZBVEVfZ2V0RW5jb2RlZERhdGFiYXNlSWQodGhpcy5zZXJpYWxpemVyKSwgdC5hZGRUYXJnZXQgPSBmdW5jdGlvbiBfX1BSSVZBVEVfdG9UYXJnZXQoZSwgdCkge1xuICAgICAgICAgICAgbGV0IG47XG4gICAgICAgICAgICBjb25zdCByID0gdC50YXJnZXQ7XG4gICAgICAgICAgICBpZiAobiA9IF9fUFJJVkFURV90YXJnZXRJc0RvY3VtZW50VGFyZ2V0KHIpID8ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50czogX19QUklWQVRFX3RvRG9jdW1lbnRzVGFyZ2V0KGUsIHIpXG4gICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBfX1BSSVZBVEVfdG9RdWVyeVRhcmdldChlLCByKS5fdFxuICAgICAgICAgICAgfSwgbi50YXJnZXRJZCA9IHQudGFyZ2V0SWQsIHQucmVzdW1lVG9rZW4uYXBwcm94aW1hdGVCeXRlU2l6ZSgpID4gMCkge1xuICAgICAgICAgICAgICAgIG4ucmVzdW1lVG9rZW4gPSBfX1BSSVZBVEVfdG9CeXRlcyhlLCB0LnJlc3VtZVRva2VuKTtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gX19QUklWQVRFX3RvSW50MzJQcm90byhlLCB0LmV4cGVjdGVkQ291bnQpO1xuICAgICAgICAgICAgICAgIG51bGwgIT09IHIgJiYgKG4uZXhwZWN0ZWRDb3VudCA9IHIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0LnNuYXBzaG90VmVyc2lvbi5jb21wYXJlVG8oU25hcHNob3RWZXJzaW9uLm1pbigpKSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPKHd1YW5keSk6IENvbnNpZGVyIHJlbW92aW5nIGFib3ZlIGNoZWNrIGJlY2F1c2UgaXQgaXMgbW9zdCBsaWtlbHkgdHJ1ZS5cbiAgICAgICAgICAgICAgICAvLyBSaWdodCBub3csIG1hbnkgdGVzdHMgZGVwZW5kIG9uIHRoaXMgYmVoYXZpb3VyIHRob3VnaCAobGVhdmluZyBtaW4oKSBvdXRcbiAgICAgICAgICAgICAgICAvLyBvZiBzZXJpYWxpemF0aW9uKS5cbiAgICAgICAgICAgICAgICBuLnJlYWRUaW1lID0gdG9UaW1lc3RhbXAoZSwgdC5zbmFwc2hvdFZlcnNpb24udG9UaW1lc3RhbXAoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IF9fUFJJVkFURV90b0ludDMyUHJvdG8oZSwgdC5leHBlY3RlZENvdW50KTtcbiAgICAgICAgICAgICAgICBudWxsICE9PSByICYmIChuLmV4cGVjdGVkQ291bnQgPSByKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9KHRoaXMuc2VyaWFsaXplciwgZSk7XG4gICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfdG9MaXN0ZW5SZXF1ZXN0TGFiZWxzKHRoaXMuc2VyaWFsaXplciwgZSk7XG4gICAgICAgIG4gJiYgKHQubGFiZWxzID0gbiksIHRoaXMuaV8odCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXJzIGludGVyZXN0IGluIHRoZSByZXN1bHRzIG9mIHRoZSB0YXJnZXQgYXNzb2NpYXRlZCB3aXRoIHRoZVxuICAgICAqIGdpdmVuIHRhcmdldElkLlxuICAgICAqLyAgICBJXyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB7fTtcbiAgICAgICAgdC5kYXRhYmFzZSA9IF9fUFJJVkFURV9nZXRFbmNvZGVkRGF0YWJhc2VJZCh0aGlzLnNlcmlhbGl6ZXIpLCB0LnJlbW92ZVRhcmdldCA9IGUsIFxuICAgICAgICB0aGlzLmlfKHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIFN0cmVhbSB0aGF0IGltcGxlbWVudHMgdGhlIFdyaXRlIFJQQy5cbiAqXG4gKiBUaGUgV3JpdGUgUlBDIHJlcXVpcmVzIHRoZSBjYWxsZXIgdG8gbWFpbnRhaW4gc3BlY2lhbCBzdHJlYW1Ub2tlblxuICogc3RhdGUgaW4gYmV0d2VlbiBjYWxscywgdG8gaGVscCB0aGUgc2VydmVyIHVuZGVyc3RhbmQgd2hpY2ggcmVzcG9uc2VzIHRoZVxuICogY2xpZW50IGhhcyBwcm9jZXNzZWQgYnkgdGhlIHRpbWUgdGhlIG5leHQgcmVxdWVzdCBpcyBtYWRlLiBFdmVyeSByZXNwb25zZVxuICogd2lsbCBjb250YWluIGEgc3RyZWFtVG9rZW47IHRoaXMgdmFsdWUgbXVzdCBiZSBwYXNzZWQgdG8gdGhlIG5leHRcbiAqIHJlcXVlc3QuXG4gKlxuICogQWZ0ZXIgY2FsbGluZyBzdGFydCgpIG9uIHRoaXMgc3RyZWFtLCB0aGUgbmV4dCByZXF1ZXN0IG11c3QgYmUgYSBoYW5kc2hha2UsXG4gKiBjb250YWluaW5nIHdoYXRldmVyIHN0cmVhbVRva2VuIGlzIG9uIGhhbmQuIE9uY2UgYSByZXNwb25zZSB0byB0aGlzXG4gKiByZXF1ZXN0IGlzIHJlY2VpdmVkLCBhbGwgcGVuZGluZyBtdXRhdGlvbnMgbWF5IGJlIHN1Ym1pdHRlZC4gV2hlblxuICogc3VibWl0dGluZyBtdWx0aXBsZSBiYXRjaGVzIG9mIG11dGF0aW9ucyBhdCB0aGUgc2FtZSB0aW1lLCBpdCdzXG4gKiBva2F5IHRvIHVzZSB0aGUgc2FtZSBzdHJlYW1Ub2tlbiBmb3IgdGhlIGNhbGxzIHRvIHdyaXRlTXV0YXRpb25zLlxuICpcbiAqIFRPRE8oYi8zMzI3MTIzNSk6IFVzZSBwcm90byB0eXBlc1xuICovIGNsYXNzIF9fUFJJVkFURV9QZXJzaXN0ZW50V3JpdGVTdHJlYW0gZXh0ZW5kcyBfX1BSSVZBVEVfUGVyc2lzdGVudFN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbiwgciwgaSwgcykge1xuICAgICAgICBzdXBlcihlLCBcIndyaXRlX3N0cmVhbV9jb25uZWN0aW9uX2JhY2tvZmZcIiAvKiBUaW1lcklkLldyaXRlU3RyZWFtQ29ubmVjdGlvbkJhY2tvZmYgKi8gLCBcIndyaXRlX3N0cmVhbV9pZGxlXCIgLyogVGltZXJJZC5Xcml0ZVN0cmVhbUlkbGUgKi8gLCBcImhlYWx0aF9jaGVja190aW1lb3V0XCIgLyogVGltZXJJZC5IZWFsdGhDaGVja1RpbWVvdXQgKi8gLCB0LCBuLCByLCBzKSwgXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IGksIHRoaXMuVF8gPSAhMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhY2tzIHdoZXRoZXIgb3Igbm90IGEgaGFuZHNoYWtlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleGNoYW5nZWQgYW5kXG4gICAgICogdGhlIHN0cmVhbSBpcyByZWFkeSB0byBhY2NlcHQgbXV0YXRpb25zLlxuICAgICAqLyAgICBnZXQgRV8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlRfO1xuICAgIH1cbiAgICAvLyBPdmVycmlkZSBvZiBQZXJzaXN0ZW50U3RyZWFtLnN0YXJ0XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuVF8gPSAhMSwgdGhpcy5sYXN0U3RyZWFtVG9rZW4gPSB2b2lkIDAsIHN1cGVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIF9fKCkge1xuICAgICAgICB0aGlzLlRfICYmIHRoaXMuZF8oW10pO1xuICAgIH1cbiAgICBsXyhlLCB0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uT28oXCJXcml0ZVwiLCBlLCB0KTtcbiAgICB9XG4gICAgb25NZXNzYWdlKGUpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBBbHdheXMgY2FwdHVyZSB0aGUgbGFzdCBzdHJlYW0gdG9rZW4uXG4gICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KCEhZS5zdHJlYW1Ub2tlbiksIHRoaXMubGFzdFN0cmVhbVRva2VuID0gZS5zdHJlYW1Ub2tlbiwgdGhpcy5UXykge1xuICAgICAgICAgICAgLy8gQSBzdWNjZXNzZnVsIGZpcnN0IHdyaXRlIHJlc3BvbnNlIG1lYW5zIHRoZSBzdHJlYW0gaXMgaGVhbHRoeSxcbiAgICAgICAgICAgIC8vIE5vdGUsIHRoYXQgd2UgY291bGQgY29uc2lkZXIgYSBzdWNjZXNzZnVsIGhhbmRzaGFrZSBoZWFsdGh5LCBob3dldmVyLFxuICAgICAgICAgICAgLy8gdGhlIHdyaXRlIGl0c2VsZiBtaWdodCBiZSBjYXVzaW5nIGFuIGVycm9yIHdlIHdhbnQgdG8gYmFjayBvZmYgZnJvbS5cbiAgICAgICAgICAgIHRoaXMuWW8ucmVzZXQoKTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfZnJvbVdyaXRlUmVzdWx0cyhlLndyaXRlUmVzdWx0cywgZS5jb21taXRUaW1lKSwgbiA9IF9fUFJJVkFURV9mcm9tVmVyc2lvbihlLmNvbW1pdFRpbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuQV8obiwgdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGZpcnN0IHJlc3BvbnNlIGlzIGFsd2F5cyB0aGUgaGFuZHNoYWtlIHJlc3BvbnNlXG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfaGFyZEFzc2VydCghZS53cml0ZVJlc3VsdHMgfHwgMCA9PT0gZS53cml0ZVJlc3VsdHMubGVuZ3RoKSwgdGhpcy5UXyA9ICEwLCBcbiAgICAgICAgdGhpcy5saXN0ZW5lci5SXygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhbiBpbml0aWFsIHN0cmVhbVRva2VuIHRvIHRoZSBzZXJ2ZXIsIHBlcmZvcm1pbmcgdGhlIGhhbmRzaGFrZVxuICAgICAqIHJlcXVpcmVkIHRvIG1ha2UgdGhlIFN0cmVhbWluZ1dyaXRlIFJQQyB3b3JrLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgc2hvdWxkIHdhaXQgdW50aWwgb25IYW5kc2hha2VDb21wbGV0ZSB3YXMgY2FsbGVkLlxuICAgICAqLyAgICBWXygpIHtcbiAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiBTdXBwb3J0IHN0cmVhbSByZXN1bXB0aW9uLiBXZSBpbnRlbnRpb25hbGx5IGRvIG5vdCBzZXQgdGhlXG4gICAgICAgIC8vIHN0cmVhbSB0b2tlbiBvbiB0aGUgaGFuZHNoYWtlLCBpZ25vcmluZyBhbnkgc3RyZWFtIHRva2VuIHdlIG1pZ2h0IGhhdmUuXG4gICAgICAgIGNvbnN0IGUgPSB7fTtcbiAgICAgICAgZS5kYXRhYmFzZSA9IF9fUFJJVkFURV9nZXRFbmNvZGVkRGF0YWJhc2VJZCh0aGlzLnNlcmlhbGl6ZXIpLCB0aGlzLmlfKGUpO1xuICAgIH1cbiAgICAvKiogU2VuZHMgYSBncm91cCBvZiBtdXRhdGlvbnMgdG8gdGhlIEZpcmVzdG9yZSBiYWNrZW5kIHRvIGFwcGx5LiAqLyAgICBkXyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB7XG4gICAgICAgICAgICBzdHJlYW1Ub2tlbjogdGhpcy5sYXN0U3RyZWFtVG9rZW4sXG4gICAgICAgICAgICB3cml0ZXM6IGUubWFwKChlID0+IHRvTXV0YXRpb24odGhpcy5zZXJpYWxpemVyLCBlKSkpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaV8odCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBEYXRhc3RvcmUgYW5kIGl0cyByZWxhdGVkIG1ldGhvZHMgYXJlIGEgd3JhcHBlciBhcm91bmQgdGhlIGV4dGVybmFsIEdvb2dsZVxuICogQ2xvdWQgRGF0YXN0b3JlIGdycGMgQVBJLCB3aGljaCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgdGhhdCBpcyBtb3JlIGNvbnZlbmllbnRcbiAqIGZvciB0aGUgcmVzdCBvZiB0aGUgY2xpZW50IFNESyBhcmNoaXRlY3R1cmUgdG8gY29uc3VtZS5cbiAqL1xuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBEYXRhc3RvcmUgdGhhdCBleHBvc2VzIGFkZGl0aW9uYWwgc3RhdGUgZm9yIGludGVybmFsXG4gKiBjb25zdW1wdGlvbi5cbiAqL1xuY2xhc3MgX19QUklWQVRFX0RhdGFzdG9yZUltcGwgZXh0ZW5kcyBjbGFzcyBEYXRhc3RvcmUge30ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5hdXRoQ3JlZGVudGlhbHMgPSBlLCB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHMgPSB0LCB0aGlzLmNvbm5lY3Rpb24gPSBuLCBcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gciwgdGhpcy5tXyA9ICExO1xuICAgIH1cbiAgICBmXygpIHtcbiAgICAgICAgaWYgKHRoaXMubV8pIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiVGhlIGNsaWVudCBoYXMgYWxyZWFkeSBiZWVuIHRlcm1pbmF0ZWQuXCIpO1xuICAgIH1cbiAgICAvKiogSW52b2tlcyB0aGUgcHJvdmlkZWQgUlBDIHdpdGggYXV0aCBhbmQgQXBwQ2hlY2sgdG9rZW5zLiAqLyAgICBDbyhlLCB0LCBuLCByKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZfKCksIFByb21pc2UuYWxsKFsgdGhpcy5hdXRoQ3JlZGVudGlhbHMuZ2V0VG9rZW4oKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLmdldFRva2VuKCkgXSkudGhlbigoKFtpLCBzXSkgPT4gdGhpcy5jb25uZWN0aW9uLkNvKGUsIF9fUFJJVkFURV90b1Jlc291cmNlUGF0aCh0LCBuKSwgciwgaSwgcykpKS5jYXRjaCgoZSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBcIkZpcmViYXNlRXJyb3JcIiA9PT0gZS5uYW1lID8gKGUuY29kZSA9PT0gQy5VTkFVVEhFTlRJQ0FURUQgJiYgKHRoaXMuYXV0aENyZWRlbnRpYWxzLmludmFsaWRhdGVUb2tlbigpLCBcbiAgICAgICAgICAgIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFscy5pbnZhbGlkYXRlVG9rZW4oKSksIGUpIDogbmV3IEZpcmVzdG9yZUVycm9yKEMuVU5LTk9XTiwgZS50b1N0cmluZygpKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKiogSW52b2tlcyB0aGUgcHJvdmlkZWQgUlBDIHdpdGggc3RyZWFtZWQgcmVzdWx0cyB3aXRoIGF1dGggYW5kIEFwcENoZWNrIHRva2Vucy4gKi8gICAgeG8oZSwgdCwgbiwgciwgaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mXygpLCBQcm9taXNlLmFsbChbIHRoaXMuYXV0aENyZWRlbnRpYWxzLmdldFRva2VuKCksIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFscy5nZXRUb2tlbigpIF0pLnRoZW4oKChbcywgb10pID0+IHRoaXMuY29ubmVjdGlvbi54byhlLCBfX1BSSVZBVEVfdG9SZXNvdXJjZVBhdGgodCwgbiksIHIsIHMsIG8sIGkpKSkuY2F0Y2goKGUgPT4ge1xuICAgICAgICAgICAgdGhyb3cgXCJGaXJlYmFzZUVycm9yXCIgPT09IGUubmFtZSA/IChlLmNvZGUgPT09IEMuVU5BVVRIRU5USUNBVEVEICYmICh0aGlzLmF1dGhDcmVkZW50aWFscy5pbnZhbGlkYXRlVG9rZW4oKSwgXG4gICAgICAgICAgICB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHMuaW52YWxpZGF0ZVRva2VuKCkpLCBlKSA6IG5ldyBGaXJlc3RvcmVFcnJvcihDLlVOS05PV04sIGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICB0aGlzLm1fID0gITAsIHRoaXMuY29ubmVjdGlvbi50ZXJtaW5hdGUoKTtcbiAgICB9XG59XG5cbi8vIFRPRE8oZmlyZXN0b3JleHApOiBNYWtlIHN1cmUgdGhlcmUgaXMgb25seSBvbmUgRGF0YXN0b3JlIGluc3RhbmNlIHBlclxuLy8gZmlyZXN0b3JlLWV4cCBjbGllbnQuXG4vKipcbiAqIEEgY29tcG9uZW50IHVzZWQgYnkgdGhlIFJlbW90ZVN0b3JlIHRvIHRyYWNrIHRoZSBPbmxpbmVTdGF0ZSAodGhhdCBpcyxcbiAqIHdoZXRoZXIgb3Igbm90IHRoZSBjbGllbnQgYXMgYSB3aG9sZSBzaG91bGQgYmUgY29uc2lkZXJlZCB0byBiZSBvbmxpbmUgb3JcbiAqIG9mZmxpbmUpLCBpbXBsZW1lbnRpbmcgdGhlIGFwcHJvcHJpYXRlIGhldXJpc3RpY3MuXG4gKlxuICogSW4gcGFydGljdWxhciwgd2hlbiB0aGUgY2xpZW50IGlzIHRyeWluZyB0byBjb25uZWN0IHRvIHRoZSBiYWNrZW5kLCB3ZVxuICogYWxsb3cgdXAgdG8gTUFYX1dBVENIX1NUUkVBTV9GQUlMVVJFUyB3aXRoaW4gT05MSU5FX1NUQVRFX1RJTUVPVVRfTVMgZm9yXG4gKiBhIGNvbm5lY3Rpb24gdG8gc3VjY2VlZC4gSWYgd2UgaGF2ZSB0b28gbWFueSBmYWlsdXJlcyBvciB0aGUgdGltZW91dCBlbGFwc2VzLFxuICogdGhlbiB3ZSBzZXQgdGhlIE9ubGluZVN0YXRlIHRvIE9mZmxpbmUsIGFuZCB0aGUgY2xpZW50IHdpbGwgYmVoYXZlIGFzIGlmXG4gKiBpdCBpcyBvZmZsaW5lIChnZXQoKXMgd2lsbCByZXR1cm4gY2FjaGVkIGRhdGEsIGV0Yy4pLlxuICovXG5jbGFzcyBfX1BSSVZBVEVfT25saW5lU3RhdGVUcmFja2VyIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZSA9IGUsIHRoaXMub25saW5lU3RhdGVIYW5kbGVyID0gdCwgXG4gICAgICAgIC8qKiBUaGUgY3VycmVudCBPbmxpbmVTdGF0ZS4gKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFwiVW5rbm93blwiIC8qIE9ubGluZVN0YXRlLlVua25vd24gKi8gLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgY291bnQgb2YgY29uc2VjdXRpdmUgZmFpbHVyZXMgdG8gb3BlbiB0aGUgc3RyZWFtLiBJZiBpdCByZWFjaGVzIHRoZVxuICAgICAgICAgKiBtYXhpbXVtIGRlZmluZWQgYnkgTUFYX1dBVENIX1NUUkVBTV9GQUlMVVJFUywgd2UnbGwgc2V0IHRoZSBPbmxpbmVTdGF0ZSB0b1xuICAgICAgICAgKiBPZmZsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nXyA9IDAsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSB0aW1lciB0aGF0IGVsYXBzZXMgYWZ0ZXIgT05MSU5FX1NUQVRFX1RJTUVPVVRfTVMsIGF0IHdoaWNoIHBvaW50IHdlXG4gICAgICAgICAqIHRyYW5zaXRpb24gZnJvbSBPbmxpbmVTdGF0ZS5Vbmtub3duIHRvIE9ubGluZVN0YXRlLk9mZmxpbmUgd2l0aG91dCB3YWl0aW5nXG4gICAgICAgICAqIGZvciB0aGUgc3RyZWFtIHRvIGFjdHVhbGx5IGZhaWwgKE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMgdGltZXMpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wXyA9IG51bGwsIFxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGUgY2xpZW50IHNob3VsZCBsb2cgYSB3YXJuaW5nIG1lc3NhZ2UgaWYgaXQgZmFpbHMgdG8gY29ubmVjdCB0b1xuICAgICAgICAgKiB0aGUgYmFja2VuZCAoaW5pdGlhbGx5IHRydWUsIGNsZWFyZWQgYWZ0ZXIgYSBzdWNjZXNzZnVsIHN0cmVhbSwgb3IgaWYgd2UndmVcbiAgICAgICAgICogbG9nZ2VkIHRoZSBtZXNzYWdlIGFscmVhZHkpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy55XyA9ICEwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYnkgUmVtb3RlU3RvcmUgd2hlbiBhIHdhdGNoIHN0cmVhbSBpcyBzdGFydGVkIChpbmNsdWRpbmcgb24gZWFjaFxuICAgICAqIGJhY2tvZmYgYXR0ZW1wdCkuXG4gICAgICpcbiAgICAgKiBJZiB0aGlzIGlzIHRoZSBmaXJzdCBhdHRlbXB0LCBpdCBzZXRzIHRoZSBPbmxpbmVTdGF0ZSB0byBVbmtub3duIGFuZCBzdGFydHNcbiAgICAgKiB0aGUgb25saW5lU3RhdGVUaW1lci5cbiAgICAgKi8gICAgd18oKSB7XG4gICAgICAgIDAgPT09IHRoaXMuZ18gJiYgKHRoaXMuU18oXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLyksIHRoaXMucF8gPSB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZUFmdGVyRGVsYXkoXCJvbmxpbmVfc3RhdGVfdGltZW91dFwiIC8qIFRpbWVySWQuT25saW5lU3RhdGVUaW1lb3V0ICovICwgMWU0LCAoKCkgPT4gKHRoaXMucF8gPSBudWxsLCBcbiAgICAgICAgdGhpcy5iXyhcIkJhY2tlbmQgZGlkbid0IHJlc3BvbmQgd2l0aGluIDEwIHNlY29uZHMuXCIpLCB0aGlzLlNfKFwiT2ZmbGluZVwiIC8qIE9ubGluZVN0YXRlLk9mZmxpbmUgKi8pLCBcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIG91ciBPbmxpbmVTdGF0ZSBhcyBhcHByb3ByaWF0ZSBhZnRlciB0aGUgd2F0Y2ggc3RyZWFtIHJlcG9ydHMgYVxuICAgICAqIGZhaWx1cmUuIFRoZSBmaXJzdCBmYWlsdXJlIG1vdmVzIHVzIHRvIHRoZSAnVW5rbm93bicgc3RhdGUuIFdlIHRoZW4gbWF5XG4gICAgICogYWxsb3cgbXVsdGlwbGUgZmFpbHVyZXMgKGJhc2VkIG9uIE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMpIGJlZm9yZSB3ZVxuICAgICAqIGFjdHVhbGx5IHRyYW5zaXRpb24gdG8gdGhlICdPZmZsaW5lJyBzdGF0ZS5cbiAgICAgKi8gICAgRF8oZSkge1xuICAgICAgICBcIk9ubGluZVwiIC8qIE9ubGluZVN0YXRlLk9ubGluZSAqLyA9PT0gdGhpcy5zdGF0ZSA/IHRoaXMuU18oXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLykgOiAodGhpcy5nXysrLCBcbiAgICAgICAgdGhpcy5nXyA+PSAxICYmICh0aGlzLkNfKCksIHRoaXMuYl8oYENvbm5lY3Rpb24gZmFpbGVkIDEgdGltZXMuIE1vc3QgcmVjZW50IGVycm9yOiAke2UudG9TdHJpbmcoKX1gKSwgXG4gICAgICAgIHRoaXMuU18oXCJPZmZsaW5lXCIgLyogT25saW5lU3RhdGUuT2ZmbGluZSAqLykpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhwbGljaXRseSBzZXRzIHRoZSBPbmxpbmVTdGF0ZSB0byB0aGUgc3BlY2lmaWVkIHN0YXRlLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgcmVzZXRzIG91ciB0aW1lcnMgLyBmYWlsdXJlIGNvdW50ZXJzLCBldGMuIHVzZWQgYnkgb3VyXG4gICAgICogT2ZmbGluZSBoZXVyaXN0aWNzLCBzbyBtdXN0IG5vdCBiZSB1c2VkIGluIHBsYWNlIG9mXG4gICAgICogaGFuZGxlV2F0Y2hTdHJlYW1TdGFydCgpIGFuZCBoYW5kbGVXYXRjaFN0cmVhbUZhaWx1cmUoKS5cbiAgICAgKi8gICAgc2V0KGUpIHtcbiAgICAgICAgdGhpcy5DXygpLCB0aGlzLmdfID0gMCwgXCJPbmxpbmVcIiAvKiBPbmxpbmVTdGF0ZS5PbmxpbmUgKi8gPT09IGUgJiYgKFxuICAgICAgICAvLyBXZSd2ZSBjb25uZWN0ZWQgdG8gd2F0Y2ggYXQgbGVhc3Qgb25jZS4gRG9uJ3Qgd2FybiB0aGUgZGV2ZWxvcGVyXG4gICAgICAgIC8vIGFib3V0IGJlaW5nIG9mZmxpbmUgZ29pbmcgZm9yd2FyZC5cbiAgICAgICAgdGhpcy55XyA9ICExKSwgdGhpcy5TXyhlKTtcbiAgICB9XG4gICAgU18oZSkge1xuICAgICAgICBlICE9PSB0aGlzLnN0YXRlICYmICh0aGlzLnN0YXRlID0gZSwgdGhpcy5vbmxpbmVTdGF0ZUhhbmRsZXIoZSkpO1xuICAgIH1cbiAgICBiXyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBgQ291bGQgbm90IHJlYWNoIENsb3VkIEZpcmVzdG9yZSBiYWNrZW5kLiAke2V9XFxuVGhpcyB0eXBpY2FsbHkgaW5kaWNhdGVzIHRoYXQgeW91ciBkZXZpY2UgZG9lcyBub3QgaGF2ZSBhIGhlYWx0aHkgSW50ZXJuZXQgY29ubmVjdGlvbiBhdCB0aGUgbW9tZW50LiBUaGUgY2xpZW50IHdpbGwgb3BlcmF0ZSBpbiBvZmZsaW5lIG1vZGUgdW50aWwgaXQgaXMgYWJsZSB0byBzdWNjZXNzZnVsbHkgY29ubmVjdCB0byB0aGUgYmFja2VuZC5gO1xuICAgICAgICB0aGlzLnlfID8gKF9fUFJJVkFURV9sb2dFcnJvcih0KSwgdGhpcy55XyA9ICExKSA6IF9fUFJJVkFURV9sb2dEZWJ1ZyhcIk9ubGluZVN0YXRlVHJhY2tlclwiLCB0KTtcbiAgICB9XG4gICAgQ18oKSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMucF8gJiYgKHRoaXMucF8uY2FuY2VsKCksIHRoaXMucF8gPSBudWxsKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGNsYXNzIF9fUFJJVkFURV9SZW1vdGVTdG9yZUltcGwge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhbCBzdG9yZSwgdXNlZCB0byBmaWxsIHRoZSB3cml0ZSBwaXBlbGluZSB3aXRoIG91dGJvdW5kIG11dGF0aW9ucy5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKiogVGhlIGNsaWVudC1zaWRlIHByb3h5IGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBiYWNrZW5kLiAqL1xuICAgIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgdGhpcy5sb2NhbFN0b3JlID0gZSwgdGhpcy5kYXRhc3RvcmUgPSB0LCB0aGlzLmFzeW5jUXVldWUgPSBuLCB0aGlzLnJlbW90ZVN5bmNlciA9IHt9LCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGlzdCBvZiB1cCB0byBNQVhfUEVORElOR19XUklURVMgd3JpdGVzIHRoYXQgd2UgaGF2ZSBmZXRjaGVkIGZyb20gdGhlXG4gICAgICAgICAqIExvY2FsU3RvcmUgdmlhIGZpbGxXcml0ZVBpcGVsaW5lKCkgYW5kIGhhdmUgb3Igd2lsbCBzZW5kIHRvIHRoZSB3cml0ZVxuICAgICAgICAgKiBzdHJlYW0uXG4gICAgICAgICAqXG4gICAgICAgICAqIFdoZW5ldmVyIHdyaXRlUGlwZWxpbmUubGVuZ3RoID4gMCB0aGUgUmVtb3RlU3RvcmUgd2lsbCBhdHRlbXB0IHRvIHN0YXJ0IG9yXG4gICAgICAgICAqIHJlc3RhcnQgdGhlIHdyaXRlIHN0cmVhbS4gV2hlbiB0aGUgc3RyZWFtIGlzIGVzdGFibGlzaGVkIHRoZSB3cml0ZXMgaW4gdGhlXG4gICAgICAgICAqIHBpcGVsaW5lIHdpbGwgYmUgc2VudCBpbiBvcmRlci5cbiAgICAgICAgICpcbiAgICAgICAgICogV3JpdGVzIHJlbWFpbiBpbiB3cml0ZVBpcGVsaW5lIHVudGlsIHRoZXkgYXJlIGFja25vd2xlZGdlZCBieSB0aGUgYmFja2VuZFxuICAgICAgICAgKiBhbmQgdGh1cyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgcmUtc2VudCBpZiB0aGUgc3RyZWFtIGlzIGludGVycnVwdGVkIC9cbiAgICAgICAgICogcmVzdGFydGVkIGJlZm9yZSB0aGV5J3JlIGFja25vd2xlZGdlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogV3JpdGUgcmVzcG9uc2VzIGZyb20gdGhlIGJhY2tlbmQgYXJlIGxpbmtlZCB0byB0aGVpciBvcmlnaW5hdGluZyByZXF1ZXN0XG4gICAgICAgICAqIHB1cmVseSBiYXNlZCBvbiBvcmRlciwgYW5kIHNvIHdlIGNhbiBqdXN0IHNoaWZ0KCkgd3JpdGVzIGZyb20gdGhlIGZyb250IG9mXG4gICAgICAgICAqIHRoZSB3cml0ZVBpcGVsaW5lIGFzIHdlIHJlY2VpdmUgcmVzcG9uc2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52XyA9IFtdLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbWFwcGluZyBvZiB3YXRjaGVkIHRhcmdldHMgdGhhdCB0aGUgY2xpZW50IGNhcmVzIGFib3V0IHRyYWNraW5nIGFuZCB0aGVcbiAgICAgICAgICogdXNlciBoYXMgZXhwbGljaXRseSBjYWxsZWQgYSAnbGlzdGVuJyBmb3IgdGhpcyB0YXJnZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZXNlIHRhcmdldHMgbWF5IG9yIG1heSBub3QgaGF2ZSBiZWVuIHNlbnQgdG8gb3IgYWNrbm93bGVkZ2VkIGJ5IHRoZVxuICAgICAgICAgKiBzZXJ2ZXIuIE9uIHJlLWVzdGFibGlzaGluZyB0aGUgbGlzdGVuIHN0cmVhbSwgdGhlc2UgdGFyZ2V0cyBzaG91bGQgYmUgc2VudFxuICAgICAgICAgKiB0byB0aGUgc2VydmVyLiBUaGUgdGFyZ2V0cyByZW1vdmVkIHdpdGggdW5saXN0ZW5zIGFyZSByZW1vdmVkIGVhZ2VybHlcbiAgICAgICAgICogd2l0aG91dCB3YWl0aW5nIGZvciBjb25maXJtYXRpb24gZnJvbSB0aGUgbGlzdGVuIHN0cmVhbS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuRl8gPSBuZXcgTWFwLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc2V0IG9mIHJlYXNvbnMgZm9yIHdoeSB0aGUgUmVtb3RlU3RvcmUgbWF5IGJlIG9mZmxpbmUuIElmIGVtcHR5LCB0aGVcbiAgICAgICAgICogUmVtb3RlU3RvcmUgbWF5IHN0YXJ0IGl0cyBuZXR3b3JrIGNvbm5lY3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5NXyA9IG5ldyBTZXQsIFxuICAgICAgICAvKipcbiAgICAgICAgICogRXZlbnQgaGFuZGxlcnMgdGhhdCBnZXQgY2FsbGVkIHdoZW4gdGhlIG5ldHdvcmsgaXMgZGlzYWJsZWQgb3IgZW5hYmxlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogUE9SVElORyBOT1RFOiBUaGVzZSBmdW5jdGlvbnMgYXJlIHVzZWQgb24gdGhlIFdlYiBjbGllbnQgdG8gY3JlYXRlIHRoZVxuICAgICAgICAgKiB1bmRlcmx5aW5nIHN0cmVhbXMgKHRvIHN1cHBvcnQgdHJlZS1zaGFrZWFibGUgc3RyZWFtcykuIE9uIEFuZHJvaWQgYW5kIGlPUyxcbiAgICAgICAgICogdGhlIHN0cmVhbXMgYXJlIGNyZWF0ZWQgZHVyaW5nIGNvbnN0cnVjdGlvbiBvZiBSZW1vdGVTdG9yZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMueF8gPSBbXSwgdGhpcy5PXyA9IGksIHRoaXMuT18uaW8oKGUgPT4ge1xuICAgICAgICAgICAgbi5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUG9ydGluZyBOb3RlOiBVbmxpa2UgaU9TLCBgcmVzdGFydE5ldHdvcmsoKWAgaXMgY2FsbGVkIGV2ZW4gd2hlbiB0aGVcbiAgICAgICAgICAgICAgICAvLyBuZXR3b3JrIGJlY29tZXMgdW5yZWFjaGFibGUgYXMgd2UgZG9uJ3QgaGF2ZSBhbnkgb3RoZXIgd2F5IHRvIHRlYXJcbiAgICAgICAgICAgICAgICAvLyBkb3duIG91ciBzdHJlYW1zLlxuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9jYW5Vc2VOZXR3b3JrKHRoaXMpICYmIChfX1BSSVZBVEVfbG9nRGVidWcoXCJSZW1vdGVTdG9yZVwiLCBcIlJlc3RhcnRpbmcgc3RyZWFtcyBmb3IgbmV0d29yayByZWFjaGFiaWxpdHkgY2hhbmdlLlwiKSwgXG4gICAgICAgICAgICAgICAgYXdhaXQgYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3Jlc3RhcnROZXR3b3JrKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIHQuTV8uYWRkKDQgLyogT2ZmbGluZUNhdXNlLkNvbm5lY3Rpdml0eUNoYW5nZSAqLyksIGF3YWl0IF9fUFJJVkFURV9kaXNhYmxlTmV0d29ya0ludGVybmFsKHQpLCBcbiAgICAgICAgICAgICAgICAgICAgdC5OXy5zZXQoXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLyksIHQuTV8uZGVsZXRlKDQgLyogT2ZmbGluZUNhdXNlLkNvbm5lY3Rpdml0eUNoYW5nZSAqLyksIFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBfX1BSSVZBVEVfZW5hYmxlTmV0d29ya0ludGVybmFsKHQpO1xuICAgICAgICAgICAgICAgIH0odGhpcykpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIHRoaXMuTl8gPSBuZXcgX19QUklWQVRFX09ubGluZVN0YXRlVHJhY2tlcihuLCByKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9lbmFibGVOZXR3b3JrSW50ZXJuYWwoZSkge1xuICAgIGlmIChfX1BSSVZBVEVfY2FuVXNlTmV0d29yayhlKSkgZm9yIChjb25zdCB0IG9mIGUueF8pIGF3YWl0IHQoLyogZW5hYmxlZD0gKi8gITApO1xufVxuXG4vKipcbiAqIFRlbXBvcmFyaWx5IGRpc2FibGVzIHRoZSBuZXR3b3JrLiBUaGUgbmV0d29yayBjYW4gYmUgcmUtZW5hYmxlZCB1c2luZ1xuICogZW5hYmxlTmV0d29yaygpLlxuICovIGFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9kaXNhYmxlTmV0d29ya0ludGVybmFsKGUpIHtcbiAgICBmb3IgKGNvbnN0IHQgb2YgZS54XykgYXdhaXQgdCgvKiBlbmFibGVkPSAqLyAhMSk7XG59XG5cbi8qKlxuICogU3RhcnRzIG5ldyBsaXN0ZW4gZm9yIHRoZSBnaXZlbiB0YXJnZXQuIFVzZXMgcmVzdW1lIHRva2VuIGlmIHByb3ZpZGVkLiBJdFxuICogaXMgYSBuby1vcCBpZiB0aGUgdGFyZ2V0IG9mIGdpdmVuIGBUYXJnZXREYXRhYCBpcyBhbHJlYWR5IGJlaW5nIGxpc3RlbmVkIHRvLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfcmVtb3RlU3RvcmVMaXN0ZW4oZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIG4uRl8uaGFzKHQudGFyZ2V0SWQpIHx8IChcbiAgICAvLyBNYXJrIHRoaXMgYXMgc29tZXRoaW5nIHRoZSBjbGllbnQgaXMgY3VycmVudGx5IGxpc3RlbmluZyBmb3IuXG4gICAgbi5GXy5zZXQodC50YXJnZXRJZCwgdCksIF9fUFJJVkFURV9zaG91bGRTdGFydFdhdGNoU3RyZWFtKG4pID8gXG4gICAgLy8gVGhlIGxpc3RlbiB3aWxsIGJlIHNlbnQgaW4gb25XYXRjaFN0cmVhbU9wZW5cbiAgICBfX1BSSVZBVEVfc3RhcnRXYXRjaFN0cmVhbShuKSA6IF9fUFJJVkFURV9lbnN1cmVXYXRjaFN0cmVhbShuKS5YbygpICYmIF9fUFJJVkFURV9zZW5kV2F0Y2hSZXF1ZXN0KG4sIHQpKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBsaXN0ZW4gZnJvbSBzZXJ2ZXIuIEl0IGlzIGEgbm8tb3AgaWYgdGhlIGdpdmVuIHRhcmdldCBpZCBpc1xuICogbm90IGJlaW5nIGxpc3RlbmVkIHRvLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9yZW1vdGVTdG9yZVVubGlzdGVuKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgciA9IF9fUFJJVkFURV9lbnN1cmVXYXRjaFN0cmVhbShuKTtcbiAgICBuLkZfLmRlbGV0ZSh0KSwgci5YbygpICYmIF9fUFJJVkFURV9zZW5kVW53YXRjaFJlcXVlc3QobiwgdCksIDAgPT09IG4uRl8uc2l6ZSAmJiAoci5YbygpID8gci5uXygpIDogX19QUklWQVRFX2NhblVzZU5ldHdvcmsobikgJiYgXG4gICAgLy8gUmV2ZXJ0IHRvIE9ubGluZVN0YXRlLlVua25vd24gaWYgdGhlIHdhdGNoIHN0cmVhbSBpcyBub3Qgb3BlbiBhbmQgd2VcbiAgICAvLyBoYXZlIG5vIGxpc3RlbmVycywgc2luY2Ugd2l0aG91dCBhbnkgbGlzdGVucyB0byBzZW5kIHdlIGNhbm5vdFxuICAgIC8vIGNvbmZpcm0gaWYgdGhlIHN0cmVhbSBpcyBoZWFsdGh5IGFuZCB1cGdyYWRlIHRvIE9ubGluZVN0YXRlLk9ubGluZS5cbiAgICBuLk5fLnNldChcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKSk7XG59XG5cbi8qKlxuICogV2UgbmVlZCB0byBpbmNyZW1lbnQgdGhlIHRoZSBleHBlY3RlZCBudW1iZXIgb2YgcGVuZGluZyByZXNwb25zZXMgd2UncmUgZHVlXG4gKiBmcm9tIHdhdGNoIHNvIHdlIHdhaXQgZm9yIHRoZSBhY2sgdG8gcHJvY2VzcyBhbnkgbWVzc2FnZXMgZnJvbSB0aGlzIHRhcmdldC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfc2VuZFdhdGNoUmVxdWVzdChlLCB0KSB7XG4gICAgaWYgKGUuTF8ueGUodC50YXJnZXRJZCksIHQucmVzdW1lVG9rZW4uYXBwcm94aW1hdGVCeXRlU2l6ZSgpID4gMCB8fCB0LnNuYXBzaG90VmVyc2lvbi5jb21wYXJlVG8oU25hcHNob3RWZXJzaW9uLm1pbigpKSA+IDApIHtcbiAgICAgICAgY29uc3QgbiA9IGUucmVtb3RlU3luY2VyLmdldFJlbW90ZUtleXNGb3JUYXJnZXQodC50YXJnZXRJZCkuc2l6ZTtcbiAgICAgICAgdCA9IHQud2l0aEV4cGVjdGVkQ291bnQobik7XG4gICAgfVxuICAgIF9fUFJJVkFURV9lbnN1cmVXYXRjaFN0cmVhbShlKS5QXyh0KTtcbn1cblxuLyoqXG4gKiBXZSBuZWVkIHRvIGluY3JlbWVudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHBlbmRpbmcgcmVzcG9uc2VzIHdlJ3JlIGR1ZVxuICogZnJvbSB3YXRjaCBzbyB3ZSB3YWl0IGZvciB0aGUgcmVtb3ZhbCBvbiB0aGUgc2VydmVyIGJlZm9yZSB3ZSBwcm9jZXNzIGFueVxuICogbWVzc2FnZXMgZnJvbSB0aGlzIHRhcmdldC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfc2VuZFVud2F0Y2hSZXF1ZXN0KGUsIHQpIHtcbiAgICBlLkxfLnhlKHQpLCBfX1BSSVZBVEVfZW5zdXJlV2F0Y2hTdHJlYW0oZSkuSV8odCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9zdGFydFdhdGNoU3RyZWFtKGUpIHtcbiAgICBlLkxfID0gbmV3IF9fUFJJVkFURV9XYXRjaENoYW5nZUFnZ3JlZ2F0b3Ioe1xuICAgICAgICBnZXRSZW1vdGVLZXlzRm9yVGFyZ2V0OiB0ID0+IGUucmVtb3RlU3luY2VyLmdldFJlbW90ZUtleXNGb3JUYXJnZXQodCksXG4gICAgICAgIG90OiB0ID0+IGUuRl8uZ2V0KHQpIHx8IG51bGwsXG4gICAgICAgIHR0OiAoKSA9PiBlLmRhdGFzdG9yZS5zZXJpYWxpemVyLmRhdGFiYXNlSWRcbiAgICB9KSwgX19QUklWQVRFX2Vuc3VyZVdhdGNoU3RyZWFtKGUpLnN0YXJ0KCksIGUuTl8ud18oKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHdhdGNoIHN0cmVhbSBzaG91bGQgYmUgc3RhcnRlZCBiZWNhdXNlIGl0J3MgbmVjZXNzYXJ5XG4gKiBhbmQgaGFzIG5vdCB5ZXQgYmVlbiBzdGFydGVkLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9zaG91bGRTdGFydFdhdGNoU3RyZWFtKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2NhblVzZU5ldHdvcmsoZSkgJiYgIV9fUFJJVkFURV9lbnN1cmVXYXRjaFN0cmVhbShlKS5abygpICYmIGUuRl8uc2l6ZSA+IDA7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9jYW5Vc2VOZXR3b3JrKGUpIHtcbiAgICByZXR1cm4gMCA9PT0gX19QUklWQVRFX2RlYnVnQ2FzdChlKS5NXy5zaXplO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY2xlYW5VcFdhdGNoU3RyZWFtU3RhdGUoZSkge1xuICAgIGUuTF8gPSB2b2lkIDA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9vbldhdGNoU3RyZWFtQ29ubmVjdGVkKGUpIHtcbiAgICAvLyBNYXJrIHRoZSBjbGllbnQgYXMgb25saW5lIHNpbmNlIHdlIGdvdCBhIFwiY29ubmVjdGVkXCIgbm90aWZpY2F0aW9uLlxuICAgIGUuTl8uc2V0KFwiT25saW5lXCIgLyogT25saW5lU3RhdGUuT25saW5lICovKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX29uV2F0Y2hTdHJlYW1PcGVuKGUpIHtcbiAgICBlLkZfLmZvckVhY2goKCh0LCBuKSA9PiB7XG4gICAgICAgIF9fUFJJVkFURV9zZW5kV2F0Y2hSZXF1ZXN0KGUsIHQpO1xuICAgIH0pKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX29uV2F0Y2hTdHJlYW1DbG9zZShlLCB0KSB7XG4gICAgX19QUklWQVRFX2NsZWFuVXBXYXRjaFN0cmVhbVN0YXRlKGUpLCBcbiAgICAvLyBJZiB3ZSBzdGlsbCBuZWVkIHRoZSB3YXRjaCBzdHJlYW0sIHJldHJ5IHRoZSBjb25uZWN0aW9uLlxuICAgIF9fUFJJVkFURV9zaG91bGRTdGFydFdhdGNoU3RyZWFtKGUpID8gKGUuTl8uRF8odCksIF9fUFJJVkFURV9zdGFydFdhdGNoU3RyZWFtKGUpKSA6IFxuICAgIC8vIE5vIG5lZWQgdG8gcmVzdGFydCB3YXRjaCBzdHJlYW0gYmVjYXVzZSB0aGVyZSBhcmUgbm8gYWN0aXZlIHRhcmdldHMuXG4gICAgLy8gVGhlIG9ubGluZSBzdGF0ZSBpcyBzZXQgdG8gdW5rbm93biBiZWNhdXNlIHRoZXJlIGlzIG5vIGFjdGl2ZSBhdHRlbXB0XG4gICAgLy8gYXQgZXN0YWJsaXNoaW5nIGEgY29ubmVjdGlvblxuICAgIGUuTl8uc2V0KFwiVW5rbm93blwiIC8qIE9ubGluZVN0YXRlLlVua25vd24gKi8pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfb25XYXRjaFN0cmVhbUNoYW5nZShlLCB0LCBuKSB7XG4gICAgaWYgKFxuICAgIC8vIE1hcmsgdGhlIGNsaWVudCBhcyBvbmxpbmUgc2luY2Ugd2UgZ290IGEgbWVzc2FnZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICBlLk5fLnNldChcIk9ubGluZVwiIC8qIE9ubGluZVN0YXRlLk9ubGluZSAqLyksIHQgaW5zdGFuY2VvZiBfX1BSSVZBVEVfV2F0Y2hUYXJnZXRDaGFuZ2UgJiYgMiAvKiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlbW92ZWQgKi8gPT09IHQuc3RhdGUgJiYgdC5jYXVzZSkgXG4gICAgLy8gVGhlcmUgd2FzIGFuIGVycm9yIG9uIGEgdGFyZ2V0LCBkb24ndCB3YWl0IGZvciBhIGNvbnNpc3RlbnQgc25hcHNob3RcbiAgICAvLyB0byByYWlzZSBldmVudHNcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBcbiAgICAgICAgLyoqIEhhbmRsZXMgYW4gZXJyb3Igb24gYSB0YXJnZXQgKi9cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX2hhbmRsZVRhcmdldEVycm9yKGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNhdXNlO1xuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIHQudGFyZ2V0SWRzKSBcbiAgICAgICAgICAgIC8vIEEgd2F0Y2hlZCB0YXJnZXQgbWlnaHQgaGF2ZSBiZWVuIHJlbW92ZWQgYWxyZWFkeS5cbiAgICAgICAgICAgIGUuRl8uaGFzKHIpICYmIChhd2FpdCBlLnJlbW90ZVN5bmNlci5yZWplY3RMaXN0ZW4ociwgbiksIGUuRl8uZGVsZXRlKHIpLCBlLkxfLnJlbW92ZVRhcmdldChyKSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBBdHRlbXB0cyB0byBmaWxsIG91ciB3cml0ZSBwaXBlbGluZSB3aXRoIHdyaXRlcyBmcm9tIHRoZSBMb2NhbFN0b3JlLlxuICpcbiAqIENhbGxlZCBpbnRlcm5hbGx5IHRvIGJvb3RzdHJhcCBvciByZWZpbGwgdGhlIHdyaXRlIHBpcGVsaW5lIGFuZCBieVxuICogU3luY0VuZ2luZSB3aGVuZXZlciB0aGVyZSBhcmUgbmV3IG11dGF0aW9ucyB0byBwcm9jZXNzLlxuICpcbiAqIFN0YXJ0cyB0aGUgd3JpdGUgc3RyZWFtIGlmIG5lY2Vzc2FyeS5cbiAqLyAoZSwgdCk7XG4gICAgfSBjYXRjaCAobikge1xuICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJSZW1vdGVTdG9yZVwiLCBcIkZhaWxlZCB0byByZW1vdmUgdGFyZ2V0cyAlczogJXMgXCIsIHQudGFyZ2V0SWRzLmpvaW4oXCIsXCIpLCBuKSwgXG4gICAgICAgIGF3YWl0IF9fUFJJVkFURV9kaXNhYmxlTmV0d29ya1VudGlsUmVjb3ZlcnkoZSwgbik7XG4gICAgfSBlbHNlIGlmICh0IGluc3RhbmNlb2YgX19QUklWQVRFX0RvY3VtZW50V2F0Y2hDaGFuZ2UgPyBlLkxfLktlKHQpIDogdCBpbnN0YW5jZW9mIF9fUFJJVkFURV9FeGlzdGVuY2VGaWx0ZXJDaGFuZ2UgPyBlLkxfLkhlKHQpIDogZS5MXy5XZSh0KSwgXG4gICAgIW4uaXNFcXVhbChTbmFwc2hvdFZlcnNpb24ubWluKCkpKSB0cnkge1xuICAgICAgICBjb25zdCB0ID0gYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVHZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKGUubG9jYWxTdG9yZSk7XG4gICAgICAgIG4uY29tcGFyZVRvKHQpID49IDAgJiYgXG4gICAgICAgIC8vIFdlIGhhdmUgcmVjZWl2ZWQgYSB0YXJnZXQgY2hhbmdlIHdpdGggYSBnbG9iYWwgc25hcHNob3QgaWYgdGhlIHNuYXBzaG90XG4gICAgICAgIC8vIHZlcnNpb24gaXMgbm90IGVxdWFsIHRvIFNuYXBzaG90VmVyc2lvbi5taW4oKS5cbiAgICAgICAgYXdhaXQgXG4gICAgICAgIC8qKlxuICogVGFrZXMgYSBiYXRjaCBvZiBjaGFuZ2VzIGZyb20gdGhlIERhdGFzdG9yZSwgcmVwYWNrYWdlcyB0aGVtIGFzIGFcbiAqIFJlbW90ZUV2ZW50LCBhbmQgcGFzc2VzIHRoYXQgb24gdG8gdGhlIGxpc3RlbmVyLCB3aGljaCBpcyB0eXBpY2FsbHkgdGhlXG4gKiBTeW5jRW5naW5lLlxuICovXG4gICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9yYWlzZVdhdGNoU25hcHNob3QoZSwgdCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IGUuTF8ucnQodCk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgaW4tbWVtb3J5IHJlc3VtZSB0b2tlbnMuIExvY2FsU3RvcmUgd2lsbCB1cGRhdGUgdGhlXG4gICAgICAgICAgICAvLyBwZXJzaXN0ZW50IHZpZXcgb2YgdGhlc2Ugd2hlbiBhcHBseWluZyB0aGUgY29tcGxldGVkIFJlbW90ZUV2ZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4udGFyZ2V0Q2hhbmdlcy5mb3JFYWNoKCgobiwgcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuLnJlc3VtZVRva2VuLmFwcHJveGltYXRlQnl0ZVNpemUoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuRl8uZ2V0KHIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBBIHdhdGNoZWQgdGFyZ2V0IG1pZ2h0IGhhdmUgYmVlbiByZW1vdmVkIGFscmVhZHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAmJiBlLkZfLnNldChyLCBpLndpdGhSZXN1bWVUb2tlbihuLnJlc3VtZVRva2VuLCB0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpLCBcbiAgICAgICAgICAgIC8vIFJlLWVzdGFibGlzaCBsaXN0ZW5zIGZvciB0aGUgdGFyZ2V0cyB0aGF0IGhhdmUgYmVlbiBpbnZhbGlkYXRlZCBieVxuICAgICAgICAgICAgLy8gZXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgbi50YXJnZXRNaXNtYXRjaGVzLmZvckVhY2goKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IGUuRl8uZ2V0KHQpO1xuICAgICAgICAgICAgICAgIGlmICghcikgXG4gICAgICAgICAgICAgICAgLy8gQSB3YXRjaGVkIHRhcmdldCBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZCBhbHJlYWR5LlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgcmVzdW1lIHRva2VuIGZvciB0aGUgdGFyZ2V0LCBzaW5jZSB3ZSdyZSBpbiBhIGtub3duIG1pc21hdGNoXG4gICAgICAgICAgICAgICAgLy8gc3RhdGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuRl8uc2V0KHQsIHIud2l0aFJlc3VtZVRva2VuKEJ5dGVTdHJpbmcuRU1QVFlfQllURV9TVFJJTkcsIHIuc25hcHNob3RWZXJzaW9uKSksIFxuICAgICAgICAgICAgICAgIC8vIENhdXNlIGEgaGFyZCByZXNldCBieSB1bndhdGNoaW5nIGFuZCByZXdhdGNoaW5nIGltbWVkaWF0ZWx5LCBidXRcbiAgICAgICAgICAgICAgICAvLyBkZWxpYmVyYXRlbHkgZG9uJ3Qgc2VuZCBhIHJlc3VtZSB0b2tlbiBzbyB0aGF0IHdlIGdldCBhIGZ1bGwgdXBkYXRlLlxuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9zZW5kVW53YXRjaFJlcXVlc3QoZSwgdCk7XG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgdGFyZ2V0IHdlIHNlbmQgYXMgYmVpbmcgb24gYmVoYWxmIG9mIGFuIGV4aXN0ZW5jZSBmaWx0ZXJcbiAgICAgICAgICAgICAgICAvLyBtaXNtYXRjaCwgYnV0IGRvbid0IGFjdHVhbGx5IHJldGFpbiB0aGF0IGluIGxpc3RlblRhcmdldHMuIFRoaXMgZW5zdXJlc1xuICAgICAgICAgICAgICAgIC8vIHRoYXQgd2UgZmxhZyB0aGUgZmlyc3QgcmUtbGlzdGVuIHRoaXMgd2F5IHdpdGhvdXQgaW1wYWN0aW5nIGZ1dHVyZVxuICAgICAgICAgICAgICAgIC8vIGxpc3RlbnMgb2YgdGhpcyB0YXJnZXQgKHRoYXQgbWlnaHQgaGFwcGVuIGUuZy4gb24gcmVjb25uZWN0KS5cbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IFRhcmdldERhdGEoci50YXJnZXQsIHQsIG4sIHIuc2VxdWVuY2VOdW1iZXIpO1xuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9zZW5kV2F0Y2hSZXF1ZXN0KGUsIGkpO1xuICAgICAgICAgICAgfSkpLCBlLnJlbW90ZVN5bmNlci5hcHBseVJlbW90ZUV2ZW50KG4pO1xuICAgICAgICB9KGUsIG4pO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiUmVtb3RlU3RvcmVcIiwgXCJGYWlsZWQgdG8gcmFpc2Ugc25hcHNob3Q6XCIsIHQpLCBhd2FpdCBfX1BSSVZBVEVfZGlzYWJsZU5ldHdvcmtVbnRpbFJlY292ZXJ5KGUsIHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWNvdmVyeSBsb2dpYyBmb3IgSW5kZXhlZERCIGVycm9ycyB0aGF0IHRha2VzIHRoZSBuZXR3b3JrIG9mZmxpbmUgdW50aWxcbiAqIGBvcGAgc3VjY2VlZHMuIFJldHJpZXMgYXJlIHNjaGVkdWxlZCB3aXRoIGJhY2tvZmYgdXNpbmdcbiAqIGBlbnF1ZXVlUmV0cnlhYmxlKClgLiBJZiBgb3AoKWAgaXMgbm90IHByb3ZpZGVkLCBJbmRleGVkREIgYWNjZXNzIGlzXG4gKiB2YWxpZGF0ZWQgdmlhIGEgZ2VuZXJpYyBvcGVyYXRpb24uXG4gKlxuICogVGhlIHJldHVybmVkIFByb21pc2UgaXMgcmVzb2x2ZWQgb25jZSB0aGUgbmV0d29yayBpcyBkaXNhYmxlZCBhbmQgYmVmb3JlXG4gKiBhbnkgcmV0cnkgYXR0ZW1wdC5cbiAqLyBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfZGlzYWJsZU5ldHdvcmtVbnRpbFJlY292ZXJ5KGUsIHQsIG4pIHtcbiAgICBpZiAoIV9fUFJJVkFURV9pc0luZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IodCkpIHRocm93IHQ7XG4gICAgZS5NXy5hZGQoMSAvKiBPZmZsaW5lQ2F1c2UuSW5kZXhlZERiRmFpbGVkICovKSwgXG4gICAgLy8gRGlzYWJsZSBuZXR3b3JrIGFuZCByYWlzZSBvZmZsaW5lIHNuYXBzaG90c1xuICAgIGF3YWl0IF9fUFJJVkFURV9kaXNhYmxlTmV0d29ya0ludGVybmFsKGUpLCBlLk5fLnNldChcIk9mZmxpbmVcIiAvKiBPbmxpbmVTdGF0ZS5PZmZsaW5lICovKSwgXG4gICAgbiB8fCAoXG4gICAgLy8gVXNlIGEgc2ltcGxlIHJlYWQgb3BlcmF0aW9uIHRvIGRldGVybWluZSBpZiBJbmRleGVkREIgcmVjb3ZlcmVkLlxuICAgIC8vIElkZWFsbHksIHdlIHdvdWxkIGV4cG9zZSBhIGhlYWx0aCBjaGVjayBkaXJlY3RseSBvbiBTaW1wbGVEYiwgYnV0XG4gICAgLy8gUmVtb3RlU3RvcmUgb25seSBoYXMgYWNjZXNzIHRvIHBlcnNpc3RlbmNlIHRocm91Z2ggTG9jYWxTdG9yZS5cbiAgICBuID0gKCkgPT4gX19QUklWQVRFX2xvY2FsU3RvcmVHZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKGUubG9jYWxTdG9yZSkpLCBcbiAgICAvLyBQcm9iZSBJbmRleGVkREIgcGVyaW9kaWNhbGx5IGFuZCByZS1lbmFibGUgbmV0d29ya1xuICAgIGUuYXN5bmNRdWV1ZS5lbnF1ZXVlUmV0cnlhYmxlKChhc3luYyAoKSA9PiB7XG4gICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlJlbW90ZVN0b3JlXCIsIFwiUmV0cnlpbmcgSW5kZXhlZERCIGFjY2Vzc1wiKSwgYXdhaXQgbigpLCBlLk1fLmRlbGV0ZSgxIC8qIE9mZmxpbmVDYXVzZS5JbmRleGVkRGJGYWlsZWQgKi8pLCBcbiAgICAgICAgYXdhaXQgX19QUklWQVRFX2VuYWJsZU5ldHdvcmtJbnRlcm5hbChlKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgYG9wYC4gSWYgYG9wYCBmYWlscywgdGFrZXMgdGhlIG5ldHdvcmsgb2ZmbGluZSB1bnRpbCBgb3BgXG4gKiBzdWNjZWVkcy4gUmV0dXJucyBhZnRlciB0aGUgZmlyc3QgYXR0ZW1wdC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZXhlY3V0ZVdpdGhSZWNvdmVyeShlLCB0KSB7XG4gICAgcmV0dXJuIHQoKS5jYXRjaCgobiA9PiBfX1BSSVZBVEVfZGlzYWJsZU5ldHdvcmtVbnRpbFJlY292ZXJ5KGUsIG4sIHQpKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9maWxsV3JpdGVQaXBlbGluZShlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSksIG4gPSBfX1BSSVZBVEVfZW5zdXJlV3JpdGVTdHJlYW0odCk7XG4gICAgbGV0IHIgPSB0LnZfLmxlbmd0aCA+IDAgPyB0LnZfW3Qudl8ubGVuZ3RoIC0gMV0uYmF0Y2hJZCA6IC0xO1xuICAgIGZvciAoO19fUFJJVkFURV9jYW5BZGRUb1dyaXRlUGlwZWxpbmUodCk7ICkgdHJ5IHtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlR2V0TmV4dE11dGF0aW9uQmF0Y2godC5sb2NhbFN0b3JlLCByKTtcbiAgICAgICAgaWYgKG51bGwgPT09IGUpIHtcbiAgICAgICAgICAgIDAgPT09IHQudl8ubGVuZ3RoICYmIG4ubl8oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHIgPSBlLmJhdGNoSWQsIF9fUFJJVkFURV9hZGRUb1dyaXRlUGlwZWxpbmUodCwgZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhd2FpdCBfX1BSSVZBVEVfZGlzYWJsZU5ldHdvcmtVbnRpbFJlY292ZXJ5KHQsIGUpO1xuICAgIH1cbiAgICBfX1BSSVZBVEVfc2hvdWxkU3RhcnRXcml0ZVN0cmVhbSh0KSAmJiBfX1BSSVZBVEVfc3RhcnRXcml0ZVN0cmVhbSh0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgd2UgY2FuIGFkZCB0byB0aGUgd3JpdGUgcGlwZWxpbmUgKGkuZS4gdGhlIG5ldHdvcmsgaXNcbiAqIGVuYWJsZWQgYW5kIHRoZSB3cml0ZSBwaXBlbGluZSBpcyBub3QgZnVsbCkuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2NhbkFkZFRvV3JpdGVQaXBlbGluZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9jYW5Vc2VOZXR3b3JrKGUpICYmIGUudl8ubGVuZ3RoIDwgMTA7XG59XG5cbi8qKlxuICogUXVldWVzIGFkZGl0aW9uYWwgd3JpdGVzIHRvIGJlIHNlbnQgdG8gdGhlIHdyaXRlIHN0cmVhbSwgc2VuZGluZyB0aGVtXG4gKiBpbW1lZGlhdGVseSBpZiB0aGUgd3JpdGUgc3RyZWFtIGlzIGVzdGFibGlzaGVkLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9hZGRUb1dyaXRlUGlwZWxpbmUoZSwgdCkge1xuICAgIGUudl8ucHVzaCh0KTtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2Vuc3VyZVdyaXRlU3RyZWFtKGUpO1xuICAgIG4uWG8oKSAmJiBuLkVfICYmIG4uZF8odC5tdXRhdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfc2hvdWxkU3RhcnRXcml0ZVN0cmVhbShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9jYW5Vc2VOZXR3b3JrKGUpICYmICFfX1BSSVZBVEVfZW5zdXJlV3JpdGVTdHJlYW0oZSkuWm8oKSAmJiBlLnZfLmxlbmd0aCA+IDA7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9zdGFydFdyaXRlU3RyZWFtKGUpIHtcbiAgICBfX1BSSVZBVEVfZW5zdXJlV3JpdGVTdHJlYW0oZSkuc3RhcnQoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX29uV3JpdGVTdHJlYW1PcGVuKGUpIHtcbiAgICBfX1BSSVZBVEVfZW5zdXJlV3JpdGVTdHJlYW0oZSkuVl8oKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX29uV3JpdGVIYW5kc2hha2VDb21wbGV0ZShlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9lbnN1cmVXcml0ZVN0cmVhbShlKTtcbiAgICAvLyBTZW5kIHRoZSB3cml0ZSBwaXBlbGluZSBub3cgdGhhdCB0aGUgc3RyZWFtIGlzIGVzdGFibGlzaGVkLlxuICAgICAgICBmb3IgKGNvbnN0IG4gb2YgZS52XykgdC5kXyhuLm11dGF0aW9ucyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9vbk11dGF0aW9uUmVzdWx0KGUsIHQsIG4pIHtcbiAgICBjb25zdCByID0gZS52Xy5zaGlmdCgpLCBpID0gTXV0YXRpb25CYXRjaFJlc3VsdC5mcm9tKHIsIHQsIG4pO1xuICAgIGF3YWl0IF9fUFJJVkFURV9leGVjdXRlV2l0aFJlY292ZXJ5KGUsICgoKSA9PiBlLnJlbW90ZVN5bmNlci5hcHBseVN1Y2Nlc3NmdWxXcml0ZShpKSkpLCBcbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2l0aCB0aGUgY29tcGxldGlvbiBvZiB0aGlzIG11dGF0aW9uIGFub3RoZXJcbiAgICAvLyBzbG90IGhhcyBmcmVlZCB1cC5cbiAgICBhd2FpdCBfX1BSSVZBVEVfZmlsbFdyaXRlUGlwZWxpbmUoZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9vbldyaXRlU3RyZWFtQ2xvc2UoZSwgdCkge1xuICAgIC8vIElmIHRoZSB3cml0ZSBzdHJlYW0gY2xvc2VkIGFmdGVyIHRoZSB3cml0ZSBoYW5kc2hha2UgY29tcGxldGVzLCBhIHdyaXRlXG4gICAgLy8gb3BlcmF0aW9uIGZhaWxlZCBhbmQgd2UgZmFpbCB0aGUgcGVuZGluZyBvcGVyYXRpb24uXG4gICAgdCAmJiBfX1BSSVZBVEVfZW5zdXJlV3JpdGVTdHJlYW0oZSkuRV8gJiYgXG4gICAgLy8gVGhpcyBlcnJvciBhZmZlY3RzIHRoZSBhY3R1YWwgd3JpdGUuXG4gICAgYXdhaXQgYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX2hhbmRsZVdyaXRlRXJyb3IoZSwgdCkge1xuICAgICAgICAvLyBPbmx5IGhhbmRsZSBwZXJtYW5lbnQgZXJyb3JzIGhlcmUuIElmIGl0J3MgdHJhbnNpZW50LCBqdXN0IGxldCB0aGUgcmV0cnlcbiAgICAgICAgLy8gbG9naWMga2ljayBpbi5cbiAgICAgICAgaWYgKGZ1bmN0aW9uIF9fUFJJVkFURV9pc1Blcm1hbmVudFdyaXRlRXJyb3IoZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9pc1Blcm1hbmVudEVycm9yKGUpICYmIGUgIT09IEMuQUJPUlRFRDtcbiAgICAgICAgfSh0LmNvZGUpKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHdhcyBhIHBlcm1hbmVudCBlcnJvciwgdGhlIHJlcXVlc3QgaXRzZWxmIHdhcyB0aGUgcHJvYmxlbVxuICAgICAgICAgICAgLy8gc28gaXQncyBub3QgZ29pbmcgdG8gc3VjY2VlZCBpZiB3ZSByZXNlbmQgaXQuXG4gICAgICAgICAgICBjb25zdCBuID0gZS52Xy5zaGlmdCgpO1xuICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlIGl0J3MgYWxzbyB1bmxpa2VseSB0aGF0IHRoZSBzZXJ2ZXIgaXRzZWxmIGlzIG1lbHRpbmdcbiAgICAgICAgICAgIC8vIGRvd24gLS0gdGhpcyB3YXMganVzdCBhIGJhZCByZXF1ZXN0IHNvIGluaGliaXQgYmFja29mZiBvbiB0aGUgbmV4dFxuICAgICAgICAgICAgLy8gcmVzdGFydC5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9fUFJJVkFURV9lbnN1cmVXcml0ZVN0cmVhbShlKS50XygpLCBhd2FpdCBfX1BSSVZBVEVfZXhlY3V0ZVdpdGhSZWNvdmVyeShlLCAoKCkgPT4gZS5yZW1vdGVTeW5jZXIucmVqZWN0RmFpbGVkV3JpdGUobi5iYXRjaElkLCB0KSkpLCBcbiAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3aXRoIHRoZSBjb21wbGV0aW9uIG9mIHRoaXMgbXV0YXRpb25cbiAgICAgICAgICAgIC8vIGFub3RoZXIgc2xvdCBoYXMgZnJlZWQgdXAuXG4gICAgICAgICAgICBhd2FpdCBfX1BSSVZBVEVfZmlsbFdyaXRlUGlwZWxpbmUoZSk7XG4gICAgICAgIH1cbiAgICB9KGUsIHQpLCBcbiAgICAvLyBUaGUgd3JpdGUgc3RyZWFtIG1pZ2h0IGhhdmUgYmVlbiBzdGFydGVkIGJ5IHJlZmlsbGluZyB0aGUgd3JpdGVcbiAgICAvLyBwaXBlbGluZSBmb3IgZmFpbGVkIHdyaXRlc1xuICAgIF9fUFJJVkFURV9zaG91bGRTdGFydFdyaXRlU3RyZWFtKGUpICYmIF9fUFJJVkFURV9zdGFydFdyaXRlU3RyZWFtKGUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfcmVtb3RlU3RvcmVIYW5kbGVDcmVkZW50aWFsQ2hhbmdlKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICBuLmFzeW5jUXVldWUudmVyaWZ5T3BlcmF0aW9uSW5Qcm9ncmVzcygpLCBfX1BSSVZBVEVfbG9nRGVidWcoXCJSZW1vdGVTdG9yZVwiLCBcIlJlbW90ZVN0b3JlIHJlY2VpdmVkIG5ldyBjcmVkZW50aWFsc1wiKTtcbiAgICBjb25zdCByID0gX19QUklWQVRFX2NhblVzZU5ldHdvcmsobik7XG4gICAgLy8gVGVhciBkb3duIGFuZCByZS1jcmVhdGUgb3VyIG5ldHdvcmsgc3RyZWFtcy4gVGhpcyB3aWxsIGVuc3VyZSB3ZSBnZXQgYVxuICAgIC8vIGZyZXNoIGF1dGggdG9rZW4gZm9yIHRoZSBuZXcgdXNlciBhbmQgcmUtZmlsbCB0aGUgd3JpdGUgcGlwZWxpbmUgd2l0aFxuICAgIC8vIG5ldyBtdXRhdGlvbnMgZnJvbSB0aGUgTG9jYWxTdG9yZSAoc2luY2UgbXV0YXRpb25zIGFyZSBwZXItdXNlcikuXG4gICAgICAgIG4uTV8uYWRkKDMgLyogT2ZmbGluZUNhdXNlLkNyZWRlbnRpYWxDaGFuZ2UgKi8pLCBhd2FpdCBfX1BSSVZBVEVfZGlzYWJsZU5ldHdvcmtJbnRlcm5hbChuKSwgXG4gICAgciAmJiBcbiAgICAvLyBEb24ndCBzZXQgdGhlIG5ldHdvcmsgc3RhdHVzIHRvIFVua25vd24gaWYgd2UgYXJlIG9mZmxpbmUuXG4gICAgbi5OXy5zZXQoXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLyksIGF3YWl0IG4ucmVtb3RlU3luY2VyLmhhbmRsZUNyZWRlbnRpYWxDaGFuZ2UodCksIFxuICAgIG4uTV8uZGVsZXRlKDMgLyogT2ZmbGluZUNhdXNlLkNyZWRlbnRpYWxDaGFuZ2UgKi8pLCBhd2FpdCBfX1BSSVZBVEVfZW5hYmxlTmV0d29ya0ludGVybmFsKG4pO1xufVxuXG4vKipcbiAqIFRvZ2dsZXMgdGhlIG5ldHdvcmsgc3RhdGUgd2hlbiB0aGUgY2xpZW50IGdhaW5zIG9yIGxvc2VzIGl0cyBwcmltYXJ5IGxlYXNlLlxuICovIGFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9yZW1vdGVTdG9yZUFwcGx5UHJpbWFyeVN0YXRlKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICB0ID8gKG4uTV8uZGVsZXRlKDIgLyogT2ZmbGluZUNhdXNlLklzU2Vjb25kYXJ5ICovKSwgYXdhaXQgX19QUklWQVRFX2VuYWJsZU5ldHdvcmtJbnRlcm5hbChuKSkgOiB0IHx8IChuLk1fLmFkZCgyIC8qIE9mZmxpbmVDYXVzZS5Jc1NlY29uZGFyeSAqLyksIFxuICAgIGF3YWl0IF9fUFJJVkFURV9kaXNhYmxlTmV0d29ya0ludGVybmFsKG4pLCBuLk5fLnNldChcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKSk7XG59XG5cbi8qKlxuICogSWYgbm90IHlldCBpbml0aWFsaXplZCwgcmVnaXN0ZXJzIHRoZSBXYXRjaFN0cmVhbSBhbmQgaXRzIG5ldHdvcmsgc3RhdGVcbiAqIGNhbGxiYWNrIHdpdGggYHJlbW90ZVN0b3JlSW1wbGAuIFJldHVybnMgdGhlIGV4aXN0aW5nIHN0cmVhbSBpZiBvbmUgaXNcbiAqIGFscmVhZHkgYXZhaWxhYmxlLlxuICpcbiAqIFBPUlRJTkcgTk9URTogT24gaU9TIGFuZCBBbmRyb2lkLCB0aGUgV2F0Y2hTdHJlYW0gZ2V0cyByZWdpc3RlcmVkIG9uIHN0YXJ0dXAuXG4gKiBUaGlzIGlzIG5vdCBkb25lIG9uIFdlYiB0byBhbGxvdyBpdCB0byBiZSB0cmVlLXNoYWtlbi5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZW5zdXJlV2F0Y2hTdHJlYW0oZSkge1xuICAgIHJldHVybiBlLkJfIHx8IChcbiAgICAvLyBDcmVhdGUgc3RyZWFtIChidXQgbm90ZSB0aGF0IGl0IGlzIG5vdCBzdGFydGVkIHlldCkuXG4gICAgZS5CXyA9IGZ1bmN0aW9uIF9fUFJJVkFURV9uZXdQZXJzaXN0ZW50V2F0Y2hTdHJlYW0oZSwgdCwgbikge1xuICAgICAgICBjb25zdCByID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICAgICAgcmV0dXJuIHIuZl8oKSwgbmV3IF9fUFJJVkFURV9QZXJzaXN0ZW50TGlzdGVuU3RyZWFtKHQsIHIuY29ubmVjdGlvbiwgci5hdXRoQ3JlZGVudGlhbHMsIHIuYXBwQ2hlY2tDcmVkZW50aWFscywgci5zZXJpYWxpemVyLCBuKTtcbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gKGUuZGF0YXN0b3JlLCBlLmFzeW5jUXVldWUsIHtcbiAgICAgICAgUG86IF9fUFJJVkFURV9vbldhdGNoU3RyZWFtQ29ubmVjdGVkLmJpbmQobnVsbCwgZSksXG4gICAgICAgIFRvOiBfX1BSSVZBVEVfb25XYXRjaFN0cmVhbU9wZW4uYmluZChudWxsLCBlKSxcbiAgICAgICAgQW86IF9fUFJJVkFURV9vbldhdGNoU3RyZWFtQ2xvc2UuYmluZChudWxsLCBlKSxcbiAgICAgICAgaF86IF9fUFJJVkFURV9vbldhdGNoU3RyZWFtQ2hhbmdlLmJpbmQobnVsbCwgZSlcbiAgICB9KSwgZS54Xy5wdXNoKChhc3luYyB0ID0+IHtcbiAgICAgICAgdCA/IChlLkJfLnRfKCksIF9fUFJJVkFURV9zaG91bGRTdGFydFdhdGNoU3RyZWFtKGUpID8gX19QUklWQVRFX3N0YXJ0V2F0Y2hTdHJlYW0oZSkgOiBlLk5fLnNldChcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKSkgOiAoYXdhaXQgZS5CXy5zdG9wKCksIFxuICAgICAgICBfX1BSSVZBVEVfY2xlYW5VcFdhdGNoU3RyZWFtU3RhdGUoZSkpO1xuICAgIH0pKSksIGUuQl87XG59XG5cbi8qKlxuICogSWYgbm90IHlldCBpbml0aWFsaXplZCwgcmVnaXN0ZXJzIHRoZSBXcml0ZVN0cmVhbSBhbmQgaXRzIG5ldHdvcmsgc3RhdGVcbiAqIGNhbGxiYWNrIHdpdGggYHJlbW90ZVN0b3JlSW1wbGAuIFJldHVybnMgdGhlIGV4aXN0aW5nIHN0cmVhbSBpZiBvbmUgaXNcbiAqIGFscmVhZHkgYXZhaWxhYmxlLlxuICpcbiAqIFBPUlRJTkcgTk9URTogT24gaU9TIGFuZCBBbmRyb2lkLCB0aGUgV3JpdGVTdHJlYW0gZ2V0cyByZWdpc3RlcmVkIG9uIHN0YXJ0dXAuXG4gKiBUaGlzIGlzIG5vdCBkb25lIG9uIFdlYiB0byBhbGxvdyBpdCB0byBiZSB0cmVlLXNoYWtlbi5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZW5zdXJlV3JpdGVTdHJlYW0oZSkge1xuICAgIHJldHVybiBlLmtfIHx8IChcbiAgICAvLyBDcmVhdGUgc3RyZWFtIChidXQgbm90ZSB0aGF0IGl0IGlzIG5vdCBzdGFydGVkIHlldCkuXG4gICAgZS5rXyA9IGZ1bmN0aW9uIF9fUFJJVkFURV9uZXdQZXJzaXN0ZW50V3JpdGVTdHJlYW0oZSwgdCwgbikge1xuICAgICAgICBjb25zdCByID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICAgICAgcmV0dXJuIHIuZl8oKSwgbmV3IF9fUFJJVkFURV9QZXJzaXN0ZW50V3JpdGVTdHJlYW0odCwgci5jb25uZWN0aW9uLCByLmF1dGhDcmVkZW50aWFscywgci5hcHBDaGVja0NyZWRlbnRpYWxzLCByLnNlcmlhbGl6ZXIsIG4pO1xuICAgIH0oZS5kYXRhc3RvcmUsIGUuYXN5bmNRdWV1ZSwge1xuICAgICAgICBQbzogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksXG4gICAgICAgIFRvOiBfX1BSSVZBVEVfb25Xcml0ZVN0cmVhbU9wZW4uYmluZChudWxsLCBlKSxcbiAgICAgICAgQW86IF9fUFJJVkFURV9vbldyaXRlU3RyZWFtQ2xvc2UuYmluZChudWxsLCBlKSxcbiAgICAgICAgUl86IF9fUFJJVkFURV9vbldyaXRlSGFuZHNoYWtlQ29tcGxldGUuYmluZChudWxsLCBlKSxcbiAgICAgICAgQV86IF9fUFJJVkFURV9vbk11dGF0aW9uUmVzdWx0LmJpbmQobnVsbCwgZSlcbiAgICB9KSwgZS54Xy5wdXNoKChhc3luYyB0ID0+IHtcbiAgICAgICAgdCA/IChlLmtfLnRfKCksIFxuICAgICAgICAvLyBUaGlzIHdpbGwgc3RhcnQgdGhlIHdyaXRlIHN0cmVhbSBpZiBuZWNlc3NhcnkuXG4gICAgICAgIGF3YWl0IF9fUFJJVkFURV9maWxsV3JpdGVQaXBlbGluZShlKSkgOiAoYXdhaXQgZS5rXy5zdG9wKCksIGUudl8ubGVuZ3RoID4gMCAmJiAoX19QUklWQVRFX2xvZ0RlYnVnKFwiUmVtb3RlU3RvcmVcIiwgYFN0b3BwaW5nIHdyaXRlIHN0cmVhbSB3aXRoICR7ZS52Xy5sZW5ndGh9IHBlbmRpbmcgd3JpdGVzYCksIFxuICAgICAgICBlLnZfID0gW10pKTtcbiAgICB9KSkpLCBlLmtfO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIG9wZXJhdGlvbiBzY2hlZHVsZWQgdG8gYmUgcnVuIGluIHRoZSBmdXR1cmUgb24gYW4gQXN5bmNRdWV1ZS5cbiAqXG4gKiBJdCBpcyBjcmVhdGVkIHZpYSBEZWxheWVkT3BlcmF0aW9uLmNyZWF0ZUFuZFNjaGVkdWxlKCkuXG4gKlxuICogU3VwcG9ydHMgY2FuY2VsbGF0aW9uICh2aWEgY2FuY2VsKCkpIGFuZCBlYXJseSBleGVjdXRpb24gKHZpYSBza2lwRGVsYXkoKSkuXG4gKlxuICogTm90ZTogV2UgaW1wbGVtZW50IGBQcm9taXNlTGlrZWAgaW5zdGVhZCBvZiBgUHJvbWlzZWAsIGFzIHRoZSBgUHJvbWlzZWAgdHlwZVxuICogaW4gbmV3ZXIgdmVyc2lvbnMgb2YgVHlwZVNjcmlwdCBkZWZpbmVzIGBmaW5hbGx5YCwgd2hpY2ggaXMgbm90IGF2YWlsYWJsZSBpblxuICogSUUuXG4gKi9cbmNsYXNzIERlbGF5ZWRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgdGhpcy5hc3luY1F1ZXVlID0gZSwgdGhpcy50aW1lcklkID0gdCwgdGhpcy50YXJnZXRUaW1lTXMgPSBuLCB0aGlzLm9wID0gciwgdGhpcy5yZW1vdmFsQ2FsbGJhY2sgPSBpLCBcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IG5ldyBfX1BSSVZBVEVfRGVmZXJyZWQsIHRoaXMudGhlbiA9IHRoaXMuZGVmZXJyZWQucHJvbWlzZS50aGVuLmJpbmQodGhpcy5kZWZlcnJlZC5wcm9taXNlKSwgXG4gICAgICAgIC8vIEl0J3Mgbm9ybWFsIGZvciB0aGUgZGVmZXJyZWQgcHJvbWlzZSB0byBiZSBjYW5jZWxlZCAoZHVlIHRvIGNhbmNlbGxhdGlvbilcbiAgICAgICAgLy8gYW5kIHNvIHdlIGF0dGFjaCBhIGR1bW15IGNhdGNoIGNhbGxiYWNrIHRvIGF2b2lkXG4gICAgICAgIC8vICdVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uV2FybmluZycgbG9nIHNwYW0uXG4gICAgICAgIHRoaXMuZGVmZXJyZWQucHJvbWlzZS5jYXRjaCgoZSA9PiB7fSkpO1xuICAgIH1cbiAgICBnZXQgcHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIERlbGF5ZWRPcGVyYXRpb24gdGhhdCBoYXMgYmVlbiBzY2hlZHVsZWQgdG8gYmVcbiAgICAgKiBleGVjdXRlZCBvbiB0aGUgcHJvdmlkZWQgYXN5bmNRdWV1ZSBhZnRlciB0aGUgcHJvdmlkZWQgZGVsYXlNcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhc3luY1F1ZXVlIC0gVGhlIHF1ZXVlIHRvIHNjaGVkdWxlIHRoZSBvcGVyYXRpb24gb24uXG4gICAgICogQHBhcmFtIGlkIC0gQSBUaW1lciBJRCBpZGVudGlmeWluZyB0aGUgdHlwZSBvZiBvcGVyYXRpb24gdGhpcyBpcy5cbiAgICAgKiBAcGFyYW0gZGVsYXlNcyAtIFRoZSBkZWxheSAobXMpIGJlZm9yZSB0aGUgb3BlcmF0aW9uIHNob3VsZCBiZSBzY2hlZHVsZWQuXG4gICAgICogQHBhcmFtIG9wIC0gVGhlIG9wZXJhdGlvbiB0byBydW4uXG4gICAgICogQHBhcmFtIHJlbW92YWxDYWxsYmFjayAtIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHN5bmNocm9ub3VzbHkgb25jZSB0aGVcbiAgICAgKiAgIG9wZXJhdGlvbiBpcyBleGVjdXRlZCBvciBjYW5jZWxlZCwgbm90aWZ5aW5nIHRoZSBBc3luY1F1ZXVlIHRvIHJlbW92ZSBpdFxuICAgICAqICAgZnJvbSBpdHMgZGVsYXllZE9wZXJhdGlvbnMgbGlzdC5cbiAgICAgKiAgIFBPUlRJTkcgTk9URTogVGhpcyBleGlzdHMgdG8gcHJldmVudCBtYWtpbmcgcmVtb3ZlRGVsYXllZE9wZXJhdGlvbigpIGFuZFxuICAgICAqICAgdGhlIERlbGF5ZWRPcGVyYXRpb24gY2xhc3MgcHVibGljLlxuICAgICAqLyAgICBzdGF0aWMgY3JlYXRlQW5kU2NoZWR1bGUoZSwgdCwgbiwgciwgaSkge1xuICAgICAgICBjb25zdCBzID0gRGF0ZS5ub3coKSArIG4sIG8gPSBuZXcgRGVsYXllZE9wZXJhdGlvbihlLCB0LCBzLCByLCBpKTtcbiAgICAgICAgcmV0dXJuIG8uc3RhcnQobiksIG87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgdGltZXIuIFRoaXMgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IGFmdGVyIGNvbnN0cnVjdGlvbiBieVxuICAgICAqIGNyZWF0ZUFuZFNjaGVkdWxlKCkuXG4gICAgICovICAgIHN0YXJ0KGUpIHtcbiAgICAgICAgdGhpcy50aW1lckhhbmRsZSA9IHNldFRpbWVvdXQoKCgpID0+IHRoaXMuaGFuZGxlRGVsYXlFbGFwc2VkKCkpLCBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUXVldWVzIHRoZSBvcGVyYXRpb24gdG8gcnVuIGltbWVkaWF0ZWx5IChpZiBpdCBoYXNuJ3QgYWxyZWFkeSBiZWVuIHJ1biBvclxuICAgICAqIGNhbmNlbGVkKS5cbiAgICAgKi8gICAgc2tpcERlbGF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVEZWxheUVsYXBzZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgb3BlcmF0aW9uIGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW4gZXhlY3V0ZWQgb3IgY2FuY2VsZWQuIFRoZVxuICAgICAqIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZC5cbiAgICAgKlxuICAgICAqIEFzIGxvbmcgYXMgdGhlIG9wZXJhdGlvbiBoYXMgbm90IHlldCBiZWVuIHJ1biwgY2FsbGluZyBjYW5jZWwoKSBwcm92aWRlcyBhXG4gICAgICogZ3VhcmFudGVlIHRoYXQgdGhlIG9wZXJhdGlvbiB3aWxsIG5vdCBiZSBydW4uXG4gICAgICovICAgIGNhbmNlbChlKSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMudGltZXJIYW5kbGUgJiYgKHRoaXMuY2xlYXJUaW1lb3V0KCksIHRoaXMuZGVmZXJyZWQucmVqZWN0KG5ldyBGaXJlc3RvcmVFcnJvcihDLkNBTkNFTExFRCwgXCJPcGVyYXRpb24gY2FuY2VsbGVkXCIgKyAoZSA/IFwiOiBcIiArIGUgOiBcIlwiKSkpKTtcbiAgICB9XG4gICAgaGFuZGxlRGVsYXlFbGFwc2VkKCkge1xuICAgICAgICB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoKCkgPT4gbnVsbCAhPT0gdGhpcy50aW1lckhhbmRsZSA/ICh0aGlzLmNsZWFyVGltZW91dCgpLCBcbiAgICAgICAgdGhpcy5vcCgpLnRoZW4oKGUgPT4gdGhpcy5kZWZlcnJlZC5yZXNvbHZlKGUpKSkpIDogUHJvbWlzZS5yZXNvbHZlKCkpKTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLnRpbWVySGFuZGxlICYmICh0aGlzLnJlbW92YWxDYWxsYmFjayh0aGlzKSwgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJIYW5kbGUpLCBcbiAgICAgICAgdGhpcy50aW1lckhhbmRsZSA9IG51bGwpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgRmlyZXN0b3JlRXJyb3IgdGhhdCBjYW4gYmUgc3VyZmFjZWQgdG8gdGhlIHVzZXIgaWYgdGhlIHByb3ZpZGVkXG4gKiBlcnJvciBpcyBhbiBJbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yLiBSZS10aHJvd3MgdGhlIGVycm9yIG90aGVyd2lzZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfd3JhcEluVXNlckVycm9ySWZSZWNvdmVyYWJsZShlLCB0KSB7XG4gICAgaWYgKF9fUFJJVkFURV9sb2dFcnJvcihcIkFzeW5jUXVldWVcIiwgYCR7dH06ICR7ZX1gKSwgX19QUklWQVRFX2lzSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvcihlKSkgcmV0dXJuIG5ldyBGaXJlc3RvcmVFcnJvcihDLlVOQVZBSUxBQkxFLCBgJHt0fTogJHtlfWApO1xuICAgIHRocm93IGU7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERvY3VtZW50U2V0IGlzIGFuIGltbXV0YWJsZSAoY29weS1vbi13cml0ZSkgY29sbGVjdGlvbiB0aGF0IGhvbGRzIGRvY3VtZW50c1xuICogaW4gb3JkZXIgc3BlY2lmaWVkIGJ5IHRoZSBwcm92aWRlZCBjb21wYXJhdG9yLiBXZSBhbHdheXMgYWRkIGEgZG9jdW1lbnQga2V5XG4gKiBjb21wYXJhdG9yIG9uIHRvcCBvZiB3aGF0IGlzIHByb3ZpZGVkIHRvIGd1YXJhbnRlZSBkb2N1bWVudCBlcXVhbGl0eSBiYXNlZCBvblxuICogdGhlIGtleS5cbiAqLyBjbGFzcyBEb2N1bWVudFNldCB7XG4gICAgLyoqIFRoZSBkZWZhdWx0IG9yZGVyaW5nIGlzIGJ5IGtleSBpZiB0aGUgY29tcGFyYXRvciBpcyBvbWl0dGVkICovXG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICAvLyBXZSBhcmUgYWRkaW5nIGRvY3VtZW50IGtleSBjb21wYXJhdG9yIHRvIHRoZSBlbmQgYXMgaXQncyB0aGUgb25seVxuICAgICAgICAvLyBndWFyYW50ZWVkIHVuaXF1ZSBwcm9wZXJ0eSBvZiBhIGRvY3VtZW50LlxuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSBlID8gKHQsIG4pID0+IGUodCwgbikgfHwgRG9jdW1lbnRLZXkuY29tcGFyYXRvcih0LmtleSwgbi5rZXkpIDogKGUsIHQpID0+IERvY3VtZW50S2V5LmNvbXBhcmF0b3IoZS5rZXksIHQua2V5KSwgXG4gICAgICAgIHRoaXMua2V5ZWRNYXAgPSBkb2N1bWVudE1hcCgpLCB0aGlzLnNvcnRlZFNldCA9IG5ldyBTb3J0ZWRNYXAodGhpcy5jb21wYXJhdG9yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlbXB0eSBjb3B5IG9mIHRoZSBleGlzdGluZyBEb2N1bWVudFNldCwgdXNpbmcgdGhlIHNhbWVcbiAgICAgKiBjb21wYXJhdG9yLlxuICAgICAqLyAgICBzdGF0aWMgZW1wdHlTZXQoZSkge1xuICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50U2V0KGUuY29tcGFyYXRvcik7XG4gICAgfVxuICAgIGhhcyhlKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9IHRoaXMua2V5ZWRNYXAuZ2V0KGUpO1xuICAgIH1cbiAgICBnZXQoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXllZE1hcC5nZXQoZSk7XG4gICAgfVxuICAgIGZpcnN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRTZXQubWluS2V5KCk7XG4gICAgfVxuICAgIGxhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRlZFNldC5tYXhLZXkoKTtcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydGVkU2V0LmlzRW1wdHkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIHByb3ZpZGVkIGtleSBpbiB0aGUgZG9jdW1lbnQgc2V0LCBvciAtMSBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCBrZXkgaXMgbm90IHByZXNlbnQgaW4gdGhlIHNldDtcbiAgICAgKi8gICAgaW5kZXhPZihlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmtleWVkTWFwLmdldChlKTtcbiAgICAgICAgcmV0dXJuIHQgPyB0aGlzLnNvcnRlZFNldC5pbmRleE9mKHQpIDogLTE7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRTZXQuc2l6ZTtcbiAgICB9XG4gICAgLyoqIEl0ZXJhdGVzIGRvY3VtZW50cyBpbiBvcmRlciBkZWZpbmVkIGJ5IFwiY29tcGFyYXRvclwiICovICAgIGZvckVhY2goZSkge1xuICAgICAgICB0aGlzLnNvcnRlZFNldC5pbm9yZGVyVHJhdmVyc2FsKCgodCwgbikgPT4gKGUodCksICExKSkpO1xuICAgIH1cbiAgICAvKiogSW5zZXJ0cyBvciB1cGRhdGVzIGEgZG9jdW1lbnQgd2l0aCB0aGUgc2FtZSBrZXkgKi8gICAgYWRkKGUpIHtcbiAgICAgICAgLy8gRmlyc3QgcmVtb3ZlIHRoZSBlbGVtZW50IGlmIHdlIGhhdmUgaXQuXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmRlbGV0ZShlLmtleSk7XG4gICAgICAgIHJldHVybiB0LmNvcHkodC5rZXllZE1hcC5pbnNlcnQoZS5rZXksIGUpLCB0LnNvcnRlZFNldC5pbnNlcnQoZSwgbnVsbCkpO1xuICAgIH1cbiAgICAvKiogRGVsZXRlcyBhIGRvY3VtZW50IHdpdGggYSBnaXZlbiBrZXkgKi8gICAgZGVsZXRlKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0KGUpO1xuICAgICAgICByZXR1cm4gdCA/IHRoaXMuY29weSh0aGlzLmtleWVkTWFwLnJlbW92ZShlKSwgdGhpcy5zb3J0ZWRTZXQucmVtb3ZlKHQpKSA6IHRoaXM7XG4gICAgfVxuICAgIGlzRXF1YWwoZSkge1xuICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgRG9jdW1lbnRTZXQpKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLnNpemUgIT09IGUuc2l6ZSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5zb3J0ZWRTZXQuZ2V0SXRlcmF0b3IoKSwgbiA9IGUuc29ydGVkU2V0LmdldEl0ZXJhdG9yKCk7XG4gICAgICAgIGZvciAoO3QuaGFzTmV4dCgpOyApIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmdldE5leHQoKS5rZXksIHIgPSBuLmdldE5leHQoKS5rZXk7XG4gICAgICAgICAgICBpZiAoIWUuaXNFcXVhbChyKSkgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBlLnB1c2godC50b1N0cmluZygpKTtcbiAgICAgICAgfSkpLCAwID09PSBlLmxlbmd0aCA/IFwiRG9jdW1lbnRTZXQgKClcIiA6IFwiRG9jdW1lbnRTZXQgKFxcbiAgXCIgKyBlLmpvaW4oXCIgIFxcblwiKSArIFwiXFxuKVwiO1xuICAgIH1cbiAgICBjb3B5KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBEb2N1bWVudFNldDtcbiAgICAgICAgcmV0dXJuIG4uY29tcGFyYXRvciA9IHRoaXMuY29tcGFyYXRvciwgbi5rZXllZE1hcCA9IGUsIG4uc29ydGVkU2V0ID0gdCwgbjtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERvY3VtZW50Q2hhbmdlU2V0IGtlZXBzIHRyYWNrIG9mIGEgc2V0IG9mIGNoYW5nZXMgdG8gZG9jcyBpbiBhIHF1ZXJ5LCBtZXJnaW5nXG4gKiBkdXBsaWNhdGUgZXZlbnRzIGZvciB0aGUgc2FtZSBkb2MuXG4gKi8gY2xhc3MgX19QUklWQVRFX0RvY3VtZW50Q2hhbmdlU2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5xXyA9IG5ldyBTb3J0ZWRNYXAoRG9jdW1lbnRLZXkuY29tcGFyYXRvcik7XG4gICAgfVxuICAgIHRyYWNrKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IGUuZG9jLmtleSwgbiA9IHRoaXMucV8uZ2V0KHQpO1xuICAgICAgICBuID8gXG4gICAgICAgIC8vIE1lcmdlIHRoZSBuZXcgY2hhbmdlIHdpdGggdGhlIGV4aXN0aW5nIGNoYW5nZS5cbiAgICAgICAgMCAvKiBDaGFuZ2VUeXBlLkFkZGVkICovICE9PSBlLnR5cGUgJiYgMyAvKiBDaGFuZ2VUeXBlLk1ldGFkYXRhICovID09PSBuLnR5cGUgPyB0aGlzLnFfID0gdGhpcy5xXy5pbnNlcnQodCwgZSkgOiAzIC8qIENoYW5nZVR5cGUuTWV0YWRhdGEgKi8gPT09IGUudHlwZSAmJiAxIC8qIENoYW5nZVR5cGUuUmVtb3ZlZCAqLyAhPT0gbi50eXBlID8gdGhpcy5xXyA9IHRoaXMucV8uaW5zZXJ0KHQsIHtcbiAgICAgICAgICAgIHR5cGU6IG4udHlwZSxcbiAgICAgICAgICAgIGRvYzogZS5kb2NcbiAgICAgICAgfSkgOiAyIC8qIENoYW5nZVR5cGUuTW9kaWZpZWQgKi8gPT09IGUudHlwZSAmJiAyIC8qIENoYW5nZVR5cGUuTW9kaWZpZWQgKi8gPT09IG4udHlwZSA/IHRoaXMucV8gPSB0aGlzLnFfLmluc2VydCh0LCB7XG4gICAgICAgICAgICB0eXBlOiAyIC8qIENoYW5nZVR5cGUuTW9kaWZpZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiBlLmRvY1xuICAgICAgICB9KSA6IDIgLyogQ2hhbmdlVHlwZS5Nb2RpZmllZCAqLyA9PT0gZS50eXBlICYmIDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyA9PT0gbi50eXBlID8gdGhpcy5xXyA9IHRoaXMucV8uaW5zZXJ0KHQsIHtcbiAgICAgICAgICAgIHR5cGU6IDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyAsXG4gICAgICAgICAgICBkb2M6IGUuZG9jXG4gICAgICAgIH0pIDogMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gPT09IGUudHlwZSAmJiAwIC8qIENoYW5nZVR5cGUuQWRkZWQgKi8gPT09IG4udHlwZSA/IHRoaXMucV8gPSB0aGlzLnFfLnJlbW92ZSh0KSA6IDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovID09PSBlLnR5cGUgJiYgMiAvKiBDaGFuZ2VUeXBlLk1vZGlmaWVkICovID09PSBuLnR5cGUgPyB0aGlzLnFfID0gdGhpcy5xXy5pbnNlcnQodCwge1xuICAgICAgICAgICAgdHlwZTogMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiBuLmRvY1xuICAgICAgICB9KSA6IDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyA9PT0gZS50eXBlICYmIDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovID09PSBuLnR5cGUgPyB0aGlzLnFfID0gdGhpcy5xXy5pbnNlcnQodCwge1xuICAgICAgICAgICAgdHlwZTogMiAvKiBDaGFuZ2VUeXBlLk1vZGlmaWVkICovICxcbiAgICAgICAgICAgIGRvYzogZS5kb2NcbiAgICAgICAgfSkgOiBcbiAgICAgICAgLy8gVGhpcyBpbmNsdWRlcyB0aGVzZSBjYXNlcywgd2hpY2ggZG9uJ3QgbWFrZSBzZW5zZTpcbiAgICAgICAgLy8gQWRkZWQtPkFkZGVkXG4gICAgICAgIC8vIFJlbW92ZWQtPlJlbW92ZWRcbiAgICAgICAgLy8gTW9kaWZpZWQtPkFkZGVkXG4gICAgICAgIC8vIFJlbW92ZWQtPk1vZGlmaWVkXG4gICAgICAgIC8vIE1ldGFkYXRhLT5BZGRlZFxuICAgICAgICAvLyBSZW1vdmVkLT5NZXRhZGF0YVxuICAgICAgICBmYWlsKCkgOiB0aGlzLnFfID0gdGhpcy5xXy5pbnNlcnQodCwgZSk7XG4gICAgfVxuICAgIFFfKCkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLnFfLmlub3JkZXJUcmF2ZXJzYWwoKCh0LCBuKSA9PiB7XG4gICAgICAgICAgICBlLnB1c2gobik7XG4gICAgICAgIH0pKSwgZTtcbiAgICB9XG59XG5cbmNsYXNzIFZpZXdTbmFwc2hvdCB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbiwgciwgaSwgcywgbywgXywgYSkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gZSwgdGhpcy5kb2NzID0gdCwgdGhpcy5vbGREb2NzID0gbiwgdGhpcy5kb2NDaGFuZ2VzID0gciwgdGhpcy5tdXRhdGVkS2V5cyA9IGksIFxuICAgICAgICB0aGlzLmZyb21DYWNoZSA9IHMsIHRoaXMuc3luY1N0YXRlQ2hhbmdlZCA9IG8sIHRoaXMuZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXMgPSBfLCBcbiAgICAgICAgdGhpcy5oYXNDYWNoZWRSZXN1bHRzID0gYTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSB2aWV3IHNuYXBzaG90IGFzIGlmIGFsbCBkb2N1bWVudHMgaW4gdGhlIHNuYXBzaG90IHdlcmUgYWRkZWQuICovICAgIHN0YXRpYyBmcm9tSW5pdGlhbERvY3VtZW50cyhlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICBzLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyAsXG4gICAgICAgICAgICAgICAgZG9jOiBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpLCBuZXcgVmlld1NuYXBzaG90KGUsIHQsIERvY3VtZW50U2V0LmVtcHR5U2V0KHQpLCBzLCBuLCByLCBcbiAgICAgICAgLyogc3luY1N0YXRlQ2hhbmdlZD0gKi8gITAsIFxuICAgICAgICAvKiBleGNsdWRlc01ldGFkYXRhQ2hhbmdlcz0gKi8gITEsIGkpO1xuICAgIH1cbiAgICBnZXQgaGFzUGVuZGluZ1dyaXRlcygpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLm11dGF0ZWRLZXlzLmlzRW1wdHkoKTtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIGlmICghKHRoaXMuZnJvbUNhY2hlID09PSBlLmZyb21DYWNoZSAmJiB0aGlzLmhhc0NhY2hlZFJlc3VsdHMgPT09IGUuaGFzQ2FjaGVkUmVzdWx0cyAmJiB0aGlzLnN5bmNTdGF0ZUNoYW5nZWQgPT09IGUuc3luY1N0YXRlQ2hhbmdlZCAmJiB0aGlzLm11dGF0ZWRLZXlzLmlzRXF1YWwoZS5tdXRhdGVkS2V5cykgJiYgX19QUklWQVRFX3F1ZXJ5RXF1YWxzKHRoaXMucXVlcnksIGUucXVlcnkpICYmIHRoaXMuZG9jcy5pc0VxdWFsKGUuZG9jcykgJiYgdGhpcy5vbGREb2NzLmlzRXF1YWwoZS5vbGREb2NzKSkpIHJldHVybiAhMTtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuZG9jQ2hhbmdlcywgbiA9IGUuZG9jQ2hhbmdlcztcbiAgICAgICAgaWYgKHQubGVuZ3RoICE9PSBuLmxlbmd0aCkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHQubGVuZ3RoOyBlKyspIGlmICh0W2VdLnR5cGUgIT09IG5bZV0udHlwZSB8fCAhdFtlXS5kb2MuaXNFcXVhbChuW2VdLmRvYykpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogSG9sZHMgdGhlIGxpc3RlbmVycyBhbmQgdGhlIGxhc3QgcmVjZWl2ZWQgVmlld1NuYXBzaG90IGZvciBhIHF1ZXJ5IGJlaW5nXG4gKiB0cmFja2VkIGJ5IEV2ZW50TWFuYWdlci5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfUXVlcnlMaXN0ZW5lcnNJbmZvIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5LXyA9IHZvaWQgMCwgdGhpcy5VXyA9IFtdO1xuICAgIH1cbiAgICAvLyBIZWxwZXIgbWV0aG9kcyB0aGF0IGNoZWNrcyBpZiB0aGUgcXVlcnkgaGFzIGxpc3RlbmVycyB0aGF0IGxpc3RlbmluZyB0byByZW1vdGUgc3RvcmVcbiAgICBXXygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVV8uc29tZSgoZSA9PiBlLkdfKCkpKTtcbiAgICB9XG59XG5cbmNsYXNzIF9fUFJJVkFURV9FdmVudE1hbmFnZXJJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gbmV3IE9iamVjdE1hcCgoZSA9PiBfX1BSSVZBVEVfY2Fub25pZnlRdWVyeShlKSksIF9fUFJJVkFURV9xdWVyeUVxdWFscyksIFxuICAgICAgICB0aGlzLm9ubGluZVN0YXRlID0gXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLyAsIHRoaXMuel8gPSBuZXcgU2V0O1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX2V2ZW50TWFuYWdlckxpc3RlbihlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgbGV0IHIgPSAzIC8qIExpc3RlbmVyU2V0dXBBY3Rpb24uTm9BY3Rpb25SZXF1aXJlZCAqLztcbiAgICBjb25zdCBpID0gdC5xdWVyeTtcbiAgICBsZXQgcyA9IG4ucXVlcmllcy5nZXQoaSk7XG4gICAgcyA/ICFzLldfKCkgJiYgdC5HXygpICYmIChcbiAgICAvLyBRdWVyeSBoYXMgYmVlbiBsaXN0ZW5pbmcgdG8gbG9jYWwgY2FjaGUsIGFuZCB0cmllcyB0byBhZGQgYSBuZXcgbGlzdGVuZXIgc291cmNlZCBmcm9tIHdhdGNoLlxuICAgIHIgPSAyIC8qIExpc3RlbmVyU2V0dXBBY3Rpb24uUmVxdWlyZVdhdGNoQ29ubmVjdGlvbk9ubHkgKi8pIDogKHMgPSBuZXcgX19QUklWQVRFX1F1ZXJ5TGlzdGVuZXJzSW5mbywgXG4gICAgciA9IHQuR18oKSA/IDAgLyogTGlzdGVuZXJTZXR1cEFjdGlvbi5Jbml0aWFsaXplTG9jYWxMaXN0ZW5BbmRSZXF1aXJlV2F0Y2hDb25uZWN0aW9uICovIDogMSAvKiBMaXN0ZW5lclNldHVwQWN0aW9uLkluaXRpYWxpemVMb2NhbExpc3Rlbk9ubHkgKi8pO1xuICAgIHRyeSB7XG4gICAgICAgIHN3aXRjaCAocikge1xuICAgICAgICAgIGNhc2UgMCAvKiBMaXN0ZW5lclNldHVwQWN0aW9uLkluaXRpYWxpemVMb2NhbExpc3RlbkFuZFJlcXVpcmVXYXRjaENvbm5lY3Rpb24gKi8gOlxuICAgICAgICAgICAgcy5LXyA9IGF3YWl0IG4ub25MaXN0ZW4oaSwgXG4gICAgICAgICAgICAvKiogZW5hYmxlUmVtb3RlTGlzdGVuPSAqLyAhMCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMSAvKiBMaXN0ZW5lclNldHVwQWN0aW9uLkluaXRpYWxpemVMb2NhbExpc3Rlbk9ubHkgKi8gOlxuICAgICAgICAgICAgcy5LXyA9IGF3YWl0IG4ub25MaXN0ZW4oaSwgXG4gICAgICAgICAgICAvKiogZW5hYmxlUmVtb3RlTGlzdGVuPSAqLyAhMSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMiAvKiBMaXN0ZW5lclNldHVwQWN0aW9uLlJlcXVpcmVXYXRjaENvbm5lY3Rpb25Pbmx5ICovIDpcbiAgICAgICAgICAgIGF3YWl0IG4ub25GaXJzdFJlbW90ZVN0b3JlTGlzdGVuKGkpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX3dyYXBJblVzZXJFcnJvcklmUmVjb3ZlcmFibGUoZSwgYEluaXRpYWxpemF0aW9uIG9mIHF1ZXJ5ICcke19fUFJJVkFURV9zdHJpbmdpZnlRdWVyeSh0LnF1ZXJ5KX0nIGZhaWxlZGApO1xuICAgICAgICByZXR1cm4gdm9pZCB0Lm9uRXJyb3Iobik7XG4gICAgfVxuICAgIGlmIChuLnF1ZXJpZXMuc2V0KGksIHMpLCBzLlVfLnB1c2godCksIFxuICAgIC8vIFJ1biBnbG9iYWwgc25hcHNob3QgbGlzdGVuZXJzIGlmIGEgY29uc2lzdGVudCBzbmFwc2hvdCBoYXMgYmVlbiBlbWl0dGVkLlxuICAgIHQual8obi5vbmxpbmVTdGF0ZSksIHMuS18pIHtcbiAgICAgICAgdC5IXyhzLktfKSAmJiBfX1BSSVZBVEVfcmFpc2VTbmFwc2hvdHNJblN5bmNFdmVudChuKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9ldmVudE1hbmFnZXJVbmxpc3RlbihlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSksIHIgPSB0LnF1ZXJ5O1xuICAgIGxldCBpID0gMyAvKiBMaXN0ZW5lclJlbW92YWxBY3Rpb24uTm9BY3Rpb25SZXF1aXJlZCAqLztcbiAgICBjb25zdCBzID0gbi5xdWVyaWVzLmdldChyKTtcbiAgICBpZiAocykge1xuICAgICAgICBjb25zdCBlID0gcy5VXy5pbmRleE9mKHQpO1xuICAgICAgICBlID49IDAgJiYgKHMuVV8uc3BsaWNlKGUsIDEpLCAwID09PSBzLlVfLmxlbmd0aCA/IGkgPSB0LkdfKCkgPyAwIC8qIExpc3RlbmVyUmVtb3ZhbEFjdGlvbi5UZXJtaW5hdGVMb2NhbExpc3RlbkFuZFJlcXVpcmVXYXRjaERpc2Nvbm5lY3Rpb24gKi8gOiAxIC8qIExpc3RlbmVyUmVtb3ZhbEFjdGlvbi5UZXJtaW5hdGVMb2NhbExpc3Rlbk9ubHkgKi8gOiAhcy5XXygpICYmIHQuR18oKSAmJiAoXG4gICAgICAgIC8vIFRoZSByZW1vdmVkIGxpc3RlbmVyIGlzIHRoZSBsYXN0IG9uZSB0aGF0IHNvdXJjZWQgZnJvbSB3YXRjaC5cbiAgICAgICAgaSA9IDIgLyogTGlzdGVuZXJSZW1vdmFsQWN0aW9uLlJlcXVpcmVXYXRjaERpc2Nvbm5lY3Rpb25Pbmx5ICovKSk7XG4gICAgfVxuICAgIHN3aXRjaCAoaSkge1xuICAgICAgY2FzZSAwIC8qIExpc3RlbmVyUmVtb3ZhbEFjdGlvbi5UZXJtaW5hdGVMb2NhbExpc3RlbkFuZFJlcXVpcmVXYXRjaERpc2Nvbm5lY3Rpb24gKi8gOlxuICAgICAgICByZXR1cm4gbi5xdWVyaWVzLmRlbGV0ZShyKSwgbi5vblVubGlzdGVuKHIsIFxuICAgICAgICAvKiogZGlzYWJsZVJlbW90ZUxpc3Rlbj0gKi8gITApO1xuXG4gICAgICBjYXNlIDEgLyogTGlzdGVuZXJSZW1vdmFsQWN0aW9uLlRlcm1pbmF0ZUxvY2FsTGlzdGVuT25seSAqLyA6XG4gICAgICAgIHJldHVybiBuLnF1ZXJpZXMuZGVsZXRlKHIpLCBuLm9uVW5saXN0ZW4ociwgXG4gICAgICAgIC8qKiBkaXNhYmxlUmVtb3RlTGlzdGVuPSAqLyAhMSk7XG5cbiAgICAgIGNhc2UgMiAvKiBMaXN0ZW5lclJlbW92YWxBY3Rpb24uUmVxdWlyZVdhdGNoRGlzY29ubmVjdGlvbk9ubHkgKi8gOlxuICAgICAgICByZXR1cm4gbi5vbkxhc3RSZW1vdGVTdG9yZVVubGlzdGVuKHIpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZXZlbnRNYW5hZ2VyT25XYXRjaENoYW5nZShlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgbGV0IHIgPSAhMTtcbiAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xuICAgICAgICBjb25zdCB0ID0gZS5xdWVyeSwgaSA9IG4ucXVlcmllcy5nZXQodCk7XG4gICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaS5VXykgdC5IXyhlKSAmJiAociA9ICEwKTtcbiAgICAgICAgICAgIGkuS18gPSBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHIgJiYgX19QUklWQVRFX3JhaXNlU25hcHNob3RzSW5TeW5jRXZlbnQobik7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9ldmVudE1hbmFnZXJPbldhdGNoRXJyb3IoZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCBpID0gci5xdWVyaWVzLmdldCh0KTtcbiAgICBpZiAoaSkgZm9yIChjb25zdCBlIG9mIGkuVV8pIGUub25FcnJvcihuKTtcbiAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycy4gTk9URTogV2UgZG9uJ3QgbmVlZCB0byBjYWxsIHN5bmNFbmdpbmUudW5saXN0ZW4oKVxuICAgIC8vIGFmdGVyIGFuIGVycm9yLlxuICAgICAgICByLnF1ZXJpZXMuZGVsZXRlKHQpO1xufVxuXG4vLyBDYWxsIGFsbCBnbG9iYWwgc25hcHNob3QgbGlzdGVuZXJzIHRoYXQgaGF2ZSBiZWVuIHNldC5cbmZ1bmN0aW9uIF9fUFJJVkFURV9yYWlzZVNuYXBzaG90c0luU3luY0V2ZW50KGUpIHtcbiAgICBlLnpfLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBlLm5leHQoKTtcbiAgICB9KSk7XG59XG5cbnZhciBnZSwgcGU7XG5cbi8qKiBMaXN0ZW4gdG8gYm90aCBjYWNoZSBhbmQgc2VydmVyIGNoYW5nZXMgKi9cbihwZSA9IGdlIHx8IChnZSA9IHt9KSkuSl8gPSBcImRlZmF1bHRcIiwgXG4vKiogTGlzdGVuIHRvIGNoYW5nZXMgaW4gY2FjaGUgb25seSAqL1xucGUuQ2FjaGUgPSBcImNhY2hlXCI7XG5cbi8qKlxuICogUXVlcnlMaXN0ZW5lciB0YWtlcyBhIHNlcmllcyBvZiBpbnRlcm5hbCB2aWV3IHNuYXBzaG90cyBhbmQgZGV0ZXJtaW5lc1xuICogd2hlbiB0byByYWlzZSB0aGUgZXZlbnQuXG4gKlxuICogSXQgdXNlcyBhbiBPYnNlcnZlciB0byBkaXNwYXRjaCBldmVudHMuXG4gKi9cbmNsYXNzIF9fUFJJVkFURV9RdWVyeUxpc3RlbmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSBlLCB0aGlzLllfID0gdCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWFsIHNuYXBzaG90cyAoZS5nLiBmcm9tIGNhY2hlKSBtYXkgbm90IGJlIHByb3BhZ2F0ZWQgdG8gdGhlIHdyYXBwZWRcbiAgICAgICAgICogb2JzZXJ2ZXIuIFRoaXMgZmxhZyBpcyBzZXQgdG8gdHJ1ZSBvbmNlIHdlJ3ZlIGFjdHVhbGx5IHJhaXNlZCBhbiBldmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuWl8gPSAhMSwgdGhpcy5YXyA9IG51bGwsIHRoaXMub25saW5lU3RhdGUgPSBcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovICwgXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG4gfHwge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIG5ldyBWaWV3U25hcHNob3QgdG8gdGhpcyBsaXN0ZW5lciwgcmFpc2luZyBhIHVzZXItZmFjaW5nIGV2ZW50XG4gICAgICogaWYgYXBwbGljYWJsZSAoZGVwZW5kaW5nIG9uIHdoYXQgY2hhbmdlZCwgd2hldGhlciB0aGUgdXNlciBoYXMgb3B0ZWQgaW50b1xuICAgICAqIG1ldGFkYXRhLW9ubHkgY2hhbmdlcywgZXRjLikuIFJldHVybnMgdHJ1ZSBpZiBhIHVzZXItZmFjaW5nIGV2ZW50IHdhc1xuICAgICAqIGluZGVlZCByYWlzZWQuXG4gICAgICovICAgIEhfKGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcykge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBtZXRhZGF0YSBvbmx5IGNoYW5nZXMuXG4gICAgICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgZS5kb2NDaGFuZ2VzKSAzIC8qIENoYW5nZVR5cGUuTWV0YWRhdGEgKi8gIT09IG4udHlwZSAmJiB0LnB1c2gobik7XG4gICAgICAgICAgICBlID0gbmV3IFZpZXdTbmFwc2hvdChlLnF1ZXJ5LCBlLmRvY3MsIGUub2xkRG9jcywgdCwgZS5tdXRhdGVkS2V5cywgZS5mcm9tQ2FjaGUsIGUuc3luY1N0YXRlQ2hhbmdlZCwgXG4gICAgICAgICAgICAvKiBleGNsdWRlc01ldGFkYXRhQ2hhbmdlcz0gKi8gITAsIGUuaGFzQ2FjaGVkUmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHQgPSAhMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuWl8gPyB0aGlzLmVhKGUpICYmICh0aGlzLllfLm5leHQoZSksIHQgPSAhMCkgOiB0aGlzLnRhKGUsIHRoaXMub25saW5lU3RhdGUpICYmICh0aGlzLm5hKGUpLCBcbiAgICAgICAgdCA9ICEwKSwgdGhpcy5YXyA9IGUsIHQ7XG4gICAgfVxuICAgIG9uRXJyb3IoZSkge1xuICAgICAgICB0aGlzLllfLmVycm9yKGUpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB3aGV0aGVyIGEgc25hcHNob3Qgd2FzIHJhaXNlZC4gKi8gICAgal8oZSkge1xuICAgICAgICB0aGlzLm9ubGluZVN0YXRlID0gZTtcbiAgICAgICAgbGV0IHQgPSAhMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuWF8gJiYgIXRoaXMuWl8gJiYgdGhpcy50YSh0aGlzLlhfLCBlKSAmJiAodGhpcy5uYSh0aGlzLlhfKSwgdCA9ICEwKSwgXG4gICAgICAgIHQ7XG4gICAgfVxuICAgIHRhKGUsIHQpIHtcbiAgICAgICAgLy8gQWx3YXlzIHJhaXNlIHRoZSBmaXJzdCBldmVudCB3aGVuIHdlJ3JlIHN5bmNlZFxuICAgICAgICBpZiAoIWUuZnJvbUNhY2hlKSByZXR1cm4gITA7XG4gICAgICAgIC8vIEFsd2F5cyByYWlzZSBldmVudCBpZiBsaXN0ZW5pbmcgdG8gY2FjaGVcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuR18oKSkgcmV0dXJuICEwO1xuICAgICAgICAvLyBOT1RFOiBXZSBjb25zaWRlciBPbmxpbmVTdGF0ZS5Vbmtub3duIGFzIG9ubGluZSAoaXQgc2hvdWxkIGJlY29tZSBPZmZsaW5lXG4gICAgICAgIC8vIG9yIE9ubGluZSBpZiB3ZSB3YWl0IGxvbmcgZW5vdWdoKS5cbiAgICAgICAgICAgICAgICBjb25zdCBuID0gXCJPZmZsaW5lXCIgLyogT25saW5lU3RhdGUuT2ZmbGluZSAqLyAhPT0gdDtcbiAgICAgICAgLy8gRG9uJ3QgcmFpc2UgdGhlIGV2ZW50IGlmIHdlJ3JlIG9ubGluZSwgYXJlbid0IHN5bmNlZCB5ZXQgKGNoZWNrZWRcbiAgICAgICAgLy8gYWJvdmUpIGFuZCBhcmUgd2FpdGluZyBmb3IgYSBzeW5jLlxuICAgICAgICAgICAgICAgIHJldHVybiAoIXRoaXMub3B0aW9ucy5yYSB8fCAhbikgJiYgKCFlLmRvY3MuaXNFbXB0eSgpIHx8IGUuaGFzQ2FjaGVkUmVzdWx0cyB8fCBcIk9mZmxpbmVcIiAvKiBPbmxpbmVTdGF0ZS5PZmZsaW5lICovID09PSB0KTtcbiAgICAgICAgLy8gUmFpc2UgZGF0YSBmcm9tIGNhY2hlIGlmIHdlIGhhdmUgYW55IGRvY3VtZW50cywgaGF2ZSBjYWNoZWQgcmVzdWx0cyBiZWZvcmUsXG4gICAgICAgIC8vIG9yIHdlIGFyZSBvZmZsaW5lLlxuICAgICAgICB9XG4gICAgZWEoZSkge1xuICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGhhbmRsZSBpbmNsdWRlRG9jdW1lbnRNZXRhZGF0YUNoYW5nZXMgaGVyZSBiZWNhdXNlXG4gICAgICAgIC8vIHRoZSBNZXRhZGF0YSBvbmx5IGNoYW5nZXMgaGF2ZSBhbHJlYWR5IGJlZW4gc3RyaXBwZWQgb3V0IGlmIG5lZWRlZC5cbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgb25seSBjaGFuZ2VzIHdlIHdpbGwgc2VlIGFyZSB0aGUgb25lcyB3ZSBzaG91bGRcbiAgICAgICAgLy8gcHJvcGFnYXRlLlxuICAgICAgICBpZiAoZS5kb2NDaGFuZ2VzLmxlbmd0aCA+IDApIHJldHVybiAhMDtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuWF8gJiYgdGhpcy5YXy5oYXNQZW5kaW5nV3JpdGVzICE9PSBlLmhhc1BlbmRpbmdXcml0ZXM7XG4gICAgICAgIHJldHVybiAhKCFlLnN5bmNTdGF0ZUNoYW5nZWQgJiYgIXQpICYmICEwID09PSB0aGlzLm9wdGlvbnMuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcztcbiAgICAgICAgLy8gR2VuZXJhbGx5IHdlIHNob3VsZCBoYXZlIGhpdCBvbmUgb2YgdGhlIGNhc2VzIGFib3ZlLCBidXQgaXQncyBwb3NzaWJsZVxuICAgICAgICAvLyB0byBnZXQgaGVyZSBpZiB0aGVyZSB3ZXJlIG9ubHkgbWV0YWRhdGEgZG9jQ2hhbmdlcyBhbmQgdGhleSBnb3RcbiAgICAgICAgLy8gc3RyaXBwZWQgb3V0LlxuICAgICAgICB9XG4gICAgbmEoZSkge1xuICAgICAgICBlID0gVmlld1NuYXBzaG90LmZyb21Jbml0aWFsRG9jdW1lbnRzKGUucXVlcnksIGUuZG9jcywgZS5tdXRhdGVkS2V5cywgZS5mcm9tQ2FjaGUsIGUuaGFzQ2FjaGVkUmVzdWx0cyksIFxuICAgICAgICB0aGlzLlpfID0gITAsIHRoaXMuWV8ubmV4dChlKTtcbiAgICB9XG4gICAgR18oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuc291cmNlICE9PSBnZS5DYWNoZTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgY29tcGxldGUgZWxlbWVudCBpbiB0aGUgYnVuZGxlIHN0cmVhbSwgdG9nZXRoZXIgd2l0aCB0aGUgYnl0ZSBsZW5ndGggaXRcbiAqIG9jY3VwaWVzIGluIHRoZSBzdHJlYW0uXG4gKi8gY2xhc3MgX19QUklWQVRFX1NpemVkQnVuZGxlRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoZSwgXG4gICAgLy8gSG93IG1hbnkgYnl0ZXMgdGhpcyBlbGVtZW50IHRha2VzIHRvIHN0b3JlIGluIHRoZSBidW5kbGUuXG4gICAgdCkge1xuICAgICAgICB0aGlzLmlhID0gZSwgdGhpcy5ieXRlTGVuZ3RoID0gdDtcbiAgICB9XG4gICAgc2EoKSB7XG4gICAgICAgIHJldHVybiBcIm1ldGFkYXRhXCIgaW4gdGhpcy5pYTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEhlbHBlciB0byBjb252ZXJ0IG9iamVjdHMgZnJvbSBidW5kbGVzIHRvIG1vZGVsIG9iamVjdHMgaW4gdGhlIFNESy5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfQnVuZGxlQ29udmVydGVySW1wbCB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLnNlcmlhbGl6ZXIgPSBlO1xuICAgIH1cbiAgICBQcyhlKSB7XG4gICAgICAgIHJldHVybiBmcm9tTmFtZSh0aGlzLnNlcmlhbGl6ZXIsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIEJ1bmRsZURvY3VtZW50IHRvIGEgTXV0YWJsZURvY3VtZW50LlxuICAgICAqLyAgICBJcyhlKSB7XG4gICAgICAgIHJldHVybiBlLm1ldGFkYXRhLmV4aXN0cyA/IF9fUFJJVkFURV9mcm9tRG9jdW1lbnQodGhpcy5zZXJpYWxpemVyLCBlLmRvY3VtZW50LCAhMSkgOiBNdXRhYmxlRG9jdW1lbnQubmV3Tm9Eb2N1bWVudCh0aGlzLlBzKGUubWV0YWRhdGEubmFtZSksIHRoaXMuVHMoZS5tZXRhZGF0YS5yZWFkVGltZSkpO1xuICAgIH1cbiAgICBUcyhlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfZnJvbVZlcnNpb24oZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgY2xhc3MgdG8gcHJvY2VzcyB0aGUgZWxlbWVudHMgZnJvbSBhIGJ1bmRsZSwgbG9hZCB0aGVtIGludG8gbG9jYWxcbiAqIHN0b3JhZ2UgYW5kIHByb3ZpZGUgcHJvZ3Jlc3MgdXBkYXRlIHdoaWxlIGxvYWRpbmcuXG4gKi8gY2xhc3MgX19QUklWQVRFX0J1bmRsZUxvYWRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbikge1xuICAgICAgICB0aGlzLm9hID0gZSwgdGhpcy5sb2NhbFN0b3JlID0gdCwgdGhpcy5zZXJpYWxpemVyID0gbiwgXG4gICAgICAgIC8qKiBCYXRjaGVkIHF1ZXJpZXMgdG8gYmUgc2F2ZWQgaW50byBzdG9yYWdlICovXG4gICAgICAgIHRoaXMucXVlcmllcyA9IFtdLCBcbiAgICAgICAgLyoqIEJhdGNoZWQgZG9jdW1lbnRzIHRvIGJlIHNhdmVkIGludG8gc3RvcmFnZSAqL1xuICAgICAgICB0aGlzLmRvY3VtZW50cyA9IFtdLCBcbiAgICAgICAgLyoqIFRoZSBjb2xsZWN0aW9uIGdyb3VwcyBhZmZlY3RlZCBieSB0aGlzIGJ1bmRsZS4gKi9cbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uR3JvdXBzID0gbmV3IFNldCwgdGhpcy5wcm9ncmVzcyA9IF9fUFJJVkFURV9idW5kbGVJbml0aWFsUHJvZ3Jlc3MoZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gZWxlbWVudCBmcm9tIHRoZSBidW5kbGUgdG8gdGhlIGxvYWRlci5cbiAgICAgKlxuICAgICAqIFJldHVybnMgYSBuZXcgcHJvZ3Jlc3MgaWYgYWRkaW5nIHRoZSBlbGVtZW50IGxlYWRzIHRvIGEgbmV3IHByb2dyZXNzLFxuICAgICAqIG90aGVyd2lzZSByZXR1cm5zIG51bGwuXG4gICAgICovICAgIF9hKGUpIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzcy5ieXRlc0xvYWRlZCArPSBlLmJ5dGVMZW5ndGg7XG4gICAgICAgIGxldCB0ID0gdGhpcy5wcm9ncmVzcy5kb2N1bWVudHNMb2FkZWQ7XG4gICAgICAgIGlmIChlLmlhLm5hbWVkUXVlcnkpIHRoaXMucXVlcmllcy5wdXNoKGUuaWEubmFtZWRRdWVyeSk7IGVsc2UgaWYgKGUuaWEuZG9jdW1lbnRNZXRhZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IGUuaWEuZG9jdW1lbnRNZXRhZGF0YVxuICAgICAgICAgICAgfSksIGUuaWEuZG9jdW1lbnRNZXRhZGF0YS5leGlzdHMgfHwgKyt0O1xuICAgICAgICAgICAgY29uc3QgbiA9IFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKGUuaWEuZG9jdW1lbnRNZXRhZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbkdyb3Vwcy5hZGQobi5nZXQobi5sZW5ndGggLSAyKSk7XG4gICAgICAgIH0gZWxzZSBlLmlhLmRvY3VtZW50ICYmICh0aGlzLmRvY3VtZW50c1t0aGlzLmRvY3VtZW50cy5sZW5ndGggLSAxXS5kb2N1bWVudCA9IGUuaWEuZG9jdW1lbnQsIFxuICAgICAgICArK3QpO1xuICAgICAgICByZXR1cm4gdCAhPT0gdGhpcy5wcm9ncmVzcy5kb2N1bWVudHNMb2FkZWQgPyAodGhpcy5wcm9ncmVzcy5kb2N1bWVudHNMb2FkZWQgPSB0LCBcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9ncmVzcykpIDogbnVsbDtcbiAgICB9XG4gICAgYWEoZSkge1xuICAgICAgICBjb25zdCB0ID0gbmV3IE1hcCwgbiA9IG5ldyBfX1BSSVZBVEVfQnVuZGxlQ29udmVydGVySW1wbCh0aGlzLnNlcmlhbGl6ZXIpO1xuICAgICAgICBmb3IgKGNvbnN0IHIgb2YgZSkgaWYgKHIubWV0YWRhdGEucXVlcmllcykge1xuICAgICAgICAgICAgY29uc3QgZSA9IG4uUHMoci5tZXRhZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiByLm1ldGFkYXRhLnF1ZXJpZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gKHQuZ2V0KG4pIHx8IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpKS5hZGQoZSk7XG4gICAgICAgICAgICAgICAgdC5zZXQobiwgcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgcHJvZ3Jlc3MgdG8gJ1N1Y2Nlc3MnIGFuZCByZXR1cm4gdGhlIHVwZGF0ZWQgcHJvZ3Jlc3MuXG4gICAgICovICAgIGFzeW5jIGNvbXBsZXRlKCkge1xuICAgICAgICBjb25zdCBlID0gYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVBcHBseUJ1bmRsZWREb2N1bWVudHModGhpcy5sb2NhbFN0b3JlLCBuZXcgX19QUklWQVRFX0J1bmRsZUNvbnZlcnRlckltcGwodGhpcy5zZXJpYWxpemVyKSwgdGhpcy5kb2N1bWVudHMsIHRoaXMub2EuaWQpLCB0ID0gdGhpcy5hYSh0aGlzLmRvY3VtZW50cyk7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLnF1ZXJpZXMpIGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlU2F2ZU5hbWVkUXVlcnkodGhpcy5sb2NhbFN0b3JlLCBlLCB0LmdldChlLm5hbWUpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3MudGFza1N0YXRlID0gXCJTdWNjZXNzXCIsIHtcbiAgICAgICAgICAgIHByb2dyZXNzOiB0aGlzLnByb2dyZXNzLFxuICAgICAgICAgICAgdWE6IHRoaXMuY29sbGVjdGlvbkdyb3VwcyxcbiAgICAgICAgICAgIGNhOiBlXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBgTG9hZEJ1bmRsZVRhc2tQcm9ncmVzc2AgcmVwcmVzZW50aW5nIHRoZSBpbml0aWFsIHByb2dyZXNzIG9mXG4gKiBsb2FkaW5nIGEgYnVuZGxlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9idW5kbGVJbml0aWFsUHJvZ3Jlc3MoZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRhc2tTdGF0ZTogXCJSdW5uaW5nXCIsXG4gICAgICAgIGRvY3VtZW50c0xvYWRlZDogMCxcbiAgICAgICAgYnl0ZXNMb2FkZWQ6IDAsXG4gICAgICAgIHRvdGFsRG9jdW1lbnRzOiBlLnRvdGFsRG9jdW1lbnRzLFxuICAgICAgICB0b3RhbEJ5dGVzOiBlLnRvdGFsQnl0ZXNcbiAgICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBgTG9hZEJ1bmRsZVRhc2tQcm9ncmVzc2AgcmVwcmVzZW50aW5nIHRoZSBwcm9ncmVzcyB0aGF0IHRoZSBsb2FkaW5nXG4gKiBoYXMgc3VjY2VlZGVkLlxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY2xhc3MgX19QUklWQVRFX0FkZGVkTGltYm9Eb2N1bWVudCB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLmtleSA9IGU7XG4gICAgfVxufVxuXG5jbGFzcyBfX1BSSVZBVEVfUmVtb3ZlZExpbWJvRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBWaWV3IGlzIHJlc3BvbnNpYmxlIGZvciBjb21wdXRpbmcgdGhlIGZpbmFsIG1lcmdlZCB0cnV0aCBvZiB3aGF0IGRvY3MgYXJlIGluXG4gKiBhIHF1ZXJ5LiBJdCBnZXRzIG5vdGlmaWVkIG9mIGxvY2FsIGFuZCByZW1vdGUgY2hhbmdlcyB0byBkb2NzLCBhbmQgYXBwbGllc1xuICogdGhlIHF1ZXJ5IGZpbHRlcnMgYW5kIGxpbWl0cyB0byBkZXRlcm1pbmUgdGhlIG1vc3QgY29ycmVjdCBwb3NzaWJsZSByZXN1bHRzLlxuICovIGNsYXNzIF9fUFJJVkFURV9WaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihlLCBcbiAgICAvKiogRG9jdW1lbnRzIGluY2x1ZGVkIGluIHRoZSByZW1vdGUgdGFyZ2V0ICovXG4gICAgdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gZSwgdGhpcy5sYSA9IHQsIHRoaXMuaGEgPSBudWxsLCB0aGlzLmhhc0NhY2hlZFJlc3VsdHMgPSAhMSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGZsYWcgd2hldGhlciB0aGUgdmlldyBpcyBjdXJyZW50IHdpdGggdGhlIGJhY2tlbmQuIEEgdmlldyBpcyBjb25zaWRlcmVkXG4gICAgICAgICAqIGN1cnJlbnQgYWZ0ZXIgaXQgaGFzIHNlZW4gdGhlIGN1cnJlbnQgZmxhZyBmcm9tIHRoZSBiYWNrZW5kIGFuZCBkaWQgbm90XG4gICAgICAgICAqIGxvc2UgY29uc2lzdGVuY3kgd2l0aGluIHRoZSB3YXRjaCBzdHJlYW0gKGUuZy4gYmVjYXVzZSBvZiBhbiBleGlzdGVuY2VcbiAgICAgICAgICogZmlsdGVyIG1pc21hdGNoKS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3VycmVudCA9ICExLCBcbiAgICAgICAgLyoqIERvY3VtZW50cyBpbiB0aGUgdmlldyBidXQgbm90IGluIHRoZSByZW1vdGUgdGFyZ2V0ICovXG4gICAgICAgIHRoaXMuUGEgPSBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKSwgXG4gICAgICAgIC8qKiBEb2N1bWVudCBLZXlzIHRoYXQgaGF2ZSBsb2NhbCBjaGFuZ2VzICovXG4gICAgICAgIHRoaXMubXV0YXRlZEtleXMgPSBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKSwgdGhpcy5JYSA9IF9fUFJJVkFURV9uZXdRdWVyeUNvbXBhcmF0b3IoZSksIFxuICAgICAgICB0aGlzLlRhID0gbmV3IERvY3VtZW50U2V0KHRoaXMuSWEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIHJlbW90ZSBkb2N1bWVudHMgdGhhdCB0aGUgc2VydmVyIGhhcyB0b2xkIHVzIGJlbG9uZ3MgdG8gdGhlIHRhcmdldCBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiB0aGlzIHZpZXcuXG4gICAgICovICAgIGdldCBFYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYSBzZXQgb2YgZG9jIGNoYW5nZXMsIGFwcGxpZXMgdGhlIHF1ZXJ5IGxpbWl0LCBhbmQgY29tcHV0ZXNcbiAgICAgKiB3aGF0IHRoZSBuZXcgcmVzdWx0cyBzaG91bGQgYmUsIHdoYXQgdGhlIGNoYW5nZXMgd2VyZSwgYW5kIHdoZXRoZXIgd2UgbWF5XG4gICAgICogbmVlZCB0byBnbyBiYWNrIHRvIHRoZSBsb2NhbCBjYWNoZSBmb3IgbW9yZSByZXN1bHRzLiBEb2VzIG5vdCBtYWtlIGFueVxuICAgICAqIGNoYW5nZXMgdG8gdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIGRvY0NoYW5nZXMgLSBUaGUgZG9jIGNoYW5nZXMgdG8gYXBwbHkgdG8gdGhpcyB2aWV3LlxuICAgICAqIEBwYXJhbSBwcmV2aW91c0NoYW5nZXMgLSBJZiB0aGlzIGlzIGJlaW5nIGNhbGxlZCB3aXRoIGEgcmVmaWxsLCB0aGVuIHN0YXJ0XG4gICAgICogICAgICAgIHdpdGggdGhpcyBzZXQgb2YgZG9jcyBhbmQgY2hhbmdlcyBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHZpZXcuXG4gICAgICogQHJldHVybnMgYSBuZXcgc2V0IG9mIGRvY3MsIGNoYW5nZXMsIGFuZCByZWZpbGwgZmxhZy5cbiAgICAgKi8gICAgZGEoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gdCA/IHQuQWEgOiBuZXcgX19QUklWQVRFX0RvY3VtZW50Q2hhbmdlU2V0LCByID0gdCA/IHQuVGEgOiB0aGlzLlRhO1xuICAgICAgICBsZXQgaSA9IHQgPyB0Lm11dGF0ZWRLZXlzIDogdGhpcy5tdXRhdGVkS2V5cywgcyA9IHIsIG8gPSAhMTtcbiAgICAgICAgLy8gVHJhY2sgdGhlIGxhc3QgZG9jIGluIGEgKGZ1bGwpIGxpbWl0LiBUaGlzIGlzIG5lY2Vzc2FyeSwgYmVjYXVzZSBzb21lXG4gICAgICAgIC8vIHVwZGF0ZSAoYSBkZWxldGUsIG9yIGFuIHVwZGF0ZSBtb3ZpbmcgYSBkb2MgcGFzdCB0aGUgb2xkIGxpbWl0KSBtaWdodFxuICAgICAgICAvLyBtZWFuIHRoZXJlIGlzIHNvbWUgb3RoZXIgZG9jdW1lbnQgaW4gdGhlIGxvY2FsIGNhY2hlIHRoYXQgZWl0aGVyIHNob3VsZFxuICAgICAgICAvLyBjb21lICgxKSBiZXR3ZWVuIHRoZSBvbGQgbGFzdCBsaW1pdCBkb2MgYW5kIHRoZSBuZXcgbGFzdCBkb2N1bWVudCwgaW4gdGhlXG4gICAgICAgIC8vIGNhc2Ugb2YgdXBkYXRlcywgb3IgKDIpIGFmdGVyIHRoZSBuZXcgbGFzdCBkb2N1bWVudCwgaW4gdGhlIGNhc2Ugb2ZcbiAgICAgICAgLy8gZGVsZXRlcy4gU28gd2Uga2VlcCB0aGlzIGRvYyBhdCB0aGUgb2xkIGxpbWl0IHRvIGNvbXBhcmUgdGhlIHVwZGF0ZXMgdG8uXG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIHNob3VsZCBuZXZlciBnZXQgdXNlZCBpbiBhIHJlZmlsbCAod2hlbiBwcmV2aW91c0NoYW5nZXMgaXNcbiAgICAgICAgLy8gc2V0KSwgYmVjYXVzZSB0aGVyZSB3aWxsIG9ubHkgYmUgYWRkcyAtLSBubyBkZWxldGVzIG9yIHVwZGF0ZXMuXG4gICAgICAgIGNvbnN0IF8gPSBcIkZcIiAvKiBMaW1pdFR5cGUuRmlyc3QgKi8gPT09IHRoaXMucXVlcnkubGltaXRUeXBlICYmIHIuc2l6ZSA9PT0gdGhpcy5xdWVyeS5saW1pdCA/IHIubGFzdCgpIDogbnVsbCwgYSA9IFwiTFwiIC8qIExpbWl0VHlwZS5MYXN0ICovID09PSB0aGlzLnF1ZXJ5LmxpbWl0VHlwZSAmJiByLnNpemUgPT09IHRoaXMucXVlcnkubGltaXQgPyByLmZpcnN0KCkgOiBudWxsO1xuICAgICAgICAvLyBEcm9wIGRvY3VtZW50cyBvdXQgdG8gbWVldCBsaW1pdC9saW1pdFRvTGFzdCByZXF1aXJlbWVudC5cbiAgICAgICAgaWYgKGUuaW5vcmRlclRyYXZlcnNhbCgoKGUsIHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHUgPSByLmdldChlKSwgYyA9IF9fUFJJVkFURV9xdWVyeU1hdGNoZXModGhpcy5xdWVyeSwgdCkgPyB0IDogbnVsbCwgbCA9ICEhdSAmJiB0aGlzLm11dGF0ZWRLZXlzLmhhcyh1LmtleSksIGggPSAhIWMgJiYgKGMuaGFzTG9jYWxNdXRhdGlvbnMgfHwgXG4gICAgICAgICAgICAvLyBXZSBvbmx5IGNvbnNpZGVyIGNvbW1pdHRlZCBtdXRhdGlvbnMgZm9yIGRvY3VtZW50cyB0aGF0IHdlcmVcbiAgICAgICAgICAgIC8vIG11dGF0ZWQgZHVyaW5nIHRoZSBsaWZldGltZSBvZiB0aGUgdmlldy5cbiAgICAgICAgICAgIHRoaXMubXV0YXRlZEtleXMuaGFzKGMua2V5KSAmJiBjLmhhc0NvbW1pdHRlZE11dGF0aW9ucyk7XG4gICAgICAgICAgICBsZXQgUCA9ICExO1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUgJiYgYykge1xuICAgICAgICAgICAgICAgIHUuZGF0YS5pc0VxdWFsKGMuZGF0YSkgPyBsICE9PSBoICYmIChuLnRyYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMyAvKiBDaGFuZ2VUeXBlLk1ldGFkYXRhICovICxcbiAgICAgICAgICAgICAgICAgICAgZG9jOiBjXG4gICAgICAgICAgICAgICAgfSksIFAgPSAhMCkgOiB0aGlzLlJhKHUsIGMpIHx8IChuLnRyYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMiAvKiBDaGFuZ2VUeXBlLk1vZGlmaWVkICovICxcbiAgICAgICAgICAgICAgICAgICAgZG9jOiBjXG4gICAgICAgICAgICAgICAgfSksIFAgPSAhMCwgKF8gJiYgdGhpcy5JYShjLCBfKSA+IDAgfHwgYSAmJiB0aGlzLklhKGMsIGEpIDwgMCkgJiYgKFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZG9jIG1vdmVkIGZyb20gaW5zaWRlIHRoZSBsaW1pdCB0byBvdXRzaWRlIHRoZSBsaW1pdC5cbiAgICAgICAgICAgICAgICAvLyBUaGF0IG1lYW5zIHRoZXJlIG1heSBiZSBzb21lIG90aGVyIGRvYyBpbiB0aGUgbG9jYWwgY2FjaGVcbiAgICAgICAgICAgICAgICAvLyB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgIG8gPSAhMCkpO1xuICAgICAgICAgICAgfSBlbHNlICF1ICYmIGMgPyAobi50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBDaGFuZ2VUeXBlLkFkZGVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGNcbiAgICAgICAgICAgIH0pLCBQID0gITApIDogdSAmJiAhYyAmJiAobi50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMSAvKiBDaGFuZ2VUeXBlLlJlbW92ZWQgKi8gLFxuICAgICAgICAgICAgICAgIGRvYzogdVxuICAgICAgICAgICAgfSksIFAgPSAhMCwgKF8gfHwgYSkgJiYgKFxuICAgICAgICAgICAgLy8gQSBkb2Mgd2FzIHJlbW92ZWQgZnJvbSBhIGZ1bGwgbGltaXQgcXVlcnkuIFdlJ2xsIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIHJlcXVlcnkgZnJvbSB0aGUgbG9jYWwgY2FjaGUgdG8gc2VlIGlmIHdlIGtub3cgYWJvdXQgc29tZSBvdGhlclxuICAgICAgICAgICAgLy8gZG9jIHRoYXQgc2hvdWxkIGJlIGluIHRoZSByZXN1bHRzLlxuICAgICAgICAgICAgbyA9ICEwKSk7XG4gICAgICAgICAgICBQICYmIChjID8gKHMgPSBzLmFkZChjKSwgaSA9IGggPyBpLmFkZChlKSA6IGkuZGVsZXRlKGUpKSA6IChzID0gcy5kZWxldGUoZSksIGkgPSBpLmRlbGV0ZShlKSkpO1xuICAgICAgICB9KSksIG51bGwgIT09IHRoaXMucXVlcnkubGltaXQpIGZvciAoO3Muc2l6ZSA+IHRoaXMucXVlcnkubGltaXQ7ICkge1xuICAgICAgICAgICAgY29uc3QgZSA9IFwiRlwiIC8qIExpbWl0VHlwZS5GaXJzdCAqLyA9PT0gdGhpcy5xdWVyeS5saW1pdFR5cGUgPyBzLmxhc3QoKSA6IHMuZmlyc3QoKTtcbiAgICAgICAgICAgIHMgPSBzLmRlbGV0ZShlLmtleSksIGkgPSBpLmRlbGV0ZShlLmtleSksIG4udHJhY2soe1xuICAgICAgICAgICAgICAgIHR5cGU6IDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBUYTogcyxcbiAgICAgICAgICAgIEFhOiBuLFxuICAgICAgICAgICAgWGk6IG8sXG4gICAgICAgICAgICBtdXRhdGVkS2V5czogaVxuICAgICAgICB9O1xuICAgIH1cbiAgICBSYShlLCB0KSB7XG4gICAgICAgIC8vIFdlIHN1cHByZXNzIHRoZSBpbml0aWFsIGNoYW5nZSBldmVudCBmb3IgZG9jdW1lbnRzIHRoYXQgd2VyZSBtb2RpZmllZCBhc1xuICAgICAgICAvLyBwYXJ0IG9mIGEgd3JpdGUgYWNrbm93bGVkZ21lbnQgKGUuZy4gd2hlbiB0aGUgdmFsdWUgb2YgYSBzZXJ2ZXIgdHJhbnNmb3JtXG4gICAgICAgIC8vIGlzIGFwcGxpZWQpIGFzIFdhdGNoIHdpbGwgc2VuZCB1cyB0aGUgc2FtZSBkb2N1bWVudCBhZ2Fpbi5cbiAgICAgICAgLy8gQnkgc3VwcHJlc3NpbmcgdGhlIGV2ZW50LCB3ZSBvbmx5IHJhaXNlIHR3byB1c2VyIHZpc2libGUgZXZlbnRzIChvbmUgd2l0aFxuICAgICAgICAvLyBgaGFzUGVuZGluZ1dyaXRlc2AgYW5kIHRoZSBmaW5hbCBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQpIGluc3RlYWQgb2YgdGhyZWVcbiAgICAgICAgLy8gKG9uZSB3aXRoIGBoYXNQZW5kaW5nV3JpdGVzYCwgdGhlIG1vZGlmaWVkIGRvY3VtZW50IHdpdGhcbiAgICAgICAgLy8gYGhhc1BlbmRpbmdXcml0ZXNgIGFuZCB0aGUgZmluYWwgc3RhdGUgb2YgdGhlIGRvY3VtZW50KS5cbiAgICAgICAgcmV0dXJuIGUuaGFzTG9jYWxNdXRhdGlvbnMgJiYgdC5oYXNDb21taXR0ZWRNdXRhdGlvbnMgJiYgIXQuaGFzTG9jYWxNdXRhdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHZpZXcgd2l0aCB0aGUgZ2l2ZW4gVmlld0RvY3VtZW50Q2hhbmdlcyBhbmQgb3B0aW9uYWxseSB1cGRhdGVzXG4gICAgICogbGltYm8gZG9jcyBhbmQgc3luYyBzdGF0ZSBmcm9tIHRoZSBwcm92aWRlZCB0YXJnZXQgY2hhbmdlLlxuICAgICAqIEBwYXJhbSBkb2NDaGFuZ2VzIC0gVGhlIHNldCBvZiBjaGFuZ2VzIHRvIG1ha2UgdG8gdGhlIHZpZXcncyBkb2NzLlxuICAgICAqIEBwYXJhbSBsaW1ib1Jlc29sdXRpb25FbmFibGVkIC0gV2hldGhlciB0byB1cGRhdGUgbGltYm8gZG9jdW1lbnRzIGJhc2VkIG9uXG4gICAgICogICAgICAgIHRoaXMgY2hhbmdlLlxuICAgICAqIEBwYXJhbSB0YXJnZXRDaGFuZ2UgLSBBIHRhcmdldCBjaGFuZ2UgdG8gYXBwbHkgZm9yIGNvbXB1dGluZyBsaW1ibyBkb2NzIGFuZFxuICAgICAqICAgICAgICBzeW5jIHN0YXRlLlxuICAgICAqIEBwYXJhbSB0YXJnZXRJc1BlbmRpbmdSZXNldCAtIFdoZXRoZXIgdGhlIHRhcmdldCBpcyBwZW5kaW5nIHRvIHJlc2V0IGR1ZSB0b1xuICAgICAqICAgICAgICBleGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoLiBJZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQsIGl0IGlzIHRyZWF0ZWRcbiAgICAgKiAgICAgICAgZXF1aXZhbGVudGx5IHRvIGBmYWxzZWAuXG4gICAgICogQHJldHVybnMgQSBuZXcgVmlld0NoYW5nZSB3aXRoIHRoZSBnaXZlbiBkb2NzLCBjaGFuZ2VzLCBhbmQgc3luYyBzdGF0ZS5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IFRoZSBpT1MvQW5kcm9pZCBjbGllbnRzIGFsd2F5cyBjb21wdXRlIGxpbWJvIGRvY3VtZW50IGNoYW5nZXMuXG4gICAgYXBwbHlDaGFuZ2VzKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgY29uc3QgaSA9IHRoaXMuVGE7XG4gICAgICAgIHRoaXMuVGEgPSBlLlRhLCB0aGlzLm11dGF0ZWRLZXlzID0gZS5tdXRhdGVkS2V5cztcbiAgICAgICAgLy8gU29ydCBjaGFuZ2VzIGJhc2VkIG9uIHR5cGUgYW5kIHF1ZXJ5IGNvbXBhcmF0b3JcbiAgICAgICAgY29uc3QgcyA9IGUuQWEuUV8oKTtcbiAgICAgICAgcy5zb3J0KCgoZSwgdCkgPT4gZnVuY3Rpb24gX19QUklWQVRFX2NvbXBhcmVDaGFuZ2VUeXBlKGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yZGVyID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDIgLyogQ2hhbmdlVHlwZS5Nb2RpZmllZCAqLyA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDMgLyogQ2hhbmdlVHlwZS5NZXRhZGF0YSAqLyA6XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgbWV0YWRhdGEgY2hhbmdlIGlzIGNvbnZlcnRlZCB0byBhIG1vZGlmaWVkIGNoYW5nZSBhdCB0aGUgcHVibGljXG4gICAgICAgICAgICAgICAgICAgIC8vIGFwaSBsYXllci4gIFNpbmNlIHdlIHNvcnQgYnkgZG9jdW1lbnQga2V5IGFuZCB0aGVuIGNoYW5nZSB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAvLyBtZXRhZGF0YSBhbmQgbW9kaWZpZWQgY2hhbmdlcyBtdXN0IGJlIHNvcnRlZCBlcXVpdmFsZW50bHkuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAyO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBvcmRlcihlKSAtIG9yZGVyKHQpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIChlLnR5cGUsIHQudHlwZSkgfHwgdGhpcy5JYShlLmRvYywgdC5kb2MpKSksIHRoaXMuVmEobiksIHIgPSBudWxsICE9IHIgJiYgcjtcbiAgICAgICAgY29uc3QgbyA9IHQgJiYgIXIgPyB0aGlzLm1hKCkgOiBbXSwgXyA9IDAgPT09IHRoaXMuUGEuc2l6ZSAmJiB0aGlzLmN1cnJlbnQgJiYgIXIgPyAxIC8qIFN5bmNTdGF0ZS5TeW5jZWQgKi8gOiAwIC8qIFN5bmNTdGF0ZS5Mb2NhbCAqLyAsIGEgPSBfICE9PSB0aGlzLmhhO1xuICAgICAgICAvLyBXZSBhcmUgYXQgc3luY2VkIHN0YXRlIGlmIHRoZXJlIGlzIG5vIGxpbWJvIGRvY3MgYXJlIHdhaXRpbmcgdG8gYmUgcmVzb2x2ZWQsIHZpZXcgaXMgY3VycmVudFxuICAgICAgICAvLyB3aXRoIHRoZSBiYWNrZW5kLCBhbmQgdGhlIHF1ZXJ5IGlzIG5vdCBwZW5kaW5nIHRvIHJlc2V0IGR1ZSB0byBleGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhID0gXywgMCAhPT0gcy5sZW5ndGggfHwgYSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzbmFwc2hvdDogbmV3IFZpZXdTbmFwc2hvdCh0aGlzLnF1ZXJ5LCBlLlRhLCBpLCBzLCBlLm11dGF0ZWRLZXlzLCAwIC8qIFN5bmNTdGF0ZS5Mb2NhbCAqLyA9PT0gXywgYSwgXG4gICAgICAgICAgICAgICAgLyogZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXM9ICovICExLCAhIW4gJiYgbi5yZXN1bWVUb2tlbi5hcHByb3hpbWF0ZUJ5dGVTaXplKCkgPiAwKSxcbiAgICAgICAgICAgICAgICBmYTogb1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBubyBjaGFuZ2VzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmYTogb1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGFuIE9ubGluZVN0YXRlIGNoYW5nZSB0byB0aGUgdmlldywgcG90ZW50aWFsbHkgZ2VuZXJhdGluZyBhXG4gICAgICogVmlld0NoYW5nZSBpZiB0aGUgdmlldydzIHN5bmNTdGF0ZSBjaGFuZ2VzIGFzIGEgcmVzdWx0LlxuICAgICAqLyAgICBqXyhlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgJiYgXCJPZmZsaW5lXCIgLyogT25saW5lU3RhdGUuT2ZmbGluZSAqLyA9PT0gZSA/IChcbiAgICAgICAgLy8gSWYgd2UncmUgb2ZmbGluZSwgc2V0IGBjdXJyZW50YCB0byBmYWxzZSBhbmQgdGhlbiBjYWxsIGFwcGx5Q2hhbmdlcygpXG4gICAgICAgIC8vIHRvIHJlZnJlc2ggb3VyIHN5bmNTdGF0ZSBhbmQgZ2VuZXJhdGUgYSBWaWV3Q2hhbmdlIGFzIGFwcHJvcHJpYXRlLiBXZVxuICAgICAgICAvLyBhcmUgZ3VhcmFudGVlZCB0byBnZXQgYSBuZXcgVGFyZ2V0Q2hhbmdlIHRoYXQgc2V0cyBgY3VycmVudGAgYmFjayB0b1xuICAgICAgICAvLyB0cnVlIG9uY2UgdGhlIGNsaWVudCBpcyBiYWNrIG9ubGluZS5cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gITEsIHRoaXMuYXBwbHlDaGFuZ2VzKHtcbiAgICAgICAgICAgIFRhOiB0aGlzLlRhLFxuICAgICAgICAgICAgQWE6IG5ldyBfX1BSSVZBVEVfRG9jdW1lbnRDaGFuZ2VTZXQsXG4gICAgICAgICAgICBtdXRhdGVkS2V5czogdGhpcy5tdXRhdGVkS2V5cyxcbiAgICAgICAgICAgIFhpOiAhMVxuICAgICAgICB9LCBcbiAgICAgICAgLyogbGltYm9SZXNvbHV0aW9uRW5hYmxlZD0gKi8gITEpKSA6IHtcbiAgICAgICAgICAgIGZhOiBbXVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGRvYyBmb3IgdGhlIGdpdmVuIGtleSBzaG91bGQgYmUgaW4gbGltYm8uXG4gICAgICovICAgIGdhKGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHJlbW90ZSBlbmQgc2F5cyBpdCdzIHBhcnQgb2YgdGhpcyBxdWVyeSwgaXQncyBub3QgaW4gbGltYm8uXG4gICAgICAgIHJldHVybiAhdGhpcy5sYS5oYXMoZSkgJiYgKFxuICAgICAgICAvLyBUaGUgbG9jYWwgc3RvcmUgZG9lc24ndCB0aGluayBpdCdzIGEgcmVzdWx0LCBzbyBpdCBzaG91bGRuJ3QgYmUgaW4gbGltYm8uXG4gICAgICAgICEhdGhpcy5UYS5oYXMoZSkgJiYgIXRoaXMuVGEuZ2V0KGUpLmhhc0xvY2FsTXV0YXRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBzeW5jZWREb2N1bWVudHMsIGN1cnJlbnQsIGFuZCBsaW1ibyBkb2NzIGJhc2VkIG9uIHRoZSBnaXZlbiBjaGFuZ2UuXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBjaGFuZ2VzIHRvIHdoaWNoIGRvY3MgYXJlIGluIGxpbWJvLlxuICAgICAqLyAgICBWYShlKSB7XG4gICAgICAgIGUgJiYgKGUuYWRkZWREb2N1bWVudHMuZm9yRWFjaCgoZSA9PiB0aGlzLmxhID0gdGhpcy5sYS5hZGQoZSkpKSwgZS5tb2RpZmllZERvY3VtZW50cy5mb3JFYWNoKChlID0+IHt9KSksIFxuICAgICAgICBlLnJlbW92ZWREb2N1bWVudHMuZm9yRWFjaCgoZSA9PiB0aGlzLmxhID0gdGhpcy5sYS5kZWxldGUoZSkpKSwgdGhpcy5jdXJyZW50ID0gZS5jdXJyZW50KTtcbiAgICB9XG4gICAgbWEoKSB7XG4gICAgICAgIC8vIFdlIGNhbiBvbmx5IGRldGVybWluZSBsaW1ibyBkb2N1bWVudHMgd2hlbiB3ZSdyZSBpbi1zeW5jIHdpdGggdGhlIHNlcnZlci5cbiAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnQpIHJldHVybiBbXTtcbiAgICAgICAgLy8gVE9ETyhrbGltdCk6IERvIHRoaXMgaW5jcmVtZW50YWxseSBzbyB0aGF0IGl0J3Mgbm90IHF1YWRyYXRpYyB3aGVuXG4gICAgICAgIC8vIHVwZGF0aW5nIG1hbnkgZG9jdW1lbnRzLlxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLlBhO1xuICAgICAgICB0aGlzLlBhID0gX19QUklWQVRFX2RvY3VtZW50S2V5U2V0KCksIHRoaXMuVGEuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdhKGUua2V5KSAmJiAodGhpcy5QYSA9IHRoaXMuUGEuYWRkKGUua2V5KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gRGlmZiB0aGUgbmV3IGxpbWJvIGRvY3Mgd2l0aCB0aGUgb2xkIGxpbWJvIGRvY3MuXG4gICAgICAgIGNvbnN0IHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICB0aGlzLlBhLmhhcyhlKSB8fCB0LnB1c2gobmV3IF9fUFJJVkFURV9SZW1vdmVkTGltYm9Eb2N1bWVudChlKSk7XG4gICAgICAgIH0pKSwgdGhpcy5QYS5mb3JFYWNoKChuID0+IHtcbiAgICAgICAgICAgIGUuaGFzKG4pIHx8IHQucHVzaChuZXcgX19QUklWQVRFX0FkZGVkTGltYm9Eb2N1bWVudChuKSk7XG4gICAgICAgIH0pKSwgdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBpbi1tZW1vcnkgc3RhdGUgb2YgdGhlIGN1cnJlbnQgdmlldyB3aXRoIHRoZSBzdGF0ZSByZWFkIGZyb21cbiAgICAgKiBwZXJzaXN0ZW5jZS5cbiAgICAgKlxuICAgICAqIFdlIHVwZGF0ZSB0aGUgcXVlcnkgdmlldyB3aGVuZXZlciBhIGNsaWVudCdzIHByaW1hcnkgc3RhdHVzIGNoYW5nZXM6XG4gICAgICogLSBXaGVuIGEgY2xpZW50IHRyYW5zaXRpb25zIGZyb20gcHJpbWFyeSB0byBzZWNvbmRhcnksIGl0IGNhbiBtaXNzXG4gICAgICogICBMb2NhbFN0b3JhZ2UgdXBkYXRlcyBhbmQgaXRzIHF1ZXJ5IHZpZXdzIG1heSB0ZW1wb3JhcmlseSBub3QgYmVcbiAgICAgKiAgIHN5bmNocm9uaXplZCB3aXRoIHRoZSBzdGF0ZSBvbiBkaXNrLlxuICAgICAqIC0gRm9yIHNlY29uZGFyeSB0byBwcmltYXJ5IHRyYW5zaXRpb25zLCB0aGUgY2xpZW50IG5lZWRzIHRvIHVwZGF0ZSB0aGUgbGlzdFxuICAgICAqICAgb2YgYHN5bmNlZERvY3VtZW50c2Agc2luY2Ugc2Vjb25kYXJ5IGNsaWVudHMgdXBkYXRlIHRoZWlyIHF1ZXJ5IHZpZXdzXG4gICAgICogICBiYXNlZCBwdXJlbHkgb24gc3ludGhlc2l6ZWQgUmVtb3RlRXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXJ5UmVzdWx0LmRvY3VtZW50cyAtIFRoZSBkb2N1bWVudHMgdGhhdCBtYXRjaCB0aGUgcXVlcnkgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIExvY2FsU3RvcmUuXG4gICAgICogQHBhcmFtIHF1ZXJ5UmVzdWx0LnJlbW90ZUtleXMgLSBUaGUga2V5cyBvZiB0aGUgZG9jdW1lbnRzIHRoYXQgbWF0Y2ggdGhlXG4gICAgICogcXVlcnkgYWNjb3JkaW5nIHRvIHRoZSBiYWNrZW5kLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFZpZXdDaGFuZ2UgdGhhdCByZXN1bHRlZCBmcm9tIHRoaXMgc3luY2hyb25pemF0aW9uLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgcGEoZSkge1xuICAgICAgICB0aGlzLmxhID0gZS5ocywgdGhpcy5QYSA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5kYShlLmRvY3VtZW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q2hhbmdlcyh0LCAvKiBsaW1ib1Jlc29sdXRpb25FbmFibGVkPSAqLyAhMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB2aWV3IHNuYXBzaG90IGFzIGlmIHRoaXMgcXVlcnkgd2FzIGp1c3QgbGlzdGVuZWQgdG8uIENvbnRhaW5zXG4gICAgICogYSBkb2N1bWVudCBhZGQgZm9yIGV2ZXJ5IGV4aXN0aW5nIGRvY3VtZW50IGFuZCB0aGUgYGZyb21DYWNoZWAgYW5kXG4gICAgICogYGhhc1BlbmRpbmdXcml0ZXNgIHN0YXR1cyBvZiB0aGUgYWxyZWFkeSBlc3RhYmxpc2hlZCB2aWV3LlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgeWEoKSB7XG4gICAgICAgIHJldHVybiBWaWV3U25hcHNob3QuZnJvbUluaXRpYWxEb2N1bWVudHModGhpcy5xdWVyeSwgdGhpcy5UYSwgdGhpcy5tdXRhdGVkS2V5cywgMCAvKiBTeW5jU3RhdGUuTG9jYWwgKi8gPT09IHRoaXMuaGEsIHRoaXMuaGFzQ2FjaGVkUmVzdWx0cyk7XG4gICAgfVxufVxuXG4vKipcbiAqIFF1ZXJ5VmlldyBjb250YWlucyBhbGwgb2YgdGhlIGRhdGEgdGhhdCBTeW5jRW5naW5lIG5lZWRzIHRvIGtlZXAgdHJhY2sgb2YgZm9yXG4gKiBhIHBhcnRpY3VsYXIgcXVlcnkuXG4gKi9cbmNsYXNzIF9fUFJJVkFURV9RdWVyeVZpZXcge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSBpdHNlbGYuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqXG4gICAgICogVGhlIHRhcmdldCBudW1iZXIgY3JlYXRlZCBieSB0aGUgY2xpZW50IHRoYXQgaXMgdXNlZCBpbiB0aGUgd2F0Y2hcbiAgICAgKiBzdHJlYW0gdG8gaWRlbnRpZnkgdGhpcyBxdWVyeS5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgdmlldyBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0aW5nIHRoZSBmaW5hbCBtZXJnZWQgdHJ1dGggb2Ygd2hhdFxuICAgICAqIGRvY3MgYXJlIGluIHRoZSBxdWVyeS4gSXQgZ2V0cyBub3RpZmllZCBvZiBsb2NhbCBhbmQgcmVtb3RlIGNoYW5nZXMsXG4gICAgICogYW5kIGFwcGxpZXMgdGhlIHF1ZXJ5IGZpbHRlcnMgYW5kIGxpbWl0cyB0byBkZXRlcm1pbmUgdGhlIG1vc3QgY29ycmVjdFxuICAgICAqIHBvc3NpYmxlIHJlc3VsdHMuXG4gICAgICovXG4gICAgbikge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gZSwgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMudmlldyA9IG47XG4gICAgfVxufVxuXG4vKiogVHJhY2tzIGEgbGltYm8gcmVzb2x1dGlvbi4gKi8gY2xhc3MgTGltYm9SZXNvbHV0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHRoaXMua2V5ID0gZSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdG8gdHJ1ZSBvbmNlIHdlJ3ZlIHJlY2VpdmVkIGEgZG9jdW1lbnQuIFRoaXMgaXMgdXNlZCBpblxuICAgICAgICAgKiBnZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KCkgYW5kIHVsdGltYXRlbHkgdXNlZCBieSBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IgdG9cbiAgICAgICAgICogZGVjaWRlIHdoZXRoZXIgaXQgbmVlZHMgdG8gbWFudWZhY3R1cmUgYSBkZWxldGUgZXZlbnQgZm9yIHRoZSB0YXJnZXQgb25jZVxuICAgICAgICAgKiB0aGUgdGFyZ2V0IGlzIENVUlJFTlQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndhID0gITE7XG4gICAgfVxufVxuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIGBTeW5jRW5naW5lYCBjb29yZGluYXRpbmcgd2l0aCBvdGhlciBwYXJ0cyBvZiBTREsuXG4gKlxuICogVGhlIHBhcnRzIG9mIFN5bmNFbmdpbmUgdGhhdCBhY3QgYXMgYSBjYWxsYmFjayB0byBSZW1vdGVTdG9yZSBuZWVkIHRvIGJlXG4gKiByZWdpc3RlcmVkIGluZGl2aWR1YWxseS4gVGhpcyBpcyBkb25lIGluIGBzeW5jRW5naW5lV3JpdGUoKWAgYW5kXG4gKiBgc3luY0VuZ2luZUxpc3RlbigpYCAoYXMgd2VsbCBhcyBgYXBwbHlQcmltYXJ5U3RhdGUoKWApIGFzIHRoZXNlIG1ldGhvZHNcbiAqIHNlcnZlIGFzIGVudHJ5IHBvaW50cyB0byBSZW1vdGVTdG9yZSdzIGZ1bmN0aW9uYWxpdHkuXG4gKlxuICogTm90ZTogc29tZSBmaWVsZCBkZWZpbmVkIGluIHRoaXMgY2xhc3MgbWlnaHQgaGF2ZSBwdWJsaWMgYWNjZXNzIGxldmVsLCBidXRcbiAqIHRoZSBjbGFzcyBpcyBub3QgZXhwb3J0ZWQgc28gdGhleSBhcmUgb25seSBhY2Nlc3NpYmxlIGZyb20gdGhpcyBtb2R1bGUuXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBpbXBsZW1lbnQgb3B0aW9uYWwgZmVhdHVyZXMgKGxpa2UgYnVuZGxlcykgaW4gZnJlZVxuICogZnVuY3Rpb25zLCBzdWNoIHRoYXQgdGhleSBhcmUgdHJlZS1zaGFrZWFibGUuXG4gKi8gY2xhc3MgX19QUklWQVRFX1N5bmNFbmdpbmVJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCBcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE1hbmFnZXMgc3RhdGUgc3luY2hyb25pemF0aW9uIGluIG11bHRpLXRhYiBlbnZpcm9ubWVudHMuXG4gICAgciwgaSwgcykge1xuICAgICAgICB0aGlzLmxvY2FsU3RvcmUgPSBlLCB0aGlzLnJlbW90ZVN0b3JlID0gdCwgdGhpcy5ldmVudE1hbmFnZXIgPSBuLCB0aGlzLnNoYXJlZENsaWVudFN0YXRlID0gciwgXG4gICAgICAgIHRoaXMuY3VycmVudFVzZXIgPSBpLCB0aGlzLm1heENvbmN1cnJlbnRMaW1ib1Jlc29sdXRpb25zID0gcywgdGhpcy5TYSA9IHt9LCB0aGlzLmJhID0gbmV3IE9iamVjdE1hcCgoZSA9PiBfX1BSSVZBVEVfY2Fub25pZnlRdWVyeShlKSksIF9fUFJJVkFURV9xdWVyeUVxdWFscyksIFxuICAgICAgICB0aGlzLkRhID0gbmV3IE1hcCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUga2V5cyBvZiBkb2N1bWVudHMgdGhhdCBhcmUgaW4gbGltYm8gZm9yIHdoaWNoIHdlIGhhdmVuJ3QgeWV0IHN0YXJ0ZWQgYVxuICAgICAgICAgKiBsaW1ibyByZXNvbHV0aW9uIHF1ZXJ5LiBUaGUgc3RyaW5ncyBpbiB0aGlzIHNldCBhcmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nXG4gICAgICAgICAqIGBrZXkucGF0aC5jYW5vbmljYWxTdHJpbmcoKWAgd2hlcmUgYGtleWAgaXMgYSBgRG9jdW1lbnRLZXlgIG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGBTZXRgIHR5cGUgd2FzIGNob3NlbiBiZWNhdXNlIGl0IHByb3ZpZGVzIGVmZmljaWVudCBsb29rdXAgYW5kIHJlbW92YWxcbiAgICAgICAgICogb2YgYXJiaXRyYXJ5IGVsZW1lbnRzIGFuZCBpdCBhbHNvIG1haW50YWlucyBpbnNlcnRpb24gb3JkZXIsIHByb3ZpZGluZyB0aGVcbiAgICAgICAgICogZGVzaXJlZCBxdWV1ZS1saWtlIEZJRk8gc2VtYW50aWNzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5DYSA9IG5ldyBTZXQsIFxuICAgICAgICAvKipcbiAgICAgICAgICogS2VlcHMgdHJhY2sgb2YgdGhlIHRhcmdldCBJRCBmb3IgZWFjaCBkb2N1bWVudCB0aGF0IGlzIGluIGxpbWJvIHdpdGggYW5cbiAgICAgICAgICogYWN0aXZlIHRhcmdldC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmEgPSBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXBzIHRyYWNrIG9mIHRoZSBpbmZvcm1hdGlvbiBhYm91dCBhbiBhY3RpdmUgbGltYm8gcmVzb2x1dGlvbiBmb3IgZWFjaFxuICAgICAgICAgKiBhY3RpdmUgdGFyZ2V0IElEIHRoYXQgd2FzIHN0YXJ0ZWQgZm9yIHRoZSBwdXJwb3NlIG9mIGxpbWJvIHJlc29sdXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLkZhID0gbmV3IE1hcCwgdGhpcy5NYSA9IG5ldyBfX1BSSVZBVEVfUmVmZXJlbmNlU2V0LCBcbiAgICAgICAgLyoqIFN0b3JlcyB1c2VyIGNvbXBsZXRpb24gaGFuZGxlcnMsIGluZGV4ZWQgYnkgVXNlciBhbmQgQmF0Y2hJZC4gKi9cbiAgICAgICAgdGhpcy54YSA9IHt9LCBcbiAgICAgICAgLyoqIFN0b3JlcyB1c2VyIGNhbGxiYWNrcyB3YWl0aW5nIGZvciBhbGwgcGVuZGluZyB3cml0ZXMgdG8gYmUgYWNrbm93bGVkZ2VkLiAqL1xuICAgICAgICB0aGlzLk9hID0gbmV3IE1hcCwgdGhpcy5OYSA9IF9fUFJJVkFURV9UYXJnZXRJZEdlbmVyYXRvci5MbigpLCB0aGlzLm9ubGluZVN0YXRlID0gXCJVbmtub3duXCIgLyogT25saW5lU3RhdGUuVW5rbm93biAqLyAsIFxuICAgICAgICAvLyBUaGUgcHJpbWFyeSBzdGF0ZSBpcyBzZXQgdG8gYHRydWVgIG9yIGBmYWxzZWAgaW1tZWRpYXRlbHkgYWZ0ZXIgRmlyZXN0b3JlXG4gICAgICAgIC8vIHN0YXJ0dXAuIEluIHRoZSBpbnRlcmltLCBhIGNsaWVudCBzaG91bGQgb25seSBiZSBjb25zaWRlcmVkIHByaW1hcnkgaWZcbiAgICAgICAgLy8gYGlzUHJpbWFyeWAgaXMgdHJ1ZS5cbiAgICAgICAgdGhpcy5MYSA9IHZvaWQgMDtcbiAgICB9XG4gICAgZ2V0IGlzUHJpbWFyeUNsaWVudCgpIHtcbiAgICAgICAgcmV0dXJuICEwID09PSB0aGlzLkxhO1xuICAgIH1cbn1cblxuLyoqXG4gKiBJbml0aWF0ZXMgdGhlIG5ldyBsaXN0ZW4sIHJlc29sdmVzIHByb21pc2Ugd2hlbiBsaXN0ZW4gZW5xdWV1ZWQgdG8gdGhlXG4gKiBzZXJ2ZXIuIEFsbCB0aGUgc3Vic2VxdWVudCB2aWV3IHNuYXBzaG90cyBvciBlcnJvcnMgYXJlIHNlbnQgdG8gdGhlXG4gKiBzdWJzY3JpYmVkIGhhbmRsZXJzLiBSZXR1cm5zIHRoZSBpbml0aWFsIHNuYXBzaG90LlxuICovXG5hc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfc3luY0VuZ2luZUxpc3RlbihlLCB0LCBuID0gITApIHtcbiAgICBjb25zdCByID0gX19QUklWQVRFX2Vuc3VyZVdhdGNoQ2FsbGJhY2tzKGUpO1xuICAgIGxldCBpO1xuICAgIGNvbnN0IHMgPSByLmJhLmdldCh0KTtcbiAgICByZXR1cm4gcyA/IChcbiAgICAvLyBQT1JUSU5HIE5PVEU6IFdpdGggTXVsdGktVGFiIFdlYiwgaXQgaXMgcG9zc2libGUgdGhhdCBhIHF1ZXJ5IHZpZXdcbiAgICAvLyBhbHJlYWR5IGV4aXN0cyB3aGVuIEV2ZW50TWFuYWdlciBjYWxscyB1cyBmb3IgdGhlIGZpcnN0IHRpbWUuIFRoaXNcbiAgICAvLyBoYXBwZW5zIHdoZW4gdGhlIHByaW1hcnkgdGFiIGlzIGFscmVhZHkgbGlzdGVuaW5nIHRvIHRoaXMgcXVlcnkgb25cbiAgICAvLyBiZWhhbGYgb2YgYW5vdGhlciB0YWIgYW5kIHRoZSB1c2VyIG9mIHRoZSBwcmltYXJ5IGFsc28gc3RhcnRzIGxpc3RlbmluZ1xuICAgIC8vIHRvIHRoZSBxdWVyeS4gRXZlbnRNYW5hZ2VyIHdpbGwgbm90IGhhdmUgYW4gYXNzaWduZWQgdGFyZ2V0IElEIGluIHRoaXNcbiAgICAvLyBjYXNlIGFuZCBjYWxscyBgbGlzdGVuYCB0byBvYnRhaW4gdGhpcyBJRC5cbiAgICByLnNoYXJlZENsaWVudFN0YXRlLmFkZExvY2FsUXVlcnlUYXJnZXQocy50YXJnZXRJZCksIGkgPSBzLnZpZXcueWEoKSkgOiBpID0gYXdhaXQgX19QUklWQVRFX2FsbG9jYXRlVGFyZ2V0QW5kTWF5YmVMaXN0ZW4ociwgdCwgbiwgXG4gICAgLyoqIHNob3VsZEluaXRpYWxpemVWaWV3PSAqLyAhMCksIGk7XG59XG5cbi8qKiBRdWVyeSBoYXMgYmVlbiBsaXN0ZW5pbmcgdG8gdGhlIGNhY2hlLCBhbmQgdHJpZXMgdG8gaW5pdGlhdGUgdGhlIHJlbW90ZSBzdG9yZSBsaXN0ZW4gKi8gYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3RyaWdnZXJSZW1vdGVTdG9yZUxpc3RlbihlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9lbnN1cmVXYXRjaENhbGxiYWNrcyhlKTtcbiAgICBhd2FpdCBfX1BSSVZBVEVfYWxsb2NhdGVUYXJnZXRBbmRNYXliZUxpc3RlbihuLCB0LCBcbiAgICAvKiogc2hvdWxkTGlzdGVuVG9SZW1vdGU9ICovICEwLCBcbiAgICAvKiogc2hvdWxkSW5pdGlhbGl6ZVZpZXc9ICovICExKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX2FsbG9jYXRlVGFyZ2V0QW5kTWF5YmVMaXN0ZW4oZSwgdCwgbiwgcikge1xuICAgIGNvbnN0IGkgPSBhd2FpdCBfX1BSSVZBVEVfbG9jYWxTdG9yZUFsbG9jYXRlVGFyZ2V0KGUubG9jYWxTdG9yZSwgX19QUklWQVRFX3F1ZXJ5VG9UYXJnZXQodCkpLCBzID0gaS50YXJnZXRJZCwgbyA9IG4gPyBlLnNoYXJlZENsaWVudFN0YXRlLmFkZExvY2FsUXVlcnlUYXJnZXQocykgOiBcIm5vdC1jdXJyZW50XCI7XG4gICAgbGV0IF87XG4gICAgcmV0dXJuIHIgJiYgKF8gPSBhd2FpdCBfX1BSSVZBVEVfaW5pdGlhbGl6ZVZpZXdBbmRDb21wdXRlU25hcHNob3QoZSwgdCwgcywgXCJjdXJyZW50XCIgPT09IG8sIGkucmVzdW1lVG9rZW4pKSwgXG4gICAgZS5pc1ByaW1hcnlDbGllbnQgJiYgbiAmJiBfX1BSSVZBVEVfcmVtb3RlU3RvcmVMaXN0ZW4oZS5yZW1vdGVTdG9yZSwgaSksIF87XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgdmlldyBmb3IgYSBwcmV2aW91c2x5IHVua25vd24gcXVlcnkgYW5kIGNvbXB1dGVzIGl0cyBpbml0aWFsXG4gKiBzbmFwc2hvdC5cbiAqLyBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfaW5pdGlhbGl6ZVZpZXdBbmRDb21wdXRlU25hcHNob3QoZSwgdCwgbiwgciwgaSkge1xuICAgIC8vIFBPUlRJTkcgTk9URTogT24gV2ViIG9ubHksIHdlIGluamVjdCB0aGUgY29kZSB0aGF0IHJlZ2lzdGVycyBuZXcgTGltYm9cbiAgICAvLyB0YXJnZXRzIGJhc2VkIG9uIHZpZXcgY2hhbmdlcy4gVGhpcyBhbGxvd3MgdXMgdG8gb25seSBkZXBlbmQgb24gTGltYm9cbiAgICAvLyBjaGFuZ2VzIHdoZW4gdXNlciBjb2RlIGluY2x1ZGVzIHF1ZXJpZXMuXG4gICAgZS5CYSA9ICh0LCBuLCByKSA9PiBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfYXBwbHlEb2NDaGFuZ2VzKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgbGV0IGkgPSB0LnZpZXcuZGEobik7XG4gICAgICAgIGkuWGkgJiYgKFxuICAgICAgICAvLyBUaGUgcXVlcnkgaGFzIGEgbGltaXQgYW5kIHNvbWUgZG9jcyB3ZXJlIHJlbW92ZWQsIHNvIHdlIG5lZWRcbiAgICAgICAgLy8gdG8gcmUtcnVuIHRoZSBxdWVyeSBhZ2FpbnN0IHRoZSBsb2NhbCBzdG9yZSB0byBtYWtlIHN1cmUgd2VcbiAgICAgICAgLy8gZGlkbid0IGxvc2UgYW55IGdvb2QgZG9jcyB0aGF0IGhhZCBiZWVuIHBhc3QgdGhlIGxpbWl0LlxuICAgICAgICBpID0gYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVFeGVjdXRlUXVlcnkoZS5sb2NhbFN0b3JlLCB0LnF1ZXJ5LCBcbiAgICAgICAgLyogdXNlUHJldmlvdXNSZXN1bHRzPSAqLyAhMSkudGhlbigoKHtkb2N1bWVudHM6IGV9KSA9PiB0LnZpZXcuZGEoZSwgaSkpKSk7XG4gICAgICAgIGNvbnN0IHMgPSByICYmIHIudGFyZ2V0Q2hhbmdlcy5nZXQodC50YXJnZXRJZCksIG8gPSByICYmIG51bGwgIT0gci50YXJnZXRNaXNtYXRjaGVzLmdldCh0LnRhcmdldElkKSwgXyA9IHQudmlldy5hcHBseUNoYW5nZXMoaSwgXG4gICAgICAgIC8qIGxpbWJvUmVzb2x1dGlvbkVuYWJsZWQ9ICovIGUuaXNQcmltYXJ5Q2xpZW50LCBzLCBvKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV91cGRhdGVUcmFja2VkTGltYm9zKGUsIHQudGFyZ2V0SWQsIF8uZmEpLCBfLnNuYXBzaG90O1xuICAgIH0oZSwgdCwgbiwgcik7XG4gICAgY29uc3QgcyA9IGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlRXhlY3V0ZVF1ZXJ5KGUubG9jYWxTdG9yZSwgdCwgXG4gICAgLyogdXNlUHJldmlvdXNSZXN1bHRzPSAqLyAhMCksIG8gPSBuZXcgX19QUklWQVRFX1ZpZXcodCwgcy5ocyksIF8gPSBvLmRhKHMuZG9jdW1lbnRzKSwgYSA9IFRhcmdldENoYW5nZS5jcmVhdGVTeW50aGVzaXplZFRhcmdldENoYW5nZUZvckN1cnJlbnRDaGFuZ2UobiwgciAmJiBcIk9mZmxpbmVcIiAvKiBPbmxpbmVTdGF0ZS5PZmZsaW5lICovICE9PSBlLm9ubGluZVN0YXRlLCBpKSwgdSA9IG8uYXBwbHlDaGFuZ2VzKF8sIFxuICAgIC8qIGxpbWJvUmVzb2x1dGlvbkVuYWJsZWQ9ICovIGUuaXNQcmltYXJ5Q2xpZW50LCBhKTtcbiAgICBfX1BSSVZBVEVfdXBkYXRlVHJhY2tlZExpbWJvcyhlLCBuLCB1LmZhKTtcbiAgICBjb25zdCBjID0gbmV3IF9fUFJJVkFURV9RdWVyeVZpZXcodCwgbiwgbyk7XG4gICAgcmV0dXJuIGUuYmEuc2V0KHQsIGMpLCBlLkRhLmhhcyhuKSA/IGUuRGEuZ2V0KG4pLnB1c2godCkgOiBlLkRhLnNldChuLCBbIHQgXSksIHUuc25hcHNob3Q7XG59XG5cbi8qKiBTdG9wcyBsaXN0ZW5pbmcgdG8gdGhlIHF1ZXJ5LiAqLyBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfc3luY0VuZ2luZVVubGlzdGVuKGUsIHQsIG4pIHtcbiAgICBjb25zdCByID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgaSA9IHIuYmEuZ2V0KHQpLCBzID0gci5EYS5nZXQoaS50YXJnZXRJZCk7XG4gICAgaWYgKHMubGVuZ3RoID4gMSkgcmV0dXJuIHIuRGEuc2V0KGkudGFyZ2V0SWQsIHMuZmlsdGVyKChlID0+ICFfX1BSSVZBVEVfcXVlcnlFcXVhbHMoZSwgdCkpKSksIFxuICAgIHZvaWQgci5iYS5kZWxldGUodCk7XG4gICAgLy8gTm8gb3RoZXIgcXVlcmllcyBhcmUgbWFwcGVkIHRvIHRoZSB0YXJnZXQsIGNsZWFuIHVwIHRoZSBxdWVyeSBhbmQgdGhlIHRhcmdldC5cbiAgICAgICAgaWYgKHIuaXNQcmltYXJ5Q2xpZW50KSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBsb2NhbCBxdWVyeSB0YXJnZXQgZmlyc3QgdG8gYWxsb3cgdXMgdG8gdmVyaWZ5XG4gICAgICAgIC8vIHdoZXRoZXIgYW55IG90aGVyIGNsaWVudCBpcyBzdGlsbCBpbnRlcmVzdGVkIGluIHRoaXMgdGFyZ2V0LlxuICAgICAgICByLnNoYXJlZENsaWVudFN0YXRlLnJlbW92ZUxvY2FsUXVlcnlUYXJnZXQoaS50YXJnZXRJZCk7XG4gICAgICAgIHIuc2hhcmVkQ2xpZW50U3RhdGUuaXNBY3RpdmVRdWVyeVRhcmdldChpLnRhcmdldElkKSB8fCBhd2FpdCBfX1BSSVZBVEVfbG9jYWxTdG9yZVJlbGVhc2VUYXJnZXQoci5sb2NhbFN0b3JlLCBpLnRhcmdldElkLCBcbiAgICAgICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMSkudGhlbigoKCkgPT4ge1xuICAgICAgICAgICAgci5zaGFyZWRDbGllbnRTdGF0ZS5jbGVhclF1ZXJ5U3RhdGUoaS50YXJnZXRJZCksIG4gJiYgX19QUklWQVRFX3JlbW90ZVN0b3JlVW5saXN0ZW4oci5yZW1vdGVTdG9yZSwgaS50YXJnZXRJZCksIFxuICAgICAgICAgICAgX19QUklWQVRFX3JlbW92ZUFuZENsZWFudXBUYXJnZXQociwgaS50YXJnZXRJZCk7XG4gICAgICAgIH0pKS5jYXRjaChfX1BSSVZBVEVfaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzKTtcbiAgICB9IGVsc2UgX19QUklWQVRFX3JlbW92ZUFuZENsZWFudXBUYXJnZXQociwgaS50YXJnZXRJZCksIGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlUmVsZWFzZVRhcmdldChyLmxvY2FsU3RvcmUsIGkudGFyZ2V0SWQsIFxuICAgIC8qa2VlcFBlcnNpc3RlZFRhcmdldERhdGE9Ki8gITApO1xufVxuXG4vKiogVW5saXN0ZW5zIHRvIHRoZSByZW1vdGUgc3RvcmUgd2hpbGUgc3RpbGwgbGlzdGVuaW5nIHRvIHRoZSBjYWNoZS4gKi8gYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3RyaWdnZXJSZW1vdGVTdG9yZVVubGlzdGVuKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgciA9IG4uYmEuZ2V0KHQpLCBpID0gbi5EYS5nZXQoci50YXJnZXRJZCk7XG4gICAgbi5pc1ByaW1hcnlDbGllbnQgJiYgMSA9PT0gaS5sZW5ndGggJiYgKFxuICAgIC8vIFBPUlRJTkcgTk9URTogVW5yZWdpc3RlciB0aGUgdGFyZ2V0IElEIHdpdGggbG9jYWwgRmlyZXN0b3JlIGNsaWVudCBhc1xuICAgIC8vIHdhdGNoIHRhcmdldC5cbiAgICBuLnNoYXJlZENsaWVudFN0YXRlLnJlbW92ZUxvY2FsUXVlcnlUYXJnZXQoci50YXJnZXRJZCksIF9fUFJJVkFURV9yZW1vdGVTdG9yZVVubGlzdGVuKG4ucmVtb3RlU3RvcmUsIHIudGFyZ2V0SWQpKTtcbn1cblxuLyoqXG4gKiBJbml0aWF0ZXMgdGhlIHdyaXRlIG9mIGxvY2FsIG11dGF0aW9uIGJhdGNoIHdoaWNoIGludm9sdmVzIGFkZGluZyB0aGVcbiAqIHdyaXRlcyB0byB0aGUgbXV0YXRpb24gcXVldWUsIG5vdGlmeWluZyB0aGUgcmVtb3RlIHN0b3JlIGFib3V0IG5ld1xuICogbXV0YXRpb25zIGFuZCByYWlzaW5nIGV2ZW50cyBmb3IgYW55IGNoYW5nZXMgdGhpcyB3cml0ZSBjYXVzZWQuXG4gKlxuICogVGhlIHByb21pc2UgcmV0dXJuZWQgYnkgdGhpcyBjYWxsIGlzIHJlc29sdmVkIHdoZW4gdGhlIGFib3ZlIHN0ZXBzXG4gKiBoYXZlIGNvbXBsZXRlZCwgKm5vdCogd2hlbiB0aGUgd3JpdGUgd2FzIGFja2VkIGJ5IHRoZSBiYWNrZW5kLiBUaGVcbiAqIHVzZXJDYWxsYmFjayBpcyByZXNvbHZlZCBvbmNlIHRoZSB3cml0ZSB3YXMgYWNrZWQvcmVqZWN0ZWQgYnkgdGhlXG4gKiBiYWNrZW5kIChvciBmYWlsZWQgbG9jYWxseSBmb3IgYW55IG90aGVyIHJlYXNvbikuXG4gKi8gYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNFbmdpbmVXcml0ZShlLCB0LCBuKSB7XG4gICAgY29uc3QgciA9IF9fUFJJVkFURV9zeW5jRW5naW5lRW5zdXJlV3JpdGVDYWxsYmFja3MoZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IGZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlV3JpdGVMb2NhbGx5KGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCByID0gVGltZXN0YW1wLm5vdygpLCBpID0gdC5yZWR1Y2UoKChlLCB0KSA9PiBlLmFkZCh0LmtleSkpLCBfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQoKSk7XG4gICAgICAgICAgICBsZXQgcywgbztcbiAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiTG9jYWxseSB3cml0ZSBtdXRhdGlvbnNcIiwgXCJyZWFkd3JpdGVcIiwgKGUgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hpY2gga2V5cyBkbyBub3QgaGF2ZSBhIHJlbW90ZSB2ZXJzaW9uIGluIHRoZSBjYWNoZSwgdGhpc1xuICAgICAgICAgICAgICAgIC8vIGlzIG5lZWRlZCB0byBjcmVhdGUgdGhlIHJpZ2h0IG92ZXJsYXkgbXV0YXRpb246IGlmIG5vIHJlbW90ZSB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgLy8gcHJlc2VudHMsIHdlIGRvIG5vdCBuZWVkIHRvIGNyZWF0ZSBvdmVybGF5cyBhcyBwYXRjaCBtdXRhdGlvbnMuXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhPdmVybGF5KTogSXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIGRldGVybWluZSB0aGlzPyBVc2luZyB0aGVcbiAgICAgICAgICAgICAgICAvLyAgZG9jdW1lbnQgdmVyc2lvbiBkb2VzIG5vdCB3b3JrIGJlY2F1c2UgbG9jYWwgbXV0YXRpb25zIHNldCB0aGVtIGJhY2tcbiAgICAgICAgICAgICAgICAvLyAgdG8gMC5cbiAgICAgICAgICAgICAgICBsZXQgXyA9IF9fUFJJVkFURV9tdXRhYmxlRG9jdW1lbnRNYXAoKSwgYSA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLm9zLmdldEVudHJpZXMoZSwgaSkubmV4dCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIF8gPSBlLCBfLmZvckVhY2goKChlLCB0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmlzVmFsaWREb2N1bWVudCgpIHx8IChhID0gYS5hZGQoZSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpLm5leHQoKCgpID0+IG4ubG9jYWxEb2N1bWVudHMuZ2V0T3ZlcmxheWVkRG9jdW1lbnRzKGUsIF8pKSkubmV4dCgoaSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSBpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm9uLWlkZW1wb3RlbnQgbXV0YXRpb25zIChzdWNoIGFzIGBGaWVsZFZhbHVlLmluY3JlbWVudCgpYCksXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHJlY29yZCB0aGUgYmFzZSBzdGF0ZSBpbiBhIHNlcGFyYXRlIHBhdGNoIG11dGF0aW9uLiBUaGlzIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIGxhdGVyIHVzZWQgdG8gZ3VhcmFudGVlIGNvbnNpc3RlbnQgdmFsdWVzIGFuZCBwcmV2ZW50cyBmbGlja2VyXG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW4gaWYgdGhlIGJhY2tlbmQgc2VuZHMgdXMgYW4gdXBkYXRlIHRoYXQgYWxyZWFkeSBpbmNsdWRlcyBvdXJcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJhbnNmb3JtLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX211dGF0aW9uRXh0cmFjdEJhc2VWYWx1ZShlLCBzLmdldChlLmtleSkub3ZlcmxheWVkRG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSB0ICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogVGhlIGJhc2Ugc3RhdGUgc2hvdWxkIG9ubHkgYmUgYXBwbGllZCBpZiB0aGVyZSdzIHNvbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGRvY3VtZW50IHRvIG92ZXJyaWRlLCBzbyB1c2UgYSBQcmVjb25kaXRpb24gb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4aXN0cz10cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnB1c2gobmV3IF9fUFJJVkFURV9QYXRjaE11dGF0aW9uKGUua2V5LCB0LCBfX1BSSVZBVEVfZXh0cmFjdEZpZWxkTWFzayh0LnZhbHVlLm1hcFZhbHVlKSwgUHJlY29uZGl0aW9uLmV4aXN0cyghMCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5tdXRhdGlvblF1ZXVlLmFkZE11dGF0aW9uQmF0Y2goZSwgciwgbywgdCk7XG4gICAgICAgICAgICAgICAgfSkpLm5leHQoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvID0gdDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHQuYXBwbHlUb0xvY2FsRG9jdW1lbnRTZXQocywgYSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmRvY3VtZW50T3ZlcmxheUNhY2hlLnNhdmVPdmVybGF5cyhlLCB0LmJhdGNoSWQsIHIpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKS50aGVuKCgoKSA9PiAoe1xuICAgICAgICAgICAgICAgIGJhdGNoSWQ6IG8uYmF0Y2hJZCxcbiAgICAgICAgICAgICAgICBjaGFuZ2VzOiBfX1BSSVZBVEVfY29udmVydE92ZXJsYXllZERvY3VtZW50TWFwVG9Eb2N1bWVudE1hcChzKVxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfShyLmxvY2FsU3RvcmUsIHQpO1xuICAgICAgICByLnNoYXJlZENsaWVudFN0YXRlLmFkZFBlbmRpbmdNdXRhdGlvbihlLmJhdGNoSWQpLCBmdW5jdGlvbiBfX1BSSVZBVEVfYWRkTXV0YXRpb25DYWxsYmFjayhlLCB0LCBuKSB7XG4gICAgICAgICAgICBsZXQgciA9IGUueGFbZS5jdXJyZW50VXNlci50b0tleSgpXTtcbiAgICAgICAgICAgIHIgfHwgKHIgPSBuZXcgU29ydGVkTWFwKF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKSk7XG4gICAgICAgICAgICByID0gci5pbnNlcnQodCwgbiksIGUueGFbZS5jdXJyZW50VXNlci50b0tleSgpXSA9IHI7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBSZXNvbHZlcyBvciByZWplY3RzIHRoZSB1c2VyIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gYmF0Y2ggYW5kIHRoZW4gZGlzY2FyZHNcbiAqIGl0LlxuICovIChyLCBlLmJhdGNoSWQsIG4pLCBhd2FpdCBfX1BSSVZBVEVfc3luY0VuZ2luZUVtaXROZXdTbmFwc0FuZE5vdGlmeUxvY2FsU3RvcmUociwgZS5jaGFuZ2VzKSwgXG4gICAgICAgIGF3YWl0IF9fUFJJVkFURV9maWxsV3JpdGVQaXBlbGluZShyLnJlbW90ZVN0b3JlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIElmIHdlIGNhbid0IHBlcnNpc3QgdGhlIG11dGF0aW9uLCB3ZSByZWplY3QgdGhlIHVzZXIgY2FsbGJhY2sgYW5kXG4gICAgICAgIC8vIGRvbid0IHNlbmQgdGhlIG11dGF0aW9uLiBUaGUgdXNlciBjYW4gdGhlbiByZXRyeSB0aGUgd3JpdGUuXG4gICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfd3JhcEluVXNlckVycm9ySWZSZWNvdmVyYWJsZShlLCBcIkZhaWxlZCB0byBwZXJzaXN0IHdyaXRlXCIpO1xuICAgICAgICBuLnJlamVjdCh0KTtcbiAgICB9XG59XG5cbi8qKlxuICogQXBwbGllcyBvbmUgcmVtb3RlIGV2ZW50IHRvIHRoZSBzeW5jIGVuZ2luZSwgbm90aWZ5aW5nIGFueSB2aWV3cyBvZiB0aGVcbiAqIGNoYW5nZXMsIGFuZCByZWxlYXNpbmcgYW55IHBlbmRpbmcgbXV0YXRpb24gYmF0Y2hlcyB0aGF0IHdvdWxkIGJlY29tZVxuICogdmlzaWJsZSBiZWNhdXNlIG9mIHRoZSBzbmFwc2hvdCB2ZXJzaW9uIHRoZSByZW1vdGUgZXZlbnQgY29udGFpbnMuXG4gKi8gYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseVJlbW90ZUV2ZW50KGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBlID0gYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVBcHBseVJlbW90ZUV2ZW50VG9Mb2NhbENhY2hlKG4ubG9jYWxTdG9yZSwgdCk7XG4gICAgICAgIC8vIFVwZGF0ZSBgcmVjZWl2ZWREb2N1bWVudGAgYXMgYXBwcm9wcmlhdGUgZm9yIGFueSBsaW1ibyB0YXJnZXRzLlxuICAgICAgICAgICAgICAgIHQudGFyZ2V0Q2hhbmdlcy5mb3JFYWNoKCgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IG4uRmEuZ2V0KHQpO1xuICAgICAgICAgICAgciAmJiAoXG4gICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIGEgbGltYm8gcmVzb2x1dGlvbiBsb29rdXAsIGl0J3MgZm9yIGEgc2luZ2xlIGRvY3VtZW50XG4gICAgICAgICAgICAvLyBhbmQgaXQgY291bGQgYmUgYWRkZWQsIG1vZGlmaWVkLCBvciByZW1vdmVkLCBidXQgbm90IGEgY29tYmluYXRpb24uXG4gICAgICAgICAgICBfX1BSSVZBVEVfaGFyZEFzc2VydChlLmFkZGVkRG9jdW1lbnRzLnNpemUgKyBlLm1vZGlmaWVkRG9jdW1lbnRzLnNpemUgKyBlLnJlbW92ZWREb2N1bWVudHMuc2l6ZSA8PSAxKSwgXG4gICAgICAgICAgICBlLmFkZGVkRG9jdW1lbnRzLnNpemUgPiAwID8gci53YSA9ICEwIDogZS5tb2RpZmllZERvY3VtZW50cy5zaXplID4gMCA/IF9fUFJJVkFURV9oYXJkQXNzZXJ0KHIud2EpIDogZS5yZW1vdmVkRG9jdW1lbnRzLnNpemUgPiAwICYmIChfX1BSSVZBVEVfaGFyZEFzc2VydChyLndhKSwgXG4gICAgICAgICAgICByLndhID0gITEpKTtcbiAgICAgICAgfSkpLCBhd2FpdCBfX1BSSVZBVEVfc3luY0VuZ2luZUVtaXROZXdTbmFwc0FuZE5vdGlmeUxvY2FsU3RvcmUobiwgZSwgdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhd2FpdCBfX1BSSVZBVEVfaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzKGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIGFuIE9ubGluZVN0YXRlIGNoYW5nZSB0byB0aGUgc3luYyBlbmdpbmUgYW5kIG5vdGlmaWVzIGFueSB2aWV3cyBvZlxuICogdGhlIGNoYW5nZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfc3luY0VuZ2luZUFwcGx5T25saW5lU3RhdGVDaGFuZ2UoZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIC8vIElmIHdlIGFyZSB0aGUgc2Vjb25kYXJ5IGNsaWVudCwgd2UgZXhwbGljaXRseSBpZ25vcmUgdGhlIHJlbW90ZSBzdG9yZSdzXG4gICAgLy8gb25saW5lIHN0YXRlICh0aGUgbG9jYWwgY2xpZW50IG1heSBnbyBvZmZsaW5lLCBldmVuIHRob3VnaCB0aGUgcHJpbWFyeVxuICAgIC8vIHRhYiByZW1haW5zIG9ubGluZSkgYW5kIG9ubHkgYXBwbHkgdGhlIHByaW1hcnkgdGFiJ3Mgb25saW5lIHN0YXRlIGZyb21cbiAgICAvLyBTaGFyZWRDbGllbnRTdGF0ZS5cbiAgICAgICAgaWYgKHIuaXNQcmltYXJ5Q2xpZW50ICYmIDAgLyogT25saW5lU3RhdGVTb3VyY2UuUmVtb3RlU3RvcmUgKi8gPT09IG4gfHwgIXIuaXNQcmltYXJ5Q2xpZW50ICYmIDEgLyogT25saW5lU3RhdGVTb3VyY2UuU2hhcmVkQ2xpZW50U3RhdGUgKi8gPT09IG4pIHtcbiAgICAgICAgY29uc3QgZSA9IFtdO1xuICAgICAgICByLmJhLmZvckVhY2goKChuLCByKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gci52aWV3LmpfKHQpO1xuICAgICAgICAgICAgaS5zbmFwc2hvdCAmJiBlLnB1c2goaS5zbmFwc2hvdCk7XG4gICAgICAgIH0pKSwgZnVuY3Rpb24gX19QUklWQVRFX2V2ZW50TWFuYWdlck9uT25saW5lU3RhdGVDaGFuZ2UoZSwgdCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgICAgICAgICBuLm9ubGluZVN0YXRlID0gdDtcbiAgICAgICAgICAgIGxldCByID0gITE7XG4gICAgICAgICAgICBuLnF1ZXJpZXMuZm9yRWFjaCgoKGUsIG4pID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2Ygbi5VXykgXG4gICAgICAgICAgICAgICAgLy8gUnVuIGdsb2JhbCBzbmFwc2hvdCBsaXN0ZW5lcnMgaWYgYSBjb25zaXN0ZW50IHNuYXBzaG90IGhhcyBiZWVuIGVtaXR0ZWQuXG4gICAgICAgICAgICAgICAgZS5qXyh0KSAmJiAociA9ICEwKTtcbiAgICAgICAgICAgIH0pKSwgciAmJiBfX1BSSVZBVEVfcmFpc2VTbmFwc2hvdHNJblN5bmNFdmVudChuKTtcbiAgICAgICAgfShyLmV2ZW50TWFuYWdlciwgdCksIGUubGVuZ3RoICYmIHIuU2EuaF8oZSksIHIub25saW5lU3RhdGUgPSB0LCByLmlzUHJpbWFyeUNsaWVudCAmJiByLnNoYXJlZENsaWVudFN0YXRlLnNldE9ubGluZVN0YXRlKHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWplY3RzIHRoZSBsaXN0ZW4gZm9yIHRoZSBnaXZlbiB0YXJnZXRJRC4gVGhpcyBjYW4gYmUgdHJpZ2dlcmVkIGJ5IHRoZVxuICogYmFja2VuZCBmb3IgYW55IGFjdGl2ZSB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHN5bmNFbmdpbmUgLSBUaGUgc3luYyBlbmdpbmUgaW1wbGVtZW50YXRpb24uXG4gKiBAcGFyYW0gdGFyZ2V0SWQgLSBUaGUgdGFyZ2V0SUQgY29ycmVzcG9uZHMgdG8gb25lIHByZXZpb3VzbHkgaW5pdGlhdGVkIGJ5IHRoZVxuICogdXNlciBhcyBwYXJ0IG9mIFRhcmdldERhdGEgcGFzc2VkIHRvIGxpc3RlbigpIG9uIFJlbW90ZVN0b3JlLlxuICogQHBhcmFtIGVyciAtIEEgZGVzY3JpcHRpb24gb2YgdGhlIGNvbmRpdGlvbiB0aGF0IGhhcyBmb3JjZWQgdGhlIHJlamVjdGlvbi5cbiAqIE5lYXJseSBhbHdheXMgdGhpcyB3aWxsIGJlIGFuIGluZGljYXRpb24gdGhhdCB0aGUgdXNlciBpcyBubyBsb25nZXJcbiAqIGF1dGhvcml6ZWQgdG8gc2VlIHRoZSBkYXRhIG1hdGNoaW5nIHRoZSB0YXJnZXQuXG4gKi8gYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNFbmdpbmVSZWplY3RMaXN0ZW4oZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXG4gICAgICAgIHIuc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlUXVlcnlTdGF0ZSh0LCBcInJlamVjdGVkXCIsIG4pO1xuICAgIGNvbnN0IGkgPSByLkZhLmdldCh0KSwgcyA9IGkgJiYgaS5rZXk7XG4gICAgaWYgKHMpIHtcbiAgICAgICAgLy8gVE9ETyhrbGltdCk6IFdlIHJlYWxseSBvbmx5IHNob3VsZCBkbyB0aGUgZm9sbG93aW5nIG9uIHBlcm1pc3Npb25cbiAgICAgICAgLy8gZGVuaWVkIGVycm9ycywgYnV0IHdlIGRvbid0IGhhdmUgdGhlIGNhdXNlIGNvZGUgaGVyZS5cbiAgICAgICAgLy8gSXQncyBhIGxpbWJvIGRvYy4gQ3JlYXRlIGEgc3ludGhldGljIGV2ZW50IHNheWluZyBpdCB3YXMgZGVsZXRlZC5cbiAgICAgICAgLy8gVGhpcyBpcyBraW5kIG9mIGEgaGFjay4gSWRlYWxseSwgd2Ugd291bGQgaGF2ZSBhIG1ldGhvZCBpbiB0aGUgbG9jYWxcbiAgICAgICAgLy8gc3RvcmUgdG8gcHVyZ2UgYSBkb2N1bWVudC4gSG93ZXZlciwgaXQgd291bGQgYmUgdHJpY2t5IHRvIGtlZXAgYWxsIG9mXG4gICAgICAgIC8vIHRoZSBsb2NhbCBzdG9yZSdzIGludmFyaWFudHMgd2l0aCBhbm90aGVyIG1ldGhvZC5cbiAgICAgICAgbGV0IGUgPSBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpO1xuICAgICAgICAvLyBUT0RPKGIvMjE3MTg5MjE2KTogVGhpcyBsaW1ibyBkb2N1bWVudCBzaG91bGQgaWRlYWxseSBoYXZlIGEgcmVhZCB0aW1lLFxuICAgICAgICAvLyBzbyB0aGF0IGl0IGlzIHBpY2tlZCB1cCBieSBhbnkgcmVhZC10aW1lIGJhc2VkIHNjYW5zLiBUaGUgYmFja2VuZCxcbiAgICAgICAgLy8gaG93ZXZlciwgZG9lcyBub3Qgc2VuZCBhIHJlYWQgdGltZSBmb3IgdGFyZ2V0IHJlbW92YWxzLlxuICAgICAgICAgICAgICAgIGUgPSBlLmluc2VydChzLCBNdXRhYmxlRG9jdW1lbnQubmV3Tm9Eb2N1bWVudChzLCBTbmFwc2hvdFZlcnNpb24ubWluKCkpKTtcbiAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpLmFkZChzKSwgaSA9IG5ldyBSZW1vdGVFdmVudChTbmFwc2hvdFZlcnNpb24ubWluKCksIFxuICAgICAgICAvKiB0YXJnZXRDaGFuZ2VzPSAqLyBuZXcgTWFwLCBcbiAgICAgICAgLyogdGFyZ2V0TWlzbWF0Y2hlcz0gKi8gbmV3IFNvcnRlZE1hcChfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvciksIGUsIG4pO1xuICAgICAgICBhd2FpdCBfX1BSSVZBVEVfc3luY0VuZ2luZUFwcGx5UmVtb3RlRXZlbnQociwgaSksIFxuICAgICAgICAvLyBTaW5jZSB0aGlzIHF1ZXJ5IGZhaWxlZCwgd2Ugd29uJ3Qgd2FudCB0byBtYW51YWxseSB1bmxpc3RlbiB0byBpdC5cbiAgICAgICAgLy8gV2Ugb25seSByZW1vdmUgaXQgZnJvbSBib29ra2VlcGluZyBhZnRlciB3ZSBzdWNjZXNzZnVsbHkgYXBwbGllZCB0aGVcbiAgICAgICAgLy8gUmVtb3RlRXZlbnQuIElmIGBhcHBseVJlbW90ZUV2ZW50KClgIHRocm93cywgd2Ugd2FudCB0byByZS1saXN0ZW4gdG9cbiAgICAgICAgLy8gdGhpcyBxdWVyeSB3aGVuIHRoZSBSZW1vdGVTdG9yZSByZXN0YXJ0cyB0aGUgV2F0Y2ggc3RyZWFtLCB3aGljaCBzaG91bGRcbiAgICAgICAgLy8gcmUtdHJpZ2dlciB0aGUgdGFyZ2V0IGZhaWx1cmUuXG4gICAgICAgIHIudmEgPSByLnZhLnJlbW92ZShzKSwgci5GYS5kZWxldGUodCksIF9fUFJJVkFURV9wdW1wRW5xdWV1ZWRMaW1ib1Jlc29sdXRpb25zKHIpO1xuICAgIH0gZWxzZSBhd2FpdCBfX1BSSVZBVEVfbG9jYWxTdG9yZVJlbGVhc2VUYXJnZXQoci5sb2NhbFN0b3JlLCB0LCBcbiAgICAvKiBrZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YSAqLyAhMSkudGhlbigoKCkgPT4gX19QUklWQVRFX3JlbW92ZUFuZENsZWFudXBUYXJnZXQociwgdCwgbikpKS5jYXRjaChfX1BSSVZBVEVfaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseVN1Y2Nlc3NmdWxXcml0ZShlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSksIHIgPSB0LmJhdGNoLmJhdGNoSWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlQWNrbm93bGVkZ2VCYXRjaChuLmxvY2FsU3RvcmUsIHQpO1xuICAgICAgICAvLyBUaGUgbG9jYWwgc3RvcmUgbWF5IG9yIG1heSBub3QgYmUgYWJsZSB0byBhcHBseSB0aGUgd3JpdGUgcmVzdWx0IGFuZFxuICAgICAgICAvLyByYWlzZSBldmVudHMgaW1tZWRpYXRlbHkgKGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSB3YXRjaGVyIGlzIGNhdWdodFxuICAgICAgICAvLyB1cCksIHNvIHdlIHJhaXNlIHVzZXIgY2FsbGJhY2tzIGZpcnN0IHNvIHRoYXQgdGhleSBjb25zaXN0ZW50bHkgaGFwcGVuXG4gICAgICAgIC8vIGJlZm9yZSBsaXN0ZW4gZXZlbnRzLlxuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9wcm9jZXNzVXNlckNhbGxiYWNrKG4sIHIsIC8qZXJyb3I9Ki8gbnVsbCksIF9fUFJJVkFURV90cmlnZ2VyUGVuZGluZ1dyaXRlc0NhbGxiYWNrcyhuLCByKSwgXG4gICAgICAgIG4uc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlTXV0YXRpb25TdGF0ZShyLCBcImFja25vd2xlZGdlZFwiKSwgYXdhaXQgX19QUklWQVRFX3N5bmNFbmdpbmVFbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlKG4sIGUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgYXdhaXQgX19QUklWQVRFX2lnbm9yZUlmUHJpbWFyeUxlYXNlTG9zcyhlKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9zeW5jRW5naW5lUmVqZWN0RmFpbGVkV3JpdGUoZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGUgPSBhd2FpdCBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZVJlamVjdEJhdGNoKGUsIHQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgICAgICAgICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJSZWplY3QgYmF0Y2hcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4ubXV0YXRpb25RdWV1ZS5sb29rdXBNdXRhdGlvbkJhdGNoKGUsIHQpLm5leHQoKHQgPT4gKF9fUFJJVkFURV9oYXJkQXNzZXJ0KG51bGwgIT09IHQpLCBcbiAgICAgICAgICAgICAgICByID0gdC5rZXlzKCksIG4ubXV0YXRpb25RdWV1ZS5yZW1vdmVNdXRhdGlvbkJhdGNoKGUsIHQpKSkpLm5leHQoKCgpID0+IG4ubXV0YXRpb25RdWV1ZS5wZXJmb3JtQ29uc2lzdGVuY3lDaGVjayhlKSkpLm5leHQoKCgpID0+IG4uZG9jdW1lbnRPdmVybGF5Q2FjaGUucmVtb3ZlT3ZlcmxheXNGb3JCYXRjaElkKGUsIHIsIHQpKSkubmV4dCgoKCkgPT4gbi5sb2NhbERvY3VtZW50cy5yZWNhbGN1bGF0ZUFuZFNhdmVPdmVybGF5c0ZvckRvY3VtZW50S2V5cyhlLCByKSkpLm5leHQoKCgpID0+IG4ubG9jYWxEb2N1bWVudHMuZ2V0RG9jdW1lbnRzKGUsIHIpKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBSZXR1cm5zIHRoZSBsYXJnZXN0IChsYXRlc3QpIGJhdGNoIGlkIGluIG11dGF0aW9uIHF1ZXVlIHRoYXQgaXMgcGVuZGluZ1xuICogc2VydmVyIHJlc3BvbnNlLlxuICpcbiAqIFJldHVybnMgYEJBVENISURfVU5LTk9XTmAgaWYgdGhlIHF1ZXVlIGlzIGVtcHR5LlxuICovIChyLmxvY2FsU3RvcmUsIHQpO1xuICAgICAgICAvLyBUaGUgbG9jYWwgc3RvcmUgbWF5IG9yIG1heSBub3QgYmUgYWJsZSB0byBhcHBseSB0aGUgd3JpdGUgcmVzdWx0IGFuZFxuICAgICAgICAvLyByYWlzZSBldmVudHMgaW1tZWRpYXRlbHkgKGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSB3YXRjaGVyIGlzIGNhdWdodCB1cCksXG4gICAgICAgIC8vIHNvIHdlIHJhaXNlIHVzZXIgY2FsbGJhY2tzIGZpcnN0IHNvIHRoYXQgdGhleSBjb25zaXN0ZW50bHkgaGFwcGVuIGJlZm9yZVxuICAgICAgICAvLyBsaXN0ZW4gZXZlbnRzLlxuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9wcm9jZXNzVXNlckNhbGxiYWNrKHIsIHQsIG4pLCBfX1BSSVZBVEVfdHJpZ2dlclBlbmRpbmdXcml0ZXNDYWxsYmFja3MociwgdCksIFxuICAgICAgICByLnNoYXJlZENsaWVudFN0YXRlLnVwZGF0ZU11dGF0aW9uU3RhdGUodCwgXCJyZWplY3RlZFwiLCBuKSwgYXdhaXQgX19QUklWQVRFX3N5bmNFbmdpbmVFbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlKHIsIGUpO1xuICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgICAgYXdhaXQgX19QUklWQVRFX2lnbm9yZUlmUHJpbWFyeUxlYXNlTG9zcyhuKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgdXNlciBjYWxsYmFjayB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHBlbmRpbmcgbXV0YXRpb25zIGF0IHRoZSBtb21lbnQgb2YgY2FsbGluZ1xuICogYXJlIGFja25vd2xlZGdlZCAuXG4gKi8gYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNFbmdpbmVSZWdpc3RlclBlbmRpbmdXcml0ZXNDYWxsYmFjayhlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgX19QUklWQVRFX2NhblVzZU5ldHdvcmsobi5yZW1vdGVTdG9yZSkgfHwgX19QUklWQVRFX2xvZ0RlYnVnKFwiU3luY0VuZ2luZVwiLCBcIlRoZSBuZXR3b3JrIGlzIGRpc2FibGVkLiBUaGUgdGFzayByZXR1cm5lZCBieSAnYXdhaXRQZW5kaW5nV3JpdGVzKCknIHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoZSBuZXR3b3JrIGlzIGVuYWJsZWQuXCIpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGUgPSBhd2FpdCBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZUdldEhpZ2hlc3RVbmFja25vd2xlZGdlZEJhdGNoSWQoZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgICAgICAgICByZXR1cm4gdC5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBoaWdoZXN0IHVuYWNrbm93bGVkZ2VkIGJhdGNoIGlkXCIsIFwicmVhZG9ubHlcIiwgKGUgPT4gdC5tdXRhdGlvblF1ZXVlLmdldEhpZ2hlc3RVbmFja25vd2xlZGdlZEJhdGNoSWQoZSkpKTtcbiAgICAgICAgfShuLmxvY2FsU3RvcmUpO1xuICAgICAgICBpZiAoLTEgPT09IGUpIFxuICAgICAgICAvLyBUcmlnZ2VyIHRoZSBjYWxsYmFjayByaWdodCBhd2F5IGlmIHRoZXJlIGlzIG5vIHBlbmRpbmcgd3JpdGVzIGF0IHRoZSBtb21lbnQuXG4gICAgICAgIHJldHVybiB2b2lkIHQucmVzb2x2ZSgpO1xuICAgICAgICBjb25zdCByID0gbi5PYS5nZXQoZSkgfHwgW107XG4gICAgICAgIHIucHVzaCh0KSwgbi5PYS5zZXQoZSwgcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX3dyYXBJblVzZXJFcnJvcklmUmVjb3ZlcmFibGUoZSwgXCJJbml0aWFsaXphdGlvbiBvZiB3YWl0Rm9yUGVuZGluZ1dyaXRlcygpIG9wZXJhdGlvbiBmYWlsZWRcIik7XG4gICAgICAgIHQucmVqZWN0KG4pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUcmlnZ2VycyB0aGUgY2FsbGJhY2tzIHRoYXQgYXJlIHdhaXRpbmcgZm9yIHRoaXMgYmF0Y2ggaWQgdG8gZ2V0IGFja25vd2xlZGdlZCBieSBzZXJ2ZXIsXG4gKiBpZiB0aGVyZSBhcmUgYW55LlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV90cmlnZ2VyUGVuZGluZ1dyaXRlc0NhbGxiYWNrcyhlLCB0KSB7XG4gICAgKGUuT2EuZ2V0KHQpIHx8IFtdKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZS5yZXNvbHZlKCk7XG4gICAgfSkpLCBlLk9hLmRlbGV0ZSh0KTtcbn1cblxuLyoqIFJlamVjdCBhbGwgb3V0c3RhbmRpbmcgY2FsbGJhY2tzIHdhaXRpbmcgZm9yIHBlbmRpbmcgd3JpdGVzIHRvIGNvbXBsZXRlLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfcHJvY2Vzc1VzZXJDYWxsYmFjayhlLCB0LCBuKSB7XG4gICAgY29uc3QgciA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgbGV0IGkgPSByLnhhW3IuY3VycmVudFVzZXIudG9LZXkoKV07XG4gICAgLy8gTk9URTogTXV0YXRpb25zIHJlc3RvcmVkIGZyb20gcGVyc2lzdGVuY2Ugd29uJ3QgaGF2ZSBjYWxsYmFja3MsIHNvIGl0J3NcbiAgICAvLyBva2F5IGZvciB0aGVyZSB0byBiZSBubyBjYWxsYmFjayBmb3IgdGhpcyBJRC5cbiAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgY29uc3QgZSA9IGkuZ2V0KHQpO1xuICAgICAgICBlICYmIChuID8gZS5yZWplY3QobikgOiBlLnJlc29sdmUoKSwgaSA9IGkucmVtb3ZlKHQpKSwgci54YVtyLmN1cnJlbnRVc2VyLnRvS2V5KCldID0gaTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9yZW1vdmVBbmRDbGVhbnVwVGFyZ2V0KGUsIHQsIG4gPSBudWxsKSB7XG4gICAgZS5zaGFyZWRDbGllbnRTdGF0ZS5yZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0KHQpO1xuICAgIGZvciAoY29uc3QgciBvZiBlLkRhLmdldCh0KSkgZS5iYS5kZWxldGUociksIG4gJiYgZS5TYS5rYShyLCBuKTtcbiAgICBpZiAoZS5EYS5kZWxldGUodCksIGUuaXNQcmltYXJ5Q2xpZW50KSB7XG4gICAgICAgIGUuTWEuVnIodCkuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICBlLk1hLmNvbnRhaW5zS2V5KHQpIHx8IFxuICAgICAgICAgICAgLy8gV2UgcmVtb3ZlZCB0aGUgbGFzdCByZWZlcmVuY2UgZm9yIHRoaXMga2V5XG4gICAgICAgICAgICBfX1BSSVZBVEVfcmVtb3ZlTGltYm9UYXJnZXQoZSwgdCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9yZW1vdmVMaW1ib1RhcmdldChlLCB0KSB7XG4gICAgZS5DYS5kZWxldGUodC5wYXRoLmNhbm9uaWNhbFN0cmluZygpKTtcbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHRhcmdldCBhbHJlYWR5IGdvdCByZW1vdmVkIGJlY2F1c2UgdGhlIHF1ZXJ5IGZhaWxlZC4gSW4gdGhhdCBjYXNlLFxuICAgIC8vIHRoZSBrZXkgd29uJ3QgZXhpc3QgaW4gYGxpbWJvVGFyZ2V0c0J5S2V5YC4gT25seSBkbyB0aGUgY2xlYW51cCBpZiB3ZSBzdGlsbCBoYXZlIHRoZSB0YXJnZXQuXG4gICAgY29uc3QgbiA9IGUudmEuZ2V0KHQpO1xuICAgIG51bGwgIT09IG4gJiYgKF9fUFJJVkFURV9yZW1vdGVTdG9yZVVubGlzdGVuKGUucmVtb3RlU3RvcmUsIG4pLCBlLnZhID0gZS52YS5yZW1vdmUodCksIFxuICAgIGUuRmEuZGVsZXRlKG4pLCBfX1BSSVZBVEVfcHVtcEVucXVldWVkTGltYm9SZXNvbHV0aW9ucyhlKSk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV91cGRhdGVUcmFja2VkTGltYm9zKGUsIHQsIG4pIHtcbiAgICBmb3IgKGNvbnN0IHIgb2YgbikgaWYgKHIgaW5zdGFuY2VvZiBfX1BSSVZBVEVfQWRkZWRMaW1ib0RvY3VtZW50KSBlLk1hLmFkZFJlZmVyZW5jZShyLmtleSwgdCksIFxuICAgIF9fUFJJVkFURV90cmFja0xpbWJvQ2hhbmdlKGUsIHIpOyBlbHNlIGlmIChyIGluc3RhbmNlb2YgX19QUklWQVRFX1JlbW92ZWRMaW1ib0RvY3VtZW50KSB7XG4gICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlN5bmNFbmdpbmVcIiwgXCJEb2N1bWVudCBubyBsb25nZXIgaW4gbGltYm86IFwiICsgci5rZXkpLCBlLk1hLnJlbW92ZVJlZmVyZW5jZShyLmtleSwgdCk7XG4gICAgICAgIGUuTWEuY29udGFpbnNLZXkoci5rZXkpIHx8IFxuICAgICAgICAvLyBXZSByZW1vdmVkIHRoZSBsYXN0IHJlZmVyZW5jZSBmb3IgdGhpcyBrZXlcbiAgICAgICAgX19QUklWQVRFX3JlbW92ZUxpbWJvVGFyZ2V0KGUsIHIua2V5KTtcbiAgICB9IGVsc2UgZmFpbCgpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfdHJhY2tMaW1ib0NoYW5nZShlLCB0KSB7XG4gICAgY29uc3QgbiA9IHQua2V5LCByID0gbi5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgIGUudmEuZ2V0KG4pIHx8IGUuQ2EuaGFzKHIpIHx8IChfX1BSSVZBVEVfbG9nRGVidWcoXCJTeW5jRW5naW5lXCIsIFwiTmV3IGRvY3VtZW50IGluIGxpbWJvOiBcIiArIG4pLCBcbiAgICBlLkNhLmFkZChyKSwgX19QUklWQVRFX3B1bXBFbnF1ZXVlZExpbWJvUmVzb2x1dGlvbnMoZSkpO1xufVxuXG4vKipcbiAqIFN0YXJ0cyBsaXN0ZW5zIGZvciBkb2N1bWVudHMgaW4gbGltYm8gdGhhdCBhcmUgZW5xdWV1ZWQgZm9yIHJlc29sdXRpb24sXG4gKiBzdWJqZWN0IHRvIGEgbWF4aW11bSBudW1iZXIgb2YgY29uY3VycmVudCByZXNvbHV0aW9ucy5cbiAqXG4gKiBXaXRob3V0IGJvdW5kaW5nIHRoZSBudW1iZXIgb2YgY29uY3VycmVudCByZXNvbHV0aW9ucywgdGhlIHNlcnZlciBjYW4gZmFpbFxuICogd2l0aCBcInJlc291cmNlIGV4aGF1c3RlZFwiIGVycm9ycyB3aGljaCBjYW4gbGVhZCB0byBwYXRob2xvZ2ljYWwgY2xpZW50XG4gKiBiZWhhdmlvciBhcyBzZWVuIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvaXNzdWVzLzI2ODMuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX3B1bXBFbnF1ZXVlZExpbWJvUmVzb2x1dGlvbnMoZSkge1xuICAgIGZvciAoO2UuQ2Euc2l6ZSA+IDAgJiYgZS52YS5zaXplIDwgZS5tYXhDb25jdXJyZW50TGltYm9SZXNvbHV0aW9uczsgKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLkNhLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICAgICAgZS5DYS5kZWxldGUodCk7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgRG9jdW1lbnRLZXkoUmVzb3VyY2VQYXRoLmZyb21TdHJpbmcodCkpLCByID0gZS5OYS5uZXh0KCk7XG4gICAgICAgIGUuRmEuc2V0KHIsIG5ldyBMaW1ib1Jlc29sdXRpb24obikpLCBlLnZhID0gZS52YS5pbnNlcnQobiwgciksIF9fUFJJVkFURV9yZW1vdGVTdG9yZUxpc3RlbihlLnJlbW90ZVN0b3JlLCBuZXcgVGFyZ2V0RGF0YShfX1BSSVZBVEVfcXVlcnlUb1RhcmdldChfX1BSSVZBVEVfbmV3UXVlcnlGb3JQYXRoKG4ucGF0aCkpLCByLCBcIlRhcmdldFB1cnBvc2VMaW1ib1Jlc29sdXRpb25cIiAvKiBUYXJnZXRQdXJwb3NlLkxpbWJvUmVzb2x1dGlvbiAqLyAsIF9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZS5vZSkpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNFbmdpbmVFbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlKGUsIHQsIG4pIHtcbiAgICBjb25zdCByID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgaSA9IFtdLCBzID0gW10sIG8gPSBbXTtcbiAgICByLmJhLmlzRW1wdHkoKSB8fCAoci5iYS5mb3JFYWNoKCgoZSwgXykgPT4ge1xuICAgICAgICBvLnB1c2goci5CYShfLCB0LCBuKS50aGVuKChlID0+IHtcbiAgICAgICAgICAgIHZhciB0O1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIGNoYW5nZXMsIG9yIHdlIGFyZSBoYW5kbGluZyBhIGdsb2JhbCBzbmFwc2hvdCwgbm90aWZ5XG4gICAgICAgICAgICAvLyBzZWNvbmRhcnkgY2xpZW50cyB0byB1cGRhdGUgcXVlcnkgc3RhdGUuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGUgfHwgbikgJiYgci5pc1ByaW1hcnlDbGllbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBRdWVyeSBzdGF0ZSBpcyBzZXQgdG8gYGN1cnJlbnRgIGlmOlxuICAgICAgICAgICAgICAgIC8vIC0gVGhlcmUgaXMgYSB2aWV3IGNoYW5nZSBhbmQgaXQgaXMgdXAtdG8tZGF0ZSwgb3IsXG4gICAgICAgICAgICAgICAgLy8gLSBUaGVyZSBpcyBhIGdsb2JhbCBzbmFwc2hvdCwgdGhlIFRhcmdldCBpcyBjdXJyZW50LCBhbmQgbm8gY2hhbmdlcyB0byBiZSByZXNvbHZlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlID8gIWUuZnJvbUNhY2hlIDogbnVsbCA9PT0gKHQgPSBudWxsID09IG4gPyB2b2lkIDAgOiBuLnRhcmdldENoYW5nZXMuZ2V0KF8udGFyZ2V0SWQpKSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgci5zaGFyZWRDbGllbnRTdGF0ZS51cGRhdGVRdWVyeVN0YXRlKF8udGFyZ2V0SWQsIGkgPyBcImN1cnJlbnRcIiA6IFwibm90LWN1cnJlbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgdmlld3MgaWYgdGhlcmUgYXJlIGFjdHVhbCBjaGFuZ2VzLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICBpLnB1c2goZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9Mb2NhbFZpZXdDaGFuZ2VzLktpKF8udGFyZ2V0SWQsIGUpO1xuICAgICAgICAgICAgICAgIHMucHVzaCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpKTtcbiAgICB9KSksIGF3YWl0IFByb21pc2UuYWxsKG8pLCByLlNhLmhfKGkpLCBhd2FpdCBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZU5vdGlmeUxvY2FsVmlld0NoYW5nZXMoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJub3RpZnlMb2NhbFZpZXdDaGFuZ2VzXCIsIFwicmVhZHdyaXRlXCIsIChlID0+IFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHQsICh0ID0+IFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHQucWksIChyID0+IG4ucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUuYWRkUmVmZXJlbmNlKGUsIHQudGFyZ2V0SWQsIHIpKSkubmV4dCgoKCkgPT4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2godC5RaSwgKHIgPT4gbi5wZXJzaXN0ZW5jZS5yZWZlcmVuY2VEZWxlZ2F0ZS5yZW1vdmVSZWZlcmVuY2UoZSwgdC50YXJnZXRJZCwgcikpKSkpKSkpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKCFfX1BSSVZBVEVfaXNJbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yKGUpKSB0aHJvdyBlO1xuICAgICAgICAgICAgLy8gSWYgYG5vdGlmeUxvY2FsVmlld0NoYW5nZXNgIGZhaWxzLCB3ZSBkaWQgbm90IGFkdmFuY2UgdGhlIHNlcXVlbmNlXG4gICAgICAgICAgICAvLyBudW1iZXIgZm9yIHRoZSBkb2N1bWVudHMgdGhhdCB3ZXJlIGluY2x1ZGVkIGluIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAvLyBUaGlzIG1pZ2h0IHRyaWdnZXIgdGhlbSB0byBiZSBkZWxldGVkIGVhcmxpZXIgdGhhbiB0aGV5IG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gd291bGQgaGF2ZSwgYnV0IGl0IHNob3VsZCBub3QgaW52YWxpZGF0ZSB0aGUgaW50ZWdyaXR5IG9mIHRoZSBkYXRhLlxuICAgICAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiTG9jYWxTdG9yZVwiLCBcIkZhaWxlZCB0byB1cGRhdGUgc2VxdWVuY2UgbnVtYmVyczogXCIgKyBlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xuICAgICAgICAgICAgY29uc3QgdCA9IGUudGFyZ2V0SWQ7XG4gICAgICAgICAgICBpZiAoIWUuZnJvbUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG4ubnMuZ2V0KHQpLCByID0gZS5zbmFwc2hvdFZlcnNpb24sIGkgPSBlLndpdGhMYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uKHIpO1xuICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdGhlIGxhc3QgbGltYm8gZnJlZSBzbmFwc2hvdCB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ubnMgPSBuLm5zLmluc2VydCh0LCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0oci5sb2NhbFN0b3JlLCBzKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9zeW5jRW5naW5lSGFuZGxlQ3JlZGVudGlhbENoYW5nZShlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgaWYgKCFuLmN1cnJlbnRVc2VyLmlzRXF1YWwodCkpIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiU3luY0VuZ2luZVwiLCBcIlVzZXIgY2hhbmdlLiBOZXcgdXNlcjpcIiwgdC50b0tleSgpKTtcbiAgICAgICAgY29uc3QgZSA9IGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlSGFuZGxlVXNlckNoYW5nZShuLmxvY2FsU3RvcmUsIHQpO1xuICAgICAgICBuLmN1cnJlbnRVc2VyID0gdCwgXG4gICAgICAgIC8vIEZhaWxzIHRhc2tzIHdhaXRpbmcgZm9yIHBlbmRpbmcgd3JpdGVzIHJlcXVlc3RlZCBieSBwcmV2aW91cyB1c2VyLlxuICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfcmVqZWN0T3V0c3RhbmRpbmdQZW5kaW5nV3JpdGVzQ2FsbGJhY2tzKGUsIHQpIHtcbiAgICAgICAgICAgIGUuT2EuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5yZWplY3QobmV3IEZpcmVzdG9yZUVycm9yKEMuQ0FOQ0VMTEVELCB0KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLCBlLk9hLmNsZWFyKCk7XG4gICAgICAgIH0obiwgXCInd2FpdEZvclBlbmRpbmdXcml0ZXMnIHByb21pc2UgaXMgcmVqZWN0ZWQgZHVlIHRvIGEgdXNlciBjaGFuZ2UuXCIpLCBcbiAgICAgICAgLy8gVE9ETyhiLzExNDIyNjQxNyk6IENvbnNpZGVyIGNhbGxpbmcgdGhpcyBvbmx5IGluIHRoZSBwcmltYXJ5IHRhYi5cbiAgICAgICAgbi5zaGFyZWRDbGllbnRTdGF0ZS5oYW5kbGVVc2VyQ2hhbmdlKHQsIGUucmVtb3ZlZEJhdGNoSWRzLCBlLmFkZGVkQmF0Y2hJZHMpLCBhd2FpdCBfX1BSSVZBVEVfc3luY0VuZ2luZUVtaXROZXdTbmFwc0FuZE5vdGlmeUxvY2FsU3RvcmUobiwgZS51cyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfc3luY0VuZ2luZUdldFJlbW90ZUtleXNGb3JUYXJnZXQoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCByID0gbi5GYS5nZXQodCk7XG4gICAgaWYgKHIgJiYgci53YSkgcmV0dXJuIF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpLmFkZChyLmtleSk7XG4gICAge1xuICAgICAgICBsZXQgZSA9IF9fUFJJVkFURV9kb2N1bWVudEtleVNldCgpO1xuICAgICAgICBjb25zdCByID0gbi5EYS5nZXQodCk7XG4gICAgICAgIGlmICghcikgcmV0dXJuIGU7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiByKSB7XG4gICAgICAgICAgICBjb25zdCByID0gbi5iYS5nZXQodCk7XG4gICAgICAgICAgICBlID0gZS51bmlvbldpdGgoci52aWV3LkVhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVjb25jaWxlIHRoZSBsaXN0IG9mIHN5bmNlZCBkb2N1bWVudHMgaW4gYW4gZXhpc3RpbmcgdmlldyB3aXRoIHRob3NlXG4gKiBmcm9tIHBlcnNpc3RlbmNlLlxuICovIGFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9zeW5jaHJvbml6ZVZpZXdBbmRDb21wdXRlU25hcHNob3QoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCByID0gYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVFeGVjdXRlUXVlcnkobi5sb2NhbFN0b3JlLCB0LnF1ZXJ5LCBcbiAgICAvKiB1c2VQcmV2aW91c1Jlc3VsdHM9ICovICEwKSwgaSA9IHQudmlldy5wYShyKTtcbiAgICByZXR1cm4gbi5pc1ByaW1hcnlDbGllbnQgJiYgX19QUklWQVRFX3VwZGF0ZVRyYWNrZWRMaW1ib3MobiwgdC50YXJnZXRJZCwgaS5mYSksIFxuICAgIGk7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIG5ld2x5IGNoYW5nZWQgZG9jdW1lbnRzIGZyb20gcmVtb3RlIGRvY3VtZW50IGNhY2hlIGFuZCByYWlzZXNcbiAqIHNuYXBzaG90cyBpZiBuZWVkZWQuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5hc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfc3luY0VuZ2luZVN5bmNocm9uaXplV2l0aENoYW5nZWREb2N1bWVudHMoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIHJldHVybiBfX1BSSVZBVEVfbG9jYWxTdG9yZUdldE5ld0RvY3VtZW50Q2hhbmdlcyhuLmxvY2FsU3RvcmUsIHQpLnRoZW4oKGUgPT4gX19QUklWQVRFX3N5bmNFbmdpbmVFbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlKG4sIGUpKSk7XG59XG5cbi8qKiBBcHBsaWVzIGEgbXV0YXRpb24gc3RhdGUgdG8gYW4gZXhpc3RpbmcgYmF0Y2guICAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9zeW5jRW5naW5lQXBwbHlCYXRjaFN0YXRlKGUsIHQsIG4sIHIpIHtcbiAgICBjb25zdCBpID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgcyA9IGF3YWl0IGZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlTG9va3VwTXV0YXRpb25Eb2N1bWVudHMoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgciA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3Qobi5tdXRhdGlvblF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJMb29rdXAgbXV0YXRpb24gZG9jdW1lbnRzXCIsIFwicmVhZG9ubHlcIiwgKGUgPT4gci52bihlLCB0KS5uZXh0KCh0ID0+IHQgPyBuLmxvY2FsRG9jdW1lbnRzLmdldERvY3VtZW50cyhlLCB0KSA6IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKG51bGwpKSkpKTtcbiAgICB9XG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAoaS5sb2NhbFN0b3JlLCB0KTtcbiAgICBudWxsICE9PSBzID8gKFwicGVuZGluZ1wiID09PSBuID8gXG4gICAgLy8gSWYgd2UgYXJlIHRoZSBwcmltYXJ5IGNsaWVudCwgd2UgbmVlZCB0byBzZW5kIHRoaXMgd3JpdGUgdG8gdGhlXG4gICAgLy8gYmFja2VuZC4gU2Vjb25kYXJ5IGNsaWVudHMgd2lsbCBpZ25vcmUgdGhlc2Ugd3JpdGVzIHNpbmNlIHRoZWlyIHJlbW90ZVxuICAgIC8vIGNvbm5lY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgYXdhaXQgX19QUklWQVRFX2ZpbGxXcml0ZVBpcGVsaW5lKGkucmVtb3RlU3RvcmUpIDogXCJhY2tub3dsZWRnZWRcIiA9PT0gbiB8fCBcInJlamVjdGVkXCIgPT09IG4gPyAoXG4gICAgLy8gTk9URTogQm90aCB0aGVzZSBtZXRob2RzIGFyZSBuby1vcHMgZm9yIGJhdGNoZXMgdGhhdCBvcmlnaW5hdGVkIGZyb21cbiAgICAvLyBvdGhlciBjbGllbnRzLlxuICAgIF9fUFJJVkFURV9wcm9jZXNzVXNlckNhbGxiYWNrKGksIHQsIHIgfHwgbnVsbCksIF9fUFJJVkFURV90cmlnZ2VyUGVuZGluZ1dyaXRlc0NhbGxiYWNrcyhpLCB0KSwgXG4gICAgZnVuY3Rpb24gX19QUklWQVRFX2xvY2FsU3RvcmVSZW1vdmVDYWNoZWRNdXRhdGlvbkJhdGNoTWV0YWRhdGEoZSwgdCkge1xuICAgICAgICBfX1BSSVZBVEVfZGVidWdDYXN0KF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSkubXV0YXRpb25RdWV1ZSkuTW4odCk7XG4gICAgfVxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG4gICAgKGkubG9jYWxTdG9yZSwgdCkpIDogZmFpbCgpLCBhd2FpdCBfX1BSSVZBVEVfc3luY0VuZ2luZUVtaXROZXdTbmFwc0FuZE5vdGlmeUxvY2FsU3RvcmUoaSwgcykpIDogXG4gICAgLy8gQSB0aHJvdHRsZWQgdGFiIG1heSBub3QgaGF2ZSBzZWVuIHRoZSBtdXRhdGlvbiBiZWZvcmUgaXQgd2FzIGNvbXBsZXRlZFxuICAgIC8vIGFuZCByZW1vdmVkIGZyb20gdGhlIG11dGF0aW9uIHF1ZXVlLCBpbiB3aGljaCBjYXNlIHdlIHdvbid0IGhhdmUgY2FjaGVkXG4gICAgLy8gdGhlIGFmZmVjdGVkIGRvY3VtZW50cy4gSW4gdGhpcyBjYXNlIHdlIGNhbiBzYWZlbHkgaWdub3JlIHRoZSB1cGRhdGVcbiAgICAvLyBzaW5jZSB0aGF0IG1lYW5zIHdlIGRpZG4ndCBhcHBseSB0aGUgbXV0YXRpb24gbG9jYWxseSBhdCBhbGwgKGlmIHdlXG4gICAgLy8gaGFkLCB3ZSB3b3VsZCBoYXZlIGNhY2hlZCB0aGUgYWZmZWN0ZWQgZG9jdW1lbnRzKSwgYW5kIHNvIHdlIHdpbGwganVzdFxuICAgIC8vIHNlZSBhbnkgcmVzdWx0aW5nIGRvY3VtZW50IGNoYW5nZXMgdmlhIG5vcm1hbCByZW1vdGUgZG9jdW1lbnQgdXBkYXRlc1xuICAgIC8vIGFzIGFwcGxpY2FibGUuXG4gICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiU3luY0VuZ2luZVwiLCBcIkNhbm5vdCBhcHBseSBtdXRhdGlvbiBiYXRjaCB3aXRoIGlkOiBcIiArIHQpO1xufVxuXG4vKiogQXBwbGllcyBhIHF1ZXJ5IHRhcmdldCBjaGFuZ2UgZnJvbSBhIGRpZmZlcmVudCB0YWIuICovXG4vLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseVByaW1hcnlTdGF0ZShlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgaWYgKF9fUFJJVkFURV9lbnN1cmVXYXRjaENhbGxiYWNrcyhuKSwgX19QUklWQVRFX3N5bmNFbmdpbmVFbnN1cmVXcml0ZUNhbGxiYWNrcyhuKSwgXG4gICAgITAgPT09IHQgJiYgITAgIT09IG4uTGEpIHtcbiAgICAgICAgLy8gU2Vjb25kYXJ5IHRhYnMgb25seSBtYWludGFpbiBWaWV3cyBmb3IgdGhlaXIgbG9jYWwgbGlzdGVuZXJzIGFuZCB0aGVcbiAgICAgICAgLy8gVmlld3MgaW50ZXJuYWwgc3RhdGUgbWF5IG5vdCBiZSAxMDAlIHBvcHVsYXRlZCAoaW4gcGFydGljdWxhclxuICAgICAgICAvLyBzZWNvbmRhcnkgdGFicyBkb24ndCB0cmFjayBzeW5jZWREb2N1bWVudHMsIHRoZSBzZXQgb2YgZG9jdW1lbnRzIHRoZVxuICAgICAgICAvLyBzZXJ2ZXIgY29uc2lkZXJzIHRvIGJlIGluIHRoZSB0YXJnZXQpLiBTbyB3aGVuIGEgc2Vjb25kYXJ5IGJlY29tZXNcbiAgICAgICAgLy8gcHJpbWFyeSwgd2UgbmVlZCB0byBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGFsbCB2aWV3cyBmb3IgYWxsIHRhcmdldHNcbiAgICAgICAgLy8gbWF0Y2ggdGhlIHN0YXRlIG9uIGRpc2suXG4gICAgICAgIGNvbnN0IGUgPSBuLnNoYXJlZENsaWVudFN0YXRlLmdldEFsbEFjdGl2ZVF1ZXJ5VGFyZ2V0cygpLCB0ID0gYXdhaXQgX19QUklWQVRFX3N5bmNocm9uaXplUXVlcnlWaWV3c0FuZFJhaXNlU25hcHNob3RzKG4sIGUudG9BcnJheSgpKTtcbiAgICAgICAgbi5MYSA9ICEwLCBhd2FpdCBfX1BSSVZBVEVfcmVtb3RlU3RvcmVBcHBseVByaW1hcnlTdGF0ZShuLnJlbW90ZVN0b3JlLCAhMCk7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSBfX1BSSVZBVEVfcmVtb3RlU3RvcmVMaXN0ZW4obi5yZW1vdGVTdG9yZSwgZSk7XG4gICAgfSBlbHNlIGlmICghMSA9PT0gdCAmJiAhMSAhPT0gbi5MYSkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIGxldCB0ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIG4uRGEuZm9yRWFjaCgoKHIsIGkpID0+IHtcbiAgICAgICAgICAgIG4uc2hhcmVkQ2xpZW50U3RhdGUuaXNMb2NhbFF1ZXJ5VGFyZ2V0KGkpID8gZS5wdXNoKGkpIDogdCA9IHQudGhlbigoKCkgPT4gKF9fUFJJVkFURV9yZW1vdmVBbmRDbGVhbnVwVGFyZ2V0KG4sIGkpLCBcbiAgICAgICAgICAgIF9fUFJJVkFURV9sb2NhbFN0b3JlUmVsZWFzZVRhcmdldChuLmxvY2FsU3RvcmUsIGksIFxuICAgICAgICAgICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMCkpKSksIF9fUFJJVkFURV9yZW1vdGVTdG9yZVVubGlzdGVuKG4ucmVtb3RlU3RvcmUsIGkpO1xuICAgICAgICB9KSksIGF3YWl0IHQsIGF3YWl0IF9fUFJJVkFURV9zeW5jaHJvbml6ZVF1ZXJ5Vmlld3NBbmRSYWlzZVNuYXBzaG90cyhuLCBlKSwgXG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG4gICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9yZXNldExpbWJvRG9jdW1lbnRzKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgICAgICAgICAgdC5GYS5mb3JFYWNoKCgoZSwgbikgPT4ge1xuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9yZW1vdGVTdG9yZVVubGlzdGVuKHQucmVtb3RlU3RvcmUsIG4pO1xuICAgICAgICAgICAgfSkpLCB0Lk1hLm1yKCksIHQuRmEgPSBuZXcgTWFwLCB0LnZhID0gbmV3IFNvcnRlZE1hcChEb2N1bWVudEtleS5jb21wYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFJlY29uY2lsZSB0aGUgcXVlcnkgdmlld3Mgb2YgdGhlIHByb3ZpZGVkIHF1ZXJ5IHRhcmdldHMgd2l0aCB0aGUgc3RhdGUgZnJvbVxuICogcGVyc2lzdGVuY2UuIFJhaXNlcyBzbmFwc2hvdHMgZm9yIGFueSBjaGFuZ2VzIHRoYXQgYWZmZWN0IHRoZSBsb2NhbFxuICogY2xpZW50IGFuZCByZXR1cm5zIHRoZSB1cGRhdGVkIHN0YXRlIG9mIGFsbCB0YXJnZXQncyBxdWVyeSBkYXRhLlxuICpcbiAqIEBwYXJhbSBzeW5jRW5naW5lIC0gVGhlIHN5bmMgZW5naW5lIGltcGxlbWVudGF0aW9uXG4gKiBAcGFyYW0gdGFyZ2V0cyAtIHRoZSBsaXN0IG9mIHRhcmdldHMgd2l0aCB2aWV3cyB0aGF0IG5lZWQgdG8gYmUgcmVjb21wdXRlZFxuICogQHBhcmFtIHRyYW5zaXRpb25Ub1ByaW1hcnkgLSBgdHJ1ZWAgaWZmIHRoZSB0YWIgdHJhbnNpdGlvbnMgZnJvbSBhIHNlY29uZGFyeVxuICogdGFiIHRvIGEgcHJpbWFyeSB0YWJcbiAqL1xuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuICAgICAgICAobiksIG4uTGEgPSAhMSwgYXdhaXQgX19QUklWQVRFX3JlbW90ZVN0b3JlQXBwbHlQcmltYXJ5U3RhdGUobi5yZW1vdGVTdG9yZSwgITEpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNocm9uaXplUXVlcnlWaWV3c0FuZFJhaXNlU25hcHNob3RzKGUsIHQsIG4pIHtcbiAgICBjb25zdCByID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgaSA9IFtdLCBzID0gW107XG4gICAgZm9yIChjb25zdCBlIG9mIHQpIHtcbiAgICAgICAgbGV0IHQ7XG4gICAgICAgIGNvbnN0IG4gPSByLkRhLmdldChlKTtcbiAgICAgICAgaWYgKG4gJiYgMCAhPT0gbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIEZvciBxdWVyaWVzIHRoYXQgaGF2ZSBhIGxvY2FsIFZpZXcsIHdlIGZldGNoIHRoZWlyIGN1cnJlbnQgc3RhdGVcbiAgICAgICAgICAgIC8vIGZyb20gTG9jYWxTdG9yZSAoYXMgdGhlIHJlc3VtZSB0b2tlbiBhbmQgdGhlIHNuYXBzaG90IHZlcnNpb25cbiAgICAgICAgICAgIC8vIG1pZ2h0IGhhdmUgY2hhbmdlZCkgYW5kIHJlY29uY2lsZSB0aGVpciB2aWV3cyB3aXRoIHRoZSBwZXJzaXN0ZWRcbiAgICAgICAgICAgIC8vIHN0YXRlICh0aGUgbGlzdCBvZiBzeW5jZWREb2N1bWVudHMgbWF5IGhhdmUgZ290dGVuIG91dCBvZiBzeW5jKS5cbiAgICAgICAgICAgIHQgPSBhd2FpdCBfX1BSSVZBVEVfbG9jYWxTdG9yZUFsbG9jYXRlVGFyZ2V0KHIubG9jYWxTdG9yZSwgX19QUklWQVRFX3F1ZXJ5VG9UYXJnZXQoblswXSkpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gci5iYS5nZXQoZSksIG4gPSBhd2FpdCBfX1BSSVZBVEVfc3luY2hyb25pemVWaWV3QW5kQ29tcHV0ZVNuYXBzaG90KHIsIHQpO1xuICAgICAgICAgICAgICAgIG4uc25hcHNob3QgJiYgcy5wdXNoKG4uc25hcHNob3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRm9yIHF1ZXJpZXMgdGhhdCBuZXZlciBleGVjdXRlZCBvbiB0aGlzIGNsaWVudCwgd2UgbmVlZCB0b1xuICAgICAgICAgICAgLy8gYWxsb2NhdGUgdGhlIHRhcmdldCBpbiBMb2NhbFN0b3JlIGFuZCBpbml0aWFsaXplIGEgbmV3IFZpZXcuXG4gICAgICAgICAgICBjb25zdCBuID0gYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVHZXRDYWNoZWRUYXJnZXQoci5sb2NhbFN0b3JlLCBlKTtcbiAgICAgICAgICAgIHQgPSBhd2FpdCBfX1BSSVZBVEVfbG9jYWxTdG9yZUFsbG9jYXRlVGFyZ2V0KHIubG9jYWxTdG9yZSwgbiksIGF3YWl0IF9fUFJJVkFURV9pbml0aWFsaXplVmlld0FuZENvbXB1dGVTbmFwc2hvdChyLCBfX1BSSVZBVEVfc3ludGhlc2l6ZVRhcmdldFRvUXVlcnkobiksIGUsIFxuICAgICAgICAgICAgLypjdXJyZW50PSovICExLCB0LnJlc3VtZVRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBpLnB1c2godCk7XG4gICAgfVxuICAgIHJldHVybiByLlNhLmhfKHMpLCBpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBgUXVlcnlgIG9iamVjdCBmcm9tIHRoZSBzcGVjaWZpZWQgYFRhcmdldGAuIFRoZXJlIGlzIG5vIHdheSB0b1xuICogb2J0YWluIHRoZSBvcmlnaW5hbCBgUXVlcnlgLCBzbyB3ZSBzeW50aGVzaXplIGEgYFF1ZXJ5YCBmcm9tIHRoZSBgVGFyZ2V0YFxuICogb2JqZWN0LlxuICpcbiAqIFRoZSBzeW50aGVzaXplZCByZXN1bHQgbWlnaHQgYmUgZGlmZmVyZW50IGZyb20gdGhlIG9yaWdpbmFsIGBRdWVyeWAsIGJ1dFxuICogc2luY2UgdGhlIHN5bnRoZXNpemVkIGBRdWVyeWAgc2hvdWxkIHJldHVybiB0aGUgc2FtZSByZXN1bHRzIGFzIHRoZVxuICogb3JpZ2luYWwgb25lIChvbmx5IHRoZSBwcmVzZW50YXRpb24gb2YgcmVzdWx0cyBtaWdodCBkaWZmZXIpLCB0aGUgcG90ZW50aWFsXG4gKiBkaWZmZXJlbmNlIHdpbGwgbm90IGNhdXNlIGlzc3Vlcy5cbiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIF9fUFJJVkFURV9zeW50aGVzaXplVGFyZ2V0VG9RdWVyeShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9uZXdRdWVyeShlLnBhdGgsIGUuY29sbGVjdGlvbkdyb3VwLCBlLm9yZGVyQnksIGUuZmlsdGVycywgZS5saW1pdCwgXCJGXCIgLyogTGltaXRUeXBlLkZpcnN0ICovICwgZS5zdGFydEF0LCBlLmVuZEF0KTtcbn1cblxuLyoqIFJldHVybnMgdGhlIElEcyBvZiB0aGUgY2xpZW50cyB0aGF0IGFyZSBjdXJyZW50bHkgYWN0aXZlLiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIF9fUFJJVkFURV9zeW5jRW5naW5lR2V0QWN0aXZlQ2xpZW50cyhlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlR2V0QWN0aXZlQ2xpZW50cyhlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfZGVidWdDYXN0KF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSkucGVyc2lzdGVuY2UpLkJpKCk7XG4gICAgfShfX1BSSVZBVEVfZGVidWdDYXN0KGUpLmxvY2FsU3RvcmUpO1xufVxuXG4vKiogQXBwbGllcyBhIHF1ZXJ5IHRhcmdldCBjaGFuZ2UgZnJvbSBhIGRpZmZlcmVudCB0YWIuICovXG4vLyBQT1JUSU5HIE5PVEU6IE11bHRpLVRhYiBvbmx5LlxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseVRhcmdldFN0YXRlKGUsIHQsIG4sIHIpIHtcbiAgICBjb25zdCBpID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICBpZiAoaS5MYSkgXG4gICAgLy8gSWYgd2UgcmVjZWl2ZSBhIHRhcmdldCBzdGF0ZSBub3RpZmljYXRpb24gdmlhIFdlYlN0b3JhZ2UsIHdlIGFyZVxuICAgIC8vIGVpdGhlciBhbHJlYWR5IHNlY29uZGFyeSBvciBhbm90aGVyIHRhYiBoYXMgdGFrZW4gdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgcmV0dXJuIHZvaWQgX19QUklWQVRFX2xvZ0RlYnVnKFwiU3luY0VuZ2luZVwiLCBcIklnbm9yaW5nIHVuZXhwZWN0ZWQgcXVlcnkgc3RhdGUgbm90aWZpY2F0aW9uLlwiKTtcbiAgICBjb25zdCBzID0gaS5EYS5nZXQodCk7XG4gICAgaWYgKHMgJiYgcy5sZW5ndGggPiAwKSBzd2l0Y2ggKG4pIHtcbiAgICAgIGNhc2UgXCJjdXJyZW50XCI6XG4gICAgICBjYXNlIFwibm90LWN1cnJlbnRcIjpcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZSA9IGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlR2V0TmV3RG9jdW1lbnRDaGFuZ2VzKGkubG9jYWxTdG9yZSwgX19QUklWQVRFX3F1ZXJ5Q29sbGVjdGlvbkdyb3VwKHNbMF0pKSwgciA9IFJlbW90ZUV2ZW50LmNyZWF0ZVN5bnRoZXNpemVkUmVtb3RlRXZlbnRGb3JDdXJyZW50Q2hhbmdlKHQsIFwiY3VycmVudFwiID09PSBuLCBCeXRlU3RyaW5nLkVNUFRZX0JZVEVfU1RSSU5HKTtcbiAgICAgICAgICAgIGF3YWl0IF9fUFJJVkFURV9zeW5jRW5naW5lRW1pdE5ld1NuYXBzQW5kTm90aWZ5TG9jYWxTdG9yZShpLCBlLCByKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICBhd2FpdCBfX1BSSVZBVEVfbG9jYWxTdG9yZVJlbGVhc2VUYXJnZXQoaS5sb2NhbFN0b3JlLCB0LCBcbiAgICAgICAgLyoga2VlcFBlcnNpc3RlZFRhcmdldERhdGEgKi8gITApLCBfX1BSSVZBVEVfcmVtb3ZlQW5kQ2xlYW51cFRhcmdldChpLCB0LCByKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGZhaWwoKTtcbiAgICB9XG59XG5cbi8qKiBBZGRzIG9yIHJlbW92ZXMgV2F0Y2ggdGFyZ2V0cyBmb3IgcXVlcmllcyBmcm9tIGRpZmZlcmVudCB0YWJzLiAqLyBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfc3luY0VuZ2luZUFwcGx5QWN0aXZlVGFyZ2V0c0NoYW5nZShlLCB0LCBuKSB7XG4gICAgY29uc3QgciA9IF9fUFJJVkFURV9lbnN1cmVXYXRjaENhbGxiYWNrcyhlKTtcbiAgICBpZiAoci5MYSkge1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xuICAgICAgICAgICAgaWYgKHIuRGEuaGFzKGUpICYmIHIuc2hhcmVkQ2xpZW50U3RhdGUuaXNBY3RpdmVRdWVyeVRhcmdldChlKSkge1xuICAgICAgICAgICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIlN5bmNFbmdpbmVcIiwgXCJBZGRpbmcgYW4gYWxyZWFkeSBhY3RpdmUgdGFyZ2V0IFwiICsgZSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0ID0gYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVHZXRDYWNoZWRUYXJnZXQoci5sb2NhbFN0b3JlLCBlKSwgbiA9IGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlQWxsb2NhdGVUYXJnZXQoci5sb2NhbFN0b3JlLCB0KTtcbiAgICAgICAgICAgIGF3YWl0IF9fUFJJVkFURV9pbml0aWFsaXplVmlld0FuZENvbXB1dGVTbmFwc2hvdChyLCBfX1BSSVZBVEVfc3ludGhlc2l6ZVRhcmdldFRvUXVlcnkodCksIG4udGFyZ2V0SWQsIFxuICAgICAgICAgICAgLypjdXJyZW50PSovICExLCBuLnJlc3VtZVRva2VuKSwgX19QUklWQVRFX3JlbW90ZVN0b3JlTGlzdGVuKHIucmVtb3RlU3RvcmUsIG4pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiBuKSBcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0aWxsIGFjdGl2ZSBzaW5jZSB0aGUgdGFyZ2V0IG1pZ2h0IGhhdmUgYmVlblxuICAgICAgICAvLyByZW1vdmVkIGlmIGl0IGhhcyBiZWVuIHJlamVjdGVkIGJ5IHRoZSBiYWNrZW5kLlxuICAgICAgICByLkRhLmhhcyhlKSAmJiBcbiAgICAgICAgLy8gUmVsZWFzZSBxdWVyaWVzIHRoYXQgYXJlIHN0aWxsIGFjdGl2ZS5cbiAgICAgICAgYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVSZWxlYXNlVGFyZ2V0KHIubG9jYWxTdG9yZSwgZSwgXG4gICAgICAgIC8qIGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhICovICExKS50aGVuKCgoKSA9PiB7XG4gICAgICAgICAgICBfX1BSSVZBVEVfcmVtb3RlU3RvcmVVbmxpc3RlbihyLnJlbW90ZVN0b3JlLCBlKSwgX19QUklWQVRFX3JlbW92ZUFuZENsZWFudXBUYXJnZXQociwgZSk7XG4gICAgICAgIH0pKS5jYXRjaChfX1BSSVZBVEVfaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9lbnN1cmVXYXRjaENhbGxiYWNrcyhlKSB7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgcmV0dXJuIHQucmVtb3RlU3RvcmUucmVtb3RlU3luY2VyLmFwcGx5UmVtb3RlRXZlbnQgPSBfX1BSSVZBVEVfc3luY0VuZ2luZUFwcGx5UmVtb3RlRXZlbnQuYmluZChudWxsLCB0KSwgXG4gICAgdC5yZW1vdGVTdG9yZS5yZW1vdGVTeW5jZXIuZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCA9IF9fUFJJVkFURV9zeW5jRW5naW5lR2V0UmVtb3RlS2V5c0ZvclRhcmdldC5iaW5kKG51bGwsIHQpLCBcbiAgICB0LnJlbW90ZVN0b3JlLnJlbW90ZVN5bmNlci5yZWplY3RMaXN0ZW4gPSBfX1BSSVZBVEVfc3luY0VuZ2luZVJlamVjdExpc3Rlbi5iaW5kKG51bGwsIHQpLCBcbiAgICB0LlNhLmhfID0gX19QUklWQVRFX2V2ZW50TWFuYWdlck9uV2F0Y2hDaGFuZ2UuYmluZChudWxsLCB0LmV2ZW50TWFuYWdlciksIHQuU2Eua2EgPSBfX1BSSVZBVEVfZXZlbnRNYW5hZ2VyT25XYXRjaEVycm9yLmJpbmQobnVsbCwgdC5ldmVudE1hbmFnZXIpLCBcbiAgICB0O1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfc3luY0VuZ2luZUVuc3VyZVdyaXRlQ2FsbGJhY2tzKGUpIHtcbiAgICBjb25zdCB0ID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICByZXR1cm4gdC5yZW1vdGVTdG9yZS5yZW1vdGVTeW5jZXIuYXBwbHlTdWNjZXNzZnVsV3JpdGUgPSBfX1BSSVZBVEVfc3luY0VuZ2luZUFwcGx5U3VjY2Vzc2Z1bFdyaXRlLmJpbmQobnVsbCwgdCksIFxuICAgIHQucmVtb3RlU3RvcmUucmVtb3RlU3luY2VyLnJlamVjdEZhaWxlZFdyaXRlID0gX19QUklWQVRFX3N5bmNFbmdpbmVSZWplY3RGYWlsZWRXcml0ZS5iaW5kKG51bGwsIHQpLCBcbiAgICB0O1xufVxuXG4vKipcbiAqIExvYWRzIGEgRmlyZXN0b3JlIGJ1bmRsZSBpbnRvIHRoZSBTREsuIFRoZSByZXR1cm5lZCBwcm9taXNlIHJlc29sdmVzIHdoZW5cbiAqIHRoZSBidW5kbGUgZmluaXNoZWQgbG9hZGluZy5cbiAqXG4gKiBAcGFyYW0gc3luY0VuZ2luZSAtIFN5bmNFbmdpbmUgdG8gdXNlLlxuICogQHBhcmFtIGJ1bmRsZVJlYWRlciAtIEJ1bmRsZSB0byBsb2FkIGludG8gdGhlIFNESy5cbiAqIEBwYXJhbSB0YXNrIC0gTG9hZEJ1bmRsZVRhc2sgdXNlZCB0byB1cGRhdGUgdGhlIGxvYWRpbmcgcHJvZ3Jlc3MgdG8gcHVibGljIEFQSS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfc3luY0VuZ2luZUxvYWRCdW5kbGUoZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgKFxuICAgIC8qKiBMb2FkcyBhIGJ1bmRsZSBhbmQgcmV0dXJucyB0aGUgbGlzdCBvZiBhZmZlY3RlZCBjb2xsZWN0aW9uIGdyb3Vwcy4gKi9cbiAgICBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfbG9hZEJ1bmRsZUltcGwoZSwgdCwgbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgciA9IGF3YWl0IHQuZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgICAgIGlmIChhd2FpdCBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZUhhc05ld2VyQnVuZGxlKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKSwgciA9IF9fUFJJVkFURV9mcm9tVmVyc2lvbih0LmNyZWF0ZVRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiaGFzTmV3ZXJCdW5kbGVcIiwgXCJyZWFkb25seVwiLCAoZSA9PiBuLiRyLmdldEJ1bmRsZU1ldGFkYXRhKGUsIHQuaWQpKSkudGhlbigoZSA9PiAhIWUgJiYgZS5jcmVhdGVUaW1lLmNvbXBhcmVUbyhyKSA+PSAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIFNhdmVzIHRoZSBnaXZlbiBgQnVuZGxlTWV0YWRhdGFgIHRvIGxvY2FsIHBlcnNpc3RlbmNlLlxuICovIChlLmxvY2FsU3RvcmUsIHIpKSByZXR1cm4gYXdhaXQgdC5jbG9zZSgpLCBuLl9jb21wbGV0ZVdpdGgoZnVuY3Rpb24gX19QUklWQVRFX2J1bmRsZVN1Y2Nlc3NQcm9ncmVzcyhlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzTG9hZGVkOiBlLnRvdGFsRG9jdW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBieXRlc0xvYWRlZDogZS50b3RhbEJ5dGVzLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbERvY3VtZW50czogZS50b3RhbERvY3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxCeXRlczogZS50b3RhbEJ5dGVzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0ocikpLCBQcm9taXNlLnJlc29sdmUobmV3IFNldCk7XG4gICAgICAgICAgICBuLl91cGRhdGVQcm9ncmVzcyhfX1BSSVZBVEVfYnVuZGxlSW5pdGlhbFByb2dyZXNzKHIpKTtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgX19QUklWQVRFX0J1bmRsZUxvYWRlcihyLCBlLmxvY2FsU3RvcmUsIHQuc2VyaWFsaXplcik7XG4gICAgICAgICAgICBsZXQgcyA9IGF3YWl0IHQucWEoKTtcbiAgICAgICAgICAgIGZvciAoO3M7ICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBhd2FpdCBpLl9hKHMpO1xuICAgICAgICAgICAgICAgIGUgJiYgbi5fdXBkYXRlUHJvZ3Jlc3MoZSksIHMgPSBhd2FpdCB0LnFhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvID0gYXdhaXQgaS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9fUFJJVkFURV9zeW5jRW5naW5lRW1pdE5ld1NuYXBzQW5kTm90aWZ5TG9jYWxTdG9yZShlLCBvLmNhLCBcbiAgICAgICAgICAgIC8qIHJlbW90ZUV2ZW50ICovIHZvaWQgMCksIFxuICAgICAgICAgICAgLy8gU2F2ZSBtZXRhZGF0YSwgc28gbG9hZGluZyB0aGUgc2FtZSBidW5kbGUgd2lsbCBza2lwLlxuICAgICAgICAgICAgYXdhaXQgZnVuY3Rpb24gX19QUklWQVRFX2xvY2FsU3RvcmVTYXZlQnVuZGxlKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlNhdmUgYnVuZGxlXCIsIFwicmVhZHdyaXRlXCIsIChlID0+IG4uJHIuc2F2ZUJ1bmRsZU1ldGFkYXRhKGUsIHQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIFJldHVybnMgYSBwcm9taXNlIG9mIGEgYE5hbWVkUXVlcnlgIGFzc29jaWF0ZWQgd2l0aCBnaXZlbiBxdWVyeSBuYW1lLiBQcm9taXNlXG4gKiByZXNvbHZlcyB0byB1bmRlZmluZWQgaWYgbm8gcGVyc2lzdGVkIGRhdGEgY2FuIGJlIGZvdW5kLlxuICovIChlLmxvY2FsU3RvcmUsIHIpLCBuLl9jb21wbGV0ZVdpdGgoby5wcm9ncmVzcyksIFByb21pc2UucmVzb2x2ZShvLnVhKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9sb2dXYXJuKFwiU3luY0VuZ2luZVwiLCBgTG9hZGluZyBidW5kbGUgZmFpbGVkIHdpdGggJHtlfWApLCBuLl9mYWlsV2l0aChlKSwgXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUobmV3IFNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAvKipcbiAqIFByb3ZpZGVzIGFsbCBjb21wb25lbnRzIG5lZWRlZCBmb3IgRmlyZXN0b3JlIHdpdGggaW4tbWVtb3J5IHBlcnNpc3RlbmNlLlxuICogVXNlcyBFYWdlckdDIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAqLykociwgdCwgbikudGhlbigoZSA9PiB7XG4gICAgICAgIHIuc2hhcmVkQ2xpZW50U3RhdGUubm90aWZ5QnVuZGxlTG9hZGVkKGUpO1xuICAgIH0pKTtcbn1cblxuY2xhc3MgTWVtb3J5T2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zeW5jaHJvbml6ZVRhYnMgPSAhMTtcbiAgICB9XG4gICAgYXN5bmMgaW5pdGlhbGl6ZShlKSB7XG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IF9fUFJJVkFURV9uZXdTZXJpYWxpemVyKGUuZGF0YWJhc2VJbmZvLmRhdGFiYXNlSWQpLCB0aGlzLnNoYXJlZENsaWVudFN0YXRlID0gdGhpcy5jcmVhdGVTaGFyZWRDbGllbnRTdGF0ZShlKSwgXG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2UgPSB0aGlzLmNyZWF0ZVBlcnNpc3RlbmNlKGUpLCBhd2FpdCB0aGlzLnBlcnNpc3RlbmNlLnN0YXJ0KCksIHRoaXMubG9jYWxTdG9yZSA9IHRoaXMuY3JlYXRlTG9jYWxTdG9yZShlKSwgXG4gICAgICAgIHRoaXMuZ2NTY2hlZHVsZXIgPSB0aGlzLmNyZWF0ZUdhcmJhZ2VDb2xsZWN0aW9uU2NoZWR1bGVyKGUsIHRoaXMubG9jYWxTdG9yZSksIHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyID0gdGhpcy5jcmVhdGVJbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIoZSwgdGhpcy5sb2NhbFN0b3JlKTtcbiAgICB9XG4gICAgY3JlYXRlR2FyYmFnZUNvbGxlY3Rpb25TY2hlZHVsZXIoZSwgdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY3JlYXRlSW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNyZWF0ZUxvY2FsU3RvcmUoZSkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX25ld0xvY2FsU3RvcmUodGhpcy5wZXJzaXN0ZW5jZSwgbmV3IF9fUFJJVkFURV9RdWVyeUVuZ2luZSwgZS5pbml0aWFsVXNlciwgdGhpcy5zZXJpYWxpemVyKTtcbiAgICB9XG4gICAgY3JlYXRlUGVyc2lzdGVuY2UoZSkge1xuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9NZW1vcnlQZXJzaXN0ZW5jZShfX1BSSVZBVEVfTWVtb3J5RWFnZXJEZWxlZ2F0ZS5IciwgdGhpcy5zZXJpYWxpemVyKTtcbiAgICB9XG4gICAgY3JlYXRlU2hhcmVkQ2xpZW50U3RhdGUoZSkge1xuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9NZW1vcnlTaGFyZWRDbGllbnRTdGF0ZTtcbiAgICB9XG4gICAgYXN5bmMgdGVybWluYXRlKCkge1xuICAgICAgICB2YXIgZSwgdDtcbiAgICAgICAgbnVsbCA9PT0gKGUgPSB0aGlzLmdjU2NoZWR1bGVyKSB8fCB2b2lkIDAgPT09IGUgfHwgZS5zdG9wKCksIG51bGwgPT09ICh0ID0gdGhpcy5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIpIHx8IHZvaWQgMCA9PT0gdCB8fCB0LnN0b3AoKSwgXG4gICAgICAgIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUuc2h1dGRvd24oKSwgYXdhaXQgdGhpcy5wZXJzaXN0ZW5jZS5zaHV0ZG93bigpO1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX0xydUdjTWVtb3J5T2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyIGV4dGVuZHMgTWVtb3J5T2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuY2FjaGVTaXplQnl0ZXMgPSBlO1xuICAgIH1cbiAgICBjcmVhdGVHYXJiYWdlQ29sbGVjdGlvblNjaGVkdWxlcihlLCB0KSB7XG4gICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KHRoaXMucGVyc2lzdGVuY2UucmVmZXJlbmNlRGVsZWdhdGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfTWVtb3J5THJ1RGVsZWdhdGUpO1xuICAgICAgICBjb25zdCBuID0gdGhpcy5wZXJzaXN0ZW5jZS5yZWZlcmVuY2VEZWxlZ2F0ZS5nYXJiYWdlQ29sbGVjdG9yO1xuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9McnVTY2hlZHVsZXIobiwgZS5hc3luY1F1ZXVlLCB0KTtcbiAgICB9XG4gICAgY3JlYXRlUGVyc2lzdGVuY2UoZSkge1xuICAgICAgICBjb25zdCB0ID0gdm9pZCAwICE9PSB0aGlzLmNhY2hlU2l6ZUJ5dGVzID8gTHJ1UGFyYW1zLndpdGhDYWNoZVNpemUodGhpcy5jYWNoZVNpemVCeXRlcykgOiBMcnVQYXJhbXMuREVGQVVMVDtcbiAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfTWVtb3J5UGVyc2lzdGVuY2UoKGUgPT4gX19QUklWQVRFX01lbW9yeUxydURlbGVnYXRlLkhyKGUsIHQpKSwgdGhpcy5zZXJpYWxpemVyKTtcbiAgICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXMgYWxsIGNvbXBvbmVudHMgbmVlZGVkIGZvciBGaXJlc3RvcmUgd2l0aCBJbmRleGVkREIgcGVyc2lzdGVuY2UuXG4gKi8gY2xhc3MgX19QUklWQVRFX0luZGV4ZWREYk9mZmxpbmVDb21wb25lbnRQcm92aWRlciBleHRlbmRzIE1lbW9yeU9mZmxpbmVDb21wb25lbnRQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLlFhID0gZSwgdGhpcy5jYWNoZVNpemVCeXRlcyA9IHQsIHRoaXMuZm9yY2VPd25lcnNoaXAgPSBuLCB0aGlzLnN5bmNocm9uaXplVGFicyA9ICExO1xuICAgIH1cbiAgICBhc3luYyBpbml0aWFsaXplKGUpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuaW5pdGlhbGl6ZShlKSwgYXdhaXQgdGhpcy5RYS5pbml0aWFsaXplKHRoaXMsIGUpLCBcbiAgICAgICAgLy8gRW5xdWV1ZSB3cml0ZXMgZnJvbSBhIHByZXZpb3VzIHNlc3Npb25cbiAgICAgICAgYXdhaXQgX19QUklWQVRFX3N5bmNFbmdpbmVFbnN1cmVXcml0ZUNhbGxiYWNrcyh0aGlzLlFhLnN5bmNFbmdpbmUpLCBhd2FpdCBfX1BSSVZBVEVfZmlsbFdyaXRlUGlwZWxpbmUodGhpcy5RYS5yZW1vdGVTdG9yZSksIFxuICAgICAgICAvLyBOT1RFOiBUaGlzIHdpbGwgaW1tZWRpYXRlbHkgY2FsbCB0aGUgbGlzdGVuZXIsIHNvIHdlIG1ha2Ugc3VyZSB0b1xuICAgICAgICAvLyBzZXQgaXQgYWZ0ZXIgbG9jYWxTdG9yZSAvIHJlbW90ZVN0b3JlIGFyZSBzdGFydGVkLlxuICAgICAgICBhd2FpdCB0aGlzLnBlcnNpc3RlbmNlLmZpKCgoKSA9PiAodGhpcy5nY1NjaGVkdWxlciAmJiAhdGhpcy5nY1NjaGVkdWxlci5zdGFydGVkICYmIHRoaXMuZ2NTY2hlZHVsZXIuc3RhcnQoKSwgXG4gICAgICAgIHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyICYmICF0aGlzLmluZGV4QmFja2ZpbGxlclNjaGVkdWxlci5zdGFydGVkICYmIHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyLnN0YXJ0KCksIFxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKSkpKTtcbiAgICB9XG4gICAgY3JlYXRlTG9jYWxTdG9yZShlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfbmV3TG9jYWxTdG9yZSh0aGlzLnBlcnNpc3RlbmNlLCBuZXcgX19QUklWQVRFX1F1ZXJ5RW5naW5lLCBlLmluaXRpYWxVc2VyLCB0aGlzLnNlcmlhbGl6ZXIpO1xuICAgIH1cbiAgICBjcmVhdGVHYXJiYWdlQ29sbGVjdGlvblNjaGVkdWxlcihlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLnBlcnNpc3RlbmNlLnJlZmVyZW5jZURlbGVnYXRlLmdhcmJhZ2VDb2xsZWN0b3I7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX0xydVNjaGVkdWxlcihuLCBlLmFzeW5jUXVldWUsIHQpO1xuICAgIH1cbiAgICBjcmVhdGVJbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gbmV3IF9fUFJJVkFURV9JbmRleEJhY2tmaWxsZXIodCwgdGhpcy5wZXJzaXN0ZW5jZSk7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX0luZGV4QmFja2ZpbGxlclNjaGVkdWxlcihlLmFzeW5jUXVldWUsIG4pO1xuICAgIH1cbiAgICBjcmVhdGVQZXJzaXN0ZW5jZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfaW5kZXhlZERiU3RvcmFnZVByZWZpeChlLmRhdGFiYXNlSW5mby5kYXRhYmFzZUlkLCBlLmRhdGFiYXNlSW5mby5wZXJzaXN0ZW5jZUtleSksIG4gPSB2b2lkIDAgIT09IHRoaXMuY2FjaGVTaXplQnl0ZXMgPyBMcnVQYXJhbXMud2l0aENhY2hlU2l6ZSh0aGlzLmNhY2hlU2l6ZUJ5dGVzKSA6IExydVBhcmFtcy5ERUZBVUxUO1xuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9JbmRleGVkRGJQZXJzaXN0ZW5jZSh0aGlzLnN5bmNocm9uaXplVGFicywgdCwgZS5jbGllbnRJZCwgbiwgZS5hc3luY1F1ZXVlLCBfX1BSSVZBVEVfZ2V0V2luZG93KCksIGdldERvY3VtZW50KCksIHRoaXMuc2VyaWFsaXplciwgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSwgISF0aGlzLmZvcmNlT3duZXJzaGlwKTtcbiAgICB9XG4gICAgY3JlYXRlU2hhcmVkQ2xpZW50U3RhdGUoZSkge1xuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9NZW1vcnlTaGFyZWRDbGllbnRTdGF0ZTtcbiAgICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXMgYWxsIGNvbXBvbmVudHMgbmVlZGVkIGZvciBGaXJlc3RvcmUgd2l0aCBtdWx0aS10YWIgSW5kZXhlZERCXG4gKiBwZXJzaXN0ZW5jZS5cbiAqXG4gKiBJbiB0aGUgbGVnYWN5IGNsaWVudCwgdGhpcyBwcm92aWRlciBpcyB1c2VkIHRvIHByb3ZpZGUgYm90aCBtdWx0aS10YWIgYW5kXG4gKiBub24tbXVsdGktdGFiIHBlcnNpc3RlbmNlIHNpbmNlIHdlIGNhbm5vdCB0ZWxsIGF0IGJ1aWxkIHRpbWUgd2hldGhlclxuICogYHN5bmNocm9uaXplVGFic2Agd2lsbCBiZSBlbmFibGVkLlxuICovIGNsYXNzIF9fUFJJVkFURV9NdWx0aVRhYk9mZmxpbmVDb21wb25lbnRQcm92aWRlciBleHRlbmRzIF9fUFJJVkFURV9JbmRleGVkRGJPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgc3VwZXIoZSwgdCwgLyogZm9yY2VPd25lcnNoaXA9ICovICExKSwgdGhpcy5RYSA9IGUsIHRoaXMuY2FjaGVTaXplQnl0ZXMgPSB0LCB0aGlzLnN5bmNocm9uaXplVGFicyA9ICEwO1xuICAgIH1cbiAgICBhc3luYyBpbml0aWFsaXplKGUpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuaW5pdGlhbGl6ZShlKTtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuUWEuc3luY0VuZ2luZTtcbiAgICAgICAgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSBpbnN0YW5jZW9mIF9fUFJJVkFURV9XZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUgJiYgKHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUuc3luY0VuZ2luZSA9IHtcbiAgICAgICAgICAgIFpzOiBfX1BSSVZBVEVfc3luY0VuZ2luZUFwcGx5QmF0Y2hTdGF0ZS5iaW5kKG51bGwsIHQpLFxuICAgICAgICAgICAgWHM6IF9fUFJJVkFURV9zeW5jRW5naW5lQXBwbHlUYXJnZXRTdGF0ZS5iaW5kKG51bGwsIHQpLFxuICAgICAgICAgICAgZW86IF9fUFJJVkFURV9zeW5jRW5naW5lQXBwbHlBY3RpdmVUYXJnZXRzQ2hhbmdlLmJpbmQobnVsbCwgdCksXG4gICAgICAgICAgICBCaTogX19QUklWQVRFX3N5bmNFbmdpbmVHZXRBY3RpdmVDbGllbnRzLmJpbmQobnVsbCwgdCksXG4gICAgICAgICAgICBZczogX19QUklWQVRFX3N5bmNFbmdpbmVTeW5jaHJvbml6ZVdpdGhDaGFuZ2VkRG9jdW1lbnRzLmJpbmQobnVsbCwgdClcbiAgICAgICAgfSwgYXdhaXQgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5zdGFydCgpKSwgXG4gICAgICAgIC8vIE5PVEU6IFRoaXMgd2lsbCBpbW1lZGlhdGVseSBjYWxsIHRoZSBsaXN0ZW5lciwgc28gd2UgbWFrZSBzdXJlIHRvXG4gICAgICAgIC8vIHNldCBpdCBhZnRlciBsb2NhbFN0b3JlIC8gcmVtb3RlU3RvcmUgYXJlIHN0YXJ0ZWQuXG4gICAgICAgIGF3YWl0IHRoaXMucGVyc2lzdGVuY2UuZmkoKGFzeW5jIGUgPT4ge1xuICAgICAgICAgICAgYXdhaXQgX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseVByaW1hcnlTdGF0ZSh0aGlzLlFhLnN5bmNFbmdpbmUsIGUpLCB0aGlzLmdjU2NoZWR1bGVyICYmIChlICYmICF0aGlzLmdjU2NoZWR1bGVyLnN0YXJ0ZWQgPyB0aGlzLmdjU2NoZWR1bGVyLnN0YXJ0KCkgOiBlIHx8IHRoaXMuZ2NTY2hlZHVsZXIuc3RvcCgpKSwgXG4gICAgICAgICAgICB0aGlzLmluZGV4QmFja2ZpbGxlclNjaGVkdWxlciAmJiAoZSAmJiAhdGhpcy5pbmRleEJhY2tmaWxsZXJTY2hlZHVsZXIuc3RhcnRlZCA/IHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyLnN0YXJ0KCkgOiBlIHx8IHRoaXMuaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyLnN0b3AoKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgY3JlYXRlU2hhcmVkQ2xpZW50U3RhdGUoZSkge1xuICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX2dldFdpbmRvdygpO1xuICAgICAgICBpZiAoIV9fUFJJVkFURV9XZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUuRCh0KSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuVU5JTVBMRU1FTlRFRCwgXCJJbmRleGVkREIgcGVyc2lzdGVuY2UgaXMgb25seSBhdmFpbGFibGUgb24gcGxhdGZvcm1zIHRoYXQgc3VwcG9ydCBMb2NhbFN0b3JhZ2UuXCIpO1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2luZGV4ZWREYlN0b3JhZ2VQcmVmaXgoZS5kYXRhYmFzZUluZm8uZGF0YWJhc2VJZCwgZS5kYXRhYmFzZUluZm8ucGVyc2lzdGVuY2VLZXkpO1xuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9XZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUodCwgZS5hc3luY1F1ZXVlLCBuLCBlLmNsaWVudElkLCBlLmluaXRpYWxVc2VyKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW5kIHdpcmVzIHRoZSBjb21wb25lbnRzIHRoYXQgYXJlIG5lZWRlZCB0byBpbnRlcmZhY2Ugd2l0aCB0aGVcbiAqIG5ldHdvcmsuXG4gKi8gY2xhc3MgT25saW5lQ29tcG9uZW50UHJvdmlkZXIge1xuICAgIGFzeW5jIGluaXRpYWxpemUoZSwgdCkge1xuICAgICAgICB0aGlzLmxvY2FsU3RvcmUgfHwgKHRoaXMubG9jYWxTdG9yZSA9IGUubG9jYWxTdG9yZSwgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSA9IGUuc2hhcmVkQ2xpZW50U3RhdGUsIFxuICAgICAgICB0aGlzLmRhdGFzdG9yZSA9IHRoaXMuY3JlYXRlRGF0YXN0b3JlKHQpLCB0aGlzLnJlbW90ZVN0b3JlID0gdGhpcy5jcmVhdGVSZW1vdGVTdG9yZSh0KSwgXG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyID0gdGhpcy5jcmVhdGVFdmVudE1hbmFnZXIodCksIHRoaXMuc3luY0VuZ2luZSA9IHRoaXMuY3JlYXRlU3luY0VuZ2luZSh0LCBcbiAgICAgICAgLyogc3RhcnRBc1ByaW1hcnk9Ki8gIWUuc3luY2hyb25pemVUYWJzKSwgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5vbmxpbmVTdGF0ZUhhbmRsZXIgPSBlID0+IF9fUFJJVkFURV9zeW5jRW5naW5lQXBwbHlPbmxpbmVTdGF0ZUNoYW5nZSh0aGlzLnN5bmNFbmdpbmUsIGUsIDEgLyogT25saW5lU3RhdGVTb3VyY2UuU2hhcmVkQ2xpZW50U3RhdGUgKi8pLCBcbiAgICAgICAgdGhpcy5yZW1vdGVTdG9yZS5yZW1vdGVTeW5jZXIuaGFuZGxlQ3JlZGVudGlhbENoYW5nZSA9IF9fUFJJVkFURV9zeW5jRW5naW5lSGFuZGxlQ3JlZGVudGlhbENoYW5nZS5iaW5kKG51bGwsIHRoaXMuc3luY0VuZ2luZSksIFxuICAgICAgICBhd2FpdCBfX1BSSVZBVEVfcmVtb3RlU3RvcmVBcHBseVByaW1hcnlTdGF0ZSh0aGlzLnJlbW90ZVN0b3JlLCB0aGlzLnN5bmNFbmdpbmUuaXNQcmltYXJ5Q2xpZW50KSk7XG4gICAgfVxuICAgIGNyZWF0ZUV2ZW50TWFuYWdlcihlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfbmV3RXZlbnRNYW5hZ2VyKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfRXZlbnRNYW5hZ2VySW1wbDtcbiAgICAgICAgfSgpO1xuICAgIH1cbiAgICBjcmVhdGVEYXRhc3RvcmUoZSkge1xuICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX25ld1NlcmlhbGl6ZXIoZS5kYXRhYmFzZUluZm8uZGF0YWJhc2VJZCksIG4gPSBmdW5jdGlvbiBfX1BSSVZBVEVfbmV3Q29ubmVjdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9XZWJDaGFubmVsQ29ubmVjdGlvbihlKTtcbiAgICAgICAgfVxuICAgICAgICAvKiogUmV0dXJuIHRoZSBQbGF0Zm9ybS1zcGVjaWZpYyBjb25uZWN0aXZpdHkgbW9uaXRvci4gKi8gKGUuZGF0YWJhc2VJbmZvKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9uZXdEYXRhc3RvcmUoZSwgdCwgbiwgcikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfRGF0YXN0b3JlSW1wbChlLCB0LCBuLCByKTtcbiAgICAgICAgfShlLmF1dGhDcmVkZW50aWFscywgZS5hcHBDaGVja0NyZWRlbnRpYWxzLCBuLCB0KTtcbiAgICB9XG4gICAgY3JlYXRlUmVtb3RlU3RvcmUoZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX25ld1JlbW90ZVN0b3JlKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX1JlbW90ZVN0b3JlSW1wbChlLCB0LCBuLCByLCBpKTtcbiAgICAgICAgfVxuICAgICAgICAvKiogUmUtZW5hYmxlcyB0aGUgbmV0d29yay4gSWRlbXBvdGVudC4gKi8gKHRoaXMubG9jYWxTdG9yZSwgdGhpcy5kYXRhc3RvcmUsIGUuYXN5bmNRdWV1ZSwgKGUgPT4gX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseU9ubGluZVN0YXRlQ2hhbmdlKHRoaXMuc3luY0VuZ2luZSwgZSwgMCAvKiBPbmxpbmVTdGF0ZVNvdXJjZS5SZW1vdGVTdG9yZSAqLykpLCBmdW5jdGlvbiBfX1BSSVZBVEVfbmV3Q29ubmVjdGl2aXR5TW9uaXRvcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfX1BSSVZBVEVfQnJvd3NlckNvbm5lY3Rpdml0eU1vbml0b3IuRCgpID8gbmV3IF9fUFJJVkFURV9Ccm93c2VyQ29ubmVjdGl2aXR5TW9uaXRvciA6IG5ldyBfX1BSSVZBVEVfTm9vcENvbm5lY3Rpdml0eU1vbml0b3I7XG4gICAgICAgIH0oKSk7XG4gICAgfVxuICAgIGNyZWF0ZVN5bmNFbmdpbmUoZSwgdCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX25ld1N5bmNFbmdpbmUoZSwgdCwgbiwgXG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogTWFuYWdlcyBzdGF0ZSBzeW5jaHJvbml6YXRpb24gaW4gbXVsdGktdGFiIGVudmlyb25tZW50cy5cbiAgICAgICAgciwgaSwgcywgbykge1xuICAgICAgICAgICAgY29uc3QgXyA9IG5ldyBfX1BSSVZBVEVfU3luY0VuZ2luZUltcGwoZSwgdCwgbiwgciwgaSwgcyk7XG4gICAgICAgICAgICByZXR1cm4gbyAmJiAoXy5MYSA9ICEwKSwgXztcbiAgICAgICAgfSh0aGlzLmxvY2FsU3RvcmUsIHRoaXMucmVtb3RlU3RvcmUsIHRoaXMuZXZlbnRNYW5hZ2VyLCB0aGlzLnNoYXJlZENsaWVudFN0YXRlLCBlLmluaXRpYWxVc2VyLCBlLm1heENvbmN1cnJlbnRMaW1ib1Jlc29sdXRpb25zLCB0KTtcbiAgICB9XG4gICAgYXN5bmMgdGVybWluYXRlKCkge1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgYXdhaXQgYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3JlbW90ZVN0b3JlU2h1dGRvd24oZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJSZW1vdGVTdG9yZVwiLCBcIlJlbW90ZVN0b3JlIHNodXR0aW5nIGRvd24uXCIpLCB0Lk1fLmFkZCg1IC8qIE9mZmxpbmVDYXVzZS5TaHV0ZG93biAqLyksIFxuICAgICAgICAgICAgYXdhaXQgX19QUklWQVRFX2Rpc2FibGVOZXR3b3JrSW50ZXJuYWwodCksIHQuT18uc2h1dGRvd24oKSwgXG4gICAgICAgICAgICAvLyBTZXQgdGhlIE9ubGluZVN0YXRlIHRvIFVua25vd24gKHJhdGhlciB0aGFuIE9mZmxpbmUpIHRvIGF2b2lkIHBvdGVudGlhbGx5XG4gICAgICAgICAgICAvLyB0cmlnZ2VyaW5nIHNwdXJpb3VzIGxpc3RlbmVyIGV2ZW50cyB3aXRoIGNhY2hlZCBkYXRhLCBldGMuXG4gICAgICAgICAgICB0Lk5fLnNldChcIlVua25vd25cIiAvKiBPbmxpbmVTdGF0ZS5Vbmtub3duICovKTtcbiAgICAgICAgfSh0aGlzLnJlbW90ZVN0b3JlKSwgbnVsbCA9PT0gKGUgPSB0aGlzLmRhdGFzdG9yZSkgfHwgdm9pZCAwID09PSBlIHx8IGUudGVybWluYXRlKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBIb3cgbWFueSBieXRlcyB0byByZWFkIGVhY2ggdGltZSB3aGVuIGBSZWFkYWJsZVN0cmVhbVJlYWRlci5yZWFkKClgIGlzXG4gKiBjYWxsZWQuIE9ubHkgYXBwbGljYWJsZSBmb3IgYnl0ZSBzdHJlYW1zIHRoYXQgd2UgY29udHJvbCAoZS5nLiB0aG9zZSBiYWNrZWRcbiAqIGJ5IGFuIFVJbnQ4QXJyYXkpLlxuICovXG4vKipcbiAqIEJ1aWxkcyBhIGBCeXRlU3RyZWFtUmVhZGVyYCBmcm9tIGEgVUludDhBcnJheS5cbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgZGF0YSBzb3VyY2UgdG8gdXNlLlxuICogQHBhcmFtIGJ5dGVzUGVyUmVhZCAtIEhvdyBtYW55IGJ5dGVzIGVhY2ggYHJlYWQoKWAgZnJvbSB0aGUgcmV0dXJuZWQgcmVhZGVyXG4gKiAgICAgICAgd2lsbCByZWFkLlxuICovXG5mdW5jdGlvbiBfX1BSSVZBVEVfdG9CeXRlU3RyZWFtUmVhZGVySGVscGVyKGUsIHQgPSAxMDI0MCkge1xuICAgIGxldCBuID0gMDtcbiAgICAvLyBUaGUgVHlwZVNjcmlwdCBkZWZpbml0aW9uIGZvciBSZWFkYWJsZVN0cmVhbVJlYWRlciBjaGFuZ2VkLiBXZSB1c2VcbiAgICAvLyBgYW55YCBoZXJlIHRvIGFsbG93IHRoaXMgY29kZSB0byBjb21waWxlIHdpdGggZGlmZmVyZW50IHZlcnNpb25zLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzQyOTcwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgYXN5bmMgcmVhZCgpIHtcbiAgICAgICAgICAgIGlmIChuIDwgZS5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGUuc2xpY2UobiwgbiArIHQpLFxuICAgICAgICAgICAgICAgICAgICBkb25lOiAhMVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4gKz0gdCwgcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZG9uZTogITBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGNhbmNlbCgpIHt9LFxuICAgICAgICByZWxlYXNlTG9jaygpIHt9LFxuICAgICAgICBjbG9zZWQ6IFByb21pc2UucmVzb2x2ZSgpXG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogT24gd2ViLCBhIGBSZWFkYWJsZVN0cmVhbWAgaXMgd3JhcHBlZCBhcm91bmQgYnkgYSBgQnl0ZVN0cmVhbVJlYWRlcmAuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKlxuICogQSB3cmFwcGVyIGltcGxlbWVudGF0aW9uIG9mIE9ic2VydmVyPFQ+IHRoYXQgd2lsbCBkaXNwYXRjaCBldmVudHNcbiAqIGFzeW5jaHJvbm91c2x5LiBUbyBhbGxvdyBpbW1lZGlhdGUgc2lsZW5jaW5nLCBhIG11dGUgY2FsbCBpcyBhZGRlZCB3aGljaFxuICogY2F1c2VzIGV2ZW50cyBzY2hlZHVsZWQgdG8gbm8gbG9uZ2VyIGJlIHJhaXNlZC5cbiAqL1xuY2xhc3MgX19QUklWQVRFX0FzeW5jT2JzZXJ2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IGUsIFxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBzZXQgdG8gdHJ1ZSwgd2lsbCBub3QgcmFpc2UgZnV0dXJlIGV2ZW50cy4gTmVjZXNzYXJ5IHRvIGRlYWwgd2l0aFxuICAgICAgICAgKiBhc3luYyBkZXRhY2htZW50IG9mIGxpc3RlbmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tdXRlZCA9ICExO1xuICAgIH1cbiAgICBuZXh0KGUpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlci5uZXh0ICYmIHRoaXMuS2EodGhpcy5vYnNlcnZlci5uZXh0LCBlKTtcbiAgICB9XG4gICAgZXJyb3IoZSkge1xuICAgICAgICB0aGlzLm9ic2VydmVyLmVycm9yID8gdGhpcy5LYSh0aGlzLm9ic2VydmVyLmVycm9yLCBlKSA6IF9fUFJJVkFURV9sb2dFcnJvcihcIlVuY2F1Z2h0IEVycm9yIGluIHNuYXBzaG90IGxpc3RlbmVyOlwiLCBlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICAkYSgpIHtcbiAgICAgICAgdGhpcy5tdXRlZCA9ICEwO1xuICAgIH1cbiAgICBLYShlLCB0KSB7XG4gICAgICAgIHRoaXMubXV0ZWQgfHwgc2V0VGltZW91dCgoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tdXRlZCB8fCBlKHQpO1xuICAgICAgICB9KSwgMCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGluZyBhIGJ1bmRsZS5cbiAqXG4gKiBUYWtlcyBhIGJ1bmRsZSBzdHJlYW0gb3IgYnVmZmVyLCBhbmQgcHJlc2VudHMgYWJzdHJhY3Rpb25zIHRvIHJlYWQgYnVuZGxlZFxuICogZWxlbWVudHMgb3V0IG9mIHRoZSB1bmRlcmx5aW5nIGNvbnRlbnQuXG4gKi8gY2xhc3MgX19QUklWQVRFX0J1bmRsZVJlYWRlckltcGwge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgcmVhZGVyIHRvIHJlYWQgZnJvbSB1bmRlcmx5aW5nIGJpbmFyeSBidW5kbGUgZGF0YSBzb3VyY2UuICovXG4gICAgZSwgdCkge1xuICAgICAgICB0aGlzLlVhID0gZSwgdGhpcy5zZXJpYWxpemVyID0gdCwgXG4gICAgICAgIC8qKiBDYWNoZWQgYnVuZGxlIG1ldGFkYXRhLiAqL1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbmV3IF9fUFJJVkFURV9EZWZlcnJlZCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBidWZmZXIgdG8gaG9sZCBidW5kbGUgY29udGVudCwgYWNjdW11bGF0aW5nIGluY29tcGxldGUgZWxlbWVudFxuICAgICAgICAgKiBjb250ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheSwgdGhpcy5XYSA9IGZ1bmN0aW9uIF9fUFJJVkFURV9uZXdUZXh0RGVjb2RlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKTtcbiAgICAgICAgfSgpLCBcbiAgICAgICAgLy8gUmVhZCB0aGUgbWV0YWRhdGEgKHdoaWNoIGlzIHRoZSBmaXJzdCBlbGVtZW50KS5cbiAgICAgICAgdGhpcy5HYSgpLnRoZW4oKGUgPT4ge1xuICAgICAgICAgICAgZSAmJiBlLnNhKCkgPyB0aGlzLm1ldGFkYXRhLnJlc29sdmUoZS5pYS5tZXRhZGF0YSkgOiB0aGlzLm1ldGFkYXRhLnJlamVjdChuZXcgRXJyb3IoYFRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBidW5kbGUgaXMgbm90IGEgbWV0YWRhdGEsIGl0IGlzXFxuICAgICAgICAgICAgICR7SlNPTi5zdHJpbmdpZnkobnVsbCA9PSBlID8gdm9pZCAwIDogZS5pYSl9YCkpO1xuICAgICAgICB9KSwgKGUgPT4gdGhpcy5tZXRhZGF0YS5yZWplY3QoZSkpKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlVhLmNhbmNlbCgpO1xuICAgIH1cbiAgICBhc3luYyBnZXRNZXRhZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGEucHJvbWlzZTtcbiAgICB9XG4gICAgYXN5bmMgcWEoKSB7XG4gICAgICAgIC8vIE1ha2VzIHN1cmUgbWV0YWRhdGEgaXMgcmVhZCBiZWZvcmUgcHJvY2VlZGluZy5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TWV0YWRhdGEoKSwgdGhpcy5HYSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkcyBmcm9tIHRoZSBoZWFkIG9mIGludGVybmFsIGJ1ZmZlciwgYW5kIHB1bGxpbmcgbW9yZSBkYXRhIGZyb21cbiAgICAgKiB1bmRlcmx5aW5nIHN0cmVhbSBpZiBhIGNvbXBsZXRlIGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLCB1bnRpbCBhblxuICAgICAqIGVsZW1lbnQoaW5jbHVkaW5nIHRoZSBwcmVmaXhlZCBsZW5ndGggYW5kIHRoZSBKU09OIHN0cmluZykgaXMgZm91bmQuXG4gICAgICpcbiAgICAgKiBPbmNlIGEgY29tcGxldGUgZWxlbWVudCBpcyByZWFkLCBpdCBpcyBkcm9wcGVkIGZyb20gaW50ZXJuYWwgYnVmZmVyLlxuICAgICAqXG4gICAgICogUmV0dXJucyBlaXRoZXIgdGhlIGJ1bmRsZWQgZWxlbWVudCwgb3IgbnVsbCBpZiB3ZSBoYXZlIHJlYWNoZWQgdGhlIGVuZCBvZlxuICAgICAqIHRoZSBzdHJlYW0uXG4gICAgICovICAgIGFzeW5jIEdhKCkge1xuICAgICAgICBjb25zdCBlID0gYXdhaXQgdGhpcy56YSgpO1xuICAgICAgICBpZiAobnVsbCA9PT0gZSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLldhLmRlY29kZShlKSwgbiA9IE51bWJlcih0KTtcbiAgICAgICAgaXNOYU4obikgJiYgdGhpcy5qYShgbGVuZ3RoIHN0cmluZyAoJHt0fSkgaXMgbm90IHZhbGlkIG51bWJlcmApO1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5IYShuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfU2l6ZWRCdW5kbGVFbGVtZW50KEpTT04ucGFyc2UociksIGUubGVuZ3RoICsgbik7XG4gICAgfVxuICAgIC8qKiBGaXJzdCBpbmRleCBvZiAneycgZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXIuICovICAgIEphKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuZmluZEluZGV4KChlID0+IGUgPT09IFwie1wiLmNoYXJDb2RlQXQoMCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBpbnRlcm5hbCBidWZmZXIsIHVudGlsIHRoZSBmaXJzdCAneycsIGFuZFxuICAgICAqIHJldHVybiB0aGUgY29udGVudC5cbiAgICAgKlxuICAgICAqIElmIHJlYWNoZWQgZW5kIG9mIHRoZSBzdHJlYW0sIHJldHVybnMgYSBudWxsLlxuICAgICAqLyAgICBhc3luYyB6YSgpIHtcbiAgICAgICAgZm9yICg7dGhpcy5KYSgpIDwgMDsgKSB7XG4gICAgICAgICAgICBpZiAoYXdhaXQgdGhpcy5ZYSgpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBCcm9rZSBvdXQgb2YgdGhlIGxvb3AgYmVjYXVzZSB1bmRlcmx5aW5nIHN0cmVhbSBpcyBjbG9zZWQsIGFuZCB0aGVyZVxuICAgICAgICAvLyBoYXBwZW5zIHRvIGJlIG5vIG1vcmUgZGF0YSB0byBwcm9jZXNzLlxuICAgICAgICAgICAgICAgIGlmICgwID09PSB0aGlzLmJ1ZmZlci5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBlID0gdGhpcy5KYSgpO1xuICAgICAgICAvLyBCcm9rZSBvdXQgb2YgdGhlIGxvb3AgYmVjYXVzZSB1bmRlcmx5aW5nIHN0cmVhbSBpcyBjbG9zZWQsIGJ1dCBzdGlsbFxuICAgICAgICAvLyBjYW5ub3QgZmluZCBhbiBvcGVuIGJyYWNrZXQuXG4gICAgICAgICAgICAgICAgZSA8IDAgJiYgdGhpcy5qYShcIlJlYWNoZWQgdGhlIGVuZCBvZiBidW5kbGUgd2hlbiBhIGxlbmd0aCBzdHJpbmcgaXMgZXhwZWN0ZWQuXCIpO1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5idWZmZXIuc2xpY2UoMCwgZSk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaW50ZXJuYWwgYnVmZmVyIHRvIGRyb3AgdGhlIHJlYWQgbGVuZ3RoLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnNsaWNlKGUpLCB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkcyBmcm9tIGEgc3BlY2lmaWVkIHBvc2l0aW9uIGZyb20gdGhlIGludGVybmFsIGJ1ZmZlciwgZm9yIGEgc3BlY2lmaWVkXG4gICAgICogbnVtYmVyIG9mIGJ5dGVzLCBwdWxsaW5nIG1vcmUgZGF0YSBmcm9tIHRoZSB1bmRlcmx5aW5nIHN0cmVhbSBpZiBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIGRlY29kZWQgZnJvbSB0aGUgcmVhZCBieXRlcy5cbiAgICAgKi8gICAgYXN5bmMgSGEoZSkge1xuICAgICAgICBmb3IgKDt0aGlzLmJ1ZmZlci5sZW5ndGggPCBlOyApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuWWEoKSAmJiB0aGlzLmphKFwiUmVhY2hlZCB0aGUgZW5kIG9mIGJ1bmRsZSB3aGVuIG1vcmUgaXMgZXhwZWN0ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLldhLmRlY29kZSh0aGlzLmJ1ZmZlci5zbGljZSgwLCBlKSk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaW50ZXJuYWwgYnVmZmVyIHRvIGRyb3AgdGhlIHJlYWQganNvbiBzdHJpbmcuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuc2xpY2UoZSksIHQ7XG4gICAgfVxuICAgIGphKGUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aHJvdyB0aGlzLlVhLmNhbmNlbCgpLCBuZXcgRXJyb3IoYEludmFsaWQgYnVuZGxlIGZvcm1hdDogJHtlfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQdWxscyBtb3JlIGRhdGEgZnJvbSB1bmRlcmx5aW5nIHN0cmVhbSB0byBpbnRlcm5hbCBidWZmZXIuXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBzdHJlYW0gaXMgZmluaXNoZWQuXG4gICAgICovICAgIGFzeW5jIFlhKCkge1xuICAgICAgICBjb25zdCBlID0gYXdhaXQgdGhpcy5VYS5yZWFkKCk7XG4gICAgICAgIGlmICghZS5kb25lKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIubGVuZ3RoICsgZS52YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgdC5zZXQodGhpcy5idWZmZXIpLCB0LnNldChlLnZhbHVlLCB0aGlzLmJ1ZmZlci5sZW5ndGgpLCB0aGlzLmJ1ZmZlciA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUuZG9uZTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEludGVybmFsIHRyYW5zYWN0aW9uIG9iamVjdCByZXNwb25zaWJsZSBmb3IgYWNjdW11bGF0aW5nIHRoZSBtdXRhdGlvbnMgdG9cbiAqIHBlcmZvcm0gYW5kIHRoZSBiYXNlIHZlcnNpb25zIGZvciBhbnkgZG9jdW1lbnRzIHJlYWQuXG4gKi9cbmNsYXNzIFRyYW5zYWN0aW9uJDIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5kYXRhc3RvcmUgPSBlLCBcbiAgICAgICAgLy8gVGhlIHZlcnNpb24gb2YgZWFjaCBkb2N1bWVudCB0aGF0IHdhcyByZWFkIGR1cmluZyB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAgICB0aGlzLnJlYWRWZXJzaW9ucyA9IG5ldyBNYXAsIHRoaXMubXV0YXRpb25zID0gW10sIHRoaXMuY29tbWl0dGVkID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBkZWZlcnJlZCB1c2FnZSBlcnJvciB0aGF0IG9jY3VycmVkIHByZXZpb3VzbHkgaW4gdGhpcyB0cmFuc2FjdGlvbiB0aGF0XG4gICAgICAgICAqIHdpbGwgY2F1c2UgdGhlIHRyYW5zYWN0aW9uIHRvIGZhaWwgb25jZSBpdCBhY3R1YWxseSBjb21taXRzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sYXN0VHJhbnNhY3Rpb25FcnJvciA9IG51bGwsIFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IG9mIGRvY3VtZW50cyB0aGF0IGhhdmUgYmVlbiB3cml0dGVuIGluIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogV2hlbiB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgd3JpdGUgdG8gdGhlIHNhbWUga2V5IGluIGEgdHJhbnNhY3Rpb24sIGFueVxuICAgICAgICAgKiB3cml0ZXMgYWZ0ZXIgdGhlIGZpcnN0IGFyZSBoYW5kbGVkIGRpZmZlcmVudGx5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53cml0dGVuRG9jcyA9IG5ldyBTZXQ7XG4gICAgfVxuICAgIGFzeW5jIGxvb2t1cChlKSB7XG4gICAgICAgIGlmICh0aGlzLmVuc3VyZUNvbW1pdE5vdENhbGxlZCgpLCB0aGlzLm11dGF0aW9ucy5sZW5ndGggPiAwKSB0aHJvdyB0aGlzLmxhc3RUcmFuc2FjdGlvbkVycm9yID0gbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJGaXJlc3RvcmUgdHJhbnNhY3Rpb25zIHJlcXVpcmUgYWxsIHJlYWRzIHRvIGJlIGV4ZWN1dGVkIGJlZm9yZSBhbGwgd3JpdGVzLlwiKSwgXG4gICAgICAgIHRoaXMubGFzdFRyYW5zYWN0aW9uRXJyb3I7XG4gICAgICAgIGNvbnN0IHQgPSBhd2FpdCBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfaW52b2tlQmF0Y2hHZXREb2N1bWVudHNScGMoZSwgdCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSksIHIgPSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRzOiB0Lm1hcCgoZSA9PiBfX1BSSVZBVEVfdG9OYW1lKG4uc2VyaWFsaXplciwgZSkpKVxuICAgICAgICAgICAgfSwgaSA9IGF3YWl0IG4ueG8oXCJCYXRjaEdldERvY3VtZW50c1wiLCBuLnNlcmlhbGl6ZXIuZGF0YWJhc2VJZCwgUmVzb3VyY2VQYXRoLmVtcHR5UGF0aCgpLCByLCB0Lmxlbmd0aCksIHMgPSBuZXcgTWFwO1xuICAgICAgICAgICAgaS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX2Zyb21CYXRjaEdldERvY3VtZW50c1Jlc3BvbnNlKG4uc2VyaWFsaXplciwgZSk7XG4gICAgICAgICAgICAgICAgcy5zZXQodC5rZXkudG9TdHJpbmcoKSwgdCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCBvID0gW107XG4gICAgICAgICAgICByZXR1cm4gdC5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gcy5nZXQoZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBfX1BSSVZBVEVfaGFyZEFzc2VydCghIXQpLCBvLnB1c2godCk7XG4gICAgICAgICAgICB9KSksIG87XG4gICAgICAgIH0odGhpcy5kYXRhc3RvcmUsIGUpO1xuICAgICAgICByZXR1cm4gdC5mb3JFYWNoKChlID0+IHRoaXMucmVjb3JkVmVyc2lvbihlKSkpLCB0O1xuICAgIH1cbiAgICBzZXQoZSwgdCkge1xuICAgICAgICB0aGlzLndyaXRlKHQudG9NdXRhdGlvbihlLCB0aGlzLnByZWNvbmRpdGlvbihlKSkpLCB0aGlzLndyaXR0ZW5Eb2NzLmFkZChlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICB1cGRhdGUoZSwgdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53cml0ZSh0LnRvTXV0YXRpb24oZSwgdGhpcy5wcmVjb25kaXRpb25Gb3JVcGRhdGUoZSkpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0VHJhbnNhY3Rpb25FcnJvciA9IGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cml0dGVuRG9jcy5hZGQoZS50b1N0cmluZygpKTtcbiAgICB9XG4gICAgZGVsZXRlKGUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuZXcgX19QUklWQVRFX0RlbGV0ZU11dGF0aW9uKGUsIHRoaXMucHJlY29uZGl0aW9uKGUpKSksIHRoaXMud3JpdHRlbkRvY3MuYWRkKGUudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGFzeW5jIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5zdXJlQ29tbWl0Tm90Q2FsbGVkKCksIHRoaXMubGFzdFRyYW5zYWN0aW9uRXJyb3IpIHRocm93IHRoaXMubGFzdFRyYW5zYWN0aW9uRXJyb3I7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLnJlYWRWZXJzaW9ucztcbiAgICAgICAgLy8gRm9yIGVhY2ggbXV0YXRpb24sIG5vdGUgdGhhdCB0aGUgZG9jIHdhcyB3cml0dGVuLlxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25zLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgZS5kZWxldGUodC5rZXkudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pKSwgXG4gICAgICAgIC8vIEZvciBlYWNoIGRvY3VtZW50IHRoYXQgd2FzIHJlYWQgYnV0IG5vdCB3cml0dGVuIHRvLCB3ZSB3YW50IHRvIHBlcmZvcm1cbiAgICAgICAgLy8gYSBgdmVyaWZ5YCBvcGVyYXRpb24uXG4gICAgICAgIGUuZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBEb2N1bWVudEtleS5mcm9tUGF0aCh0KTtcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zLnB1c2gobmV3IF9fUFJJVkFURV9WZXJpZnlNdXRhdGlvbihuLCB0aGlzLnByZWNvbmRpdGlvbihuKSkpO1xuICAgICAgICB9KSksIGF3YWl0IGFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9pbnZva2VDb21taXRScGMoZSwgdCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSksIHIgPSB7XG4gICAgICAgICAgICAgICAgd3JpdGVzOiB0Lm1hcCgoZSA9PiB0b011dGF0aW9uKG4uc2VyaWFsaXplciwgZSkpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG4uQ28oXCJDb21taXRcIiwgbi5zZXJpYWxpemVyLmRhdGFiYXNlSWQsIFJlc291cmNlUGF0aC5lbXB0eVBhdGgoKSwgcik7XG4gICAgICAgIH0odGhpcy5kYXRhc3RvcmUsIHRoaXMubXV0YXRpb25zKSwgdGhpcy5jb21taXR0ZWQgPSAhMDtcbiAgICB9XG4gICAgcmVjb3JkVmVyc2lvbihlKSB7XG4gICAgICAgIGxldCB0O1xuICAgICAgICBpZiAoZS5pc0ZvdW5kRG9jdW1lbnQoKSkgdCA9IGUudmVyc2lvbjsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWUuaXNOb0RvY3VtZW50KCkpIHRocm93IGZhaWwoKTtcbiAgICAgICAgICAgIC8vIFJlcHJlc2VudCBhIGRlbGV0ZWQgZG9jIHVzaW5nIFNuYXBzaG90VmVyc2lvbi5taW4oKS5cbiAgICAgICAgICAgIHQgPSBTbmFwc2hvdFZlcnNpb24ubWluKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbiA9IHRoaXMucmVhZFZlcnNpb25zLmdldChlLmtleS50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIGlmICghdC5pc0VxdWFsKG4pKSBcbiAgICAgICAgICAgIC8vIFRoaXMgdHJhbnNhY3Rpb24gd2lsbCBmYWlsIG5vIG1hdHRlciB3aGF0LlxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuQUJPUlRFRCwgXCJEb2N1bWVudCB2ZXJzaW9uIGNoYW5nZWQgYmV0d2VlbiB0d28gcmVhZHMuXCIpO1xuICAgICAgICB9IGVsc2UgdGhpcy5yZWFkVmVyc2lvbnMuc2V0KGUua2V5LnRvU3RyaW5nKCksIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2ZXJzaW9uIG9mIHRoaXMgZG9jdW1lbnQgd2hlbiBpdCB3YXMgcmVhZCBpbiB0aGlzIHRyYW5zYWN0aW9uLFxuICAgICAqIGFzIGEgcHJlY29uZGl0aW9uLCBvciBubyBwcmVjb25kaXRpb24gaWYgaXQgd2FzIG5vdCByZWFkLlxuICAgICAqLyAgICBwcmVjb25kaXRpb24oZSkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5yZWFkVmVyc2lvbnMuZ2V0KGUudG9TdHJpbmcoKSk7XG4gICAgICAgIHJldHVybiAhdGhpcy53cml0dGVuRG9jcy5oYXMoZS50b1N0cmluZygpKSAmJiB0ID8gdC5pc0VxdWFsKFNuYXBzaG90VmVyc2lvbi5taW4oKSkgPyBQcmVjb25kaXRpb24uZXhpc3RzKCExKSA6IFByZWNvbmRpdGlvbi51cGRhdGVUaW1lKHQpIDogUHJlY29uZGl0aW9uLm5vbmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJlY29uZGl0aW9uIGZvciBhIGRvY3VtZW50IGlmIHRoZSBvcGVyYXRpb24gaXMgYW4gdXBkYXRlLlxuICAgICAqLyAgICBwcmVjb25kaXRpb25Gb3JVcGRhdGUoZSkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5yZWFkVmVyc2lvbnMuZ2V0KGUudG9TdHJpbmcoKSk7XG4gICAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIGEgZG9jdW1lbnQgaXMgd3JpdHRlbiwgd2Ugd2FudCB0byB0YWtlIGludG8gYWNjb3VudCB0aGVcbiAgICAgICAgLy8gcmVhZCB0aW1lIGFuZCBleGlzdGVuY2VcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud3JpdHRlbkRvY3MuaGFzKGUudG9TdHJpbmcoKSkgJiYgdCkge1xuICAgICAgICAgICAgaWYgKHQuaXNFcXVhbChTbmFwc2hvdFZlcnNpb24ubWluKCkpKSBcbiAgICAgICAgICAgIC8vIFRoZSBkb2N1bWVudCBkb2Vzbid0IGV4aXN0LCBzbyBmYWlsIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgIC8vIFRoaXMgaGFzIHRvIGJlIHZhbGlkYXRlZCBsb2NhbGx5IGJlY2F1c2UgeW91IGNhbid0IHNlbmQgYVxuICAgICAgICAgICAgLy8gcHJlY29uZGl0aW9uIHRoYXQgYSBkb2N1bWVudCBkb2VzIG5vdCBleGlzdCB3aXRob3V0IGNoYW5naW5nIHRoZVxuICAgICAgICAgICAgLy8gc2VtYW50aWNzIG9mIHRoZSBiYWNrZW5kIHdyaXRlIHRvIGJlIGFuIGluc2VydC4gVGhpcyBpcyB0aGUgcmV2ZXJzZVxuICAgICAgICAgICAgLy8gb2Ygd2hhdCB3ZSB3YW50LCBzaW5jZSB3ZSB3YW50IHRvIGFzc2VydCB0aGF0IHRoZSBkb2N1bWVudCBkb2Vzbid0XG4gICAgICAgICAgICAvLyBleGlzdCBidXQgdGhlbiBzZW5kIHRoZSB1cGRhdGUgYW5kIGhhdmUgaXQgZmFpbC4gU2luY2Ugd2UgY2FuJ3RcbiAgICAgICAgICAgIC8vIGV4cHJlc3MgdGhhdCB0byB0aGUgYmFja2VuZCwgd2UgaGF2ZSB0byB2YWxpZGF0ZSBsb2NhbGx5LlxuICAgICAgICAgICAgLy8gTm90ZTogdGhpcyBjYW4gY2hhbmdlIG9uY2Ugd2UgY2FuIHNlbmQgc2VwYXJhdGUgdmVyaWZ5IHdyaXRlcyBpbiB0aGVcbiAgICAgICAgICAgIC8vIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJDYW4ndCB1cGRhdGUgYSBkb2N1bWVudCB0aGF0IGRvZXNuJ3QgZXhpc3QuXCIpO1xuICAgICAgICAgICAgLy8gRG9jdW1lbnQgZXhpc3RzLCBiYXNlIHByZWNvbmRpdGlvbiBvbiBkb2N1bWVudCB1cGRhdGUgdGltZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcmVjb25kaXRpb24udXBkYXRlVGltZSh0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEb2N1bWVudCB3YXMgbm90IHJlYWQsIHNvIHdlIGp1c3QgdXNlIHRoZSBwcmVjb25kaXRpb25zIGZvciBhIGJsaW5kXG4gICAgICAgIC8vIHVwZGF0ZS5cbiAgICAgICAgcmV0dXJuIFByZWNvbmRpdGlvbi5leGlzdHMoITApO1xuICAgIH1cbiAgICB3cml0ZShlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQ29tbWl0Tm90Q2FsbGVkKCksIHRoaXMubXV0YXRpb25zLnB1c2goZSk7XG4gICAgfVxuICAgIGVuc3VyZUNvbW1pdE5vdENhbGxlZCgpIHt9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFRyYW5zYWN0aW9uUnVubmVyIGVuY2Fwc3VsYXRlcyB0aGUgbG9naWMgbmVlZGVkIHRvIHJ1biBhbmQgcmV0cnkgdHJhbnNhY3Rpb25zXG4gKiB3aXRoIGJhY2tvZmYuXG4gKi8gY2xhc3MgX19QUklWQVRFX1RyYW5zYWN0aW9uUnVubmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZSA9IGUsIHRoaXMuZGF0YXN0b3JlID0gdCwgdGhpcy5vcHRpb25zID0gbiwgdGhpcy51cGRhdGVGdW5jdGlvbiA9IHIsIFxuICAgICAgICB0aGlzLmRlZmVycmVkID0gaSwgdGhpcy5aYSA9IG4ubWF4QXR0ZW1wdHMsIHRoaXMuWW8gPSBuZXcgX19QUklWQVRFX0V4cG9uZW50aWFsQmFja29mZih0aGlzLmFzeW5jUXVldWUsIFwidHJhbnNhY3Rpb25fcmV0cnlcIiAvKiBUaW1lcklkLlRyYW5zYWN0aW9uUmV0cnkgKi8pO1xuICAgIH1cbiAgICAvKiogUnVucyB0aGUgdHJhbnNhY3Rpb24gYW5kIHNldHMgdGhlIHJlc3VsdCBvbiBkZWZlcnJlZC4gKi8gICAgWGEoKSB7XG4gICAgICAgIHRoaXMuWmEgLT0gMSwgdGhpcy5ldSgpO1xuICAgIH1cbiAgICBldSgpIHtcbiAgICAgICAgdGhpcy5Zby4kbygoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBUcmFuc2FjdGlvbiQyKHRoaXMuZGF0YXN0b3JlKSwgdCA9IHRoaXMudHUoZSk7XG4gICAgICAgICAgICB0ICYmIHQudGhlbigodCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKCgpID0+IGUuY29tbWl0KCkudGhlbigoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnJlc29sdmUodCk7XG4gICAgICAgICAgICAgICAgfSkpLmNhdGNoKChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5udShlKTtcbiAgICAgICAgICAgICAgICB9KSkpKTtcbiAgICAgICAgICAgIH0pKS5jYXRjaCgoZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5udShlKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICB0dShlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy51cGRhdGVGdW5jdGlvbihlKTtcbiAgICAgICAgICAgIHJldHVybiAhX19QUklWQVRFX2lzTnVsbE9yVW5kZWZpbmVkKHQpICYmIHQuY2F0Y2ggJiYgdC50aGVuID8gdCA6ICh0aGlzLmRlZmVycmVkLnJlamVjdChFcnJvcihcIlRyYW5zYWN0aW9uIGNhbGxiYWNrIG11c3QgcmV0dXJuIGEgUHJvbWlzZVwiKSksIFxuICAgICAgICAgICAgbnVsbCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCByZXRyeSBlcnJvcnMgdGhyb3duIGJ5IHVzZXIgcHJvdmlkZWQgdXBkYXRlRnVuY3Rpb24uXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZlcnJlZC5yZWplY3QoZSksIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbnUoZSkge1xuICAgICAgICB0aGlzLlphID4gMCAmJiB0aGlzLnJ1KGUpID8gKHRoaXMuWmEgLT0gMSwgdGhpcy5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKCgpID0+ICh0aGlzLmV1KCksIFxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKSkpKSkgOiB0aGlzLmRlZmVycmVkLnJlamVjdChlKTtcbiAgICB9XG4gICAgcnUoZSkge1xuICAgICAgICBpZiAoXCJGaXJlYmFzZUVycm9yXCIgPT09IGUubmFtZSkge1xuICAgICAgICAgICAgLy8gSW4gdHJhbnNhY3Rpb25zLCB0aGUgYmFja2VuZCB3aWxsIGZhaWwgb3V0ZGF0ZWQgcmVhZHMgd2l0aCBGQUlMRURfUFJFQ09ORElUSU9OIGFuZFxuICAgICAgICAgICAgLy8gbm9uLW1hdGNoaW5nIGRvY3VtZW50IHZlcnNpb25zIHdpdGggQUJPUlRFRC4gVGhlc2UgZXJyb3JzIHNob3VsZCBiZSByZXRyaWVkLlxuICAgICAgICAgICAgY29uc3QgdCA9IGUuY29kZTtcbiAgICAgICAgICAgIHJldHVybiBcImFib3J0ZWRcIiA9PT0gdCB8fCBcImZhaWxlZC1wcmVjb25kaXRpb25cIiA9PT0gdCB8fCBcImFscmVhZHktZXhpc3RzXCIgPT09IHQgfHwgIV9fUFJJVkFURV9pc1Blcm1hbmVudEVycm9yKHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEZpcmVzdG9yZUNsaWVudCBpcyBhIHRvcC1sZXZlbCBjbGFzcyB0aGF0IGNvbnN0cnVjdHMgYW5kIG93bnMgYWxsIG9mIHRoZSAvL1xuICogcGllY2VzIG9mIHRoZSBjbGllbnQgU0RLIGFyY2hpdGVjdHVyZS4gSXQgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSAvL1xuICogYXN5bmMgcXVldWUgdGhhdCBpcyBzaGFyZWQgYnkgYWxsIG9mIHRoZSBvdGhlciBjb21wb25lbnRzIGluIHRoZSBzeXN0ZW0uIC8vXG4gKi9cbmNsYXNzIEZpcmVzdG9yZUNsaWVudCB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgXG4gICAgLyoqXG4gICAgICogQXN5bmNocm9ub3VzIHF1ZXVlIHJlc3BvbnNpYmxlIGZvciBhbGwgb2Ygb3VyIGludGVybmFsIHByb2Nlc3NpbmcuIFdoZW5cbiAgICAgKiB3ZSBnZXQgaW5jb21pbmcgd29yayBmcm9tIHRoZSB1c2VyICh2aWEgcHVibGljIEFQSSkgb3IgdGhlIG5ldHdvcmtcbiAgICAgKiAoaW5jb21pbmcgR1JQQyBtZXNzYWdlcyksIHdlIHNob3VsZCBhbHdheXMgc2NoZWR1bGUgb250byB0aGlzIHF1ZXVlLlxuICAgICAqIFRoaXMgZW5zdXJlcyBhbGwgb2Ygb3VyIHdvcmsgaXMgcHJvcGVybHkgc2VyaWFsaXplZCAoZS5nLiB3ZSBkb24ndFxuICAgICAqIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgb3BlcmF0aW9uIHdoaWxlIHRoZSBwcmV2aW91cyBvbmUgaXMgd2FpdGluZyBmb3JcbiAgICAgKiBhbiBhc3luYyBJL08gdG8gY29tcGxldGUpLlxuICAgICAqL1xuICAgIG4sIHIpIHtcbiAgICAgICAgdGhpcy5hdXRoQ3JlZGVudGlhbHMgPSBlLCB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbHMgPSB0LCB0aGlzLmFzeW5jUXVldWUgPSBuLCB0aGlzLmRhdGFiYXNlSW5mbyA9IHIsIFxuICAgICAgICB0aGlzLnVzZXIgPSBVc2VyLlVOQVVUSEVOVElDQVRFRCwgdGhpcy5jbGllbnRJZCA9IF9fUFJJVkFURV9BdXRvSWQubmV3SWQoKSwgdGhpcy5hdXRoQ3JlZGVudGlhbExpc3RlbmVyID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksIFxuICAgICAgICB0aGlzLmFwcENoZWNrQ3JlZGVudGlhbExpc3RlbmVyID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksIHRoaXMuYXV0aENyZWRlbnRpYWxzLnN0YXJ0KG4sIChhc3luYyBlID0+IHtcbiAgICAgICAgICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlJlY2VpdmVkIHVzZXI9XCIsIGUudWlkKSwgYXdhaXQgdGhpcy5hdXRoQ3JlZGVudGlhbExpc3RlbmVyKGUpLCBcbiAgICAgICAgICAgIHRoaXMudXNlciA9IGU7XG4gICAgICAgIH0pKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLnN0YXJ0KG4sIChlID0+IChfX1BSSVZBVEVfbG9nRGVidWcoXCJGaXJlc3RvcmVDbGllbnRcIiwgXCJSZWNlaXZlZCBuZXcgYXBwIGNoZWNrIHRva2VuPVwiLCBlKSwgXG4gICAgICAgIHRoaXMuYXBwQ2hlY2tDcmVkZW50aWFsTGlzdGVuZXIoZSwgdGhpcy51c2VyKSkpKTtcbiAgICB9XG4gICAgZ2V0IGNvbmZpZ3VyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhc3luY1F1ZXVlOiB0aGlzLmFzeW5jUXVldWUsXG4gICAgICAgICAgICBkYXRhYmFzZUluZm86IHRoaXMuZGF0YWJhc2VJbmZvLFxuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICBhdXRoQ3JlZGVudGlhbHM6IHRoaXMuYXV0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgYXBwQ2hlY2tDcmVkZW50aWFsczogdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLFxuICAgICAgICAgICAgaW5pdGlhbFVzZXI6IHRoaXMudXNlcixcbiAgICAgICAgICAgIG1heENvbmN1cnJlbnRMaW1ib1Jlc29sdXRpb25zOiAxMDBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0Q3JlZGVudGlhbENoYW5nZUxpc3RlbmVyKGUpIHtcbiAgICAgICAgdGhpcy5hdXRoQ3JlZGVudGlhbExpc3RlbmVyID0gZTtcbiAgICB9XG4gICAgc2V0QXBwQ2hlY2tUb2tlbkNoYW5nZUxpc3RlbmVyKGUpIHtcbiAgICAgICAgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxMaXN0ZW5lciA9IGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGF0IHRoZSBjbGllbnQgaGFzIG5vdCBiZWVuIHRlcm1pbmF0ZWQuIEVuc3VyZXMgdGhhdCBvdGhlciBtZXRob2RzIG9uIC8vXG4gICAgICogdGhpcyBjbGFzcyBjYW5ub3QgYmUgY2FsbGVkIGFmdGVyIHRoZSBjbGllbnQgaXMgdGVybWluYXRlZC4gLy9cbiAgICAgKi8gICAgdmVyaWZ5Tm90VGVybWluYXRlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXN5bmNRdWV1ZS5pc1NodXR0aW5nRG93bikgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJUaGUgY2xpZW50IGhhcyBhbHJlYWR5IGJlZW4gdGVybWluYXRlZC5cIik7XG4gICAgfVxuICAgIHRlcm1pbmF0ZSgpIHtcbiAgICAgICAgdGhpcy5hc3luY1F1ZXVlLmVudGVyUmVzdHJpY3RlZE1vZGUoKTtcbiAgICAgICAgY29uc3QgZSA9IG5ldyBfX1BSSVZBVEVfRGVmZXJyZWQ7XG4gICAgICAgIHJldHVybiB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldEV2ZW5XaGlsZVJlc3RyaWN0ZWQoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25saW5lQ29tcG9uZW50cyAmJiBhd2FpdCB0aGlzLl9vbmxpbmVDb21wb25lbnRzLnRlcm1pbmF0ZSgpLCB0aGlzLl9vZmZsaW5lQ29tcG9uZW50cyAmJiBhd2FpdCB0aGlzLl9vZmZsaW5lQ29tcG9uZW50cy50ZXJtaW5hdGUoKSwgXG4gICAgICAgICAgICAgICAgLy8gVGhlIGNyZWRlbnRpYWxzIHByb3ZpZGVyIG11c3QgYmUgdGVybWluYXRlZCBhZnRlciBzaHV0dGluZyBkb3duIHRoZVxuICAgICAgICAgICAgICAgIC8vIFJlbW90ZVN0b3JlIGFzIGl0IHdpbGwgcHJldmVudCB0aGUgUmVtb3RlU3RvcmUgZnJvbSByZXRyaWV2aW5nIGF1dGhcbiAgICAgICAgICAgICAgICAvLyB0b2tlbnMuXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoQ3JlZGVudGlhbHMuc2h1dGRvd24oKSwgdGhpcy5hcHBDaGVja0NyZWRlbnRpYWxzLnNodXRkb3duKCksIGUucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfd3JhcEluVXNlckVycm9ySWZSZWNvdmVyYWJsZSh0LCBcIkZhaWxlZCB0byBzaHV0ZG93biBwZXJzaXN0ZW5jZVwiKTtcbiAgICAgICAgICAgICAgICBlLnJlamVjdChuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLCBlLnByb21pc2U7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfc2V0T2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyKGUsIHQpIHtcbiAgICBlLmFzeW5jUXVldWUudmVyaWZ5T3BlcmF0aW9uSW5Qcm9ncmVzcygpLCBfX1BSSVZBVEVfbG9nRGVidWcoXCJGaXJlc3RvcmVDbGllbnRcIiwgXCJJbml0aWFsaXppbmcgT2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyXCIpO1xuICAgIGNvbnN0IG4gPSBlLmNvbmZpZ3VyYXRpb247XG4gICAgYXdhaXQgdC5pbml0aWFsaXplKG4pO1xuICAgIGxldCByID0gbi5pbml0aWFsVXNlcjtcbiAgICBlLnNldENyZWRlbnRpYWxDaGFuZ2VMaXN0ZW5lcigoYXN5bmMgZSA9PiB7XG4gICAgICAgIHIuaXNFcXVhbChlKSB8fCAoYXdhaXQgX19QUklWQVRFX2xvY2FsU3RvcmVIYW5kbGVVc2VyQ2hhbmdlKHQubG9jYWxTdG9yZSwgZSksIHIgPSBlKTtcbiAgICB9KSksIFxuICAgIC8vIFdoZW4gYSB1c2VyIGNhbGxzIGNsZWFyUGVyc2lzdGVuY2UoKSBpbiBvbmUgY2xpZW50LCBhbGwgb3RoZXIgY2xpZW50c1xuICAgIC8vIG5lZWQgdG8gYmUgdGVybWluYXRlZCB0byBhbGxvdyB0aGUgZGVsZXRlIHRvIHN1Y2NlZWQuXG4gICAgdC5wZXJzaXN0ZW5jZS5zZXREYXRhYmFzZURlbGV0ZWRMaXN0ZW5lcigoKCkgPT4gZS50ZXJtaW5hdGUoKSkpLCBlLl9vZmZsaW5lQ29tcG9uZW50cyA9IHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9zZXRPbmxpbmVDb21wb25lbnRQcm92aWRlcihlLCB0KSB7XG4gICAgZS5hc3luY1F1ZXVlLnZlcmlmeU9wZXJhdGlvbkluUHJvZ3Jlc3MoKTtcbiAgICBjb25zdCBuID0gYXdhaXQgX19QUklWQVRFX2Vuc3VyZU9mZmxpbmVDb21wb25lbnRzKGUpO1xuICAgIF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkZpcmVzdG9yZUNsaWVudFwiLCBcIkluaXRpYWxpemluZyBPbmxpbmVDb21wb25lbnRQcm92aWRlclwiKSwgYXdhaXQgdC5pbml0aWFsaXplKG4sIGUuY29uZmlndXJhdGlvbiksIFxuICAgIC8vIFRoZSBDcmVkZW50aWFsQ2hhbmdlTGlzdGVuZXIgb2YgdGhlIG9ubGluZSBjb21wb25lbnQgcHJvdmlkZXIgdGFrZXNcbiAgICAvLyBwcmVjZWRlbmNlIG92ZXIgdGhlIG9mZmxpbmUgY29tcG9uZW50IHByb3ZpZGVyLlxuICAgIGUuc2V0Q3JlZGVudGlhbENoYW5nZUxpc3RlbmVyKChlID0+IF9fUFJJVkFURV9yZW1vdGVTdG9yZUhhbmRsZUNyZWRlbnRpYWxDaGFuZ2UodC5yZW1vdGVTdG9yZSwgZSkpKSwgXG4gICAgZS5zZXRBcHBDaGVja1Rva2VuQ2hhbmdlTGlzdGVuZXIoKChlLCBuKSA9PiBfX1BSSVZBVEVfcmVtb3RlU3RvcmVIYW5kbGVDcmVkZW50aWFsQ2hhbmdlKHQucmVtb3RlU3RvcmUsIG4pKSksIFxuICAgIGUuX29ubGluZUNvbXBvbmVudHMgPSB0O1xufVxuXG4vKipcbiAqIERlY2lkZXMgd2hldGhlciB0aGUgcHJvdmlkZWQgZXJyb3IgYWxsb3dzIHVzIHRvIGdyYWNlZnVsbHkgZGlzYWJsZVxuICogcGVyc2lzdGVuY2UgKGFzIG9wcG9zZWQgdG8gY3Jhc2hpbmcgdGhlIGNsaWVudCkuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2NhbkZhbGxiYWNrRnJvbUluZGV4ZWREYkVycm9yKGUpIHtcbiAgICByZXR1cm4gXCJGaXJlYmFzZUVycm9yXCIgPT09IGUubmFtZSA/IGUuY29kZSA9PT0gQy5GQUlMRURfUFJFQ09ORElUSU9OIHx8IGUuY29kZSA9PT0gQy5VTklNUExFTUVOVEVEIDogIShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBET01FeGNlcHRpb24gJiYgZSBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbikgfHwgKFxuICAgIC8vIFdoZW4gdGhlIGJyb3dzZXIgaXMgb3V0IG9mIHF1b3RhIHdlIGNvdWxkIGdldCBlaXRoZXIgcXVvdGEgZXhjZWVkZWRcbiAgICAvLyBvciBhbiBhYm9ydGVkIGVycm9yIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBlcnJvciBoYXBwZW5lZCBkdXJpbmdcbiAgICAvLyBzY2hlbWEgbWlncmF0aW9uLlxuICAgIDIyID09PSBlLmNvZGUgfHwgMjAgPT09IGUuY29kZSB8fCBcbiAgICAvLyBGaXJlZm94IFByaXZhdGUgQnJvd3NpbmcgbW9kZSBkaXNhYmxlcyBJbmRleGVkRGIgYW5kIHJldHVybnNcbiAgICAvLyBJTlZBTElEX1NUQVRFIGZvciBhbnkgdXNhZ2UuXG4gICAgMTEgPT09IGUuY29kZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9lbnN1cmVPZmZsaW5lQ29tcG9uZW50cyhlKSB7XG4gICAgaWYgKCFlLl9vZmZsaW5lQ29tcG9uZW50cykgaWYgKGUuX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIpIHtcbiAgICAgICAgX19QUklWQVRFX2xvZ0RlYnVnKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiVXNpbmcgdXNlciBwcm92aWRlZCBPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXJcIik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBfX1BSSVZBVEVfc2V0T2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyKGUsIGUuX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIuX29mZmxpbmUpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdDtcbiAgICAgICAgICAgIGlmICghX19QUklWQVRFX2NhbkZhbGxiYWNrRnJvbUluZGV4ZWREYkVycm9yKG4pKSB0aHJvdyBuO1xuICAgICAgICAgICAgX19QUklWQVRFX2xvZ1dhcm4oXCJFcnJvciB1c2luZyB1c2VyIHByb3ZpZGVkIGNhY2hlLiBGYWxsaW5nIGJhY2sgdG8gbWVtb3J5IGNhY2hlOiBcIiArIG4pLCBcbiAgICAgICAgICAgIGF3YWl0IF9fUFJJVkFURV9zZXRPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIoZSwgbmV3IE1lbW9yeU9mZmxpbmVDb21wb25lbnRQcm92aWRlcik7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgX19QUklWQVRFX2xvZ0RlYnVnKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiVXNpbmcgZGVmYXVsdCBPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXJcIiksIFxuICAgIGF3YWl0IF9fUFJJVkFURV9zZXRPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIoZSwgbmV3IE1lbW9yeU9mZmxpbmVDb21wb25lbnRQcm92aWRlcik7XG4gICAgcmV0dXJuIGUuX29mZmxpbmVDb21wb25lbnRzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfZW5zdXJlT25saW5lQ29tcG9uZW50cyhlKSB7XG4gICAgcmV0dXJuIGUuX29ubGluZUNvbXBvbmVudHMgfHwgKGUuX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIgPyAoX19QUklWQVRFX2xvZ0RlYnVnKFwiRmlyZXN0b3JlQ2xpZW50XCIsIFwiVXNpbmcgdXNlciBwcm92aWRlZCBPbmxpbmVDb21wb25lbnRQcm92aWRlclwiKSwgXG4gICAgYXdhaXQgX19QUklWQVRFX3NldE9ubGluZUNvbXBvbmVudFByb3ZpZGVyKGUsIGUuX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIuX29ubGluZSkpIDogKF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlVzaW5nIGRlZmF1bHQgT25saW5lQ29tcG9uZW50UHJvdmlkZXJcIiksIFxuICAgIGF3YWl0IF9fUFJJVkFURV9zZXRPbmxpbmVDb21wb25lbnRQcm92aWRlcihlLCBuZXcgT25saW5lQ29tcG9uZW50UHJvdmlkZXIpKSksIGUuX29ubGluZUNvbXBvbmVudHM7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9nZXRQZXJzaXN0ZW5jZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9lbnN1cmVPZmZsaW5lQ29tcG9uZW50cyhlKS50aGVuKChlID0+IGUucGVyc2lzdGVuY2UpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2dldExvY2FsU3RvcmUoZSkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfZW5zdXJlT2ZmbGluZUNvbXBvbmVudHMoZSkudGhlbigoZSA9PiBlLmxvY2FsU3RvcmUpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2dldFJlbW90ZVN0b3JlKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2Vuc3VyZU9ubGluZUNvbXBvbmVudHMoZSkudGhlbigoZSA9PiBlLnJlbW90ZVN0b3JlKSk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9nZXRTeW5jRW5naW5lKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2Vuc3VyZU9ubGluZUNvbXBvbmVudHMoZSkudGhlbigoZSA9PiBlLnN5bmNFbmdpbmUpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2dldERhdGFzdG9yZShlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9lbnN1cmVPbmxpbmVDb21wb25lbnRzKGUpLnRoZW4oKGUgPT4gZS5kYXRhc3RvcmUpKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX2dldEV2ZW50TWFuYWdlcihlKSB7XG4gICAgY29uc3QgdCA9IGF3YWl0IF9fUFJJVkFURV9lbnN1cmVPbmxpbmVDb21wb25lbnRzKGUpLCBuID0gdC5ldmVudE1hbmFnZXI7XG4gICAgcmV0dXJuIG4ub25MaXN0ZW4gPSBfX1BSSVZBVEVfc3luY0VuZ2luZUxpc3Rlbi5iaW5kKG51bGwsIHQuc3luY0VuZ2luZSksIG4ub25Vbmxpc3RlbiA9IF9fUFJJVkFURV9zeW5jRW5naW5lVW5saXN0ZW4uYmluZChudWxsLCB0LnN5bmNFbmdpbmUpLCBcbiAgICBuLm9uRmlyc3RSZW1vdGVTdG9yZUxpc3RlbiA9IF9fUFJJVkFURV90cmlnZ2VyUmVtb3RlU3RvcmVMaXN0ZW4uYmluZChudWxsLCB0LnN5bmNFbmdpbmUpLCBcbiAgICBuLm9uTGFzdFJlbW90ZVN0b3JlVW5saXN0ZW4gPSBfX1BSSVZBVEVfdHJpZ2dlclJlbW90ZVN0b3JlVW5saXN0ZW4uYmluZChudWxsLCB0LnN5bmNFbmdpbmUpLCBcbiAgICBuO1xufVxuXG4vKiogRW5hYmxlcyB0aGUgbmV0d29yayBjb25uZWN0aW9uIGFuZCByZS1lbnF1ZXVlcyBhbGwgcGVuZGluZyBvcGVyYXRpb25zLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50RW5hYmxlTmV0d29yayhlKSB7XG4gICAgcmV0dXJuIGUuYXN5bmNRdWV1ZS5lbnF1ZXVlKChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHQgPSBhd2FpdCBfX1BSSVZBVEVfZ2V0UGVyc2lzdGVuY2UoZSksIG4gPSBhd2FpdCBfX1BSSVZBVEVfZ2V0UmVtb3RlU3RvcmUoZSk7XG4gICAgICAgIHJldHVybiB0LnNldE5ldHdvcmtFbmFibGVkKCEwKSwgZnVuY3Rpb24gX19QUklWQVRFX3JlbW90ZVN0b3JlRW5hYmxlTmV0d29yayhlKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICAgICAgICAgIHJldHVybiB0Lk1fLmRlbGV0ZSgwIC8qIE9mZmxpbmVDYXVzZS5Vc2VyRGlzYWJsZWQgKi8pLCBfX1BSSVZBVEVfZW5hYmxlTmV0d29ya0ludGVybmFsKHQpO1xuICAgICAgICB9KG4pO1xuICAgIH0pKTtcbn1cblxuLyoqIERpc2FibGVzIHRoZSBuZXR3b3JrIGNvbm5lY3Rpb24uIFBlbmRpbmcgb3BlcmF0aW9ucyB3aWxsIG5vdCBjb21wbGV0ZS4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudERpc2FibGVOZXR3b3JrKGUpIHtcbiAgICByZXR1cm4gZS5hc3luY1F1ZXVlLmVucXVldWUoKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdCA9IGF3YWl0IF9fUFJJVkFURV9nZXRQZXJzaXN0ZW5jZShlKSwgbiA9IGF3YWl0IF9fUFJJVkFURV9nZXRSZW1vdGVTdG9yZShlKTtcbiAgICAgICAgcmV0dXJuIHQuc2V0TmV0d29ya0VuYWJsZWQoITEpLCBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfcmVtb3RlU3RvcmVEaXNhYmxlTmV0d29yayhlKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX2RlYnVnQ2FzdChlKTtcbiAgICAgICAgICAgIHQuTV8uYWRkKDAgLyogT2ZmbGluZUNhdXNlLlVzZXJEaXNhYmxlZCAqLyksIGF3YWl0IF9fUFJJVkFURV9kaXNhYmxlTmV0d29ya0ludGVybmFsKHQpLCBcbiAgICAgICAgICAgIC8vIFNldCB0aGUgT25saW5lU3RhdGUgdG8gT2ZmbGluZSBzbyBnZXQoKXMgcmV0dXJuIGZyb20gY2FjaGUsIGV0Yy5cbiAgICAgICAgICAgIHQuTl8uc2V0KFwiT2ZmbGluZVwiIC8qIE9ubGluZVN0YXRlLk9mZmxpbmUgKi8pO1xuICAgICAgICB9KG4pO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHdyaXRlcyB0aGF0IHdlcmUgcGVuZGluZyBhdCB0aGUgdGltZVxuICogdGhpcyBtZXRob2Qgd2FzIGNhbGxlZCByZWNlaXZlZCBzZXJ2ZXIgYWNrbm93bGVkZ2VtZW50LiBBbiBhY2tub3dsZWRnZW1lbnRcbiAqIGNhbiBiZSBlaXRoZXIgYWNjZXB0YW5jZSBvciByZWplY3Rpb24uXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudEdldERvY3VtZW50RnJvbUxvY2FsQ2FjaGUoZSwgdCkge1xuICAgIGNvbnN0IG4gPSBuZXcgX19QUklWQVRFX0RlZmVycmVkO1xuICAgIHJldHVybiBlLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4gYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX3JlYWREb2N1bWVudEZyb21DYWNoZShlLCB0LCBuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByID0gYXdhaXQgZnVuY3Rpb24gX19QUklWQVRFX2xvY2FsU3RvcmVSZWFkRG9jdW1lbnQoZSwgdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwicmVhZCBkb2N1bWVudFwiLCBcInJlYWRvbmx5XCIsIChlID0+IG4ubG9jYWxEb2N1bWVudHMuZ2V0RG9jdW1lbnQoZSwgdCkpKTtcbiAgICAgICAgICAgIH0oZSwgdCk7XG4gICAgICAgICAgICByLmlzRm91bmREb2N1bWVudCgpID8gbi5yZXNvbHZlKHIpIDogci5pc05vRG9jdW1lbnQoKSA/IG4ucmVzb2x2ZShudWxsKSA6IG4ucmVqZWN0KG5ldyBGaXJlc3RvcmVFcnJvcihDLlVOQVZBSUxBQkxFLCBcIkZhaWxlZCB0byBnZXQgZG9jdW1lbnQgZnJvbSBjYWNoZS4gKEhvd2V2ZXIsIHRoaXMgZG9jdW1lbnQgbWF5IGV4aXN0IG9uIHRoZSBzZXJ2ZXIuIFJ1biBhZ2FpbiB3aXRob3V0IHNldHRpbmcgJ3NvdXJjZScgaW4gdGhlIEdldE9wdGlvbnMgdG8gYXR0ZW1wdCB0byByZXRyaWV2ZSB0aGUgZG9jdW1lbnQgZnJvbSB0aGUgc2VydmVyLilcIikpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zdCByID0gX19QUklWQVRFX3dyYXBJblVzZXJFcnJvcklmUmVjb3ZlcmFibGUoZSwgYEZhaWxlZCB0byBnZXQgZG9jdW1lbnQgJyR7dH0gZnJvbSBjYWNoZWApO1xuICAgICAgICAgICAgbi5yZWplY3Qocik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gKiBSZXRyaWV2ZXMgYSBsYXRlbmN5LWNvbXBlbnNhdGVkIGRvY3VtZW50IGZyb20gdGhlIGJhY2tlbmQgdmlhIGFcbiAqIFNuYXBzaG90TGlzdGVuZXIuXG4gKi8gKGF3YWl0IF9fUFJJVkFURV9nZXRMb2NhbFN0b3JlKGUpLCB0LCBuKSkpLCBuLnByb21pc2U7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRHZXREb2N1bWVudFZpYVNuYXBzaG90TGlzdGVuZXIoZSwgdCwgbiA9IHt9KSB7XG4gICAgY29uc3QgciA9IG5ldyBfX1BSSVZBVEVfRGVmZXJyZWQ7XG4gICAgcmV0dXJuIGUuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBmdW5jdGlvbiBfX1BSSVZBVEVfcmVhZERvY3VtZW50VmlhU25hcHNob3RMaXN0ZW5lcihlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgX19QUklWQVRFX0FzeW5jT2JzZXJ2ZXIoe1xuICAgICAgICAgICAgbmV4dDogcyA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHF1ZXJ5IGZpcnN0IGJlZm9yZSBwYXNzaW5nIGV2ZW50IHRvIHVzZXIgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyB1c2VyIGFjdGlvbnMgYWZmZWN0aW5nIHRoZSBub3cgc3RhbGUgcXVlcnkuXG4gICAgICAgICAgICAgICAgdC5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiBfX1BSSVZBVEVfZXZlbnRNYW5hZ2VyVW5saXN0ZW4oZSwgbykpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBfID0gcy5kb2NzLmhhcyhuKTtcbiAgICAgICAgICAgICAgICAhXyAmJiBzLmZyb21DYWNoZSA/IFxuICAgICAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogSWYgd2UncmUgb25saW5lIGFuZCB0aGUgZG9jdW1lbnQgZG9lc24ndFxuICAgICAgICAgICAgICAgIC8vIGV4aXN0IHRoZW4gd2UgcmVzb2x2ZSB3aXRoIGEgZG9jLmV4aXN0cyBzZXQgdG8gZmFsc2UuIElmXG4gICAgICAgICAgICAgICAgLy8gd2UncmUgb2ZmbGluZSBob3dldmVyLCB3ZSByZWplY3QgdGhlIFByb21pc2UgaW4gdGhpc1xuICAgICAgICAgICAgICAgIC8vIGNhc2UuIFR3byBvcHRpb25zOiAxKSBDYWNoZSB0aGUgbmVnYXRpdmUgcmVzcG9uc2UgZnJvbVxuICAgICAgICAgICAgICAgIC8vIHRoZSBzZXJ2ZXIgc28gd2UgY2FuIGRlbGl2ZXIgdGhhdCBldmVuIHdoZW4geW91J3JlXG4gICAgICAgICAgICAgICAgLy8gb2ZmbGluZSAyKSBBY3R1YWxseSByZWplY3QgdGhlIFByb21pc2UgaW4gdGhlIG9ubGluZSBjYXNlXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICAgICAgICAgICAgaS5yZWplY3QobmV3IEZpcmVzdG9yZUVycm9yKEMuVU5BVkFJTEFCTEUsIFwiRmFpbGVkIHRvIGdldCBkb2N1bWVudCBiZWNhdXNlIHRoZSBjbGllbnQgaXMgb2ZmbGluZS5cIikpIDogXyAmJiBzLmZyb21DYWNoZSAmJiByICYmIFwic2VydmVyXCIgPT09IHIuc291cmNlID8gaS5yZWplY3QobmV3IEZpcmVzdG9yZUVycm9yKEMuVU5BVkFJTEFCTEUsICdGYWlsZWQgdG8gZ2V0IGRvY3VtZW50IGZyb20gc2VydmVyLiAoSG93ZXZlciwgdGhpcyBkb2N1bWVudCBkb2VzIGV4aXN0IGluIHRoZSBsb2NhbCBjYWNoZS4gUnVuIGFnYWluIHdpdGhvdXQgc2V0dGluZyBzb3VyY2UgdG8gXCJzZXJ2ZXJcIiB0byByZXRyaWV2ZSB0aGUgY2FjaGVkIGRvY3VtZW50LiknKSkgOiBpLnJlc29sdmUocyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGUgPT4gaS5yZWplY3QoZSlcbiAgICAgICAgfSksIG8gPSBuZXcgX19QUklWQVRFX1F1ZXJ5TGlzdGVuZXIoX19QUklWQVRFX25ld1F1ZXJ5Rm9yUGF0aChuLnBhdGgpLCBzLCB7XG4gICAgICAgICAgICBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOiAhMCxcbiAgICAgICAgICAgIHJhOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9ldmVudE1hbmFnZXJMaXN0ZW4oZSwgbyk7XG4gICAgfShhd2FpdCBfX1BSSVZBVEVfZ2V0RXZlbnRNYW5hZ2VyKGUpLCBlLmFzeW5jUXVldWUsIHQsIG4sIHIpKSksIHIucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudEdldERvY3VtZW50c0Zyb21Mb2NhbENhY2hlKGUsIHQpIHtcbiAgICBjb25zdCBuID0gbmV3IF9fUFJJVkFURV9EZWZlcnJlZDtcbiAgICByZXR1cm4gZS5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IGFzeW5jIGZ1bmN0aW9uIF9fUFJJVkFURV9leGVjdXRlUXVlcnlGcm9tQ2FjaGUoZSwgdCwgbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgciA9IGF3YWl0IF9fUFJJVkFURV9sb2NhbFN0b3JlRXhlY3V0ZVF1ZXJ5KGUsIHQsIFxuICAgICAgICAgICAgLyogdXNlUHJldmlvdXNSZXN1bHRzPSAqLyAhMCksIGkgPSBuZXcgX19QUklWQVRFX1ZpZXcodCwgci5ocyksIHMgPSBpLmRhKHIuZG9jdW1lbnRzKSwgbyA9IGkuYXBwbHlDaGFuZ2VzKHMsIFxuICAgICAgICAgICAgLyogbGltYm9SZXNvbHV0aW9uRW5hYmxlZD0gKi8gITEpO1xuICAgICAgICAgICAgbi5yZXNvbHZlKG8uc25hcHNob3QpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zdCByID0gX19QUklWQVRFX3dyYXBJblVzZXJFcnJvcklmUmVjb3ZlcmFibGUoZSwgYEZhaWxlZCB0byBleGVjdXRlIHF1ZXJ5ICcke3R9IGFnYWluc3QgY2FjaGVgKTtcbiAgICAgICAgICAgIG4ucmVqZWN0KHIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICogUmV0cmlldmVzIGEgbGF0ZW5jeS1jb21wZW5zYXRlZCBxdWVyeSBzbmFwc2hvdCBmcm9tIHRoZSBiYWNrZW5kIHZpYSBhXG4gKiBTbmFwc2hvdExpc3RlbmVyLlxuICovIChhd2FpdCBfX1BSSVZBVEVfZ2V0TG9jYWxTdG9yZShlKSwgdCwgbikpKSwgbi5wcm9taXNlO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50R2V0RG9jdW1lbnRzVmlhU25hcHNob3RMaXN0ZW5lcihlLCB0LCBuID0ge30pIHtcbiAgICBjb25zdCByID0gbmV3IF9fUFJJVkFURV9EZWZlcnJlZDtcbiAgICByZXR1cm4gZS5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IGZ1bmN0aW9uIF9fUFJJVkFURV9leGVjdXRlUXVlcnlWaWFTbmFwc2hvdExpc3RlbmVyKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgY29uc3QgcyA9IG5ldyBfX1BSSVZBVEVfQXN5bmNPYnNlcnZlcih7XG4gICAgICAgICAgICBuZXh0OiBuID0+IHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgcXVlcnkgZmlyc3QgYmVmb3JlIHBhc3NpbmcgZXZlbnQgdG8gdXNlciB0byBhdm9pZFxuICAgICAgICAgICAgICAgIC8vIHVzZXIgYWN0aW9ucyBhZmZlY3RpbmcgdGhlIG5vdyBzdGFsZSBxdWVyeS5cbiAgICAgICAgICAgICAgICB0LmVucXVldWVBbmRGb3JnZXQoKCgpID0+IF9fUFJJVkFURV9ldmVudE1hbmFnZXJVbmxpc3RlbihlLCBvKSkpLCBuLmZyb21DYWNoZSAmJiBcInNlcnZlclwiID09PSByLnNvdXJjZSA/IGkucmVqZWN0KG5ldyBGaXJlc3RvcmVFcnJvcihDLlVOQVZBSUxBQkxFLCAnRmFpbGVkIHRvIGdldCBkb2N1bWVudHMgZnJvbSBzZXJ2ZXIuIChIb3dldmVyLCB0aGVzZSBkb2N1bWVudHMgbWF5IGV4aXN0IGluIHRoZSBsb2NhbCBjYWNoZS4gUnVuIGFnYWluIHdpdGhvdXQgc2V0dGluZyBzb3VyY2UgdG8gXCJzZXJ2ZXJcIiB0byByZXRyaWV2ZSB0aGUgY2FjaGVkIGRvY3VtZW50cy4pJykpIDogaS5yZXNvbHZlKG4pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBlID0+IGkucmVqZWN0KGUpXG4gICAgICAgIH0pLCBvID0gbmV3IF9fUFJJVkFURV9RdWVyeUxpc3RlbmVyKG4sIHMsIHtcbiAgICAgICAgICAgIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6ICEwLFxuICAgICAgICAgICAgcmE6ICEwXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX2V2ZW50TWFuYWdlckxpc3RlbihlLCBvKTtcbiAgICB9KGF3YWl0IF9fUFJJVkFURV9nZXRFdmVudE1hbmFnZXIoZSksIGUuYXN5bmNRdWV1ZSwgdCwgbiwgcikpKSwgci5wcm9taXNlO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50UnVuQWdncmVnYXRlUXVlcnkoZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBuZXcgX19QUklWQVRFX0RlZmVycmVkO1xuICAgIHJldHVybiBlLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBJbXBsZW1lbnQgYW5kIGNhbGwgZXhlY3V0ZUFnZ3JlZ2F0ZVF1ZXJ5VmlhU25hcHNob3RMaXN0ZW5lciwgc2ltaWxhclxuICAgICAgICAvLyB0byB0aGUgaW1wbGVtZW50YXRpb24gaW4gZmlyZXN0b3JlQ2xpZW50R2V0RG9jdW1lbnRzVmlhU25hcHNob3RMaXN0ZW5lclxuICAgICAgICAvLyBhYm92ZVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVE9ETyhiLzI3NzYyODM4NCk6IGNoZWNrIGBjYW5Vc2VOZXR3b3JrKClgIGFuZCBoYW5kbGUgbXVsdGktdGFiLlxuICAgICAgICAgICAgY29uc3QgaSA9IGF3YWl0IF9fUFJJVkFURV9nZXREYXRhc3RvcmUoZSk7XG4gICAgICAgICAgICByLnJlc29sdmUoYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX2ludm9rZVJ1bkFnZ3JlZ2F0aW9uUXVlcnlScGMoZSwgdCwgbikge1xuICAgICAgICAgICAgICAgIHZhciByO1xuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCB7cmVxdWVzdDogcywgdXQ6IG8sIHBhcmVudDogX30gPSBfX1BSSVZBVEVfdG9SdW5BZ2dyZWdhdGlvblF1ZXJ5UmVxdWVzdChpLnNlcmlhbGl6ZXIsIF9fUFJJVkFURV9xdWVyeVRvQWdncmVnYXRlVGFyZ2V0KHQpLCBuKTtcbiAgICAgICAgICAgICAgICBpLmNvbm5lY3Rpb24uRG8gfHwgZGVsZXRlIHMucGFyZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSAoYXdhaXQgaS54byhcIlJ1bkFnZ3JlZ2F0aW9uUXVlcnlcIiwgaS5zZXJpYWxpemVyLmRhdGFiYXNlSWQsIF8sIHMsIFxuICAgICAgICAgICAgICAgIC8qZXhwZWN0ZWRSZXNwb25zZUNvdW50PSovIDEpKS5maWx0ZXIoKGUgPT4gISFlLnJlc3VsdCkpO1xuICAgICAgICAgICAgICAgIC8vIE9taXQgUnVuQWdncmVnYXRpb25RdWVyeVJlc3BvbnNlIHRoYXQgb25seSBjb250YWluIHJlYWRUaW1lcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19QUklWQVRFX2hhcmRBc3NlcnQoMSA9PT0gYS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIFJlbWFwIHRoZSBzaG9ydC1mb3JtIGFsaWFzZXMgdGhhdCB3ZXJlIHNlbnQgdG8gdGhlIHNlcnZlclxuICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBjbGllbnQtc2lkZSBhbGlhc2VzLiBVc2VycyB3aWxsIGFjY2VzcyB0aGUgcmVzdWx0c1xuICAgICAgICAgICAgICAgIC8vIHVzaW5nIHRoZSBjbGllbnQtc2lkZSBhbGlhcy5cbiAgICAgICAgICAgICAgICBjb25zdCB1ID0gbnVsbCA9PT0gKHIgPSBhWzBdLnJlc3VsdCkgfHwgdm9pZCAwID09PSByID8gdm9pZCAwIDogci5hZ2dyZWdhdGVGaWVsZHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHUpLnJlZHVjZSgoKGUsIHQpID0+IChlW29bdF1dID0gdVt0XSwgZSkpLCB7fSk7XG4gICAgICAgICAgICB9KGksIHQsIG4pKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgci5yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9KSksIHIucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudEFkZFNuYXBzaG90c0luU3luY0xpc3RlbmVyKGUsIHQpIHtcbiAgICBjb25zdCBuID0gbmV3IF9fUFJJVkFURV9Bc3luY09ic2VydmVyKHQpO1xuICAgIHJldHVybiBlLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4gZnVuY3Rpb24gX19QUklWQVRFX2FkZFNuYXBzaG90c0luU3luY0xpc3RlbmVyKGUsIHQpIHtcbiAgICAgICAgX19QUklWQVRFX2RlYnVnQ2FzdChlKS56Xy5hZGQodCksIFxuICAgICAgICAvLyBJbW1lZGlhdGVseSBmaXJlIGFuIGluaXRpYWwgZXZlbnQsIGluZGljYXRpbmcgYWxsIGV4aXN0aW5nIGxpc3RlbmVyc1xuICAgICAgICAvLyBhcmUgaW4tc3luYy5cbiAgICAgICAgdC5uZXh0KCk7XG4gICAgfShhd2FpdCBfX1BSSVZBVEVfZ2V0RXZlbnRNYW5hZ2VyKGUpLCBuKSkpLCAoKSA9PiB7XG4gICAgICAgIG4uJGEoKSwgZS5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IGZ1bmN0aW9uIF9fUFJJVkFURV9yZW1vdmVTbmFwc2hvdHNJblN5bmNMaXN0ZW5lcihlLCB0KSB7XG4gICAgICAgICAgICBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLnpfLmRlbGV0ZSh0KTtcbiAgICAgICAgfShhd2FpdCBfX1BSSVZBVEVfZ2V0RXZlbnRNYW5hZ2VyKGUpLCBuKSkpO1xuICAgIH07XG59XG5cbi8qKlxuICogVGFrZXMgYW4gdXBkYXRlRnVuY3Rpb24gaW4gd2hpY2ggYSBzZXQgb2YgcmVhZHMgYW5kIHdyaXRlcyBjYW4gYmUgcGVyZm9ybWVkXG4gKiBhdG9taWNhbGx5LiBJbiB0aGUgdXBkYXRlRnVuY3Rpb24sIHRoZSBjbGllbnQgY2FuIHJlYWQgYW5kIHdyaXRlIHZhbHVlc1xuICogdXNpbmcgdGhlIHN1cHBsaWVkIHRyYW5zYWN0aW9uIG9iamVjdC4gQWZ0ZXIgdGhlIHVwZGF0ZUZ1bmN0aW9uLCBhbGxcbiAqIGNoYW5nZXMgd2lsbCBiZSBjb21taXR0ZWQuIElmIGEgcmV0cnlhYmxlIGVycm9yIG9jY3VycyAoZXg6IHNvbWUgb3RoZXJcbiAqIGNsaWVudCBoYXMgY2hhbmdlZCBhbnkgb2YgdGhlIGRhdGEgcmVmZXJlbmNlZCksIHRoZW4gdGhlIHVwZGF0ZUZ1bmN0aW9uXG4gKiB3aWxsIGJlIGNhbGxlZCBhZ2FpbiBhZnRlciBhIGJhY2tvZmYuIElmIHRoZSB1cGRhdGVGdW5jdGlvbiBzdGlsbCBmYWlsc1xuICogYWZ0ZXIgYWxsIHJldHJpZXMsIHRoZW4gdGhlIHRyYW5zYWN0aW9uIHdpbGwgYmUgcmVqZWN0ZWQuXG4gKlxuICogVGhlIHRyYW5zYWN0aW9uIG9iamVjdCBwYXNzZWQgdG8gdGhlIHVwZGF0ZUZ1bmN0aW9uIGNvbnRhaW5zIG1ldGhvZHMgZm9yXG4gKiBhY2Nlc3NpbmcgZG9jdW1lbnRzIGFuZCBjb2xsZWN0aW9ucy4gVW5saWtlIG90aGVyIGRhdGFzdG9yZSBhY2Nlc3MsIGRhdGFcbiAqIGFjY2Vzc2VkIHdpdGggdGhlIHRyYW5zYWN0aW9uIHdpbGwgbm90IHJlZmxlY3QgbG9jYWwgY2hhbmdlcyB0aGF0IGhhdmUgbm90XG4gKiBiZWVuIGNvbW1pdHRlZC4gRm9yIHRoaXMgcmVhc29uLCBpdCBpcyByZXF1aXJlZCB0aGF0IGFsbCByZWFkcyBhcmVcbiAqIHBlcmZvcm1lZCBiZWZvcmUgYW55IHdyaXRlcy4gVHJhbnNhY3Rpb25zIG11c3QgYmUgcGVyZm9ybWVkIHdoaWxlIG9ubGluZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50TG9hZEJ1bmRsZShlLCB0LCBuLCByKSB7XG4gICAgY29uc3QgaSA9IGZ1bmN0aW9uIF9fUFJJVkFURV9jcmVhdGVCdW5kbGVSZWFkZXIoZSwgdCkge1xuICAgICAgICBsZXQgbjtcbiAgICAgICAgbiA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyBfX1BSSVZBVEVfbmV3VGV4dEVuY29kZXIoKS5lbmNvZGUoZSkgOiBlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX25ld0J1bmRsZVJlYWRlcihlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9CdW5kbGVSZWFkZXJJbXBsKGUsIHQpO1xuICAgICAgICB9KGZ1bmN0aW9uIF9fUFJJVkFURV90b0J5dGVTdHJlYW1SZWFkZXIoZSwgdCkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSByZXR1cm4gX19QUklWQVRFX3RvQnl0ZVN0cmVhbVJlYWRlckhlbHBlcihlLCB0KTtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHJldHVybiBfX1BSSVZBVEVfdG9CeXRlU3RyZWFtUmVhZGVySGVscGVyKG5ldyBVaW50OEFycmF5KGUpLCB0KTtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pIHJldHVybiBlLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU291cmNlIG9mIGB0b0J5dGVTdHJlYW1SZWFkZXJgIGhhcyB0byBiZSBhIEFycmF5QnVmZmVyIG9yIFJlYWRhYmxlU3RyZWFtXCIpO1xuICAgICAgICB9KG4pLCB0KTtcbiAgICB9KG4sIF9fUFJJVkFURV9uZXdTZXJpYWxpemVyKHQpKTtcbiAgICBlLmFzeW5jUXVldWUuZW5xdWV1ZUFuZEZvcmdldCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICBfX1BSSVZBVEVfc3luY0VuZ2luZUxvYWRCdW5kbGUoYXdhaXQgX19QUklWQVRFX2dldFN5bmNFbmdpbmUoZSksIGksIHIpO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudEdldE5hbWVkUXVlcnkoZSwgdCkge1xuICAgIHJldHVybiBlLmFzeW5jUXVldWUuZW5xdWV1ZSgoYXN5bmMgKCkgPT4gZnVuY3Rpb24gX19QUklWQVRFX2xvY2FsU3RvcmVHZXROYW1lZFF1ZXJ5KGUsIHQpIHtcbiAgICAgICAgY29uc3QgbiA9IF9fUFJJVkFURV9kZWJ1Z0Nhc3QoZSk7XG4gICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IG5hbWVkIHF1ZXJ5XCIsIFwicmVhZG9ubHlcIiwgKGUgPT4gbi4kci5nZXROYW1lZFF1ZXJ5KGUsIHQpKSk7XG4gICAgfShhd2FpdCBfX1BSSVZBVEVfZ2V0TG9jYWxTdG9yZShlKSwgdCkpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudFNldEluZGV4Q29uZmlndXJhdGlvbihlLCB0KSB7XG4gICAgcmV0dXJuIGUuYXN5bmNRdWV1ZS5lbnF1ZXVlKChhc3luYyAoKSA9PiBhc3luYyBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZUNvbmZpZ3VyZUZpZWxkSW5kZXhlcyhlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCByID0gbi5pbmRleE1hbmFnZXIsIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJDb25maWd1cmUgaW5kZXhlc1wiLCBcInJlYWR3cml0ZVwiLCAoZSA9PiByLmdldEZpZWxkSW5kZXhlcyhlKS5uZXh0KChuID0+IFxuICAgICAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgICAgICAvKipcbiAqIENvbXBhcmVzIHR3byBhcnJheSBmb3IgZXF1YWxpdHkgdXNpbmcgY29tcGFyYXRvci4gVGhlIG1ldGhvZCBjb21wdXRlcyB0aGVcbiAqIGludGVyc2VjdGlvbiBhbmQgaW52b2tlcyBgb25BZGRgIGZvciBldmVyeSBlbGVtZW50IHRoYXQgaXMgaW4gYGFmdGVyYCBidXQgbm90XG4gKiBgYmVmb3JlYC4gYG9uUmVtb3ZlYCBpcyBpbnZva2VkIGZvciBldmVyeSBlbGVtZW50IGluIGBiZWZvcmVgIGJ1dCBtaXNzaW5nXG4gKiBmcm9tIGBhZnRlcmAuXG4gKlxuICogVGhlIG1ldGhvZCBjcmVhdGVzIGEgY29weSBvZiBib3RoIGBiZWZvcmVgIGFuZCBgYWZ0ZXJgIGFuZCBydW5zIGluIE8obiBsb2dcbiAqIG4pLCB3aGVyZSBuIGlzIHRoZSBzaXplIG9mIHRoZSB0d28gbGlzdHMuXG4gKlxuICogQHBhcmFtIGJlZm9yZSAtIFRoZSBlbGVtZW50cyB0aGF0IGV4aXN0IGluIHRoZSBvcmlnaW5hbCBhcnJheS5cbiAqIEBwYXJhbSBhZnRlciAtIFRoZSBlbGVtZW50cyB0byBkaWZmIGFnYWluc3QgdGhlIG9yaWdpbmFsIGFycmF5LlxuICogQHBhcmFtIGNvbXBhcmF0b3IgLSBUaGUgY29tcGFyYXRvciBmb3IgdGhlIGVsZW1lbnRzIGluIGJlZm9yZSBhbmQgYWZ0ZXIuXG4gKiBAcGFyYW0gb25BZGQgLSBBIGZ1bmN0aW9uIHRvIGludm9rZSBmb3IgZXZlcnkgZWxlbWVudCB0aGF0IGlzIHBhcnQgb2YgYFxuICogYWZ0ZXJgIGJ1dCBub3QgYGJlZm9yZWAuXG4gKiBAcGFyYW0gb25SZW1vdmUgLSBBIGZ1bmN0aW9uIHRvIGludm9rZSBmb3IgZXZlcnkgZWxlbWVudCB0aGF0IGlzIHBhcnQgb2ZcbiAqIGBiZWZvcmVgIGJ1dCBub3QgYGFmdGVyYC5cbiAqL1xuICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfZGlmZkFycmF5cyhlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgICAgICBlID0gWyAuLi5lIF0sIHQgPSBbIC4uLnQgXSwgZS5zb3J0KG4pLCB0LnNvcnQobik7XG4gICAgICAgICAgICBjb25zdCBzID0gZS5sZW5ndGgsIG8gPSB0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCBfID0gMCwgYSA9IDA7XG4gICAgICAgICAgICBmb3IgKDtfIDwgbyAmJiBhIDwgczsgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG4oZVthXSwgdFtfXSk7XG4gICAgICAgICAgICAgICAgcyA8IDAgPyBcbiAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCB3YXMgcmVtb3ZlZCBpZiB0aGUgbmV4dCBlbGVtZW50IGluIG91ciBvcmRlcmVkXG4gICAgICAgICAgICAgICAgLy8gd2Fsa3Rocm91Z2ggaXMgb25seSBpbiBgYmVmb3JlYC5cbiAgICAgICAgICAgICAgICBpKGVbYSsrXSkgOiBzID4gMCA/IFxuICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IHdhcyBhZGRlZCBpZiB0aGUgbmV4dCBlbGVtZW50IGluIG91ciBvcmRlcmVkIHdhbGt0aHJvdWdoXG4gICAgICAgICAgICAgICAgLy8gaXMgb25seSBpbiBgYWZ0ZXJgLlxuICAgICAgICAgICAgICAgIHIodFtfKytdKSA6IChfKyssIGErKyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDtfIDwgbzsgKSByKHRbXysrXSk7XG4gICAgICAgICAgICBmb3IgKDthIDwgczsgKSBpKGVbYSsrXSk7XG4gICAgICAgIH0obiwgdCwgX19QUklWQVRFX2ZpZWxkSW5kZXhTZW1hbnRpY0NvbXBhcmF0b3IsICh0ID0+IHtcbiAgICAgICAgICAgIGkucHVzaChyLmFkZEZpZWxkSW5kZXgoZSwgdCkpO1xuICAgICAgICB9KSwgKHQgPT4ge1xuICAgICAgICAgICAgaS5wdXNoKHIuZGVsZXRlRmllbGRJbmRleChlLCB0KSk7XG4gICAgICAgIH0pKSkpLm5leHQoKCgpID0+IFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKGkpKSkpKTtcbiAgICB9KGF3YWl0IF9fUFJJVkFURV9nZXRMb2NhbFN0b3JlKGUpLCB0KSkpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50U2V0UGVyc2lzdGVudENhY2hlSW5kZXhBdXRvQ3JlYXRpb25FbmFibGVkKGUsIHQpIHtcbiAgICByZXR1cm4gZS5hc3luY1F1ZXVlLmVucXVldWUoKGFzeW5jICgpID0+IGZ1bmN0aW9uIF9fUFJJVkFURV9sb2NhbFN0b3JlU2V0SW5kZXhBdXRvQ3JlYXRpb25FbmFibGVkKGUsIHQpIHtcbiAgICAgICAgX19QUklWQVRFX2RlYnVnQ2FzdChlKS50cy5VaSA9IHQ7XG4gICAgfShhd2FpdCBfX1BSSVZBVEVfZ2V0TG9jYWxTdG9yZShlKSwgdCkpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudERlbGV0ZUFsbEZpZWxkSW5kZXhlcyhlKSB7XG4gICAgcmV0dXJuIGUuYXN5bmNRdWV1ZS5lbnF1ZXVlKChhc3luYyAoKSA9PiBmdW5jdGlvbiBfX1BSSVZBVEVfbG9jYWxTdG9yZURlbGV0ZUFsbEZpZWxkSW5kZXhlcyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfZGVidWdDYXN0KGUpLCBuID0gdC5pbmRleE1hbmFnZXI7XG4gICAgICAgIHJldHVybiB0LnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiRGVsZXRlIEFsbCBJbmRleGVzXCIsIFwicmVhZHdyaXRlXCIsIChlID0+IG4uZGVsZXRlQWxsRmllbGRJbmRleGVzKGUpKSk7XG4gICAgfVxuICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4gICAgLy8gVGhlIGZvcm1hdCBvZiB0aGUgTG9jYWxTdG9yYWdlIGtleSB0aGF0IHN0b3JlcyB0aGUgY2xpZW50IHN0YXRlIGlzOlxuICAgIC8vICAgICBmaXJlc3RvcmVfY2xpZW50c188cGVyc2lzdGVuY2VfcHJlZml4Pl88aW5zdGFuY2Vfa2V5PlxuICAgIChhd2FpdCBfX1BSSVZBVEVfZ2V0TG9jYWxTdG9yZShlKSkpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29tcGFyZXMgdHdvIGBFeHBlcmltZW50YWxMb25nUG9sbGluZ09wdGlvbnNgIG9iamVjdHMgZm9yIGVxdWFsaXR5LlxuICovXG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgYEV4cGVyaW1lbnRhbExvbmdQb2xsaW5nT3B0aW9uc2Agd2l0aCB0aGUgc2FtZVxuICogb3B0aW9uIHZhbHVlcyBhcyB0aGUgZ2l2ZW4gaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9jbG9uZUxvbmdQb2xsaW5nT3B0aW9ucyhlKSB7XG4gICAgY29uc3QgdCA9IHt9O1xuICAgIHJldHVybiB2b2lkIDAgIT09IGUudGltZW91dFNlY29uZHMgJiYgKHQudGltZW91dFNlY29uZHMgPSBlLnRpbWVvdXRTZWNvbmRzKSwgdDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgeWUgPSBuZXcgTWFwO1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG1hcCB0aGF0IGVuc3VyZXMgb25seSBvbmUgRGF0YXN0b3JlIGV4aXN0cyBwZXIgRmlyZXN0b3JlXG4gKiBpbnN0YW5jZS5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZU5vbkVtcHR5QXJndW1lbnQoZSwgdCwgbikge1xuICAgIGlmICghbikgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEZ1bmN0aW9uICR7ZX0oKSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggYW4gZW1wdHkgJHt0fS5gKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCB0d28gYm9vbGVhbiBvcHRpb25zIGFyZSBub3Qgc2V0IGF0IHRoZSBzYW1lIHRpbWUuXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfdmFsaWRhdGVJc05vdFVzZWRUb2dldGhlcihlLCB0LCBuLCByKSB7XG4gICAgaWYgKCEwID09PSB0ICYmICEwID09PSByKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgJHtlfSBhbmQgJHtufSBjYW5ub3QgYmUgdXNlZCB0b2dldGhlci5gKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCBgcGF0aGAgcmVmZXJzIHRvIGEgZG9jdW1lbnQgKGluZGljYXRlZCBieSB0aGUgZmFjdCBpdCBjb250YWluc1xuICogYW4gZXZlbiBudW1iZXJzIG9mIHNlZ21lbnRzKS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfdmFsaWRhdGVEb2N1bWVudFBhdGgoZSkge1xuICAgIGlmICghRG9jdW1lbnRLZXkuaXNEb2N1bWVudEtleShlKSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgZG9jdW1lbnQgcmVmZXJlbmNlLiBEb2N1bWVudCByZWZlcmVuY2VzIG11c3QgaGF2ZSBhbiBldmVuIG51bWJlciBvZiBzZWdtZW50cywgYnV0ICR7ZX0gaGFzICR7ZS5sZW5ndGh9LmApO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IGBwYXRoYCByZWZlcnMgdG8gYSBjb2xsZWN0aW9uIChpbmRpY2F0ZWQgYnkgdGhlIGZhY3QgaXRcbiAqIGNvbnRhaW5zIGFuIG9kZCBudW1iZXJzIG9mIHNlZ21lbnRzKS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfdmFsaWRhdGVDb2xsZWN0aW9uUGF0aChlKSB7XG4gICAgaWYgKERvY3VtZW50S2V5LmlzRG9jdW1lbnRLZXkoZSkpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIGNvbGxlY3Rpb24gcmVmZXJlbmNlLiBDb2xsZWN0aW9uIHJlZmVyZW5jZXMgbXVzdCBoYXZlIGFuIG9kZCBudW1iZXIgb2Ygc2VnbWVudHMsIGJ1dCAke2V9IGhhcyAke2UubGVuZ3RofS5gKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgaXQncyBhIG5vbi1udWxsIG9iamVjdCB3aXRob3V0IGEgY3VzdG9tIHByb3RvdHlwZVxuICogKGkuZS4gZXhjbHVkZXMgQXJyYXksIERhdGUsIGV0Yy4pLlxuICovXG4vKiogUmV0dXJucyBhIHN0cmluZyBkZXNjcmliaW5nIHRoZSB0eXBlIC8gdmFsdWUgb2YgdGhlIHByb3ZpZGVkIGlucHV0LiAqL1xuZnVuY3Rpb24gX19QUklWQVRFX3ZhbHVlRGVzY3JpcHRpb24oZSkge1xuICAgIGlmICh2b2lkIDAgPT09IGUpIHJldHVybiBcInVuZGVmaW5lZFwiO1xuICAgIGlmIChudWxsID09PSBlKSByZXR1cm4gXCJudWxsXCI7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHJldHVybiBlLmxlbmd0aCA+IDIwICYmIChlID0gYCR7ZS5zdWJzdHJpbmcoMCwgMjApfS4uLmApLCBcbiAgICBKU09OLnN0cmluZ2lmeShlKTtcbiAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgZSB8fCBcImJvb2xlYW5cIiA9PSB0eXBlb2YgZSkgcmV0dXJuIFwiXCIgKyBlO1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlKSB7XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgQXJyYXkpIHJldHVybiBcImFuIGFycmF5XCI7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBcbiAgICAgICAgICAgIC8qKiB0cnkgdG8gZ2V0IHRoZSBjb25zdHJ1Y3RvciBuYW1lIGZvciBhbiBvYmplY3QuICovXG4gICAgICAgICAgICBmdW5jdGlvbiBfX1BSSVZBVEVfdHJ5R2V0Q3VzdG9tT2JqZWN0VHlwZShlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuY29uc3RydWN0b3IpIHJldHVybiBlLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAqIENhc3RzIGBvYmpgIHRvIGBUYCwgb3B0aW9uYWxseSB1bndyYXBwaW5nIENvbXBhdCB0eXBlcyB0byBleHBvc2UgdGhlXG4gKiB1bmRlcmx5aW5nIGluc3RhbmNlLiBUaHJvd3MgaWYgIGBvYmpgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBgVGAuXG4gKlxuICogVGhpcyBjYXN0IGlzIHVzZWQgaW4gdGhlIExpdGUgYW5kIEZ1bGwgU0RLIHRvIHZlcmlmeSBpbnN0YW5jZSB0eXBlcyBmb3JcbiAqIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIHB1YmxpYyBBUEkuXG4gKiBAaW50ZXJuYWxcbiAqLyAoZSk7XG4gICAgICAgICAgICByZXR1cm4gdCA/IGBhIGN1c3RvbSAke3R9IG9iamVjdGAgOiBcImFuIG9iamVjdFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUgPyBcImEgZnVuY3Rpb25cIiA6IGZhaWwoKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2Nhc3QoZSwgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudCkge1xuICAgIGlmIChcIl9kZWxlZ2F0ZVwiIGluIGUgJiYgKFxuICAgIC8vIFVud3JhcCBDb21wYXQgdHlwZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGUgPSBlLl9kZWxlZ2F0ZSksICEoZSBpbnN0YW5jZW9mIHQpKSB7XG4gICAgICAgIGlmICh0Lm5hbWUgPT09IGUuY29uc3RydWN0b3IubmFtZSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJUeXBlIGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RlZCBpbnN0YW5jZS4gRGlkIHlvdSBwYXNzIGEgcmVmZXJlbmNlIGZyb20gYSBkaWZmZXJlbnQgRmlyZXN0b3JlIFNESz9cIik7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBfX1BSSVZBVEVfdmFsdWVEZXNjcmlwdGlvbihlKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIGBFeHBlY3RlZCB0eXBlICcke3QubmFtZX0nLCBidXQgaXQgd2FzOiAke259YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZVBvc2l0aXZlTnVtYmVyKGUsIHQpIHtcbiAgICBpZiAodCA8PSAwKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgRnVuY3Rpb24gJHtlfSgpIHJlcXVpcmVzIGEgcG9zaXRpdmUgbnVtYmVyLCBidXQgaXQgd2FzOiAke3R9LmApO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gc2V0dGluZ3MoKSBkZWZhdWx0czpcbi8qKlxuICogQSBjb25jcmV0ZSB0eXBlIGRlc2NyaWJpbmcgYWxsIHRoZSB2YWx1ZXMgdGhhdCBjYW4gYmUgYXBwbGllZCB2aWEgYVxuICogdXNlci1zdXBwbGllZCBgRmlyZXN0b3JlU2V0dGluZ3NgIG9iamVjdC4gVGhpcyBpcyBhIHNlcGFyYXRlIHR5cGUgc28gdGhhdFxuICogZGVmYXVsdHMgY2FuIGJlIHN1cHBsaWVkIGFuZCB0aGUgdmFsdWUgY2FuIGJlIGNoZWNrZWQgZm9yIGVxdWFsaXR5LlxuICovXG5jbGFzcyBGaXJlc3RvcmVTZXR0aW5nc0ltcGwge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdmFyIHQsIG47XG4gICAgICAgIGlmICh2b2lkIDAgPT09IGUuaG9zdCkge1xuICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZS5zc2wpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIFwiQ2FuJ3QgcHJvdmlkZSBzc2wgb3B0aW9uIGlmIGhvc3Qgb3B0aW9uIGlzIG5vdCBzZXRcIik7XG4gICAgICAgICAgICB0aGlzLmhvc3QgPSBcImZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbVwiLCB0aGlzLnNzbCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB0aGlzLmhvc3QgPSBlLmhvc3QsIHRoaXMuc3NsID0gbnVsbCA9PT0gKHQgPSBlLnNzbCkgfHwgdm9pZCAwID09PSB0IHx8IHQ7XG4gICAgICAgIGlmICh0aGlzLmNyZWRlbnRpYWxzID0gZS5jcmVkZW50aWFscywgdGhpcy5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzID0gISFlLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMsIFxuICAgICAgICB0aGlzLmxvY2FsQ2FjaGUgPSBlLmxvY2FsQ2FjaGUsIHZvaWQgMCA9PT0gZS5jYWNoZVNpemVCeXRlcykgdGhpcy5jYWNoZVNpemVCeXRlcyA9IDQxOTQzMDQwOyBlbHNlIHtcbiAgICAgICAgICAgIGlmICgtMSAhPT0gZS5jYWNoZVNpemVCeXRlcyAmJiBlLmNhY2hlU2l6ZUJ5dGVzIDwgMTA0ODU3NikgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJjYWNoZVNpemVCeXRlcyBtdXN0IGJlIGF0IGxlYXN0IDEwNDg1NzZcIik7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2l6ZUJ5dGVzID0gZS5jYWNoZVNpemVCeXRlcztcbiAgICAgICAgfVxuICAgICAgICBfX1BSSVZBVEVfdmFsaWRhdGVJc05vdFVzZWRUb2dldGhlcihcImV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmdcIiwgZS5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nLCBcImV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZ1wiLCBlLmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyksIFxuICAgICAgICB0aGlzLmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcgPSAhIWUuZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZywgdGhpcy5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nID8gdGhpcy5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPSAhMSA6IHZvaWQgMCA9PT0gZS5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPyB0aGlzLmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyA9IHRydWUgOiBcbiAgICAgICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBjb2VyY2UgdGhlIHZhbHVlIHRvIGJvb2xlYW4gZXZlbiB0aG91Z2hcbiAgICAgICAgLy8gdGhlIFR5cGVTY3JpcHQgY29tcGlsZXIgaGFzIG5hcnJvd2VkIHRoZSB0eXBlIHRvIGJvb2xlYW4gYWxyZWFkeS5cbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIFBvaW50bGVzc0Jvb2xlYW5FeHByZXNzaW9uSlNcbiAgICAgICAgdGhpcy5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPSAhIWUuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nLCBcbiAgICAgICAgdGhpcy5leHBlcmltZW50YWxMb25nUG9sbGluZ09wdGlvbnMgPSBfX1BSSVZBVEVfY2xvbmVMb25nUG9sbGluZ09wdGlvbnMobnVsbCAhPT0gKG4gPSBlLmV4cGVyaW1lbnRhbExvbmdQb2xsaW5nT3B0aW9ucykgJiYgdm9pZCAwICE9PSBuID8gbiA6IHt9KSwgXG4gICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZUxvbmdQb2xsaW5nT3B0aW9ucyhlKSB7XG4gICAgICAgICAgICBpZiAodm9pZCAwICE9PSBlLnRpbWVvdXRTZWNvbmRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKGUudGltZW91dFNlY29uZHMpKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgaW52YWxpZCBsb25nIHBvbGxpbmcgdGltZW91dDogJHtlLnRpbWVvdXRTZWNvbmRzfSAobXVzdCBub3QgYmUgTmFOKWApO1xuICAgICAgICAgICAgICAgIGlmIChlLnRpbWVvdXRTZWNvbmRzIDwgNSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYGludmFsaWQgbG9uZyBwb2xsaW5nIHRpbWVvdXQ6ICR7ZS50aW1lb3V0U2Vjb25kc30gKG1pbmltdW0gYWxsb3dlZCB2YWx1ZSBpcyA1KWApO1xuICAgICAgICAgICAgICAgIGlmIChlLnRpbWVvdXRTZWNvbmRzID4gMzApIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIGBpbnZhbGlkIGxvbmcgcG9sbGluZyB0aW1lb3V0OiAke2UudGltZW91dFNlY29uZHN9IChtYXhpbXVtIGFsbG93ZWQgdmFsdWUgaXMgMzApYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAgICAgLyoqXG4gKiBUaGUgQ2xvdWQgRmlyZXN0b3JlIHNlcnZpY2UgaW50ZXJmYWNlLlxuICpcbiAqIERvIG5vdCBjYWxsIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIEluc3RlYWQsIHVzZSB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uXG4gKi8gKHRoaXMuZXhwZXJpbWVudGFsTG9uZ1BvbGxpbmdPcHRpb25zKSwgdGhpcy51c2VGZXRjaFN0cmVhbXMgPSAhIWUudXNlRmV0Y2hTdHJlYW1zO1xuICAgIH1cbiAgICBpc0VxdWFsKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdCA9PT0gZS5ob3N0ICYmIHRoaXMuc3NsID09PSBlLnNzbCAmJiB0aGlzLmNyZWRlbnRpYWxzID09PSBlLmNyZWRlbnRpYWxzICYmIHRoaXMuY2FjaGVTaXplQnl0ZXMgPT09IGUuY2FjaGVTaXplQnl0ZXMgJiYgdGhpcy5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nID09PSBlLmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcgJiYgdGhpcy5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPT09IGUuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nICYmIGZ1bmN0aW9uIF9fUFJJVkFURV9sb25nUG9sbGluZ09wdGlvbnNFcXVhbChlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS50aW1lb3V0U2Vjb25kcyA9PT0gdC50aW1lb3V0U2Vjb25kcztcbiAgICAgICAgfSh0aGlzLmV4cGVyaW1lbnRhbExvbmdQb2xsaW5nT3B0aW9ucywgZS5leHBlcmltZW50YWxMb25nUG9sbGluZ09wdGlvbnMpICYmIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyA9PT0gZS5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzICYmIHRoaXMudXNlRmV0Y2hTdHJlYW1zID09PSBlLnVzZUZldGNoU3RyZWFtcztcbiAgICB9XG59XG5cbmNsYXNzIEZpcmVzdG9yZSQxIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgdGhpcy5fYXV0aENyZWRlbnRpYWxzID0gZSwgdGhpcy5fYXBwQ2hlY2tDcmVkZW50aWFscyA9IHQsIHRoaXMuX2RhdGFiYXNlSWQgPSBuLCBcbiAgICAgICAgdGhpcy5fYXBwID0gciwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGl0J3MgYSBGaXJlc3RvcmUgb3IgRmlyZXN0b3JlIExpdGUgaW5zdGFuY2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBcImZpcmVzdG9yZS1saXRlXCIsIHRoaXMuX3BlcnNpc3RlbmNlS2V5ID0gXCIobGl0ZSlcIiwgdGhpcy5fc2V0dGluZ3MgPSBuZXcgRmlyZXN0b3JlU2V0dGluZ3NJbXBsKHt9KSwgXG4gICAgICAgIHRoaXMuX3NldHRpbmdzRnJvemVuID0gITE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gYXNzb2NpYXRlZCB3aXRoIHRoaXMgYEZpcmVzdG9yZWAgc2VydmljZVxuICAgICAqIGluc3RhbmNlLlxuICAgICAqLyAgICBnZXQgYXBwKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2FwcCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJGaXJlc3RvcmUgd2FzIG5vdCBpbml0aWFsaXplZCB1c2luZyB0aGUgRmlyZWJhc2UgU0RLLiAnYXBwJyBpcyBub3QgYXZhaWxhYmxlXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwO1xuICAgIH1cbiAgICBnZXQgX2luaXRpYWxpemVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3NGcm96ZW47XG4gICAgfVxuICAgIGdldCBfdGVybWluYXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdGhpcy5fdGVybWluYXRlVGFzaztcbiAgICB9XG4gICAgX3NldFNldHRpbmdzKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzRnJvemVuKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5GQUlMRURfUFJFQ09ORElUSU9OLCBcIkZpcmVzdG9yZSBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQgYW5kIGl0cyBzZXR0aW5ncyBjYW4gbm8gbG9uZ2VyIGJlIGNoYW5nZWQuIFlvdSBjYW4gb25seSBtb2RpZnkgc2V0dGluZ3MgYmVmb3JlIGNhbGxpbmcgYW55IG90aGVyIG1ldGhvZHMgb24gYSBGaXJlc3RvcmUgb2JqZWN0LlwiKTtcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBuZXcgRmlyZXN0b3JlU2V0dGluZ3NJbXBsKGUpLCB2b2lkIDAgIT09IGUuY3JlZGVudGlhbHMgJiYgKHRoaXMuX2F1dGhDcmVkZW50aWFscyA9IGZ1bmN0aW9uIF9fUFJJVkFURV9tYWtlQXV0aENyZWRlbnRpYWxzUHJvdmlkZXIoZSkge1xuICAgICAgICAgICAgaWYgKCFlKSByZXR1cm4gbmV3IF9fUFJJVkFURV9FbXB0eUF1dGhDcmVkZW50aWFsc1Byb3ZpZGVyO1xuICAgICAgICAgICAgc3dpdGNoIChlLnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcImZpcnN0UGFydHlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9GaXJzdFBhcnR5QXV0aENyZWRlbnRpYWxzUHJvdmlkZXIoZS5zZXNzaW9uSW5kZXggfHwgXCIwXCIsIGUuaWFtVG9rZW4gfHwgbnVsbCwgZS5hdXRoVG9rZW5GYWN0b3J5IHx8IG51bGwpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJwcm92aWRlclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBlLmNsaWVudDtcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIFwibWFrZUF1dGhDcmVkZW50aWFsc1Byb3ZpZGVyIGZhaWxlZCBkdWUgdG8gaW52YWxpZCBjcmVkZW50aWFsIHR5cGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0oZS5jcmVkZW50aWFscykpO1xuICAgIH1cbiAgICBfZ2V0U2V0dGluZ3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncztcbiAgICB9XG4gICAgX2ZyZWV6ZVNldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3NGcm96ZW4gPSAhMCwgdGhpcy5fc2V0dGluZ3M7XG4gICAgfVxuICAgIF9kZWxldGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZXJtaW5hdGVUYXNrIHx8ICh0aGlzLl90ZXJtaW5hdGVUYXNrID0gdGhpcy5fdGVybWluYXRlKCkpLCB0aGlzLl90ZXJtaW5hdGVUYXNrO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIEpTT04tc2VyaWFsaXphYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgYEZpcmVzdG9yZWAgaW5zdGFuY2UuICovICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFwcDogdGhpcy5fYXBwLFxuICAgICAgICAgICAgZGF0YWJhc2VJZDogdGhpcy5fZGF0YWJhc2VJZCxcbiAgICAgICAgICAgIHNldHRpbmdzOiB0aGlzLl9zZXR0aW5nc1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXJtaW5hdGVzIGFsbCBjb21wb25lbnRzIHVzZWQgYnkgdGhpcyBjbGllbnQuIFN1YmNsYXNzZXMgY2FuIG92ZXJyaWRlXG4gICAgICogdGhpcyBtZXRob2QgdG8gY2xlYW4gdXAgdGhlaXIgb3duIGRlcGVuZGVuY2llcywgYnV0IG11c3QgYWxzbyBjYWxsIHRoaXNcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiBPbmx5IGV2ZXIgY2FsbGVkIG9uY2UuXG4gICAgICovICAgIF90ZXJtaW5hdGUoKSB7XG4gICAgICAgIC8qKlxuICogUmVtb3ZlcyBhbGwgY29tcG9uZW50cyBhc3NvY2lhdGVkIHdpdGggdGhlIHByb3ZpZGVkIGluc3RhbmNlLiBNdXN0IGJlIGNhbGxlZFxuICogd2hlbiB0aGUgYEZpcmVzdG9yZWAgaW5zdGFuY2UgaXMgdGVybWluYXRlZC5cbiAqL1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX3JlbW92ZUNvbXBvbmVudHMoZSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IHllLmdldChlKTtcbiAgICAgICAgICAgIHQgJiYgKF9fUFJJVkFURV9sb2dEZWJ1ZyhcIkNvbXBvbmVudFByb3ZpZGVyXCIsIFwiUmVtb3ZpbmcgRGF0YXN0b3JlXCIpLCB5ZS5kZWxldGUoZSksIFxuICAgICAgICAgICAgdC50ZXJtaW5hdGUoKSk7XG4gICAgICAgIH0odGhpcyksIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBNb2RpZnkgdGhpcyBpbnN0YW5jZSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBDbG91ZCBGaXJlc3RvcmUgZW11bGF0b3IuXG4gKlxuICogTm90ZTogVGhpcyBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgdGhpcyBpbnN0YW5jZSBoYXMgYmVlbiB1c2VkIHRvIGRvIGFueVxuICogb3BlcmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gVGhlIGBGaXJlc3RvcmVgIGluc3RhbmNlIHRvIGNvbmZpZ3VyZSB0byBjb25uZWN0IHRvIHRoZVxuICogZW11bGF0b3IuXG4gKiBAcGFyYW0gaG9zdCAtIHRoZSBlbXVsYXRvciBob3N0IChleDogbG9jYWxob3N0KS5cbiAqIEBwYXJhbSBwb3J0IC0gdGhlIGVtdWxhdG9yIHBvcnQgKGV4OiA5MDAwKS5cbiAqIEBwYXJhbSBvcHRpb25zLm1vY2tVc2VyVG9rZW4gLSB0aGUgbW9jayBhdXRoIHRva2VuIHRvIHVzZSBmb3IgdW5pdCB0ZXN0aW5nXG4gKiBTZWN1cml0eSBSdWxlcy5cbiAqLyBmdW5jdGlvbiBjb25uZWN0RmlyZXN0b3JlRW11bGF0b3IoZSwgdCwgbiwgciA9IHt9KSB7XG4gICAgdmFyIGk7XG4gICAgY29uc3QgcyA9IChlID0gX19QUklWQVRFX2Nhc3QoZSwgRmlyZXN0b3JlJDEpKS5fZ2V0U2V0dGluZ3MoKSwgbyA9IGAke3R9OiR7bn1gO1xuICAgIGlmIChcImZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbVwiICE9PSBzLmhvc3QgJiYgcy5ob3N0ICE9PSBvICYmIF9fUFJJVkFURV9sb2dXYXJuKFwiSG9zdCBoYXMgYmVlbiBzZXQgaW4gYm90aCBzZXR0aW5ncygpIGFuZCBjb25uZWN0RmlyZXN0b3JlRW11bGF0b3IoKSwgZW11bGF0b3IgaG9zdCB3aWxsIGJlIHVzZWQuXCIpLCBcbiAgICBlLl9zZXRTZXR0aW5ncyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHMpLCB7XG4gICAgICAgIGhvc3Q6IG8sXG4gICAgICAgIHNzbDogITFcbiAgICB9KSksIHIubW9ja1VzZXJUb2tlbikge1xuICAgICAgICBsZXQgdCwgbjtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIubW9ja1VzZXJUb2tlbikgdCA9IHIubW9ja1VzZXJUb2tlbiwgbiA9IFVzZXIuTU9DS19VU0VSOyBlbHNlIHtcbiAgICAgICAgICAgIC8vIExldCBjcmVhdGVNb2NrVXNlclRva2VuIHZhbGlkYXRlIGZpcnN0IChjYXRjaGVzIGNvbW1vbiBtaXN0YWtlcyBsaWtlXG4gICAgICAgICAgICAvLyBpbnZhbGlkIGZpZWxkIFwidWlkXCIgYW5kIG1pc3NpbmcgZmllbGQgXCJzdWJcIiAvIFwidXNlcl9pZFwiLilcbiAgICAgICAgICAgIHQgPSB1dGlsLmNyZWF0ZU1vY2tVc2VyVG9rZW4oci5tb2NrVXNlclRva2VuLCBudWxsID09PSAoaSA9IGUuX2FwcCkgfHwgdm9pZCAwID09PSBpID8gdm9pZCAwIDogaS5vcHRpb25zLnByb2plY3RJZCk7XG4gICAgICAgICAgICBjb25zdCBzID0gci5tb2NrVXNlclRva2VuLnN1YiB8fCByLm1vY2tVc2VyVG9rZW4udXNlcl9pZDtcbiAgICAgICAgICAgIGlmICghcykgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJtb2NrVXNlclRva2VuIG11c3QgY29udGFpbiAnc3ViJyBvciAndXNlcl9pZCcgZmllbGQhXCIpO1xuICAgICAgICAgICAgbiA9IG5ldyBVc2VyKHMpO1xuICAgICAgICB9XG4gICAgICAgIGUuX2F1dGhDcmVkZW50aWFscyA9IG5ldyBfX1BSSVZBVEVfRW11bGF0b3JBdXRoQ3JlZGVudGlhbHNQcm92aWRlcihuZXcgX19QUklWQVRFX09BdXRoVG9rZW4odCwgbikpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBgUXVlcnlgIHJlZmVycyB0byBhIHF1ZXJ5IHdoaWNoIHlvdSBjYW4gcmVhZCBvciBsaXN0ZW4gdG8uIFlvdSBjYW4gYWxzb1xuICogY29uc3RydWN0IHJlZmluZWQgYFF1ZXJ5YCBvYmplY3RzIGJ5IGFkZGluZyBmaWx0ZXJzIGFuZCBvcmRlcmluZy5cbiAqLyBjbGFzcyBRdWVyeSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgbGl0ZSB2ZXJzaW9uIG9mIHRoZSBRdWVyeSBjbGFzcyBpbiB0aGUgbWFpbiBTREsuXG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgcHJvdGVjdGVkICovXG4gICAgY29uc3RydWN0b3IoZSwgXG4gICAgLyoqXG4gICAgICogSWYgcHJvdmlkZWQsIHRoZSBgRmlyZXN0b3JlRGF0YUNvbnZlcnRlcmAgYXNzb2NpYXRlZCB3aXRoIHRoaXMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgdCwgbikge1xuICAgICAgICB0aGlzLmNvbnZlcnRlciA9IHQsIHRoaXMuX3F1ZXJ5ID0gbiwgXG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIEZpcmVzdG9yZSByZWZlcmVuY2UuICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwicXVlcnlcIiwgdGhpcy5maXJlc3RvcmUgPSBlO1xuICAgIH1cbiAgICB3aXRoQ29udmVydGVyKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSh0aGlzLmZpcmVzdG9yZSwgZSwgdGhpcy5fcXVlcnkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGBEb2N1bWVudFJlZmVyZW5jZWAgcmVmZXJzIHRvIGEgZG9jdW1lbnQgbG9jYXRpb24gaW4gYSBGaXJlc3RvcmUgZGF0YWJhc2VcbiAqIGFuZCBjYW4gYmUgdXNlZCB0byB3cml0ZSwgcmVhZCwgb3IgbGlzdGVuIHRvIHRoZSBsb2NhdGlvbi4gVGhlIGRvY3VtZW50IGF0XG4gKiB0aGUgcmVmZXJlbmNlZCBsb2NhdGlvbiBtYXkgb3IgbWF5IG5vdCBleGlzdC5cbiAqLyBjbGFzcyBEb2N1bWVudFJlZmVyZW5jZSB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCBcbiAgICAvKipcbiAgICAgKiBJZiBwcm92aWRlZCwgdGhlIGBGaXJlc3RvcmVEYXRhQ29udmVydGVyYCBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICB0LCBuKSB7XG4gICAgICAgIHRoaXMuY29udmVydGVyID0gdCwgdGhpcy5fa2V5ID0gbiwgXG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIEZpcmVzdG9yZSByZWZlcmVuY2UuICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwiZG9jdW1lbnRcIiwgdGhpcy5maXJlc3RvcmUgPSBlO1xuICAgIH1cbiAgICBnZXQgX3BhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXkucGF0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGRvY3VtZW50J3MgaWRlbnRpZmllciB3aXRoaW4gaXRzIGNvbGxlY3Rpb24uXG4gICAgICovICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleS5wYXRoLmxhc3RTZWdtZW50KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcGF0aCBvZiB0aGUgcmVmZXJlbmNlZCBkb2N1bWVudCAocmVsYXRpdmVcbiAgICAgKiB0byB0aGUgcm9vdCBvZiB0aGUgZGF0YWJhc2UpLlxuICAgICAqLyAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleS5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY29sbGVjdGlvbiB0aGlzIGBEb2N1bWVudFJlZmVyZW5jZWAgYmVsb25ncyB0by5cbiAgICAgKi8gICAgZ2V0IHBhcmVudCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uUmVmZXJlbmNlKHRoaXMuZmlyZXN0b3JlLCB0aGlzLmNvbnZlcnRlciwgdGhpcy5fa2V5LnBhdGgucG9wTGFzdCgpKTtcbiAgICB9XG4gICAgd2l0aENvbnZlcnRlcihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRSZWZlcmVuY2UodGhpcy5maXJlc3RvcmUsIGUsIHRoaXMuX2tleSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYENvbGxlY3Rpb25SZWZlcmVuY2VgIG9iamVjdCBjYW4gYmUgdXNlZCBmb3IgYWRkaW5nIGRvY3VtZW50cywgZ2V0dGluZ1xuICogZG9jdW1lbnQgcmVmZXJlbmNlcywgYW5kIHF1ZXJ5aW5nIGZvciBkb2N1bWVudHMgKHVzaW5nIHtAbGluayAocXVlcnk6MSl9KS5cbiAqLyBjbGFzcyBDb2xsZWN0aW9uUmVmZXJlbmNlIGV4dGVuZHMgUXVlcnkge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoZSwgdCwgbikge1xuICAgICAgICBzdXBlcihlLCB0LCBfX1BSSVZBVEVfbmV3UXVlcnlGb3JQYXRoKG4pKSwgdGhpcy5fcGF0aCA9IG4sIFxuICAgICAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBGaXJlc3RvcmUgcmVmZXJlbmNlLiAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBcImNvbGxlY3Rpb25cIjtcbiAgICB9XG4gICAgLyoqIFRoZSBjb2xsZWN0aW9uJ3MgaWRlbnRpZmllci4gKi8gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkucGF0aC5sYXN0U2VnbWVudCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHBhdGggb2YgdGhlIHJlZmVyZW5jZWQgY29sbGVjdGlvbiAocmVsYXRpdmVcbiAgICAgKiB0byB0aGUgcm9vdCBvZiB0aGUgZGF0YWJhc2UpLlxuICAgICAqLyAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5LnBhdGguY2Fub25pY2FsU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjb250YWluaW5nIGBEb2N1bWVudFJlZmVyZW5jZWAgaWYgdGhpcyBpcyBhXG4gICAgICogc3ViY29sbGVjdGlvbi4gSWYgdGhpcyBpc24ndCBhIHN1YmNvbGxlY3Rpb24sIHRoZSByZWZlcmVuY2UgaXMgbnVsbC5cbiAgICAgKi8gICAgZ2V0IHBhcmVudCgpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuX3BhdGgucG9wTGFzdCgpO1xuICAgICAgICByZXR1cm4gZS5pc0VtcHR5KCkgPyBudWxsIDogbmV3IERvY3VtZW50UmVmZXJlbmNlKHRoaXMuZmlyZXN0b3JlLCBcbiAgICAgICAgLyogY29udmVydGVyPSAqLyBudWxsLCBuZXcgRG9jdW1lbnRLZXkoZSkpO1xuICAgIH1cbiAgICB3aXRoQ29udmVydGVyKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uUmVmZXJlbmNlKHRoaXMuZmlyZXN0b3JlLCBlLCB0aGlzLl9wYXRoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3Rpb24oZSwgdCwgLi4ubikge1xuICAgIGlmIChlID0gdXRpbC5nZXRNb2R1bGFySW5zdGFuY2UoZSksIF9fUFJJVkFURV92YWxpZGF0ZU5vbkVtcHR5QXJndW1lbnQoXCJjb2xsZWN0aW9uXCIsIFwicGF0aFwiLCB0KSwgZSBpbnN0YW5jZW9mIEZpcmVzdG9yZSQxKSB7XG4gICAgICAgIGNvbnN0IHIgPSBSZXNvdXJjZVBhdGguZnJvbVN0cmluZyh0LCAuLi5uKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV92YWxpZGF0ZUNvbGxlY3Rpb25QYXRoKHIpLCBuZXcgQ29sbGVjdGlvblJlZmVyZW5jZShlLCAvKiBjb252ZXJ0ZXI9ICovIG51bGwsIHIpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBEb2N1bWVudFJlZmVyZW5jZSB8fCBlIGluc3RhbmNlb2YgQ29sbGVjdGlvblJlZmVyZW5jZSkpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIFwiRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gY29sbGVjdGlvbigpIHRvIGJlIGEgQ29sbGVjdGlvblJlZmVyZW5jZSwgYSBEb2N1bWVudFJlZmVyZW5jZSBvciBGaXJlYmFzZUZpcmVzdG9yZVwiKTtcbiAgICAgICAgY29uc3QgciA9IGUuX3BhdGguY2hpbGQoUmVzb3VyY2VQYXRoLmZyb21TdHJpbmcodCwgLi4ubikpO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3ZhbGlkYXRlQ29sbGVjdGlvblBhdGgociksIG5ldyBDb2xsZWN0aW9uUmVmZXJlbmNlKGUuZmlyZXN0b3JlLCBcbiAgICAgICAgLyogY29udmVydGVyPSAqLyBudWxsLCByKTtcbiAgICB9XG59XG5cbi8vIFRPRE8oZmlyZXN0b3JlbGl0ZSk6IENvbnNpZGVyIHVzaW5nIEVycm9yRmFjdG9yeSAtXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2Jsb2IvMDEzMWUxZi9wYWNrYWdlcy91dGlsL3NyYy9lcnJvcnMudHMjTDEwNlxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGBRdWVyeWAgaW5zdGFuY2UgdGhhdCBpbmNsdWRlcyBhbGwgZG9jdW1lbnRzIGluIHRoZVxuICogZGF0YWJhc2UgdGhhdCBhcmUgY29udGFpbmVkIGluIGEgY29sbGVjdGlvbiBvciBzdWJjb2xsZWN0aW9uIHdpdGggdGhlXG4gKiBnaXZlbiBgY29sbGVjdGlvbklkYC5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gQSByZWZlcmVuY2UgdG8gdGhlIHJvb3QgYEZpcmVzdG9yZWAgaW5zdGFuY2UuXG4gKiBAcGFyYW0gY29sbGVjdGlvbklkIC0gSWRlbnRpZmllcyB0aGUgY29sbGVjdGlvbnMgdG8gcXVlcnkgb3Zlci4gRXZlcnlcbiAqIGNvbGxlY3Rpb24gb3Igc3ViY29sbGVjdGlvbiB3aXRoIHRoaXMgSUQgYXMgdGhlIGxhc3Qgc2VnbWVudCBvZiBpdHMgcGF0aFxuICogd2lsbCBiZSBpbmNsdWRlZC4gQ2Fubm90IGNvbnRhaW4gYSBzbGFzaC5cbiAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIGBRdWVyeWAuXG4gKi8gZnVuY3Rpb24gY29sbGVjdGlvbkdyb3VwKGUsIHQpIHtcbiAgICBpZiAoZSA9IF9fUFJJVkFURV9jYXN0KGUsIEZpcmVzdG9yZSQxKSwgX19QUklWQVRFX3ZhbGlkYXRlTm9uRW1wdHlBcmd1bWVudChcImNvbGxlY3Rpb25Hcm91cFwiLCBcImNvbGxlY3Rpb24gaWRcIiwgdCksIFxuICAgIHQuaW5kZXhPZihcIi9cIikgPj0gMCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgY29sbGVjdGlvbiBJRCAnJHt0fScgcGFzc2VkIHRvIGZ1bmN0aW9uIGNvbGxlY3Rpb25Hcm91cCgpLiBDb2xsZWN0aW9uIElEcyBtdXN0IG5vdCBjb250YWluICcvJy5gKTtcbiAgICByZXR1cm4gbmV3IFF1ZXJ5KGUsIFxuICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgZnVuY3Rpb24gX19QUklWQVRFX25ld1F1ZXJ5Rm9yQ29sbGVjdGlvbkdyb3VwKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfUXVlcnlJbXBsKFJlc291cmNlUGF0aC5lbXB0eVBhdGgoKSwgZSk7XG4gICAgfSh0KSk7XG59XG5cbmZ1bmN0aW9uIGRvYyhlLCB0LCAuLi5uKSB7XG4gICAgaWYgKGUgPSB1dGlsLmdldE1vZHVsYXJJbnN0YW5jZShlKSwgXG4gICAgLy8gV2UgYWxsb3cgb21pc3Npb24gb2YgJ3BhdGhTdHJpbmcnIGJ1dCBleHBsaWNpdGx5IHByb2hpYml0IHBhc3NpbmcgaW4gYm90aFxuICAgIC8vICd1bmRlZmluZWQnIGFuZCAnbnVsbCcuXG4gICAgMSA9PT0gYXJndW1lbnRzLmxlbmd0aCAmJiAodCA9IF9fUFJJVkFURV9BdXRvSWQubmV3SWQoKSksIF9fUFJJVkFURV92YWxpZGF0ZU5vbkVtcHR5QXJndW1lbnQoXCJkb2NcIiwgXCJwYXRoXCIsIHQpLCBcbiAgICBlIGluc3RhbmNlb2YgRmlyZXN0b3JlJDEpIHtcbiAgICAgICAgY29uc3QgciA9IFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKHQsIC4uLm4pO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3ZhbGlkYXRlRG9jdW1lbnRQYXRoKHIpLCBuZXcgRG9jdW1lbnRSZWZlcmVuY2UoZSwgXG4gICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgbmV3IERvY3VtZW50S2V5KHIpKTtcbiAgICB9XG4gICAge1xuICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgRG9jdW1lbnRSZWZlcmVuY2UgfHwgZSBpbnN0YW5jZW9mIENvbGxlY3Rpb25SZWZlcmVuY2UpKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIkV4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGNvbGxlY3Rpb24oKSB0byBiZSBhIENvbGxlY3Rpb25SZWZlcmVuY2UsIGEgRG9jdW1lbnRSZWZlcmVuY2Ugb3IgRmlyZWJhc2VGaXJlc3RvcmVcIik7XG4gICAgICAgIGNvbnN0IHIgPSBlLl9wYXRoLmNoaWxkKFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKHQsIC4uLm4pKTtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV92YWxpZGF0ZURvY3VtZW50UGF0aChyKSwgbmV3IERvY3VtZW50UmVmZXJlbmNlKGUuZmlyZXN0b3JlLCBlIGluc3RhbmNlb2YgQ29sbGVjdGlvblJlZmVyZW5jZSA/IGUuY29udmVydGVyIDogbnVsbCwgbmV3IERvY3VtZW50S2V5KHIpKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCByZWZlcmVuY2VzIGFyZSBlcXVhbC5cbiAqXG4gKiBAcGFyYW0gbGVmdCAtIEEgcmVmZXJlbmNlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0gcmlnaHQgLSBBIHJlZmVyZW5jZSB0byBjb21wYXJlLlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgcmVmZXJlbmNlcyBwb2ludCB0byB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgc2FtZVxuICogRmlyZXN0b3JlIGRhdGFiYXNlLlxuICovIGZ1bmN0aW9uIHJlZkVxdWFsKGUsIHQpIHtcbiAgICByZXR1cm4gZSA9IHV0aWwuZ2V0TW9kdWxhckluc3RhbmNlKGUpLCB0ID0gdXRpbC5nZXRNb2R1bGFySW5zdGFuY2UodCksIChlIGluc3RhbmNlb2YgRG9jdW1lbnRSZWZlcmVuY2UgfHwgZSBpbnN0YW5jZW9mIENvbGxlY3Rpb25SZWZlcmVuY2UpICYmICh0IGluc3RhbmNlb2YgRG9jdW1lbnRSZWZlcmVuY2UgfHwgdCBpbnN0YW5jZW9mIENvbGxlY3Rpb25SZWZlcmVuY2UpICYmIChlLmZpcmVzdG9yZSA9PT0gdC5maXJlc3RvcmUgJiYgZS5wYXRoID09PSB0LnBhdGggJiYgZS5jb252ZXJ0ZXIgPT09IHQuY29udmVydGVyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIHF1ZXJpZXMgcG9pbnQgdG8gdGhlIHNhbWUgY29sbGVjdGlvbiBhbmQgYXBwbHlcbiAqIHRoZSBzYW1lIGNvbnN0cmFpbnRzLlxuICpcbiAqIEBwYXJhbSBsZWZ0IC0gQSBgUXVlcnlgIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0gcmlnaHQgLSBBIGBRdWVyeWAgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJlZmVyZW5jZXMgcG9pbnQgdG8gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIHNhbWVcbiAqIEZpcmVzdG9yZSBkYXRhYmFzZS5cbiAqLyBmdW5jdGlvbiBxdWVyeUVxdWFsKGUsIHQpIHtcbiAgICByZXR1cm4gZSA9IHV0aWwuZ2V0TW9kdWxhckluc3RhbmNlKGUpLCB0ID0gdXRpbC5nZXRNb2R1bGFySW5zdGFuY2UodCksIGUgaW5zdGFuY2VvZiBRdWVyeSAmJiB0IGluc3RhbmNlb2YgUXVlcnkgJiYgKGUuZmlyZXN0b3JlID09PSB0LmZpcmVzdG9yZSAmJiBfX1BSSVZBVEVfcXVlcnlFcXVhbHMoZS5fcXVlcnksIHQuX3F1ZXJ5KSAmJiBlLmNvbnZlcnRlciA9PT0gdC5jb252ZXJ0ZXIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjbGFzcyBfX1BSSVZBVEVfQXN5bmNRdWV1ZUltcGwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBUaGUgbGFzdCBwcm9taXNlIGluIHRoZSBxdWV1ZS5cbiAgICAgICAgdGhpcy5pdSA9IFByb21pc2UucmVzb2x2ZSgpLCBcbiAgICAgICAgLy8gQSBsaXN0IG9mIHJldHJ5YWJsZSBvcGVyYXRpb25zLiBSZXRyeWFibGUgb3BlcmF0aW9ucyBhcmUgcnVuIGluIG9yZGVyIGFuZFxuICAgICAgICAvLyByZXRyaWVkIHdpdGggYmFja29mZi5cbiAgICAgICAgdGhpcy5zdSA9IFtdLCBcbiAgICAgICAgLy8gSXMgdGhpcyBBc3luY1F1ZXVlIGJlaW5nIHNodXQgZG93bj8gT25jZSBpdCBpcyBzZXQgdG8gdHJ1ZSwgaXQgd2lsbCBub3RcbiAgICAgICAgLy8gYmUgY2hhbmdlZCBhZ2Fpbi5cbiAgICAgICAgdGhpcy5vdSA9ICExLCBcbiAgICAgICAgLy8gT3BlcmF0aW9ucyBzY2hlZHVsZWQgdG8gYmUgcXVldWVkIGluIHRoZSBmdXR1cmUuIE9wZXJhdGlvbnMgYXJlXG4gICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBhZnRlciB0aGV5IGFyZSBydW4gb3IgY2FuY2VsZWQuXG4gICAgICAgIHRoaXMuX3UgPSBbXSwgXG4gICAgICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAgICAgdGhpcy5hdSA9IG51bGwsIFxuICAgICAgICAvLyBGbGFnIHNldCB3aGlsZSB0aGVyZSdzIGFuIG91dHN0YW5kaW5nIEFzeW5jUXVldWUgb3BlcmF0aW9uLCB1c2VkIGZvclxuICAgICAgICAvLyBhc3NlcnRpb24gc2FuaXR5LWNoZWNrcy5cbiAgICAgICAgdGhpcy51dSA9ICExLCBcbiAgICAgICAgLy8gRW5hYmxlZCBkdXJpbmcgc2h1dGRvd24gb24gU2FmYXJpIHRvIHByZXZlbnQgZnV0dXJlIGFjY2VzcyB0byBJbmRleGVkREIuXG4gICAgICAgIHRoaXMuY3UgPSAhMSwgXG4gICAgICAgIC8vIExpc3Qgb2YgVGltZXJJZHMgdG8gZmFzdC1mb3J3YXJkIGRlbGF5cyBmb3IuXG4gICAgICAgIHRoaXMubHUgPSBbXSwgXG4gICAgICAgIC8vIEJhY2tvZmYgdGltZXIgdXNlZCB0byBzY2hlZHVsZSByZXRyaWVzIGZvciByZXRyeWFibGUgb3BlcmF0aW9uc1xuICAgICAgICB0aGlzLllvID0gbmV3IF9fUFJJVkFURV9FeHBvbmVudGlhbEJhY2tvZmYodGhpcywgXCJhc3luY19xdWV1ZV9yZXRyeVwiIC8qIFRpbWVySWQuQXN5bmNRdWV1ZVJldHJ5ICovKSwgXG4gICAgICAgIC8vIFZpc2liaWxpdHkgaGFuZGxlciB0aGF0IHRyaWdnZXJzIGFuIGltbWVkaWF0ZSByZXRyeSBvZiBhbGwgcmV0cnlhYmxlXG4gICAgICAgIC8vIG9wZXJhdGlvbnMuIE1lYW50IHRvIHNwZWVkIHVwIHJlY292ZXJ5IHdoZW4gd2UgcmVnYWluIGZpbGUgc3lzdGVtIGFjY2Vzc1xuICAgICAgICAvLyBhZnRlciBwYWdlIGNvbWVzIGludG8gZm9yZWdyb3VuZC5cbiAgICAgICAgdGhpcy5odSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBnZXREb2N1bWVudCgpO1xuICAgICAgICAgICAgZSAmJiBfX1BSSVZBVEVfbG9nRGVidWcoXCJBc3luY1F1ZXVlXCIsIFwiVmlzaWJpbGl0eSBzdGF0ZSBjaGFuZ2VkIHRvIFwiICsgZS52aXNpYmlsaXR5U3RhdGUpLCBcbiAgICAgICAgICAgIHRoaXMuWW8uV28oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZSA9IGdldERvY3VtZW50KCk7XG4gICAgICAgIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLmFkZEV2ZW50TGlzdGVuZXIgJiYgZS5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLmh1KTtcbiAgICB9XG4gICAgZ2V0IGlzU2h1dHRpbmdEb3duKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vdTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBvcGVyYXRpb24gdG8gdGhlIHF1ZXVlIHdpdGhvdXQgd2FpdGluZyBmb3IgaXQgdG8gY29tcGxldGUgKGkuZS5cbiAgICAgKiB3ZSBpZ25vcmUgdGhlIFByb21pc2UgcmVzdWx0KS5cbiAgICAgKi8gICAgZW5xdWV1ZUFuZEZvcmdldChlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgdGhpcy5lbnF1ZXVlKGUpO1xuICAgIH1cbiAgICBlbnF1ZXVlQW5kRm9yZ2V0RXZlbldoaWxlUmVzdHJpY3RlZChlKSB7XG4gICAgICAgIHRoaXMuUHUoKSwgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgdGhpcy5JdShlKTtcbiAgICB9XG4gICAgZW50ZXJSZXN0cmljdGVkTW9kZShlKSB7XG4gICAgICAgIGlmICghdGhpcy5vdSkge1xuICAgICAgICAgICAgdGhpcy5vdSA9ICEwLCB0aGlzLmN1ID0gZSB8fCAhMTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgICAgICAgdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMuaHUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVucXVldWUoZSkge1xuICAgICAgICBpZiAodGhpcy5QdSgpLCB0aGlzLm91KSBcbiAgICAgICAgLy8gUmV0dXJuIGEgUHJvbWlzZSB3aGljaCBuZXZlciByZXNvbHZlcy5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgoKSA9PiB7fSkpO1xuICAgICAgICAvLyBDcmVhdGUgYSBkZWZlcnJlZCBQcm9taXNlIHRoYXQgd2UgY2FuIHJldHVybiB0byB0aGUgY2FsbGVlLiBUaGlzXG4gICAgICAgIC8vIGFsbG93cyB1cyB0byByZXR1cm4gYSBcImhhbmdpbmcgUHJvbWlzZVwiIG9ubHkgdG8gdGhlIGNhbGxlZSBhbmQgc3RpbGxcbiAgICAgICAgLy8gYWR2YW5jZSB0aGUgcXVldWUgZXZlbiB3aGVuIHRoZSBvcGVyYXRpb24gaXMgbm90IHJ1bi5cbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IF9fUFJJVkFURV9EZWZlcnJlZDtcbiAgICAgICAgcmV0dXJuIHRoaXMuSXUoKCgpID0+IHRoaXMub3UgJiYgdGhpcy5jdSA/IFByb21pc2UucmVzb2x2ZSgpIDogKGUoKS50aGVuKHQucmVzb2x2ZSwgdC5yZWplY3QpLCBcbiAgICAgICAgdC5wcm9taXNlKSkpLnRoZW4oKCgpID0+IHQucHJvbWlzZSkpO1xuICAgIH1cbiAgICBlbnF1ZXVlUmV0cnlhYmxlKGUpIHtcbiAgICAgICAgdGhpcy5lbnF1ZXVlQW5kRm9yZ2V0KCgoKSA9PiAodGhpcy5zdS5wdXNoKGUpLCB0aGlzLlR1KCkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIG5leHQgb3BlcmF0aW9uIGZyb20gdGhlIHJldHJ5YWJsZSBxdWV1ZS4gSWYgdGhlIG9wZXJhdGlvbiBmYWlscyxcbiAgICAgKiByZXNjaGVkdWxlcyB3aXRoIGJhY2tvZmYuXG4gICAgICovICAgIGFzeW5jIFR1KCkge1xuICAgICAgICBpZiAoMCAhPT0gdGhpcy5zdS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdVswXSgpLCB0aGlzLnN1LnNoaWZ0KCksIHRoaXMuWW8ucmVzZXQoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV9fUFJJVkFURV9pc0luZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IoZSkpIHRocm93IGU7XG4gLy8gRmFpbHVyZSB3aWxsIGJlIGhhbmRsZWQgYnkgQXN5bmNRdWV1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX1BSSVZBVEVfbG9nRGVidWcoXCJBc3luY1F1ZXVlXCIsIFwiT3BlcmF0aW9uIGZhaWxlZCB3aXRoIHJldHJ5YWJsZSBlcnJvcjogXCIgKyBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3UubGVuZ3RoID4gMCAmJiBcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBhZGRpdGlvbmFsIG9wZXJhdGlvbnMsIHdlIHJlLXNjaGVkdWxlIGByZXRyeU5leHRPcCgpYC5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIHJ1biByZXRyeWFibGUgb3BlcmF0aW9ucyB0aGF0IGZhaWxlZCBkdXJpbmdcbiAgICAgICAgICAgIC8vIHRoZWlyIGluaXRpYWwgYXR0ZW1wdCBzaW5jZSB3ZSBkb24ndCBrbm93IHdoZXRoZXIgdGhleSBhcmUgYWxyZWFkeVxuICAgICAgICAgICAgLy8gZW5xdWV1ZWQuIElmLCBmb3IgZXhhbXBsZSwgYG9wMWAsIGBvcDJgLCBgb3AzYCBhcmUgZW5xdWV1ZWQgYW5kIGBvcDFgXG4gICAgICAgICAgICAvLyBuZWVkcyB0byAgYmUgcmUtcnVuLCB3ZSB3aWxsIHJ1biBgb3AxYCwgYG9wMWAsIGBvcDJgIHVzaW5nIHRoZVxuICAgICAgICAgICAgLy8gYWxyZWFkeSBlbnF1ZXVlZCBjYWxscyB0byBgcmV0cnlOZXh0T3AoKWAuIGBvcDMoKWAgd2lsbCB0aGVuIHJ1biBpbiB0aGVcbiAgICAgICAgICAgIC8vIGNhbGwgc2NoZWR1bGVkIGhlcmUuXG4gICAgICAgICAgICAvLyBTaW5jZSBgYmFja29mZkFuZFJ1bigpYCBjYW5jZWxzIGFuIGV4aXN0aW5nIGJhY2tvZmYgYW5kIHNjaGVkdWxlcyBhXG4gICAgICAgICAgICAvLyBuZXcgYmFja29mZiBvbiBldmVyeSBjYWxsLCB0aGVyZSBpcyBvbmx5IGV2ZXIgYSBzaW5nbGUgYWRkaXRpb25hbFxuICAgICAgICAgICAgLy8gb3BlcmF0aW9uIGluIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgIHRoaXMuWW8uJG8oKCgpID0+IHRoaXMuVHUoKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEl1KGUpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuaXUudGhlbigoKCkgPT4gKHRoaXMudXUgPSAhMCwgZSgpLmNhdGNoKChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXUgPSBlLCB0aGlzLnV1ID0gITE7XG4gICAgICAgICAgICBjb25zdCB0ID0gXG4gICAgICAgICAgICAvKipcbiAqIENocm9tZSBpbmNsdWRlcyBFcnJvci5tZXNzYWdlIGluIEVycm9yLnN0YWNrLiBPdGhlciBicm93c2VycyBkbyBub3QuXG4gKiBUaGlzIHJldHVybnMgZXhwZWN0ZWQgb3V0cHV0IG9mIG1lc3NhZ2UgKyBzdGFjayB3aGVuIGF2YWlsYWJsZS5cbiAqIEBwYXJhbSBlcnJvciAtIEVycm9yIG9yIEZpcmVzdG9yZUVycm9yXG4gKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9nZXRNZXNzYWdlT3JTdGFjayhlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHQgPSBlLm1lc3NhZ2UgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICBlLnN0YWNrICYmICh0ID0gZS5zdGFjay5pbmNsdWRlcyhlLm1lc3NhZ2UpID8gZS5zdGFjayA6IGUubWVzc2FnZSArIFwiXFxuXCIgKyBlLnN0YWNrKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIChlKTtcbiAgICAgICAgICAgIC8vIFJlLXRocm93IHRoZSBlcnJvciBzbyB0aGF0IHRoaXMudGFpbCBiZWNvbWVzIGEgcmVqZWN0ZWQgUHJvbWlzZSBhbmRcbiAgICAgICAgICAgIC8vIGFsbCBmdXJ0aGVyIGF0dGVtcHRzIHRvIGNoYWluICh2aWEgLnRoZW4pIHdpbGwganVzdCBzaG9ydC1jaXJjdWl0XG4gICAgICAgICAgICAvLyBhbmQgcmV0dXJuIHRoZSByZWplY3RlZCBQcm9taXNlLlxuICAgICAgICAgICAgdGhyb3cgX19QUklWQVRFX2xvZ0Vycm9yKFwiSU5URVJOQUwgVU5IQU5ETEVEIEVSUk9SOiBcIiwgdCksIGU7XG4gICAgICAgIH0pKS50aGVuKChlID0+ICh0aGlzLnV1ID0gITEsIGUpKSkpKSk7XG4gICAgICAgIHJldHVybiB0aGlzLml1ID0gdCwgdDtcbiAgICB9XG4gICAgZW5xdWV1ZUFmdGVyRGVsYXkoZSwgdCwgbikge1xuICAgICAgICB0aGlzLlB1KCksIFxuICAgICAgICAvLyBGYXN0LWZvcndhcmQgZGVsYXlzIGZvciB0aW1lcklkcyB0aGF0IGhhdmUgYmVlbiBvdmVycmlkZW4uXG4gICAgICAgIHRoaXMubHUuaW5kZXhPZihlKSA+IC0xICYmICh0ID0gMCk7XG4gICAgICAgIGNvbnN0IHIgPSBEZWxheWVkT3BlcmF0aW9uLmNyZWF0ZUFuZFNjaGVkdWxlKHRoaXMsIGUsIHQsIG4sIChlID0+IHRoaXMuRXUoZSkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3UucHVzaChyKSwgcjtcbiAgICB9XG4gICAgUHUoKSB7XG4gICAgICAgIHRoaXMuYXUgJiYgZmFpbCgpO1xuICAgIH1cbiAgICB2ZXJpZnlPcGVyYXRpb25JblByb2dyZXNzKCkge31cbiAgICAvKipcbiAgICAgKiBXYWl0cyB1bnRpbCBhbGwgY3VycmVudGx5IHF1ZXVlZCB0YXNrcyBhcmUgZmluaXNoZWQgZXhlY3V0aW5nLiBEZWxheWVkXG4gICAgICogb3BlcmF0aW9ucyBhcmUgbm90IHJ1bi5cbiAgICAgKi8gICAgYXN5bmMgZHUoKSB7XG4gICAgICAgIC8vIE9wZXJhdGlvbnMgaW4gdGhlIHF1ZXVlIHByaW9yIHRvIGRyYWluaW5nIG1heSBoYXZlIGVucXVldWVkIGFkZGl0aW9uYWxcbiAgICAgICAgLy8gb3BlcmF0aW9ucy4gS2VlcCBkcmFpbmluZyB0aGUgcXVldWUgdW50aWwgdGhlIHRhaWwgaXMgbm8gbG9uZ2VyIGFkdmFuY2VkLFxuICAgICAgICAvLyB3aGljaCBpbmRpY2F0ZXMgdGhhdCBubyBtb3JlIG5ldyBvcGVyYXRpb25zIHdlcmUgZW5xdWV1ZWQgYW5kIHRoYXQgYWxsXG4gICAgICAgIC8vIG9wZXJhdGlvbnMgd2VyZSBleGVjdXRlZC5cbiAgICAgICAgbGV0IGU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGUgPSB0aGlzLml1LCBhd2FpdCBlO1xuICAgICAgICB9IHdoaWxlIChlICE9PSB0aGlzLml1KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBEZXRlcm1pbmUgaWYgYSBkZWxheWVkIG9wZXJhdGlvbiB3aXRoIGEgcGFydGljdWxhciBUaW1lcklkXG4gICAgICogZXhpc3RzLlxuICAgICAqLyAgICBBdShlKSB7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl91KSBpZiAodC50aW1lcklkID09PSBlKSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBSdW5zIHNvbWUgb3IgYWxsIGRlbGF5ZWQgb3BlcmF0aW9ucyBlYXJseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYXN0VGltZXJJZCAtIERlbGF5ZWQgb3BlcmF0aW9ucyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoaXMgVGltZXJJZFxuICAgICAqIHdpbGwgYmUgZHJhaW5lZC4gUGFzcyBUaW1lcklkLkFsbCB0byBydW4gYWxsIGRlbGF5ZWQgb3BlcmF0aW9ucy5cbiAgICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIGFsbCBvcGVyYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICovICAgIFJ1KGUpIHtcbiAgICAgICAgLy8gTm90ZSB0aGF0IGRyYWluaW5nIG1heSBnZW5lcmF0ZSBtb3JlIGRlbGF5ZWQgb3BzLCBzbyB3ZSBkbyB0aGF0IGZpcnN0LlxuICAgICAgICByZXR1cm4gdGhpcy5kdSgpLnRoZW4oKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFJ1biBvcHMgaW4gdGhlIHNhbWUgb3JkZXIgdGhleSdkIHJ1biBpZiB0aGV5IHJhbiBuYXR1cmFsbHkuXG4gICAgICAgICAgICB0aGlzLl91LnNvcnQoKChlLCB0KSA9PiBlLnRhcmdldFRpbWVNcyAtIHQudGFyZ2V0VGltZU1zKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5fdSkgaWYgKHQuc2tpcERlbGF5KCksIFwiYWxsXCIgLyogVGltZXJJZC5BbGwgKi8gIT09IGUgJiYgdC50aW1lcklkID09PSBlKSBicmVhaztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmR1KCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBTa2lwIGFsbCBzdWJzZXF1ZW50IGRlbGF5cyBmb3IgYSB0aW1lciBpZC5cbiAgICAgKi8gICAgVnUoZSkge1xuICAgICAgICB0aGlzLmx1LnB1c2goZSk7XG4gICAgfVxuICAgIC8qKiBDYWxsZWQgb25jZSBhIERlbGF5ZWRPcGVyYXRpb24gaXMgcnVuIG9yIGNhbmNlbGVkLiAqLyAgICBFdShlKSB7XG4gICAgICAgIC8vIE5PVEU6IGluZGV4T2YgLyBzbGljZSBhcmUgTyhuKSwgYnV0IGRlbGF5ZWRPcGVyYXRpb25zIGlzIGV4cGVjdGVkIHRvIGJlIHNtYWxsLlxuICAgICAgICBjb25zdCB0ID0gdGhpcy5fdS5pbmRleE9mKGUpO1xuICAgICAgICB0aGlzLl91LnNwbGljZSh0LCAxKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9pc1BhcnRpYWxPYnNlcnZlcihlKSB7XG4gICAgLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGFuIG9iamVjdCBhbmQgY29udGFpbnMgYXQgbGVhc3Qgb25lIG9mIHRoZSBzcGVjaWZpZWRcbiAqIG1ldGhvZHMuXG4gKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX2ltcGxlbWVudHNBbnlNZXRob2RzKGUsIHQpIHtcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGUgfHwgbnVsbCA9PT0gZSkgcmV0dXJuICExO1xuICAgICAgICBjb25zdCBuID0gZTtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHQpIGlmIChlIGluIG4gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBuW2VdKSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAvKipcbiAqIFJlcHJlc2VudHMgdGhlIHRhc2sgb2YgbG9hZGluZyBhIEZpcmVzdG9yZSBidW5kbGUuIEl0IHByb3ZpZGVzIHByb2dyZXNzIG9mIGJ1bmRsZVxuICogbG9hZGluZywgYXMgd2VsbCBhcyB0YXNrIGNvbXBsZXRpb24gYW5kIGVycm9yIGV2ZW50cy5cbiAqXG4gKiBUaGUgQVBJIGlzIGNvbXBhdGlibGUgd2l0aCBgUHJvbWlzZTxMb2FkQnVuZGxlVGFza1Byb2dyZXNzPmAuXG4gKi8gKGUsIFsgXCJuZXh0XCIsIFwiZXJyb3JcIiwgXCJjb21wbGV0ZVwiIF0pO1xufVxuXG5jbGFzcyBMb2FkQnVuZGxlVGFzayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIgPSB7fSwgdGhpcy5fdGFza0NvbXBsZXRpb25SZXNvbHZlciA9IG5ldyBfX1BSSVZBVEVfRGVmZXJyZWQsIFxuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICB0YXNrU3RhdGU6IFwiUnVubmluZ1wiLFxuICAgICAgICAgICAgdG90YWxCeXRlczogMCxcbiAgICAgICAgICAgIHRvdGFsRG9jdW1lbnRzOiAwLFxuICAgICAgICAgICAgYnl0ZXNMb2FkZWQ6IDAsXG4gICAgICAgICAgICBkb2N1bWVudHNMb2FkZWQ6IDBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGZ1bmN0aW9ucyB0byBsaXN0ZW4gdG8gYnVuZGxlIGxvYWRpbmcgcHJvZ3Jlc3MgZXZlbnRzLlxuICAgICAqIEBwYXJhbSBuZXh0IC0gQ2FsbGVkIHdoZW4gdGhlcmUgaXMgYSBwcm9ncmVzcyB1cGRhdGUgZnJvbSBidW5kbGUgbG9hZGluZy4gVHlwaWNhbGx5IGBuZXh0YCBjYWxscyBvY2N1clxuICAgICAqICAgZWFjaCB0aW1lIGEgRmlyZXN0b3JlIGRvY3VtZW50IGlzIGxvYWRlZCBmcm9tIHRoZSBidW5kbGUuXG4gICAgICogQHBhcmFtIGVycm9yIC0gQ2FsbGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBidW5kbGUgbG9hZGluZy4gVGhlIHRhc2sgYWJvcnRzIGFmdGVyIHJlcG9ydGluZyB0aGVcbiAgICAgKiAgIGVycm9yLCBhbmQgdGhlcmUgc2hvdWxkIGJlIG5vIG1vcmUgdXBkYXRlcyBhZnRlciB0aGlzLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSAtIENhbGxlZCB3aGVuIHRoZSBsb2FkaW5nIHRhc2sgaXMgY29tcGxldGUuXG4gICAgICovICAgIG9uUHJvZ3Jlc3MoZSwgdCwgbikge1xuICAgICAgICB0aGlzLl9wcm9ncmVzc09ic2VydmVyID0ge1xuICAgICAgICAgICAgbmV4dDogZSxcbiAgICAgICAgICAgIGVycm9yOiB0LFxuICAgICAgICAgICAgY29tcGxldGU6IG5cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50cyB0aGUgYFByb21pc2U8TG9hZEJ1bmRsZVRhc2tQcm9ncmVzcz4uY2F0Y2hgIGludGVyZmFjZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvblJlamVjdGVkIC0gQ2FsbGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBidW5kbGUgbG9hZGluZy5cbiAgICAgKi8gICAgY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFza0NvbXBsZXRpb25SZXNvbHZlci5wcm9taXNlLmNhdGNoKGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRzIHRoZSBgUHJvbWlzZTxMb2FkQnVuZGxlVGFza1Byb2dyZXNzPi50aGVuYCBpbnRlcmZhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb25GdWxmaWxsZWQgLSBDYWxsZWQgb24gdGhlIGNvbXBsZXRpb24gb2YgdGhlIGxvYWRpbmcgdGFzayB3aXRoIGEgZmluYWwgYExvYWRCdW5kbGVUYXNrUHJvZ3Jlc3NgIHVwZGF0ZS5cbiAgICAgKiAgIFRoZSB1cGRhdGUgd2lsbCBhbHdheXMgaGF2ZSBpdHMgYHRhc2tTdGF0ZWAgc2V0IHRvIGBcIlN1Y2Nlc3NcImAuXG4gICAgICogQHBhcmFtIG9uUmVqZWN0ZWQgLSBDYWxsZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nIGJ1bmRsZSBsb2FkaW5nLlxuICAgICAqLyAgICB0aGVuKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rhc2tDb21wbGV0aW9uUmVzb2x2ZXIucHJvbWlzZS50aGVuKGUsIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyBhbGwgb2JzZXJ2ZXJzIHRoYXQgYnVuZGxlIGxvYWRpbmcgaGFzIGNvbXBsZXRlZCwgd2l0aCBhIHByb3ZpZGVkXG4gICAgICogYExvYWRCdW5kbGVUYXNrUHJvZ3Jlc3NgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovICAgIF9jb21wbGV0ZVdpdGgoZSkge1xuICAgICAgICB0aGlzLl91cGRhdGVQcm9ncmVzcyhlKSwgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlci5jb21wbGV0ZSAmJiB0aGlzLl9wcm9ncmVzc09ic2VydmVyLmNvbXBsZXRlKCksIFxuICAgICAgICB0aGlzLl90YXNrQ29tcGxldGlvblJlc29sdmVyLnJlc29sdmUoZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIGFsbCBvYnNlcnZlcnMgdGhhdCBidW5kbGUgbG9hZGluZyBoYXMgZmFpbGVkLCB3aXRoIGEgcHJvdmlkZWRcbiAgICAgKiBgRXJyb3JgIGFzIHRoZSByZWFzb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqLyAgICBfZmFpbFdpdGgoZSkge1xuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3MudGFza1N0YXRlID0gXCJFcnJvclwiLCB0aGlzLl9wcm9ncmVzc09ic2VydmVyLm5leHQgJiYgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlci5uZXh0KHRoaXMuX2xhc3RQcm9ncmVzcyksIFxuICAgICAgICB0aGlzLl9wcm9ncmVzc09ic2VydmVyLmVycm9yICYmIHRoaXMuX3Byb2dyZXNzT2JzZXJ2ZXIuZXJyb3IoZSksIHRoaXMuX3Rhc2tDb21wbGV0aW9uUmVzb2x2ZXIucmVqZWN0KGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyBhIHByb2dyZXNzIHVwZGF0ZSBvZiBsb2FkaW5nIGEgYnVuZGxlLlxuICAgICAqIEBwYXJhbSBwcm9ncmVzcyAtIFRoZSBuZXcgcHJvZ3Jlc3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqLyAgICBfdXBkYXRlUHJvZ3Jlc3MoZSkge1xuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3MgPSBlLCB0aGlzLl9wcm9ncmVzc09ic2VydmVyLm5leHQgJiYgdGhpcy5fcHJvZ3Jlc3NPYnNlcnZlci5uZXh0KGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBpbmRpY2F0ZSB0aGUgTFJVIGdhcmJhZ2UgY29sbGVjdGlvbiBzaG91bGQgYmUgZGlzYWJsZWQuXG4gKiBTZXQgdGhpcyB2YWx1ZSBhcyB0aGUgYGNhY2hlU2l6ZUJ5dGVzYCBvbiB0aGUgc2V0dGluZ3MgcGFzc2VkIHRvIHRoZVxuICoge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UuXG4gKi8gY29uc3Qgd2UgPSAtMTtcblxuLyoqXG4gKiBUaGUgQ2xvdWQgRmlyZXN0b3JlIHNlcnZpY2UgaW50ZXJmYWNlLlxuICpcbiAqIERvIG5vdCBjYWxsIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIEluc3RlYWQsIHVzZSB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uXG4gKi8gY2xhc3MgRmlyZXN0b3JlIGV4dGVuZHMgRmlyZXN0b3JlJDEge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoZSwgdCwgbiwgcikge1xuICAgICAgICBzdXBlcihlLCB0LCBuLCByKSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGl0J3MgYSB7QGxpbmsgRmlyZXN0b3JlfSBvciBGaXJlc3RvcmUgTGl0ZSBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwiZmlyZXN0b3JlXCIsIHRoaXMuX3F1ZXVlID0gZnVuY3Rpb24gX19QUklWQVRFX25ld0FzeW5jUXVldWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9Bc3luY1F1ZXVlSW1wbDtcbiAgICAgICAgfSgpLCB0aGlzLl9wZXJzaXN0ZW5jZUtleSA9IChudWxsID09IHIgPyB2b2lkIDAgOiByLm5hbWUpIHx8IFwiW0RFRkFVTFRdXCI7XG4gICAgfVxuICAgIF90ZXJtaW5hdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXJlc3RvcmVDbGllbnQgfHwgXG4gICAgICAgIC8vIFRoZSBjbGllbnQgbXVzdCBiZSBpbml0aWFsaXplZCB0byBlbnN1cmUgdGhhdCBhbGwgc3Vic2VxdWVudCBBUElcbiAgICAgICAgLy8gdXNhZ2UgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgX19QUklWQVRFX2NvbmZpZ3VyZUZpcmVzdG9yZSh0aGlzKSwgdGhpcy5fZmlyZXN0b3JlQ2xpZW50LnRlcm1pbmF0ZSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB7QGxpbmsgRmlyZXN0b3JlfSB3aXRoIHRoZSBwcm92aWRlZCBzZXR0aW5ncy5cbiAqIENhbiBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgYW55IG90aGVyIGZ1bmN0aW9uLCBpbmNsdWRpbmdcbiAqIHtAbGluayAoZ2V0RmlyZXN0b3JlOjEpfS4gSWYgdGhlIGN1c3RvbSBzZXR0aW5ncyBhcmUgZW1wdHksIHRoaXMgZnVuY3Rpb24gaXNcbiAqIGVxdWl2YWxlbnQgdG8gY2FsbGluZyB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0uXG4gKlxuICogQHBhcmFtIGFwcCAtIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gd2l0aCB3aGljaCB0aGUge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2Ugd2lsbFxuICogYmUgYXNzb2NpYXRlZC5cbiAqIEBwYXJhbSBzZXR0aW5ncyAtIEEgc2V0dGluZ3Mgb2JqZWN0IHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gZGF0YWJhc2VJZCAtIFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqIEByZXR1cm5zIEEgbmV3bHkgaW5pdGlhbGl6ZWQge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UuXG4gKi8gZnVuY3Rpb24gaW5pdGlhbGl6ZUZpcmVzdG9yZShlLCB0LCBuKSB7XG4gICAgbiB8fCAobiA9IFwiKGRlZmF1bHQpXCIpO1xuICAgIGNvbnN0IHIgPSBhcHAuX2dldFByb3ZpZGVyKGUsIFwiZmlyZXN0b3JlXCIpO1xuICAgIGlmIChyLmlzSW5pdGlhbGl6ZWQobikpIHtcbiAgICAgICAgY29uc3QgZSA9IHIuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IG5cbiAgICAgICAgfSksIGkgPSByLmdldE9wdGlvbnMobik7XG4gICAgICAgIGlmICh1dGlsLmRlZXBFcXVhbChpLCB0KSkgcmV0dXJuIGU7XG4gICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiaW5pdGlhbGl6ZUZpcmVzdG9yZSgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIHdpdGggZGlmZmVyZW50IG9wdGlvbnMuIFRvIGF2b2lkIHRoaXMgZXJyb3IsIGNhbGwgaW5pdGlhbGl6ZUZpcmVzdG9yZSgpIHdpdGggdGhlIHNhbWUgb3B0aW9ucyBhcyB3aGVuIGl0IHdhcyBvcmlnaW5hbGx5IGNhbGxlZCwgb3IgY2FsbCBnZXRGaXJlc3RvcmUoKSB0byByZXR1cm4gdGhlIGFscmVhZHkgaW5pdGlhbGl6ZWQgaW5zdGFuY2UuXCIpO1xuICAgIH1cbiAgICBpZiAodm9pZCAwICE9PSB0LmNhY2hlU2l6ZUJ5dGVzICYmIHZvaWQgMCAhPT0gdC5sb2NhbENhY2hlKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcImNhY2hlIGFuZCBjYWNoZVNpemVCeXRlcyBjYW5ub3QgYmUgc3BlY2lmaWVkIGF0IHRoZSBzYW1lIHRpbWUgYXMgY2FjaGVTaXplQnl0ZXMgd2lsbGJlIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHNwZWNpZnkgdGhlIGNhY2hlIHNpemUgaW4gdGhlIGNhY2hlIG9iamVjdFwiKTtcbiAgICBpZiAodm9pZCAwICE9PSB0LmNhY2hlU2l6ZUJ5dGVzICYmIC0xICE9PSB0LmNhY2hlU2l6ZUJ5dGVzICYmIHQuY2FjaGVTaXplQnl0ZXMgPCAxMDQ4NTc2KSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcImNhY2hlU2l6ZUJ5dGVzIG11c3QgYmUgYXQgbGVhc3QgMTA0ODU3NlwiKTtcbiAgICByZXR1cm4gci5pbml0aWFsaXplKHtcbiAgICAgICAgb3B0aW9uczogdCxcbiAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBuXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEZpcmVzdG9yZSh0LCBuKSB7XG4gICAgY29uc3QgciA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgPyB0IDogYXBwLmdldEFwcCgpLCBpID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IHQgOiBuIHx8IFwiKGRlZmF1bHQpXCIsIHMgPSBhcHAuX2dldFByb3ZpZGVyKHIsIFwiZmlyZXN0b3JlXCIpLmdldEltbWVkaWF0ZSh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlcbiAgICB9KTtcbiAgICBpZiAoIXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgIGNvbnN0IGUgPSB1dGlsLmdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydChcImZpcmVzdG9yZVwiKTtcbiAgICAgICAgZSAmJiBjb25uZWN0RmlyZXN0b3JlRW11bGF0b3IocywgLi4uZSk7XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQoZSkge1xuICAgIHJldHVybiBlLl9maXJlc3RvcmVDbGllbnQgfHwgX19QUklWQVRFX2NvbmZpZ3VyZUZpcmVzdG9yZShlKSwgZS5fZmlyZXN0b3JlQ2xpZW50LnZlcmlmeU5vdFRlcm1pbmF0ZWQoKSwgXG4gICAgZS5fZmlyZXN0b3JlQ2xpZW50O1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfY29uZmlndXJlRmlyZXN0b3JlKGUpIHtcbiAgICB2YXIgdCwgbiwgcjtcbiAgICBjb25zdCBpID0gZS5fZnJlZXplU2V0dGluZ3MoKSwgcyA9IGZ1bmN0aW9uIF9fUFJJVkFURV9tYWtlRGF0YWJhc2VJbmZvKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhYmFzZUluZm8oZSwgdCwgbiwgci5ob3N0LCByLnNzbCwgci5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nLCByLmV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZywgX19QUklWQVRFX2Nsb25lTG9uZ1BvbGxpbmdPcHRpb25zKHIuZXhwZXJpbWVudGFsTG9uZ1BvbGxpbmdPcHRpb25zKSwgci51c2VGZXRjaFN0cmVhbXMpO1xuICAgIH0oZS5fZGF0YWJhc2VJZCwgKG51bGwgPT09ICh0ID0gZS5fYXBwKSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0Lm9wdGlvbnMuYXBwSWQpIHx8IFwiXCIsIGUuX3BlcnNpc3RlbmNlS2V5LCBpKTtcbiAgICBlLl9maXJlc3RvcmVDbGllbnQgPSBuZXcgRmlyZXN0b3JlQ2xpZW50KGUuX2F1dGhDcmVkZW50aWFscywgZS5fYXBwQ2hlY2tDcmVkZW50aWFscywgZS5fcXVldWUsIHMpLCBcbiAgICAobnVsbCA9PT0gKG4gPSBpLmxvY2FsQ2FjaGUpIHx8IHZvaWQgMCA9PT0gbiA/IHZvaWQgMCA6IG4uX29mZmxpbmVDb21wb25lbnRQcm92aWRlcikgJiYgKG51bGwgPT09IChyID0gaS5sb2NhbENhY2hlKSB8fCB2b2lkIDAgPT09IHIgPyB2b2lkIDAgOiByLl9vbmxpbmVDb21wb25lbnRQcm92aWRlcikgJiYgKGUuX2ZpcmVzdG9yZUNsaWVudC5fdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlciA9IHtcbiAgICAgICAgX29mZmxpbmVLaW5kOiBpLmxvY2FsQ2FjaGUua2luZCxcbiAgICAgICAgX29mZmxpbmU6IGkubG9jYWxDYWNoZS5fb2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyLFxuICAgICAgICBfb25saW5lOiBpLmxvY2FsQ2FjaGUuX29ubGluZUNvbXBvbmVudFByb3ZpZGVyXG4gICAgfSk7XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5hYmxlIHBlcnNpc3RlbnQgc3RvcmFnZSwgaWYgcG9zc2libGUuXG4gKlxuICogT24gZmFpbHVyZSwgYGVuYWJsZUluZGV4ZWREYlBlcnNpc3RlbmNlKClgIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlIG9yXG4gKiB0aHJvdyBhbiBleGNlcHRpb24uIFRoZXJlIGFyZSBzZXZlcmFsIHJlYXNvbnMgd2h5IHRoaXMgY2FuIGZhaWwsIHdoaWNoIGNhbiBiZVxuICogaWRlbnRpZmllZCBieSB0aGUgYGNvZGVgIG9uIHRoZSBlcnJvci5cbiAqXG4gKiAgICogZmFpbGVkLXByZWNvbmRpdGlvbjogVGhlIGFwcCBpcyBhbHJlYWR5IG9wZW4gaW4gYW5vdGhlciBicm93c2VyIHRhYi5cbiAqICAgKiB1bmltcGxlbWVudGVkOiBUaGUgYnJvd3NlciBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgb2ZmbGluZSBwZXJzaXN0ZW5jZVxuICogICAgIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCBldmVuIGFmdGVyIGEgZmFpbHVyZSwgdGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHdpbGwgcmVtYWluXG4gKiB1c2FibGUsIGhvd2V2ZXIgb2ZmbGluZSBwZXJzaXN0ZW5jZSB3aWxsIGJlIGRpc2FibGVkLlxuICpcbiAqIE5vdGU6IGBlbmFibGVJbmRleGVkRGJQZXJzaXN0ZW5jZSgpYCBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYW55IG90aGVyIGZ1bmN0aW9uc1xuICogKG90aGVyIHRoYW4ge0BsaW5rIGluaXRpYWxpemVGaXJlc3RvcmV9LCB7QGxpbmsgKGdldEZpcmVzdG9yZToxKX0gb3JcbiAqIHtAbGluayBjbGVhckluZGV4ZWREYlBlcnNpc3RlbmNlfS5cbiAqXG4gKiBQZXJzaXN0ZW5jZSBjYW5ub3QgYmUgdXNlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIGZpcmVzdG9yZSAtIFRoZSB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSB0byBlbmFibGUgcGVyc2lzdGVuY2UgZm9yLlxuICogQHBhcmFtIHBlcnNpc3RlbmNlU2V0dGluZ3MgLSBPcHRpb25hbCBzZXR0aW5ncyBvYmplY3QgdG8gY29uZmlndXJlXG4gKiBwZXJzaXN0ZW5jZS5cbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVwcmVzZW50cyBzdWNjZXNzZnVsbHkgZW5hYmxpbmcgcGVyc2lzdGVudCBzdG9yYWdlLlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gSW5zdGVhZCwgc2V0XG4gKiBgRmlyZXN0b3JlU2V0dGluZ3MubG9jYWxDYWNoZWAgdG8gYW4gaW5zdGFuY2Ugb2YgYFBlcnNpc3RlbnRMb2NhbENhY2hlYCB0b1xuICogdHVybiBvbiBJbmRleGVkRGIgY2FjaGUuIENhbGxpbmcgdGhpcyBmdW5jdGlvbiB3aGVuIGBGaXJlc3RvcmVTZXR0aW5ncy5sb2NhbENhY2hlYFxuICogaXMgYWxyZWFkeSBzcGVjaWZpZWQgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24uXG4gKi8gZnVuY3Rpb24gZW5hYmxlSW5kZXhlZERiUGVyc2lzdGVuY2UoZSwgdCkge1xuICAgIF9fUFJJVkFURV92ZXJpZnlOb3RJbml0aWFsaXplZChlID0gX19QUklWQVRFX2Nhc3QoZSwgRmlyZXN0b3JlKSk7XG4gICAgY29uc3QgbiA9IGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQoZSk7XG4gICAgaWYgKG4uX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiU0RLIGNhY2hlIGlzIGFscmVhZHkgc3BlY2lmaWVkLlwiKTtcbiAgICBfX1BSSVZBVEVfbG9nV2FybihcImVuYWJsZUluZGV4ZWREYlBlcnNpc3RlbmNlKCkgd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUsIHlvdSBjYW4gdXNlIGBGaXJlc3RvcmVTZXR0aW5ncy5jYWNoZWAgaW5zdGVhZC5cIik7XG4gICAgY29uc3QgciA9IGUuX2ZyZWV6ZVNldHRpbmdzKCksIGkgPSBuZXcgT25saW5lQ29tcG9uZW50UHJvdmlkZXI7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9zZXRQZXJzaXN0ZW5jZVByb3ZpZGVycyhuLCBpLCBuZXcgX19QUklWQVRFX0luZGV4ZWREYk9mZmxpbmVDb21wb25lbnRQcm92aWRlcihpLCByLmNhY2hlU2l6ZUJ5dGVzLCBudWxsID09IHQgPyB2b2lkIDAgOiB0LmZvcmNlT3duZXJzaGlwKSk7XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5hYmxlIG11bHRpLXRhYiBwZXJzaXN0ZW50IHN0b3JhZ2UsIGlmIHBvc3NpYmxlLiBJZiBlbmFibGVkXG4gKiBhY3Jvc3MgYWxsIHRhYnMsIGFsbCBvcGVyYXRpb25zIHNoYXJlIGFjY2VzcyB0byBsb2NhbCBwZXJzaXN0ZW5jZSwgaW5jbHVkaW5nXG4gKiBzaGFyZWQgZXhlY3V0aW9uIG9mIHF1ZXJpZXMgYW5kIGxhdGVuY3ktY29tcGVuc2F0ZWQgbG9jYWwgZG9jdW1lbnQgdXBkYXRlc1xuICogYWNyb3NzIGFsbCBjb25uZWN0ZWQgaW5zdGFuY2VzLlxuICpcbiAqIE9uIGZhaWx1cmUsIGBlbmFibGVNdWx0aVRhYkluZGV4ZWREYlBlcnNpc3RlbmNlKClgIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlIG9yXG4gKiB0aHJvdyBhbiBleGNlcHRpb24uIFRoZXJlIGFyZSBzZXZlcmFsIHJlYXNvbnMgd2h5IHRoaXMgY2FuIGZhaWwsIHdoaWNoIGNhbiBiZVxuICogaWRlbnRpZmllZCBieSB0aGUgYGNvZGVgIG9uIHRoZSBlcnJvci5cbiAqXG4gKiAgICogZmFpbGVkLXByZWNvbmRpdGlvbjogVGhlIGFwcCBpcyBhbHJlYWR5IG9wZW4gaW4gYW5vdGhlciBicm93c2VyIHRhYiBhbmRcbiAqICAgICBtdWx0aS10YWIgaXMgbm90IGVuYWJsZWQuXG4gKiAgICogdW5pbXBsZW1lbnRlZDogVGhlIGJyb3dzZXIgaXMgaW5jb21wYXRpYmxlIHdpdGggdGhlIG9mZmxpbmUgcGVyc2lzdGVuY2VcbiAqICAgICBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBOb3RlIHRoYXQgZXZlbiBhZnRlciBhIGZhaWx1cmUsIHRoZSB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSB3aWxsIHJlbWFpblxuICogdXNhYmxlLCBob3dldmVyIG9mZmxpbmUgcGVyc2lzdGVuY2Ugd2lsbCBiZSBkaXNhYmxlZC5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gVGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHRvIGVuYWJsZSBwZXJzaXN0ZW5jZSBmb3IuXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlcHJlc2VudHMgc3VjY2Vzc2Z1bGx5IGVuYWJsaW5nIHBlcnNpc3RlbnRcbiAqIHN0b3JhZ2UuXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBJbnN0ZWFkLCBzZXRcbiAqIGBGaXJlc3RvcmVTZXR0aW5ncy5sb2NhbENhY2hlYCB0byBhbiBpbnN0YW5jZSBvZiBgUGVyc2lzdGVudExvY2FsQ2FjaGVgIHRvXG4gKiB0dXJuIG9uIGluZGV4ZWRkYiBjYWNoZS4gQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIHdoZW4gYEZpcmVzdG9yZVNldHRpbmdzLmxvY2FsQ2FjaGVgXG4gKiBpcyBhbHJlYWR5IHNwZWNpZmllZCB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbi5cbiAqLyBmdW5jdGlvbiBlbmFibGVNdWx0aVRhYkluZGV4ZWREYlBlcnNpc3RlbmNlKGUpIHtcbiAgICBfX1BSSVZBVEVfdmVyaWZ5Tm90SW5pdGlhbGl6ZWQoZSA9IF9fUFJJVkFURV9jYXN0KGUsIEZpcmVzdG9yZSkpO1xuICAgIGNvbnN0IHQgPSBlbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkKGUpO1xuICAgIGlmICh0Ll91bmluaXRpYWxpemVkQ29tcG9uZW50c1Byb3ZpZGVyKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5GQUlMRURfUFJFQ09ORElUSU9OLCBcIlNESyBjYWNoZSBpcyBhbHJlYWR5IHNwZWNpZmllZC5cIik7XG4gICAgX19QUklWQVRFX2xvZ1dhcm4oXCJlbmFibGVNdWx0aVRhYkluZGV4ZWREYlBlcnNpc3RlbmNlKCkgd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUsIHlvdSBjYW4gdXNlIGBGaXJlc3RvcmVTZXR0aW5ncy5jYWNoZWAgaW5zdGVhZC5cIik7XG4gICAgY29uc3QgbiA9IGUuX2ZyZWV6ZVNldHRpbmdzKCksIHIgPSBuZXcgT25saW5lQ29tcG9uZW50UHJvdmlkZXI7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9zZXRQZXJzaXN0ZW5jZVByb3ZpZGVycyh0LCByLCBuZXcgX19QUklWQVRFX011bHRpVGFiT2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyKHIsIG4uY2FjaGVTaXplQnl0ZXMpKTtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYm90aCB0aGUgYE9mZmxpbmVDb21wb25lbnRQcm92aWRlcmAgYW5kIGBPbmxpbmVDb21wb25lbnRQcm92aWRlcmAuXG4gKiBJZiB0aGUgb3BlcmF0aW9uIGZhaWxzIHdpdGggYSByZWNvdmVyYWJsZSBlcnJvciAoc2VlXG4gKiBgY2FuUmVjb3ZlckZyb21JbmRleGVkRGJFcnJvcigpYCBiZWxvdyksIHRoZSByZXR1cm5lZCBQcm9taXNlIGlzIHJlamVjdGVkXG4gKiBidXQgdGhlIGNsaWVudCByZW1haW5zIHVzYWJsZS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfc2V0UGVyc2lzdGVuY2VQcm92aWRlcnMoZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSBuZXcgX19QUklWQVRFX0RlZmVycmVkO1xuICAgIHJldHVybiBlLmFzeW5jUXVldWUuZW5xdWV1ZSgoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgX19QUklWQVRFX3NldE9mZmxpbmVDb21wb25lbnRQcm92aWRlcihlLCBuKSwgYXdhaXQgX19QUklWQVRFX3NldE9ubGluZUNvbXBvbmVudFByb3ZpZGVyKGUsIHQpLCBcbiAgICAgICAgICAgIHIucmVzb2x2ZSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gZTtcbiAgICAgICAgICAgIGlmICghX19QUklWQVRFX2NhbkZhbGxiYWNrRnJvbUluZGV4ZWREYkVycm9yKHQpKSB0aHJvdyB0O1xuICAgICAgICAgICAgX19QUklWQVRFX2xvZ1dhcm4oXCJFcnJvciBlbmFibGluZyBpbmRleGVkZGIgY2FjaGUuIEZhbGxpbmcgYmFjayB0byBtZW1vcnkgY2FjaGU6IFwiICsgdCksIFxuICAgICAgICAgICAgci5yZWplY3QodCk7XG4gICAgICAgIH1cbiAgICB9KSkudGhlbigoKCkgPT4gci5wcm9taXNlKSk7XG59XG5cbi8qKlxuICogQ2xlYXJzIHRoZSBwZXJzaXN0ZW50IHN0b3JhZ2UuIFRoaXMgaW5jbHVkZXMgcGVuZGluZyB3cml0ZXMgYW5kIGNhY2hlZFxuICogZG9jdW1lbnRzLlxuICpcbiAqIE11c3QgYmUgY2FsbGVkIHdoaWxlIHRoZSB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSBpcyBub3Qgc3RhcnRlZCAoYWZ0ZXIgdGhlIGFwcCBpc1xuICogdGVybWluYXRlZCBvciB3aGVuIHRoZSBhcHAgaXMgZmlyc3QgaW5pdGlhbGl6ZWQpLiBPbiBzdGFydHVwLCB0aGlzIGZ1bmN0aW9uXG4gKiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgb3RoZXIgZnVuY3Rpb25zIChvdGhlciB0aGFuIHtAbGlua1xuICogaW5pdGlhbGl6ZUZpcmVzdG9yZX0gb3Ige0BsaW5rIChnZXRGaXJlc3RvcmU6MSl9KSkuIElmIHRoZSB7QGxpbmsgRmlyZXN0b3JlfVxuICogaW5zdGFuY2UgaXMgc3RpbGwgcnVubmluZywgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBlcnJvciBjb2RlXG4gKiBvZiBgZmFpbGVkLXByZWNvbmRpdGlvbmAuXG4gKlxuICogTm90ZTogYGNsZWFySW5kZXhlZERiUGVyc2lzdGVuY2UoKWAgaXMgcHJpbWFyaWx5IGludGVuZGVkIHRvIGhlbHAgd3JpdGVcbiAqIHJlbGlhYmxlIHRlc3RzIHRoYXQgdXNlIENsb3VkIEZpcmVzdG9yZS4gSXQgdXNlcyBhbiBlZmZpY2llbnQgbWVjaGFuaXNtIGZvclxuICogZHJvcHBpbmcgZXhpc3RpbmcgZGF0YSBidXQgZG9lcyBub3QgYXR0ZW1wdCB0byBzZWN1cmVseSBvdmVyd3JpdGUgb3JcbiAqIG90aGVyd2lzZSBtYWtlIGNhY2hlZCBkYXRhIHVucmVjb3ZlcmFibGUuIEZvciBhcHBsaWNhdGlvbnMgdGhhdCBhcmUgc2Vuc2l0aXZlXG4gKiB0byB0aGUgZGlzY2xvc3VyZSBvZiBjYWNoZWQgZGF0YSBpbiBiZXR3ZWVuIHVzZXIgc2Vzc2lvbnMsIHdlIHN0cm9uZ2x5XG4gKiByZWNvbW1lbmQgbm90IGVuYWJsaW5nIHBlcnNpc3RlbmNlIGF0IGFsbC5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gVGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHRvIGNsZWFyIHBlcnNpc3RlbmNlIGZvci5cbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgcGVyc2lzdGVudCBzdG9yYWdlIGlzXG4gKiBjbGVhcmVkLiBPdGhlcndpc2UsIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggYW4gZXJyb3IuXG4gKi8gZnVuY3Rpb24gY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZShlKSB7XG4gICAgaWYgKGUuX2luaXRpYWxpemVkICYmICFlLl90ZXJtaW5hdGVkKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5GQUlMRURfUFJFQ09ORElUSU9OLCBcIlBlcnNpc3RlbmNlIGNhbiBvbmx5IGJlIGNsZWFyZWQgYmVmb3JlIGEgRmlyZXN0b3JlIGluc3RhbmNlIGlzIGluaXRpYWxpemVkIG9yIGFmdGVyIGl0IGlzIHRlcm1pbmF0ZWQuXCIpO1xuICAgIGNvbnN0IHQgPSBuZXcgX19QUklWQVRFX0RlZmVycmVkO1xuICAgIHJldHVybiBlLl9xdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0RXZlbldoaWxlUmVzdHJpY3RlZCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgYXN5bmMgZnVuY3Rpb24gX19QUklWQVRFX2luZGV4ZWREYkNsZWFyUGVyc2lzdGVuY2UoZSkge1xuICAgICAgICAgICAgICAgIGlmICghX19QUklWQVRFX1NpbXBsZURiLkQoKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlICsgXCJtYWluXCI7XG4gICAgICAgICAgICAgICAgYXdhaXQgX19QUklWQVRFX1NpbXBsZURiLmRlbGV0ZSh0KTtcbiAgICAgICAgICAgIH0oX19QUklWQVRFX2luZGV4ZWREYlN0b3JhZ2VQcmVmaXgoZS5fZGF0YWJhc2VJZCwgZS5fcGVyc2lzdGVuY2VLZXkpKSwgdC5yZXNvbHZlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHQucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfSkpLCB0LnByb21pc2U7XG59XG5cbi8qKlxuICogV2FpdHMgdW50aWwgYWxsIGN1cnJlbnRseSBwZW5kaW5nIHdyaXRlcyBmb3IgdGhlIGFjdGl2ZSB1c2VyIGhhdmUgYmVlblxuICogYWNrbm93bGVkZ2VkIGJ5IHRoZSBiYWNrZW5kLlxuICpcbiAqIFRoZSByZXR1cm5lZCBwcm9taXNlIHJlc29sdmVzIGltbWVkaWF0ZWx5IGlmIHRoZXJlIGFyZSBubyBvdXRzdGFuZGluZyB3cml0ZXMuXG4gKiBPdGhlcndpc2UsIHRoZSBwcm9taXNlIHdhaXRzIGZvciBhbGwgcHJldmlvdXNseSBpc3N1ZWQgd3JpdGVzIChpbmNsdWRpbmdcbiAqIHRob3NlIHdyaXR0ZW4gaW4gYSBwcmV2aW91cyBhcHAgc2Vzc2lvbiksIGJ1dCBpdCBkb2VzIG5vdCB3YWl0IGZvciB3cml0ZXNcbiAqIHRoYXQgd2VyZSBhZGRlZCBhZnRlciB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkLiBJZiB5b3Ugd2FudCB0byB3YWl0IGZvclxuICogYWRkaXRpb25hbCB3cml0ZXMsIGNhbGwgYHdhaXRGb3JQZW5kaW5nV3JpdGVzKClgIGFnYWluLlxuICpcbiAqIEFueSBvdXRzdGFuZGluZyBgd2FpdEZvclBlbmRpbmdXcml0ZXMoKWAgcHJvbWlzZXMgYXJlIHJlamVjdGVkIGR1cmluZyB1c2VyXG4gKiBjaGFuZ2VzLlxuICpcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHdoaWNoIHJlc29sdmVzIHdoZW4gYWxsIGN1cnJlbnRseSBwZW5kaW5nIHdyaXRlcyBoYXZlIGJlZW5cbiAqIGFja25vd2xlZGdlZCBieSB0aGUgYmFja2VuZC5cbiAqLyBmdW5jdGlvbiB3YWl0Rm9yUGVuZGluZ1dyaXRlcyhlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRXYWl0Rm9yUGVuZGluZ1dyaXRlcyhlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgX19QUklWQVRFX0RlZmVycmVkO1xuICAgICAgICByZXR1cm4gZS5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IF9fUFJJVkFURV9zeW5jRW5naW5lUmVnaXN0ZXJQZW5kaW5nV3JpdGVzQ2FsbGJhY2soYXdhaXQgX19QUklWQVRFX2dldFN5bmNFbmdpbmUoZSksIHQpKSksIFxuICAgICAgICB0LnByb21pc2U7XG4gICAgfShlbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkKGUgPSBfX1BSSVZBVEVfY2FzdChlLCBGaXJlc3RvcmUpKSk7XG59XG5cbi8qKlxuICogUmUtZW5hYmxlcyB1c2Ugb2YgdGhlIG5ldHdvcmsgZm9yIHRoaXMge0BsaW5rIEZpcmVzdG9yZX0gaW5zdGFuY2UgYWZ0ZXIgYSBwcmlvclxuICogY2FsbCB0byB7QGxpbmsgZGlzYWJsZU5ldHdvcmt9LlxuICpcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgaXMgcmVzb2x2ZWQgb25jZSB0aGUgbmV0d29yayBoYXMgYmVlbiBlbmFibGVkLlxuICovIGZ1bmN0aW9uIGVuYWJsZU5ldHdvcmsoZSkge1xuICAgIHJldHVybiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50RW5hYmxlTmV0d29yayhlbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkKGUgPSBfX1BSSVZBVEVfY2FzdChlLCBGaXJlc3RvcmUpKSk7XG59XG5cbi8qKlxuICogRGlzYWJsZXMgbmV0d29yayB1c2FnZSBmb3IgdGhpcyBpbnN0YW5jZS4gSXQgY2FuIGJlIHJlLWVuYWJsZWQgdmlhIHtAbGlua1xuICogZW5hYmxlTmV0d29ya30uIFdoaWxlIHRoZSBuZXR3b3JrIGlzIGRpc2FibGVkLCBhbnkgc25hcHNob3QgbGlzdGVuZXJzLFxuICogYGdldERvYygpYCBvciBgZ2V0RG9jcygpYCBjYWxscyB3aWxsIHJldHVybiByZXN1bHRzIGZyb20gY2FjaGUsIGFuZCBhbnkgd3JpdGVcbiAqIG9wZXJhdGlvbnMgd2lsbCBiZSBxdWV1ZWQgdW50aWwgdGhlIG5ldHdvcmsgaXMgcmVzdG9yZWQuXG4gKlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCBpcyByZXNvbHZlZCBvbmNlIHRoZSBuZXR3b3JrIGhhcyBiZWVuIGRpc2FibGVkLlxuICovIGZ1bmN0aW9uIGRpc2FibGVOZXR3b3JrKGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudERpc2FibGVOZXR3b3JrKGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQoZSA9IF9fUFJJVkFURV9jYXN0KGUsIEZpcmVzdG9yZSkpKTtcbn1cblxuLyoqXG4gKiBUZXJtaW5hdGVzIHRoZSBwcm92aWRlZCB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZS5cbiAqXG4gKiBBZnRlciBjYWxsaW5nIGB0ZXJtaW5hdGUoKWAgb25seSB0aGUgYGNsZWFySW5kZXhlZERiUGVyc2lzdGVuY2UoKWAgZnVuY3Rpb25cbiAqIG1heSBiZSB1c2VkLiBBbnkgb3RoZXIgZnVuY3Rpb24gd2lsbCB0aHJvdyBhIGBGaXJlc3RvcmVFcnJvcmAuXG4gKlxuICogVG8gcmVzdGFydCBhZnRlciB0ZXJtaW5hdGlvbiwgY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEZpcmViYXNlRmlyZXN0b3JlIHdpdGhcbiAqIHtAbGluayAoZ2V0RmlyZXN0b3JlOjEpfS5cbiAqXG4gKiBUZXJtaW5hdGlvbiBkb2VzIG5vdCBjYW5jZWwgYW55IHBlbmRpbmcgd3JpdGVzLCBhbmQgYW55IHByb21pc2VzIHRoYXQgYXJlXG4gKiBhd2FpdGluZyBhIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciB3aWxsIG5vdCBiZSByZXNvbHZlZC4gSWYgeW91IGhhdmVcbiAqIHBlcnNpc3RlbmNlIGVuYWJsZWQsIHRoZSBuZXh0IHRpbWUgeW91IHN0YXJ0IHRoaXMgaW5zdGFuY2UsIGl0IHdpbGwgcmVzdW1lXG4gKiBzZW5kaW5nIHRoZXNlIHdyaXRlcyB0byB0aGUgc2VydmVyLlxuICpcbiAqIE5vdGU6IFVuZGVyIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCBjYWxsaW5nIGB0ZXJtaW5hdGUoKWAgaXMgbm90IHJlcXVpcmVkLiBUaGlzXG4gKiBmdW5jdGlvbiBpcyB1c2VmdWwgb25seSB3aGVuIHlvdSB3YW50IHRvIGZvcmNlIHRoaXMgaW5zdGFuY2UgdG8gcmVsZWFzZSBhbGxcbiAqIG9mIGl0cyByZXNvdXJjZXMgb3IgaW4gY29tYmluYXRpb24gd2l0aCBgY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZSgpYCB0b1xuICogZW5zdXJlIHRoYXQgYWxsIGxvY2FsIHN0YXRlIGlzIGRlc3Ryb3llZCBiZXR3ZWVuIHRlc3QgcnVucy5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IGlzIHJlc29sdmVkIHdoZW4gdGhlIGluc3RhbmNlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseVxuICogdGVybWluYXRlZC5cbiAqLyBmdW5jdGlvbiB0ZXJtaW5hdGUoZSkge1xuICAgIHJldHVybiBhcHAuX3JlbW92ZVNlcnZpY2VJbnN0YW5jZShlLmFwcCwgXCJmaXJlc3RvcmVcIiwgZS5fZGF0YWJhc2VJZC5kYXRhYmFzZSksIGUuX2RlbGV0ZSgpO1xufVxuXG4vKipcbiAqIExvYWRzIGEgRmlyZXN0b3JlIGJ1bmRsZSBpbnRvIHRoZSBsb2NhbCBjYWNoZS5cbiAqXG4gKiBAcGFyYW0gZmlyZXN0b3JlIC0gVGhlIHtAbGluayBGaXJlc3RvcmV9IGluc3RhbmNlIHRvIGxvYWQgYnVuZGxlcyBmb3IuXG4gKiBAcGFyYW0gYnVuZGxlRGF0YSAtIEFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGJ1bmRsZSB0byBiZSBsb2FkZWQuIFZhbGlkXG4gKiBvYmplY3RzIGFyZSBgQXJyYXlCdWZmZXJgLCBgUmVhZGFibGVTdHJlYW08VWludDhBcnJheT5gIG9yIGBzdHJpbmdgLlxuICpcbiAqIEByZXR1cm5zIEEgYExvYWRCdW5kbGVUYXNrYCBvYmplY3QsIHdoaWNoIG5vdGlmaWVzIGNhbGxlcnMgd2l0aCBwcm9ncmVzc1xuICogdXBkYXRlcywgYW5kIGNvbXBsZXRpb24gb3IgZXJyb3IgZXZlbnRzLiBJdCBjYW4gYmUgdXNlZCBhcyBhXG4gKiBgUHJvbWlzZTxMb2FkQnVuZGxlVGFza1Byb2dyZXNzPmAuXG4gKi8gZnVuY3Rpb24gbG9hZEJ1bmRsZShlLCB0KSB7XG4gICAgY29uc3QgbiA9IGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQoZSA9IF9fUFJJVkFURV9jYXN0KGUsIEZpcmVzdG9yZSkpLCByID0gbmV3IExvYWRCdW5kbGVUYXNrO1xuICAgIHJldHVybiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50TG9hZEJ1bmRsZShuLCBlLl9kYXRhYmFzZUlkLCB0LCByKSwgcjtcbn1cblxuLyoqXG4gKiBSZWFkcyBhIEZpcmVzdG9yZSB7QGxpbmsgUXVlcnl9IGZyb20gbG9jYWwgY2FjaGUsIGlkZW50aWZpZWQgYnkgdGhlIGdpdmVuXG4gKiBuYW1lLlxuICpcbiAqIFRoZSBuYW1lZCBxdWVyaWVzIGFyZSBwYWNrYWdlZCAgaW50byBidW5kbGVzIG9uIHRoZSBzZXJ2ZXIgc2lkZSAoYWxvbmdcbiAqIHdpdGggcmVzdWx0aW5nIGRvY3VtZW50cyksIGFuZCBsb2FkZWQgdG8gbG9jYWwgY2FjaGUgdXNpbmcgYGxvYWRCdW5kbGVgLiBPbmNlXG4gKiBpbiBsb2NhbCBjYWNoZSwgdXNlIHRoaXMgbWV0aG9kIHRvIGV4dHJhY3QgYSB7QGxpbmsgUXVlcnl9IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIGZpcmVzdG9yZSAtIFRoZSB7QGxpbmsgRmlyZXN0b3JlfSBpbnN0YW5jZSB0byByZWFkIHRoZSBxdWVyeSBmcm9tLlxuICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcXVlcnkuXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IGlzIHJlc29sdmVkIHdpdGggdGhlIFF1ZXJ5IG9yIGBudWxsYC5cbiAqLyBmdW5jdGlvbiBuYW1lZFF1ZXJ5KGUsIHQpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudEdldE5hbWVkUXVlcnkoZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZChlID0gX19QUklWQVRFX2Nhc3QoZSwgRmlyZXN0b3JlKSksIHQpLnRoZW4oKHQgPT4gdCA/IG5ldyBRdWVyeShlLCBudWxsLCB0LnF1ZXJ5KSA6IG51bGwpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3ZlcmlmeU5vdEluaXRpYWxpemVkKGUpIHtcbiAgICBpZiAoZS5faW5pdGlhbGl6ZWQgfHwgZS5fdGVybWluYXRlZCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJGaXJlc3RvcmUgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIGFuZCBwZXJzaXN0ZW5jZSBjYW4gbm8gbG9uZ2VyIGJlIGVuYWJsZWQuIFlvdSBjYW4gb25seSBlbmFibGUgcGVyc2lzdGVuY2UgYmVmb3JlIGNhbGxpbmcgYW55IG90aGVyIG1ldGhvZHMgb24gYSBGaXJlc3RvcmUgb2JqZWN0LlwiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYWdncmVnYXRpb24gdGhhdCBjYW4gYmUgcGVyZm9ybWVkIGJ5IEZpcmVzdG9yZS5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuY2xhc3MgQWdncmVnYXRlRmllbGQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBZ2dyZWdhdGVGaWVsZDxUPlxuICAgICAqIEBwYXJhbSBhZ2dyZWdhdGVUeXBlIFNwZWNpZmllcyB0aGUgdHlwZSBvZiBhZ2dyZWdhdGlvbiBvcGVyYXRpb24gdG8gcGVyZm9ybS5cbiAgICAgKiBAcGFyYW0gX2ludGVybmFsRmllbGRQYXRoIE9wdGlvbmFsbHkgc3BlY2lmaWVzIHRoZSBmaWVsZCB0aGF0IGlzIGFnZ3JlZ2F0ZWQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZSA9IFwiY291bnRcIiwgdCkge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbEZpZWxkUGF0aCA9IHQsIFxuICAgICAgICAvKiogQSB0eXBlIHN0cmluZyB0byB1bmlxdWVseSBpZGVudGlmeSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcy4gKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJBZ2dyZWdhdGVGaWVsZFwiLCB0aGlzLmFnZ3JlZ2F0ZVR5cGUgPSBlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGUgcmVzdWx0cyBvZiBleGVjdXRpbmcgYW4gYWdncmVnYXRpb24gcXVlcnkuXG4gKi8gY2xhc3MgQWdncmVnYXRlUXVlcnlTbmFwc2hvdCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuKSB7XG4gICAgICAgIHRoaXMuX3VzZXJEYXRhV3JpdGVyID0gdCwgdGhpcy5fZGF0YSA9IG4sIFxuICAgICAgICAvKiogQSB0eXBlIHN0cmluZyB0byB1bmlxdWVseSBpZGVudGlmeSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcy4gKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJBZ2dyZWdhdGVRdWVyeVNuYXBzaG90XCIsIHRoaXMucXVlcnkgPSBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIHRoZSBhZ2dyZWdhdGlvbnMgcGVyZm9ybWVkIG92ZXIgdGhlIHVuZGVybHlpbmdcbiAgICAgKiBxdWVyeS5cbiAgICAgKlxuICAgICAqIFRoZSBrZXlzIG9mIHRoZSByZXR1cm5lZCBvYmplY3Qgd2lsbCBiZSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAgICAgKiBgQWdncmVnYXRlU3BlY2Agb2JqZWN0IHNwZWNpZmllZCB0byB0aGUgYWdncmVnYXRpb24gbWV0aG9kLCBhbmQgdGhlIHZhbHVlc1xuICAgICAqIHdpbGwgYmUgdGhlIGNvcnJlc3BvbmRpbmcgYWdncmVnYXRpb24gcmVzdWx0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHJlc3VsdHMgb2YgdGhlIGFnZ3JlZ2F0aW9ucyBwZXJmb3JtZWQgb3ZlciB0aGUgdW5kZXJseWluZ1xuICAgICAqIHF1ZXJ5LlxuICAgICAqLyAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXNlckRhdGFXcml0ZXIuY29udmVydE9iamVjdE1hcCh0aGlzLl9kYXRhKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGltbXV0YWJsZSBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGFycmF5IG9mIGJ5dGVzLlxuICovIGNsYXNzIEJ5dGVzIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5fYnl0ZVN0cmluZyA9IGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYEJ5dGVzYCBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gQmFzZTY0IHN0cmluZywgY29udmVydGluZyBpdCB0b1xuICAgICAqIGJ5dGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhc2U2NCAtIFRoZSBCYXNlNjQgc3RyaW5nIHVzZWQgdG8gY3JlYXRlIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKi8gICAgc3RhdGljIGZyb21CYXNlNjRTdHJpbmcoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCeXRlcyhCeXRlU3RyaW5nLmZyb21CYXNlNjRTdHJpbmcoZSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIkZhaWxlZCB0byBjb25zdHJ1Y3QgZGF0YSBmcm9tIEJhc2U2NCBzdHJpbmc6IFwiICsgZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBgQnl0ZXNgIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBVaW50OEFycmF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFycmF5IC0gVGhlIFVpbnQ4QXJyYXkgdXNlZCB0byBjcmVhdGUgdGhlIGBCeXRlc2Agb2JqZWN0LlxuICAgICAqLyAgICBzdGF0aWMgZnJvbVVpbnQ4QXJyYXkoZSkge1xuICAgICAgICByZXR1cm4gbmV3IEJ5dGVzKEJ5dGVTdHJpbmcuZnJvbVVpbnQ4QXJyYXkoZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIGJ5dGVzIGFzIGEgQmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIEJhc2U2NC1lbmNvZGVkIHN0cmluZyBjcmVhdGVkIGZyb20gdGhlIGBCeXRlc2Agb2JqZWN0LlxuICAgICAqLyAgICB0b0Jhc2U2NCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J5dGVTdHJpbmcudG9CYXNlNjQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyBieXRlcyBpbiBhIG5ldyBgVWludDhBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgVWludDhBcnJheSBjcmVhdGVkIGZyb20gdGhlIGBCeXRlc2Agb2JqZWN0LlxuICAgICAqLyAgICB0b1VpbnQ4QXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ieXRlU3RyaW5nLnRvVWludDhBcnJheSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKi8gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIkJ5dGVzKGJhc2U2NDogXCIgKyB0aGlzLnRvQmFzZTY0KCkgKyBcIilcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYEJ5dGVzYCBvYmplY3QgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdGhlciAtIFRoZSBgQnl0ZXNgIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3QuXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGBCeXRlc2Agb2JqZWN0IGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICovICAgIGlzRXF1YWwoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnl0ZVN0cmluZy5pc0VxdWFsKGUuX2J5dGVTdHJpbmcpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBgRmllbGRQYXRoYCByZWZlcnMgdG8gYSBmaWVsZCBpbiBhIGRvY3VtZW50LiBUaGUgcGF0aCBtYXkgY29uc2lzdCBvZiBhXG4gKiBzaW5nbGUgZmllbGQgbmFtZSAocmVmZXJyaW5nIHRvIGEgdG9wLWxldmVsIGZpZWxkIGluIHRoZSBkb2N1bWVudCksIG9yIGFcbiAqIGxpc3Qgb2YgZmllbGQgbmFtZXMgKHJlZmVycmluZyB0byBhIG5lc3RlZCBmaWVsZCBpbiB0aGUgZG9jdW1lbnQpLlxuICpcbiAqIENyZWF0ZSBhIGBGaWVsZFBhdGhgIGJ5IHByb3ZpZGluZyBmaWVsZCBuYW1lcy4gSWYgbW9yZSB0aGFuIG9uZSBmaWVsZFxuICogbmFtZSBpcyBwcm92aWRlZCwgdGhlIHBhdGggd2lsbCBwb2ludCB0byBhIG5lc3RlZCBmaWVsZCBpbiBhIGRvY3VtZW50LlxuICovIGNsYXNzIEZpZWxkUGF0aCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBGaWVsZFBhdGhgIGZyb20gdGhlIHByb3ZpZGVkIGZpZWxkIG5hbWVzLiBJZiBtb3JlIHRoYW4gb25lIGZpZWxkXG4gICAgICogbmFtZSBpcyBwcm92aWRlZCwgdGhlIHBhdGggd2lsbCBwb2ludCB0byBhIG5lc3RlZCBmaWVsZCBpbiBhIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpZWxkTmFtZXMgLSBBIGxpc3Qgb2YgZmllbGQgbmFtZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoLi4uZSkge1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IGUubGVuZ3RoOyArK3QpIGlmICgwID09PSBlW3RdLmxlbmd0aCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIGZpZWxkIG5hbWUgYXQgYXJndW1lbnQgJChpICsgMSkuIEZpZWxkIG5hbWVzIG11c3Qgbm90IGJlIGVtcHR5LlwiKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxQYXRoID0gbmV3IEZpZWxkUGF0aCQxKGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgRmllbGRQYXRoYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIC0gVGhlIGBGaWVsZFBhdGhgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgYEZpZWxkUGF0aGAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKi8gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbFBhdGguaXNFcXVhbChlLl9pbnRlcm5hbFBhdGgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3BlY2lhbCBzZW50aW5lbCBgRmllbGRQYXRoYCB0byByZWZlciB0byB0aGUgSUQgb2YgYSBkb2N1bWVudC5cbiAqIEl0IGNhbiBiZSB1c2VkIGluIHF1ZXJpZXMgdG8gc29ydCBvciBmaWx0ZXIgYnkgdGhlIGRvY3VtZW50IElELlxuICovIGZ1bmN0aW9uIGRvY3VtZW50SWQoKSB7XG4gICAgcmV0dXJuIG5ldyBGaWVsZFBhdGgoXCJfX25hbWVfX1wiKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogU2VudGluZWwgdmFsdWVzIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiB3cml0aW5nIGRvY3VtZW50IGZpZWxkcyB3aXRoIGBzZXQoKWBcbiAqIG9yIGB1cGRhdGUoKWAuXG4gKi8gY2xhc3MgRmllbGRWYWx1ZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIF9tZXRob2ROYW1lIC0gVGhlIHB1YmxpYyBBUEkgZW5kcG9pbnQgdGhhdCByZXR1cm5zIHRoaXMgY2xhc3MuXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgdGhpcy5fbWV0aG9kTmFtZSA9IGU7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBpbW11dGFibGUgb2JqZWN0IHJlcHJlc2VudGluZyBhIGdlb2dyYXBoaWMgbG9jYXRpb24gaW4gRmlyZXN0b3JlLiBUaGVcbiAqIGxvY2F0aW9uIGlzIHJlcHJlc2VudGVkIGFzIGxhdGl0dWRlL2xvbmdpdHVkZSBwYWlyLlxuICpcbiAqIExhdGl0dWRlIHZhbHVlcyBhcmUgaW4gdGhlIHJhbmdlIG9mIFstOTAsIDkwXS5cbiAqIExvbmdpdHVkZSB2YWx1ZXMgYXJlIGluIHRoZSByYW5nZSBvZiBbLTE4MCwgMTgwXS5cbiAqLyBjbGFzcyBHZW9Qb2ludCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbW11dGFibGUgYEdlb1BvaW50YCBvYmplY3Qgd2l0aCB0aGUgcHJvdmlkZWQgbGF0aXR1ZGUgYW5kXG4gICAgICogbG9uZ2l0dWRlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gbGF0aXR1ZGUgLSBUaGUgbGF0aXR1ZGUgYXMgbnVtYmVyIGJldHdlZW4gLTkwIGFuZCA5MC5cbiAgICAgKiBAcGFyYW0gbG9uZ2l0dWRlIC0gVGhlIGxvbmdpdHVkZSBhcyBudW1iZXIgYmV0d2VlbiAtMTgwIGFuZCAxODAuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBpZiAoIWlzRmluaXRlKGUpIHx8IGUgPCAtOTAgfHwgZSA+IDkwKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIkxhdGl0dWRlIG11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAtOTAgYW5kIDkwLCBidXQgd2FzOiBcIiArIGUpO1xuICAgICAgICBpZiAoIWlzRmluaXRlKHQpIHx8IHQgPCAtMTgwIHx8IHQgPiAxODApIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIFwiTG9uZ2l0dWRlIG11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAtMTgwIGFuZCAxODAsIGJ1dCB3YXM6IFwiICsgdCk7XG4gICAgICAgIHRoaXMuX2xhdCA9IGUsIHRoaXMuX2xvbmcgPSB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGF0aXR1ZGUgb2YgdGhpcyBgR2VvUG9pbnRgIGluc3RhbmNlLlxuICAgICAqLyAgICBnZXQgbGF0aXR1ZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBsb25naXR1ZGUgb2YgdGhpcyBgR2VvUG9pbnRgIGluc3RhbmNlLlxuICAgICAqLyAgICBnZXQgbG9uZ2l0dWRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYEdlb1BvaW50YCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIC0gVGhlIGBHZW9Qb2ludGAgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhpcyBgR2VvUG9pbnRgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICovICAgIGlzRXF1YWwoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF0ID09PSBlLl9sYXQgJiYgdGhpcy5fbG9uZyA9PT0gZS5fbG9uZztcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEdlb1BvaW50LiAqLyAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYXRpdHVkZTogdGhpcy5fbGF0LFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiB0aGlzLl9sb25nXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFjdHVhbGx5IHByaXZhdGUgdG8gSlMgY29uc3VtZXJzIG9mIG91ciBBUEksIHNvIHRoaXMgZnVuY3Rpb24gaXMgcHJlZml4ZWRcbiAgICAgKiB3aXRoIGFuIHVuZGVyc2NvcmUuXG4gICAgICovICAgIF9jb21wYXJlVG8oZSkge1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3ByaW1pdGl2ZUNvbXBhcmF0b3IodGhpcy5fbGF0LCBlLl9sYXQpIHx8IF9fUFJJVkFURV9wcmltaXRpdmVDb21wYXJhdG9yKHRoaXMuX2xvbmcsIGUuX2xvbmcpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgU2UgPSAvXl9fLipfXyQvO1xuXG4vKiogVGhlIHJlc3VsdCBvZiBwYXJzaW5nIGRvY3VtZW50IGRhdGEgKGUuZy4gZm9yIGEgc2V0RGF0YSBjYWxsKS4gKi8gY2xhc3MgUGFyc2VkU2V0RGF0YSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbikge1xuICAgICAgICB0aGlzLmRhdGEgPSBlLCB0aGlzLmZpZWxkTWFzayA9IHQsIHRoaXMuZmllbGRUcmFuc2Zvcm1zID0gbjtcbiAgICB9XG4gICAgdG9NdXRhdGlvbihlLCB0KSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLmZpZWxkTWFzayA/IG5ldyBfX1BSSVZBVEVfUGF0Y2hNdXRhdGlvbihlLCB0aGlzLmRhdGEsIHRoaXMuZmllbGRNYXNrLCB0LCB0aGlzLmZpZWxkVHJhbnNmb3JtcykgOiBuZXcgX19QUklWQVRFX1NldE11dGF0aW9uKGUsIHRoaXMuZGF0YSwgdCwgdGhpcy5maWVsZFRyYW5zZm9ybXMpO1xuICAgIH1cbn1cblxuLyoqIFRoZSByZXN1bHQgb2YgcGFyc2luZyBcInVwZGF0ZVwiIGRhdGEgKGkuZS4gZm9yIGFuIHVwZGF0ZURhdGEgY2FsbCkuICovIGNsYXNzIFBhcnNlZFVwZGF0ZURhdGEge1xuICAgIGNvbnN0cnVjdG9yKGUsIFxuICAgIC8vIFRoZSBmaWVsZE1hc2sgZG9lcyBub3QgaW5jbHVkZSBkb2N1bWVudCB0cmFuc2Zvcm1zLlxuICAgIHQsIG4pIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZSwgdGhpcy5maWVsZE1hc2sgPSB0LCB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IG47XG4gICAgfVxuICAgIHRvTXV0YXRpb24oZSwgdCkge1xuICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9QYXRjaE11dGF0aW9uKGUsIHRoaXMuZGF0YSwgdGhpcy5maWVsZE1hc2ssIHQsIHRoaXMuZmllbGRUcmFuc2Zvcm1zKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9pc1dyaXRlKGUpIHtcbiAgICBzd2l0Y2ggKGUpIHtcbiAgICAgIGNhc2UgMCAvKiBVc2VyRGF0YVNvdXJjZS5TZXQgKi8gOlxuIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgICBjYXNlIDIgLyogVXNlckRhdGFTb3VyY2UuTWVyZ2VTZXQgKi8gOlxuIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgICBjYXNlIDEgLyogVXNlckRhdGFTb3VyY2UuVXBkYXRlICovIDpcbiAgICAgICAgcmV0dXJuICEwO1xuXG4gICAgICBjYXNlIDMgLyogVXNlckRhdGFTb3VyY2UuQXJndW1lbnQgKi8gOlxuICAgICAgY2FzZSA0IC8qIFVzZXJEYXRhU291cmNlLkFycmF5QXJndW1lbnQgKi8gOlxuICAgICAgICByZXR1cm4gITE7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IGZhaWwoKTtcbiAgICB9XG59XG5cbi8qKiBBIFwiY29udGV4dFwiIG9iamVjdCBwYXNzZWQgYXJvdW5kIHdoaWxlIHBhcnNpbmcgdXNlciBkYXRhLiAqLyBjbGFzcyBfX1BSSVZBVEVfUGFyc2VDb250ZXh0SW1wbCB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBQYXJzZUNvbnRleHQgd2l0aCB0aGUgZ2l2ZW4gc291cmNlIGFuZCBwYXRoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNldHRpbmdzIC0gVGhlIHNldHRpbmdzIGZvciB0aGUgcGFyc2VyLlxuICAgICAqIEBwYXJhbSBkYXRhYmFzZUlkIC0gVGhlIGRhdGFiYXNlIElEIG9mIHRoZSBGaXJlc3RvcmUgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgLSBUaGUgc2VyaWFsaXplciB0byB1c2UgdG8gZ2VuZXJhdGUgdGhlIFZhbHVlIHByb3RvLlxuICAgICAqIEBwYXJhbSBpZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzIC0gV2hldGhlciB0byBpZ25vcmUgdW5kZWZpbmVkIHByb3BlcnRpZXNcbiAgICAgKiByYXRoZXIgdGhhbiB0aHJvdy5cbiAgICAgKiBAcGFyYW0gZmllbGRUcmFuc2Zvcm1zIC0gQSBtdXRhYmxlIGxpc3Qgb2YgZmllbGQgdHJhbnNmb3JtcyBlbmNvdW50ZXJlZFxuICAgICAqIHdoaWxlIHBhcnNpbmcgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIGZpZWxkTWFzayAtIEEgbXV0YWJsZSBsaXN0IG9mIGZpZWxkIHBhdGhzIGVuY291bnRlcmVkIHdoaWxlIHBhcnNpbmdcbiAgICAgKiB0aGUgZGF0YS5cbiAgICAgKlxuICAgICAqIFRPRE8oYi8zNDg3MTEzMSk6IFdlIGRvbid0IHN1cHBvcnQgYXJyYXkgcGF0aHMgcmlnaHQgbm93LCBzbyBwYXRoIGNhbiBiZVxuICAgICAqIG51bGwgdG8gaW5kaWNhdGUgdGhlIGNvbnRleHQgcmVwcmVzZW50cyBhbnkgbG9jYXRpb24gd2l0aGluIGFuIGFycmF5IChpblxuICAgICAqIHdoaWNoIGNhc2UgY2VydGFpbiBmZWF0dXJlcyB3aWxsIG5vdCB3b3JrIGFuZCBlcnJvcnMgd2lsbCBiZSBzb21ld2hhdFxuICAgICAqIGNvbXByb21pc2VkKS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByLCBpLCBzKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBlLCB0aGlzLmRhdGFiYXNlSWQgPSB0LCB0aGlzLnNlcmlhbGl6ZXIgPSBuLCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgPSByLCBcbiAgICAgICAgLy8gTWlub3IgaGFjazogSWYgZmllbGRUcmFuc2Zvcm1zIGlzIHVuZGVmaW5lZCwgd2UgYXNzdW1lIHRoaXMgaXMgYW5cbiAgICAgICAgLy8gZXh0ZXJuYWwgY2FsbCBhbmQgd2UgbmVlZCB0byB2YWxpZGF0ZSB0aGUgZW50aXJlIHBhdGguXG4gICAgICAgIHZvaWQgMCA9PT0gaSAmJiB0aGlzLm11KCksIHRoaXMuZmllbGRUcmFuc2Zvcm1zID0gaSB8fCBbXSwgdGhpcy5maWVsZE1hc2sgPSBzIHx8IFtdO1xuICAgIH1cbiAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MucGF0aDtcbiAgICB9XG4gICAgZ2V0IGZ1KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5mdTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBuZXcgY29udGV4dCB3aXRoIHRoZSBzcGVjaWZpZWQgc2V0dGluZ3Mgb3ZlcndyaXR0ZW4uICovICAgIGd1KGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfUGFyc2VDb250ZXh0SW1wbChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc2V0dGluZ3MpLCBlKSwgdGhpcy5kYXRhYmFzZUlkLCB0aGlzLnNlcmlhbGl6ZXIsIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcywgdGhpcy5maWVsZFRyYW5zZm9ybXMsIHRoaXMuZmllbGRNYXNrKTtcbiAgICB9XG4gICAgcHUoZSkge1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgY29uc3QgbiA9IG51bGwgPT09ICh0ID0gdGhpcy5wYXRoKSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LmNoaWxkKGUpLCByID0gdGhpcy5ndSh7XG4gICAgICAgICAgICBwYXRoOiBuLFxuICAgICAgICAgICAgeXU6ICExXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gci53dShlKSwgcjtcbiAgICB9XG4gICAgU3UoZSkge1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgY29uc3QgbiA9IG51bGwgPT09ICh0ID0gdGhpcy5wYXRoKSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LmNoaWxkKGUpLCByID0gdGhpcy5ndSh7XG4gICAgICAgICAgICBwYXRoOiBuLFxuICAgICAgICAgICAgeXU6ICExXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gci5tdSgpLCByO1xuICAgIH1cbiAgICBidShlKSB7XG4gICAgICAgIC8vIFRPRE8oYi8zNDg3MTEzMSk6IFdlIGRvbid0IHN1cHBvcnQgYXJyYXkgcGF0aHMgcmlnaHQgbm93OyBzbyBtYWtlIHBhdGhcbiAgICAgICAgLy8gdW5kZWZpbmVkLlxuICAgICAgICByZXR1cm4gdGhpcy5ndSh7XG4gICAgICAgICAgICBwYXRoOiB2b2lkIDAsXG4gICAgICAgICAgICB5dTogITBcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIER1KGUpIHtcbiAgICAgICAgcmV0dXJuIF9fUFJJVkFURV9jcmVhdGVFcnJvcihlLCB0aGlzLnNldHRpbmdzLm1ldGhvZE5hbWUsIHRoaXMuc2V0dGluZ3MuQ3UgfHwgITEsIHRoaXMucGF0aCwgdGhpcy5zZXR0aW5ncy52dSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zICd0cnVlJyBpZiAnZmllbGRQYXRoJyB3YXMgdHJhdmVyc2VkIHdoZW4gY3JlYXRpbmcgdGhpcyBjb250ZXh0LiAqLyAgICBjb250YWlucyhlKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMuZmllbGRNYXNrLmZpbmQoKHQgPT4gZS5pc1ByZWZpeE9mKHQpKSkgfHwgdm9pZCAwICE9PSB0aGlzLmZpZWxkVHJhbnNmb3Jtcy5maW5kKCh0ID0+IGUuaXNQcmVmaXhPZih0LmZpZWxkKSkpO1xuICAgIH1cbiAgICBtdSgpIHtcbiAgICAgICAgLy8gVE9ETyhiLzM0ODcxMTMxKTogUmVtb3ZlIG51bGwgY2hlY2sgb25jZSB3ZSBoYXZlIHByb3BlciBwYXRocyBmb3IgZmllbGRzXG4gICAgICAgIC8vIHdpdGhpbiBhcnJheXMuXG4gICAgICAgIGlmICh0aGlzLnBhdGgpIGZvciAobGV0IGUgPSAwOyBlIDwgdGhpcy5wYXRoLmxlbmd0aDsgZSsrKSB0aGlzLnd1KHRoaXMucGF0aC5nZXQoZSkpO1xuICAgIH1cbiAgICB3dShlKSB7XG4gICAgICAgIGlmICgwID09PSBlLmxlbmd0aCkgdGhyb3cgdGhpcy5EdShcIkRvY3VtZW50IGZpZWxkcyBtdXN0IG5vdCBiZSBlbXB0eVwiKTtcbiAgICAgICAgaWYgKF9fUFJJVkFURV9pc1dyaXRlKHRoaXMuZnUpICYmIFNlLnRlc3QoZSkpIHRocm93IHRoaXMuRHUoJ0RvY3VtZW50IGZpZWxkcyBjYW5ub3QgYmVnaW4gYW5kIGVuZCB3aXRoIFwiX19cIicpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgZm9yIHBhcnNpbmcgcmF3IHVzZXIgaW5wdXQgKHByb3ZpZGVkIHZpYSB0aGUgQVBJKSBpbnRvIGludGVybmFsIG1vZGVsXG4gKiBjbGFzc2VzLlxuICovIGNsYXNzIF9fUFJJVkFURV9Vc2VyRGF0YVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IoZSwgdCwgbikge1xuICAgICAgICB0aGlzLmRhdGFiYXNlSWQgPSBlLCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgPSB0LCB0aGlzLnNlcmlhbGl6ZXIgPSBuIHx8IF9fUFJJVkFURV9uZXdTZXJpYWxpemVyKGUpO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyB0b3AtbGV2ZWwgcGFyc2UgY29udGV4dC4gKi8gICAgRnUoZSwgdCwgbiwgciA9ICExKSB7XG4gICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX1BhcnNlQ29udGV4dEltcGwoe1xuICAgICAgICAgICAgZnU6IGUsXG4gICAgICAgICAgICBtZXRob2ROYW1lOiB0LFxuICAgICAgICAgICAgdnU6IG4sXG4gICAgICAgICAgICBwYXRoOiBGaWVsZFBhdGgkMS5lbXB0eVBhdGgoKSxcbiAgICAgICAgICAgIHl1OiAhMSxcbiAgICAgICAgICAgIEN1OiByXG4gICAgICAgIH0sIHRoaXMuZGF0YWJhc2VJZCwgdGhpcy5zZXJpYWxpemVyLCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX25ld1VzZXJEYXRhUmVhZGVyKGUpIHtcbiAgICBjb25zdCB0ID0gZS5fZnJlZXplU2V0dGluZ3MoKSwgbiA9IF9fUFJJVkFURV9uZXdTZXJpYWxpemVyKGUuX2RhdGFiYXNlSWQpO1xuICAgIHJldHVybiBuZXcgX19QUklWQVRFX1VzZXJEYXRhUmVhZGVyKGUuX2RhdGFiYXNlSWQsICEhdC5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzLCBuKTtcbn1cblxuLyoqIFBhcnNlIGRvY3VtZW50IGRhdGEgZnJvbSBhIHNldCgpIGNhbGwuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9wYXJzZVNldERhdGEoZSwgdCwgbiwgciwgaSwgcyA9IHt9KSB7XG4gICAgY29uc3QgbyA9IGUuRnUocy5tZXJnZSB8fCBzLm1lcmdlRmllbGRzID8gMiAvKiBVc2VyRGF0YVNvdXJjZS5NZXJnZVNldCAqLyA6IDAgLyogVXNlckRhdGFTb3VyY2UuU2V0ICovICwgdCwgbiwgaSk7XG4gICAgX19QUklWQVRFX3ZhbGlkYXRlUGxhaW5PYmplY3QoXCJEYXRhIG11c3QgYmUgYW4gb2JqZWN0LCBidXQgaXQgd2FzOlwiLCBvLCByKTtcbiAgICBjb25zdCBfID0gX19QUklWQVRFX3BhcnNlT2JqZWN0KHIsIG8pO1xuICAgIGxldCBhLCB1O1xuICAgIGlmIChzLm1lcmdlKSBhID0gbmV3IEZpZWxkTWFzayhvLmZpZWxkTWFzayksIHUgPSBvLmZpZWxkVHJhbnNmb3JtczsgZWxzZSBpZiAocy5tZXJnZUZpZWxkcykge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgciBvZiBzLm1lcmdlRmllbGRzKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Bcmd1bWVudCQxKHQsIHIsIG4pO1xuICAgICAgICAgICAgaWYgKCFvLmNvbnRhaW5zKGkpKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgRmllbGQgJyR7aX0nIGlzIHNwZWNpZmllZCBpbiB5b3VyIGZpZWxkIG1hc2sgYnV0IG1pc3NpbmcgZnJvbSB5b3VyIGlucHV0IGRhdGEuYCk7XG4gICAgICAgICAgICBfX1BSSVZBVEVfZmllbGRNYXNrQ29udGFpbnMoZSwgaSkgfHwgZS5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIGEgPSBuZXcgRmllbGRNYXNrKGUpLCB1ID0gby5maWVsZFRyYW5zZm9ybXMuZmlsdGVyKChlID0+IGEuY292ZXJzKGUuZmllbGQpKSk7XG4gICAgfSBlbHNlIGEgPSBudWxsLCB1ID0gby5maWVsZFRyYW5zZm9ybXM7XG4gICAgcmV0dXJuIG5ldyBQYXJzZWRTZXREYXRhKG5ldyBPYmplY3RWYWx1ZShfKSwgYSwgdSk7XG59XG5cbmNsYXNzIF9fUFJJVkFURV9EZWxldGVGaWVsZFZhbHVlSW1wbCBleHRlbmRzIEZpZWxkVmFsdWUge1xuICAgIF90b0ZpZWxkVHJhbnNmb3JtKGUpIHtcbiAgICAgICAgaWYgKDIgLyogVXNlckRhdGFTb3VyY2UuTWVyZ2VTZXQgKi8gIT09IGUuZnUpIHRocm93IDEgLyogVXNlckRhdGFTb3VyY2UuVXBkYXRlICovID09PSBlLmZ1ID8gZS5EdShgJHt0aGlzLl9tZXRob2ROYW1lfSgpIGNhbiBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIGxldmVsIG9mIHlvdXIgdXBkYXRlIGRhdGFgKSA6IGUuRHUoYCR7dGhpcy5fbWV0aG9kTmFtZX0oKSBjYW5ub3QgYmUgdXNlZCB3aXRoIHNldCgpIHVubGVzcyB5b3UgcGFzcyB7bWVyZ2U6dHJ1ZX1gKTtcbiAgICAgICAgLy8gTm8gdHJhbnNmb3JtIHRvIGFkZCBmb3IgYSBkZWxldGUsIGJ1dCB3ZSBuZWVkIHRvIGFkZCBpdCB0byBvdXJcbiAgICAgICAgLy8gZmllbGRNYXNrIHNvIGl0IGdldHMgZGVsZXRlZC5cbiAgICAgICAgcmV0dXJuIGUuZmllbGRNYXNrLnB1c2goZS5wYXRoKSwgbnVsbDtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgX19QUklWQVRFX0RlbGV0ZUZpZWxkVmFsdWVJbXBsO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2hpbGQgY29udGV4dCBmb3IgcGFyc2luZyBTZXJpYWxpemFibGVGaWVsZFZhbHVlcy5cbiAqXG4gKiBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIGNhbGxpbmcgYFBhcnNlQ29udGV4dC5jb250ZXh0V2l0aGAgYmVjYXVzZSBpdCBrZWVwc1xuICogdGhlIGZpZWxkVHJhbnNmb3JtcyBhbmQgZmllbGRNYXNrIHNlcGFyYXRlLlxuICpcbiAqIFRoZSBjcmVhdGVkIGNvbnRleHQgaGFzIGl0cyBgZGF0YVNvdXJjZWAgc2V0IHRvIGBVc2VyRGF0YVNvdXJjZS5Bcmd1bWVudGAuXG4gKiBBbHRob3VnaCB0aGVzZSB2YWx1ZXMgYXJlIHVzZWQgd2l0aCB3cml0ZXMsIGFueSBlbGVtZW50cyBpbiB0aGVzZSBGaWVsZFZhbHVlc1xuICogYXJlIG5vdCBjb25zaWRlcmVkIHdyaXRlcyBzaW5jZSB0aGV5IGNhbm5vdCBjb250YWluIGFueSBGaWVsZFZhbHVlIHNlbnRpbmVscyxcbiAqIGV0Yy5cbiAqXG4gKiBAcGFyYW0gZmllbGRWYWx1ZSAtIFRoZSBzZW50aW5lbCBGaWVsZFZhbHVlIGZvciB3aGljaCB0byBjcmVhdGUgYSBjaGlsZFxuICogICAgIGNvbnRleHQuXG4gKiBAcGFyYW0gY29udGV4dCAtIFRoZSBwYXJlbnQgY29udGV4dC5cbiAqIEBwYXJhbSBhcnJheUVsZW1lbnQgLSBXaGV0aGVyIG9yIG5vdCB0aGUgRmllbGRWYWx1ZSBoYXMgYW4gYXJyYXkuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZVNlbnRpbmVsQ2hpbGRDb250ZXh0KGUsIHQsIG4pIHtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9QYXJzZUNvbnRleHRJbXBsKHtcbiAgICAgICAgZnU6IDMgLyogVXNlckRhdGFTb3VyY2UuQXJndW1lbnQgKi8gLFxuICAgICAgICB2dTogdC5zZXR0aW5ncy52dSxcbiAgICAgICAgbWV0aG9kTmFtZTogZS5fbWV0aG9kTmFtZSxcbiAgICAgICAgeXU6IG5cbiAgICB9LCB0LmRhdGFiYXNlSWQsIHQuc2VyaWFsaXplciwgdC5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzKTtcbn1cblxuY2xhc3MgX19QUklWQVRFX1NlcnZlclRpbWVzdGFtcEZpZWxkVmFsdWVJbXBsIGV4dGVuZHMgRmllbGRWYWx1ZSB7XG4gICAgX3RvRmllbGRUcmFuc2Zvcm0oZSkge1xuICAgICAgICByZXR1cm4gbmV3IEZpZWxkVHJhbnNmb3JtKGUucGF0aCwgbmV3IF9fUFJJVkFURV9TZXJ2ZXJUaW1lc3RhbXBUcmFuc2Zvcm0pO1xuICAgIH1cbiAgICBpc0VxdWFsKGUpIHtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wRmllbGRWYWx1ZUltcGw7XG4gICAgfVxufVxuXG5jbGFzcyBfX1BSSVZBVEVfQXJyYXlVbmlvbkZpZWxkVmFsdWVJbXBsIGV4dGVuZHMgRmllbGRWYWx1ZSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcihlKSwgdGhpcy5NdSA9IHQ7XG4gICAgfVxuICAgIF90b0ZpZWxkVHJhbnNmb3JtKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9jcmVhdGVTZW50aW5lbENoaWxkQ29udGV4dCh0aGlzLCBlLCBcbiAgICAgICAgLyphcnJheT0qLyAhMCksIG4gPSB0aGlzLk11Lm1hcCgoZSA9PiBfX1BSSVZBVEVfcGFyc2VEYXRhKGUsIHQpKSksIHIgPSBuZXcgX19QUklWQVRFX0FycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24obik7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRUcmFuc2Zvcm0oZS5wYXRoLCByKTtcbiAgICB9XG4gICAgaXNFcXVhbChlKSB7XG4gICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgX19QUklWQVRFX0FycmF5VW5pb25GaWVsZFZhbHVlSW1wbCAmJiB1dGlsLmRlZXBFcXVhbCh0aGlzLk11LCBlLk11KTtcbiAgICB9XG59XG5cbmNsYXNzIF9fUFJJVkFURV9BcnJheVJlbW92ZUZpZWxkVmFsdWVJbXBsIGV4dGVuZHMgRmllbGRWYWx1ZSB7XG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcihlKSwgdGhpcy5NdSA9IHQ7XG4gICAgfVxuICAgIF90b0ZpZWxkVHJhbnNmb3JtKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9jcmVhdGVTZW50aW5lbENoaWxkQ29udGV4dCh0aGlzLCBlLCBcbiAgICAgICAgLyphcnJheT0qLyAhMCksIG4gPSB0aGlzLk11Lm1hcCgoZSA9PiBfX1BSSVZBVEVfcGFyc2VEYXRhKGUsIHQpKSksIHIgPSBuZXcgX19QUklWQVRFX0FycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uKG4pO1xuICAgICAgICByZXR1cm4gbmV3IEZpZWxkVHJhbnNmb3JtKGUucGF0aCwgcik7XG4gICAgfVxuICAgIGlzRXF1YWwoZSkge1xuICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIF9fUFJJVkFURV9BcnJheVJlbW92ZUZpZWxkVmFsdWVJbXBsICYmIHV0aWwuZGVlcEVxdWFsKHRoaXMuTXUsIGUuTXUpO1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX051bWVyaWNJbmNyZW1lbnRGaWVsZFZhbHVlSW1wbCBleHRlbmRzIEZpZWxkVmFsdWUge1xuICAgIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICAgICAgc3VwZXIoZSksIHRoaXMueHUgPSB0O1xuICAgIH1cbiAgICBfdG9GaWVsZFRyYW5zZm9ybShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgX19QUklWQVRFX051bWVyaWNJbmNyZW1lbnRUcmFuc2Zvcm1PcGVyYXRpb24oZS5zZXJpYWxpemVyLCB0b051bWJlcihlLnNlcmlhbGl6ZXIsIHRoaXMueHUpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFRyYW5zZm9ybShlLnBhdGgsIHQpO1xuICAgIH1cbiAgICBpc0VxdWFsKGUpIHtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBfX1BSSVZBVEVfTnVtZXJpY0luY3JlbWVudEZpZWxkVmFsdWVJbXBsICYmIHRoaXMueHUgPT09IGUueHU7XG4gICAgfVxufVxuXG4vKiogUGFyc2UgdXBkYXRlIGRhdGEgZnJvbSBhbiB1cGRhdGUoKSBjYWxsLiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfcGFyc2VVcGRhdGVEYXRhKGUsIHQsIG4sIHIpIHtcbiAgICBjb25zdCBpID0gZS5GdSgxIC8qIFVzZXJEYXRhU291cmNlLlVwZGF0ZSAqLyAsIHQsIG4pO1xuICAgIF9fUFJJVkFURV92YWxpZGF0ZVBsYWluT2JqZWN0KFwiRGF0YSBtdXN0IGJlIGFuIG9iamVjdCwgYnV0IGl0IHdhczpcIiwgaSwgcik7XG4gICAgY29uc3QgcyA9IFtdLCBvID0gT2JqZWN0VmFsdWUuZW1wdHkoKTtcbiAgICBmb3JFYWNoKHIsICgoZSwgcikgPT4ge1xuICAgICAgICBjb25zdCBfID0gX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Eb3RTZXBhcmF0ZWRTdHJpbmcodCwgZSwgbik7XG4gICAgICAgIC8vIEZvciBDb21wYXQgdHlwZXMsIHdlIGhhdmUgdG8gXCJleHRyYWN0XCIgdGhlIHVuZGVybHlpbmcgdHlwZXMgYmVmb3JlXG4gICAgICAgIC8vIHBlcmZvcm1pbmcgdmFsaWRhdGlvbi5cbiAgICAgICAgICAgICAgICByID0gdXRpbC5nZXRNb2R1bGFySW5zdGFuY2Uocik7XG4gICAgICAgIGNvbnN0IGEgPSBpLlN1KF8pO1xuICAgICAgICBpZiAociBpbnN0YW5jZW9mIF9fUFJJVkFURV9EZWxldGVGaWVsZFZhbHVlSW1wbCkgXG4gICAgICAgIC8vIEFkZCBpdCB0byB0aGUgZmllbGQgbWFzaywgYnV0IGRvbid0IGFkZCBhbnl0aGluZyB0byB1cGRhdGVEYXRhLlxuICAgICAgICBzLnB1c2goXyk7IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZSA9IF9fUFJJVkFURV9wYXJzZURhdGEociwgYSk7XG4gICAgICAgICAgICBudWxsICE9IGUgJiYgKHMucHVzaChfKSwgby5zZXQoXywgZSkpO1xuICAgICAgICB9XG4gICAgfSkpO1xuICAgIGNvbnN0IF8gPSBuZXcgRmllbGRNYXNrKHMpO1xuICAgIHJldHVybiBuZXcgUGFyc2VkVXBkYXRlRGF0YShvLCBfLCBpLmZpZWxkVHJhbnNmb3Jtcyk7XG59XG5cbi8qKiBQYXJzZSB1cGRhdGUgZGF0YSBmcm9tIGEgbGlzdCBvZiBmaWVsZC92YWx1ZSBhcmd1bWVudHMuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9wYXJzZVVwZGF0ZVZhcmFyZ3MoZSwgdCwgbiwgciwgaSwgcykge1xuICAgIGNvbnN0IG8gPSBlLkZ1KDEgLyogVXNlckRhdGFTb3VyY2UuVXBkYXRlICovICwgdCwgbiksIF8gPSBbIF9fUFJJVkFURV9maWVsZFBhdGhGcm9tQXJndW1lbnQkMSh0LCByLCBuKSBdLCBhID0gWyBpIF07XG4gICAgaWYgKHMubGVuZ3RoICUgMiAhPSAwKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgRnVuY3Rpb24gJHt0fSgpIG5lZWRzIHRvIGJlIGNhbGxlZCB3aXRoIGFuIGV2ZW4gbnVtYmVyIG9mIGFyZ3VtZW50cyB0aGF0IGFsdGVybmF0ZSBiZXR3ZWVuIGZpZWxkIG5hbWVzIGFuZCB2YWx1ZXMuYCk7XG4gICAgZm9yIChsZXQgZSA9IDA7IGUgPCBzLmxlbmd0aDsgZSArPSAyKSBfLnB1c2goX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Bcmd1bWVudCQxKHQsIHNbZV0pKSwgXG4gICAgYS5wdXNoKHNbZSArIDFdKTtcbiAgICBjb25zdCB1ID0gW10sIGMgPSBPYmplY3RWYWx1ZS5lbXB0eSgpO1xuICAgIC8vIFdlIGl0ZXJhdGUgaW4gcmV2ZXJzZSBvcmRlciB0byBwaWNrIHRoZSBsYXN0IHZhbHVlIGZvciBhIGZpZWxkIGlmIHRoZVxuICAgIC8vIHVzZXIgc3BlY2lmaWVkIHRoZSBmaWVsZCBtdWx0aXBsZSB0aW1lcy5cbiAgICBmb3IgKGxldCBlID0gXy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkgaWYgKCFfX1BSSVZBVEVfZmllbGRNYXNrQ29udGFpbnModSwgX1tlXSkpIHtcbiAgICAgICAgY29uc3QgdCA9IF9bZV07XG4gICAgICAgIGxldCBuID0gYVtlXTtcbiAgICAgICAgLy8gRm9yIENvbXBhdCB0eXBlcywgd2UgaGF2ZSB0byBcImV4dHJhY3RcIiB0aGUgdW5kZXJseWluZyB0eXBlcyBiZWZvcmVcbiAgICAgICAgLy8gcGVyZm9ybWluZyB2YWxpZGF0aW9uLlxuICAgICAgICAgICAgICAgIG4gPSB1dGlsLmdldE1vZHVsYXJJbnN0YW5jZShuKTtcbiAgICAgICAgY29uc3QgciA9IG8uU3UodCk7XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgX19QUklWQVRFX0RlbGV0ZUZpZWxkVmFsdWVJbXBsKSBcbiAgICAgICAgLy8gQWRkIGl0IHRvIHRoZSBmaWVsZCBtYXNrLCBidXQgZG9uJ3QgYWRkIGFueXRoaW5nIHRvIHVwZGF0ZURhdGEuXG4gICAgICAgIHUucHVzaCh0KTsgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlID0gX19QUklWQVRFX3BhcnNlRGF0YShuLCByKTtcbiAgICAgICAgICAgIG51bGwgIT0gZSAmJiAodS5wdXNoKHQpLCBjLnNldCh0LCBlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbCA9IG5ldyBGaWVsZE1hc2sodSk7XG4gICAgcmV0dXJuIG5ldyBQYXJzZWRVcGRhdGVEYXRhKGMsIGwsIG8uZmllbGRUcmFuc2Zvcm1zKTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIFwicXVlcnkgdmFsdWVcIiAoZS5nLiB2YWx1ZSBpbiBhIHdoZXJlIGZpbHRlciBvciBhIHZhbHVlIGluIGEgY3Vyc29yXG4gKiBib3VuZCkuXG4gKlxuICogQHBhcmFtIGFsbG93QXJyYXlzIC0gV2hldGhlciB0aGUgcXVlcnkgdmFsdWUgaXMgYW4gYXJyYXkgdGhhdCBtYXkgZGlyZWN0bHlcbiAqIGNvbnRhaW4gYWRkaXRpb25hbCBhcnJheXMgKGUuZy4gdGhlIG9wZXJhbmQgb2YgYW4gYGluYCBxdWVyeSkuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX3BhcnNlUXVlcnlWYWx1ZShlLCB0LCBuLCByID0gITEpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX3BhcnNlRGF0YShuLCBlLkZ1KHIgPyA0IC8qIFVzZXJEYXRhU291cmNlLkFycmF5QXJndW1lbnQgKi8gOiAzIC8qIFVzZXJEYXRhU291cmNlLkFyZ3VtZW50ICovICwgdCkpO1xufVxuXG4vKipcbiAqIFBhcnNlcyB1c2VyIGRhdGEgdG8gUHJvdG9idWYgVmFsdWVzLlxuICpcbiAqIEBwYXJhbSBpbnB1dCAtIERhdGEgdG8gYmUgcGFyc2VkLlxuICogQHBhcmFtIGNvbnRleHQgLSBBIGNvbnRleHQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBwYXRoIGJlaW5nIHBhcnNlZCxcbiAqIHRoZSBzb3VyY2Ugb2YgdGhlIGRhdGEgYmVpbmcgcGFyc2VkLCBldGMuXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIHZhbHVlLCBvciBudWxsIGlmIHRoZSB2YWx1ZSB3YXMgYSBGaWVsZFZhbHVlIHNlbnRpbmVsXG4gKiB0aGF0IHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdGluZyBwYXJzZWQgZGF0YS5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfcGFyc2VEYXRhKGUsIHQpIHtcbiAgICBpZiAoX19QUklWQVRFX2xvb2tzTGlrZUpzb25PYmplY3QoXG4gICAgLy8gVW53cmFwIHRoZSBBUEkgdHlwZSBmcm9tIHRoZSBDb21wYXQgU0RLLiBUaGlzIHdpbGwgcmV0dXJuIHRoZSBBUEkgdHlwZVxuICAgIC8vIGZyb20gZmlyZXN0b3JlLWV4cC5cbiAgICBlID0gdXRpbC5nZXRNb2R1bGFySW5zdGFuY2UoZSkpKSByZXR1cm4gX19QUklWQVRFX3ZhbGlkYXRlUGxhaW5PYmplY3QoXCJVbnN1cHBvcnRlZCBmaWVsZCB2YWx1ZTpcIiwgdCwgZSksIFxuICAgIF9fUFJJVkFURV9wYXJzZU9iamVjdChlLCB0KTtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIEZpZWxkVmFsdWUpIFxuICAgIC8vIEZpZWxkVmFsdWVzIHVzdWFsbHkgcGFyc2UgaW50byB0cmFuc2Zvcm1zIChleGNlcHQgZGVsZXRlRmllbGQoKSlcbiAgICAvLyBpbiB3aGljaCBjYXNlIHdlIGRvIG5vdCB3YW50IHRvIGluY2x1ZGUgdGhpcyBmaWVsZCBpbiBvdXIgcGFyc2VkIGRhdGFcbiAgICAvLyAoYXMgZG9pbmcgc28gd2lsbCBvdmVyd3JpdGUgdGhlIGZpZWxkIGRpcmVjdGx5IHByaW9yIHRvIHRoZSB0cmFuc2Zvcm1cbiAgICAvLyB0cnlpbmcgdG8gdHJhbnNmb3JtIGl0KS4gU28gd2UgZG9uJ3QgYWRkIHRoaXMgbG9jYXRpb24gdG9cbiAgICAvLyBjb250ZXh0LmZpZWxkTWFzayBhbmQgd2UgcmV0dXJuIG51bGwgYXMgb3VyIHBhcnNpbmcgcmVzdWx0LlxuICAgIC8qKlxuICogXCJQYXJzZXNcIiB0aGUgcHJvdmlkZWQgRmllbGRWYWx1ZUltcGwsIGFkZGluZyBhbnkgbmVjZXNzYXJ5IHRyYW5zZm9ybXMgdG9cbiAqIGNvbnRleHQuZmllbGRUcmFuc2Zvcm1zLlxuICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9wYXJzZVNlbnRpbmVsRmllbGRWYWx1ZShlLCB0KSB7XG4gICAgICAgIC8vIFNlbnRpbmVscyBhcmUgb25seSBzdXBwb3J0ZWQgd2l0aCB3cml0ZXMsIGFuZCBub3Qgd2l0aGluIGFycmF5cy5cbiAgICAgICAgaWYgKCFfX1BSSVZBVEVfaXNXcml0ZSh0LmZ1KSkgdGhyb3cgdC5EdShgJHtlLl9tZXRob2ROYW1lfSgpIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB1cGRhdGUoKSBhbmQgc2V0KClgKTtcbiAgICAgICAgaWYgKCF0LnBhdGgpIHRocm93IHQuRHUoYCR7ZS5fbWV0aG9kTmFtZX0oKSBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbnNpZGUgYXJyYXlzYCk7XG4gICAgICAgIGNvbnN0IG4gPSBlLl90b0ZpZWxkVHJhbnNmb3JtKHQpO1xuICAgICAgICBuICYmIHQuZmllbGRUcmFuc2Zvcm1zLnB1c2gobik7XG4gICAgfVxuICAgIC8qKlxuICogSGVscGVyIHRvIHBhcnNlIGEgc2NhbGFyIHZhbHVlIChpLmUuIG5vdCBhbiBPYmplY3QsIEFycmF5LCBvciBGaWVsZFZhbHVlKVxuICpcbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgdmFsdWVcbiAqLyAoZSwgdCksIG51bGw7XG4gICAgaWYgKHZvaWQgMCA9PT0gZSAmJiB0Lmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpIFxuICAgIC8vIElmIHRoZSBpbnB1dCBpcyB1bmRlZmluZWQgaXQgY2FuIG5ldmVyIHBhcnRpY2lwYXRlIGluIHRoZSBmaWVsZE1hc2ssIHNvXG4gICAgLy8gZG9uJ3QgaGFuZGxlIHRoaXMgYmVsb3cuIElmIGBpZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzYCBpcyBmYWxzZSxcbiAgICAvLyBgcGFyc2VTY2FsYXJWYWx1ZWAgd2lsbCByZWplY3QgYW4gdW5kZWZpbmVkIHZhbHVlLlxuICAgIHJldHVybiBudWxsO1xuICAgIGlmIChcbiAgICAvLyBJZiBjb250ZXh0LnBhdGggaXMgbnVsbCB3ZSBhcmUgaW5zaWRlIGFuIGFycmF5IGFuZCB3ZSBkb24ndCBzdXBwb3J0XG4gICAgLy8gZmllbGQgbWFzayBwYXRocyBtb3JlIGdyYW51bGFyIHRoYW4gdGhlIHRvcC1sZXZlbCBhcnJheS5cbiAgICB0LnBhdGggJiYgdC5maWVsZE1hc2sucHVzaCh0LnBhdGgpLCBlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgLy8gVE9ETyhiLzM0ODcxMTMxKTogSW5jbHVkZSB0aGUgcGF0aCBjb250YWluaW5nIHRoZSBhcnJheSBpbiB0aGUgZXJyb3JcbiAgICAgICAgLy8gbWVzc2FnZS5cbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgSU4gcXVlcmllcywgdGhlIHBhcnNlZCBkYXRhIGlzIGFuIGFycmF5IChyZXByZXNlbnRpbmdcbiAgICAgICAgLy8gdGhlIHNldCBvZiB2YWx1ZXMgdG8gYmUgaW5jbHVkZWQgZm9yIHRoZSBJTiBxdWVyeSkgdGhhdCBtYXkgZGlyZWN0bHlcbiAgICAgICAgLy8gY29udGFpbiBhZGRpdGlvbmFsIGFycmF5cyAoZWFjaCByZXByZXNlbnRpbmcgYW4gaW5kaXZpZHVhbCBmaWVsZFxuICAgICAgICAvLyB2YWx1ZSksIHNvIHdlIGRpc2FibGUgdGhpcyB2YWxpZGF0aW9uLlxuICAgICAgICBpZiAodC5zZXR0aW5ncy55dSAmJiA0IC8qIFVzZXJEYXRhU291cmNlLkFycmF5QXJndW1lbnQgKi8gIT09IHQuZnUpIHRocm93IHQuRHUoXCJOZXN0ZWQgYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX3BhcnNlQXJyYXkoZSwgdCkge1xuICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xuICAgICAgICAgICAgbGV0IHIgPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgZSA9IF9fUFJJVkFURV9wYXJzZURhdGEoaSwgdC5idShyKSk7XG4gICAgICAgICAgICAgICAgbnVsbCA9PSBlICYmIChcbiAgICAgICAgICAgICAgICAvLyBKdXN0IGluY2x1ZGUgbnVsbHMgaW4gdGhlIGFycmF5IGZvciBmaWVsZHMgYmVpbmcgcmVwbGFjZWQgd2l0aCBhXG4gICAgICAgICAgICAgICAgLy8gc2VudGluZWwuXG4gICAgICAgICAgICAgICAgZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICAgICAgICAgIH0pLCBuLnB1c2goZSksIHIrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KGUsIHQpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gX19QUklWQVRFX3BhcnNlU2NhbGFyVmFsdWUoZSwgdCkge1xuICAgICAgICBpZiAobnVsbCA9PT0gKGUgPSB1dGlsLmdldE1vZHVsYXJJbnN0YW5jZShlKSkpIHJldHVybiB7XG4gICAgICAgICAgICBudWxsVmFsdWU6IFwiTlVMTF9WQUxVRVwiXG4gICAgICAgIH07XG4gICAgICAgIGlmIChcIm51bWJlclwiID09IHR5cGVvZiBlKSByZXR1cm4gdG9OdW1iZXIodC5zZXJpYWxpemVyLCBlKTtcbiAgICAgICAgaWYgKFwiYm9vbGVhblwiID09IHR5cGVvZiBlKSByZXR1cm4ge1xuICAgICAgICAgICAgYm9vbGVhblZhbHVlOiBlXG4gICAgICAgIH07XG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlKSByZXR1cm4ge1xuICAgICAgICAgICAgc3RyaW5nVmFsdWU6IGVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gVGltZXN0YW1wLmZyb21EYXRlKGUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBWYWx1ZTogdG9UaW1lc3RhbXAodC5zZXJpYWxpemVyLCBuKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgLy8gRmlyZXN0b3JlIGJhY2tlbmQgdHJ1bmNhdGVzIHByZWNpc2lvbiBkb3duIHRvIG1pY3Jvc2Vjb25kcy4gVG8gZW5zdXJlXG4gICAgICAgICAgICAvLyBvZmZsaW5lIG1vZGUgd29ya3MgdGhlIHNhbWUgd2l0aCByZWdhcmRzIHRvIHRydW5jYXRpb24sIHBlcmZvcm0gdGhlXG4gICAgICAgICAgICAvLyB0cnVuY2F0aW9uIGltbWVkaWF0ZWx5IHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIGJhY2tlbmQgdG8gZG8gdGhhdC5cbiAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgVGltZXN0YW1wKGUuc2Vjb25kcywgMWUzICogTWF0aC5mbG9vcihlLm5hbm9zZWNvbmRzIC8gMWUzKSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlOiB0b1RpbWVzdGFtcCh0LnNlcmlhbGl6ZXIsIG4pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgR2VvUG9pbnQpIHJldHVybiB7XG4gICAgICAgICAgICBnZW9Qb2ludFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGUubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBlLmxvbmdpdHVkZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEJ5dGVzKSByZXR1cm4ge1xuICAgICAgICAgICAgYnl0ZXNWYWx1ZTogX19QUklWQVRFX3RvQnl0ZXModC5zZXJpYWxpemVyLCBlLl9ieXRlU3RyaW5nKVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIERvY3VtZW50UmVmZXJlbmNlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdC5kYXRhYmFzZUlkLCByID0gZS5maXJlc3RvcmUuX2RhdGFiYXNlSWQ7XG4gICAgICAgICAgICBpZiAoIXIuaXNFcXVhbChuKSkgdGhyb3cgdC5EdShgRG9jdW1lbnQgcmVmZXJlbmNlIGlzIGZvciBkYXRhYmFzZSAke3IucHJvamVjdElkfS8ke3IuZGF0YWJhc2V9IGJ1dCBzaG91bGQgYmUgZm9yIGRhdGFiYXNlICR7bi5wcm9qZWN0SWR9LyR7bi5kYXRhYmFzZX1gKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlVmFsdWU6IF9fUFJJVkFURV90b1Jlc291cmNlTmFtZShlLmZpcmVzdG9yZS5fZGF0YWJhc2VJZCB8fCB0LmRhdGFiYXNlSWQsIGUuX2tleS5wYXRoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyB0LkR1KGBVbnN1cHBvcnRlZCBmaWVsZCB2YWx1ZTogJHtfX1BSSVZBVEVfdmFsdWVEZXNjcmlwdGlvbihlKX1gKTtcbiAgICB9XG4gICAgLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhbiBvYmplY3QgbG9va3MgbGlrZSBhIEpTT04gb2JqZWN0IHRoYXQgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICogaW50byBhIHN0cnVjdC4gTm9ybWFsIGNsYXNzL3Byb3RvdHlwZSBpbnN0YW5jZXMgYXJlIGNvbnNpZGVyZWQgdG8gbG9vayBsaWtlXG4gKiBKU09OIG9iamVjdHMgc2luY2UgdGhleSBzaG91bGQgYmUgY29udmVydGVkIHRvIGEgc3RydWN0IHZhbHVlLiBBcnJheXMsIERhdGVzLFxuICogR2VvUG9pbnRzLCBldGMuIGFyZSBub3QgY29uc2lkZXJlZCB0byBsb29rIGxpa2UgSlNPTiBvYmplY3RzIHNpbmNlIHRoZXkgbWFwXG4gKiB0byBzcGVjaWZpYyBGaWVsZFZhbHVlIHR5cGVzIG90aGVyIHRoYW4gT2JqZWN0VmFsdWUuXG4gKi8gKGUsIHQpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfcGFyc2VPYmplY3QoZSwgdCkge1xuICAgIGNvbnN0IG4gPSB7fTtcbiAgICByZXR1cm4gaXNFbXB0eShlKSA/IFxuICAgIC8vIElmIHdlIGVuY291bnRlciBhbiBlbXB0eSBvYmplY3QsIHdlIGV4cGxpY2l0bHkgYWRkIGl0IHRvIHRoZSB1cGRhdGVcbiAgICAvLyBtYXNrIHRvIGVuc3VyZSB0aGF0IHRoZSBzZXJ2ZXIgY3JlYXRlcyBhIG1hcCBlbnRyeS5cbiAgICB0LnBhdGggJiYgdC5wYXRoLmxlbmd0aCA+IDAgJiYgdC5maWVsZE1hc2sucHVzaCh0LnBhdGgpIDogZm9yRWFjaChlLCAoKGUsIHIpID0+IHtcbiAgICAgICAgY29uc3QgaSA9IF9fUFJJVkFURV9wYXJzZURhdGEociwgdC5wdShlKSk7XG4gICAgICAgIG51bGwgIT0gaSAmJiAobltlXSA9IGkpO1xuICAgIH0pKSwge1xuICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgZmllbGRzOiBuXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfbG9va3NMaWtlSnNvbk9iamVjdChlKSB7XG4gICAgcmV0dXJuICEoXCJvYmplY3RcIiAhPSB0eXBlb2YgZSB8fCBudWxsID09PSBlIHx8IGUgaW5zdGFuY2VvZiBBcnJheSB8fCBlIGluc3RhbmNlb2YgRGF0ZSB8fCBlIGluc3RhbmNlb2YgVGltZXN0YW1wIHx8IGUgaW5zdGFuY2VvZiBHZW9Qb2ludCB8fCBlIGluc3RhbmNlb2YgQnl0ZXMgfHwgZSBpbnN0YW5jZW9mIERvY3VtZW50UmVmZXJlbmNlIHx8IGUgaW5zdGFuY2VvZiBGaWVsZFZhbHVlKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3ZhbGlkYXRlUGxhaW5PYmplY3QoZSwgdCwgbikge1xuICAgIGlmICghX19QUklWQVRFX2xvb2tzTGlrZUpzb25PYmplY3QobikgfHwgIWZ1bmN0aW9uIF9fUFJJVkFURV9pc1BsYWluT2JqZWN0KGUpIHtcbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSAmJiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpID09PSBPYmplY3QucHJvdG90eXBlIHx8IG51bGwgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSk7XG4gICAgfShuKSkge1xuICAgICAgICBjb25zdCByID0gX19QUklWQVRFX3ZhbHVlRGVzY3JpcHRpb24obik7XG4gICAgICAgIHRocm93IFwiYW4gb2JqZWN0XCIgPT09IHIgPyB0LkR1KGUgKyBcIiBhIGN1c3RvbSBvYmplY3RcIikgOiB0LkR1KGUgKyBcIiBcIiArIHIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCBjYWxscyBmcm9tRG90U2VwYXJhdGVkU3RyaW5nKCkgYnV0IHdyYXBzIGFueSBlcnJvciB0aHJvd24uXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Bcmd1bWVudCQxKGUsIHQsIG4pIHtcbiAgICBpZiAoKFxuICAgIC8vIElmIHJlcXVpcmVkLCByZXBsYWNlIHRoZSBGaWVsZFBhdGggQ29tcGF0IGNsYXNzIHdpdGggd2l0aCB0aGUgZmlyZXN0b3JlLWV4cFxuICAgIC8vIEZpZWxkUGF0aC5cbiAgICB0ID0gdXRpbC5nZXRNb2R1bGFySW5zdGFuY2UodCkpIGluc3RhbmNlb2YgRmllbGRQYXRoKSByZXR1cm4gdC5faW50ZXJuYWxQYXRoO1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSByZXR1cm4gX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Eb3RTZXBhcmF0ZWRTdHJpbmcoZSwgdCk7XG4gICAgdGhyb3cgX19QUklWQVRFX2NyZWF0ZUVycm9yKFwiRmllbGQgcGF0aCBhcmd1bWVudHMgbXVzdCBiZSBvZiB0eXBlIHN0cmluZyBvciBcIiwgZSwgXG4gICAgLyogaGFzQ29udmVydGVyPSAqLyAhMSwgXG4gICAgLyogcGF0aD0gKi8gdm9pZCAwLCBuKTtcbn1cblxuLyoqXG4gKiBNYXRjaGVzIGFueSBjaGFyYWN0ZXJzIGluIGEgZmllbGQgcGF0aCBzdHJpbmcgdGhhdCBhcmUgcmVzZXJ2ZWQuXG4gKi8gY29uc3QgYmUgPSBuZXcgUmVnRXhwKFwiW35cXFxcKi9cXFxcW1xcXFxdXVwiKTtcblxuLyoqXG4gKiBXcmFwcyBmcm9tRG90U2VwYXJhdGVkU3RyaW5nIHdpdGggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCB0aGUgbWV0aG9kIHRoYXRcbiAqIHdhcyB0aHJvd24uXG4gKiBAcGFyYW0gbWV0aG9kTmFtZSAtIFRoZSBwdWJsaWNseSB2aXNpYmxlIG1ldGhvZCBuYW1lXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBkb3Qtc2VwYXJhdGVkIHN0cmluZyBmb3JtIG9mIGEgZmllbGQgcGF0aCB3aGljaCB3aWxsIGJlXG4gKiBzcGxpdCBvbiBkb3RzLlxuICogQHBhcmFtIHRhcmdldERvYyAtIFRoZSBkb2N1bWVudCBhZ2FpbnN0IHdoaWNoIHRoZSBmaWVsZCBwYXRoIHdpbGwgYmVcbiAqIGV2YWx1YXRlZC5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZmllbGRQYXRoRnJvbURvdFNlcGFyYXRlZFN0cmluZyhlLCB0LCBuKSB7XG4gICAgaWYgKHQuc2VhcmNoKGJlKSA+PSAwKSB0aHJvdyBfX1BSSVZBVEVfY3JlYXRlRXJyb3IoYEludmFsaWQgZmllbGQgcGF0aCAoJHt0fSkuIFBhdGhzIG11c3Qgbm90IGNvbnRhaW4gJ34nLCAnKicsICcvJywgJ1snLCBvciAnXSdgLCBlLCBcbiAgICAvKiBoYXNDb252ZXJ0ZXI9ICovICExLCBcbiAgICAvKiBwYXRoPSAqLyB2b2lkIDAsIG4pO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRQYXRoKC4uLnQuc3BsaXQoXCIuXCIpKS5faW50ZXJuYWxQYXRoO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgICAgdGhyb3cgX19QUklWQVRFX2NyZWF0ZUVycm9yKGBJbnZhbGlkIGZpZWxkIHBhdGggKCR7dH0pLiBQYXRocyBtdXN0IG5vdCBiZSBlbXB0eSwgYmVnaW4gd2l0aCAnLicsIGVuZCB3aXRoICcuJywgb3IgY29udGFpbiAnLi4nYCwgZSwgXG4gICAgICAgIC8qIGhhc0NvbnZlcnRlcj0gKi8gITEsIFxuICAgICAgICAvKiBwYXRoPSAqLyB2b2lkIDAsIG4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX2NyZWF0ZUVycm9yKGUsIHQsIG4sIHIsIGkpIHtcbiAgICBjb25zdCBzID0gciAmJiAhci5pc0VtcHR5KCksIG8gPSB2b2lkIDAgIT09IGk7XG4gICAgbGV0IF8gPSBgRnVuY3Rpb24gJHt0fSgpIGNhbGxlZCB3aXRoIGludmFsaWQgZGF0YWA7XG4gICAgbiAmJiAoXyArPSBcIiAodmlhIGB0b0ZpcmVzdG9yZSgpYClcIiksIF8gKz0gXCIuIFwiO1xuICAgIGxldCBhID0gXCJcIjtcbiAgICByZXR1cm4gKHMgfHwgbykgJiYgKGEgKz0gXCIgKGZvdW5kXCIsIHMgJiYgKGEgKz0gYCBpbiBmaWVsZCAke3J9YCksIG8gJiYgKGEgKz0gYCBpbiBkb2N1bWVudCAke2l9YCksIFxuICAgIGEgKz0gXCIpXCIpLCBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBfICsgZSArIGEpO1xufVxuXG4vKiogQ2hlY2tzIGBoYXlzdGFja2AgaWYgRmllbGRQYXRoIGBuZWVkbGVgIGlzIHByZXNlbnQuIFJ1bnMgaW4gTyhuKS4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2ZpZWxkTWFza0NvbnRhaW5zKGUsIHQpIHtcbiAgICByZXR1cm4gZS5zb21lKChlID0+IGUuaXNFcXVhbCh0KSkpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGBEb2N1bWVudFNuYXBzaG90YCBjb250YWlucyBkYXRhIHJlYWQgZnJvbSBhIGRvY3VtZW50IGluIHlvdXIgRmlyZXN0b3JlXG4gKiBkYXRhYmFzZS4gVGhlIGRhdGEgY2FuIGJlIGV4dHJhY3RlZCB3aXRoIGAuZGF0YSgpYCBvciBgLmdldCg8ZmllbGQ+KWAgdG9cbiAqIGdldCBhIHNwZWNpZmljIGZpZWxkLlxuICpcbiAqIEZvciBhIGBEb2N1bWVudFNuYXBzaG90YCB0aGF0IHBvaW50cyB0byBhIG5vbi1leGlzdGluZyBkb2N1bWVudCwgYW55IGRhdGFcbiAqIGFjY2VzcyB3aWxsIHJldHVybiAndW5kZWZpbmVkJy4gWW91IGNhbiB1c2UgdGhlIGBleGlzdHMoKWAgbWV0aG9kIHRvXG4gKiBleHBsaWNpdGx5IHZlcmlmeSBhIGRvY3VtZW50J3MgZXhpc3RlbmNlLlxuICovIGNsYXNzIERvY3VtZW50U25hcHNob3QkMSB7XG4gICAgLy8gTm90ZTogVGhpcyBjbGFzcyBpcyBzdHJpcHBlZCBkb3duIHZlcnNpb24gb2YgdGhlIERvY3VtZW50U25hcHNob3QgaW5cbiAgICAvLyB0aGUgbGVnYWN5IFNESy4gVGhlIGNoYW5nZXMgYXJlOlxuICAgIC8vIC0gTm8gc3VwcG9ydCBmb3IgU25hcHNob3RNZXRhZGF0YS5cbiAgICAvLyAtIE5vIHN1cHBvcnQgZm9yIFNuYXBzaG90T3B0aW9ucy5cbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciBwcm90ZWN0ZWQgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVzdG9yZSA9IGUsIHRoaXMuX3VzZXJEYXRhV3JpdGVyID0gdCwgdGhpcy5fa2V5ID0gbiwgdGhpcy5fZG9jdW1lbnQgPSByLCBcbiAgICAgICAgdGhpcy5fY29udmVydGVyID0gaTtcbiAgICB9XG4gICAgLyoqIFByb3BlcnR5IG9mIHRoZSBgRG9jdW1lbnRTbmFwc2hvdGAgdGhhdCBwcm92aWRlcyB0aGUgZG9jdW1lbnQncyBJRC4gKi8gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5LnBhdGgubGFzdFNlZ21lbnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGBEb2N1bWVudFJlZmVyZW5jZWAgZm9yIHRoZSBkb2N1bWVudCBpbmNsdWRlZCBpbiB0aGUgYERvY3VtZW50U25hcHNob3RgLlxuICAgICAqLyAgICBnZXQgcmVmKCkge1xuICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50UmVmZXJlbmNlKHRoaXMuX2ZpcmVzdG9yZSwgdGhpcy5fY29udmVydGVyLCB0aGlzLl9rZXkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaWduYWxzIHdoZXRoZXIgb3Igbm90IHRoZSBkb2N1bWVudCBhdCB0aGUgc25hcHNob3QncyBsb2NhdGlvbiBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBkb2N1bWVudCBleGlzdHMuXG4gICAgICovICAgIGV4aXN0cygpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuX2RvY3VtZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgYXMgYW4gYE9iamVjdGAuIFJldHVybnMgYHVuZGVmaW5lZGAgaWZcbiAgICAgKiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgb3IgYHVuZGVmaW5lZGBcbiAgICAgKiBpZiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgKi8gICAgZGF0YSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RvY3VtZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29udmVydGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHVzZSB0aGUgY29udmVydGVyIGFuZCBjcmVhdGUgYSBuZXcgRG9jdW1lbnRTbmFwc2hvdFxuICAgICAgICAgICAgICAgIC8vIGlmIGEgY29udmVydGVyIGhhcyBiZWVuIHByb3ZpZGVkLlxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgUXVlcnlEb2N1bWVudFNuYXBzaG90JDEodGhpcy5fZmlyZXN0b3JlLCB0aGlzLl91c2VyRGF0YVdyaXRlciwgdGhpcy5fa2V5LCB0aGlzLl9kb2N1bWVudCwgXG4gICAgICAgICAgICAgICAgLyogY29udmVydGVyPSAqLyBudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udmVydGVyLmZyb21GaXJlc3RvcmUoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlckRhdGFXcml0ZXIuY29udmVydFZhbHVlKHRoaXMuX2RvY3VtZW50LmRhdGEudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgZmllbGQgc3BlY2lmaWVkIGJ5IGBmaWVsZFBhdGhgLiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZVxuICAgICAqIGRvY3VtZW50IG9yIGZpZWxkIGRvZXNuJ3QgZXhpc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmllbGRQYXRoIC0gVGhlIHBhdGggKGZvciBleGFtcGxlICdmb28nIG9yICdmb28uYmFyJykgdG8gYSBzcGVjaWZpY1xuICAgICAqIGZpZWxkLlxuICAgICAqIEByZXR1cm5zIFRoZSBkYXRhIGF0IHRoZSBzcGVjaWZpZWQgZmllbGQgbG9jYXRpb24gb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2hcbiAgICAgKiBmaWVsZCBleGlzdHMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIC8vIFdlIGFyZSB1c2luZyBgYW55YCBoZXJlIHRvIGF2b2lkIGFuIGV4cGxpY2l0IGNhc3QgYnkgb3VyIHVzZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZ2V0KGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RvY3VtZW50KSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fZG9jdW1lbnQuZGF0YS5maWVsZChfX1BSSVZBVEVfZmllbGRQYXRoRnJvbUFyZ3VtZW50KFwiRG9jdW1lbnRTbmFwc2hvdC5nZXRcIiwgZSkpO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHQpIHJldHVybiB0aGlzLl91c2VyRGF0YVdyaXRlci5jb252ZXJ0VmFsdWUodCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQSBgUXVlcnlEb2N1bWVudFNuYXBzaG90YCBjb250YWlucyBkYXRhIHJlYWQgZnJvbSBhIGRvY3VtZW50IGluIHlvdXJcbiAqIEZpcmVzdG9yZSBkYXRhYmFzZSBhcyBwYXJ0IG9mIGEgcXVlcnkuIFRoZSBkb2N1bWVudCBpcyBndWFyYW50ZWVkIHRvIGV4aXN0XG4gKiBhbmQgaXRzIGRhdGEgY2FuIGJlIGV4dHJhY3RlZCB3aXRoIGAuZGF0YSgpYCBvciBgLmdldCg8ZmllbGQ+KWAgdG8gZ2V0IGFcbiAqIHNwZWNpZmljIGZpZWxkLlxuICpcbiAqIEEgYFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdGAgb2ZmZXJzIHRoZSBzYW1lIEFQSSBzdXJmYWNlIGFzIGFcbiAqIGBEb2N1bWVudFNuYXBzaG90YC4gU2luY2UgcXVlcnkgcmVzdWx0cyBjb250YWluIG9ubHkgZXhpc3RpbmcgZG9jdW1lbnRzLCB0aGVcbiAqIGBleGlzdHNgIHByb3BlcnR5IHdpbGwgYWx3YXlzIGJlIHRydWUgYW5kIGBkYXRhKClgIHdpbGwgbmV2ZXIgcmV0dXJuXG4gKiAndW5kZWZpbmVkJy5cbiAqLyBjbGFzcyBRdWVyeURvY3VtZW50U25hcHNob3QkMSBleHRlbmRzIERvY3VtZW50U25hcHNob3QkMSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IGFzIGFuIGBPYmplY3RgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybnMgQW4gYE9iamVjdGAgY29udGFpbmluZyBhbGwgZmllbGRzIGluIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZGF0YSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCBjYWxscyBgZnJvbURvdFNlcGFyYXRlZFN0cmluZygpYCBidXQgd3JhcHMgYW55IGVycm9yIHRocm93bi5cbiAqLyBmdW5jdGlvbiBfX1BSSVZBVEVfZmllbGRQYXRoRnJvbUFyZ3VtZW50KGUsIHQpIHtcbiAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IF9fUFJJVkFURV9maWVsZFBhdGhGcm9tRG90U2VwYXJhdGVkU3RyaW5nKGUsIHQpIDogdCBpbnN0YW5jZW9mIEZpZWxkUGF0aCA/IHQuX2ludGVybmFsUGF0aCA6IHQuX2RlbGVnYXRlLl9pbnRlcm5hbFBhdGg7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZUhhc0V4cGxpY2l0T3JkZXJCeUZvckxpbWl0VG9MYXN0KGUpIHtcbiAgICBpZiAoXCJMXCIgLyogTGltaXRUeXBlLkxhc3QgKi8gPT09IGUubGltaXRUeXBlICYmIDAgPT09IGUuZXhwbGljaXRPcmRlckJ5Lmxlbmd0aCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuVU5JTVBMRU1FTlRFRCwgXCJsaW1pdFRvTGFzdCgpIHF1ZXJpZXMgcmVxdWlyZSBzcGVjaWZ5aW5nIGF0IGxlYXN0IG9uZSBvcmRlckJ5KCkgY2xhdXNlXCIpO1xufVxuXG4vKipcbiAqIEFuIGBBcHBsaWFibGVDb25zdHJhaW50YCBpcyBhbiBhYnN0cmFjdGlvbiBvZiBhIGNvbnN0cmFpbnQgdGhhdCBjYW4gYmUgYXBwbGllZFxuICogdG8gYSBGaXJlc3RvcmUgcXVlcnkuXG4gKi8gY2xhc3MgQXBwbGlhYmxlQ29uc3RyYWludCB7fVxuXG4vKipcbiAqIEEgYFF1ZXJ5Q29uc3RyYWludGAgaXMgdXNlZCB0byBuYXJyb3cgdGhlIHNldCBvZiBkb2N1bWVudHMgcmV0dXJuZWQgYnkgYVxuICogRmlyZXN0b3JlIHF1ZXJ5LiBgUXVlcnlDb25zdHJhaW50YHMgYXJlIGNyZWF0ZWQgYnkgaW52b2tpbmcge0BsaW5rIHdoZXJlfSxcbiAqIHtAbGluayBvcmRlckJ5fSwge0BsaW5rIChzdGFydEF0OjEpfSwge0BsaW5rIChzdGFydEFmdGVyOjEpfSwge0BsaW5rXG4gKiAoZW5kQmVmb3JlOjEpfSwge0BsaW5rIChlbmRBdDoxKX0sIHtAbGluayBsaW1pdH0sIHtAbGluayBsaW1pdFRvTGFzdH0gYW5kXG4gKiBjYW4gdGhlbiBiZSBwYXNzZWQgdG8ge0BsaW5rIChxdWVyeToxKX0gdG8gY3JlYXRlIGEgbmV3IHF1ZXJ5IGluc3RhbmNlIHRoYXRcbiAqIGFsc28gY29udGFpbnMgdGhpcyBgUXVlcnlDb25zdHJhaW50YC5cbiAqLyBjbGFzcyBRdWVyeUNvbnN0cmFpbnQgZXh0ZW5kcyBBcHBsaWFibGVDb25zdHJhaW50IHt9XG5cbmZ1bmN0aW9uIHF1ZXJ5KGUsIHQsIC4uLm4pIHtcbiAgICBsZXQgciA9IFtdO1xuICAgIHQgaW5zdGFuY2VvZiBBcHBsaWFibGVDb25zdHJhaW50ICYmIHIucHVzaCh0KSwgciA9IHIuY29uY2F0KG4pLCBmdW5jdGlvbiBfX1BSSVZBVEVfdmFsaWRhdGVRdWVyeUNvbnN0cmFpbnRBcnJheShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLmZpbHRlcigoZSA9PiBlIGluc3RhbmNlb2YgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50KSkubGVuZ3RoLCBuID0gZS5maWx0ZXIoKGUgPT4gZSBpbnN0YW5jZW9mIFF1ZXJ5RmllbGRGaWx0ZXJDb25zdHJhaW50KSkubGVuZ3RoO1xuICAgICAgICBpZiAodCA+IDEgfHwgdCA+IDAgJiYgbiA+IDApIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZFF1ZXJ5LiBXaGVuIHVzaW5nIGNvbXBvc2l0ZSBmaWx0ZXJzLCB5b3UgY2Fubm90IHVzZSBtb3JlIHRoYW4gb25lIGZpbHRlciBhdCB0aGUgdG9wIGxldmVsLiBDb25zaWRlciBuZXN0aW5nIHRoZSBtdWx0aXBsZSBmaWx0ZXJzIHdpdGhpbiBhbiBgYW5kKC4uLilgIHN0YXRlbWVudC4gRm9yIGV4YW1wbGU6IGNoYW5nZSBgcXVlcnkocXVlcnksIHdoZXJlKC4uLiksIG9yKC4uLikpYCB0byBgcXVlcnkocXVlcnksIGFuZCh3aGVyZSguLi4pLCBvciguLi4pKSlgLlwiKTtcbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbiAgICAvKipcbiAqIENvbnZlcnRzIEZpcmVzdG9yZSdzIGludGVybmFsIHR5cGVzIHRvIHRoZSBKYXZhU2NyaXB0IHR5cGVzIHRoYXQgd2UgZXhwb3NlXG4gKiB0byB0aGUgdXNlci5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqLyAocik7XG4gICAgZm9yIChjb25zdCB0IG9mIHIpIGUgPSB0Ll9hcHBseShlKTtcbiAgICByZXR1cm4gZTtcbn1cblxuLyoqXG4gKiBBIGBRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludGAgaXMgdXNlZCB0byBuYXJyb3cgdGhlIHNldCBvZiBkb2N1bWVudHMgcmV0dXJuZWQgYnlcbiAqIGEgRmlyZXN0b3JlIHF1ZXJ5IGJ5IGZpbHRlcmluZyBvbiBvbmUgb3IgbW9yZSBkb2N1bWVudCBmaWVsZHMuXG4gKiBgUXVlcnlGaWVsZEZpbHRlckNvbnN0cmFpbnRgcyBhcmUgY3JlYXRlZCBieSBpbnZva2luZyB7QGxpbmsgd2hlcmV9IGFuZCBjYW4gdGhlblxuICogYmUgcGFzc2VkIHRvIHtAbGluayAocXVlcnk6MSl9IHRvIGNyZWF0ZSBhIG5ldyBxdWVyeSBpbnN0YW5jZSB0aGF0IGFsc28gY29udGFpbnNcbiAqIHRoaXMgYFF1ZXJ5RmllbGRGaWx0ZXJDb25zdHJhaW50YC5cbiAqLyBjbGFzcyBRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludCBleHRlbmRzIFF1ZXJ5Q29uc3RyYWludCB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZSwgdCwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLl9maWVsZCA9IGUsIHRoaXMuX29wID0gdCwgdGhpcy5fdmFsdWUgPSBuLCBcbiAgICAgICAgLyoqIFRoZSB0eXBlIG9mIHRoaXMgcXVlcnkgY29uc3RyYWludCAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBcIndoZXJlXCI7XG4gICAgfVxuICAgIHN0YXRpYyBfY3JlYXRlKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludChlLCB0LCBuKTtcbiAgICB9XG4gICAgX2FwcGx5KGUpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuX3BhcnNlKGUpO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3ZhbGlkYXRlTmV3RmllbGRGaWx0ZXIoZS5fcXVlcnksIHQpLCBuZXcgUXVlcnkoZS5maXJlc3RvcmUsIGUuY29udmVydGVyLCBfX1BSSVZBVEVfcXVlcnlXaXRoQWRkZWRGaWx0ZXIoZS5fcXVlcnksIHQpKTtcbiAgICB9XG4gICAgX3BhcnNlKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV9uZXdVc2VyRGF0YVJlYWRlcihlLmZpcmVzdG9yZSksIG4gPSBmdW5jdGlvbiBfX1BSSVZBVEVfbmV3UXVlcnlGaWx0ZXIoZSwgdCwgbiwgciwgaSwgcywgbykge1xuICAgICAgICAgICAgbGV0IF87XG4gICAgICAgICAgICBpZiAoaS5pc0tleUZpZWxkKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJhcnJheS1jb250YWluc1wiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TICovID09PSBzIHx8IFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovID09PSBzKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBRdWVyeS4gWW91IGNhbid0IHBlcmZvcm0gJyR7c30nIHF1ZXJpZXMgb24gZG9jdW1lbnRJZCgpLmApO1xuICAgICAgICAgICAgICAgIGlmIChcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gPT09IHMgfHwgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gPT09IHMpIHtcbiAgICAgICAgICAgICAgICAgICAgX19QUklWQVRFX3ZhbGlkYXRlRGlzanVuY3RpdmVGaWx0ZXJFbGVtZW50cyhvLCBzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgbykgdC5wdXNoKF9fUFJJVkFURV9wYXJzZURvY3VtZW50SWRWYWx1ZShyLCBlLCBuKSk7XG4gICAgICAgICAgICAgICAgICAgIF8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB0XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIF8gPSBfX1BSSVZBVEVfcGFyc2VEb2N1bWVudElkVmFsdWUociwgZSwgbyk7XG4gICAgICAgICAgICB9IGVsc2UgXCJpblwiIC8qIE9wZXJhdG9yLklOICovICE9PSBzICYmIFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovICE9PSBzICYmIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogT3BlcmF0b3IuQVJSQVlfQ09OVEFJTlNfQU5ZICovICE9PSBzIHx8IF9fUFJJVkFURV92YWxpZGF0ZURpc2p1bmN0aXZlRmlsdGVyRWxlbWVudHMobywgcyksIFxuICAgICAgICAgICAgXyA9IF9fUFJJVkFURV9wYXJzZVF1ZXJ5VmFsdWUobiwgdCwgbywgXG4gICAgICAgICAgICAvKiBhbGxvd0FycmF5cz0gKi8gXCJpblwiIC8qIE9wZXJhdG9yLklOICovID09PSBzIHx8IFwibm90LWluXCIgLyogT3BlcmF0b3IuTk9UX0lOICovID09PSBzKTtcbiAgICAgICAgICAgIHJldHVybiBGaWVsZEZpbHRlci5jcmVhdGUoaSwgcywgXyk7XG4gICAgICAgIH0oZS5fcXVlcnksIFwid2hlcmVcIiwgdCwgZS5maXJlc3RvcmUuX2RhdGFiYXNlSWQsIHRoaXMuX2ZpZWxkLCB0aGlzLl9vcCwgdGhpcy5fdmFsdWUpO1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludH0gdGhhdCBlbmZvcmNlcyB0aGF0IGRvY3VtZW50c1xuICogbXVzdCBjb250YWluIHRoZSBzcGVjaWZpZWQgZmllbGQgYW5kIHRoYXQgdGhlIHZhbHVlIHNob3VsZCBzYXRpc2Z5IHRoZVxuICogcmVsYXRpb24gY29uc3RyYWludCBwcm92aWRlZC5cbiAqXG4gKiBAcGFyYW0gZmllbGRQYXRoIC0gVGhlIHBhdGggdG8gY29tcGFyZVxuICogQHBhcmFtIG9wU3RyIC0gVGhlIG9wZXJhdGlvbiBzdHJpbmcgKGUuZyBcIiZsdDtcIiwgXCImbHQ7PVwiLCBcIj09XCIsIFwiJmx0O1wiLFxuICogICBcIiZsdDs9XCIsIFwiIT1cIikuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgZm9yIGNvbXBhcmlzb25cbiAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIHtAbGluayBRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludH0uXG4gKi8gZnVuY3Rpb24gd2hlcmUoZSwgdCwgbikge1xuICAgIGNvbnN0IHIgPSB0LCBpID0gX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Bcmd1bWVudChcIndoZXJlXCIsIGUpO1xuICAgIHJldHVybiBRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludC5fY3JlYXRlKGksIHIsIG4pO1xufVxuXG4vKipcbiAqIEEgYFF1ZXJ5Q29tcG9zaXRlRmlsdGVyQ29uc3RyYWludGAgaXMgdXNlZCB0byBuYXJyb3cgdGhlIHNldCBvZiBkb2N1bWVudHNcbiAqIHJldHVybmVkIGJ5IGEgRmlyZXN0b3JlIHF1ZXJ5IGJ5IHBlcmZvcm1pbmcgdGhlIGxvZ2ljYWwgT1Igb3IgQU5EIG9mIG11bHRpcGxlXG4gKiB7QGxpbmsgUXVlcnlGaWVsZEZpbHRlckNvbnN0cmFpbnR9cyBvciB7QGxpbmsgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50fXMuXG4gKiBgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50YHMgYXJlIGNyZWF0ZWQgYnkgaW52b2tpbmcge0BsaW5rIG9yfSBvclxuICoge0BsaW5rIGFuZH0gYW5kIGNhbiB0aGVuIGJlIHBhc3NlZCB0byB7QGxpbmsgKHF1ZXJ5OjEpfSB0byBjcmVhdGUgYSBuZXcgcXVlcnlcbiAqIGluc3RhbmNlIHRoYXQgYWxzbyBjb250YWlucyB0aGUgYFF1ZXJ5Q29tcG9zaXRlRmlsdGVyQ29uc3RyYWludGAuXG4gKi8gY2xhc3MgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50IGV4dGVuZHMgQXBwbGlhYmxlQ29uc3RyYWludCB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFRoZSB0eXBlIG9mIHRoaXMgcXVlcnkgY29uc3RyYWludCAqL1xuICAgIGUsIHQpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy50eXBlID0gZSwgdGhpcy5fcXVlcnlDb25zdHJhaW50cyA9IHQ7XG4gICAgfVxuICAgIHN0YXRpYyBfY3JlYXRlKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUNvbXBvc2l0ZUZpbHRlckNvbnN0cmFpbnQoZSwgdCk7XG4gICAgfVxuICAgIF9wYXJzZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLl9xdWVyeUNvbnN0cmFpbnRzLm1hcCgodCA9PiB0Ll9wYXJzZShlKSkpLmZpbHRlcigoZSA9PiBlLmdldEZpbHRlcnMoKS5sZW5ndGggPiAwKSk7XG4gICAgICAgIHJldHVybiAxID09PSB0Lmxlbmd0aCA/IHRbMF0gOiBDb21wb3NpdGVGaWx0ZXIuY3JlYXRlKHQsIHRoaXMuX2dldE9wZXJhdG9yKCkpO1xuICAgIH1cbiAgICBfYXBwbHkoZSkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5fcGFyc2UoZSk7XG4gICAgICAgIHJldHVybiAwID09PSB0LmdldEZpbHRlcnMoKS5sZW5ndGggPyBlIDogKGZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZU5ld0ZpbHRlcihlLCB0KSB7XG4gICAgICAgICAgICBsZXQgbiA9IGU7XG4gICAgICAgICAgICBjb25zdCByID0gdC5nZXRGbGF0dGVuZWRGaWx0ZXJzKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgcikgX19QUklWQVRFX3ZhbGlkYXRlTmV3RmllbGRGaWx0ZXIobiwgZSksIG4gPSBfX1BSSVZBVEVfcXVlcnlXaXRoQWRkZWRGaWx0ZXIobiwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2tzIGlmIGFueSBvZiB0aGUgcHJvdmlkZWQgZmlsdGVyIG9wZXJhdG9ycyBhcmUgaW5jbHVkZWQgaW4gdGhlIGdpdmVuIGxpc3Qgb2YgZmlsdGVycyBhbmRcbiAgICAgICAgLy8gcmV0dXJucyB0aGUgZmlyc3Qgb25lIHRoYXQgaXMsIG9yIG51bGwgaWYgbm9uZSBhcmUuXG4gICAgICAgIChlLl9xdWVyeSwgdCksIG5ldyBRdWVyeShlLmZpcmVzdG9yZSwgZS5jb252ZXJ0ZXIsIF9fUFJJVkFURV9xdWVyeVdpdGhBZGRlZEZpbHRlcihlLl9xdWVyeSwgdCkpKTtcbiAgICB9XG4gICAgX2dldFF1ZXJ5Q29uc3RyYWludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeUNvbnN0cmFpbnRzO1xuICAgIH1cbiAgICBfZ2V0T3BlcmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBcImFuZFwiID09PSB0aGlzLnR5cGUgPyBcImFuZFwiIC8qIENvbXBvc2l0ZU9wZXJhdG9yLkFORCAqLyA6IFwib3JcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5PUiAqLztcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB7QGxpbmsgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50fSB0aGF0IGlzIGEgZGlzanVuY3Rpb24gb2ZcbiAqIHRoZSBnaXZlbiBmaWx0ZXIgY29uc3RyYWludHMuIEEgZGlzanVuY3Rpb24gZmlsdGVyIGluY2x1ZGVzIGEgZG9jdW1lbnQgaWYgaXRcbiAqIHNhdGlzZmllcyBhbnkgb2YgdGhlIGdpdmVuIGZpbHRlcnMuXG4gKlxuICogQHBhcmFtIHF1ZXJ5Q29uc3RyYWludHMgLSBPcHRpb25hbC4gVGhlIGxpc3Qgb2ZcbiAqIHtAbGluayBRdWVyeUZpbHRlckNvbnN0cmFpbnR9cyB0byBwZXJmb3JtIGEgZGlzanVuY3Rpb24gZm9yLiBUaGVzZSBtdXN0IGJlXG4gKiBjcmVhdGVkIHdpdGggY2FsbHMgdG8ge0BsaW5rIHdoZXJlfSwge0BsaW5rIG9yfSwgb3Ige0BsaW5rIGFuZH0uXG4gKiBAcmV0dXJucyBUaGUgbmV3bHkgY3JlYXRlZCB7QGxpbmsgUXVlcnlDb21wb3NpdGVGaWx0ZXJDb25zdHJhaW50fS5cbiAqLyBmdW5jdGlvbiBvciguLi5lKSB7XG4gICAgLy8gT25seSBzdXBwb3J0IFF1ZXJ5RmlsdGVyQ29uc3RyYWludHNcbiAgICByZXR1cm4gZS5mb3JFYWNoKChlID0+IF9fUFJJVkFURV92YWxpZGF0ZVF1ZXJ5RmlsdGVyQ29uc3RyYWludChcIm9yXCIsIGUpKSksIFF1ZXJ5Q29tcG9zaXRlRmlsdGVyQ29uc3RyYWludC5fY3JlYXRlKFwib3JcIiAvKiBDb21wb3NpdGVPcGVyYXRvci5PUiAqLyAsIGUpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIFF1ZXJ5Q29tcG9zaXRlRmlsdGVyQ29uc3RyYWludH0gdGhhdCBpcyBhIGNvbmp1bmN0aW9uIG9mXG4gKiB0aGUgZ2l2ZW4gZmlsdGVyIGNvbnN0cmFpbnRzLiBBIGNvbmp1bmN0aW9uIGZpbHRlciBpbmNsdWRlcyBhIGRvY3VtZW50IGlmIGl0XG4gKiBzYXRpc2ZpZXMgYWxsIG9mIHRoZSBnaXZlbiBmaWx0ZXJzLlxuICpcbiAqIEBwYXJhbSBxdWVyeUNvbnN0cmFpbnRzIC0gT3B0aW9uYWwuIFRoZSBsaXN0IG9mXG4gKiB7QGxpbmsgUXVlcnlGaWx0ZXJDb25zdHJhaW50fXMgdG8gcGVyZm9ybSBhIGNvbmp1bmN0aW9uIGZvci4gVGhlc2UgbXVzdCBiZVxuICogY3JlYXRlZCB3aXRoIGNhbGxzIHRvIHtAbGluayB3aGVyZX0sIHtAbGluayBvcn0sIG9yIHtAbGluayBhbmR9LlxuICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQge0BsaW5rIFF1ZXJ5Q29tcG9zaXRlRmlsdGVyQ29uc3RyYWludH0uXG4gKi8gZnVuY3Rpb24gYW5kKC4uLmUpIHtcbiAgICAvLyBPbmx5IHN1cHBvcnQgUXVlcnlGaWx0ZXJDb25zdHJhaW50c1xuICAgIHJldHVybiBlLmZvckVhY2goKGUgPT4gX19QUklWQVRFX3ZhbGlkYXRlUXVlcnlGaWx0ZXJDb25zdHJhaW50KFwiYW5kXCIsIGUpKSksIFF1ZXJ5Q29tcG9zaXRlRmlsdGVyQ29uc3RyYWludC5fY3JlYXRlKFwiYW5kXCIgLyogQ29tcG9zaXRlT3BlcmF0b3IuQU5EICovICwgZSk7XG59XG5cbi8qKlxuICogQSBgUXVlcnlPcmRlckJ5Q29uc3RyYWludGAgaXMgdXNlZCB0byBzb3J0IHRoZSBzZXQgb2YgZG9jdW1lbnRzIHJldHVybmVkIGJ5IGFcbiAqIEZpcmVzdG9yZSBxdWVyeS4gYFF1ZXJ5T3JkZXJCeUNvbnN0cmFpbnRgcyBhcmUgY3JlYXRlZCBieSBpbnZva2luZ1xuICoge0BsaW5rIG9yZGVyQnl9IGFuZCBjYW4gdGhlbiBiZSBwYXNzZWQgdG8ge0BsaW5rIChxdWVyeToxKX0gdG8gY3JlYXRlIGEgbmV3IHF1ZXJ5XG4gKiBpbnN0YW5jZSB0aGF0IGFsc28gY29udGFpbnMgdGhpcyBgUXVlcnlPcmRlckJ5Q29uc3RyYWludGAuXG4gKlxuICogTm90ZTogRG9jdW1lbnRzIHRoYXQgZG8gbm90IGNvbnRhaW4gdGhlIG9yZGVyQnkgZmllbGQgd2lsbCBub3QgYmUgcHJlc2VudCBpblxuICogdGhlIHF1ZXJ5IHJlc3VsdC5cbiAqLyBjbGFzcyBRdWVyeU9yZGVyQnlDb25zdHJhaW50IGV4dGVuZHMgUXVlcnlDb25zdHJhaW50IHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuX2ZpZWxkID0gZSwgdGhpcy5fZGlyZWN0aW9uID0gdCwgXG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIHF1ZXJ5IGNvbnN0cmFpbnQgKi9cbiAgICAgICAgdGhpcy50eXBlID0gXCJvcmRlckJ5XCI7XG4gICAgfVxuICAgIHN0YXRpYyBfY3JlYXRlKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeU9yZGVyQnlDb25zdHJhaW50KGUsIHQpO1xuICAgIH1cbiAgICBfYXBwbHkoZSkge1xuICAgICAgICBjb25zdCB0ID0gZnVuY3Rpb24gX19QUklWQVRFX25ld1F1ZXJ5T3JkZXJCeShlLCB0LCBuKSB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gZS5zdGFydEF0KSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFlvdSBtdXN0IG5vdCBjYWxsIHN0YXJ0QXQoKSBvciBzdGFydEFmdGVyKCkgYmVmb3JlIGNhbGxpbmcgb3JkZXJCeSgpLlwiKTtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBlLmVuZEF0KSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFlvdSBtdXN0IG5vdCBjYWxsIGVuZEF0KCkgb3IgZW5kQmVmb3JlKCkgYmVmb3JlIGNhbGxpbmcgb3JkZXJCeSgpLlwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgT3JkZXJCeSh0LCBuKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIENyZWF0ZSBhIGBCb3VuZGAgZnJvbSBhIHF1ZXJ5IGFuZCBhIGRvY3VtZW50LlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgYEJvdW5kYCB3aWxsIGFsd2F5cyBpbmNsdWRlIHRoZSBrZXkgb2YgdGhlIGRvY3VtZW50XG4gKiBhbmQgc28gb25seSB0aGUgcHJvdmlkZWQgZG9jdW1lbnQgd2lsbCBjb21wYXJlIGVxdWFsIHRvIHRoZSByZXR1cm5lZFxuICogcG9zaXRpb24uXG4gKlxuICogV2lsbCB0aHJvdyBpZiB0aGUgZG9jdW1lbnQgZG9lcyBub3QgY29udGFpbiBhbGwgZmllbGRzIG9mIHRoZSBvcmRlciBieVxuICogb2YgdGhlIHF1ZXJ5IG9yIGlmIGFueSBvZiB0aGUgZmllbGRzIGluIHRoZSBvcmRlciBieSBhcmUgYW4gdW5jb21taXR0ZWRcbiAqIHNlcnZlciB0aW1lc3RhbXAuXG4gKi8gKGUuX3F1ZXJ5LCB0aGlzLl9maWVsZCwgdGhpcy5fZGlyZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeShlLmZpcmVzdG9yZSwgZS5jb252ZXJ0ZXIsIGZ1bmN0aW9uIF9fUFJJVkFURV9xdWVyeVdpdGhBZGRlZE9yZGVyQnkoZSwgdCkge1xuICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiB2YWxpZGF0ZSB0aGF0IG9yZGVyQnkgZG9lcyBub3QgbGlzdCB0aGUgc2FtZSBrZXkgdHdpY2UuXG4gICAgICAgICAgICBjb25zdCBuID0gZS5leHBsaWNpdE9yZGVyQnkuY29uY2F0KFsgdCBdKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX1F1ZXJ5SW1wbChlLnBhdGgsIGUuY29sbGVjdGlvbkdyb3VwLCBuLCBlLmZpbHRlcnMuc2xpY2UoKSwgZS5saW1pdCwgZS5saW1pdFR5cGUsIGUuc3RhcnRBdCwgZS5lbmRBdCk7XG4gICAgICAgIH0oZS5fcXVlcnksIHQpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBRdWVyeU9yZGVyQnlDb25zdHJhaW50fSB0aGF0IHNvcnRzIHRoZSBxdWVyeSByZXN1bHQgYnkgdGhlXG4gKiBzcGVjaWZpZWQgZmllbGQsIG9wdGlvbmFsbHkgaW4gZGVzY2VuZGluZyBvcmRlciBpbnN0ZWFkIG9mIGFzY2VuZGluZy5cbiAqXG4gKiBOb3RlOiBEb2N1bWVudHMgdGhhdCBkbyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIGZpZWxkIHdpbGwgbm90IGJlIHByZXNlbnRcbiAqIGluIHRoZSBxdWVyeSByZXN1bHQuXG4gKlxuICogQHBhcmFtIGZpZWxkUGF0aCAtIFRoZSBmaWVsZCB0byBzb3J0IGJ5LlxuICogQHBhcmFtIGRpcmVjdGlvblN0ciAtIE9wdGlvbmFsIGRpcmVjdGlvbiB0byBzb3J0IGJ5ICgnYXNjJyBvciAnZGVzYycpLiBJZlxuICogbm90IHNwZWNpZmllZCwgb3JkZXIgd2lsbCBiZSBhc2NlbmRpbmcuXG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCB7QGxpbmsgUXVlcnlPcmRlckJ5Q29uc3RyYWludH0uXG4gKi8gZnVuY3Rpb24gb3JkZXJCeShlLCB0ID0gXCJhc2NcIikge1xuICAgIGNvbnN0IG4gPSB0LCByID0gX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Bcmd1bWVudChcIm9yZGVyQnlcIiwgZSk7XG4gICAgcmV0dXJuIFF1ZXJ5T3JkZXJCeUNvbnN0cmFpbnQuX2NyZWF0ZShyLCBuKTtcbn1cblxuLyoqXG4gKiBBIGBRdWVyeUxpbWl0Q29uc3RyYWludGAgaXMgdXNlZCB0byBsaW1pdCB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyByZXR1cm5lZCBieVxuICogYSBGaXJlc3RvcmUgcXVlcnkuXG4gKiBgUXVlcnlMaW1pdENvbnN0cmFpbnRgcyBhcmUgY3JlYXRlZCBieSBpbnZva2luZyB7QGxpbmsgbGltaXR9IG9yXG4gKiB7QGxpbmsgbGltaXRUb0xhc3R9IGFuZCBjYW4gdGhlbiBiZSBwYXNzZWQgdG8ge0BsaW5rIChxdWVyeToxKX0gdG8gY3JlYXRlIGEgbmV3XG4gKiBxdWVyeSBpbnN0YW5jZSB0aGF0IGFsc28gY29udGFpbnMgdGhpcyBgUXVlcnlMaW1pdENvbnN0cmFpbnRgLlxuICovIGNsYXNzIFF1ZXJ5TGltaXRDb25zdHJhaW50IGV4dGVuZHMgUXVlcnlDb25zdHJhaW50IHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBxdWVyeSBjb25zdHJhaW50ICovXG4gICAgZSwgdCwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLnR5cGUgPSBlLCB0aGlzLl9saW1pdCA9IHQsIHRoaXMuX2xpbWl0VHlwZSA9IG47XG4gICAgfVxuICAgIHN0YXRpYyBfY3JlYXRlKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUxpbWl0Q29uc3RyYWludChlLCB0LCBuKTtcbiAgICB9XG4gICAgX2FwcGx5KGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeShlLmZpcmVzdG9yZSwgZS5jb252ZXJ0ZXIsIF9fUFJJVkFURV9xdWVyeVdpdGhMaW1pdChlLl9xdWVyeSwgdGhpcy5fbGltaXQsIHRoaXMuX2xpbWl0VHlwZSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIFF1ZXJ5TGltaXRDb25zdHJhaW50fSB0aGF0IG9ubHkgcmV0dXJucyB0aGUgZmlyc3QgbWF0Y2hpbmdcbiAqIGRvY3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gbGltaXQgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgVGhlIGNyZWF0ZWQge0BsaW5rIFF1ZXJ5TGltaXRDb25zdHJhaW50fS5cbiAqLyBmdW5jdGlvbiBsaW1pdChlKSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV92YWxpZGF0ZVBvc2l0aXZlTnVtYmVyKFwibGltaXRcIiwgZSksIFF1ZXJ5TGltaXRDb25zdHJhaW50Ll9jcmVhdGUoXCJsaW1pdFwiLCBlLCBcIkZcIiAvKiBMaW1pdFR5cGUuRmlyc3QgKi8pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgUXVlcnlMaW1pdENvbnN0cmFpbnR9IHRoYXQgb25seSByZXR1cm5zIHRoZSBsYXN0IG1hdGNoaW5nXG4gKiBkb2N1bWVudHMuXG4gKlxuICogWW91IG11c3Qgc3BlY2lmeSBhdCBsZWFzdCBvbmUgYG9yZGVyQnlgIGNsYXVzZSBmb3IgYGxpbWl0VG9MYXN0YCBxdWVyaWVzLFxuICogb3RoZXJ3aXNlIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93biBkdXJpbmcgZXhlY3V0aW9uLlxuICpcbiAqIEBwYXJhbSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0byByZXR1cm4uXG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCB7QGxpbmsgUXVlcnlMaW1pdENvbnN0cmFpbnR9LlxuICovIGZ1bmN0aW9uIGxpbWl0VG9MYXN0KGUpIHtcbiAgICByZXR1cm4gX19QUklWQVRFX3ZhbGlkYXRlUG9zaXRpdmVOdW1iZXIoXCJsaW1pdFRvTGFzdFwiLCBlKSwgUXVlcnlMaW1pdENvbnN0cmFpbnQuX2NyZWF0ZShcImxpbWl0VG9MYXN0XCIsIGUsIFwiTFwiIC8qIExpbWl0VHlwZS5MYXN0ICovKTtcbn1cblxuLyoqXG4gKiBBIGBRdWVyeVN0YXJ0QXRDb25zdHJhaW50YCBpcyB1c2VkIHRvIGV4Y2x1ZGUgZG9jdW1lbnRzIGZyb20gdGhlIHN0YXJ0IG9mIGFcbiAqIHJlc3VsdCBzZXQgcmV0dXJuZWQgYnkgYSBGaXJlc3RvcmUgcXVlcnkuXG4gKiBgUXVlcnlTdGFydEF0Q29uc3RyYWludGBzIGFyZSBjcmVhdGVkIGJ5IGludm9raW5nIHtAbGluayAoc3RhcnRBdDoxKX0gb3JcbiAqIHtAbGluayAoc3RhcnRBZnRlcjoxKX0gYW5kIGNhbiB0aGVuIGJlIHBhc3NlZCB0byB7QGxpbmsgKHF1ZXJ5OjEpfSB0byBjcmVhdGUgYVxuICogbmV3IHF1ZXJ5IGluc3RhbmNlIHRoYXQgYWxzbyBjb250YWlucyB0aGlzIGBRdWVyeVN0YXJ0QXRDb25zdHJhaW50YC5cbiAqLyBjbGFzcyBRdWVyeVN0YXJ0QXRDb25zdHJhaW50IGV4dGVuZHMgUXVlcnlDb25zdHJhaW50IHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBxdWVyeSBjb25zdHJhaW50ICovXG4gICAgZSwgdCwgbikge1xuICAgICAgICBzdXBlcigpLCB0aGlzLnR5cGUgPSBlLCB0aGlzLl9kb2NPckZpZWxkcyA9IHQsIHRoaXMuX2luY2x1c2l2ZSA9IG47XG4gICAgfVxuICAgIHN0YXRpYyBfY3JlYXRlKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeVN0YXJ0QXRDb25zdHJhaW50KGUsIHQsIG4pO1xuICAgIH1cbiAgICBfYXBwbHkoZSkge1xuICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX25ld1F1ZXJ5Qm91bmRGcm9tRG9jT3JGaWVsZHMoZSwgdGhpcy50eXBlLCB0aGlzLl9kb2NPckZpZWxkcywgdGhpcy5faW5jbHVzaXZlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeShlLmZpcmVzdG9yZSwgZS5jb252ZXJ0ZXIsIGZ1bmN0aW9uIF9fUFJJVkFURV9xdWVyeVdpdGhTdGFydEF0KGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgX19QUklWQVRFX1F1ZXJ5SW1wbChlLnBhdGgsIGUuY29sbGVjdGlvbkdyb3VwLCBlLmV4cGxpY2l0T3JkZXJCeS5zbGljZSgpLCBlLmZpbHRlcnMuc2xpY2UoKSwgZS5saW1pdCwgZS5saW1pdFR5cGUsIHQsIGUuZW5kQXQpO1xuICAgICAgICB9KGUuX3F1ZXJ5LCB0KSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzdGFydEF0KC4uLmUpIHtcbiAgICByZXR1cm4gUXVlcnlTdGFydEF0Q29uc3RyYWludC5fY3JlYXRlKFwic3RhcnRBdFwiLCBlLCBcbiAgICAvKmluY2x1c2l2ZT0qLyAhMCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0QWZ0ZXIoLi4uZSkge1xuICAgIHJldHVybiBRdWVyeVN0YXJ0QXRDb25zdHJhaW50Ll9jcmVhdGUoXCJzdGFydEFmdGVyXCIsIGUsIFxuICAgIC8qaW5jbHVzaXZlPSovICExKTtcbn1cblxuLyoqXG4gKiBBIGBRdWVyeUVuZEF0Q29uc3RyYWludGAgaXMgdXNlZCB0byBleGNsdWRlIGRvY3VtZW50cyBmcm9tIHRoZSBlbmQgb2YgYVxuICogcmVzdWx0IHNldCByZXR1cm5lZCBieSBhIEZpcmVzdG9yZSBxdWVyeS5cbiAqIGBRdWVyeUVuZEF0Q29uc3RyYWludGBzIGFyZSBjcmVhdGVkIGJ5IGludm9raW5nIHtAbGluayAoZW5kQXQ6MSl9IG9yXG4gKiB7QGxpbmsgKGVuZEJlZm9yZToxKX0gYW5kIGNhbiB0aGVuIGJlIHBhc3NlZCB0byB7QGxpbmsgKHF1ZXJ5OjEpfSB0byBjcmVhdGUgYSBuZXdcbiAqIHF1ZXJ5IGluc3RhbmNlIHRoYXQgYWxzbyBjb250YWlucyB0aGlzIGBRdWVyeUVuZEF0Q29uc3RyYWludGAuXG4gKi8gY2xhc3MgUXVlcnlFbmRBdENvbnN0cmFpbnQgZXh0ZW5kcyBRdWVyeUNvbnN0cmFpbnQge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIHF1ZXJ5IGNvbnN0cmFpbnQgKi9cbiAgICBlLCB0LCBuKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMudHlwZSA9IGUsIHRoaXMuX2RvY09yRmllbGRzID0gdCwgdGhpcy5faW5jbHVzaXZlID0gbjtcbiAgICB9XG4gICAgc3RhdGljIF9jcmVhdGUoZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5RW5kQXRDb25zdHJhaW50KGUsIHQsIG4pO1xuICAgIH1cbiAgICBfYXBwbHkoZSkge1xuICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX25ld1F1ZXJ5Qm91bmRGcm9tRG9jT3JGaWVsZHMoZSwgdGhpcy50eXBlLCB0aGlzLl9kb2NPckZpZWxkcywgdGhpcy5faW5jbHVzaXZlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeShlLmZpcmVzdG9yZSwgZS5jb252ZXJ0ZXIsIGZ1bmN0aW9uIF9fUFJJVkFURV9xdWVyeVdpdGhFbmRBdChlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9RdWVyeUltcGwoZS5wYXRoLCBlLmNvbGxlY3Rpb25Hcm91cCwgZS5leHBsaWNpdE9yZGVyQnkuc2xpY2UoKSwgZS5maWx0ZXJzLnNsaWNlKCksIGUubGltaXQsIGUubGltaXRUeXBlLCBlLnN0YXJ0QXQsIHQpO1xuICAgICAgICB9KGUuX3F1ZXJ5LCB0KSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlbmRCZWZvcmUoLi4uZSkge1xuICAgIHJldHVybiBRdWVyeUVuZEF0Q29uc3RyYWludC5fY3JlYXRlKFwiZW5kQmVmb3JlXCIsIGUsIFxuICAgIC8qaW5jbHVzaXZlPSovICExKTtcbn1cblxuZnVuY3Rpb24gZW5kQXQoLi4uZSkge1xuICAgIHJldHVybiBRdWVyeUVuZEF0Q29uc3RyYWludC5fY3JlYXRlKFwiZW5kQXRcIiwgZSwgXG4gICAgLyppbmNsdXNpdmU9Ki8gITApO1xufVxuXG4vKiogSGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGJvdW5kIGZyb20gYSBkb2N1bWVudCBvciBmaWVsZHMgKi8gZnVuY3Rpb24gX19QUklWQVRFX25ld1F1ZXJ5Qm91bmRGcm9tRG9jT3JGaWVsZHMoZSwgdCwgbiwgcikge1xuICAgIGlmIChuWzBdID0gdXRpbC5nZXRNb2R1bGFySW5zdGFuY2UoblswXSksIG5bMF0gaW5zdGFuY2VvZiBEb2N1bWVudFNuYXBzaG90JDEpIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfbmV3UXVlcnlCb3VuZEZyb21Eb2N1bWVudChlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgIGlmICghcikgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuTk9UX0ZPVU5ELCBgQ2FuJ3QgdXNlIGEgRG9jdW1lbnRTbmFwc2hvdCB0aGF0IGRvZXNuJ3QgZXhpc3QgZm9yICR7bn0oKS5gKTtcbiAgICAgICAgY29uc3QgcyA9IFtdO1xuICAgICAgICAvLyBCZWNhdXNlIHBlb3BsZSBleHBlY3QgdG8gY29udGludWUvZW5kIGEgcXVlcnkgYXQgdGhlIGV4YWN0IGRvY3VtZW50XG4gICAgICAgIC8vIHByb3ZpZGVkLCB3ZSBuZWVkIHRvIHVzZSB0aGUgaW1wbGljaXQgc29ydCBvcmRlciByYXRoZXIgdGhhbiB0aGUgZXhwbGljaXRcbiAgICAgICAgLy8gc29ydCBvcmRlciwgYmVjYXVzZSBpdCdzIGd1YXJhbnRlZWQgdG8gY29udGFpbiB0aGUgZG9jdW1lbnQga2V5LiBUaGF0IHdheVxuICAgICAgICAvLyB0aGUgcG9zaXRpb24gYmVjb21lcyB1bmFtYmlndW91cyBhbmQgdGhlIHF1ZXJ5IGNvbnRpbnVlcy9lbmRzIGV4YWN0bHkgYXRcbiAgICAgICAgLy8gdGhlIHByb3ZpZGVkIGRvY3VtZW50LiBXaXRob3V0IHRoZSBrZXkgKGJ5IHVzaW5nIHRoZSBleHBsaWNpdCBzb3J0XG4gICAgICAgIC8vIG9yZGVycyksIG11bHRpcGxlIGRvY3VtZW50cyBjb3VsZCBtYXRjaCB0aGUgcG9zaXRpb24sIHlpZWxkaW5nIGR1cGxpY2F0ZVxuICAgICAgICAvLyByZXN1bHRzLlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBfX1BSSVZBVEVfcXVlcnlOb3JtYWxpemVkT3JkZXJCeShlKSkgaWYgKG4uZmllbGQuaXNLZXlGaWVsZCgpKSBzLnB1c2goX19QUklWQVRFX3JlZlZhbHVlKHQsIHIua2V5KSk7IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZSA9IHIuZGF0YS5maWVsZChuLmZpZWxkKTtcbiAgICAgICAgICAgIGlmIChfX1BSSVZBVEVfaXNTZXJ2ZXJUaW1lc3RhbXAoZSkpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsICdJbnZhbGlkIHF1ZXJ5LiBZb3UgYXJlIHRyeWluZyB0byBzdGFydCBvciBlbmQgYSBxdWVyeSB1c2luZyBhIGRvY3VtZW50IGZvciB3aGljaCB0aGUgZmllbGQgXCInICsgbi5maWVsZCArICdcIiBpcyBhbiB1bmNvbW1pdHRlZCBzZXJ2ZXIgdGltZXN0YW1wLiAoU2luY2UgdGhlIHZhbHVlIG9mIHRoaXMgZmllbGQgaXMgdW5rbm93biwgeW91IGNhbm5vdCBzdGFydC9lbmQgYSBxdWVyeSB3aXRoIGl0LiknKTtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG4uZmllbGQuY2Fub25pY2FsU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIFlvdSBhcmUgdHJ5aW5nIHRvIHN0YXJ0IG9yIGVuZCBhIHF1ZXJ5IHVzaW5nIGEgZG9jdW1lbnQgZm9yIHdoaWNoIHRoZSBmaWVsZCAnJHtlfScgKHVzZWQgYXMgdGhlIG9yZGVyQnkpIGRvZXMgbm90IGV4aXN0LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcy5wdXNoKGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQm91bmQocywgaSk7XG4gICAgfVxuICAgIC8qKlxuICogQ29udmVydHMgYSBsaXN0IG9mIGZpZWxkIHZhbHVlcyB0byBhIGBCb3VuZGAgZm9yIHRoZSBnaXZlbiBxdWVyeS5cbiAqLyAoZS5fcXVlcnksIGUuZmlyZXN0b3JlLl9kYXRhYmFzZUlkLCB0LCBuWzBdLl9kb2N1bWVudCwgcik7XG4gICAge1xuICAgICAgICBjb25zdCBpID0gX19QUklWQVRFX25ld1VzZXJEYXRhUmVhZGVyKGUuZmlyZXN0b3JlKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9uZXdRdWVyeUJvdW5kRnJvbUZpZWxkcyhlLCB0LCBuLCByLCBpLCBzKSB7XG4gICAgICAgICAgICAvLyBVc2UgZXhwbGljaXQgb3JkZXIgYnkncyBiZWNhdXNlIGl0IGhhcyB0byBtYXRjaCB0aGUgcXVlcnkgdGhlIHVzZXIgbWFkZVxuICAgICAgICAgICAgY29uc3QgbyA9IGUuZXhwbGljaXRPcmRlckJ5O1xuICAgICAgICAgICAgaWYgKGkubGVuZ3RoID4gby5sZW5ndGgpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIGBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQgdG8gJHtyfSgpLiBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG9yZGVyQnkoKSBjbGF1c2VzYCk7XG4gICAgICAgICAgICBjb25zdCBfID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IGkubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gaVtzXTtcbiAgICAgICAgICAgICAgICBpZiAob1tzXS5maWVsZC5pc0tleUZpZWxkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGEpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIGBJbnZhbGlkIHF1ZXJ5LiBFeHBlY3RlZCBhIHN0cmluZyBmb3IgZG9jdW1lbnQgSUQgaW4gJHtyfSgpLCBidXQgZ290IGEgJHt0eXBlb2YgYX1gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfX1BSSVZBVEVfaXNDb2xsZWN0aW9uR3JvdXBRdWVyeShlKSAmJiAtMSAhPT0gYS5pbmRleE9mKFwiL1wiKSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgYSBjb2xsZWN0aW9uIGFuZCBvcmRlcmluZyBieSBkb2N1bWVudElkKCksIHRoZSB2YWx1ZSBwYXNzZWQgdG8gJHtyfSgpIG11c3QgYmUgYSBwbGFpbiBkb2N1bWVudCBJRCwgYnV0ICcke2F9JyBjb250YWlucyBhIHNsYXNoLmApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5wYXRoLmNoaWxkKFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKGEpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFEb2N1bWVudEtleS5pc0RvY3VtZW50S2V5KG4pKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyBhIGNvbGxlY3Rpb24gZ3JvdXAgYW5kIG9yZGVyaW5nIGJ5IGRvY3VtZW50SWQoKSwgdGhlIHZhbHVlIHBhc3NlZCB0byAke3J9KCkgbXVzdCByZXN1bHQgaW4gYSB2YWxpZCBkb2N1bWVudCBwYXRoLCBidXQgJyR7bn0nIGlzIG5vdCBiZWNhdXNlIGl0IGNvbnRhaW5zIGFuIG9kZCBudW1iZXIgb2Ygc2VnbWVudHMuYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgRG9jdW1lbnRLZXkobik7XG4gICAgICAgICAgICAgICAgICAgIF8ucHVzaChfX1BSSVZBVEVfcmVmVmFsdWUodCwgaSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBfX1BSSVZBVEVfcGFyc2VRdWVyeVZhbHVlKG4sIHIsIGEpO1xuICAgICAgICAgICAgICAgICAgICBfLnB1c2goZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCb3VuZChfLCBzKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gYGRvY3VtZW50SWRWYWx1ZWAgaW50byBhIGBSZWZlcmVuY2VWYWx1ZWAsIHRocm93aW5nXG4gKiBhcHByb3ByaWF0ZSBlcnJvcnMgaWYgdGhlIHZhbHVlIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYSBgRG9jdW1lbnRSZWZlcmVuY2VgXG4gKiBvciBgc3RyaW5nYCwgb3IgaWYgdGhlIHN0cmluZyBpcyBtYWxmb3JtZWQuXG4gKi8gKGUuX3F1ZXJ5LCBlLmZpcmVzdG9yZS5fZGF0YWJhc2VJZCwgaSwgdCwgbiwgcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfcGFyc2VEb2N1bWVudElkVmFsdWUoZSwgdCwgbikge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiAobiA9IHV0aWwuZ2V0TW9kdWxhckluc3RhbmNlKG4pKSkge1xuICAgICAgICBpZiAoXCJcIiA9PT0gbikgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIHdpdGggZG9jdW1lbnRJZCgpLCB5b3UgbXVzdCBwcm92aWRlIGEgdmFsaWQgZG9jdW1lbnQgSUQsIGJ1dCBpdCB3YXMgYW4gZW1wdHkgc3RyaW5nLlwiKTtcbiAgICAgICAgaWYgKCFfX1BSSVZBVEVfaXNDb2xsZWN0aW9uR3JvdXBRdWVyeSh0KSAmJiAtMSAhPT0gbi5pbmRleE9mKFwiL1wiKSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgYSBjb2xsZWN0aW9uIGJ5IGRvY3VtZW50SWQoKSwgeW91IG11c3QgcHJvdmlkZSBhIHBsYWluIGRvY3VtZW50IElELCBidXQgJyR7bn0nIGNvbnRhaW5zIGEgJy8nIGNoYXJhY3Rlci5gKTtcbiAgICAgICAgY29uc3QgciA9IHQucGF0aC5jaGlsZChSZXNvdXJjZVBhdGguZnJvbVN0cmluZyhuKSk7XG4gICAgICAgIGlmICghRG9jdW1lbnRLZXkuaXNEb2N1bWVudEtleShyKSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgYSBjb2xsZWN0aW9uIGdyb3VwIGJ5IGRvY3VtZW50SWQoKSwgdGhlIHZhbHVlIHByb3ZpZGVkIG11c3QgcmVzdWx0IGluIGEgdmFsaWQgZG9jdW1lbnQgcGF0aCwgYnV0ICcke3J9JyBpcyBub3QgYmVjYXVzZSBpdCBoYXMgYW4gb2RkIG51bWJlciBvZiBzZWdtZW50cyAoJHtyLmxlbmd0aH0pLmApO1xuICAgICAgICByZXR1cm4gX19QUklWQVRFX3JlZlZhbHVlKGUsIG5ldyBEb2N1bWVudEtleShyKSk7XG4gICAgfVxuICAgIGlmIChuIGluc3RhbmNlb2YgRG9jdW1lbnRSZWZlcmVuY2UpIHJldHVybiBfX1BSSVZBVEVfcmVmVmFsdWUoZSwgbi5fa2V5KTtcbiAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyB3aXRoIGRvY3VtZW50SWQoKSwgeW91IG11c3QgcHJvdmlkZSBhIHZhbGlkIHN0cmluZyBvciBhIERvY3VtZW50UmVmZXJlbmNlLCBidXQgaXQgd2FzOiAke19fUFJJVkFURV92YWx1ZURlc2NyaXB0aW9uKG4pfS5gKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCB0aGUgdmFsdWUgcGFzc2VkIGludG8gYSBkaXNqdW5jdGl2ZSBmaWx0ZXIgc2F0aXNmaWVzIGFsbFxuICogYXJyYXkgcmVxdWlyZW1lbnRzLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZURpc2p1bmN0aXZlRmlsdGVyRWxlbWVudHMoZSwgdCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlKSB8fCAwID09PSBlLmxlbmd0aCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgYEludmFsaWQgUXVlcnkuIEEgbm9uLWVtcHR5IGFycmF5IGlzIHJlcXVpcmVkIGZvciAnJHt0LnRvU3RyaW5nKCl9JyBmaWx0ZXJzLmApO1xufVxuXG4vKipcbiAqIEdpdmVuIGFuIG9wZXJhdG9yLCByZXR1cm5zIHRoZSBzZXQgb2Ygb3BlcmF0b3JzIHRoYXQgY2Fubm90IGJlIHVzZWQgd2l0aCBpdC5cbiAqXG4gKiBUaGlzIGlzIG5vdCBhIGNvbXByZWhlbnNpdmUgY2hlY2ssIGFuZCB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSByZW1vdmVkIGluIHRoZVxuICogbG9uZyB0ZXJtLiBWYWxpZGF0aW9ucyBzaG91bGQgb2NjdXIgaW4gdGhlIEZpcmVzdG9yZSBiYWNrZW5kLlxuICpcbiAqIE9wZXJhdG9ycyBpbiBhIHF1ZXJ5IG11c3QgYWRoZXJlIHRvIHRoZSBmb2xsb3dpbmcgc2V0IG9mIHJ1bGVzOlxuICogMS4gT25seSBvbmUgaW5lcXVhbGl0eSBwZXIgcXVlcnkuXG4gKiAyLiBgTk9UX0lOYCBjYW5ub3QgYmUgdXNlZCB3aXRoIGFycmF5LCBkaXNqdW5jdGl2ZSwgb3IgYE5PVF9FUVVBTGAgb3BlcmF0b3JzLlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZU5ld0ZpZWxkRmlsdGVyKGUsIHQpIHtcbiAgICBjb25zdCBuID0gZnVuY3Rpb24gX19QUklWQVRFX2ZpbmRPcEluc2lkZUZpbHRlcnMoZSwgdCkge1xuICAgICAgICBmb3IgKGNvbnN0IG4gb2YgZSkgZm9yIChjb25zdCBlIG9mIG4uZ2V0RmxhdHRlbmVkRmlsdGVycygpKSBpZiAodC5pbmRleE9mKGUub3ApID49IDApIHJldHVybiBlLm9wO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9KGUuZmlsdGVycywgZnVuY3Rpb24gX19QUklWQVRFX2NvbmZsaWN0aW5nT3BzKGUpIHtcbiAgICAgICAgc3dpdGNoIChlKSB7XG4gICAgICAgICAgY2FzZSBcIiE9XCIgLyogT3BlcmF0b3IuTk9UX0VRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiBbIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi8gLCBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyBdO1xuXG4gICAgICAgICAgY2FzZSBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIE9wZXJhdG9yLkFSUkFZX0NPTlRBSU5TX0FOWSAqLyA6XG4gICAgICAgICAgY2FzZSBcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIFsgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gXTtcblxuICAgICAgICAgIGNhc2UgXCJub3QtaW5cIiAvKiBPcGVyYXRvci5OT1RfSU4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIFsgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBPcGVyYXRvci5BUlJBWV9DT05UQUlOU19BTlkgKi8gLCBcImluXCIgLyogT3BlcmF0b3IuSU4gKi8gLCBcIm5vdC1pblwiIC8qIE9wZXJhdG9yLk5PVF9JTiAqLyAsIFwiIT1cIiAvKiBPcGVyYXRvci5OT1RfRVFVQUwgKi8gXTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9KHQub3ApKTtcbiAgICBpZiAobnVsbCAhPT0gbikgXG4gICAgLy8gU3BlY2lhbCBjYXNlIHdoZW4gaXQncyBhIGR1cGxpY2F0ZSBvcCB0byBnaXZlIGEgc2xpZ2h0bHkgY2xlYXJlciBlcnJvciBtZXNzYWdlLlxuICAgIHRocm93IG4gPT09IHQub3AgPyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gWW91IGNhbm5vdCB1c2UgbW9yZSB0aGFuIG9uZSAnJHt0Lm9wLnRvU3RyaW5nKCl9JyBmaWx0ZXIuYCkgOiBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgSW52YWxpZCBxdWVyeS4gWW91IGNhbm5vdCB1c2UgJyR7dC5vcC50b1N0cmluZygpfScgZmlsdGVycyB3aXRoICcke24udG9TdHJpbmcoKX0nIGZpbHRlcnMuYCk7XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZVF1ZXJ5RmlsdGVyQ29uc3RyYWludChlLCB0KSB7XG4gICAgaWYgKCEodCBpbnN0YW5jZW9mIFF1ZXJ5RmllbGRGaWx0ZXJDb25zdHJhaW50IHx8IHQgaW5zdGFuY2VvZiBRdWVyeUNvbXBvc2l0ZUZpbHRlckNvbnN0cmFpbnQpKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBgRnVuY3Rpb24gJHtlfSgpIHJlcXVpcmVzIEFwcGxpYWJsZUNvbnN0cmFpbnRzIGNyZWF0ZWQgd2l0aCBhIGNhbGwgdG8gJ3doZXJlKC4uLiknLCAnb3IoLi4uKScsIG9yICdhbmQoLi4uKScuYCk7XG59XG5cbmNsYXNzIEFic3RyYWN0VXNlckRhdGFXcml0ZXIge1xuICAgIGNvbnZlcnRWYWx1ZShlLCB0ID0gXCJub25lXCIpIHtcbiAgICAgICAgc3dpdGNoIChfX1BSSVZBVEVfdHlwZU9yZGVyKGUpKSB7XG4gICAgICAgICAgY2FzZSAwIC8qIFR5cGVPcmRlci5OdWxsVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICBjYXNlIDEgLyogVHlwZU9yZGVyLkJvb2xlYW5WYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gZS5ib29sZWFuVmFsdWU7XG5cbiAgICAgICAgICBjYXNlIDIgLyogVHlwZU9yZGVyLk51bWJlclZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiBfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKGUuaW50ZWdlclZhbHVlIHx8IGUuZG91YmxlVmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSAzIC8qIFR5cGVPcmRlci5UaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0VGltZXN0YW1wKGUudGltZXN0YW1wVmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSA0IC8qIFR5cGVPcmRlci5TZXJ2ZXJUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0U2VydmVyVGltZXN0YW1wKGUsIHQpO1xuXG4gICAgICAgICAgY2FzZSA1IC8qIFR5cGVPcmRlci5TdHJpbmdWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gZS5zdHJpbmdWYWx1ZTtcblxuICAgICAgICAgIGNhc2UgNiAvKiBUeXBlT3JkZXIuQmxvYlZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRCeXRlcyhfX1BSSVZBVEVfbm9ybWFsaXplQnl0ZVN0cmluZyhlLmJ5dGVzVmFsdWUpKTtcblxuICAgICAgICAgIGNhc2UgNyAvKiBUeXBlT3JkZXIuUmVmVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydFJlZmVyZW5jZShlLnJlZmVyZW5jZVZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgOCAvKiBUeXBlT3JkZXIuR2VvUG9pbnRWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0R2VvUG9pbnQoZS5nZW9Qb2ludFZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgOSAvKiBUeXBlT3JkZXIuQXJyYXlWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0QXJyYXkoZS5hcnJheVZhbHVlLCB0KTtcblxuICAgICAgICAgIGNhc2UgMTAgLyogVHlwZU9yZGVyLk9iamVjdFZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRPYmplY3QoZS5tYXBWYWx1ZSwgdCk7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgZmFpbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnZlcnRPYmplY3QoZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0T2JqZWN0TWFwKGUuZmllbGRzLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovICAgIGNvbnZlcnRPYmplY3RNYXAoZSwgdCA9IFwibm9uZVwiKSB7XG4gICAgICAgIGNvbnN0IG4gPSB7fTtcbiAgICAgICAgcmV0dXJuIGZvckVhY2goZSwgKChlLCByKSA9PiB7XG4gICAgICAgICAgICBuW2VdID0gdGhpcy5jb252ZXJ0VmFsdWUociwgdCk7XG4gICAgICAgIH0pKSwgbjtcbiAgICB9XG4gICAgY29udmVydEdlb1BvaW50KGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHZW9Qb2ludChfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKGUubGF0aXR1ZGUpLCBfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyKGUubG9uZ2l0dWRlKSk7XG4gICAgfVxuICAgIGNvbnZlcnRBcnJheShlLCB0KSB7XG4gICAgICAgIHJldHVybiAoZS52YWx1ZXMgfHwgW10pLm1hcCgoZSA9PiB0aGlzLmNvbnZlcnRWYWx1ZShlLCB0KSkpO1xuICAgIH1cbiAgICBjb252ZXJ0U2VydmVyVGltZXN0YW1wKGUsIHQpIHtcbiAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgY2FzZSBcInByZXZpb3VzXCI6XG4gICAgICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2dldFByZXZpb3VzVmFsdWUoZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBuID8gbnVsbCA6IHRoaXMuY29udmVydFZhbHVlKG4sIHQpO1xuXG4gICAgICAgICAgY2FzZSBcImVzdGltYXRlXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0VGltZXN0YW1wKF9fUFJJVkFURV9nZXRMb2NhbFdyaXRlVGltZShlKSk7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29udmVydFRpbWVzdGFtcChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfbm9ybWFsaXplVGltZXN0YW1wKGUpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcCh0LnNlY29uZHMsIHQubmFub3MpO1xuICAgIH1cbiAgICBjb252ZXJ0RG9jdW1lbnRLZXkoZSwgdCkge1xuICAgICAgICBjb25zdCBuID0gUmVzb3VyY2VQYXRoLmZyb21TdHJpbmcoZSk7XG4gICAgICAgIF9fUFJJVkFURV9oYXJkQXNzZXJ0KF9fUFJJVkFURV9pc1ZhbGlkUmVzb3VyY2VOYW1lKG4pKTtcbiAgICAgICAgY29uc3QgciA9IG5ldyBEYXRhYmFzZUlkKG4uZ2V0KDEpLCBuLmdldCgzKSksIGkgPSBuZXcgRG9jdW1lbnRLZXkobi5wb3BGaXJzdCg1KSk7XG4gICAgICAgIHJldHVybiByLmlzRXF1YWwodCkgfHwgXG4gICAgICAgIC8vIFRPRE8oYi82NDEzMDIwMik6IFNvbWVob3cgc3VwcG9ydCBmb3JlaWduIHJlZmVyZW5jZXMuXG4gICAgICAgIF9fUFJJVkFURV9sb2dFcnJvcihgRG9jdW1lbnQgJHtpfSBjb250YWlucyBhIGRvY3VtZW50IHJlZmVyZW5jZSB3aXRoaW4gYSBkaWZmZXJlbnQgZGF0YWJhc2UgKCR7ci5wcm9qZWN0SWR9LyR7ci5kYXRhYmFzZX0pIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQuIEl0IHdpbGwgYmUgdHJlYXRlZCBhcyBhIHJlZmVyZW5jZSBpbiB0aGUgY3VycmVudCBkYXRhYmFzZSAoJHt0LnByb2plY3RJZH0vJHt0LmRhdGFiYXNlfSkgaW5zdGVhZC5gKSwgXG4gICAgICAgIGk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDb252ZXJ0cyBjdXN0b20gbW9kZWwgb2JqZWN0IG9mIHR5cGUgVCBpbnRvIGBEb2N1bWVudERhdGFgIGJ5IGFwcGx5aW5nIHRoZVxuICogY29udmVydGVyIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiBjb252ZXJ0aW5nIHVzZXIgb2JqZWN0cyB0byBgRG9jdW1lbnREYXRhYFxuICogYmVjYXVzZSB3ZSB3YW50IHRvIHByb3ZpZGUgdGhlIHVzZXIgd2l0aCBhIG1vcmUgc3BlY2lmaWMgZXJyb3IgbWVzc2FnZSBpZlxuICogdGhlaXIgYHNldCgpYCBvciBmYWlscyBkdWUgdG8gaW52YWxpZCBkYXRhIG9yaWdpbmF0aW5nIGZyb20gYSBgdG9GaXJlc3RvcmUoKWBcbiAqIGNhbGwuXG4gKi8gZnVuY3Rpb24gX19QUklWQVRFX2FwcGx5RmlyZXN0b3JlRGF0YUNvbnZlcnRlcihlLCB0LCBuKSB7XG4gICAgbGV0IHI7XG4gICAgLy8gQ2FzdCB0byBgYW55YCBpbiBvcmRlciB0byBzYXRpc2Z5IHRoZSB1bmlvbiB0eXBlIGNvbnN0cmFpbnQgb25cbiAgICAvLyB0b0ZpcmVzdG9yZSgpLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgcmV0dXJuIHIgPSBlID8gbiAmJiAobi5tZXJnZSB8fCBuLm1lcmdlRmllbGRzKSA/IGUudG9GaXJlc3RvcmUodCwgbikgOiBlLnRvRmlyZXN0b3JlKHQpIDogdCwgXG4gICAgcjtcbn1cblxuY2xhc3MgX19QUklWQVRFX0xpdGVVc2VyRGF0YVdyaXRlciBleHRlbmRzIEFic3RyYWN0VXNlckRhdGFXcml0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5maXJlc3RvcmUgPSBlO1xuICAgIH1cbiAgICBjb252ZXJ0Qnl0ZXMoZSkge1xuICAgICAgICByZXR1cm4gbmV3IEJ5dGVzKGUpO1xuICAgIH1cbiAgICBjb252ZXJ0UmVmZXJlbmNlKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY29udmVydERvY3VtZW50S2V5KGUsIHRoaXMuZmlyZXN0b3JlLl9kYXRhYmFzZUlkKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudFJlZmVyZW5jZSh0aGlzLmZpcmVzdG9yZSwgLyogY29udmVydGVyPSAqLyBudWxsLCB0KTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENyZWF0ZSBhbiBBZ2dyZWdhdGVGaWVsZCBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBjb21wdXRlIHRoZSBzdW0gb2ZcbiAqIGEgc3BlY2lmaWVkIGZpZWxkIG92ZXIgYSByYW5nZSBvZiBkb2N1bWVudHMgaW4gdGhlIHJlc3VsdCBzZXQgb2YgYSBxdWVyeS5cbiAqIEBwYXJhbSBmaWVsZCBTcGVjaWZpZXMgdGhlIGZpZWxkIHRvIHN1bSBhY3Jvc3MgdGhlIHJlc3VsdCBzZXQuXG4gKi8gZnVuY3Rpb24gc3VtKGUpIHtcbiAgICByZXR1cm4gbmV3IEFnZ3JlZ2F0ZUZpZWxkKFwic3VtXCIsIF9fUFJJVkFURV9maWVsZFBhdGhGcm9tQXJndW1lbnQkMShcInN1bVwiLCBlKSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIEFnZ3JlZ2F0ZUZpZWxkIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbXB1dGUgdGhlIGF2ZXJhZ2Ugb2ZcbiAqIGEgc3BlY2lmaWVkIGZpZWxkIG92ZXIgYSByYW5nZSBvZiBkb2N1bWVudHMgaW4gdGhlIHJlc3VsdCBzZXQgb2YgYSBxdWVyeS5cbiAqIEBwYXJhbSBmaWVsZCBTcGVjaWZpZXMgdGhlIGZpZWxkIHRvIGF2ZXJhZ2UgYWNyb3NzIHRoZSByZXN1bHQgc2V0LlxuICovIGZ1bmN0aW9uIGF2ZXJhZ2UoZSkge1xuICAgIHJldHVybiBuZXcgQWdncmVnYXRlRmllbGQoXCJhdmdcIiwgX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Bcmd1bWVudCQxKFwiYXZlcmFnZVwiLCBlKSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIEFnZ3JlZ2F0ZUZpZWxkIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbXB1dGUgdGhlIGNvdW50IG9mXG4gKiBkb2N1bWVudHMgaW4gdGhlIHJlc3VsdCBzZXQgb2YgYSBxdWVyeS5cbiAqLyBmdW5jdGlvbiBjb3VudCgpIHtcbiAgICByZXR1cm4gbmV3IEFnZ3JlZ2F0ZUZpZWxkKFwiY291bnRcIik7XG59XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvICdBZ2dyZWdhdGVGaWVsZGAgaW5zdGFuY2VzIGZvciBlcXVhbGl0eS5cbiAqXG4gKiBAcGFyYW0gbGVmdCBDb21wYXJlIHRoaXMgQWdncmVnYXRlRmllbGQgdG8gdGhlIGByaWdodGAuXG4gKiBAcGFyYW0gcmlnaHQgQ29tcGFyZSB0aGlzIEFnZ3JlZ2F0ZUZpZWxkIHRvIHRoZSBgbGVmdGAuXG4gKi8gZnVuY3Rpb24gYWdncmVnYXRlRmllbGRFcXVhbChlLCB0KSB7XG4gICAgdmFyIG4sIHI7XG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBBZ2dyZWdhdGVGaWVsZCAmJiB0IGluc3RhbmNlb2YgQWdncmVnYXRlRmllbGQgJiYgZS5hZ2dyZWdhdGVUeXBlID09PSB0LmFnZ3JlZ2F0ZVR5cGUgJiYgKG51bGwgPT09IChuID0gZS5faW50ZXJuYWxGaWVsZFBhdGgpIHx8IHZvaWQgMCA9PT0gbiA/IHZvaWQgMCA6IG4uY2Fub25pY2FsU3RyaW5nKCkpID09PSAobnVsbCA9PT0gKHIgPSB0Ll9pbnRlcm5hbEZpZWxkUGF0aCkgfHwgdm9pZCAwID09PSByID8gdm9pZCAwIDogci5jYW5vbmljYWxTdHJpbmcoKSk7XG59XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIGBBZ2dyZWdhdGVRdWVyeVNuYXBzaG90YCBpbnN0YW5jZXMgZm9yIGVxdWFsaXR5LlxuICpcbiAqIFR3byBgQWdncmVnYXRlUXVlcnlTbmFwc2hvdGAgaW5zdGFuY2VzIGFyZSBjb25zaWRlcmVkIFwiZXF1YWxcIiBpZiB0aGV5IGhhdmVcbiAqIHVuZGVybHlpbmcgcXVlcmllcyB0aGF0IGNvbXBhcmUgZXF1YWwsIGFuZCB0aGUgc2FtZSBkYXRhLlxuICpcbiAqIEBwYXJhbSBsZWZ0IC0gVGhlIGZpcnN0IGBBZ2dyZWdhdGVRdWVyeVNuYXBzaG90YCB0byBjb21wYXJlLlxuICogQHBhcmFtIHJpZ2h0IC0gVGhlIHNlY29uZCBgQWdncmVnYXRlUXVlcnlTbmFwc2hvdGAgdG8gY29tcGFyZS5cbiAqXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIFwiZXF1YWxcIiwgYXMgZGVmaW5lZCBhYm92ZSwgb3IgYGZhbHNlYFxuICogb3RoZXJ3aXNlLlxuICovIGZ1bmN0aW9uIGFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RFcXVhbChlLCB0KSB7XG4gICAgcmV0dXJuIHF1ZXJ5RXF1YWwoZS5xdWVyeSwgdC5xdWVyeSkgJiYgdXRpbC5kZWVwRXF1YWwoZS5kYXRhKCksIHQuZGF0YSgpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogTWV0YWRhdGEgYWJvdXQgYSBzbmFwc2hvdCwgZGVzY3JpYmluZyB0aGUgc3RhdGUgb2YgdGhlIHNuYXBzaG90LlxuICovIGNsYXNzIFNuYXBzaG90TWV0YWRhdGEge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICB0aGlzLmhhc1BlbmRpbmdXcml0ZXMgPSBlLCB0aGlzLmZyb21DYWNoZSA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGBTbmFwc2hvdE1ldGFkYXRhYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIC0gVGhlIGBTbmFwc2hvdE1ldGFkYXRhYCB0byBjb21wYXJlIGFnYWluc3QuXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGBTbmFwc2hvdE1ldGFkYXRhYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqLyAgICBpc0VxdWFsKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzUGVuZGluZ1dyaXRlcyA9PT0gZS5oYXNQZW5kaW5nV3JpdGVzICYmIHRoaXMuZnJvbUNhY2hlID09PSBlLmZyb21DYWNoZTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBgRG9jdW1lbnRTbmFwc2hvdGAgY29udGFpbnMgZGF0YSByZWFkIGZyb20gYSBkb2N1bWVudCBpbiB5b3VyIEZpcmVzdG9yZVxuICogZGF0YWJhc2UuIFRoZSBkYXRhIGNhbiBiZSBleHRyYWN0ZWQgd2l0aCBgLmRhdGEoKWAgb3IgYC5nZXQoPGZpZWxkPilgIHRvXG4gKiBnZXQgYSBzcGVjaWZpYyBmaWVsZC5cbiAqXG4gKiBGb3IgYSBgRG9jdW1lbnRTbmFwc2hvdGAgdGhhdCBwb2ludHMgdG8gYSBub24tZXhpc3RpbmcgZG9jdW1lbnQsIGFueSBkYXRhXG4gKiBhY2Nlc3Mgd2lsbCByZXR1cm4gJ3VuZGVmaW5lZCcuIFlvdSBjYW4gdXNlIHRoZSBgZXhpc3RzKClgIG1ldGhvZCB0b1xuICogZXhwbGljaXRseSB2ZXJpZnkgYSBkb2N1bWVudCdzIGV4aXN0ZW5jZS5cbiAqLyBjbGFzcyBEb2N1bWVudFNuYXBzaG90IGV4dGVuZHMgRG9jdW1lbnRTbmFwc2hvdCQxIHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciBwcm90ZWN0ZWQgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0LCBuLCByLCBpLCBzKSB7XG4gICAgICAgIHN1cGVyKGUsIHQsIG4sIHIsIHMpLCB0aGlzLl9maXJlc3RvcmUgPSBlLCB0aGlzLl9maXJlc3RvcmVJbXBsID0gZSwgdGhpcy5tZXRhZGF0YSA9IGk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGRhdGEgZXhpc3RzLiBUcnVlIGlmIHRoZSBkb2N1bWVudCBleGlzdHMuXG4gICAgICovICAgIGV4aXN0cygpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmV4aXN0cygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgYXMgYW4gYE9iamVjdGAuIFJldHVybnMgYHVuZGVmaW5lZGAgaWZcbiAgICAgKiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIGBzZXJ2ZXJUaW1lc3RhbXAoKWAgdmFsdWVzIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW5cbiAgICAgKiBzZXQgdG8gdGhlaXIgZmluYWwgdmFsdWUgd2lsbCBiZSByZXR1cm5lZCBhcyBgbnVsbGAuIFlvdSBjYW4gb3ZlcnJpZGVcbiAgICAgKiB0aGlzIGJ5IHBhc3NpbmcgYW4gb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9wdGlvbnMgb2JqZWN0IHRvIGNvbmZpZ3VyZSBob3cgZGF0YSBpcyByZXRyaWV2ZWQgZnJvbVxuICAgICAqIHRoZSBzbmFwc2hvdCAoZm9yIGV4YW1wbGUgdGhlIGRlc2lyZWQgYmVoYXZpb3IgZm9yIHNlcnZlciB0aW1lc3RhbXBzIHRoYXRcbiAgICAgKiBoYXZlIG5vdCB5ZXQgYmVlbiBzZXQgdG8gdGhlaXIgZmluYWwgdmFsdWUpLlxuICAgICAqIEByZXR1cm5zIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgb3IgYHVuZGVmaW5lZGAgaWZcbiAgICAgKiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgKi8gICAgZGF0YShlID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuX2RvY3VtZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29udmVydGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHVzZSB0aGUgY29udmVydGVyIGFuZCBjcmVhdGUgYSBuZXcgRG9jdW1lbnRTbmFwc2hvdFxuICAgICAgICAgICAgICAgIC8vIGlmIGEgY29udmVydGVyIGhhcyBiZWVuIHByb3ZpZGVkLlxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgUXVlcnlEb2N1bWVudFNuYXBzaG90KHRoaXMuX2ZpcmVzdG9yZSwgdGhpcy5fdXNlckRhdGFXcml0ZXIsIHRoaXMuX2tleSwgdGhpcy5fZG9jdW1lbnQsIHRoaXMubWV0YWRhdGEsIFxuICAgICAgICAgICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRlci5mcm9tRmlyZXN0b3JlKHQsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJEYXRhV3JpdGVyLmNvbnZlcnRWYWx1ZSh0aGlzLl9kb2N1bWVudC5kYXRhLnZhbHVlLCBlLnNlcnZlclRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgZmllbGQgc3BlY2lmaWVkIGJ5IGBmaWVsZFBhdGhgLiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZVxuICAgICAqIGRvY3VtZW50IG9yIGZpZWxkIGRvZXNuJ3QgZXhpc3QuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCBhIGBzZXJ2ZXJUaW1lc3RhbXAoKWAgdGhhdCBoYXMgbm90IHlldCBiZWVuIHNldCB0b1xuICAgICAqIGl0cyBmaW5hbCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkIGFzIGBudWxsYC4gWW91IGNhbiBvdmVycmlkZSB0aGlzIGJ5XG4gICAgICogcGFzc2luZyBhbiBvcHRpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWVsZFBhdGggLSBUaGUgcGF0aCAoZm9yIGV4YW1wbGUgJ2Zvbycgb3IgJ2Zvby5iYXInKSB0byBhIHNwZWNpZmljXG4gICAgICogZmllbGQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvcHRpb25zIG9iamVjdCB0byBjb25maWd1cmUgaG93IHRoZSBmaWVsZCBpcyByZXRyaWV2ZWRcbiAgICAgKiBmcm9tIHRoZSBzbmFwc2hvdCAoZm9yIGV4YW1wbGUgdGhlIGRlc2lyZWQgYmVoYXZpb3IgZm9yIHNlcnZlciB0aW1lc3RhbXBzXG4gICAgICogdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBzZXQgdG8gdGhlaXIgZmluYWwgdmFsdWUpLlxuICAgICAqIEByZXR1cm5zIFRoZSBkYXRhIGF0IHRoZSBzcGVjaWZpZWQgZmllbGQgbG9jYXRpb24gb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2hcbiAgICAgKiBmaWVsZCBleGlzdHMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIC8vIFdlIGFyZSB1c2luZyBgYW55YCBoZXJlIHRvIGF2b2lkIGFuIGV4cGxpY2l0IGNhc3QgYnkgb3VyIHVzZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZ2V0KGUsIHQgPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5fZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9kb2N1bWVudC5kYXRhLmZpZWxkKF9fUFJJVkFURV9maWVsZFBhdGhGcm9tQXJndW1lbnQoXCJEb2N1bWVudFNuYXBzaG90LmdldFwiLCBlKSk7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gbikgcmV0dXJuIHRoaXMuX3VzZXJEYXRhV3JpdGVyLmNvbnZlcnRWYWx1ZShuLCB0LnNlcnZlclRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdGAgY29udGFpbnMgZGF0YSByZWFkIGZyb20gYSBkb2N1bWVudCBpbiB5b3VyXG4gKiBGaXJlc3RvcmUgZGF0YWJhc2UgYXMgcGFydCBvZiBhIHF1ZXJ5LiBUaGUgZG9jdW1lbnQgaXMgZ3VhcmFudGVlZCB0byBleGlzdFxuICogYW5kIGl0cyBkYXRhIGNhbiBiZSBleHRyYWN0ZWQgd2l0aCBgLmRhdGEoKWAgb3IgYC5nZXQoPGZpZWxkPilgIHRvIGdldCBhXG4gKiBzcGVjaWZpYyBmaWVsZC5cbiAqXG4gKiBBIGBRdWVyeURvY3VtZW50U25hcHNob3RgIG9mZmVycyB0aGUgc2FtZSBBUEkgc3VyZmFjZSBhcyBhXG4gKiBgRG9jdW1lbnRTbmFwc2hvdGAuIFNpbmNlIHF1ZXJ5IHJlc3VsdHMgY29udGFpbiBvbmx5IGV4aXN0aW5nIGRvY3VtZW50cywgdGhlXG4gKiBgZXhpc3RzYCBwcm9wZXJ0eSB3aWxsIGFsd2F5cyBiZSB0cnVlIGFuZCBgZGF0YSgpYCB3aWxsIG5ldmVyIHJldHVyblxuICogJ3VuZGVmaW5lZCcuXG4gKi8gY2xhc3MgUXVlcnlEb2N1bWVudFNuYXBzaG90IGV4dGVuZHMgRG9jdW1lbnRTbmFwc2hvdCB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IGFzIGFuIGBPYmplY3RgLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgYHNlcnZlclRpbWVzdGFtcCgpYCB2YWx1ZXMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlblxuICAgICAqIHNldCB0byB0aGVpciBmaW5hbCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkIGFzIGBudWxsYC4gWW91IGNhbiBvdmVycmlkZVxuICAgICAqIHRoaXMgYnkgcGFzc2luZyBhbiBvcHRpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb3B0aW9ucyBvYmplY3QgdG8gY29uZmlndXJlIGhvdyBkYXRhIGlzIHJldHJpZXZlZCBmcm9tXG4gICAgICogdGhlIHNuYXBzaG90IChmb3IgZXhhbXBsZSB0aGUgZGVzaXJlZCBiZWhhdmlvciBmb3Igc2VydmVyIHRpbWVzdGFtcHMgdGhhdFxuICAgICAqIGhhdmUgbm90IHlldCBiZWVuIHNldCB0byB0aGVpciBmaW5hbCB2YWx1ZSkuXG4gICAgICogQHJldHVybnMgQW4gYE9iamVjdGAgY29udGFpbmluZyBhbGwgZmllbGRzIGluIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBkYXRhKGUgPSB7fSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZGF0YShlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBgUXVlcnlTbmFwc2hvdGAgY29udGFpbnMgemVybyBvciBtb3JlIGBEb2N1bWVudFNuYXBzaG90YCBvYmplY3RzXG4gKiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdHMgb2YgYSBxdWVyeS4gVGhlIGRvY3VtZW50cyBjYW4gYmUgYWNjZXNzZWQgYXMgYW5cbiAqIGFycmF5IHZpYSB0aGUgYGRvY3NgIHByb3BlcnR5IG9yIGVudW1lcmF0ZWQgdXNpbmcgdGhlIGBmb3JFYWNoYCBtZXRob2QuIFRoZVxuICogbnVtYmVyIG9mIGRvY3VtZW50cyBjYW4gYmUgZGV0ZXJtaW5lZCB2aWEgdGhlIGBlbXB0eWAgYW5kIGBzaXplYFxuICogcHJvcGVydGllcy5cbiAqLyBjbGFzcyBRdWVyeVNuYXBzaG90IHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgdGhpcy5fZmlyZXN0b3JlID0gZSwgdGhpcy5fdXNlckRhdGFXcml0ZXIgPSB0LCB0aGlzLl9zbmFwc2hvdCA9IHIsIHRoaXMubWV0YWRhdGEgPSBuZXcgU25hcHNob3RNZXRhZGF0YShyLmhhc1BlbmRpbmdXcml0ZXMsIHIuZnJvbUNhY2hlKSwgXG4gICAgICAgIHRoaXMucXVlcnkgPSBuO1xuICAgIH1cbiAgICAvKiogQW4gYXJyYXkgb2YgYWxsIHRoZSBkb2N1bWVudHMgaW4gdGhlIGBRdWVyeVNuYXBzaG90YC4gKi8gICAgZ2V0IGRvY3MoKSB7XG4gICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgodCA9PiBlLnB1c2godCkpKSwgZTtcbiAgICB9XG4gICAgLyoqIFRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIGluIHRoZSBgUXVlcnlTbmFwc2hvdGAuICovICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc25hcHNob3QuZG9jcy5zaXplO1xuICAgIH1cbiAgICAvKiogVHJ1ZSBpZiB0aGVyZSBhcmUgbm8gZG9jdW1lbnRzIGluIHRoZSBgUXVlcnlTbmFwc2hvdGAuICovICAgIGdldCBlbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIDAgPT09IHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW51bWVyYXRlcyBhbGwgb2YgdGhlIGRvY3VtZW50cyBpbiB0aGUgYFF1ZXJ5U25hcHNob3RgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gQSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2l0aCBhIGBRdWVyeURvY3VtZW50U25hcHNob3RgIGZvclxuICAgICAqIGVhY2ggZG9jdW1lbnQgaW4gdGhlIHNuYXBzaG90LlxuICAgICAqIEBwYXJhbSB0aGlzQXJnIC0gVGhlIGB0aGlzYCBiaW5kaW5nIGZvciB0aGUgY2FsbGJhY2suXG4gICAgICovICAgIGZvckVhY2goZSwgdCkge1xuICAgICAgICB0aGlzLl9zbmFwc2hvdC5kb2NzLmZvckVhY2goKG4gPT4ge1xuICAgICAgICAgICAgZS5jYWxsKHQsIG5ldyBRdWVyeURvY3VtZW50U25hcHNob3QodGhpcy5fZmlyZXN0b3JlLCB0aGlzLl91c2VyRGF0YVdyaXRlciwgbi5rZXksIG4sIG5ldyBTbmFwc2hvdE1ldGFkYXRhKHRoaXMuX3NuYXBzaG90Lm11dGF0ZWRLZXlzLmhhcyhuLmtleSksIHRoaXMuX3NuYXBzaG90LmZyb21DYWNoZSksIHRoaXMucXVlcnkuY29udmVydGVyKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgZG9jdW1lbnRzIGNoYW5nZXMgc2luY2UgdGhlIGxhc3Qgc25hcHNob3QuIElmIHRoaXNcbiAgICAgKiBpcyB0aGUgZmlyc3Qgc25hcHNob3QsIGFsbCBkb2N1bWVudHMgd2lsbCBiZSBpbiB0aGUgbGlzdCBhcyAnYWRkZWQnXG4gICAgICogY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gYFNuYXBzaG90TGlzdGVuT3B0aW9uc2AgdGhhdCBjb250cm9sIHdoZXRoZXIgbWV0YWRhdGEtb25seVxuICAgICAqIGNoYW5nZXMgKGkuZS4gb25seSBgRG9jdW1lbnRTbmFwc2hvdC5tZXRhZGF0YWAgY2hhbmdlZCkgc2hvdWxkIHRyaWdnZXJcbiAgICAgKiBzbmFwc2hvdCBldmVudHMuXG4gICAgICovICAgIGRvY0NoYW5nZXMoZSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHQgPSAhIWUuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcztcbiAgICAgICAgaWYgKHQgJiYgdGhpcy5fc25hcHNob3QuZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXMpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIFwiVG8gaW5jbHVkZSBtZXRhZGF0YSBjaGFuZ2VzIHdpdGggeW91ciBkb2N1bWVudCBjaGFuZ2VzLCB5b3UgbXVzdCBhbHNvIHBhc3MgeyBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOnRydWUgfSB0byBvblNuYXBzaG90KCkuXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkQ2hhbmdlcyAmJiB0aGlzLl9jYWNoZWRDaGFuZ2VzSW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyA9PT0gdCB8fCAodGhpcy5fY2FjaGVkQ2hhbmdlcyA9IFxuICAgICAgICAvKiogQ2FsY3VsYXRlcyB0aGUgYXJyYXkgb2YgYERvY3VtZW50Q2hhbmdlYHMgZm9yIGEgZ2l2ZW4gYFZpZXdTbmFwc2hvdGAuICovXG4gICAgICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9jaGFuZ2VzRnJvbVNuYXBzaG90KGUsIHQpIHtcbiAgICAgICAgICAgIGlmIChlLl9zbmFwc2hvdC5vbGREb2NzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIGxldCB0ID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5fc25hcHNob3QuZG9jQ2hhbmdlcy5tYXAoKG4gPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdChlLl9maXJlc3RvcmUsIGUuX3VzZXJEYXRhV3JpdGVyLCBuLmRvYy5rZXksIG4uZG9jLCBuZXcgU25hcHNob3RNZXRhZGF0YShlLl9zbmFwc2hvdC5tdXRhdGVkS2V5cy5oYXMobi5kb2Mua2V5KSwgZS5fc25hcHNob3QuZnJvbUNhY2hlKSwgZS5xdWVyeS5jb252ZXJ0ZXIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5kb2MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvYzogcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZEluZGV4OiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGV4OiB0KytcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gQSBgRG9jdW1lbnRTZXRgIHRoYXQgaXMgdXBkYXRlZCBpbmNyZW1lbnRhbGx5IGFzIGNoYW5nZXMgYXJlIGFwcGxpZWQgdG8gdXNlXG4gICAgICAgICAgICAgICAgLy8gdG8gbG9va3VwIHRoZSBpbmRleCBvZiBhIGRvY3VtZW50LlxuICAgICAgICAgICAgICAgIGxldCBuID0gZS5fc25hcHNob3Qub2xkRG9jcztcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5fc25hcHNob3QuZG9jQ2hhbmdlcy5maWx0ZXIoKGUgPT4gdCB8fCAzIC8qIENoYW5nZVR5cGUuTWV0YWRhdGEgKi8gIT09IGUudHlwZSkpLm1hcCgodCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgUXVlcnlEb2N1bWVudFNuYXBzaG90KGUuX2ZpcmVzdG9yZSwgZS5fdXNlckRhdGFXcml0ZXIsIHQuZG9jLmtleSwgdC5kb2MsIG5ldyBTbmFwc2hvdE1ldGFkYXRhKGUuX3NuYXBzaG90Lm11dGF0ZWRLZXlzLmhhcyh0LmRvYy5rZXkpLCBlLl9zbmFwc2hvdC5mcm9tQ2FjaGUpLCBlLnF1ZXJ5LmNvbnZlcnRlcik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gLTEsIHMgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogQ2hhbmdlVHlwZS5BZGRlZCAqLyAhPT0gdC50eXBlICYmIChpID0gbi5pbmRleE9mKHQuZG9jLmtleSksIG4gPSBuLmRlbGV0ZSh0LmRvYy5rZXkpKSwgXG4gICAgICAgICAgICAgICAgICAgIDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovICE9PSB0LnR5cGUgJiYgKG4gPSBuLmFkZCh0LmRvYyksIHMgPSBuLmluZGV4T2YodC5kb2Mua2V5KSksIFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBfX1BSSVZBVEVfcmVzdWx0Q2hhbmdlVHlwZSh0LnR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jOiByLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkSW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJbmRleDogc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSh0aGlzLCB0KSwgdGhpcy5fY2FjaGVkQ2hhbmdlc0luY2x1ZGVNZXRhZGF0YUNoYW5nZXMgPSB0KSwgdGhpcy5fY2FjaGVkQ2hhbmdlcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV9yZXN1bHRDaGFuZ2VUeXBlKGUpIHtcbiAgICBzd2l0Y2ggKGUpIHtcbiAgICAgIGNhc2UgMCAvKiBDaGFuZ2VUeXBlLkFkZGVkICovIDpcbiAgICAgICAgcmV0dXJuIFwiYWRkZWRcIjtcblxuICAgICAgY2FzZSAyIC8qIENoYW5nZVR5cGUuTW9kaWZpZWQgKi8gOlxuICAgICAgY2FzZSAzIC8qIENoYW5nZVR5cGUuTWV0YWRhdGEgKi8gOlxuICAgICAgICByZXR1cm4gXCJtb2RpZmllZFwiO1xuXG4gICAgICBjYXNlIDEgLyogQ2hhbmdlVHlwZS5SZW1vdmVkICovIDpcbiAgICAgICAgcmV0dXJuIFwicmVtb3ZlZFwiO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFpbCgpO1xuICAgIH1cbn1cblxuLy8gVE9ETyhmaXJlc3RvcmVleHApOiBBZGQgdGVzdHMgZm9yIHNuYXBzaG90RXF1YWwgd2l0aCBkaWZmZXJlbnQgc25hcHNob3Rcbi8vIG1ldGFkYXRhXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgc25hcHNob3RzIGFyZSBlcXVhbC5cbiAqXG4gKiBAcGFyYW0gbGVmdCAtIEEgc25hcHNob3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSByaWdodCAtIEEgc25hcHNob3QgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHNuYXBzaG90cyBhcmUgZXF1YWwuXG4gKi8gZnVuY3Rpb24gc25hcHNob3RFcXVhbChlLCB0KSB7XG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBEb2N1bWVudFNuYXBzaG90ICYmIHQgaW5zdGFuY2VvZiBEb2N1bWVudFNuYXBzaG90ID8gZS5fZmlyZXN0b3JlID09PSB0Ll9maXJlc3RvcmUgJiYgZS5fa2V5LmlzRXF1YWwodC5fa2V5KSAmJiAobnVsbCA9PT0gZS5fZG9jdW1lbnQgPyBudWxsID09PSB0Ll9kb2N1bWVudCA6IGUuX2RvY3VtZW50LmlzRXF1YWwodC5fZG9jdW1lbnQpKSAmJiBlLl9jb252ZXJ0ZXIgPT09IHQuX2NvbnZlcnRlciA6IGUgaW5zdGFuY2VvZiBRdWVyeVNuYXBzaG90ICYmIHQgaW5zdGFuY2VvZiBRdWVyeVNuYXBzaG90ICYmIChlLl9maXJlc3RvcmUgPT09IHQuX2ZpcmVzdG9yZSAmJiBxdWVyeUVxdWFsKGUucXVlcnksIHQucXVlcnkpICYmIGUubWV0YWRhdGEuaXNFcXVhbCh0Lm1ldGFkYXRhKSAmJiBlLl9zbmFwc2hvdC5pc0VxdWFsKHQuX3NuYXBzaG90KSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlYWRzIHRoZSBkb2N1bWVudCByZWZlcnJlZCB0byBieSB0aGlzIGBEb2N1bWVudFJlZmVyZW5jZWAuXG4gKlxuICogTm90ZTogYGdldERvYygpYCBhdHRlbXB0cyB0byBwcm92aWRlIHVwLXRvLWRhdGUgZGF0YSB3aGVuIHBvc3NpYmxlIGJ5IHdhaXRpbmdcbiAqIGZvciBkYXRhIGZyb20gdGhlIHNlcnZlciwgYnV0IGl0IG1heSByZXR1cm4gY2FjaGVkIGRhdGEgb3IgZmFpbCBpZiB5b3UgYXJlXG4gKiBvZmZsaW5lIGFuZCB0aGUgc2VydmVyIGNhbm5vdCBiZSByZWFjaGVkLiBUbyBzcGVjaWZ5IHRoaXMgYmVoYXZpb3IsIGludm9rZVxuICoge0BsaW5rIGdldERvY0Zyb21DYWNoZX0gb3Ige0BsaW5rIGdldERvY0Zyb21TZXJ2ZXJ9LlxuICpcbiAqIEBwYXJhbSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIG9mIHRoZSBkb2N1bWVudCB0byBmZXRjaC5cbiAqIEByZXR1cm5zIEEgUHJvbWlzZSByZXNvbHZlZCB3aXRoIGEgYERvY3VtZW50U25hcHNob3RgIGNvbnRhaW5pbmcgdGhlXG4gKiBjdXJyZW50IGRvY3VtZW50IGNvbnRlbnRzLlxuICovIGZ1bmN0aW9uIGdldERvYyhlKSB7XG4gICAgZSA9IF9fUFJJVkFURV9jYXN0KGUsIERvY3VtZW50UmVmZXJlbmNlKTtcbiAgICBjb25zdCB0ID0gX19QUklWQVRFX2Nhc3QoZS5maXJlc3RvcmUsIEZpcmVzdG9yZSk7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRHZXREb2N1bWVudFZpYVNuYXBzaG90TGlzdGVuZXIoZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZCh0KSwgZS5fa2V5KS50aGVuKChuID0+IF9fUFJJVkFURV9jb252ZXJ0VG9Eb2NTbmFwc2hvdCh0LCBlLCBuKSkpO1xufVxuXG5jbGFzcyBfX1BSSVZBVEVfRXhwVXNlckRhdGFXcml0ZXIgZXh0ZW5kcyBBYnN0cmFjdFVzZXJEYXRhV3JpdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICAgIHN1cGVyKCksIHRoaXMuZmlyZXN0b3JlID0gZTtcbiAgICB9XG4gICAgY29udmVydEJ5dGVzKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCeXRlcyhlKTtcbiAgICB9XG4gICAgY29udmVydFJlZmVyZW5jZShlKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNvbnZlcnREb2N1bWVudEtleShlLCB0aGlzLmZpcmVzdG9yZS5fZGF0YWJhc2VJZCk7XG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRSZWZlcmVuY2UodGhpcy5maXJlc3RvcmUsIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgdCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlYWRzIHRoZSBkb2N1bWVudCByZWZlcnJlZCB0byBieSB0aGlzIGBEb2N1bWVudFJlZmVyZW5jZWAgZnJvbSBjYWNoZS5cbiAqIFJldHVybnMgYW4gZXJyb3IgaWYgdGhlIGRvY3VtZW50IGlzIG5vdCBjdXJyZW50bHkgY2FjaGVkLlxuICpcbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHJlc29sdmVkIHdpdGggYSBgRG9jdW1lbnRTbmFwc2hvdGAgY29udGFpbmluZyB0aGVcbiAqIGN1cnJlbnQgZG9jdW1lbnQgY29udGVudHMuXG4gKi8gZnVuY3Rpb24gZ2V0RG9jRnJvbUNhY2hlKGUpIHtcbiAgICBlID0gX19QUklWQVRFX2Nhc3QoZSwgRG9jdW1lbnRSZWZlcmVuY2UpO1xuICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfY2FzdChlLmZpcmVzdG9yZSwgRmlyZXN0b3JlKSwgbiA9IGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQodCksIHIgPSBuZXcgX19QUklWQVRFX0V4cFVzZXJEYXRhV3JpdGVyKHQpO1xuICAgIHJldHVybiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50R2V0RG9jdW1lbnRGcm9tTG9jYWxDYWNoZShuLCBlLl9rZXkpLnRoZW4oKG4gPT4gbmV3IERvY3VtZW50U25hcHNob3QodCwgciwgZS5fa2V5LCBuLCBuZXcgU25hcHNob3RNZXRhZGF0YShudWxsICE9PSBuICYmIG4uaGFzTG9jYWxNdXRhdGlvbnMsIFxuICAgIC8qIGZyb21DYWNoZT0gKi8gITApLCBlLmNvbnZlcnRlcikpKTtcbn1cblxuLyoqXG4gKiBSZWFkcyB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhpcyBgRG9jdW1lbnRSZWZlcmVuY2VgIGZyb20gdGhlIHNlcnZlci5cbiAqIFJldHVybnMgYW4gZXJyb3IgaWYgdGhlIG5ldHdvcmsgaXMgbm90IGF2YWlsYWJsZS5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCByZXNvbHZlZCB3aXRoIGEgYERvY3VtZW50U25hcHNob3RgIGNvbnRhaW5pbmcgdGhlXG4gKiBjdXJyZW50IGRvY3VtZW50IGNvbnRlbnRzLlxuICovIGZ1bmN0aW9uIGdldERvY0Zyb21TZXJ2ZXIoZSkge1xuICAgIGUgPSBfX1BSSVZBVEVfY2FzdChlLCBEb2N1bWVudFJlZmVyZW5jZSk7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9jYXN0KGUuZmlyZXN0b3JlLCBGaXJlc3RvcmUpO1xuICAgIHJldHVybiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50R2V0RG9jdW1lbnRWaWFTbmFwc2hvdExpc3RlbmVyKGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQodCksIGUuX2tleSwge1xuICAgICAgICBzb3VyY2U6IFwic2VydmVyXCJcbiAgICB9KS50aGVuKChuID0+IF9fUFJJVkFURV9jb252ZXJ0VG9Eb2NTbmFwc2hvdCh0LCBlLCBuKSkpO1xufVxuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBxdWVyeSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0cyBhcyBhIGBRdWVyeVNuYXBzaG90YC5cbiAqXG4gKiBOb3RlOiBgZ2V0RG9jcygpYCBhdHRlbXB0cyB0byBwcm92aWRlIHVwLXRvLWRhdGUgZGF0YSB3aGVuIHBvc3NpYmxlIGJ5XG4gKiB3YWl0aW5nIGZvciBkYXRhIGZyb20gdGhlIHNlcnZlciwgYnV0IGl0IG1heSByZXR1cm4gY2FjaGVkIGRhdGEgb3IgZmFpbCBpZlxuICogeW91IGFyZSBvZmZsaW5lIGFuZCB0aGUgc2VydmVyIGNhbm5vdCBiZSByZWFjaGVkLiBUbyBzcGVjaWZ5IHRoaXMgYmVoYXZpb3IsXG4gKiBpbnZva2Uge0BsaW5rIGdldERvY3NGcm9tQ2FjaGV9IG9yIHtAbGluayBnZXREb2NzRnJvbVNlcnZlcn0uXG4gKlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdpdGggdGhlIHJlc3VsdHMgb2YgdGhlIHF1ZXJ5LlxuICovIGZ1bmN0aW9uIGdldERvY3MoZSkge1xuICAgIGUgPSBfX1BSSVZBVEVfY2FzdChlLCBRdWVyeSk7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9jYXN0KGUuZmlyZXN0b3JlLCBGaXJlc3RvcmUpLCBuID0gZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZCh0KSwgciA9IG5ldyBfX1BSSVZBVEVfRXhwVXNlckRhdGFXcml0ZXIodCk7XG4gICAgcmV0dXJuIF9fUFJJVkFURV92YWxpZGF0ZUhhc0V4cGxpY2l0T3JkZXJCeUZvckxpbWl0VG9MYXN0KGUuX3F1ZXJ5KSwgX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudEdldERvY3VtZW50c1ZpYVNuYXBzaG90TGlzdGVuZXIobiwgZS5fcXVlcnkpLnRoZW4oKG4gPT4gbmV3IFF1ZXJ5U25hcHNob3QodCwgciwgZSwgbikpKTtcbn1cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcXVlcnkgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMgYXMgYSBgUXVlcnlTbmFwc2hvdGAgZnJvbSBjYWNoZS5cbiAqIFJldHVybnMgYW4gZW1wdHkgcmVzdWx0IHNldCBpZiBubyBkb2N1bWVudHMgbWF0Y2hpbmcgdGhlIHF1ZXJ5IGFyZSBjdXJyZW50bHlcbiAqIGNhY2hlZC5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmVzdWx0cyBvZiB0aGUgcXVlcnkuXG4gKi8gZnVuY3Rpb24gZ2V0RG9jc0Zyb21DYWNoZShlKSB7XG4gICAgZSA9IF9fUFJJVkFURV9jYXN0KGUsIFF1ZXJ5KTtcbiAgICBjb25zdCB0ID0gX19QUklWQVRFX2Nhc3QoZS5maXJlc3RvcmUsIEZpcmVzdG9yZSksIG4gPSBlbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkKHQpLCByID0gbmV3IF9fUFJJVkFURV9FeHBVc2VyRGF0YVdyaXRlcih0KTtcbiAgICByZXR1cm4gX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudEdldERvY3VtZW50c0Zyb21Mb2NhbENhY2hlKG4sIGUuX3F1ZXJ5KS50aGVuKChuID0+IG5ldyBRdWVyeVNuYXBzaG90KHQsIHIsIGUsIG4pKSk7XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHF1ZXJ5IGFuZCByZXR1cm5zIHRoZSByZXN1bHRzIGFzIGEgYFF1ZXJ5U25hcHNob3RgIGZyb20gdGhlXG4gKiBzZXJ2ZXIuIFJldHVybnMgYW4gZXJyb3IgaWYgdGhlIG5ldHdvcmsgaXMgbm90IGF2YWlsYWJsZS5cbiAqXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmVzdWx0cyBvZiB0aGUgcXVlcnkuXG4gKi8gZnVuY3Rpb24gZ2V0RG9jc0Zyb21TZXJ2ZXIoZSkge1xuICAgIGUgPSBfX1BSSVZBVEVfY2FzdChlLCBRdWVyeSk7XG4gICAgY29uc3QgdCA9IF9fUFJJVkFURV9jYXN0KGUuZmlyZXN0b3JlLCBGaXJlc3RvcmUpLCBuID0gZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZCh0KSwgciA9IG5ldyBfX1BSSVZBVEVfRXhwVXNlckRhdGFXcml0ZXIodCk7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRHZXREb2N1bWVudHNWaWFTbmFwc2hvdExpc3RlbmVyKG4sIGUuX3F1ZXJ5LCB7XG4gICAgICAgIHNvdXJjZTogXCJzZXJ2ZXJcIlxuICAgIH0pLnRoZW4oKG4gPT4gbmV3IFF1ZXJ5U25hcHNob3QodCwgciwgZSwgbikpKTtcbn1cblxuZnVuY3Rpb24gc2V0RG9jKGUsIHQsIG4pIHtcbiAgICBlID0gX19QUklWQVRFX2Nhc3QoZSwgRG9jdW1lbnRSZWZlcmVuY2UpO1xuICAgIGNvbnN0IHIgPSBfX1BSSVZBVEVfY2FzdChlLmZpcmVzdG9yZSwgRmlyZXN0b3JlKSwgaSA9IF9fUFJJVkFURV9hcHBseUZpcmVzdG9yZURhdGFDb252ZXJ0ZXIoZS5jb252ZXJ0ZXIsIHQsIG4pO1xuICAgIHJldHVybiBleGVjdXRlV3JpdGUociwgWyBfX1BSSVZBVEVfcGFyc2VTZXREYXRhKF9fUFJJVkFURV9uZXdVc2VyRGF0YVJlYWRlcihyKSwgXCJzZXREb2NcIiwgZS5fa2V5LCBpLCBudWxsICE9PSBlLmNvbnZlcnRlciwgbikudG9NdXRhdGlvbihlLl9rZXksIFByZWNvbmRpdGlvbi5ub25lKCkpIF0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVEb2MoZSwgdCwgbiwgLi4ucikge1xuICAgIGUgPSBfX1BSSVZBVEVfY2FzdChlLCBEb2N1bWVudFJlZmVyZW5jZSk7XG4gICAgY29uc3QgaSA9IF9fUFJJVkFURV9jYXN0KGUuZmlyZXN0b3JlLCBGaXJlc3RvcmUpLCBzID0gX19QUklWQVRFX25ld1VzZXJEYXRhUmVhZGVyKGkpO1xuICAgIGxldCBvO1xuICAgIG8gPSBcInN0cmluZ1wiID09IHR5cGVvZiAoXG4gICAgLy8gRm9yIENvbXBhdCB0eXBlcywgd2UgaGF2ZSB0byBcImV4dHJhY3RcIiB0aGUgdW5kZXJseWluZyB0eXBlcyBiZWZvcmVcbiAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgdCA9IHV0aWwuZ2V0TW9kdWxhckluc3RhbmNlKHQpKSB8fCB0IGluc3RhbmNlb2YgRmllbGRQYXRoID8gX19QUklWQVRFX3BhcnNlVXBkYXRlVmFyYXJncyhzLCBcInVwZGF0ZURvY1wiLCBlLl9rZXksIHQsIG4sIHIpIDogX19QUklWQVRFX3BhcnNlVXBkYXRlRGF0YShzLCBcInVwZGF0ZURvY1wiLCBlLl9rZXksIHQpO1xuICAgIHJldHVybiBleGVjdXRlV3JpdGUoaSwgWyBvLnRvTXV0YXRpb24oZS5fa2V5LCBQcmVjb25kaXRpb24uZXhpc3RzKCEwKSkgXSk7XG59XG5cbi8qKlxuICogRGVsZXRlcyB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhlIHNwZWNpZmllZCBgRG9jdW1lbnRSZWZlcmVuY2VgLlxuICpcbiAqIEBwYXJhbSByZWZlcmVuY2UgLSBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gZGVsZXRlLlxuICogQHJldHVybnMgQSBQcm9taXNlIHJlc29sdmVkIG9uY2UgdGhlIGRvY3VtZW50IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseVxuICogZGVsZXRlZCBmcm9tIHRoZSBiYWNrZW5kIChub3RlIHRoYXQgaXQgd29uJ3QgcmVzb2x2ZSB3aGlsZSB5b3UncmUgb2ZmbGluZSkuXG4gKi8gZnVuY3Rpb24gZGVsZXRlRG9jKGUpIHtcbiAgICByZXR1cm4gZXhlY3V0ZVdyaXRlKF9fUFJJVkFURV9jYXN0KGUuZmlyZXN0b3JlLCBGaXJlc3RvcmUpLCBbIG5ldyBfX1BSSVZBVEVfRGVsZXRlTXV0YXRpb24oZS5fa2V5LCBQcmVjb25kaXRpb24ubm9uZSgpKSBdKTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgZG9jdW1lbnQgdG8gc3BlY2lmaWVkIGBDb2xsZWN0aW9uUmVmZXJlbmNlYCB3aXRoIHRoZSBnaXZlbiBkYXRhLFxuICogYXNzaWduaW5nIGl0IGEgZG9jdW1lbnQgSUQgYXV0b21hdGljYWxseS5cbiAqXG4gKiBAcGFyYW0gcmVmZXJlbmNlIC0gQSByZWZlcmVuY2UgdG8gdGhlIGNvbGxlY3Rpb24gdG8gYWRkIHRoaXMgZG9jdW1lbnQgdG8uXG4gKiBAcGFyYW0gZGF0YSAtIEFuIE9iamVjdCBjb250YWluaW5nIHRoZSBkYXRhIGZvciB0aGUgbmV3IGRvY3VtZW50LlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgcmVzb2x2ZWQgd2l0aCBhIGBEb2N1bWVudFJlZmVyZW5jZWAgcG9pbnRpbmcgdG8gdGhlXG4gKiBuZXdseSBjcmVhdGVkIGRvY3VtZW50IGFmdGVyIGl0IGhhcyBiZWVuIHdyaXR0ZW4gdG8gdGhlIGJhY2tlbmQgKE5vdGUgdGhhdCBpdFxuICogd29uJ3QgcmVzb2x2ZSB3aGlsZSB5b3UncmUgb2ZmbGluZSkuXG4gKi8gZnVuY3Rpb24gYWRkRG9jKGUsIHQpIHtcbiAgICBjb25zdCBuID0gX19QUklWQVRFX2Nhc3QoZS5maXJlc3RvcmUsIEZpcmVzdG9yZSksIHIgPSBkb2MoZSksIGkgPSBfX1BSSVZBVEVfYXBwbHlGaXJlc3RvcmVEYXRhQ29udmVydGVyKGUuY29udmVydGVyLCB0KTtcbiAgICByZXR1cm4gZXhlY3V0ZVdyaXRlKG4sIFsgX19QUklWQVRFX3BhcnNlU2V0RGF0YShfX1BSSVZBVEVfbmV3VXNlckRhdGFSZWFkZXIoZS5maXJlc3RvcmUpLCBcImFkZERvY1wiLCByLl9rZXksIGksIG51bGwgIT09IGUuY29udmVydGVyLCB7fSkudG9NdXRhdGlvbihyLl9rZXksIFByZWNvbmRpdGlvbi5leGlzdHMoITEpKSBdKS50aGVuKCgoKSA9PiByKSk7XG59XG5cbmZ1bmN0aW9uIG9uU25hcHNob3QoZSwgLi4udCkge1xuICAgIHZhciBuLCByLCBpO1xuICAgIGUgPSB1dGlsLmdldE1vZHVsYXJJbnN0YW5jZShlKTtcbiAgICBsZXQgcyA9IHtcbiAgICAgICAgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczogITEsXG4gICAgICAgIHNvdXJjZTogXCJkZWZhdWx0XCJcbiAgICB9LCBvID0gMDtcbiAgICBcIm9iamVjdFwiICE9IHR5cGVvZiB0W29dIHx8IF9fUFJJVkFURV9pc1BhcnRpYWxPYnNlcnZlcih0W29dKSB8fCAocyA9IHRbb10sIG8rKyk7XG4gICAgY29uc3QgXyA9IHtcbiAgICAgICAgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczogcy5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzLFxuICAgICAgICBzb3VyY2U6IHMuc291cmNlXG4gICAgfTtcbiAgICBpZiAoX19QUklWQVRFX2lzUGFydGlhbE9ic2VydmVyKHRbb10pKSB7XG4gICAgICAgIGNvbnN0IGUgPSB0W29dO1xuICAgICAgICB0W29dID0gbnVsbCA9PT0gKG4gPSBlLm5leHQpIHx8IHZvaWQgMCA9PT0gbiA/IHZvaWQgMCA6IG4uYmluZChlKSwgdFtvICsgMV0gPSBudWxsID09PSAociA9IGUuZXJyb3IpIHx8IHZvaWQgMCA9PT0gciA/IHZvaWQgMCA6IHIuYmluZChlKSwgXG4gICAgICAgIHRbbyArIDJdID0gbnVsbCA9PT0gKGkgPSBlLmNvbXBsZXRlKSB8fCB2b2lkIDAgPT09IGkgPyB2b2lkIDAgOiBpLmJpbmQoZSk7XG4gICAgfVxuICAgIGxldCBhLCB1LCBjO1xuICAgIGlmIChlIGluc3RhbmNlb2YgRG9jdW1lbnRSZWZlcmVuY2UpIHUgPSBfX1BSSVZBVEVfY2FzdChlLmZpcmVzdG9yZSwgRmlyZXN0b3JlKSwgXG4gICAgYyA9IF9fUFJJVkFURV9uZXdRdWVyeUZvclBhdGgoZS5fa2V5LnBhdGgpLCBhID0ge1xuICAgICAgICBuZXh0OiBuID0+IHtcbiAgICAgICAgICAgIHRbb10gJiYgdFtvXShfX1BSSVZBVEVfY29udmVydFRvRG9jU25hcHNob3QodSwgZSwgbikpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogdFtvICsgMV0sXG4gICAgICAgIGNvbXBsZXRlOiB0W28gKyAyXVxuICAgIH07IGVsc2Uge1xuICAgICAgICBjb25zdCBuID0gX19QUklWQVRFX2Nhc3QoZSwgUXVlcnkpO1xuICAgICAgICB1ID0gX19QUklWQVRFX2Nhc3Qobi5maXJlc3RvcmUsIEZpcmVzdG9yZSksIGMgPSBuLl9xdWVyeTtcbiAgICAgICAgY29uc3QgciA9IG5ldyBfX1BSSVZBVEVfRXhwVXNlckRhdGFXcml0ZXIodSk7XG4gICAgICAgIGEgPSB7XG4gICAgICAgICAgICBuZXh0OiBlID0+IHtcbiAgICAgICAgICAgICAgICB0W29dICYmIHRbb10obmV3IFF1ZXJ5U25hcHNob3QodSwgciwgbiwgZSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiB0W28gKyAxXSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiB0W28gKyAyXVxuICAgICAgICB9LCBfX1BSSVZBVEVfdmFsaWRhdGVIYXNFeHBsaWNpdE9yZGVyQnlGb3JMaW1pdFRvTGFzdChlLl9xdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50TGlzdGVuKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgY29uc3QgaSA9IG5ldyBfX1BSSVZBVEVfQXN5bmNPYnNlcnZlcihyKSwgcyA9IG5ldyBfX1BSSVZBVEVfUXVlcnlMaXN0ZW5lcih0LCBpLCBuKTtcbiAgICAgICAgcmV0dXJuIGUuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBfX1BSSVZBVEVfZXZlbnRNYW5hZ2VyTGlzdGVuKGF3YWl0IF9fUFJJVkFURV9nZXRFdmVudE1hbmFnZXIoZSksIHMpKSksIFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBpLiRhKCksIGUuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiBfX1BSSVZBVEVfZXZlbnRNYW5hZ2VyVW5saXN0ZW4oYXdhaXQgX19QUklWQVRFX2dldEV2ZW50TWFuYWdlcihlKSwgcykpKTtcbiAgICAgICAgfTtcbiAgICB9KGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQodSksIGMsIF8sIGEpO1xufVxuXG5mdW5jdGlvbiBvblNuYXBzaG90c0luU3luYyhlLCB0KSB7XG4gICAgcmV0dXJuIF9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRBZGRTbmFwc2hvdHNJblN5bmNMaXN0ZW5lcihlbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkKGUgPSBfX1BSSVZBVEVfY2FzdChlLCBGaXJlc3RvcmUpKSwgX19QUklWQVRFX2lzUGFydGlhbE9ic2VydmVyKHQpID8gdCA6IHtcbiAgICAgICAgbmV4dDogdFxuICAgIH0pO1xufVxuXG4vKipcbiAqIExvY2FsbHkgd3JpdGVzIGBtdXRhdGlvbnNgIG9uIHRoZSBhc3luYyBxdWV1ZS5cbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGV4ZWN1dGVXcml0ZShlLCB0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRXcml0ZShlLCB0KSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgX19QUklWQVRFX0RlZmVycmVkO1xuICAgICAgICByZXR1cm4gZS5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoKGFzeW5jICgpID0+IF9fUFJJVkFURV9zeW5jRW5naW5lV3JpdGUoYXdhaXQgX19QUklWQVRFX2dldFN5bmNFbmdpbmUoZSksIHQsIG4pKSksIFxuICAgICAgICBuLnByb21pc2U7XG4gICAgfShlbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkKGUpLCB0KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHtAbGluayBWaWV3U25hcHNob3R9IHRoYXQgY29udGFpbnMgdGhlIHNpbmdsZSBkb2N1bWVudCBzcGVjaWZpZWQgYnkgYHJlZmBcbiAqIHRvIGEge0BsaW5rIERvY3VtZW50U25hcHNob3R9LlxuICovIGZ1bmN0aW9uIF9fUFJJVkFURV9jb252ZXJ0VG9Eb2NTbmFwc2hvdChlLCB0LCBuKSB7XG4gICAgY29uc3QgciA9IG4uZG9jcy5nZXQodC5fa2V5KSwgaSA9IG5ldyBfX1BSSVZBVEVfRXhwVXNlckRhdGFXcml0ZXIoZSk7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudFNuYXBzaG90KGUsIGksIHQuX2tleSwgciwgbmV3IFNuYXBzaG90TWV0YWRhdGEobi5oYXNQZW5kaW5nV3JpdGVzLCBuLmZyb21DYWNoZSksIHQuY29udmVydGVyKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyBpbiB0aGUgcmVzdWx0IHNldCBvZiB0aGUgZ2l2ZW4gcXVlcnlcbiAqIHdpdGhvdXQgYWN0dWFsbHkgZG93bmxvYWRpbmcgdGhlIGRvY3VtZW50cy5cbiAqXG4gKiBVc2luZyB0aGlzIGZ1bmN0aW9uIHRvIGNvdW50IHRoZSBkb2N1bWVudHMgaXMgZWZmaWNpZW50IGJlY2F1c2Ugb25seSB0aGVcbiAqIGZpbmFsIGNvdW50LCBub3QgdGhlIGRvY3VtZW50cycgZGF0YSwgaXMgZG93bmxvYWRlZC4gVGhpcyBmdW5jdGlvbiBjYW5cbiAqIGNvdW50IHRoZSBkb2N1bWVudHMgaW4gY2FzZXMgd2hlcmUgdGhlIHJlc3VsdCBzZXQgaXMgcHJvaGliaXRpdmVseSBsYXJnZSB0b1xuICogZG93bmxvYWQgZW50aXJlbHkgKHRob3VzYW5kcyBvZiBkb2N1bWVudHMpLlxuICpcbiAqIFRoZSByZXN1bHQgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyIGlzIHByZXNlbnRlZCwgdW5hbHRlcmVkLCB3aXRob3V0XG4gKiBjb25zaWRlcmluZyBhbnkgbG9jYWwgc3RhdGUuIFRoYXQgaXMsIGRvY3VtZW50cyBpbiB0aGUgbG9jYWwgY2FjaGUgYXJlIG5vdFxuICogdGFrZW4gaW50byBjb25zaWRlcmF0aW9uLCBuZWl0aGVyIGFyZSBsb2NhbCBtb2RpZmljYXRpb25zIG5vdCB5ZXRcbiAqIHN5bmNocm9uaXplZCB3aXRoIHRoZSBzZXJ2ZXIuIFByZXZpb3VzbHktZG93bmxvYWRlZCByZXN1bHRzLCBpZiBhbnksIGFyZSBub3RcbiAqIHVzZWQuIEV2ZXJ5IGludm9jYXRpb24gb2YgdGhpcyBmdW5jdGlvbiBuZWNlc3NhcmlseSBpbnZvbHZlcyBhIHJvdW5kIHRyaXAgdG9cbiAqIHRoZSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtIHF1ZXJ5IFRoZSBxdWVyeSB3aG9zZSByZXN1bHQgc2V0IHNpemUgaXMgY2FsY3VsYXRlZC5cbiAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgY291bnQ7IHRoZSBjb3VudCBjYW4gYmVcbiAqIHJldHJpZXZlZCBmcm9tIGBzbmFwc2hvdC5kYXRhKCkuY291bnRgLCB3aGVyZSBgc25hcHNob3RgIGlzIHRoZVxuICogYEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RgIHRvIHdoaWNoIHRoZSByZXR1cm5lZCBQcm9taXNlIHJlc29sdmVzLlxuICovIGZ1bmN0aW9uIGdldENvdW50RnJvbVNlcnZlcihlKSB7XG4gICAgcmV0dXJuIGdldEFnZ3JlZ2F0ZUZyb21TZXJ2ZXIoZSwge1xuICAgICAgICBjb3VudDogY291bnQoKVxuICAgIH0pO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNwZWNpZmllZCBhZ2dyZWdhdGlvbnMgb3ZlciB0aGUgZG9jdW1lbnRzIGluIHRoZSByZXN1bHRcbiAqIHNldCBvZiB0aGUgZ2l2ZW4gcXVlcnkgd2l0aG91dCBhY3R1YWxseSBkb3dubG9hZGluZyB0aGUgZG9jdW1lbnRzLlxuICpcbiAqIFVzaW5nIHRoaXMgZnVuY3Rpb24gdG8gcGVyZm9ybSBhZ2dyZWdhdGlvbnMgaXMgZWZmaWNpZW50IGJlY2F1c2Ugb25seSB0aGVcbiAqIGZpbmFsIGFnZ3JlZ2F0aW9uIHZhbHVlcywgbm90IHRoZSBkb2N1bWVudHMnIGRhdGEsIGFyZSBkb3dubG9hZGVkLiBUaGlzXG4gKiBmdW5jdGlvbiBjYW4gcGVyZm9ybSBhZ2dyZWdhdGlvbnMgb2YgdGhlIGRvY3VtZW50cyBpbiBjYXNlcyB3aGVyZSB0aGUgcmVzdWx0XG4gKiBzZXQgaXMgcHJvaGliaXRpdmVseSBsYXJnZSB0byBkb3dubG9hZCBlbnRpcmVseSAodGhvdXNhbmRzIG9mIGRvY3VtZW50cykuXG4gKlxuICogVGhlIHJlc3VsdCByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIgaXMgcHJlc2VudGVkLCB1bmFsdGVyZWQsIHdpdGhvdXRcbiAqIGNvbnNpZGVyaW5nIGFueSBsb2NhbCBzdGF0ZS4gVGhhdCBpcywgZG9jdW1lbnRzIGluIHRoZSBsb2NhbCBjYWNoZSBhcmUgbm90XG4gKiB0YWtlbiBpbnRvIGNvbnNpZGVyYXRpb24sIG5laXRoZXIgYXJlIGxvY2FsIG1vZGlmaWNhdGlvbnMgbm90IHlldFxuICogc3luY2hyb25pemVkIHdpdGggdGhlIHNlcnZlci4gUHJldmlvdXNseS1kb3dubG9hZGVkIHJlc3VsdHMsIGlmIGFueSwgYXJlIG5vdFxuICogdXNlZC4gRXZlcnkgaW52b2NhdGlvbiBvZiB0aGlzIGZ1bmN0aW9uIG5lY2Vzc2FyaWx5IGludm9sdmVzIGEgcm91bmQgdHJpcCB0b1xuICogdGhlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0gcXVlcnkgVGhlIHF1ZXJ5IHdob3NlIHJlc3VsdCBzZXQgaXMgYWdncmVnYXRlZCBvdmVyLlxuICogQHBhcmFtIGFnZ3JlZ2F0ZVNwZWMgQW4gYEFnZ3JlZ2F0ZVNwZWNgIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgYWdncmVnYXRlc1xuICogdG8gcGVyZm9ybSBvdmVyIHRoZSByZXN1bHQgc2V0LiBUaGUgQWdncmVnYXRlU3BlYyBzcGVjaWZpZXMgYWxpYXNlcyBmb3IgZWFjaFxuICogYWdncmVnYXRlLCB3aGljaCBjYW4gYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgYWdncmVnYXRlIHJlc3VsdC5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBhZ2dyZWdhdGVTbmFwc2hvdCA9IGF3YWl0IGdldEFnZ3JlZ2F0ZUZyb21TZXJ2ZXIocXVlcnksIHtcbiAqICAgY291bnRPZkRvY3M6IGNvdW50KCksXG4gKiAgIHRvdGFsSG91cnM6IHN1bSgnaG91cnMnKSxcbiAqICAgYXZlcmFnZVNjb3JlOiBhdmVyYWdlKCdzY29yZScpXG4gKiB9KTtcbiAqXG4gKiBjb25zdCBjb3VudE9mRG9jczogbnVtYmVyID0gYWdncmVnYXRlU25hcHNob3QuZGF0YSgpLmNvdW50T2ZEb2NzO1xuICogY29uc3QgdG90YWxIb3VyczogbnVtYmVyID0gYWdncmVnYXRlU25hcHNob3QuZGF0YSgpLnRvdGFsSG91cnM7XG4gKiBjb25zdCBhdmVyYWdlU2NvcmU6IG51bWJlciB8IG51bGwgPSBhZ2dyZWdhdGVTbmFwc2hvdC5kYXRhKCkuYXZlcmFnZVNjb3JlO1xuICogYGBgXG4gKi8gZnVuY3Rpb24gZ2V0QWdncmVnYXRlRnJvbVNlcnZlcihlLCB0KSB7XG4gICAgY29uc3QgbiA9IF9fUFJJVkFURV9jYXN0KGUuZmlyZXN0b3JlLCBGaXJlc3RvcmUpLCByID0gZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZChuKSwgaSA9IF9fUFJJVkFURV9tYXBUb0FycmF5KHQsICgoZSwgdCkgPT4gbmV3IF9fUFJJVkFURV9BZ2dyZWdhdGVJbXBsKHQsIGUuYWdncmVnYXRlVHlwZSwgZS5faW50ZXJuYWxGaWVsZFBhdGgpKSk7XG4gICAgLy8gUnVuIHRoZSBhZ2dyZWdhdGlvbiBhbmQgY29udmVydCB0aGUgcmVzdWx0c1xuICAgIHJldHVybiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50UnVuQWdncmVnYXRlUXVlcnkociwgZS5fcXVlcnksIGkpLnRoZW4oKHQgPT4gXG4gICAgLyoqXG4gKiBDb252ZXJ0cyB0aGUgY29yZSBhZ2dyZWdyYXRpb24gcmVzdWx0IHRvIGFuIGBBZ2dyZWdhdGVRdWVyeVNuYXBzaG90YFxuICogdGhhdCBjYW4gYmUgcmV0dXJuZWQgdG8gdGhlIGNvbnN1bWVyLlxuICogQHBhcmFtIHF1ZXJ5XG4gKiBAcGFyYW0gYWdncmVnYXRlUmVzdWx0IENvcmUgYWdncmVnYXRpb24gcmVzdWx0XG4gKiBAaW50ZXJuYWxcbiAqL1xuICAgIGZ1bmN0aW9uIF9fUFJJVkFURV9jb252ZXJ0VG9BZ2dyZWdhdGVRdWVyeVNuYXBzaG90KGUsIHQsIG4pIHtcbiAgICAgICAgY29uc3QgciA9IG5ldyBfX1BSSVZBVEVfRXhwVXNlckRhdGFXcml0ZXIoZSk7XG4gICAgICAgIHJldHVybiBuZXcgQWdncmVnYXRlUXVlcnlTbmFwc2hvdCh0LCByLCBuKTtcbiAgICB9XG4gICAgLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gKG4sIGUsIHQpKSk7XG59XG5cbmNsYXNzIF9fUFJJVkFURV9NZW1vcnlMb2NhbENhY2hlSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLmtpbmQgPSBcIm1lbW9yeVwiLCB0aGlzLl9vbmxpbmVDb21wb25lbnRQcm92aWRlciA9IG5ldyBPbmxpbmVDb21wb25lbnRQcm92aWRlciwgXG4gICAgICAgIChudWxsID09IGUgPyB2b2lkIDAgOiBlLmdhcmJhZ2VDb2xsZWN0b3IpID8gdGhpcy5fb2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyID0gZS5nYXJiYWdlQ29sbGVjdG9yLl9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIgOiB0aGlzLl9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIgPSBuZXcgTWVtb3J5T2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiB0aGlzLmtpbmRcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmNsYXNzIF9fUFJJVkFURV9QZXJzaXN0ZW50TG9jYWxDYWNoZUltcGwge1xuICAgIGNvbnN0cnVjdG9yKGUpIHtcbiAgICAgICAgbGV0IHQ7XG4gICAgICAgIHRoaXMua2luZCA9IFwicGVyc2lzdGVudFwiLCAobnVsbCA9PSBlID8gdm9pZCAwIDogZS50YWJNYW5hZ2VyKSA/IChlLnRhYk1hbmFnZXIuX2luaXRpYWxpemUoZSksIFxuICAgICAgICB0ID0gZS50YWJNYW5hZ2VyKSA6ICh0ID0gcGVyc2lzdGVudFNpbmdsZVRhYk1hbmFnZXIodm9pZCAwKSwgdC5faW5pdGlhbGl6ZShlKSksIFxuICAgICAgICB0aGlzLl9vbmxpbmVDb21wb25lbnRQcm92aWRlciA9IHQuX29ubGluZUNvbXBvbmVudFByb3ZpZGVyLCB0aGlzLl9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIgPSB0Ll9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXI7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtpbmQ6IHRoaXMua2luZFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX01lbW9yeUVhZ2VyR2FiYWdlQ29sbGVjdG9ySW1wbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMua2luZCA9IFwibWVtb3J5RWFnZXJcIiwgdGhpcy5fb2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyID0gbmV3IE1lbW9yeU9mZmxpbmVDb21wb25lbnRQcm92aWRlcjtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogdGhpcy5raW5kXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5jbGFzcyBfX1BSSVZBVEVfTWVtb3J5THJ1R2FiYWdlQ29sbGVjdG9ySW1wbCB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLmtpbmQgPSBcIm1lbW9yeUxydVwiLCB0aGlzLl9vZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIgPSBuZXcgX19QUklWQVRFX0xydUdjTWVtb3J5T2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyKGUpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiB0aGlzLmtpbmRcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgTWVtb3J5RWFnZXJHYXJiYWdlQ29sbGVjdG9yYC4gVGhpcyBpcyBhbHNvIHRoZVxuICogZGVmYXVsdCBnYXJiYWdlIGNvbGxlY3RvciB1bmxlc3MgaXQgaXMgZXhwbGljaXRseSBzcGVjaWZpZWQgb3RoZXJ3aXNlLlxuICovIGZ1bmN0aW9uIG1lbW9yeUVhZ2VyR2FyYmFnZUNvbGxlY3RvcigpIHtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9NZW1vcnlFYWdlckdhYmFnZUNvbGxlY3RvckltcGw7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgTWVtb3J5THJ1R2FyYmFnZUNvbGxlY3RvcmAuXG4gKlxuICogQSB0YXJnZXQgc2l6ZSBjYW4gYmUgc3BlY2lmaWVkIGFzIHBhcnQgb2YgdGhlIHNldHRpbmcgcGFyYW1ldGVyLiBUaGVcbiAqIGNvbGxlY3RvciB3aWxsIHN0YXJ0IGRlbGV0aW5nIGRvY3VtZW50cyBvbmNlIHRoZSBjYWNoZSBzaXplIGV4Y2VlZHNcbiAqIHRoZSBnaXZlbiBzaXplLiBUaGUgZGVmYXVsdCBjYWNoZSBzaXplIGlzIDQwTUIgKDQwICogMTAyNCAqIDEwMjQgYnl0ZXMpLlxuICovIGZ1bmN0aW9uIG1lbW9yeUxydUdhcmJhZ2VDb2xsZWN0b3IoZSkge1xuICAgIHJldHVybiBuZXcgX19QUklWQVRFX01lbW9yeUxydUdhYmFnZUNvbGxlY3RvckltcGwobnVsbCA9PSBlID8gdm9pZCAwIDogZS5jYWNoZVNpemVCeXRlcyk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgTWVtb3J5TG9jYWxDYWNoZWAuIFRoZSBpbnN0YW5jZSBjYW4gYmUgc2V0IHRvXG4gKiBgRmlyZXN0b3JlU2V0dGluZ3MuY2FjaGVgIHRvIHRlbGwgdGhlIFNESyB3aGljaCBjYWNoZSBsYXllciB0byB1c2UuXG4gKi8gZnVuY3Rpb24gbWVtb3J5TG9jYWxDYWNoZShlKSB7XG4gICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfTWVtb3J5TG9jYWxDYWNoZUltcGwoZSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgUGVyc2lzdGVudExvY2FsQ2FjaGVgLiBUaGUgaW5zdGFuY2UgY2FuIGJlIHNldCB0b1xuICogYEZpcmVzdG9yZVNldHRpbmdzLmNhY2hlYCB0byB0ZWxsIHRoZSBTREsgd2hpY2ggY2FjaGUgbGF5ZXIgdG8gdXNlLlxuICpcbiAqIFBlcnNpc3RlbnQgY2FjaGUgY2Fubm90IGJlIHVzZWQgaW4gYSBOb2RlLmpzIGVudmlyb25tZW50LlxuICovIGZ1bmN0aW9uIHBlcnNpc3RlbnRMb2NhbENhY2hlKGUpIHtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9QZXJzaXN0ZW50TG9jYWxDYWNoZUltcGwoZSk7XG59XG5cbmNsYXNzIF9fUFJJVkFURV9TaW5nbGVUYWJNYW5hZ2VySW1wbCB7XG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLmZvcmNlT3duZXJzaGlwID0gZSwgdGhpcy5raW5kID0gXCJwZXJzaXN0ZW50U2luZ2xlVGFiXCI7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtpbmQ6IHRoaXMua2luZFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi8gICAgX2luaXRpYWxpemUoZSkge1xuICAgICAgICB0aGlzLl9vbmxpbmVDb21wb25lbnRQcm92aWRlciA9IG5ldyBPbmxpbmVDb21wb25lbnRQcm92aWRlciwgdGhpcy5fb2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyID0gbmV3IF9fUFJJVkFURV9JbmRleGVkRGJPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIodGhpcy5fb25saW5lQ29tcG9uZW50UHJvdmlkZXIsIG51bGwgPT0gZSA/IHZvaWQgMCA6IGUuY2FjaGVTaXplQnl0ZXMsIHRoaXMuZm9yY2VPd25lcnNoaXApO1xuICAgIH1cbn1cblxuY2xhc3MgX19QUklWQVRFX011bHRpVGFiTWFuYWdlckltcGwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmtpbmQgPSBcIlBlcnNpc3RlbnRNdWx0aXBsZVRhYlwiO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiB0aGlzLmtpbmRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovICAgIF9pbml0aWFsaXplKGUpIHtcbiAgICAgICAgdGhpcy5fb25saW5lQ29tcG9uZW50UHJvdmlkZXIgPSBuZXcgT25saW5lQ29tcG9uZW50UHJvdmlkZXIsIHRoaXMuX29mZmxpbmVDb21wb25lbnRQcm92aWRlciA9IG5ldyBfX1BSSVZBVEVfTXVsdGlUYWJPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIodGhpcy5fb25saW5lQ29tcG9uZW50UHJvdmlkZXIsIG51bGwgPT0gZSA/IHZvaWQgMCA6IGUuY2FjaGVTaXplQnl0ZXMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBQZXJzaXN0ZW50U2luZ2xlVGFiTWFuYWdlcmAuXG4gKlxuICogQHBhcmFtIHNldHRpbmdzIENvbmZpZ3VyZXMgdGhlIGNyZWF0ZWQgdGFiIG1hbmFnZXIuXG4gKi8gZnVuY3Rpb24gcGVyc2lzdGVudFNpbmdsZVRhYk1hbmFnZXIoZSkge1xuICAgIHJldHVybiBuZXcgX19QUklWQVRFX1NpbmdsZVRhYk1hbmFnZXJJbXBsKG51bGwgPT0gZSA/IHZvaWQgMCA6IGUuZm9yY2VPd25lcnNoaXApO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYFBlcnNpc3RlbnRNdWx0aXBsZVRhYk1hbmFnZXJgLlxuICovIGZ1bmN0aW9uIHBlcnNpc3RlbnRNdWx0aXBsZVRhYk1hbmFnZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfTXVsdGlUYWJNYW5hZ2VySW1wbDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY29uc3QgRGUgPSB7XG4gICAgbWF4QXR0ZW1wdHM6IDVcbn07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgd3JpdGUgYmF0Y2gsIHVzZWQgdG8gcGVyZm9ybSBtdWx0aXBsZSB3cml0ZXMgYXMgYSBzaW5nbGUgYXRvbWljIHVuaXQuXG4gKlxuICogQSBgV3JpdGVCYXRjaGAgb2JqZWN0IGNhbiBiZSBhY3F1aXJlZCBieSBjYWxsaW5nIHtAbGluayB3cml0ZUJhdGNofS4gSXRcbiAqIHByb3ZpZGVzIG1ldGhvZHMgZm9yIGFkZGluZyB3cml0ZXMgdG8gdGhlIHdyaXRlIGJhdGNoLiBOb25lIG9mIHRoZSB3cml0ZXNcbiAqIHdpbGwgYmUgY29tbWl0dGVkIChvciB2aXNpYmxlIGxvY2FsbHkpIHVudGlsIHtAbGluayBXcml0ZUJhdGNoLmNvbW1pdH0gaXNcbiAqIGNhbGxlZC5cbiAqL1xuY2xhc3MgV3JpdGVCYXRjaCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMuX2ZpcmVzdG9yZSA9IGUsIHRoaXMuX2NvbW1pdEhhbmRsZXIgPSB0LCB0aGlzLl9tdXRhdGlvbnMgPSBbXSwgdGhpcy5fY29tbWl0dGVkID0gITEsIFxuICAgICAgICB0aGlzLl9kYXRhUmVhZGVyID0gX19QUklWQVRFX25ld1VzZXJEYXRhUmVhZGVyKGUpO1xuICAgIH1cbiAgICBzZXQoZSwgdCwgbikge1xuICAgICAgICB0aGlzLl92ZXJpZnlOb3RDb21taXR0ZWQoKTtcbiAgICAgICAgY29uc3QgciA9IF9fUFJJVkFURV92YWxpZGF0ZVJlZmVyZW5jZShlLCB0aGlzLl9maXJlc3RvcmUpLCBpID0gX19QUklWQVRFX2FwcGx5RmlyZXN0b3JlRGF0YUNvbnZlcnRlcihyLmNvbnZlcnRlciwgdCwgbiksIHMgPSBfX1BSSVZBVEVfcGFyc2VTZXREYXRhKHRoaXMuX2RhdGFSZWFkZXIsIFwiV3JpdGVCYXRjaC5zZXRcIiwgci5fa2V5LCBpLCBudWxsICE9PSByLmNvbnZlcnRlciwgbik7XG4gICAgICAgIHJldHVybiB0aGlzLl9tdXRhdGlvbnMucHVzaChzLnRvTXV0YXRpb24oci5fa2V5LCBQcmVjb25kaXRpb24ubm9uZSgpKSksIHRoaXM7XG4gICAgfVxuICAgIHVwZGF0ZShlLCB0LCBuLCAuLi5yKSB7XG4gICAgICAgIHRoaXMuX3ZlcmlmeU5vdENvbW1pdHRlZCgpO1xuICAgICAgICBjb25zdCBpID0gX19QUklWQVRFX3ZhbGlkYXRlUmVmZXJlbmNlKGUsIHRoaXMuX2ZpcmVzdG9yZSk7XG4gICAgICAgIC8vIEZvciBDb21wYXQgdHlwZXMsIHdlIGhhdmUgdG8gXCJleHRyYWN0XCIgdGhlIHVuZGVybHlpbmcgdHlwZXMgYmVmb3JlXG4gICAgICAgIC8vIHBlcmZvcm1pbmcgdmFsaWRhdGlvbi5cbiAgICAgICAgICAgICAgICBsZXQgcztcbiAgICAgICAgcmV0dXJuIHMgPSBcInN0cmluZ1wiID09IHR5cGVvZiAodCA9IHV0aWwuZ2V0TW9kdWxhckluc3RhbmNlKHQpKSB8fCB0IGluc3RhbmNlb2YgRmllbGRQYXRoID8gX19QUklWQVRFX3BhcnNlVXBkYXRlVmFyYXJncyh0aGlzLl9kYXRhUmVhZGVyLCBcIldyaXRlQmF0Y2gudXBkYXRlXCIsIGkuX2tleSwgdCwgbiwgcikgOiBfX1BSSVZBVEVfcGFyc2VVcGRhdGVEYXRhKHRoaXMuX2RhdGFSZWFkZXIsIFwiV3JpdGVCYXRjaC51cGRhdGVcIiwgaS5fa2V5LCB0KSwgXG4gICAgICAgIHRoaXMuX211dGF0aW9ucy5wdXNoKHMudG9NdXRhdGlvbihpLl9rZXksIFByZWNvbmRpdGlvbi5leGlzdHMoITApKSksIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgdGhlIGRvY3VtZW50IHJlZmVycmVkIHRvIGJ5IHRoZSBwcm92aWRlZCB7QGxpbmsgRG9jdW1lbnRSZWZlcmVuY2V9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50UmVmIC0gQSByZWZlcmVuY2UgdG8gdGhlIGRvY3VtZW50IHRvIGJlIGRlbGV0ZWQuXG4gICAgICogQHJldHVybnMgVGhpcyBgV3JpdGVCYXRjaGAgaW5zdGFuY2UuIFVzZWQgZm9yIGNoYWluaW5nIG1ldGhvZCBjYWxscy5cbiAgICAgKi8gICAgZGVsZXRlKGUpIHtcbiAgICAgICAgdGhpcy5fdmVyaWZ5Tm90Q29tbWl0dGVkKCk7XG4gICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfdmFsaWRhdGVSZWZlcmVuY2UoZSwgdGhpcy5fZmlyZXN0b3JlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211dGF0aW9ucyA9IHRoaXMuX211dGF0aW9ucy5jb25jYXQobmV3IF9fUFJJVkFURV9EZWxldGVNdXRhdGlvbih0Ll9rZXksIFByZWNvbmRpdGlvbi5ub25lKCkpKSwgXG4gICAgICAgIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbW1pdHMgYWxsIG9mIHRoZSB3cml0ZXMgaW4gdGhpcyB3cml0ZSBiYXRjaCBhcyBhIHNpbmdsZSBhdG9taWMgdW5pdC5cbiAgICAgKlxuICAgICAqIFRoZSByZXN1bHQgb2YgdGhlc2Ugd3JpdGVzIHdpbGwgb25seSBiZSByZWZsZWN0ZWQgaW4gZG9jdW1lbnQgcmVhZHMgdGhhdFxuICAgICAqIG9jY3VyIGFmdGVyIHRoZSByZXR1cm5lZCBwcm9taXNlIHJlc29sdmVzLiBJZiB0aGUgY2xpZW50IGlzIG9mZmxpbmUsIHRoZVxuICAgICAqIHdyaXRlIGZhaWxzLiBJZiB5b3Ugd291bGQgbGlrZSB0byBzZWUgbG9jYWwgbW9kaWZpY2F0aW9ucyBvciBidWZmZXIgd3JpdGVzXG4gICAgICogdW50aWwgdGhlIGNsaWVudCBpcyBvbmxpbmUsIHVzZSB0aGUgZnVsbCBGaXJlc3RvcmUgU0RLLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBgUHJvbWlzZWAgcmVzb2x2ZWQgb25jZSBhbGwgb2YgdGhlIHdyaXRlcyBpbiB0aGUgYmF0Y2ggaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bGx5IHdyaXR0ZW4gdG8gdGhlIGJhY2tlbmQgYXMgYW4gYXRvbWljIHVuaXQgKG5vdGUgdGhhdCBpdCB3b24ndFxuICAgICAqIHJlc29sdmUgd2hpbGUgeW91J3JlIG9mZmxpbmUpLlxuICAgICAqLyAgICBjb21taXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJpZnlOb3RDb21taXR0ZWQoKSwgdGhpcy5fY29tbWl0dGVkID0gITAsIHRoaXMuX211dGF0aW9ucy5sZW5ndGggPiAwID8gdGhpcy5fY29tbWl0SGFuZGxlcih0aGlzLl9tdXRhdGlvbnMpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIF92ZXJpZnlOb3RDb21taXR0ZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb21taXR0ZWQpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQSB3cml0ZSBiYXRjaCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgYWZ0ZXIgY29tbWl0KCkgaGFzIGJlZW4gY2FsbGVkLlwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9fUFJJVkFURV92YWxpZGF0ZVJlZmVyZW5jZShlLCB0KSB7XG4gICAgaWYgKChlID0gdXRpbC5nZXRNb2R1bGFySW5zdGFuY2UoZSkpLmZpcmVzdG9yZSAhPT0gdCkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJQcm92aWRlZCBkb2N1bWVudCByZWZlcmVuY2UgaXMgZnJvbSBhIGRpZmZlcmVudCBGaXJlc3RvcmUgaW5zdGFuY2UuXCIpO1xuICAgIHJldHVybiBlO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gVE9ETyhtcnNjaG1pZHQpIENvbnNpZGVyIHVzaW5nIGBCYXNlVHJhbnNhY3Rpb25gIGFzIHRoZSBiYXNlIGNsYXNzIGluIHRoZVxuLy8gbGVnYWN5IFNESy5cbi8qKlxuICogQSByZWZlcmVuY2UgdG8gYSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBUaGUgYFRyYW5zYWN0aW9uYCBvYmplY3QgcGFzc2VkIHRvIGEgdHJhbnNhY3Rpb24ncyBgdXBkYXRlRnVuY3Rpb25gIHByb3ZpZGVzXG4gKiB0aGUgbWV0aG9kcyB0byByZWFkIGFuZCB3cml0ZSBkYXRhIHdpdGhpbiB0aGUgdHJhbnNhY3Rpb24gY29udGV4dC4gU2VlXG4gKiB7QGxpbmsgcnVuVHJhbnNhY3Rpb259LlxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIHJlZmVyZW5jZSB0byBhIHRyYW5zYWN0aW9uLlxuICpcbiAqIFRoZSBgVHJhbnNhY3Rpb25gIG9iamVjdCBwYXNzZWQgdG8gYSB0cmFuc2FjdGlvbidzIGB1cGRhdGVGdW5jdGlvbmAgcHJvdmlkZXNcbiAqIHRoZSBtZXRob2RzIHRvIHJlYWQgYW5kIHdyaXRlIGRhdGEgd2l0aGluIHRoZSB0cmFuc2FjdGlvbiBjb250ZXh0LiBTZWVcbiAqIHtAbGluayBydW5UcmFuc2FjdGlvbn0uXG4gKi9cbmNsYXNzIFRyYW5zYWN0aW9uIGV4dGVuZHMgY2xhc3MgVHJhbnNhY3Rpb24kMSB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgICAgIHRoaXMuX2ZpcmVzdG9yZSA9IGUsIHRoaXMuX3RyYW5zYWN0aW9uID0gdCwgdGhpcy5fZGF0YVJlYWRlciA9IF9fUFJJVkFURV9uZXdVc2VyRGF0YVJlYWRlcihlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIGRvY3VtZW50IHJlZmVyZW5jZWQgYnkgdGhlIHByb3ZpZGVkIHtAbGluayBEb2N1bWVudFJlZmVyZW5jZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRSZWYgLSBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gYmUgcmVhZC5cbiAgICAgKiBAcmV0dXJucyBBIGBEb2N1bWVudFNuYXBzaG90YCB3aXRoIHRoZSByZWFkIGRhdGEuXG4gICAgICovICAgIGdldChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfdmFsaWRhdGVSZWZlcmVuY2UoZSwgdGhpcy5fZmlyZXN0b3JlKSwgbiA9IG5ldyBfX1BSSVZBVEVfTGl0ZVVzZXJEYXRhV3JpdGVyKHRoaXMuX2ZpcmVzdG9yZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbi5sb29rdXAoWyB0Ll9rZXkgXSkudGhlbigoZSA9PiB7XG4gICAgICAgICAgICBpZiAoIWUgfHwgMSAhPT0gZS5sZW5ndGgpIHJldHVybiBmYWlsKCk7XG4gICAgICAgICAgICBjb25zdCByID0gZVswXTtcbiAgICAgICAgICAgIGlmIChyLmlzRm91bmREb2N1bWVudCgpKSByZXR1cm4gbmV3IERvY3VtZW50U25hcHNob3QkMSh0aGlzLl9maXJlc3RvcmUsIG4sIHIua2V5LCByLCB0LmNvbnZlcnRlcik7XG4gICAgICAgICAgICBpZiAoci5pc05vRG9jdW1lbnQoKSkgcmV0dXJuIG5ldyBEb2N1bWVudFNuYXBzaG90JDEodGhpcy5fZmlyZXN0b3JlLCBuLCB0Ll9rZXksIG51bGwsIHQuY29udmVydGVyKTtcbiAgICAgICAgICAgIHRocm93IGZhaWwoKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzZXQoZSwgdCwgbikge1xuICAgICAgICBjb25zdCByID0gX19QUklWQVRFX3ZhbGlkYXRlUmVmZXJlbmNlKGUsIHRoaXMuX2ZpcmVzdG9yZSksIGkgPSBfX1BSSVZBVEVfYXBwbHlGaXJlc3RvcmVEYXRhQ29udmVydGVyKHIuY29udmVydGVyLCB0LCBuKSwgcyA9IF9fUFJJVkFURV9wYXJzZVNldERhdGEodGhpcy5fZGF0YVJlYWRlciwgXCJUcmFuc2FjdGlvbi5zZXRcIiwgci5fa2V5LCBpLCBudWxsICE9PSByLmNvbnZlcnRlciwgbik7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbi5zZXQoci5fa2V5LCBzKSwgdGhpcztcbiAgICB9XG4gICAgdXBkYXRlKGUsIHQsIG4sIC4uLnIpIHtcbiAgICAgICAgY29uc3QgaSA9IF9fUFJJVkFURV92YWxpZGF0ZVJlZmVyZW5jZShlLCB0aGlzLl9maXJlc3RvcmUpO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgbGV0IHM7XG4gICAgICAgIHJldHVybiBzID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgKHQgPSB1dGlsLmdldE1vZHVsYXJJbnN0YW5jZSh0KSkgfHwgdCBpbnN0YW5jZW9mIEZpZWxkUGF0aCA/IF9fUFJJVkFURV9wYXJzZVVwZGF0ZVZhcmFyZ3ModGhpcy5fZGF0YVJlYWRlciwgXCJUcmFuc2FjdGlvbi51cGRhdGVcIiwgaS5fa2V5LCB0LCBuLCByKSA6IF9fUFJJVkFURV9wYXJzZVVwZGF0ZURhdGEodGhpcy5fZGF0YVJlYWRlciwgXCJUcmFuc2FjdGlvbi51cGRhdGVcIiwgaS5fa2V5LCB0KSwgXG4gICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uLnVwZGF0ZShpLl9rZXksIHMpLCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIHRoZSBkb2N1bWVudCByZWZlcnJlZCB0byBieSB0aGUgcHJvdmlkZWQge0BsaW5rIERvY3VtZW50UmVmZXJlbmNlfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudFJlZiAtIEEgcmVmZXJlbmNlIHRvIHRoZSBkb2N1bWVudCB0byBiZSBkZWxldGVkLlxuICAgICAqIEByZXR1cm5zIFRoaXMgYFRyYW5zYWN0aW9uYCBpbnN0YW5jZS4gVXNlZCBmb3IgY2hhaW5pbmcgbWV0aG9kIGNhbGxzLlxuICAgICAqLyAgICBkZWxldGUoZSkge1xuICAgICAgICBjb25zdCB0ID0gX19QUklWQVRFX3ZhbGlkYXRlUmVmZXJlbmNlKGUsIHRoaXMuX2ZpcmVzdG9yZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbi5kZWxldGUodC5fa2V5KSwgdGhpcztcbiAgICB9XG59IHtcbiAgICAvLyBUaGlzIGNsYXNzIGltcGxlbWVudHMgdGhlIHNhbWUgbG9naWMgYXMgdGhlIFRyYW5zYWN0aW9uIEFQSSBpbiB0aGUgTGl0ZSBTREtcbiAgICAvLyBidXQgaXMgc3ViY2xhc3NlZCBpbiBvcmRlciB0byByZXR1cm4gaXRzIG93biBEb2N1bWVudFNuYXBzaG90IHR5cGVzLlxuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgICAgICBzdXBlcihlLCB0KSwgdGhpcy5fZmlyZXN0b3JlID0gZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIGRvY3VtZW50IHJlZmVyZW5jZWQgYnkgdGhlIHByb3ZpZGVkIHtAbGluayBEb2N1bWVudFJlZmVyZW5jZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRSZWYgLSBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gYmUgcmVhZC5cbiAgICAgKiBAcmV0dXJucyBBIGBEb2N1bWVudFNuYXBzaG90YCB3aXRoIHRoZSByZWFkIGRhdGEuXG4gICAgICovICAgIGdldChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBfX1BSSVZBVEVfdmFsaWRhdGVSZWZlcmVuY2UoZSwgdGhpcy5fZmlyZXN0b3JlKSwgbiA9IG5ldyBfX1BSSVZBVEVfRXhwVXNlckRhdGFXcml0ZXIodGhpcy5fZmlyZXN0b3JlKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldChlKS50aGVuKChlID0+IG5ldyBEb2N1bWVudFNuYXBzaG90KHRoaXMuX2ZpcmVzdG9yZSwgbiwgdC5fa2V5LCBlLl9kb2N1bWVudCwgbmV3IFNuYXBzaG90TWV0YWRhdGEoXG4gICAgICAgIC8qIGhhc1BlbmRpbmdXcml0ZXM9ICovICExLCBcbiAgICAgICAgLyogZnJvbUNhY2hlPSAqLyAhMSksIHQuY29udmVydGVyKSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgZ2l2ZW4gYHVwZGF0ZUZ1bmN0aW9uYCBhbmQgdGhlbiBhdHRlbXB0cyB0byBjb21taXQgdGhlIGNoYW5nZXNcbiAqIGFwcGxpZWQgd2l0aGluIHRoZSB0cmFuc2FjdGlvbi4gSWYgYW55IGRvY3VtZW50IHJlYWQgd2l0aGluIHRoZSB0cmFuc2FjdGlvblxuICogaGFzIGNoYW5nZWQsIENsb3VkIEZpcmVzdG9yZSByZXRyaWVzIHRoZSBgdXBkYXRlRnVuY3Rpb25gLiBJZiBpdCBmYWlscyB0b1xuICogY29tbWl0IGFmdGVyIDUgYXR0ZW1wdHMsIHRoZSB0cmFuc2FjdGlvbiBmYWlscy5cbiAqXG4gKiBUaGUgbWF4aW11bSBudW1iZXIgb2Ygd3JpdGVzIGFsbG93ZWQgaW4gYSBzaW5nbGUgdHJhbnNhY3Rpb24gaXMgNTAwLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgLSBBIHJlZmVyZW5jZSB0byB0aGUgRmlyZXN0b3JlIGRhdGFiYXNlIHRvIHJ1biB0aGlzXG4gKiB0cmFuc2FjdGlvbiBhZ2FpbnN0LlxuICogQHBhcmFtIHVwZGF0ZUZ1bmN0aW9uIC0gVGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2l0aGluIHRoZSB0cmFuc2FjdGlvblxuICogY29udGV4dC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb3B0aW9ucyBvYmplY3QgdG8gY29uZmlndXJlIG1heGltdW0gbnVtYmVyIG9mIGF0dGVtcHRzIHRvXG4gKiBjb21taXQuXG4gKiBAcmV0dXJucyBJZiB0aGUgdHJhbnNhY3Rpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseSBvciB3YXMgZXhwbGljaXRseSBhYm9ydGVkXG4gKiAodGhlIGB1cGRhdGVGdW5jdGlvbmAgcmV0dXJuZWQgYSBmYWlsZWQgcHJvbWlzZSksIHRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZVxuICogYHVwZGF0ZUZ1bmN0aW9uIGBpcyByZXR1cm5lZCBoZXJlLiBPdGhlcndpc2UsIGlmIHRoZSB0cmFuc2FjdGlvbiBmYWlsZWQsIGFcbiAqIHJlamVjdGVkIHByb21pc2Ugd2l0aCB0aGUgY29ycmVzcG9uZGluZyBmYWlsdXJlIGVycm9yIGlzIHJldHVybmVkLlxuICovIGZ1bmN0aW9uIHJ1blRyYW5zYWN0aW9uKGUsIHQsIG4pIHtcbiAgICBlID0gX19QUklWQVRFX2Nhc3QoZSwgRmlyZXN0b3JlKTtcbiAgICBjb25zdCByID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBEZSksIG4pO1xuICAgICFmdW5jdGlvbiBfX1BSSVZBVEVfdmFsaWRhdGVUcmFuc2FjdGlvbk9wdGlvbnMoZSkge1xuICAgICAgICBpZiAoZS5tYXhBdHRlbXB0cyA8IDEpIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDLklOVkFMSURfQVJHVU1FTlQsIFwiTWF4IGF0dGVtcHRzIG11c3QgYmUgYXQgbGVhc3QgMVwiKTtcbiAgICB9KHIpO1xuICAgIHJldHVybiBmdW5jdGlvbiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50VHJhbnNhY3Rpb24oZSwgdCwgbikge1xuICAgICAgICBjb25zdCByID0gbmV3IF9fUFJJVkFURV9EZWZlcnJlZDtcbiAgICAgICAgcmV0dXJuIGUuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gYXdhaXQgX19QUklWQVRFX2dldERhdGFzdG9yZShlKTtcbiAgICAgICAgICAgIG5ldyBfX1BSSVZBVEVfVHJhbnNhY3Rpb25SdW5uZXIoZS5hc3luY1F1ZXVlLCBpLCBuLCB0LCByKS5YYSgpO1xuICAgICAgICB9KSksIHIucHJvbWlzZTtcbiAgICB9KGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQoZSksIChuID0+IHQobmV3IFRyYW5zYWN0aW9uKGUsIG4pKSksIHIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc2VudGluZWwgZm9yIHVzZSB3aXRoIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHVwZGF0ZURvYzoxKX0gb3JcbiAqIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHNldERvYzoxKX0gd2l0aCBge21lcmdlOiB0cnVlfWAgdG8gbWFyayBhIGZpZWxkIGZvciBkZWxldGlvbi5cbiAqLyBmdW5jdGlvbiBkZWxldGVGaWVsZCgpIHtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9EZWxldGVGaWVsZFZhbHVlSW1wbChcImRlbGV0ZUZpZWxkXCIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzZW50aW5lbCB1c2VkIHdpdGgge0BsaW5rIEBmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSMoc2V0RG9jOjEpfSBvciB7QGxpbmsgQGZpcmViYXNlL2ZpcmVzdG9yZS9saXRlIyh1cGRhdGVEb2M6MSl9IHRvXG4gKiBpbmNsdWRlIGEgc2VydmVyLWdlbmVyYXRlZCB0aW1lc3RhbXAgaW4gdGhlIHdyaXR0ZW4gZGF0YS5cbiAqLyBmdW5jdGlvbiBzZXJ2ZXJUaW1lc3RhbXAoKSB7XG4gICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wRmllbGRWYWx1ZUltcGwoXCJzZXJ2ZXJUaW1lc3RhbXBcIik7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNwZWNpYWwgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIHtAbGluayBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHNldERvYzoxKX0gb3Ige0BsaW5rXG4gKiBAZmlyZWJhc2UvZmlyZXN0b3JlL2xpdGUjKHVwZGF0ZURvYzoxKX0gdGhhdCB0ZWxscyB0aGUgc2VydmVyIHRvIHVuaW9uIHRoZSBnaXZlbiBlbGVtZW50cyB3aXRoIGFueSBhcnJheVxuICogdmFsdWUgdGhhdCBhbHJlYWR5IGV4aXN0cyBvbiB0aGUgc2VydmVyLiBFYWNoIHNwZWNpZmllZCBlbGVtZW50IHRoYXQgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdCBpbiB0aGUgYXJyYXkgd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kLiBJZiB0aGUgZmllbGQgYmVpbmdcbiAqIG1vZGlmaWVkIGlzIG5vdCBhbHJlYWR5IGFuIGFycmF5IGl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCBhbiBhcnJheVxuICogY29udGFpbmluZyBleGFjdGx5IHRoZSBzcGVjaWZpZWQgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIGVsZW1lbnRzIC0gVGhlIGVsZW1lbnRzIHRvIHVuaW9uIGludG8gdGhlIGFycmF5LlxuICogQHJldHVybnMgVGhlIGBGaWVsZFZhbHVlYCBzZW50aW5lbCBmb3IgdXNlIGluIGEgY2FsbCB0byBgc2V0RG9jKClgIG9yXG4gKiBgdXBkYXRlRG9jKClgLlxuICovIGZ1bmN0aW9uIGFycmF5VW5pb24oLi4uZSkge1xuICAgIC8vIE5PVEU6IFdlIGRvbid0IGFjdHVhbGx5IHBhcnNlIHRoZSBkYXRhIHVudGlsIGl0J3MgdXNlZCBpbiBzZXQoKSBvclxuICAgIC8vIHVwZGF0ZSgpIHNpbmNlIHdlJ2QgbmVlZCB0aGUgRmlyZXN0b3JlIGluc3RhbmNlIHRvIGRvIHRoaXMuXG4gICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfQXJyYXlVbmlvbkZpZWxkVmFsdWVJbXBsKFwiYXJyYXlVbmlvblwiLCBlKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3BlY2lhbCB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHdpdGgge0BsaW5rIChzZXREb2M6MSl9IG9yIHtAbGlua1xuICogdXBkYXRlRG9jOjF9IHRoYXQgdGVsbHMgdGhlIHNlcnZlciB0byByZW1vdmUgdGhlIGdpdmVuIGVsZW1lbnRzIGZyb20gYW55XG4gKiBhcnJheSB2YWx1ZSB0aGF0IGFscmVhZHkgZXhpc3RzIG9uIHRoZSBzZXJ2ZXIuIEFsbCBpbnN0YW5jZXMgb2YgZWFjaCBlbGVtZW50XG4gKiBzcGVjaWZpZWQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGFycmF5LiBJZiB0aGUgZmllbGQgYmVpbmcgbW9kaWZpZWQgaXMgbm90XG4gKiBhbHJlYWR5IGFuIGFycmF5IGl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCBhbiBlbXB0eSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudHMgLSBUaGUgZWxlbWVudHMgdG8gcmVtb3ZlIGZyb20gdGhlIGFycmF5LlxuICogQHJldHVybnMgVGhlIGBGaWVsZFZhbHVlYCBzZW50aW5lbCBmb3IgdXNlIGluIGEgY2FsbCB0byBgc2V0RG9jKClgIG9yXG4gKiBgdXBkYXRlRG9jKClgXG4gKi8gZnVuY3Rpb24gYXJyYXlSZW1vdmUoLi4uZSkge1xuICAgIC8vIE5PVEU6IFdlIGRvbid0IGFjdHVhbGx5IHBhcnNlIHRoZSBkYXRhIHVudGlsIGl0J3MgdXNlZCBpbiBzZXQoKSBvclxuICAgIC8vIHVwZGF0ZSgpIHNpbmNlIHdlJ2QgbmVlZCB0aGUgRmlyZXN0b3JlIGluc3RhbmNlIHRvIGRvIHRoaXMuXG4gICAgcmV0dXJuIG5ldyBfX1BSSVZBVEVfQXJyYXlSZW1vdmVGaWVsZFZhbHVlSW1wbChcImFycmF5UmVtb3ZlXCIsIGUpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzcGVjaWFsIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCB7QGxpbmsgQGZpcmViYXNlL2ZpcmVzdG9yZS9saXRlIyhzZXREb2M6MSl9IG9yIHtAbGlua1xuICogQGZpcmViYXNlL2ZpcmVzdG9yZS9saXRlIyh1cGRhdGVEb2M6MSl9IHRoYXQgdGVsbHMgdGhlIHNlcnZlciB0byBpbmNyZW1lbnQgdGhlIGZpZWxkJ3MgY3VycmVudCB2YWx1ZSBieVxuICogdGhlIGdpdmVuIHZhbHVlLlxuICpcbiAqIElmIGVpdGhlciB0aGUgb3BlcmFuZCBvciB0aGUgY3VycmVudCBmaWVsZCB2YWx1ZSB1c2VzIGZsb2F0aW5nIHBvaW50XG4gKiBwcmVjaXNpb24sIGFsbCBhcml0aG1ldGljIGZvbGxvd3MgSUVFRSA3NTQgc2VtYW50aWNzLiBJZiBib3RoIHZhbHVlcyBhcmVcbiAqIGludGVnZXJzLCB2YWx1ZXMgb3V0c2lkZSBvZiBKYXZhU2NyaXB0J3Mgc2FmZSBudW1iZXIgcmFuZ2VcbiAqIChgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJgIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmApIGFyZSBhbHNvIHN1YmplY3QgdG9cbiAqIHByZWNpc2lvbiBsb3NzLiBGdXJ0aGVybW9yZSwgb25jZSBwcm9jZXNzZWQgYnkgdGhlIEZpcmVzdG9yZSBiYWNrZW5kLCBhbGxcbiAqIGludGVnZXIgb3BlcmF0aW9ucyBhcmUgY2FwcGVkIGJldHdlZW4gLTJeNjMgYW5kIDJeNjMtMS5cbiAqXG4gKiBJZiB0aGUgY3VycmVudCBmaWVsZCB2YWx1ZSBpcyBub3Qgb2YgdHlwZSBgbnVtYmVyYCwgb3IgaWYgdGhlIGZpZWxkIGRvZXMgbm90XG4gKiB5ZXQgZXhpc3QsIHRoZSB0cmFuc2Zvcm1hdGlvbiBzZXRzIHRoZSBmaWVsZCB0byB0aGUgZ2l2ZW4gdmFsdWUuXG4gKlxuICogQHBhcmFtIG4gLSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IGJ5LlxuICogQHJldHVybnMgVGhlIGBGaWVsZFZhbHVlYCBzZW50aW5lbCBmb3IgdXNlIGluIGEgY2FsbCB0byBgc2V0RG9jKClgIG9yXG4gKiBgdXBkYXRlRG9jKClgXG4gKi8gZnVuY3Rpb24gaW5jcmVtZW50KGUpIHtcbiAgICByZXR1cm4gbmV3IF9fUFJJVkFURV9OdW1lcmljSW5jcmVtZW50RmllbGRWYWx1ZUltcGwoXCJpbmNyZW1lbnRcIiwgZSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSB3cml0ZSBiYXRjaCwgdXNlZCBmb3IgcGVyZm9ybWluZyBtdWx0aXBsZSB3cml0ZXMgYXMgYSBzaW5nbGVcbiAqIGF0b21pYyBvcGVyYXRpb24uIFRoZSBtYXhpbXVtIG51bWJlciBvZiB3cml0ZXMgYWxsb3dlZCBpbiBhIHNpbmdsZSB7QGxpbmsgV3JpdGVCYXRjaH1cbiAqIGlzIDUwMC5cbiAqXG4gKiBVbmxpa2UgdHJhbnNhY3Rpb25zLCB3cml0ZSBiYXRjaGVzIGFyZSBwZXJzaXN0ZWQgb2ZmbGluZSBhbmQgdGhlcmVmb3JlIGFyZVxuICogcHJlZmVyYWJsZSB3aGVuIHlvdSBkb24ndCBuZWVkIHRvIGNvbmRpdGlvbiB5b3VyIHdyaXRlcyBvbiByZWFkIGRhdGEuXG4gKlxuICogQHJldHVybnMgQSB7QGxpbmsgV3JpdGVCYXRjaH0gdGhhdCBjYW4gYmUgdXNlZCB0byBhdG9taWNhbGx5IGV4ZWN1dGUgbXVsdGlwbGVcbiAqIHdyaXRlcy5cbiAqLyBmdW5jdGlvbiB3cml0ZUJhdGNoKGUpIHtcbiAgICByZXR1cm4gZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZChlID0gX19QUklWQVRFX2Nhc3QoZSwgRmlyZXN0b3JlKSksIG5ldyBXcml0ZUJhdGNoKGUsICh0ID0+IGV4ZWN1dGVXcml0ZShlLCB0KSkpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiBzZXRJbmRleENvbmZpZ3VyYXRpb24oZSwgdCkge1xuICAgIHZhciBuO1xuICAgIGNvbnN0IHIgPSBlbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkKGUgPSBfX1BSSVZBVEVfY2FzdChlLCBGaXJlc3RvcmUpKTtcbiAgICBpZiAoIXIuX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIgfHwgXCJtZW1vcnlcIiA9PT0gKG51bGwgPT09IChuID0gci5fdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlcikgfHwgdm9pZCAwID09PSBuID8gdm9pZCAwIDogbi5fb2ZmbGluZUtpbmQpKSBcbiAgICAvLyBQT1JUSU5HIE5PVEU6IFdlIGRvbid0IHJldHVybiBhbiBlcnJvciBpZiB0aGUgdXNlciBoYXMgbm90IGVuYWJsZWRcbiAgICAvLyBwZXJzaXN0ZW5jZSBzaW5jZSBgZW5hYmxlSW5kZXhlZGRiUGVyc2lzdGVuY2UoKWAgY2FuIGZhaWwgb24gdGhlIFdlYi5cbiAgICByZXR1cm4gX19QUklWQVRFX2xvZ1dhcm4oXCJDYW5ub3QgZW5hYmxlIGluZGV4ZXMgd2hlbiBwZXJzaXN0ZW5jZSBpcyBkaXNhYmxlZFwiKSwgXG4gICAgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgY29uc3QgaSA9IGZ1bmN0aW9uIF9fUFJJVkFURV9wYXJzZUluZGV4ZXMoZSkge1xuICAgICAgICBjb25zdCB0ID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IGZ1bmN0aW9uIF9fUFJJVkFURV90cnlQYXJzZUpzb24oZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCBcIkZhaWxlZCB0byBwYXJzZSBKU09OOiBcIiArIChudWxsID09IGUgPyB2b2lkIDAgOiBlLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfShlKSA6IGUsIG4gPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodC5pbmRleGVzKSkgZm9yIChjb25zdCBlIG9mIHQuaW5kZXhlcykge1xuICAgICAgICAgICAgY29uc3QgdCA9IF9fUFJJVkFURV90cnlHZXRTdHJpbmcoZSwgXCJjb2xsZWN0aW9uR3JvdXBcIiksIHIgPSBbXTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUuZmllbGRzKSkgZm9yIChjb25zdCB0IG9mIGUuZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IF9fUFJJVkFURV9maWVsZFBhdGhGcm9tRG90U2VwYXJhdGVkU3RyaW5nKFwic2V0SW5kZXhDb25maWd1cmF0aW9uXCIsIF9fUFJJVkFURV90cnlHZXRTdHJpbmcodCwgXCJmaWVsZFBhdGhcIikpO1xuICAgICAgICAgICAgICAgIFwiQ09OVEFJTlNcIiA9PT0gdC5hcnJheUNvbmZpZyA/IHIucHVzaChuZXcgSW5kZXhTZWdtZW50KGUsIDIgLyogSW5kZXhLaW5kLkNPTlRBSU5TICovKSkgOiBcIkFTQ0VORElOR1wiID09PSB0Lm9yZGVyID8gci5wdXNoKG5ldyBJbmRleFNlZ21lbnQoZSwgMCAvKiBJbmRleEtpbmQuQVNDRU5ESU5HICovKSkgOiBcIkRFU0NFTkRJTkdcIiA9PT0gdC5vcmRlciAmJiByLnB1c2gobmV3IEluZGV4U2VnbWVudChlLCAxIC8qIEluZGV4S2luZC5ERVNDRU5ESU5HICovKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuLnB1c2gobmV3IEZpZWxkSW5kZXgoRmllbGRJbmRleC5VTktOT1dOX0lELCB0LCByLCBJbmRleFN0YXRlLmVtcHR5KCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbjtcbiAgICB9KHQpO1xuICAgIHJldHVybiBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50U2V0SW5kZXhDb25maWd1cmF0aW9uKHIsIGkpO1xufVxuXG5mdW5jdGlvbiBfX1BSSVZBVEVfdHJ5R2V0U3RyaW5nKGUsIHQpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgZVt0XSkgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKEMuSU5WQUxJRF9BUkdVTUVOVCwgXCJNaXNzaW5nIHN0cmluZyB2YWx1ZSBmb3I6IFwiICsgdCk7XG4gICAgcmV0dXJuIGVbdF07XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgYFBlcnNpc3RlbnRDYWNoZUluZGV4TWFuYWdlcmAgZm9yIGNvbmZpZ3VyaW5nIHBlcnNpc3RlbnQgY2FjaGUgaW5kZXhlcyB1c2VkXG4gKiBmb3IgbG9jYWwgcXVlcnkgZXhlY3V0aW9uLlxuICpcbiAqIFRvIHVzZSwgY2FsbCBgZ2V0UGVyc2lzdGVudENhY2hlSW5kZXhNYW5hZ2VyKClgIHRvIGdldCBhbiBpbnN0YW5jZS5cbiAqLyBjbGFzcyBQZXJzaXN0ZW50Q2FjaGVJbmRleE1hbmFnZXIge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoZSkge1xuICAgICAgICB0aGlzLl9jbGllbnQgPSBlLCBcbiAgICAgICAgLyoqIEEgdHlwZSBzdHJpbmcgdG8gdW5pcXVlbHkgaWRlbnRpZnkgaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MuICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwiUGVyc2lzdGVudENhY2hlSW5kZXhNYW5hZ2VyXCI7XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIFBlcnNpc3RlbnRDYWNoZSBJbmRleCBNYW5hZ2VyIHVzZWQgYnkgdGhlIGdpdmVuIGBGaXJlc3RvcmVgXG4gKiBvYmplY3QuXG4gKlxuICogQHJldHVybiBUaGUgYFBlcnNpc3RlbnRDYWNoZUluZGV4TWFuYWdlcmAgaW5zdGFuY2UsIG9yIGBudWxsYCBpZiBsb2NhbFxuICogcGVyc2lzdGVudCBzdG9yYWdlIGlzIG5vdCBpbiB1c2UuXG4gKi8gZnVuY3Rpb24gZ2V0UGVyc2lzdGVudENhY2hlSW5kZXhNYW5hZ2VyKGUpIHtcbiAgICB2YXIgdDtcbiAgICBlID0gX19QUklWQVRFX2Nhc3QoZSwgRmlyZXN0b3JlKTtcbiAgICBjb25zdCBuID0gQ2UuZ2V0KGUpO1xuICAgIGlmIChuKSByZXR1cm4gbjtcbiAgICBjb25zdCByID0gZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZChlKTtcbiAgICBpZiAoXCJwZXJzaXN0ZW50XCIgIT09IChudWxsID09PSAodCA9IHIuX3VuaW5pdGlhbGl6ZWRDb21wb25lbnRzUHJvdmlkZXIpIHx8IHZvaWQgMCA9PT0gdCA/IHZvaWQgMCA6IHQuX29mZmxpbmVLaW5kKSkgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgaSA9IG5ldyBQZXJzaXN0ZW50Q2FjaGVJbmRleE1hbmFnZXIocik7XG4gICAgcmV0dXJuIENlLnNldChlLCBpKSwgaTtcbn1cblxuLyoqXG4gKiBFbmFibGVzIHRoZSBTREsgdG8gY3JlYXRlIHBlcnNpc3RlbnQgY2FjaGUgaW5kZXhlcyBhdXRvbWF0aWNhbGx5IGZvciBsb2NhbFxuICogcXVlcnkgZXhlY3V0aW9uIHdoZW4gdGhlIFNESyBiZWxpZXZlcyBjYWNoZSBpbmRleGVzIGNhbiBoZWxwIGltcHJvdmVcbiAqIHBlcmZvcm1hbmNlLlxuICpcbiAqIFRoaXMgZmVhdHVyZSBpcyBkaXNhYmxlZCBieSBkZWZhdWx0LlxuICovIGZ1bmN0aW9uIGVuYWJsZVBlcnNpc3RlbnRDYWNoZUluZGV4QXV0b0NyZWF0aW9uKGUpIHtcbiAgICBfX1BSSVZBVEVfc2V0UGVyc2lzdGVudENhY2hlSW5kZXhBdXRvQ3JlYXRpb25FbmFibGVkKGUsICEwKTtcbn1cblxuLyoqXG4gKiBTdG9wcyBjcmVhdGluZyBwZXJzaXN0ZW50IGNhY2hlIGluZGV4ZXMgYXV0b21hdGljYWxseSBmb3IgbG9jYWwgcXVlcnlcbiAqIGV4ZWN1dGlvbi4gVGhlIGluZGV4ZXMgd2hpY2ggaGF2ZSBiZWVuIGNyZWF0ZWQgYnkgY2FsbGluZ1xuICogYGVuYWJsZVBlcnNpc3RlbnRDYWNoZUluZGV4QXV0b0NyZWF0aW9uKClgIHN0aWxsIHRha2UgZWZmZWN0LlxuICovIGZ1bmN0aW9uIGRpc2FibGVQZXJzaXN0ZW50Q2FjaGVJbmRleEF1dG9DcmVhdGlvbihlKSB7XG4gICAgX19QUklWQVRFX3NldFBlcnNpc3RlbnRDYWNoZUluZGV4QXV0b0NyZWF0aW9uRW5hYmxlZChlLCAhMSk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgcGVyc2lzdGVudCBjYWNoZSBpbmRleGVzLlxuICpcbiAqIFBsZWFzZSBub3RlIHRoaXMgZnVuY3Rpb24gd2lsbCBhbHNvIGRlbGV0ZXMgaW5kZXhlcyBnZW5lcmF0ZWQgYnlcbiAqIGBzZXRJbmRleENvbmZpZ3VyYXRpb24oKWAsIHdoaWNoIGlzIGRlcHJlY2F0ZWQuXG4gKi8gZnVuY3Rpb24gZGVsZXRlQWxsUGVyc2lzdGVudENhY2hlSW5kZXhlcyhlKSB7XG4gICAgZS5fY2xpZW50LnZlcmlmeU5vdFRlcm1pbmF0ZWQoKTtcbiAgICBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50RGVsZXRlQWxsRmllbGRJbmRleGVzKGUuX2NsaWVudCkudGhlbigoZSA9PiBfX1BSSVZBVEVfbG9nRGVidWcoXCJkZWxldGluZyBhbGwgcGVyc2lzdGVudCBjYWNoZSBpbmRleGVzIHN1Y2NlZWRlZFwiKSkpLmNhdGNoKChlID0+IF9fUFJJVkFURV9sb2dXYXJuKFwiZGVsZXRpbmcgYWxsIHBlcnNpc3RlbnQgY2FjaGUgaW5kZXhlcyBmYWlsZWRcIiwgZSkpKTtcbn1cblxuZnVuY3Rpb24gX19QUklWQVRFX3NldFBlcnNpc3RlbnRDYWNoZUluZGV4QXV0b0NyZWF0aW9uRW5hYmxlZChlLCB0KSB7XG4gICAgZS5fY2xpZW50LnZlcmlmeU5vdFRlcm1pbmF0ZWQoKTtcbiAgICBfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50U2V0UGVyc2lzdGVudENhY2hlSW5kZXhBdXRvQ3JlYXRpb25FbmFibGVkKGUuX2NsaWVudCwgdCkudGhlbigoZSA9PiBfX1BSSVZBVEVfbG9nRGVidWcoYHNldHRpbmcgcGVyc2lzdGVudCBjYWNoZSBpbmRleCBhdXRvIGNyZWF0aW9uIGlzRW5hYmxlZD0ke3R9IHN1Y2NlZWRlZGApKSkuY2F0Y2goKGUgPT4gX19QUklWQVRFX2xvZ1dhcm4oYHNldHRpbmcgcGVyc2lzdGVudCBjYWNoZSBpbmRleCBhdXRvIGNyZWF0aW9uIGlzRW5hYmxlZD0ke3R9IGZhaWxlZGAsIGUpKSk7XG59XG5cbi8qKlxuICogTWFwcyBgRmlyZXN0b3JlYCBpbnN0YW5jZXMgdG8gdGhlaXIgY29ycmVzcG9uZGluZ1xuICogYFBlcnNpc3RlbnRDYWNoZUluZGV4TWFuYWdlcmAgaW5zdGFuY2VzLlxuICpcbiAqIFVzZSBhIGBXZWFrTWFwYCBzbyB0aGF0IHRoZSBtYXBwaW5nIHdpbGwgYmUgYXV0b21hdGljYWxseSBkcm9wcGVkIHdoZW4gdGhlXG4gKiBgRmlyZXN0b3JlYCBpbnN0YW5jZSBpcyBnYXJiYWdlIGNvbGxlY3RlZC4gVGhpcyBlbXVsYXRlcyBhIHByaXZhdGUgbWVtYmVyXG4gKiBhcyBkZXNjcmliZWQgaW4gaHR0cHM6Ly9nb28uZ2xlLzQ1NHl2dWcuXG4gKi8gY29uc3QgQ2UgPSBuZXcgV2Vha01hcDtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGludGVybmFsXG4gKiBAcHJpdmF0ZVxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICpcbiAqIFJldHVybnMgdGhlIGBRdWVyeVRhcmdldGAgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHF1ZXJ5LiBSZXR1cm5zIGBudWxsYFxuICogaWYgdGhlIEZpcmVzdG9yZSBjbGllbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBxdWVyeSBoYXMgbm90IGJlZW5cbiAqIGluaXRpYWxpemVkIG9yIGhhcyBiZWVuIHRlcm1pbmF0ZWQuXG4gKlxuICogQHBhcmFtIHF1ZXJ5IC0gVGhlIFF1ZXJ5IHRvIGNvbnZlcnQgdG8gcHJvdG8gcmVwcmVzZW50YXRpb24uXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBfaW50ZXJuYWxRdWVyeVRvUHJvdG9RdWVyeVRhcmdldChlKSB7XG4gICAgdmFyIHQ7XG4gICAgY29uc3QgbiA9IG51bGwgPT09ICh0ID0gZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZChfX1BSSVZBVEVfY2FzdChlLmZpcmVzdG9yZSwgRmlyZXN0b3JlKSkuX29ubGluZUNvbXBvbmVudHMpIHx8IHZvaWQgMCA9PT0gdCA/IHZvaWQgMCA6IHQuZGF0YXN0b3JlLnNlcmlhbGl6ZXI7XG4gICAgcmV0dXJuIHZvaWQgMCA9PT0gbiA/IG51bGwgOiBfX1BSSVZBVEVfdG9RdWVyeVRhcmdldChuLCBfX1BSSVZBVEVfcXVlcnlUb1RhcmdldChlLl9xdWVyeSkpLl90O1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogQHByaXZhdGVcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAqXG4gKiBSZXR1cm5zIGBSdW5BZ2dyZWdhdGlvblF1ZXJ5UmVxdWVzdGAgd2hpY2ggY29udGFpbnMgdGhlIHByb3RvIHJlcHJlc2VudGF0aW9uXG4gKiBvZiB0aGUgZ2l2ZW4gYWdncmVnYXRpb24gcXVlcnkgcmVxdWVzdC4gUmV0dXJucyBudWxsIGlmIHRoZSBGaXJlc3RvcmUgY2xpZW50XG4gKiBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIHF1ZXJ5IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCBvciBoYXMgYmVlblxuICogdGVybWluYXRlZC5cbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgUXVlcnkgdG8gY29udmVydCB0byBwcm90byByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSBhZ2dyZWdhdGVTcGVjIC0gVGhlIHNldCBvZiBhZ2dyZWdhdGlvbnMgYW5kIHRoZWlyIGFsaWFzZXMuXG4gKi8gZnVuY3Rpb24gX2ludGVybmFsQWdncmVnYXRpb25RdWVyeVRvUHJvdG9SdW5BZ2dyZWdhdGlvblF1ZXJ5UmVxdWVzdChlLCB0KSB7XG4gICAgdmFyIG47XG4gICAgY29uc3QgciA9IF9fUFJJVkFURV9tYXBUb0FycmF5KHQsICgoZSwgdCkgPT4gbmV3IF9fUFJJVkFURV9BZ2dyZWdhdGVJbXBsKHQsIGUuYWdncmVnYXRlVHlwZSwgZS5faW50ZXJuYWxGaWVsZFBhdGgpKSksIGkgPSBudWxsID09PSAobiA9IGVuc3VyZUZpcmVzdG9yZUNvbmZpZ3VyZWQoX19QUklWQVRFX2Nhc3QoZS5maXJlc3RvcmUsIEZpcmVzdG9yZSkpLl9vbmxpbmVDb21wb25lbnRzKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLmRhdGFzdG9yZS5zZXJpYWxpemVyO1xuICAgIHJldHVybiB2b2lkIDAgPT09IGkgPyBudWxsIDogX19QUklWQVRFX3RvUnVuQWdncmVnYXRpb25RdWVyeVJlcXVlc3QoaSwgX19QUklWQVRFX3F1ZXJ5VG9BZ2dyZWdhdGVUYXJnZXQoZS5fcXVlcnkpLCByLCBcbiAgICAvKiBza2lwQWxpYXNpbmc9ICovICEwKS5yZXF1ZXN0O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUZXN0aW5nIGhvb2tzIGZvciB1c2UgYnkgRmlyZXN0b3JlJ3MgaW50ZWdyYXRpb24gdGVzdCBzdWl0ZSB0byByZWFjaCBpbnRvIHRoZVxuICogU0RLIGludGVybmFscyB0byB2YWxpZGF0ZSBsb2dpYyBhbmQgYmVoYXZpb3IgdGhhdCBpcyBub3QgdmlzaWJsZSBmcm9tIHRoZVxuICogcHVibGljIEFQSSBzdXJmYWNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGNsYXNzIFRlc3RpbmdIb29rcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIHNob3VsZCBub3QgYmUgY3JlYXRlZFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdG8gYmUgbm90aWZpZWQgd2hlbiBhbiBleGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoXG4gICAgICogb2NjdXJzIGluIHRoZSBXYXRjaCBsaXN0ZW4gc3RyZWFtLlxuICAgICAqXG4gICAgICogVGhlIHJlbGF0aXZlIG9yZGVyIGluIHdoaWNoIGNhbGxiYWNrcyBhcmUgbm90aWZpZWQgaXMgdW5zcGVjaWZpZWQ7IGRvIG5vdFxuICAgICAqIHJlbHkgb24gYW55IHBhcnRpY3VsYXIgb3JkZXJpbmcuIElmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgcmVnaXN0ZXJlZCBtdWx0aXBsZVxuICAgICAqIHRpbWVzIHRoZW4gaXQgd2lsbCBiZSBub3RpZmllZCBtdWx0aXBsZSB0aW1lcywgb25jZSBwZXIgcmVnaXN0cmF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBleGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB1bnJlZ2lzdGVycyB0aGUgZ2l2ZW4gY2FsbGJhY2s7IG9ubHlcbiAgICAgKiB0aGUgZmlyc3QgaW52b2NhdGlvbiBvZiB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gZG9lcyBhbnl0aGluZzsgYWxsIHN1YnNlcXVlbnRcbiAgICAgKiBpbnZvY2F0aW9ucyBkbyBub3RoaW5nLlxuICAgICAqLyAgICBzdGF0aWMgb25FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBfX1BSSVZBVEVfVGVzdGluZ0hvb2tzU3BpSW1wbC5pbnN0YW5jZS5vbkV4aXN0ZW5jZUZpbHRlck1pc21hdGNoKGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgYFRlc3RpbmdIb29rc1NwaWAuXG4gKi8gY2xhc3MgX19QUklWQVRFX1Rlc3RpbmdIb29rc1NwaUltcGwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLk91ID0gbmV3IE1hcDtcbiAgICB9XG4gICAgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHZlIHx8ICh2ZSA9IG5ldyBfX1BSSVZBVEVfVGVzdGluZ0hvb2tzU3BpSW1wbCwgZnVuY3Rpb24gX19QUklWQVRFX3NldFRlc3RpbmdIb29rc1NwaShlKSB7XG4gICAgICAgICAgICBpZiAoaGUpIHRocm93IG5ldyBFcnJvcihcImEgVGVzdGluZ0hvb2tzU3BpIGluc3RhbmNlIGlzIGFscmVhZHkgc2V0XCIpO1xuICAgICAgICAgICAgaGUgPSBlO1xuICAgICAgICB9KHZlKSksIHZlO1xuICAgIH1cbiAgICBldChlKSB7XG4gICAgICAgIHRoaXMuT3UuZm9yRWFjaCgodCA9PiB0KGUpKSk7XG4gICAgfVxuICAgIG9uRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2goZSkge1xuICAgICAgICBjb25zdCB0ID0gU3ltYm9sKCksIG4gPSB0aGlzLk91O1xuICAgICAgICByZXR1cm4gbi5zZXQodCwgZSksICgpID0+IG4uZGVsZXRlKHQpO1xuICAgIH1cbn1cblxubGV0IHZlID0gbnVsbDtcblxuLyoqXG4gKiBDbG91ZCBGaXJlc3RvcmVcbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqLyAhZnVuY3Rpb24gX19QUklWQVRFX3JlZ2lzdGVyRmlyZXN0b3JlKGUsIHQgPSAhMCkge1xuICAgICFmdW5jdGlvbiBfX1BSSVZBVEVfc2V0U0RLVmVyc2lvbihlKSB7XG4gICAgICAgIGIgPSBlO1xuICAgIH0oYXBwLlNES19WRVJTSU9OKSwgYXBwLl9yZWdpc3RlckNvbXBvbmVudChuZXcgY29tcG9uZW50LkNvbXBvbmVudChcImZpcmVzdG9yZVwiLCAoKGUsIHtpbnN0YW5jZUlkZW50aWZpZXI6IG4sIG9wdGlvbnM6IHJ9KSA9PiB7XG4gICAgICAgIGNvbnN0IGkgPSBlLmdldFByb3ZpZGVyKFwiYXBwXCIpLmdldEltbWVkaWF0ZSgpLCBzID0gbmV3IEZpcmVzdG9yZShuZXcgX19QUklWQVRFX0ZpcmViYXNlQXV0aENyZWRlbnRpYWxzUHJvdmlkZXIoZS5nZXRQcm92aWRlcihcImF1dGgtaW50ZXJuYWxcIikpLCBuZXcgX19QUklWQVRFX0ZpcmViYXNlQXBwQ2hlY2tUb2tlblByb3ZpZGVyKGUuZ2V0UHJvdmlkZXIoXCJhcHAtY2hlY2staW50ZXJuYWxcIikpLCBmdW5jdGlvbiBfX1BSSVZBVEVfZGF0YWJhc2VJZEZyb21BcHAoZSwgdCkge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmFwcGx5KGUub3B0aW9ucywgWyBcInByb2plY3RJZFwiIF0pKSB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQy5JTlZBTElEX0FSR1VNRU5ULCAnXCJwcm9qZWN0SWRcIiBub3QgcHJvdmlkZWQgaW4gZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcC4nKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YWJhc2VJZChlLm9wdGlvbnMucHJvamVjdElkLCB0KTtcbiAgICAgICAgfShpLCBuKSwgaSk7XG4gICAgICAgIHJldHVybiByID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICB1c2VGZXRjaFN0cmVhbXM6IHRcbiAgICAgICAgfSwgciksIHMuX3NldFNldHRpbmdzKHIpLCBzO1xuICAgIH0pLCBcIlBVQkxJQ1wiKS5zZXRNdWx0aXBsZUluc3RhbmNlcyghMCkpLCBhcHAucmVnaXN0ZXJWZXJzaW9uKFMsIFwiNC42LjRcIiwgZSksIFxuICAgIC8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXG4gICAgYXBwLnJlZ2lzdGVyVmVyc2lvbihTLCBcIjQuNi40XCIsIFwiY2pzMjAxN1wiKTtcbn0oKTtcblxuZXhwb3J0cy5BYnN0cmFjdFVzZXJEYXRhV3JpdGVyID0gQWJzdHJhY3RVc2VyRGF0YVdyaXRlcjtcbmV4cG9ydHMuQWdncmVnYXRlRmllbGQgPSBBZ2dyZWdhdGVGaWVsZDtcbmV4cG9ydHMuQWdncmVnYXRlUXVlcnlTbmFwc2hvdCA9IEFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3Q7XG5leHBvcnRzLkJ5dGVzID0gQnl0ZXM7XG5leHBvcnRzLkNBQ0hFX1NJWkVfVU5MSU1JVEVEID0gd2U7XG5leHBvcnRzLkNvbGxlY3Rpb25SZWZlcmVuY2UgPSBDb2xsZWN0aW9uUmVmZXJlbmNlO1xuZXhwb3J0cy5Eb2N1bWVudFJlZmVyZW5jZSA9IERvY3VtZW50UmVmZXJlbmNlO1xuZXhwb3J0cy5Eb2N1bWVudFNuYXBzaG90ID0gRG9jdW1lbnRTbmFwc2hvdDtcbmV4cG9ydHMuRmllbGRQYXRoID0gRmllbGRQYXRoO1xuZXhwb3J0cy5GaWVsZFZhbHVlID0gRmllbGRWYWx1ZTtcbmV4cG9ydHMuRmlyZXN0b3JlID0gRmlyZXN0b3JlO1xuZXhwb3J0cy5GaXJlc3RvcmVFcnJvciA9IEZpcmVzdG9yZUVycm9yO1xuZXhwb3J0cy5HZW9Qb2ludCA9IEdlb1BvaW50O1xuZXhwb3J0cy5Mb2FkQnVuZGxlVGFzayA9IExvYWRCdW5kbGVUYXNrO1xuZXhwb3J0cy5QZXJzaXN0ZW50Q2FjaGVJbmRleE1hbmFnZXIgPSBQZXJzaXN0ZW50Q2FjaGVJbmRleE1hbmFnZXI7XG5leHBvcnRzLlF1ZXJ5ID0gUXVlcnk7XG5leHBvcnRzLlF1ZXJ5Q29tcG9zaXRlRmlsdGVyQ29uc3RyYWludCA9IFF1ZXJ5Q29tcG9zaXRlRmlsdGVyQ29uc3RyYWludDtcbmV4cG9ydHMuUXVlcnlDb25zdHJhaW50ID0gUXVlcnlDb25zdHJhaW50O1xuZXhwb3J0cy5RdWVyeURvY3VtZW50U25hcHNob3QgPSBRdWVyeURvY3VtZW50U25hcHNob3Q7XG5leHBvcnRzLlF1ZXJ5RW5kQXRDb25zdHJhaW50ID0gUXVlcnlFbmRBdENvbnN0cmFpbnQ7XG5leHBvcnRzLlF1ZXJ5RmllbGRGaWx0ZXJDb25zdHJhaW50ID0gUXVlcnlGaWVsZEZpbHRlckNvbnN0cmFpbnQ7XG5leHBvcnRzLlF1ZXJ5TGltaXRDb25zdHJhaW50ID0gUXVlcnlMaW1pdENvbnN0cmFpbnQ7XG5leHBvcnRzLlF1ZXJ5T3JkZXJCeUNvbnN0cmFpbnQgPSBRdWVyeU9yZGVyQnlDb25zdHJhaW50O1xuZXhwb3J0cy5RdWVyeVNuYXBzaG90ID0gUXVlcnlTbmFwc2hvdDtcbmV4cG9ydHMuUXVlcnlTdGFydEF0Q29uc3RyYWludCA9IFF1ZXJ5U3RhcnRBdENvbnN0cmFpbnQ7XG5leHBvcnRzLlNuYXBzaG90TWV0YWRhdGEgPSBTbmFwc2hvdE1ldGFkYXRhO1xuZXhwb3J0cy5UaW1lc3RhbXAgPSBUaW1lc3RhbXA7XG5leHBvcnRzLlRyYW5zYWN0aW9uID0gVHJhbnNhY3Rpb247XG5leHBvcnRzLldyaXRlQmF0Y2ggPSBXcml0ZUJhdGNoO1xuZXhwb3J0cy5fQXV0b0lkID0gX19QUklWQVRFX0F1dG9JZDtcbmV4cG9ydHMuX0J5dGVTdHJpbmcgPSBCeXRlU3RyaW5nO1xuZXhwb3J0cy5fRGF0YWJhc2VJZCA9IERhdGFiYXNlSWQ7XG5leHBvcnRzLl9Eb2N1bWVudEtleSA9IERvY3VtZW50S2V5O1xuZXhwb3J0cy5fRW1wdHlBcHBDaGVja1Rva2VuUHJvdmlkZXIgPSBfX1BSSVZBVEVfRW1wdHlBcHBDaGVja1Rva2VuUHJvdmlkZXI7XG5leHBvcnRzLl9FbXB0eUF1dGhDcmVkZW50aWFsc1Byb3ZpZGVyID0gX19QUklWQVRFX0VtcHR5QXV0aENyZWRlbnRpYWxzUHJvdmlkZXI7XG5leHBvcnRzLl9GaWVsZFBhdGggPSBGaWVsZFBhdGgkMTtcbmV4cG9ydHMuX1Rlc3RpbmdIb29rcyA9IFRlc3RpbmdIb29rcztcbmV4cG9ydHMuX2Nhc3QgPSBfX1BSSVZBVEVfY2FzdDtcbmV4cG9ydHMuX2RlYnVnQXNzZXJ0ID0gX19QUklWQVRFX2RlYnVnQXNzZXJ0O1xuZXhwb3J0cy5faW50ZXJuYWxBZ2dyZWdhdGlvblF1ZXJ5VG9Qcm90b1J1bkFnZ3JlZ2F0aW9uUXVlcnlSZXF1ZXN0ID0gX2ludGVybmFsQWdncmVnYXRpb25RdWVyeVRvUHJvdG9SdW5BZ2dyZWdhdGlvblF1ZXJ5UmVxdWVzdDtcbmV4cG9ydHMuX2ludGVybmFsUXVlcnlUb1Byb3RvUXVlcnlUYXJnZXQgPSBfaW50ZXJuYWxRdWVyeVRvUHJvdG9RdWVyeVRhcmdldDtcbmV4cG9ydHMuX2lzQmFzZTY0QXZhaWxhYmxlID0gX19QUklWQVRFX2lzQmFzZTY0QXZhaWxhYmxlO1xuZXhwb3J0cy5fbG9nV2FybiA9IF9fUFJJVkFURV9sb2dXYXJuO1xuZXhwb3J0cy5fdmFsaWRhdGVJc05vdFVzZWRUb2dldGhlciA9IF9fUFJJVkFURV92YWxpZGF0ZUlzTm90VXNlZFRvZ2V0aGVyO1xuZXhwb3J0cy5hZGREb2MgPSBhZGREb2M7XG5leHBvcnRzLmFnZ3JlZ2F0ZUZpZWxkRXF1YWwgPSBhZ2dyZWdhdGVGaWVsZEVxdWFsO1xuZXhwb3J0cy5hZ2dyZWdhdGVRdWVyeVNuYXBzaG90RXF1YWwgPSBhZ2dyZWdhdGVRdWVyeVNuYXBzaG90RXF1YWw7XG5leHBvcnRzLmFuZCA9IGFuZDtcbmV4cG9ydHMuYXJyYXlSZW1vdmUgPSBhcnJheVJlbW92ZTtcbmV4cG9ydHMuYXJyYXlVbmlvbiA9IGFycmF5VW5pb247XG5leHBvcnRzLmF2ZXJhZ2UgPSBhdmVyYWdlO1xuZXhwb3J0cy5jbGVhckluZGV4ZWREYlBlcnNpc3RlbmNlID0gY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZTtcbmV4cG9ydHMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG5leHBvcnRzLmNvbGxlY3Rpb25Hcm91cCA9IGNvbGxlY3Rpb25Hcm91cDtcbmV4cG9ydHMuY29ubmVjdEZpcmVzdG9yZUVtdWxhdG9yID0gY29ubmVjdEZpcmVzdG9yZUVtdWxhdG9yO1xuZXhwb3J0cy5jb3VudCA9IGNvdW50O1xuZXhwb3J0cy5kZWxldGVBbGxQZXJzaXN0ZW50Q2FjaGVJbmRleGVzID0gZGVsZXRlQWxsUGVyc2lzdGVudENhY2hlSW5kZXhlcztcbmV4cG9ydHMuZGVsZXRlRG9jID0gZGVsZXRlRG9jO1xuZXhwb3J0cy5kZWxldGVGaWVsZCA9IGRlbGV0ZUZpZWxkO1xuZXhwb3J0cy5kaXNhYmxlTmV0d29yayA9IGRpc2FibGVOZXR3b3JrO1xuZXhwb3J0cy5kaXNhYmxlUGVyc2lzdGVudENhY2hlSW5kZXhBdXRvQ3JlYXRpb24gPSBkaXNhYmxlUGVyc2lzdGVudENhY2hlSW5kZXhBdXRvQ3JlYXRpb247XG5leHBvcnRzLmRvYyA9IGRvYztcbmV4cG9ydHMuZG9jdW1lbnRJZCA9IGRvY3VtZW50SWQ7XG5leHBvcnRzLmVuYWJsZUluZGV4ZWREYlBlcnNpc3RlbmNlID0gZW5hYmxlSW5kZXhlZERiUGVyc2lzdGVuY2U7XG5leHBvcnRzLmVuYWJsZU11bHRpVGFiSW5kZXhlZERiUGVyc2lzdGVuY2UgPSBlbmFibGVNdWx0aVRhYkluZGV4ZWREYlBlcnNpc3RlbmNlO1xuZXhwb3J0cy5lbmFibGVOZXR3b3JrID0gZW5hYmxlTmV0d29yaztcbmV4cG9ydHMuZW5hYmxlUGVyc2lzdGVudENhY2hlSW5kZXhBdXRvQ3JlYXRpb24gPSBlbmFibGVQZXJzaXN0ZW50Q2FjaGVJbmRleEF1dG9DcmVhdGlvbjtcbmV4cG9ydHMuZW5kQXQgPSBlbmRBdDtcbmV4cG9ydHMuZW5kQmVmb3JlID0gZW5kQmVmb3JlO1xuZXhwb3J0cy5lbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkID0gZW5zdXJlRmlyZXN0b3JlQ29uZmlndXJlZDtcbmV4cG9ydHMuZXhlY3V0ZVdyaXRlID0gZXhlY3V0ZVdyaXRlO1xuZXhwb3J0cy5nZXRBZ2dyZWdhdGVGcm9tU2VydmVyID0gZ2V0QWdncmVnYXRlRnJvbVNlcnZlcjtcbmV4cG9ydHMuZ2V0Q291bnRGcm9tU2VydmVyID0gZ2V0Q291bnRGcm9tU2VydmVyO1xuZXhwb3J0cy5nZXREb2MgPSBnZXREb2M7XG5leHBvcnRzLmdldERvY0Zyb21DYWNoZSA9IGdldERvY0Zyb21DYWNoZTtcbmV4cG9ydHMuZ2V0RG9jRnJvbVNlcnZlciA9IGdldERvY0Zyb21TZXJ2ZXI7XG5leHBvcnRzLmdldERvY3MgPSBnZXREb2NzO1xuZXhwb3J0cy5nZXREb2NzRnJvbUNhY2hlID0gZ2V0RG9jc0Zyb21DYWNoZTtcbmV4cG9ydHMuZ2V0RG9jc0Zyb21TZXJ2ZXIgPSBnZXREb2NzRnJvbVNlcnZlcjtcbmV4cG9ydHMuZ2V0RmlyZXN0b3JlID0gZ2V0RmlyZXN0b3JlO1xuZXhwb3J0cy5nZXRQZXJzaXN0ZW50Q2FjaGVJbmRleE1hbmFnZXIgPSBnZXRQZXJzaXN0ZW50Q2FjaGVJbmRleE1hbmFnZXI7XG5leHBvcnRzLmluY3JlbWVudCA9IGluY3JlbWVudDtcbmV4cG9ydHMuaW5pdGlhbGl6ZUZpcmVzdG9yZSA9IGluaXRpYWxpemVGaXJlc3RvcmU7XG5leHBvcnRzLmxpbWl0ID0gbGltaXQ7XG5leHBvcnRzLmxpbWl0VG9MYXN0ID0gbGltaXRUb0xhc3Q7XG5leHBvcnRzLmxvYWRCdW5kbGUgPSBsb2FkQnVuZGxlO1xuZXhwb3J0cy5tZW1vcnlFYWdlckdhcmJhZ2VDb2xsZWN0b3IgPSBtZW1vcnlFYWdlckdhcmJhZ2VDb2xsZWN0b3I7XG5leHBvcnRzLm1lbW9yeUxvY2FsQ2FjaGUgPSBtZW1vcnlMb2NhbENhY2hlO1xuZXhwb3J0cy5tZW1vcnlMcnVHYXJiYWdlQ29sbGVjdG9yID0gbWVtb3J5THJ1R2FyYmFnZUNvbGxlY3RvcjtcbmV4cG9ydHMubmFtZWRRdWVyeSA9IG5hbWVkUXVlcnk7XG5leHBvcnRzLm9uU25hcHNob3QgPSBvblNuYXBzaG90O1xuZXhwb3J0cy5vblNuYXBzaG90c0luU3luYyA9IG9uU25hcHNob3RzSW5TeW5jO1xuZXhwb3J0cy5vciA9IG9yO1xuZXhwb3J0cy5vcmRlckJ5ID0gb3JkZXJCeTtcbmV4cG9ydHMucGVyc2lzdGVudExvY2FsQ2FjaGUgPSBwZXJzaXN0ZW50TG9jYWxDYWNoZTtcbmV4cG9ydHMucGVyc2lzdGVudE11bHRpcGxlVGFiTWFuYWdlciA9IHBlcnNpc3RlbnRNdWx0aXBsZVRhYk1hbmFnZXI7XG5leHBvcnRzLnBlcnNpc3RlbnRTaW5nbGVUYWJNYW5hZ2VyID0gcGVyc2lzdGVudFNpbmdsZVRhYk1hbmFnZXI7XG5leHBvcnRzLnF1ZXJ5ID0gcXVlcnk7XG5leHBvcnRzLnF1ZXJ5RXF1YWwgPSBxdWVyeUVxdWFsO1xuZXhwb3J0cy5yZWZFcXVhbCA9IHJlZkVxdWFsO1xuZXhwb3J0cy5ydW5UcmFuc2FjdGlvbiA9IHJ1blRyYW5zYWN0aW9uO1xuZXhwb3J0cy5zZXJ2ZXJUaW1lc3RhbXAgPSBzZXJ2ZXJUaW1lc3RhbXA7XG5leHBvcnRzLnNldERvYyA9IHNldERvYztcbmV4cG9ydHMuc2V0SW5kZXhDb25maWd1cmF0aW9uID0gc2V0SW5kZXhDb25maWd1cmF0aW9uO1xuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IHNldExvZ0xldmVsO1xuZXhwb3J0cy5zbmFwc2hvdEVxdWFsID0gc25hcHNob3RFcXVhbDtcbmV4cG9ydHMuc3RhcnRBZnRlciA9IHN0YXJ0QWZ0ZXI7XG5leHBvcnRzLnN0YXJ0QXQgPSBzdGFydEF0O1xuZXhwb3J0cy5zdW0gPSBzdW07XG5leHBvcnRzLnRlcm1pbmF0ZSA9IHRlcm1pbmF0ZTtcbmV4cG9ydHMudXBkYXRlRG9jID0gdXBkYXRlRG9jO1xuZXhwb3J0cy53YWl0Rm9yUGVuZGluZ1dyaXRlcyA9IHdhaXRGb3JQZW5kaW5nV3JpdGVzO1xuZXhwb3J0cy53aGVyZSA9IHdoZXJlO1xuZXhwb3J0cy53cml0ZUJhdGNoID0gd3JpdGVCYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmNqcy5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIF9hO1xyXG4vKipcclxuICogQSBjb250YWluZXIgZm9yIGFsbCBvZiB0aGUgTG9nZ2VyIGluc3RhbmNlc1xyXG4gKi9cclxudmFyIGluc3RhbmNlcyA9IFtdO1xyXG4vKipcclxuICogVGhlIEpTIFNESyBzdXBwb3J0cyA1IGxvZyBsZXZlbHMgYW5kIGFsc28gYWxsb3dzIGEgdXNlciB0aGUgYWJpbGl0eSB0b1xyXG4gKiBzaWxlbmNlIHRoZSBsb2dzIGFsdG9nZXRoZXIuXHJcbiAqXHJcbiAqIFRoZSBvcmRlciBpcyBhIGZvbGxvd3M6XHJcbiAqIERFQlVHIDwgVkVSQk9TRSA8IElORk8gPCBXQVJOIDwgRVJST1JcclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHdpbGwgYmUgY2FwdHVyZWQgKGkuZS4gaWZcclxuICogeW91IHNldCB0aGUgbG9nIGxldmVsIHRvIGBJTkZPYCwgZXJyb3JzIHdpbGwgc3RpbGwgYmUgbG9nZ2VkLCBidXQgYERFQlVHYCBhbmRcclxuICogYFZFUkJPU0VgIGxvZ3Mgd2lsbCBub3QpXHJcbiAqL1xyXG5leHBvcnRzLkxvZ0xldmVsID0gdm9pZCAwO1xyXG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkRFQlVHXCJdID0gMF0gPSBcIkRFQlVHXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlZFUkJPU0VcIl0gPSAxXSA9IFwiVkVSQk9TRVwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJJTkZPXCJdID0gMl0gPSBcIklORk9cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV0FSTlwiXSA9IDNdID0gXCJXQVJOXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVSUk9SXCJdID0gNF0gPSBcIkVSUk9SXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlNJTEVOVFwiXSA9IDVdID0gXCJTSUxFTlRcIjtcclxufSkoZXhwb3J0cy5Mb2dMZXZlbCB8fCAoZXhwb3J0cy5Mb2dMZXZlbCA9IHt9KSk7XHJcbnZhciBsZXZlbFN0cmluZ1RvRW51bSA9IHtcclxuICAgICdkZWJ1Zyc6IGV4cG9ydHMuTG9nTGV2ZWwuREVCVUcsXHJcbiAgICAndmVyYm9zZSc6IGV4cG9ydHMuTG9nTGV2ZWwuVkVSQk9TRSxcclxuICAgICdpbmZvJzogZXhwb3J0cy5Mb2dMZXZlbC5JTkZPLFxyXG4gICAgJ3dhcm4nOiBleHBvcnRzLkxvZ0xldmVsLldBUk4sXHJcbiAgICAnZXJyb3InOiBleHBvcnRzLkxvZ0xldmVsLkVSUk9SLFxyXG4gICAgJ3NpbGVudCc6IGV4cG9ydHMuTG9nTGV2ZWwuU0lMRU5UXHJcbn07XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBsb2cgbGV2ZWxcclxuICovXHJcbnZhciBkZWZhdWx0TG9nTGV2ZWwgPSBleHBvcnRzLkxvZ0xldmVsLklORk87XHJcbi8qKlxyXG4gKiBCeSBkZWZhdWx0LCBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGRpc3BsYXllZCBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgKGluXHJcbiAqIGNocm9tZSkuIFRvIGF2b2lkIGZvcmNpbmcgdXNlcnMgdG8gaGF2ZSB0byBvcHQtaW4gdG8gdGhlc2UgbG9ncyB0d2ljZVxyXG4gKiAoaS5lLiBvbmNlIGZvciBmaXJlYmFzZSwgYW5kIG9uY2UgaW4gdGhlIGNvbnNvbGUpLCB3ZSBhcmUgc2VuZGluZyBgREVCVUdgXHJcbiAqIGxvZ3MgdG8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24uXHJcbiAqL1xyXG52YXIgQ29uc29sZU1ldGhvZCA9IChfYSA9IHt9LFxyXG4gICAgX2FbZXhwb3J0cy5Mb2dMZXZlbC5ERUJVR10gPSAnbG9nJyxcclxuICAgIF9hW2V4cG9ydHMuTG9nTGV2ZWwuVkVSQk9TRV0gPSAnbG9nJyxcclxuICAgIF9hW2V4cG9ydHMuTG9nTGV2ZWwuSU5GT10gPSAnaW5mbycsXHJcbiAgICBfYVtleHBvcnRzLkxvZ0xldmVsLldBUk5dID0gJ3dhcm4nLFxyXG4gICAgX2FbZXhwb3J0cy5Mb2dMZXZlbC5FUlJPUl0gPSAnZXJyb3InLFxyXG4gICAgX2EpO1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgbG9nIGhhbmRsZXIgd2lsbCBmb3J3YXJkIERFQlVHLCBWRVJCT1NFLCBJTkZPLCBXQVJOLCBhbmQgRVJST1JcclxuICogbWVzc2FnZXMgb24gdG8gdGhlaXIgY29ycmVzcG9uZGluZyBjb25zb2xlIGNvdW50ZXJwYXJ0cyAoaWYgdGhlIGxvZyBtZXRob2RcclxuICogaXMgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGxvZyBsZXZlbClcclxuICovXHJcbnZhciBkZWZhdWx0TG9nSGFuZGxlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgbG9nVHlwZSkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChsb2dUeXBlIDwgaW5zdGFuY2UubG9nTGV2ZWwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgdmFyIG1ldGhvZCA9IENvbnNvbGVNZXRob2RbbG9nVHlwZV07XHJcbiAgICBpZiAobWV0aG9kKSB7XHJcbiAgICAgICAgY29uc29sZVttZXRob2RdLmFwcGx5KGNvbnNvbGUsIHRzbGliLl9fc3ByZWFkQXJyYXkoW1wiW1wiLmNvbmNhdChub3csIFwiXSAgXCIpLmNvbmNhdChpbnN0YW5jZS5uYW1lLCBcIjpcIildLCBhcmdzLCBmYWxzZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGxvZyBhIG1lc3NhZ2Ugd2l0aCBhbiBpbnZhbGlkIGxvZ1R5cGUgKHZhbHVlOiBcIi5jb25jYXQobG9nVHlwZSwgXCIpXCIpKTtcclxuICAgIH1cclxufTtcclxudmFyIExvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZXMgeW91IGFuIGluc3RhbmNlIG9mIGEgTG9nZ2VyIHRvIGNhcHR1cmUgbWVzc2FnZXMgYWNjb3JkaW5nIHRvXHJcbiAgICAgKiBGaXJlYmFzZSdzIGxvZ2dpbmcgc2NoZW1lLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRoYXQgdGhlIGxvZ3Mgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gTG9nZ2VyKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb2cgbGV2ZWwgb2YgdGhlIGdpdmVuIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IGRlZmF1bHRMb2dMZXZlbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFpbiAoaW50ZXJuYWwpIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqIENhbiBiZSBzZXQgdG8gYSBuZXcgZnVuY3Rpb24gaW4gaW50ZXJuYWwgcGFja2FnZSBjb2RlIGJ1dCBub3QgYnkgdXNlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyID0gZGVmYXVsdExvZ0hhbmRsZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9wdGlvbmFsLCBhZGRpdGlvbmFsLCB1c2VyLWRlZmluZWQgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhcHR1cmUgdGhlIGN1cnJlbnQgaW5zdGFuY2UgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluc3RhbmNlcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvZ2dlci5wcm90b3R5cGUsIFwibG9nTGV2ZWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9nTGV2ZWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgaWYgKCEodmFsIGluIGV4cG9ydHMuTG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCB2YWx1ZSBcXFwiXCIuY29uY2F0KHZhbCwgXCJcXFwiIGFzc2lnbmVkIHRvIGBsb2dMZXZlbGBcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8vIFdvcmthcm91bmQgZm9yIHNldHRlci9nZXR0ZXIgaGF2aW5nIHRvIGJlIHRoZSBzYW1lIHR5cGUuXHJcbiAgICBMb2dnZXIucHJvdG90eXBlLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBsZXZlbFN0cmluZ1RvRW51bVt2YWxdIDogdmFsO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb2dnZXIucHJvdG90eXBlLCBcImxvZ0hhbmRsZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9nSGFuZGxlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgYXNzaWduZWQgdG8gYGxvZ0hhbmRsZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvZ2dlci5wcm90b3R5cGUsIFwidXNlckxvZ0hhbmRsZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlckxvZ0hhbmRsZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZnVuY3Rpb25zIGJlbG93IGFyZSBhbGwgYmFzZWQgb24gdGhlIGBjb25zb2xlYCBpbnRlcmZhY2VcclxuICAgICAqL1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIuYXBwbHkodGhpcywgdHNsaWIuX19zcHJlYWRBcnJheShbdGhpcywgZXhwb3J0cy5Mb2dMZXZlbC5ERUJVR10sIGFyZ3MsIGZhbHNlKSk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCB0c2xpYi5fX3NwcmVhZEFycmF5KFt0aGlzLCBleHBvcnRzLkxvZ0xldmVsLkRFQlVHXSwgYXJncywgZmFsc2UpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIuYXBwbHkodGhpcywgdHNsaWIuX19zcHJlYWRBcnJheShbdGhpcywgZXhwb3J0cy5Mb2dMZXZlbC5WRVJCT1NFXSwgYXJncywgZmFsc2UpKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIHRzbGliLl9fc3ByZWFkQXJyYXkoW3RoaXMsIGV4cG9ydHMuTG9nTGV2ZWwuVkVSQk9TRV0sIGFyZ3MsIGZhbHNlKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlci5hcHBseSh0aGlzLCB0c2xpYi5fX3NwcmVhZEFycmF5KFt0aGlzLCBleHBvcnRzLkxvZ0xldmVsLklORk9dLCBhcmdzLCBmYWxzZSkpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgdHNsaWIuX19zcHJlYWRBcnJheShbdGhpcywgZXhwb3J0cy5Mb2dMZXZlbC5JTkZPXSwgYXJncywgZmFsc2UpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyLmFwcGx5KHRoaXMsIHRzbGliLl9fc3ByZWFkQXJyYXkoW3RoaXMsIGV4cG9ydHMuTG9nTGV2ZWwuV0FSTl0sIGFyZ3MsIGZhbHNlKSk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCB0c2xpYi5fX3NwcmVhZEFycmF5KFt0aGlzLCBleHBvcnRzLkxvZ0xldmVsLldBUk5dLCBhcmdzLCBmYWxzZSkpO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyLmFwcGx5KHRoaXMsIHRzbGliLl9fc3ByZWFkQXJyYXkoW3RoaXMsIGV4cG9ydHMuTG9nTGV2ZWwuRVJST1JdLCBhcmdzLCBmYWxzZSkpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgdHNsaWIuX19zcHJlYWRBcnJheShbdGhpcywgZXhwb3J0cy5Mb2dMZXZlbC5FUlJPUl0sIGFyZ3MsIGZhbHNlKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIExvZ2dlcjtcclxufSgpKTtcclxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcclxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0KSB7XHJcbiAgICAgICAgaW5zdC5zZXRMb2dMZXZlbChsZXZlbCk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgY3VzdG9tTG9nTGV2ZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGV2ZWwpIHtcclxuICAgICAgICAgICAgY3VzdG9tTG9nTGV2ZWwgPSBsZXZlbFN0cmluZ1RvRW51bVtvcHRpb25zLmxldmVsXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxvZ0NhbGxiYWNrID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gYXJnc1xyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGFyZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZy5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmc7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA+PSAoY3VzdG9tTG9nTGV2ZWwgIT09IG51bGwgJiYgY3VzdG9tTG9nTGV2ZWwgIT09IHZvaWQgMCA/IGN1c3RvbUxvZ0xldmVsIDogaW5zdGFuY2UubG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogZXhwb3J0cy5Mb2dMZXZlbFtsZXZlbF0udG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogYXJncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW5zdGFuY2UubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGluc3RhbmNlc18xID0gaW5zdGFuY2VzOyBfaSA8IGluc3RhbmNlc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlc18xW19pXTtcclxuICAgICAgICBfbG9vcF8xKGluc3RhbmNlKTtcclxuICAgIH1cclxufVxuXG5leHBvcnRzLkxvZ2dlciA9IExvZ2dlcjtcbmV4cG9ydHMuc2V0TG9nTGV2ZWwgPSBzZXRMb2dMZXZlbDtcbmV4cG9ydHMuc2V0VXNlckxvZ0hhbmRsZXIgPSBzZXRVc2VyTG9nSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmNqcy5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cclxuICovXHJcbmNvbnN0IENPTlNUQU5UUyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBjbGllbnQgTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQ0xJRU5UOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBBZG1pbiBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9BRE1JTjogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEZpcmViYXNlIFNESyBWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIFNES19WRVJTSU9OOiAnJHtKU0NPUkVfVkVSU0lPTn0nXHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHByb3ZpZGVkIGFzc2VydGlvbiBpcyBmYWxzeVxyXG4gKi9cclxuY29uc3QgYXNzZXJ0ID0gZnVuY3Rpb24gKGFzc2VydGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFhc3NlcnRpb24pIHtcclxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcihtZXNzYWdlKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgYW4gRXJyb3Igb2JqZWN0IHN1aXRhYmxlIGZvciB0aHJvd2luZy5cclxuICovXHJcbmNvbnN0IGFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZpcmViYXNlIERhdGFiYXNlICgnICtcclxuICAgICAgICBDT05TVEFOVFMuU0RLX1ZFUlNJT04gK1xyXG4gICAgICAgICcpIElOVEVSTkFMIEFTU0VSVCBGQUlMRUQ6ICcgK1xyXG4gICAgICAgIG1lc3NhZ2UpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSQxID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiZcclxuICAgICAgICAgICAgaSArIDEgPCBzdHIubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZjMDApID09PSAweGRjMDApIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxyXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXHJcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyBjaGFyYWN0ZXJzLlxyXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXHJcbiAqL1xyXG5jb25zdCBieXRlQXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIChieXRlcykge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHBvcyA9IDAsIGMgPSAwO1xyXG4gICAgd2hpbGUgKHBvcyA8IGJ5dGVzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGMxID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDE5MSAmJiBjMSA8IDIyNCkge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAzMSkgPDwgNikgfCAoYzIgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDIzOSAmJiBjMSA8IDM2NSkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGNvbnN0IGM0ID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBjb25zdCB1ID0gKCgoYzEgJiA3KSA8PCAxOCkgfCAoKGMyICYgNjMpIDw8IDEyKSB8ICgoYzMgJiA2MykgPDwgNikgfCAoYzQgJiA2MykpIC1cclxuICAgICAgICAgICAgICAgIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgKyAodSA+PiAxMCkpO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkYzAwICsgKHUgJiAxMDIzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQuam9pbignJyk7XHJcbn07XHJcbi8vIFdlIGRlZmluZSBpdCBhcyBhbiBvYmplY3QgbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY2xhc3MgYmVjYXVzZSBhIGNsYXNzIGNvbXBpbGVkIGRvd24gdG8gZXM1IGNhbid0XHJcbi8vIGJlIHRyZWVzaGFrZWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNjkxXHJcbi8vIFN0YXRpYyBsb29rdXAgbWFwcywgbGF6aWx5IHBvcHVsYXRlZCBieSBpbml0XygpXHJcbmNvbnN0IGJhc2U2NCA9IHtcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byBjaGFyYWN0ZXJzLlxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY2hhclRvQnl0ZU1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldCwgc2hhcmVkIGJldHdlZW5cclxuICAgICAqIEVOQ09ERURfVkFMUyBhbmQgRU5DT0RFRF9WQUxTX1dFQlNBRkVcclxuICAgICAqL1xyXG4gICAgRU5DT0RFRF9WQUxTX0JBU0U6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicgKyAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICsgJzAxMjM0NTY3ODknLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldC4gVmFsdWUgNjQgKD0pIGlzIHNwZWNpYWw7IGl0IG1lYW5zIFwibm90aGluZy5cIlxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJysvPSc7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgd2Vic2FmZSBhbHBoYWJldC5cclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMU19XRUJTQUZFKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJy1fLic7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoaXMgYnJvd3NlciBzdXBwb3J0cyB0aGUgYXRvYiBhbmQgYnRvYSBmdW5jdGlvbnMuIFRoaXMgZXh0ZW5zaW9uXHJcbiAgICAgKiBzdGFydGVkIGF0IE1vemlsbGEgYnV0IGlzIG5vdyBpbXBsZW1lbnRlZCBieSBtYW55IGJyb3dzZXJzLiBXZSB1c2UgdGhlXHJcbiAgICAgKiBBU1NVTUVfKiB2YXJpYWJsZXMgdG8gYXZvaWQgcHVsbGluZyBpbiB0aGUgZnVsbCB1c2VyYWdlbnQgZGV0ZWN0aW9uIGxpYnJhcnlcclxuICAgICAqIGJ1dCBzdGlsbCBhbGxvd2luZyB0aGUgc3RhbmRhcmQgcGVyLWJyb3dzZXIgY29tcGlsYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgSEFTX05BVElWRV9TVVBQT1JUOiB0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJyxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhbiBhcnJheSBvZiBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgQW4gYXJyYXkgb2YgYnl0ZXMgKG51bWJlcnMgd2l0aFxyXG4gICAgICogICAgIHZhbHVlIGluIFswLCAyNTVdKSB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICBjb25zdCBieXRlVG9DaGFyTWFwID0gd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXztcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gaW5wdXRbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGlucHV0W2kgKyAxXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgKyAyIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGlucHV0W2kgKyAyXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gYnl0ZTEgPj4gMjtcclxuICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTIgPSAoKGJ5dGUxICYgMHgwMykgPDwgNCkgfCAoYnl0ZTIgPj4gNCk7XHJcbiAgICAgICAgICAgIGxldCBvdXRCeXRlMyA9ICgoYnl0ZTIgJiAweDBmKSA8PCAyKSB8IChieXRlMyA+PiA2KTtcclxuICAgICAgICAgICAgbGV0IG91dEJ5dGU0ID0gYnl0ZTMgJiAweDNmO1xyXG4gICAgICAgICAgICBpZiAoIWhhdmVCeXRlMykge1xyXG4gICAgICAgICAgICAgICAgb3V0Qnl0ZTQgPSA2NDtcclxuICAgICAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0Qnl0ZTMgPSA2NDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChieXRlVG9DaGFyTWFwW291dEJ5dGUxXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMl0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTNdLCBieXRlVG9DaGFyTWFwW291dEJ5dGU0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZW5jb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBBIHN0cmluZyB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBJZiB0cnVlLCB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVCeXRlQXJyYXkoc3RyaW5nVG9CeXRlQXJyYXkkMShpbnB1dCksIHdlYlNhZmUpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgdG8gZGVjb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF0b2IoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZUFycmF5VG9TdHJpbmcodGhpcy5kZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBJbiBiYXNlLTY0IGRlY29kaW5nLCBncm91cHMgb2YgZm91ciBjaGFyYWN0ZXJzIGFyZSBjb252ZXJ0ZWQgaW50byB0aHJlZVxyXG4gICAgICogYnl0ZXMuICBJZiB0aGUgZW5jb2RlciBkaWQgbm90IGFwcGx5IHBhZGRpbmcsIHRoZSBpbnB1dCBsZW5ndGggbWF5IG5vdFxyXG4gICAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxyXG4gICAgICpcclxuICAgICAqIEluIHRoaXMgY2FzZSwgdGhlIGxhc3QgZ3JvdXAgd2lsbCBoYXZlIGZld2VyIHRoYW4gNCBjaGFyYWN0ZXJzLCBhbmRcclxuICAgICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXHJcbiAgICAgKiB0byBvbmUgYnl0ZS4gIElmIHRoZSBncm91cCBoYXMgdGhyZWUgY2hhcmFjdGVycywgaXQgZGVjb2RlcyB0byB0d28gYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IElucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgd2ViLXNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgY29uc3QgY2hhclRvQnl0ZU1hcCA9IHdlYlNhZmVcclxuICAgICAgICAgICAgPyB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1xyXG4gICAgICAgICAgICA6IHRoaXMuY2hhclRvQnl0ZU1hcF87XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gaGF2ZUJ5dGUyID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogMDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlNCA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGU0ID0gaGF2ZUJ5dGU0ID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XHJcbiAgICAgICAgICAgIGlmIChieXRlMyAhPT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGU0ICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxyXG4gICAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0XygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEFuIGVycm9yIGVuY291bnRlcmVkIHdoaWxlIGRlY29kaW5nIGJhc2U2NCBzdHJpbmcuXHJcbiAqL1xyXG5jbGFzcyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0RlY29kZUJhc2U2NFN0cmluZ0Vycm9yJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nXHJcbiAqL1xyXG5jb25zdCBiYXNlNjRFbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBjb25zdCB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheSQxKHN0cik7XHJcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh1dGY4Qnl0ZXMsIHRydWUpO1xyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nICh3aXRob3V0IFwiLlwiIHBhZGRpbmcgaW4gdGhlIGVuZCkuXHJcbiAqIGUuZy4gVXNlZCBpbiBKU09OIFdlYiBUb2tlbiAoSldUKSBwYXJ0cy5cclxuICovXHJcbmNvbnN0IGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVXNlIGJhc2U2NHVybCBlbmNvZGluZyBhbmQgcmVtb3ZlIHBhZGRpbmcgaW4gdGhlIGVuZCAoZG90IGNoYXJhY3RlcnMpLlxyXG4gICAgcmV0dXJuIGJhc2U2NEVuY29kZShzdHIpLnJlcGxhY2UoL1xcLi9nLCAnJyk7XHJcbn07XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZGVjb2RpbmdcclxuICpcclxuICogTk9URTogRE8gTk9UIHVzZSB0aGUgZ2xvYmFsIGF0b2IoKSBmdW5jdGlvbiAtIGl0IGRvZXMgTk9UIHN1cHBvcnQgdGhlXHJcbiAqIGJhc2U2NFVybCB2YXJpYW50IGVuY29kaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyIFRvIGJlIGRlY29kZWRcclxuICogQHJldHVybiBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcclxuICovXHJcbmNvbnN0IGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5kZWNvZGVTdHJpbmcoc3RyLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignYmFzZTY0RGVjb2RlIGZhaWxlZDogJywgZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERvIGEgZGVlcC1jb3B5IG9mIGJhc2ljIEphdmFTY3JpcHQgT2JqZWN0cyBvciBBcnJheXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwQ29weSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGRlZXBFeHRlbmQodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbn1cclxuLyoqXHJcbiAqIENvcHkgcHJvcGVydGllcyBmcm9tIHNvdXJjZSB0byB0YXJnZXQgKHJlY3Vyc2l2ZWx5IGFsbG93cyBleHRlbnNpb25cclxuICogb2YgT2JqZWN0cyBhbmQgQXJyYXlzKS4gIFNjYWxhciB2YWx1ZXMgaW4gdGhlIHRhcmdldCBhcmUgb3Zlci13cml0dGVuLlxyXG4gKiBJZiB0YXJnZXQgaXMgdW5kZWZpbmVkLCBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUgd2lsbCBiZSBjcmVhdGVkXHJcbiAqIChhbmQgcmV0dXJuZWQpLlxyXG4gKlxyXG4gKiBXZSByZWN1cnNpdmVseSBjb3B5IGFsbCBjaGlsZCBwcm9wZXJ0aWVzIG9mIHBsYWluIE9iamVjdHMgaW4gdGhlIHNvdXJjZS0gc29cclxuICogdGhhdCBuYW1lc3BhY2UtIGxpa2UgZGljdGlvbmFyaWVzIGFyZSBtZXJnZWQuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB0aGUgdGFyZ2V0IGNhbiBiZSBhIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSBwcm9wZXJ0aWVzIGluXHJcbiAqIHRoZSBzb3VyY2UgT2JqZWN0IGFyZSBjb3BpZWQgb250byBpdCBhcyBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgRnVuY3Rpb24uXHJcbiAqXHJcbiAqIE5vdGU6IHdlIGRvbid0IG1lcmdlIF9fcHJvdG9fXyB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcclxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChzb3VyY2UuY29uc3RydWN0b3IpIHtcclxuICAgICAgICBjYXNlIERhdGU6XHJcbiAgICAgICAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXHJcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgLSB0aGV5IHdpbGwgYmUgbG9zdCFcclxuICAgICAgICAgICAgY29uc3QgZGF0ZVZhbHVlID0gc291cmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgY2FzZSBPYmplY3Q6XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBBcnJheTpcclxuICAgICAgICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBzb3VyY2UpIHtcclxuICAgICAgICAvLyB1c2UgaXNWYWxpZEtleSB0byBndWFyZCBhZ2FpbnN0IHByb3RvdHlwZSBwb2xsdXRpb24uIFNlZSBodHRwczovL3NueWsuaW8vdnVsbi9TTllLLUpTLUxPREFTSC00NTAyMDJcclxuICAgICAgICBpZiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCAhaXNWYWxpZEtleShwcm9wKSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gZGVlcEV4dGVuZCh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4ga2V5ICE9PSAnX19wcm90b19fJztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUG9seWZpbGwgZm9yIGBnbG9iYWxUaGlzYCBvYmplY3QuXHJcbiAqIEByZXR1cm5zIHRoZSBgZ2xvYmFsVGhpc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3c7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QuJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHNGcm9tR2xvYmFsID0gKCkgPT4gZ2V0R2xvYmFsKCkuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xyXG4vKipcclxuICogQXR0ZW1wdCB0byByZWFkIGRlZmF1bHRzIGZyb20gYSBKU09OIHN0cmluZyBwcm92aWRlZCB0b1xyXG4gKiBwcm9jZXNzKC4pZW52KC4pX19GSVJFQkFTRV9ERUZBVUxUU19fIG9yIGEgSlNPTiBmaWxlIHdob3NlIHBhdGggaXMgaW5cclxuICogcHJvY2VzcyguKWVudiguKV9fRklSRUJBU0VfREVGQVVMVFNfUEFUSF9fXHJcbiAqIFRoZSBkb3RzIGFyZSBpbiBwYXJlbnMgYmVjYXVzZSBjZXJ0YWluIGNvbXBpbGVycyAoVml0ZT8pIGNhbm5vdFxyXG4gKiBoYW5kbGUgc2VlaW5nIHRoYXQgdmFyaWFibGUgaW4gY29tbWVudHMuXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy82ODM4XHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSA9ICgpID0+IHtcclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHByb2Nlc3MuZW52ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGRlZmF1bHRzSnNvblN0cmluZyA9IHByb2Nlc3MuZW52Ll9fRklSRUJBU0VfREVGQVVMVFNfXztcclxuICAgIGlmIChkZWZhdWx0c0pzb25TdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWZhdWx0c0pzb25TdHJpbmcpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21Db29raWUgPSAoKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBtYXRjaDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2goL19fRklSRUJBU0VfREVGQVVMVFNfXz0oW147XSspLyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIFNvbWUgZW52aXJvbm1lbnRzIHN1Y2ggYXMgQW5ndWxhciBVbml2ZXJzYWwgU1NSIGhhdmUgYVxyXG4gICAgICAgIC8vIGBkb2N1bWVudGAgb2JqZWN0IGJ1dCBlcnJvciBvbiBhY2Nlc3NpbmcgYGRvY3VtZW50LmNvb2tpZWAuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVjb2RlZCA9IG1hdGNoICYmIGJhc2U2NERlY29kZShtYXRjaFsxXSk7XHJcbiAgICByZXR1cm4gZGVjb2RlZCAmJiBKU09OLnBhcnNlKGRlY29kZWQpO1xyXG59O1xyXG4vKipcclxuICogR2V0IHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LiBJdCBjaGVja3MgaW4gb3JkZXI6XHJcbiAqICgxKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgYXMgYSBwcm9wZXJ0eSBvZiBgZ2xvYmFsVGhpc2BcclxuICogKDIpIGlmIHN1Y2ggYW4gb2JqZWN0IHdhcyBwcm92aWRlZCBvbiBhIHNoZWxsIGVudmlyb25tZW50IHZhcmlhYmxlXHJcbiAqICgzKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgaW4gYSBjb29raWVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHMgPSAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoZ2V0RGVmYXVsdHNGcm9tR2xvYmFsKCkgfHxcclxuICAgICAgICAgICAgZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUoKSB8fFxyXG4gICAgICAgICAgICBnZXREZWZhdWx0c0Zyb21Db29raWUoKSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhdGNoLWFsbCBmb3IgYmVpbmcgdW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlXHJcbiAgICAgICAgICogdG8gYW55IGVudmlyb25tZW50IGNhc2Ugd2UgaGF2ZSBub3QgYWNjb3VudGVkIGZvci4gTG9nIHRvXHJcbiAgICAgICAgICogaW5mbyBpbnN0ZWFkIG9mIHN3YWxsb3dpbmcgc28gd2UgY2FuIGZpbmQgdGhlc2UgdW5rbm93biBjYXNlc1xyXG4gICAgICAgICAqIGFuZCBhZGQgcGF0aHMgZm9yIHRoZW0gaWYgbmVlZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhgVW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlIHRvOiAke2V9YCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxyXG4gKiBmb3IgdGhlIGdpdmVuIHByb2R1Y3QuXHJcbiAqIEByZXR1cm5zIGEgVVJMIGhvc3QgZm9ybWF0dGVkIGxpa2UgYDEyNy4wLjAuMTo5OTk5YCBvciBgWzo6MV06NDAwMGAgaWYgYXZhaWxhYmxlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRFbXVsYXRvckhvc3QgPSAocHJvZHVjdE5hbWUpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbXVsYXRvckhvc3RzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbcHJvZHVjdE5hbWVdOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0bmFtZSBhbmQgcG9ydCBzdG9yZWQgaW4gdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3RcclxuICogZm9yIHRoZSBnaXZlbiBwcm9kdWN0LlxyXG4gKiBAcmV0dXJucyBhIHBhaXIgb2YgaG9zdG5hbWUgYW5kIHBvcnQgbGlrZSBgW1wiOjoxXCIsIDQwMDBdYCBpZiBhdmFpbGFibGVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0ID0gKHByb2R1Y3ROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBob3N0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdChwcm9kdWN0TmFtZSk7XHJcbiAgICBpZiAoIWhvc3QpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBob3N0Lmxhc3RJbmRleE9mKCc6Jyk7IC8vIEZpbmRpbmcgdGhlIGxhc3Qgc2luY2UgSVB2NiBhZGRyIGFsc28gaGFzIGNvbG9ucy5cclxuICAgIGlmIChzZXBhcmF0b3JJbmRleCA8PSAwIHx8IHNlcGFyYXRvckluZGV4ICsgMSA9PT0gaG9zdC5sZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaG9zdCAke2hvc3R9IHdpdGggbm8gc2VwYXJhdGUgaG9zdG5hbWUgYW5kIHBvcnQhYCk7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXHJcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VJbnQoaG9zdC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKSwgMTApO1xyXG4gICAgaWYgKGhvc3RbMF0gPT09ICdbJykge1xyXG4gICAgICAgIC8vIEJyYWNrZXQtcXVvdGVkIGBbaXB2NmFkZHJdOnBvcnRgID0+IHJldHVybiBcImlwdjZhZGRyXCIgKHdpdGhvdXQgYnJhY2tldHMpLlxyXG4gICAgICAgIHJldHVybiBbaG9zdC5zdWJzdHJpbmcoMSwgc2VwYXJhdG9ySW5kZXggLSAxKSwgcG9ydF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW2hvc3Quc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KSwgcG9ydF07XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEZpcmViYXNlIGFwcCBjb25maWcgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0QXBwQ29uZmlnID0gKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBnZXREZWZhdWx0cygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlnOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBhbiBleHBlcmltZW50YWwgc2V0dGluZyBvbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdCAocHJvcGVydGllc1xyXG4gKiBwcmVmaXhlZCBieSBcIl9cIilcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RXhwZXJpbWVudGFsU2V0dGluZyA9IChuYW1lKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtgXyR7bmFtZX1gXTsgfTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgRGVmZXJyZWQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5yZWplY3QgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXHJcbiAgICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xyXG4gICAgICogYW5kIHJldHVybnMgYSBub2RlLXN0eWxlIGNhbGxiYWNrIHdoaWNoIHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIERlZmVycmVkJ3MgcHJvbWlzZS5cclxuICAgICAqL1xyXG4gICAgd3JhcENhbGxiYWNrKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChlcnJvciwgdmFsdWUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBTb21lIG9mIG91ciBjYWxsYmFja3MgZG9uJ3QgZXhwZWN0IGEgdmFsdWUgYW5kIG91ciBvd24gdGVzdHNcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNb2NrVXNlclRva2VuKHRva2VuLCBwcm9qZWN0SWQpIHtcclxuICAgIGlmICh0b2tlbi51aWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcInVpZFwiIGZpZWxkIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgbW9ja1VzZXJUb2tlbi4gUGxlYXNlIHVzZSBcInN1YlwiIGluc3RlYWQgZm9yIEZpcmViYXNlIEF1dGggVXNlciBJRC4nKTtcclxuICAgIH1cclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSBcIm5vbmVcIiBhcyB0aGUgYWxnb3JpdGhtLlxyXG4gICAgY29uc3QgaGVhZGVyID0ge1xyXG4gICAgICAgIGFsZzogJ25vbmUnLFxyXG4gICAgICAgIHR5cGU6ICdKV1QnXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RJZCB8fCAnZGVtby1wcm9qZWN0JztcclxuICAgIGNvbnN0IGlhdCA9IHRva2VuLmlhdCB8fCAwO1xyXG4gICAgY29uc3Qgc3ViID0gdG9rZW4uc3ViIHx8IHRva2VuLnVzZXJfaWQ7XHJcbiAgICBpZiAoIXN1Yikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vY2tVc2VyVG9rZW4gbXVzdCBjb250YWluICdzdWInIG9yICd1c2VyX2lkJyBmaWVsZCFcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXlsb2FkID0gT2JqZWN0LmFzc2lnbih7IFxyXG4gICAgICAgIC8vIFNldCBhbGwgcmVxdWlyZWQgZmllbGRzIHRvIGRlY2VudCBkZWZhdWx0c1xyXG4gICAgICAgIGlzczogYGh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS8ke3Byb2plY3R9YCwgYXVkOiBwcm9qZWN0LCBpYXQsIGV4cDogaWF0ICsgMzYwMCwgYXV0aF90aW1lOiBpYXQsIHN1YiwgdXNlcl9pZDogc3ViLCBmaXJlYmFzZToge1xyXG4gICAgICAgICAgICBzaWduX2luX3Byb3ZpZGVyOiAnY3VzdG9tJyxcclxuICAgICAgICAgICAgaWRlbnRpdGllczoge31cclxuICAgICAgICB9IH0sIHRva2VuKTtcclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSB0aGUgZW1wdHkgc3RyaW5nIGFzIGEgc2lnbmF0dXJlLlxyXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gJyc7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLFxyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIF0uam9pbignLicpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIG9yICcnIGlmIGl0J3Mgbm90IGRlZmluZWQuXHJcbiAqIEByZXR1cm4gdXNlciBhZ2VudCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdldFVBKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvclsndXNlckFnZW50J10gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvclsndXNlckFnZW50J107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBDb3Jkb3ZhIC8gUGhvbmVHYXAgLyBJb25pYyBmcmFtZXdvcmtzIG9uIGEgbW9iaWxlIGRldmljZS5cclxuICpcclxuICogRGVsaWJlcmF0ZWx5IGRvZXMgbm90IHJlbHkgb24gY2hlY2tpbmcgYGZpbGU6Ly9gIFVSTHMgKGFzIHRoaXMgZmFpbHMgUGhvbmVHYXBcclxuICogaW4gdGhlIFJpcHBsZSBlbXVsYXRvcikgbm9yIENvcmRvdmEgYG9uRGV2aWNlUmVhZHlgLCB3aGljaCB3b3VsZCBub3JtYWxseVxyXG4gKiB3YWl0IGZvciBhIGNhbGxiYWNrLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNNb2JpbGVDb3Jkb3ZhKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgU2V0dGluZyB1cCBhbiBicm9hZGx5IGFwcGxpY2FibGUgaW5kZXggc2lnbmF0dXJlIGZvciBXaW5kb3dcclxuICAgICAgICAvLyBqdXN0IHRvIGRlYWwgd2l0aCB0aGlzIGNhc2Ugd291bGQgcHJvYmFibHkgYmUgYSBiYWQgaWRlYS5cclxuICAgICAgICAhISh3aW5kb3dbJ2NvcmRvdmEnXSB8fCB3aW5kb3dbJ3Bob25lZ2FwJ10gfHwgd2luZG93WydQaG9uZUdhcCddKSAmJlxyXG4gICAgICAgIC9pb3N8aXBob25lfGlwb2R8aXBhZHxhbmRyb2lkfGJsYWNrYmVycnl8aWVtb2JpbGUvaS50ZXN0KGdldFVBKCkpKTtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IE5vZGUuanMuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBOb2RlLmpzIGVudmlyb25tZW50IGlzIGRldGVjdGVkIG9yIHNwZWNpZmllZC5cclxuICovXHJcbi8vIE5vZGUgZGV0ZWN0aW9uIGxvZ2ljIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9pbGlha2FuL2RldGVjdC1ub2RlL1xyXG5mdW5jdGlvbiBpc05vZGUoKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBmb3JjZUVudmlyb25tZW50ID0gKF9hID0gZ2V0RGVmYXVsdHMoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvcmNlRW52aXJvbm1lbnQ7XHJcbiAgICBpZiAoZm9yY2VFbnZpcm9ubWVudCA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmb3JjZUVudmlyb25tZW50ID09PSAnYnJvd3NlcicpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgQnJvd3NlciBFbnZpcm9ubWVudFxyXG4gKi9cclxuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnIHx8IGlzV2ViV29ya2VyKCk7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBXZWIgV29ya2VyIGNvbnRleHRcclxuICovXHJcbmZ1bmN0aW9uIGlzV2ViV29ya2VyKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKTtcclxufVxyXG5mdW5jdGlvbiBpc0Jyb3dzZXJFeHRlbnNpb24oKSB7XHJcbiAgICBjb25zdCBydW50aW1lID0gdHlwZW9mIGNocm9tZSA9PT0gJ29iamVjdCdcclxuICAgICAgICA/IGNocm9tZS5ydW50aW1lXHJcbiAgICAgICAgOiB0eXBlb2YgYnJvd3NlciA9PT0gJ29iamVjdCdcclxuICAgICAgICAgICAgPyBicm93c2VyLnJ1bnRpbWVcclxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICByZXR1cm4gdHlwZW9mIHJ1bnRpbWUgPT09ICdvYmplY3QnICYmIHJ1bnRpbWUuaWQgIT09IHVuZGVmaW5lZDtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IFJlYWN0IE5hdGl2ZS5cclxuICpcclxuICogQHJldHVybiB0cnVlIGlmIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGlzIGRldGVjdGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNSZWFjdE5hdGl2ZSgpIHtcclxuICAgIHJldHVybiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yWydwcm9kdWN0J10gPT09ICdSZWFjdE5hdGl2ZScpO1xyXG59XHJcbi8qKiBEZXRlY3RzIEVsZWN0cm9uIGFwcHMuICovXHJcbmZ1bmN0aW9uIGlzRWxlY3Ryb24oKSB7XHJcbiAgICByZXR1cm4gZ2V0VUEoKS5pbmRleE9mKCdFbGVjdHJvbi8nKSA+PSAwO1xyXG59XHJcbi8qKiBEZXRlY3RzIEludGVybmV0IEV4cGxvcmVyLiAqL1xyXG5mdW5jdGlvbiBpc0lFKCkge1xyXG4gICAgY29uc3QgdWEgPSBnZXRVQSgpO1xyXG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ01TSUUgJykgPj0gMCB8fCB1YS5pbmRleE9mKCdUcmlkZW50LycpID49IDA7XHJcbn1cclxuLyoqIERldGVjdHMgVW5pdmVyc2FsIFdpbmRvd3MgUGxhdGZvcm0gYXBwcy4gKi9cclxuZnVuY3Rpb24gaXNVV1AoKSB7XHJcbiAgICByZXR1cm4gZ2V0VUEoKS5pbmRleE9mKCdNU0FwcEhvc3QvJykgPj0gMDtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgU0RLIGJ1aWxkIGlzIHRoZSBOb2RlIHZlcnNpb24uXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBpdCdzIHRoZSBOb2RlIFNESyBidWlsZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzTm9kZVNkaygpIHtcclxuICAgIHJldHVybiBDT05TVEFOVFMuTk9ERV9DTElFTlQgPT09IHRydWUgfHwgQ09OU1RBTlRTLk5PREVfQURNSU4gPT09IHRydWU7XHJcbn1cclxuLyoqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgcnVubmluZyBpbiBTYWZhcmkuICovXHJcbmZ1bmN0aW9uIGlzU2FmYXJpKCkge1xyXG4gICAgcmV0dXJuICghaXNOb2RlKCkgJiZcclxuICAgICAgICAhIW5hdmlnYXRvci51c2VyQWdlbnQgJiZcclxuICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdTYWZhcmknKSAmJlxyXG4gICAgICAgICFuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdDaHJvbWUnKSk7XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyBpZiBpbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgYnJvd3Nlci9zZXJ2aWNlIHdvcmtlciBjb250ZXh0XHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBpbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgYnJvd3Nlci9zZXJ2aWNlIHdvcmtlciBjb250ZXh0XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0luZGV4ZWREQkF2YWlsYWJsZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbmRleGVkREIgPT09ICdvYmplY3QnO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgbWV0aG9kIHZhbGlkYXRlcyBicm93c2VyL3N3IGNvbnRleHQgZm9yIGluZGV4ZWREQiBieSBvcGVuaW5nIGEgZHVtbXkgaW5kZXhlZERCIGRhdGFiYXNlIGFuZCByZWplY3RcclxuICogaWYgZXJyb3JzIG9jY3VyIGR1cmluZyB0aGUgZGF0YWJhc2Ugb3BlbiBvcGVyYXRpb24uXHJcbiAqXHJcbiAqIEB0aHJvd3MgZXhjZXB0aW9uIGlmIGN1cnJlbnQgYnJvd3Nlci9zdyBjb250ZXh0IGNhbid0IHJ1biBpZGIub3BlbiAoZXg6IFNhZmFyaSBpZnJhbWUsIEZpcmVmb3hcclxuICogcHJpdmF0ZSBicm93c2luZylcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGxldCBwcmVFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IERCX0NIRUNLX05BTUUgPSAndmFsaWRhdGUtYnJvd3Nlci1jb250ZXh0LWZvci1pbmRleGVkZGItYW5hbHl0aWNzLW1vZHVsZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBzZWxmLmluZGV4ZWREQi5vcGVuKERCX0NIRUNLX05BTUUpO1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3QucmVzdWx0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgZGF0YWJhc2Ugb25seSB3aGVuIGl0IGRvZXNuJ3QgcHJlLWV4aXN0XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByZUV4aXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbmRleGVkREIuZGVsZXRlRGF0YWJhc2UoREJfQ0hFQ0tfTkFNRSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHByZUV4aXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgoKF9hID0gcmVxdWVzdC5lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2UpIHx8ICcnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyB3aGV0aGVyIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcclxuICogQHJldHVybiB0cnVlIGlmIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcclxuICovXHJcbmZ1bmN0aW9uIGFyZUNvb2tpZXNFbmFibGVkKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8ICFuYXZpZ2F0b3IuY29va2llRW5hYmxlZCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IFN0YW5kYXJkaXplZCBGaXJlYmFzZSBFcnJvci5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqXHJcbiAqICAgLy8gVHlwZXNjcmlwdCBzdHJpbmcgbGl0ZXJhbHMgZm9yIHR5cGUtc2FmZSBjb2Rlc1xyXG4gKiAgIHR5cGUgRXJyID1cclxuICogICAgICd1bmtub3duJyB8XHJcbiAqICAgICAnb2JqZWN0LW5vdC1mb3VuZCdcclxuICogICAgIDtcclxuICpcclxuICogICAvLyBDbG9zdXJlIGVudW0gZm9yIHR5cGUtc2FmZSBlcnJvciBjb2Rlc1xyXG4gKiAgIC8vIGF0LWVudW0ge3N0cmluZ31cclxuICogICB2YXIgRXJyID0ge1xyXG4gKiAgICAgVU5LTk9XTjogJ3Vua25vd24nLFxyXG4gKiAgICAgT0JKRUNUX05PVF9GT1VORDogJ29iamVjdC1ub3QtZm91bmQnLFxyXG4gKiAgIH1cclxuICpcclxuICogICBsZXQgZXJyb3JzOiBNYXA8RXJyLCBzdHJpbmc+ID0ge1xyXG4gKiAgICAgJ2dlbmVyaWMtZXJyb3InOiBcIlVua25vd24gZXJyb3JcIixcclxuICogICAgICdmaWxlLW5vdC1mb3VuZCc6IFwiQ291bGQgbm90IGZpbmQgZmlsZTogeyRmaWxlfVwiLFxyXG4gKiAgIH07XHJcbiAqXHJcbiAqICAgLy8gVHlwZS1zYWZlIGZ1bmN0aW9uIC0gbXVzdCBwYXNzIGEgdmFsaWQgZXJyb3IgY29kZSBhcyBwYXJhbS5cclxuICogICBsZXQgZXJyb3IgPSBuZXcgRXJyb3JGYWN0b3J5PEVycj4oJ3NlcnZpY2UnLCAnU2VydmljZScsIGVycm9ycyk7XHJcbiAqXHJcbiAqICAgLi4uXHJcbiAqICAgdGhyb3cgZXJyb3IuY3JlYXRlKEVyci5HRU5FUklDKTtcclxuICogICAuLi5cclxuICogICB0aHJvdyBlcnJvci5jcmVhdGUoRXJyLkZJTEVfTk9UX0ZPVU5ELCB7J2ZpbGUnOiBmaWxlTmFtZX0pO1xyXG4gKiAgIC4uLlxyXG4gKiAgIC8vIFNlcnZpY2U6IENvdWxkIG5vdCBmaWxlIGZpbGU6IGZvby50eHQgKHNlcnZpY2UvZmlsZS1ub3QtZm91bmQpLlxyXG4gKlxyXG4gKiAgIGNhdGNoIChlKSB7XHJcbiAqICAgICBhc3NlcnQoZS5tZXNzYWdlID09PSBcIkNvdWxkIG5vdCBmaW5kIGZpbGU6IGZvby50eHQuXCIpO1xyXG4gKiAgICAgaWYgKChlIGFzIEZpcmViYXNlRXJyb3IpPy5jb2RlID09PSAnc2VydmljZS9maWxlLW5vdC1mb3VuZCcpIHtcclxuICogICAgICAgY29uc29sZS5sb2coXCJDb3VsZCBub3QgcmVhZCBmaWxlOiBcIiArIGVbJ2ZpbGUnXSk7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKi9cclxuY29uc3QgRVJST1JfTkFNRSA9ICdGaXJlYmFzZUVycm9yJztcclxuLy8gQmFzZWQgb24gY29kZSBmcm9tOlxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNDdXN0b21fRXJyb3JfVHlwZXNcclxuY2xhc3MgRmlyZWJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqIFRoZSBlcnJvciBjb2RlIGZvciB0aGlzIGVycm9yLiAqL1xyXG4gICAgY29kZSwgbWVzc2FnZSwgXHJcbiAgICAvKiogQ3VzdG9tIGRhdGEgZm9yIHRoaXMgZXJyb3IuICovXHJcbiAgICBjdXN0b21EYXRhKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSBjdXN0b21EYXRhO1xyXG4gICAgICAgIC8qKiBUaGUgY3VzdG9tIG5hbWUgZm9yIGFsbCBGaXJlYmFzZUVycm9ycy4gKi9cclxuICAgICAgICB0aGlzLm5hbWUgPSBFUlJPUl9OQU1FO1xyXG4gICAgICAgIC8vIEZpeCBGb3IgRVM1XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0LXdpa2kvYmxvYi9tYXN0ZXIvQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRmlyZWJhc2VFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duLlxyXG4gICAgICAgIC8vIE9ubHkgYXZhaWxhYmxlIG9uIFY4LlxyXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xyXG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFcnJvckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNsYXNzIEVycm9yRmFjdG9yeSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlLCBzZXJ2aWNlTmFtZSwgZXJyb3JzKSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcclxuICAgICAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcbiAgICB9XHJcbiAgICBjcmVhdGUoY29kZSwgLi4uZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGN1c3RvbURhdGEgPSBkYXRhWzBdIHx8IHt9O1xyXG4gICAgICAgIGNvbnN0IGZ1bGxDb2RlID0gYCR7dGhpcy5zZXJ2aWNlfS8ke2NvZGV9YDtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuZXJyb3JzW2NvZGVdO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0ZW1wbGF0ZSA/IHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgY3VzdG9tRGF0YSkgOiAnRXJyb3InO1xyXG4gICAgICAgIC8vIFNlcnZpY2UgTmFtZTogRXJyb3IgbWVzc2FnZSAoc2VydmljZS9jb2RlKS5cclxuICAgICAgICBjb25zdCBmdWxsTWVzc2FnZSA9IGAke3RoaXMuc2VydmljZU5hbWV9OiAke21lc3NhZ2V9ICgke2Z1bGxDb2RlfSkuYDtcclxuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBGaXJlYmFzZUVycm9yKGZ1bGxDb2RlLCBmdWxsTWVzc2FnZSwgY3VzdG9tRGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGF0YSkge1xyXG4gICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoUEFUVEVSTiwgKF8sIGtleSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YVtrZXldO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsID8gU3RyaW5nKHZhbHVlKSA6IGA8JHtrZXl9Pz5gO1xyXG4gICAgfSk7XHJcbn1cclxuY29uc3QgUEFUVEVSTiA9IC9cXHtcXCQoW159XSspfS9nO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXZhbHVhdGVzIGEgSlNPTiBzdHJpbmcgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgSlNPTi5cclxuICogQHJldHVybiB7Kn0gVGhlIGphdmFzY3JpcHQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIEpTT04uXHJcbiAqL1xyXG5mdW5jdGlvbiBqc29uRXZhbChzdHIpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgSlNPTiByZXByZXNlbnRpbmcgYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICogQHBhcmFtIHsqfSBkYXRhIEphdmFzY3JpcHQgb2JqZWN0IHRvIGJlIHN0cmluZ2lmaWVkLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBKU09OIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdpZnkoZGF0YSkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gaW50byBjb25zdGl0dWVudCBwYXJ0cy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiB3aXRoIGludmFsaWQgLyBpbmNvbXBsZXRlIGNsYWltcyBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGRlY29kZSA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgbGV0IGhlYWRlciA9IHt9LCBjbGFpbXMgPSB7fSwgZGF0YSA9IHt9LCBzaWduYXR1cmUgPSAnJztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xyXG4gICAgICAgIGhlYWRlciA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1swXSkgfHwgJycpO1xyXG4gICAgICAgIGNsYWltcyA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1sxXSkgfHwgJycpO1xyXG4gICAgICAgIHNpZ25hdHVyZSA9IHBhcnRzWzJdO1xyXG4gICAgICAgIGRhdGEgPSBjbGFpbXNbJ2QnXSB8fCB7fTtcclxuICAgICAgICBkZWxldGUgY2xhaW1zWydkJ107XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGhlYWRlcixcclxuICAgICAgICBjbGFpbXMsXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIH07XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIGNoZWNrcyB0aGUgdmFsaWRpdHkgb2YgaXRzIHRpbWUtYmFzZWQgY2xhaW1zLiBXaWxsIHJldHVybiB0cnVlIGlmIHRoZVxyXG4gKiB0b2tlbiBpcyB3aXRoaW4gdGhlIHRpbWUgd2luZG93IGF1dGhvcml6ZWQgYnkgdGhlICduYmYnIChub3QtYmVmb3JlKSBhbmQgJ2lhdCcgKGlzc3VlZC1hdCkgY2xhaW1zLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBpc1ZhbGlkVGltZXN0YW1wID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICBjb25zdCBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGNvbnN0IG5vdyA9IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTtcclxuICAgIGxldCB2YWxpZFNpbmNlID0gMCwgdmFsaWRVbnRpbCA9IDA7XHJcbiAgICBpZiAodHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCduYmYnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFNpbmNlID0gY2xhaW1zWyduYmYnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCdpYXQnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFNpbmNlID0gY2xhaW1zWydpYXQnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnZXhwJykpIHtcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IGNsYWltc1snZXhwJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0b2tlbiB3aWxsIGV4cGlyZSBhZnRlciAyNGggYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICB2YWxpZFVudGlsID0gdmFsaWRTaW5jZSArIDg2NDAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAoISFub3cgJiZcclxuICAgICAgICAhIXZhbGlkU2luY2UgJiZcclxuICAgICAgICAhIXZhbGlkVW50aWwgJiZcclxuICAgICAgICBub3cgPj0gdmFsaWRTaW5jZSAmJlxyXG4gICAgICAgIG5vdyA8PSB2YWxpZFVudGlsKTtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgcmV0dXJucyBpdHMgaXNzdWVkIGF0IHRpbWUgaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIG51bGwgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBpc3N1ZWRBdFRpbWUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICByZXR1cm4gY2xhaW1zWydpYXQnXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyBmb3JtYXQuIEV4cGVjdHMgYSB2YWxpZCBpc3N1ZWQtYXQgdGltZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNWYWxpZEZvcm1hdCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgZGVjb2RlZCA9IGRlY29kZSh0b2tlbiksIGNsYWltcyA9IGRlY29kZWQuY2xhaW1zO1xyXG4gICAgcmV0dXJuICEhY2xhaW1zICYmIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0Jyk7XHJcbn07XHJcbi8qKlxyXG4gKiBBdHRlbXB0cyB0byBwZWVyIGludG8gYW4gYXV0aCB0b2tlbiBhbmQgZGV0ZXJtaW5lIGlmIGl0J3MgYW4gYWRtaW4gYXV0aCB0b2tlbiBieSBsb29raW5nIGF0IHRoZSBjbGFpbXMgcG9ydGlvbi5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNBZG1pbiA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICByZXR1cm4gdHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zWydhZG1pbiddID09PSB0cnVlO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb250YWlucyhvYmosIGtleSkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XHJcbn1cclxuZnVuY3Rpb24gc2FmZUdldChvYmosIGtleSkge1xyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gbWFwKG9iaiwgZm4sIGNvbnRleHRPYmopIHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgcmVzW2tleV0gPSBmbi5jYWxsKGNvbnRleHRPYmosIG9ialtrZXldLCBrZXksIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG4vKipcclxuICogRGVlcCBlcXVhbCB0d28gb2JqZWN0cy4gU3VwcG9ydCBBcnJheXMgYW5kIE9iamVjdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XHJcbiAgICBjb25zdCBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xyXG4gICAgZm9yIChjb25zdCBrIG9mIGFLZXlzKSB7XHJcbiAgICAgICAgaWYgKCFiS2V5cy5pbmNsdWRlcyhrKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFQcm9wID0gYVtrXTtcclxuICAgICAgICBjb25zdCBiUHJvcCA9IGJba107XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KGFQcm9wKSAmJiBpc09iamVjdChiUHJvcCkpIHtcclxuICAgICAgICAgICAgaWYgKCFkZWVwRXF1YWwoYVByb3AsIGJQcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFQcm9wICE9PSBiUHJvcCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrIG9mIGJLZXlzKSB7XHJcbiAgICAgICAgaWYgKCFhS2V5cy5pbmNsdWRlcyhrKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaXNPYmplY3QodGhpbmcpIHtcclxuICAgIHJldHVybiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZWplY3RzIGlmIHRoZSBnaXZlbiBwcm9taXNlIGRvZXNuJ3QgcmVzb2x2ZSBpbiB0aW1lSW5NUyBtaWxsaXNlY29uZHMuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gcHJvbWlzZVdpdGhUaW1lb3V0KHByb21pc2UsIHRpbWVJbk1TID0gMjAwMCkge1xyXG4gICAgY29uc3QgZGVmZXJyZWRQcm9taXNlID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IGRlZmVycmVkUHJvbWlzZS5yZWplY3QoJ3RpbWVvdXQhJyksIHRpbWVJbk1TKTtcclxuICAgIHByb21pc2UudGhlbihkZWZlcnJlZFByb21pc2UucmVzb2x2ZSwgZGVmZXJyZWRQcm9taXNlLnJlamVjdCk7XHJcbiAgICByZXR1cm4gZGVmZXJyZWRQcm9taXNlLnByb21pc2U7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBxdWVyeXN0cmluZy1mb3JtYXR0ZWQgc3RyaW5nIChlLmcuICZhcmc9dmFsJmFyZzI9dmFsMikgZnJvbSBhXHJcbiAqIHBhcmFtcyBvYmplY3QgKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqIE5vdGU6IFlvdSBtdXN0IHByZXBlbmQgaXQgd2l0aCA/IHdoZW4gYWRkaW5nIGl0IHRvIGEgVVJMLlxyXG4gKi9cclxuZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnlzdHJpbmdQYXJhbXMpIHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocXVlcnlzdHJpbmdQYXJhbXMpKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goYXJyYXlWYWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJyYXlWYWwpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXJhbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbXMubGVuZ3RoID8gJyYnICsgcGFyYW1zLmpvaW4oJyYnKSA6ICcnO1xyXG59XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgcXVlcnlzdHJpbmcgKGUuZy4gP2FyZz12YWwmYXJnMj12YWwyKSBpbnRvIGEgcGFyYW1zIG9iamVjdFxyXG4gKiAoZS5nLiB7YXJnOiAndmFsJywgYXJnMjogJ3ZhbDInfSlcclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nRGVjb2RlKHF1ZXJ5c3RyaW5nKSB7XHJcbiAgICBjb25zdCBvYmogPSB7fTtcclxuICAgIGNvbnN0IHRva2VucyA9IHF1ZXJ5c3RyaW5nLnJlcGxhY2UoL15cXD8vLCAnJykuc3BsaXQoJyYnKTtcclxuICAgIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcclxuICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gdG9rZW4uc3BsaXQoJz0nKTtcclxuICAgICAgICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChrZXkpXSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0IHRoZSBxdWVyeSBzdHJpbmcgcGFydCBvZiBhIFVSTCwgaW5jbHVkaW5nIHRoZSBsZWFkaW5nIHF1ZXN0aW9uIG1hcmsgKGlmIHByZXNlbnQpLlxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdFF1ZXJ5c3RyaW5nKHVybCkge1xyXG4gICAgY29uc3QgcXVlcnlTdGFydCA9IHVybC5pbmRleE9mKCc/Jyk7XHJcbiAgICBpZiAoIXF1ZXJ5U3RhcnQpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFnbWVudFN0YXJ0ID0gdXJsLmluZGV4T2YoJyMnLCBxdWVyeVN0YXJ0KTtcclxuICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKHF1ZXJ5U3RhcnQsIGZyYWdtZW50U3RhcnQgPiAwID8gZnJhZ21lbnRTdGFydCA6IHVuZGVmaW5lZCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgU0hBLTEgY3J5cHRvZ3JhcGhpYyBoYXNoLlxyXG4gKiBWYXJpYWJsZSBuYW1lcyBmb2xsb3cgdGhlIG5vdGF0aW9uIGluIEZJUFMgUFVCIDE4MC0zOlxyXG4gKiBodHRwOi8vY3NyYy5uaXN0Lmdvdi9wdWJsaWNhdGlvbnMvZmlwcy9maXBzMTgwLTMvZmlwczE4MC0zX2ZpbmFsLnBkZi5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqICAgdmFyIHNoYTEgPSBuZXcgc2hhMSgpO1xyXG4gKiAgIHNoYTEudXBkYXRlKGJ5dGVzKTtcclxuICogICB2YXIgaGFzaCA9IHNoYTEuZGlnZXN0KCk7XHJcbiAqXHJcbiAqIFBlcmZvcm1hbmNlOlxyXG4gKiAgIENocm9tZSAyMzogICB+NDAwIE1iaXQvc1xyXG4gKiAgIEZpcmVmb3ggMTY6ICB+MjUwIE1iaXQvc1xyXG4gKlxyXG4gKi9cclxuLyoqXHJcbiAqIFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaCBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogVGhlIHByb3BlcnRpZXMgZGVjbGFyZWQgaGVyZSBhcmUgZGlzY3Vzc2VkIGluIHRoZSBhYm92ZSBhbGdvcml0aG0gZG9jdW1lbnQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZmluYWxcclxuICogQHN0cnVjdFxyXG4gKi9cclxuY2xhc3MgU2hhMSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIb2xkcyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIGFjY3VtdWxhdGVkIHZhcmlhYmxlcyBhLWUgaW4gdGhlIGNvbXByZXNzX1xyXG4gICAgICAgICAqIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jaGFpbl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGJ1ZmZlciBob2xkaW5nIHRoZSBwYXJ0aWFsbHkgY29tcHV0ZWQgaGFzaCByZXN1bHQuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJ1Zl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiA4MCBieXRlcywgZWFjaCBhIHBhcnQgb2YgdGhlIG1lc3NhZ2UgdG8gYmUgaGFzaGVkLiAgUmVmZXJyZWQgdG9cclxuICAgICAgICAgKiBhcyB0aGUgbWVzc2FnZSBzY2hlZHVsZSBpbiB0aGUgZG9jcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuV18gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250YWlucyBkYXRhIG5lZWRlZCB0byBwYWQgbWVzc2FnZXMgbGVzcyB0aGFuIDY0IGJ5dGVzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wYWRfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRvdGFsXyA9IDA7XHJcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSA1MTIgLyA4O1xyXG4gICAgICAgIHRoaXMucGFkX1swXSA9IDEyODtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuYmxvY2tTaXplOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWRfW2ldID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAweDY3NDUyMzAxO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gMHhlZmNkYWI4OTtcclxuICAgICAgICB0aGlzLmNoYWluX1syXSA9IDB4OThiYWRjZmU7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAweDEwMzI1NDc2O1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gMHhjM2QyZTFmMDtcclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnRlcm5hbCBjb21wcmVzcyBoZWxwZXIgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0gYnVmIEJsb2NrIHRvIGNvbXByZXNzLlxyXG4gICAgICogQHBhcmFtIG9mZnNldCBPZmZzZXQgb2YgdGhlIGJsb2NrIGluIHRoZSBidWZmZXIuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjb21wcmVzc18oYnVmLCBvZmZzZXQpIHtcclxuICAgICAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBXID0gdGhpcy5XXztcclxuICAgICAgICAvLyBnZXQgMTYgYmlnIGVuZGlhbiB3b3Jkc1xyXG4gICAgICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8odXNlcik6IFtidWcgODE0MDEyMl0gUmVjZW50IHZlcnNpb25zIG9mIFNhZmFyaSBmb3IgTWFjIE9TIGFuZCBpT1NcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBidWcgdGhhdCB0dXJucyB0aGUgcG9zdC1pbmNyZW1lbnQgKysgb3BlcmF0b3IgaW50byBwcmUtaW5jcmVtZW50XHJcbiAgICAgICAgICAgICAgICAvLyBkdXJpbmcgSklUIGNvbXBpbGF0aW9uLiAgV2UgaGF2ZSBjb2RlIHRoYXQgZGVwZW5kcyBoZWF2aWx5IG9uIFNIQS0xIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gY29ycmVjdG5lc3MgYW5kIHdoaWNoIGlzIGFmZmVjdGVkIGJ5IHRoaXMgYnVnLCBzbyBJJ3ZlIHJlbW92ZWQgYWxsIHVzZXNcclxuICAgICAgICAgICAgICAgIC8vIG9mIHBvc3QtaW5jcmVtZW50ICsrIGluIHdoaWNoIHRoZSByZXN1bHQgdmFsdWUgaXMgdXNlZC4gIFdlIGNhbiByZXZlcnRcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2hhbmdlIG9uY2UgdGhlIFNhZmFyaSBidWdcclxuICAgICAgICAgICAgICAgIC8vIChodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTA5MDM2KSBoYXMgYmVlbiBmaXhlZCBhbmRcclxuICAgICAgICAgICAgICAgIC8vIG1vc3QgY2xpZW50cyBoYXZlIGJlZW4gdXBkYXRlZC5cclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWYuY2hhckNvZGVBdChvZmZzZXQgKyAzKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0XSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDFdIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0ICsgMl0gPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZbb2Zmc2V0ICsgM107XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcclxuICAgICAgICBmb3IgKGxldCBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdO1xyXG4gICAgICAgICAgICBXW2ldID0gKCh0IDw8IDEpIHwgKHQgPj4+IDMxKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYSA9IHRoaXMuY2hhaW5fWzBdO1xyXG4gICAgICAgIGxldCBiID0gdGhpcy5jaGFpbl9bMV07XHJcbiAgICAgICAgbGV0IGMgPSB0aGlzLmNoYWluX1syXTtcclxuICAgICAgICBsZXQgZCA9IHRoaXMuY2hhaW5fWzNdO1xyXG4gICAgICAgIGxldCBlID0gdGhpcy5jaGFpbl9bNF07XHJcbiAgICAgICAgbGV0IGYsIGs7XHJcbiAgICAgICAgLy8gVE9ETyh1c2VyKTogVHJ5IHRvIHVucm9sbCB0aGlzIGxvb3AgdG8gc3BlZWQgdXAgdGhlIGNvbXB1dGF0aW9uLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaSA8IDQwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGQgXiAoYiAmIChjIF4gZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDVhODI3OTk5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg2ZWQ5ZWJhMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgNjApIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gKGIgJiBjKSB8IChkICYgKGIgfCBjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4OGYxYmJjZGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gYiBeIGMgXiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweGNhNjJjMWQ2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSAoKChhIDw8IDUpIHwgKGEgPj4+IDI3KSkgKyBmICsgZSArIGsgKyBXW2ldKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGUgPSBkO1xyXG4gICAgICAgICAgICBkID0gYztcclxuICAgICAgICAgICAgYyA9ICgoYiA8PCAzMCkgfCAoYiA+Pj4gMikpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICAgICAgYiA9IGE7XHJcbiAgICAgICAgICAgIGEgPSB0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoYWluX1swXSA9ICh0aGlzLmNoYWluX1swXSArIGEpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9ICh0aGlzLmNoYWluX1sxXSArIGIpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1syXSA9ICh0aGlzLmNoYWluX1syXSArIGMpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1szXSA9ICh0aGlzLmNoYWluX1szXSArIGQpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9ICh0aGlzLmNoYWluX1s0XSArIGUpICYgMHhmZmZmZmZmZjtcclxuICAgIH1cclxuICAgIHVwZGF0ZShieXRlcywgbGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhqb2hubGVueik6IHRpZ2h0ZW4gdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcmVtb3ZlIHRoaXMgY2hlY2tcclxuICAgICAgICBpZiAoYnl0ZXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZW5ndGggPSBieXRlcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxlbmd0aE1pbnVzQmxvY2sgPSBsZW5ndGggLSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgLy8gVXNpbmcgbG9jYWwgaW5zdGVhZCBvZiBtZW1iZXIgdmFyaWFibGVzIGdpdmVzIH41JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYuXHJcbiAgICAgICAgY29uc3QgYnVmID0gdGhpcy5idWZfO1xyXG4gICAgICAgIGxldCBpbmJ1ZiA9IHRoaXMuaW5idWZfO1xyXG4gICAgICAgIC8vIFRoZSBvdXRlciB3aGlsZSBsb29wIHNob3VsZCBleGVjdXRlIGF0IG1vc3QgdHdpY2UuXHJcbiAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gV2hlbiB3ZSBoYXZlIG5vIGRhdGEgaW4gdGhlIGJsb2NrIHRvIHRvcCB1cCwgd2UgY2FuIGRpcmVjdGx5IHByb2Nlc3MgdGhlXHJcbiAgICAgICAgICAgIC8vIGlucHV0IGJ1ZmZlciAoYXNzdW1pbmcgaXQgY29udGFpbnMgc3VmZmljaWVudCBkYXRhKS4gVGhpcyBnaXZlcyB+MjUlXHJcbiAgICAgICAgICAgIC8vIHNwZWVkdXAgb24gQ2hyb21lIDIzIGFuZCB+MTUlIHNwZWVkdXAgb24gRmlyZWZveCAxNiwgYnV0IHJlcXVpcmVzIHRoYXRcclxuICAgICAgICAgICAgLy8gdGhlIGRhdGEgaXMgcHJvdmlkZWQgaW4gbGFyZ2UgY2h1bmtzIChvciBpbiBtdWx0aXBsZXMgb2YgNjQgYnl0ZXMpLlxyXG4gICAgICAgICAgICBpZiAoaW5idWYgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDw9IGxlbmd0aE1pbnVzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhieXRlcywgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbiArPSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXMuY2hhckNvZGVBdChuKTtcclxuICAgICAgICAgICAgICAgICAgICArK2luYnVmO1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5idWYgPT09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZltpbmJ1Zl0gPSBieXRlc1tuXTtcclxuICAgICAgICAgICAgICAgICAgICArK2luYnVmO1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5idWYgPT09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSBpbmJ1ZjtcclxuICAgICAgICB0aGlzLnRvdGFsXyArPSBsZW5ndGg7XHJcbiAgICB9XHJcbiAgICAvKiogQG92ZXJyaWRlICovXHJcbiAgICBkaWdlc3QoKSB7XHJcbiAgICAgICAgY29uc3QgZGlnZXN0ID0gW107XHJcbiAgICAgICAgbGV0IHRvdGFsQml0cyA9IHRoaXMudG90YWxfICogODtcclxuICAgICAgICAvLyBBZGQgcGFkIDB4ODAgMHgwMCouXHJcbiAgICAgICAgaWYgKHRoaXMuaW5idWZfIDwgNTYpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCA1NiAtIHRoaXMuaW5idWZfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgdGhpcy5ibG9ja1NpemUgLSAodGhpcy5pbmJ1Zl8gLSA1NikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgIyBiaXRzLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmJsb2NrU2l6ZSAtIDE7IGkgPj0gNTY7IGktLSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1Zl9baV0gPSB0b3RhbEJpdHMgJiAyNTU7XHJcbiAgICAgICAgICAgIHRvdGFsQml0cyAvPSAyNTY7IC8vIERvbid0IHVzZSBiaXQtc2hpZnRpbmcgaGVyZSFcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wcmVzc18odGhpcy5idWZfKTtcclxuICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xyXG4gICAgICAgICAgICAgICAgZGlnZXN0W25dID0gKHRoaXMuY2hhaW5fW2ldID4+IGopICYgMjU1O1xyXG4gICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaWdlc3Q7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEhlbHBlciB0byBtYWtlIGEgU3Vic2NyaWJlIGZ1bmN0aW9uIChqdXN0IGxpa2UgUHJvbWlzZSBoZWxwcyBtYWtlIGFcclxuICogVGhlbmFibGUpLlxyXG4gKlxyXG4gKiBAcGFyYW0gZXhlY3V0b3IgRnVuY3Rpb24gd2hpY2ggY2FuIG1ha2UgY2FsbHMgdG8gYSBzaW5nbGUgT2JzZXJ2ZXJcclxuICogICAgIGFzIGEgcHJveHkuXHJcbiAqIEBwYXJhbSBvbk5vT2JzZXJ2ZXJzIENhbGxiYWNrIHdoZW4gY291bnQgb2YgT2JzZXJ2ZXJzIGdvZXMgdG8gemVyby5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmliZShleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgT2JzZXJ2ZXJQcm94eShleGVjdXRvciwgb25Ob09ic2VydmVycyk7XHJcbiAgICByZXR1cm4gcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpO1xyXG59XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnQgZmFuLW91dCBmb3IgYW55IG51bWJlciBvZiBPYnNlcnZlcnMgYXR0YWNoZWQgdmlhIGEgc3Vic2NyaWJlXHJcbiAqIGZ1bmN0aW9uLlxyXG4gKi9cclxuY2xhc3MgT2JzZXJ2ZXJQcm94eSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gICAgICogICAgIGFzIGEgcHJveHkuXHJcbiAgICAgKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGV4ZWN1dG9yLCBvbk5vT2JzZXJ2ZXJzKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCA9IDA7XHJcbiAgICAgICAgLy8gTWljcm8tdGFzayBzY2hlZHVsaW5nIGJ5IGNhbGxpbmcgdGFzay50aGVuKCkuXHJcbiAgICAgICAgdGhpcy50YXNrID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgdGhpcy5maW5hbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uTm9PYnNlcnZlcnMgPSBvbk5vT2JzZXJ2ZXJzO1xyXG4gICAgICAgIC8vIENhbGwgdGhlIGV4ZWN1dG9yIGFzeW5jaHJvbm91c2x5IHNvIHN1YnNjcmliZXJzIHRoYXQgYXJlIGNhbGxlZFxyXG4gICAgICAgIC8vIHN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIGNyZWF0aW9uIG9mIHRoZSBzdWJzY3JpYmUgZnVuY3Rpb25cclxuICAgICAgICAvLyBjYW4gc3RpbGwgcmVjZWl2ZSB0aGUgdmVyeSBmaXJzdCB2YWx1ZSBnZW5lcmF0ZWQgaW4gdGhlIGV4ZWN1dG9yLlxyXG4gICAgICAgIHRoaXMudGFza1xyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGV4ZWN1dG9yKHRoaXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvcihlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5leHQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlcnJvcihlcnJvcikge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICB9XHJcbiAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGFkZCBhbiBPYnNlcnZlciB0byB0aGUgZmFuLW91dCBsaXN0LlxyXG4gICAgICpcclxuICAgICAqIC0gV2UgcmVxdWlyZSB0aGF0IG5vIGV2ZW50IGlzIHNlbnQgdG8gYSBzdWJzY3JpYmVyIHN5Y2hyb25vdXNseSB0byB0aGVpclxyXG4gICAgICogICBjYWxsIHRvIHN1YnNjcmliZSgpLlxyXG4gICAgICovXHJcbiAgICBzdWJzY3JpYmUobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIGxldCBvYnNlcnZlcjtcclxuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBlcnJvciA9PT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIGNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIE9ic2VydmVyLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBc3NlbWJsZSBhbiBPYnNlcnZlciBvYmplY3Qgd2hlbiBwYXNzZWQgYXMgY2FsbGJhY2sgZnVuY3Rpb25zLlxyXG4gICAgICAgIGlmIChpbXBsZW1lbnRzQW55TWV0aG9kcyhuZXh0T3JPYnNlcnZlciwgW1xyXG4gICAgICAgICAgICAnbmV4dCcsXHJcbiAgICAgICAgICAgICdlcnJvcicsXHJcbiAgICAgICAgICAgICdjb21wbGV0ZSdcclxuICAgICAgICBdKSkge1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IG5leHRPck9ic2VydmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiBuZXh0T3JPYnNlcnZlcixcclxuICAgICAgICAgICAgICAgIGVycm9yLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLm5leHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0ID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmVycm9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIuY29tcGxldGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHVuc3ViID0gdGhpcy51bnN1YnNjcmliZU9uZS5iaW5kKHRoaXMsIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBzdWJzY3JpYmUgdG8gYSB0ZXJtaW5hdGVkIE9ic2VydmFibGUgLSB3ZVxyXG4gICAgICAgIC8vIGp1c3QgcmVzcG9uZCB0byB0aGUgT2JzZXJ2ZXIgd2l0aCB0aGUgZmluYWwgZXJyb3Igb3IgY29tcGxldGVcclxuICAgICAgICAvLyBldmVudC5cclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmFsRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IodGhpcy5maW5hbEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gdW5zdWI7XHJcbiAgICB9XHJcbiAgICAvLyBVbnN1YnNjcmliZSBpcyBzeW5jaHJvbm91cyAtIHdlIGd1YXJhbnRlZSB0aGF0IG5vIGV2ZW50cyBhcmUgc2VudCB0b1xyXG4gICAgLy8gYW55IHVuc3Vic2NyaWJlZCBPYnNlcnZlci5cclxuICAgIHVuc3Vic2NyaWJlT25lKGkpIHtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9ic2VydmVyc1tpXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJzW2ldO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCAtPSAxO1xyXG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyQ291bnQgPT09IDAgJiYgdGhpcy5vbk5vT2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvckVhY2hPYnNlcnZlcihmbikge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICAvLyBBbHJlYWR5IGNsb3NlZCBieSBwcmV2aW91cyBldmVudC4uLi5qdXN0IGVhdCB0aGUgYWRkaXRpb25hbCB2YWx1ZXMuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU2luY2Ugc2VuZE9uZSBjYWxscyBhc3luY2hyb25vdXNseSAtIHRoZXJlIGlzIG5vIGNoYW5jZSB0aGF0XHJcbiAgICAgICAgLy8gdGhpcy5vYnNlcnZlcnMgd2lsbCBiZWNvbWUgdW5kZWZpbmVkLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kT25lKGksIGZuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBDYWxsIHRoZSBPYnNlcnZlciB2aWEgb25lIG9mIGl0J3MgY2FsbGJhY2sgZnVuY3Rpb24uIFdlIGFyZSBjYXJlZnVsIHRvXHJcbiAgICAvLyBjb25maXJtIHRoYXQgdGhlIG9ic2VydmUgaGFzIG5vdCBiZWVuIHVuc3Vic2NyaWJlZCBzaW5jZSB0aGlzIGFzeW5jaHJvbm91c1xyXG4gICAgLy8gZnVuY3Rpb24gaGFkIGJlZW4gcXVldWVkLlxyXG4gICAgc2VuZE9uZShpLCBmbikge1xyXG4gICAgICAgIC8vIEV4ZWN1dGUgdGhlIGNhbGxiYWNrIGFzeW5jaHJvbm91c2x5XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vYnNlcnZlcnNbaV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmbih0aGlzLm9ic2VydmVyc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSBleGNlcHRpb25zIHJhaXNlZCBpbiBPYnNlcnZlcnMgb3IgbWlzc2luZyBtZXRob2RzIG9mIGFuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT2JzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTG9nIGVycm9yIHRvIGNvbnNvbGUuIGIvMzE0MDQ4MDZcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNsb3NlKGVycikge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoZXJyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5maW5hbEVycm9yID0gZXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm94eSBpcyBubyBsb25nZXIgbmVlZGVkIC0gZ2FyYmFnZSBjb2xsZWN0IHJlZmVyZW5jZXNcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgdGhpcy50YXNrLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKiBUdXJuIHN5bmNocm9ub3VzIGZ1bmN0aW9uIGludG8gb25lIGNhbGxlZCBhc3luY2hyb25vdXNseS4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcclxuZnVuY3Rpb24gYXN5bmMoZm4sIG9uRXJyb3IpIHtcclxuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh0cnVlKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGZuKC4uLmFyZ3MpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgb2JqZWN0IHBhc3NlZCBpbiBpbXBsZW1lbnRzIGFueSBvZiB0aGUgbmFtZWQgbWV0aG9kcy5cclxuICovXHJcbmZ1bmN0aW9uIGltcGxlbWVudHNBbnlNZXRob2RzKG9iaiwgbWV0aG9kcykge1xyXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIG1ldGhvZHMpIHtcclxuICAgICAgICBpZiAobWV0aG9kIGluIG9iaiAmJiB0eXBlb2Ygb2JqW21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIG5vb3AoKSB7XHJcbiAgICAvLyBkbyBub3RoaW5nXHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgYXBwcm9wcmlhdGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgZm9yIGEgcHVibGljIGZ1bmN0aW9uLlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgaXQgZmFpbHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcclxuICogQHBhcmFtIG1pbkNvdW50IFRoZSBtaW5pbXVtIG51bWJlciBvZiBhcmd1bWVudHMgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAqIEBwYXJhbSBtYXhDb3VudCBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnQgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAqIEBwYXJhbSBhcmdDb3VudCBUaGUgYWN0dWFsIG51bWJlciBvZiBhcmd1bWVudHMgcHJvdmlkZWQuXHJcbiAqL1xyXG5jb25zdCB2YWxpZGF0ZUFyZ0NvdW50ID0gZnVuY3Rpb24gKGZuTmFtZSwgbWluQ291bnQsIG1heENvdW50LCBhcmdDb3VudCkge1xyXG4gICAgbGV0IGFyZ0Vycm9yO1xyXG4gICAgaWYgKGFyZ0NvdW50IDwgbWluQ291bnQpIHtcclxuICAgICAgICBhcmdFcnJvciA9ICdhdCBsZWFzdCAnICsgbWluQ291bnQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhcmdDb3VudCA+IG1heENvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSBtYXhDb3VudCA9PT0gMCA/ICdub25lJyA6ICdubyBtb3JlIHRoYW4gJyArIG1heENvdW50O1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ0Vycm9yKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBmbk5hbWUgK1xyXG4gICAgICAgICAgICAnIGZhaWxlZDogV2FzIGNhbGxlZCB3aXRoICcgK1xyXG4gICAgICAgICAgICBhcmdDb3VudCArXHJcbiAgICAgICAgICAgIChhcmdDb3VudCA9PT0gMSA/ICcgYXJndW1lbnQuJyA6ICcgYXJndW1lbnRzLicpICtcclxuICAgICAgICAgICAgJyBFeHBlY3RzICcgK1xyXG4gICAgICAgICAgICBhcmdFcnJvciArXHJcbiAgICAgICAgICAgICcuJztcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogR2VuZXJhdGVzIGEgc3RyaW5nIHRvIHByZWZpeCBhbiBlcnJvciBtZXNzYWdlIGFib3V0IGZhaWxlZCBhcmd1bWVudCB2YWxpZGF0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcclxuICogQHBhcmFtIGFyZ05hbWUgVGhlIG5hbWUgb2YgdGhlIGFyZ3VtZW50XHJcbiAqIEByZXR1cm4gVGhlIHByZWZpeCB0byBhZGQgdG8gdGhlIGVycm9yIHRocm93biBmb3IgdmFsaWRhdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIGVycm9yUHJlZml4KGZuTmFtZSwgYXJnTmFtZSkge1xyXG4gICAgcmV0dXJuIGAke2ZuTmFtZX0gZmFpbGVkOiAke2FyZ05hbWV9IGFyZ3VtZW50IGA7XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSBmbk5hbWVcclxuICogQHBhcmFtIGFyZ3VtZW50TnVtYmVyXHJcbiAqIEBwYXJhbSBuYW1lc3BhY2VcclxuICogQHBhcmFtIG9wdGlvbmFsXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZU5hbWVzcGFjZShmbk5hbWUsIG5hbWVzcGFjZSwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhbmFtZXNwYWNlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgLy9UT0RPOiBJIHNob3VsZCBkbyBtb3JlIHZhbGlkYXRpb24gaGVyZS4gV2Ugb25seSBhbGxvdyBjZXJ0YWluIGNoYXJzIGluIG5hbWVzcGFjZXMuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgJ25hbWVzcGFjZScpICsgJ211c3QgYmUgYSB2YWxpZCBmaXJlYmFzZSBuYW1lc3BhY2UuJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDYWxsYmFjayhmbk5hbWUsIGFyZ3VtZW50TmFtZSwgXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmNhbGxiYWNrLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE5hbWUpICsgJ211c3QgYmUgYSB2YWxpZCBmdW5jdGlvbi4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbnRleHRPYmplY3QoZm5OYW1lLCBhcmd1bWVudE5hbWUsIGNvbnRleHQsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIWNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvbnRleHQgIT09ICdvYmplY3QnIHx8IGNvbnRleHQgPT09IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE5hbWUpICsgJ211c3QgYmUgYSB2YWxpZCBjb250ZXh0IG9iamVjdC4nKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb2RlIG9yaWdpbmFsbHkgY2FtZSBmcm9tIGdvb2cuY3J5cHQuc3RyaW5nVG9VdGY4Qnl0ZUFycmF5LCBidXQgZm9yIHNvbWUgcmVhc29uIHRoZXlcclxuLy8gYXV0b21hdGljYWxseSByZXBsYWNlZCAnXFxyXFxuJyB3aXRoICdcXG4nLCBhbmQgdGhleSBkaWRuJ3QgaGFuZGxlIHN1cnJvZ2F0ZSBwYWlycyxcclxuLy8gc28gaXQncyBiZWVuIG1vZGlmaWVkLlxyXG4vLyBOb3RlIHRoYXQgbm90IGFsbCBVbmljb2RlIGNoYXJhY3RlcnMgYXBwZWFyIGFzIHNpbmdsZSBjaGFyYWN0ZXJzIGluIEphdmFTY3JpcHQgc3RyaW5ncy5cclxuLy8gZnJvbUNoYXJDb2RlIHJldHVybnMgdGhlIFVURi0xNiBlbmNvZGluZyBvZiBhIGNoYXJhY3RlciAtIHNvIHNvbWUgVW5pY29kZSBjaGFyYWN0ZXJzXHJcbi8vIHVzZSAyIGNoYXJhY3RlcnMgaW4gSmF2YXNjcmlwdC4gIEFsbCA0LWJ5dGUgVVRGLTggY2hhcmFjdGVycyBiZWdpbiB3aXRoIGEgZmlyc3RcclxuLy8gY2hhcmFjdGVyIGluIHRoZSByYW5nZSAweEQ4MDAgLSAweERCRkYgKHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzby1jYWxsZWQgc3Vycm9nYXRlXHJcbi8vIHBhaXIpLlxyXG4vLyBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjEuM1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICovXHJcbmNvbnN0IHN0cmluZ1RvQnl0ZUFycmF5ID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgY29uc3Qgb3V0ID0gW107XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgLy8gSXMgdGhpcyB0aGUgbGVhZCBzdXJyb2dhdGUgaW4gYSBzdXJyb2dhdGUgcGFpcj9cclxuICAgICAgICBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgY29uc3QgaGlnaCA9IGMgLSAweGQ4MDA7IC8vIHRoZSBoaWdoIDEwIGJpdHMuXHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgYXNzZXJ0KGkgPCBzdHIubGVuZ3RoLCAnU3Vycm9nYXRlIHBhaXIgbWlzc2luZyB0cmFpbCBzdXJyb2dhdGUuJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvdyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gMHhkYzAwOyAvLyB0aGUgbG93IDEwIGJpdHMuXHJcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKGhpZ2ggPDwgMTApICsgbG93O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCA2NTUzNikge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG4vKipcclxuICogQ2FsY3VsYXRlIGxlbmd0aCB3aXRob3V0IGFjdHVhbGx5IGNvbnZlcnRpbmc7IHVzZWZ1bCBmb3IgZG9pbmcgY2hlYXBlciB2YWxpZGF0aW9uLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcbmNvbnN0IHN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIGxldCBwID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIHArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgcCArPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjID49IDB4ZDgwMCAmJiBjIDw9IDB4ZGJmZikge1xyXG4gICAgICAgICAgICAvLyBMZWFkIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLiAgVGhlIHBhaXIgdG9nZXRoZXIgd2lsbCB0YWtlIDQgYnl0ZXMgdG8gcmVwcmVzZW50LlxyXG4gICAgICAgICAgICBwICs9IDQ7XHJcbiAgICAgICAgICAgIGkrKzsgLy8gc2tpcCB0cmFpbCBzdXJyb2dhdGUuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwICs9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHA7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDb3BpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xyXG4gKiBHZW5lcmF0ZXMgYSBuZXcgdXVpZC5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgdXVpZHY0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgYyA9PiB7XHJcbiAgICAgICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCwgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XHJcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gICAgfSk7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBleHBvbmVudGlhbGx5IGluY3JlYXNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMgPSAxMDAwO1xyXG4vKipcclxuICogVGhlIGZhY3RvciB0byBiYWNrb2ZmIGJ5LlxyXG4gKiBTaG91bGQgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDEuXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SID0gMjtcclxuLyoqXHJcbiAqIFRoZSBtYXhpbXVtIG1pbGxpc2Vjb25kcyB0byBpbmNyZWFzZSB0by5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgTUFYX1ZBTFVFX01JTExJUyA9IDQgKiA2MCAqIDYwICogMTAwMDsgLy8gRm91ciBob3VycywgbGlrZSBpT1MgYW5kIEFuZHJvaWQuXHJcbi8qKlxyXG4gKiBUaGUgcGVyY2VudGFnZSBvZiBiYWNrb2ZmIHRpbWUgdG8gcmFuZG9taXplIGJ5LlxyXG4gKiBTZWVcclxuICogaHR0cDovL2dvL3NhZmUtY2xpZW50LWJlaGF2aW9yI3N0ZXAtMS1kZXRlcm1pbmUtdGhlLWFwcHJvcHJpYXRlLXJldHJ5LWludGVydmFsLXRvLWhhbmRsZS1zcGlrZS10cmFmZmljXHJcbiAqIGZvciBjb250ZXh0LlxyXG4gKlxyXG4gKiA8cD5WaXNpYmxlIGZvciB0ZXN0aW5nXHJcbiAqL1xyXG5jb25zdCBSQU5ET01fRkFDVE9SID0gMC41O1xyXG4vKipcclxuICogQmFzZWQgb24gdGhlIGJhY2tvZmYgbWV0aG9kIGZyb21cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9tYXN0ZXIvY2xvc3VyZS9nb29nL21hdGgvZXhwb25lbnRpYWxiYWNrb2ZmLmpzLlxyXG4gKiBFeHRyYWN0ZWQgaGVyZSBzbyB3ZSBkb24ndCBuZWVkIHRvIHBhc3MgbWV0YWRhdGEgYW5kIGEgc3RhdGVmdWwgRXhwb25lbnRpYWxCYWNrb2ZmIG9iamVjdCBhcm91bmQuXHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzKGJhY2tvZmZDb3VudCwgaW50ZXJ2YWxNaWxsaXMgPSBERUZBVUxUX0lOVEVSVkFMX01JTExJUywgYmFja29mZkZhY3RvciA9IERFRkFVTFRfQkFDS09GRl9GQUNUT1IpIHtcclxuICAgIC8vIENhbGN1bGF0ZXMgYW4gZXhwb25lbnRpYWxseSBpbmNyZWFzaW5nIHZhbHVlLlxyXG4gICAgLy8gRGV2aWF0aW9uOiBjYWxjdWxhdGVzIHZhbHVlIGZyb20gY291bnQgYW5kIGEgY29uc3RhbnQgaW50ZXJ2YWwsIHNvIHdlIG9ubHkgbmVlZCB0byBzYXZlIHZhbHVlXHJcbiAgICAvLyBhbmQgY291bnQgdG8gcmVzdG9yZSBzdGF0ZS5cclxuICAgIGNvbnN0IGN1cnJCYXNlVmFsdWUgPSBpbnRlcnZhbE1pbGxpcyAqIE1hdGgucG93KGJhY2tvZmZGYWN0b3IsIGJhY2tvZmZDb3VudCk7XHJcbiAgICAvLyBBIHJhbmRvbSBcImZ1enpcIiB0byBhdm9pZCB3YXZlcyBvZiByZXRyaWVzLlxyXG4gICAgLy8gRGV2aWF0aW9uOiByYW5kb21GYWN0b3IgaXMgcmVxdWlyZWQuXHJcbiAgICBjb25zdCByYW5kb21XYWl0ID0gTWF0aC5yb3VuZChcclxuICAgIC8vIEEgZnJhY3Rpb24gb2YgdGhlIGJhY2tvZmYgdmFsdWUgdG8gYWRkL3N1YnRyYWN0LlxyXG4gICAgLy8gRGV2aWF0aW9uOiBjaGFuZ2VzIG11bHRpcGxpY2F0aW9uIG9yZGVyIHRvIGltcHJvdmUgcmVhZGFiaWxpdHkuXHJcbiAgICBSQU5ET01fRkFDVE9SICpcclxuICAgICAgICBjdXJyQmFzZVZhbHVlICpcclxuICAgICAgICAvLyBBIHJhbmRvbSBmbG9hdCAocm91bmRlZCB0byBpbnQgYnkgTWF0aC5yb3VuZCBhYm92ZSkgaW4gdGhlIHJhbmdlIFstMSwgMV0uIERldGVybWluZXNcclxuICAgICAgICAvLyBpZiB3ZSBhZGQgb3Igc3VidHJhY3QuXHJcbiAgICAgICAgKE1hdGgucmFuZG9tKCkgLSAwLjUpICpcclxuICAgICAgICAyKTtcclxuICAgIC8vIExpbWl0cyBiYWNrb2ZmIHRvIG1heCB0byBhdm9pZCBlZmZlY3RpdmVseSBwZXJtYW5lbnQgYmFja29mZi5cclxuICAgIHJldHVybiBNYXRoLm1pbihNQVhfVkFMVUVfTUlMTElTLCBjdXJyQmFzZVZhbHVlICsgcmFuZG9tV2FpdCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGUgRW5nbGlzaCBvcmRpbmFsIGxldHRlcnMgYWZ0ZXIgYSBudW1iZXJcclxuICovXHJcbmZ1bmN0aW9uIG9yZGluYWwoaSkge1xyXG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaSkpIHtcclxuICAgICAgICByZXR1cm4gYCR7aX1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGkgKyBpbmRpY2F0b3IoaSk7XHJcbn1cclxuZnVuY3Rpb24gaW5kaWNhdG9yKGkpIHtcclxuICAgIGkgPSBNYXRoLmFicyhpKTtcclxuICAgIGNvbnN0IGNlbnQgPSBpICUgMTAwO1xyXG4gICAgaWYgKGNlbnQgPj0gMTAgJiYgY2VudCA8PSAyMCkge1xyXG4gICAgICAgIHJldHVybiAndGgnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVjID0gaSAlIDEwO1xyXG4gICAgaWYgKGRlYyA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiAnc3QnO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYyA9PT0gMikge1xyXG4gICAgICAgIHJldHVybiAnbmQnO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYyA9PT0gMykge1xyXG4gICAgICAgIHJldHVybiAncmQnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICd0aCc7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0TW9kdWxhckluc3RhbmNlKHNlcnZpY2UpIHtcclxuICAgIGlmIChzZXJ2aWNlICYmIHNlcnZpY2UuX2RlbGVnYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2UuX2RlbGVnYXRlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0cy5DT05TVEFOVFMgPSBDT05TVEFOVFM7XG5leHBvcnRzLkRlY29kZUJhc2U2NFN0cmluZ0Vycm9yID0gRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3I7XG5leHBvcnRzLkRlZmVycmVkID0gRGVmZXJyZWQ7XG5leHBvcnRzLkVycm9yRmFjdG9yeSA9IEVycm9yRmFjdG9yeTtcbmV4cG9ydHMuRmlyZWJhc2VFcnJvciA9IEZpcmViYXNlRXJyb3I7XG5leHBvcnRzLk1BWF9WQUxVRV9NSUxMSVMgPSBNQVhfVkFMVUVfTUlMTElTO1xuZXhwb3J0cy5SQU5ET01fRkFDVE9SID0gUkFORE9NX0ZBQ1RPUjtcbmV4cG9ydHMuU2hhMSA9IFNoYTE7XG5leHBvcnRzLmFyZUNvb2tpZXNFbmFibGVkID0gYXJlQ29va2llc0VuYWJsZWQ7XG5leHBvcnRzLmFzc2VydCA9IGFzc2VydDtcbmV4cG9ydHMuYXNzZXJ0aW9uRXJyb3IgPSBhc3NlcnRpb25FcnJvcjtcbmV4cG9ydHMuYXN5bmMgPSBhc3luYztcbmV4cG9ydHMuYmFzZTY0ID0gYmFzZTY0O1xuZXhwb3J0cy5iYXNlNjREZWNvZGUgPSBiYXNlNjREZWNvZGU7XG5leHBvcnRzLmJhc2U2NEVuY29kZSA9IGJhc2U2NEVuY29kZTtcbmV4cG9ydHMuYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcgPSBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZztcbmV4cG9ydHMuY2FsY3VsYXRlQmFja29mZk1pbGxpcyA9IGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXM7XG5leHBvcnRzLmNvbnRhaW5zID0gY29udGFpbnM7XG5leHBvcnRzLmNyZWF0ZU1vY2tVc2VyVG9rZW4gPSBjcmVhdGVNb2NrVXNlclRva2VuO1xuZXhwb3J0cy5jcmVhdGVTdWJzY3JpYmUgPSBjcmVhdGVTdWJzY3JpYmU7XG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbmV4cG9ydHMuZGVlcENvcHkgPSBkZWVwQ29weTtcbmV4cG9ydHMuZGVlcEVxdWFsID0gZGVlcEVxdWFsO1xuZXhwb3J0cy5kZWVwRXh0ZW5kID0gZGVlcEV4dGVuZDtcbmV4cG9ydHMuZXJyb3JQcmVmaXggPSBlcnJvclByZWZpeDtcbmV4cG9ydHMuZXh0cmFjdFF1ZXJ5c3RyaW5nID0gZXh0cmFjdFF1ZXJ5c3RyaW5nO1xuZXhwb3J0cy5nZXREZWZhdWx0QXBwQ29uZmlnID0gZ2V0RGVmYXVsdEFwcENvbmZpZztcbmV4cG9ydHMuZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdCA9IGdldERlZmF1bHRFbXVsYXRvckhvc3Q7XG5leHBvcnRzLmdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydCA9IGdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydDtcbmV4cG9ydHMuZ2V0RGVmYXVsdHMgPSBnZXREZWZhdWx0cztcbmV4cG9ydHMuZ2V0RXhwZXJpbWVudGFsU2V0dGluZyA9IGdldEV4cGVyaW1lbnRhbFNldHRpbmc7XG5leHBvcnRzLmdldEdsb2JhbCA9IGdldEdsb2JhbDtcbmV4cG9ydHMuZ2V0TW9kdWxhckluc3RhbmNlID0gZ2V0TW9kdWxhckluc3RhbmNlO1xuZXhwb3J0cy5nZXRVQSA9IGdldFVBO1xuZXhwb3J0cy5pc0FkbWluID0gaXNBZG1pbjtcbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xuZXhwb3J0cy5pc0Jyb3dzZXJFeHRlbnNpb24gPSBpc0Jyb3dzZXJFeHRlbnNpb247XG5leHBvcnRzLmlzRWxlY3Ryb24gPSBpc0VsZWN0cm9uO1xuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbmV4cG9ydHMuaXNJRSA9IGlzSUU7XG5leHBvcnRzLmlzSW5kZXhlZERCQXZhaWxhYmxlID0gaXNJbmRleGVkREJBdmFpbGFibGU7XG5leHBvcnRzLmlzTW9iaWxlQ29yZG92YSA9IGlzTW9iaWxlQ29yZG92YTtcbmV4cG9ydHMuaXNOb2RlID0gaXNOb2RlO1xuZXhwb3J0cy5pc05vZGVTZGsgPSBpc05vZGVTZGs7XG5leHBvcnRzLmlzUmVhY3ROYXRpdmUgPSBpc1JlYWN0TmF0aXZlO1xuZXhwb3J0cy5pc1NhZmFyaSA9IGlzU2FmYXJpO1xuZXhwb3J0cy5pc1VXUCA9IGlzVVdQO1xuZXhwb3J0cy5pc1ZhbGlkRm9ybWF0ID0gaXNWYWxpZEZvcm1hdDtcbmV4cG9ydHMuaXNWYWxpZFRpbWVzdGFtcCA9IGlzVmFsaWRUaW1lc3RhbXA7XG5leHBvcnRzLmlzV2ViV29ya2VyID0gaXNXZWJXb3JrZXI7XG5leHBvcnRzLmlzc3VlZEF0VGltZSA9IGlzc3VlZEF0VGltZTtcbmV4cG9ydHMuanNvbkV2YWwgPSBqc29uRXZhbDtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5vcmRpbmFsID0gb3JkaW5hbDtcbmV4cG9ydHMucHJvbWlzZVdpdGhUaW1lb3V0ID0gcHJvbWlzZVdpdGhUaW1lb3V0O1xuZXhwb3J0cy5xdWVyeXN0cmluZyA9IHF1ZXJ5c3RyaW5nO1xuZXhwb3J0cy5xdWVyeXN0cmluZ0RlY29kZSA9IHF1ZXJ5c3RyaW5nRGVjb2RlO1xuZXhwb3J0cy5zYWZlR2V0ID0gc2FmZUdldDtcbmV4cG9ydHMuc3RyaW5nTGVuZ3RoID0gc3RyaW5nTGVuZ3RoO1xuZXhwb3J0cy5zdHJpbmdUb0J5dGVBcnJheSA9IHN0cmluZ1RvQnl0ZUFycmF5O1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG5leHBvcnRzLnV1aWR2NCA9IHV1aWR2NDtcbmV4cG9ydHMudmFsaWRhdGVBcmdDb3VudCA9IHZhbGlkYXRlQXJnQ291bnQ7XG5leHBvcnRzLnZhbGlkYXRlQ2FsbGJhY2sgPSB2YWxpZGF0ZUNhbGxiYWNrO1xuZXhwb3J0cy52YWxpZGF0ZUNvbnRleHRPYmplY3QgPSB2YWxpZGF0ZUNvbnRleHRPYmplY3Q7XG5leHBvcnRzLnZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUgPSB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlO1xuZXhwb3J0cy52YWxpZGF0ZU5hbWVzcGFjZSA9IHZhbGlkYXRlTmFtZXNwYWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguY2pzLmpzLm1hcFxuIiwiLyoqIEBsaWNlbnNlXG5Db3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiovXG4oZnVuY3Rpb24oKSB7J3VzZSBzdHJpY3QnO3ZhciBoOy8qKiBAbGljZW5zZVxuXG4gQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuKi9cbmZ1bmN0aW9uIGsoZixhKXtmdW5jdGlvbiBjKCl7fWMucHJvdG90eXBlPWEucHJvdG90eXBlO2YuRD1hLnByb3RvdHlwZTtmLnByb3RvdHlwZT1uZXcgYztmLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1mO2YuQz1mdW5jdGlvbihkLGUsZyl7Zm9yKHZhciBiPUFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMikscj0yO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspYltyLTJdPWFyZ3VtZW50c1tyXTtyZXR1cm4gYS5wcm90b3R5cGVbZV0uYXBwbHkoZCxiKX19O2Z1bmN0aW9uIGwoKXt0aGlzLmJsb2NrU2l6ZT0tMX07ZnVuY3Rpb24gbSgpe3RoaXMuYmxvY2tTaXplPS0xO3RoaXMuYmxvY2tTaXplPTY0O3RoaXMuZz1BcnJheSg0KTt0aGlzLkI9QXJyYXkodGhpcy5ibG9ja1NpemUpO3RoaXMubz10aGlzLmg9MDt0aGlzLnMoKX1rKG0sbCk7bS5wcm90b3R5cGUucz1mdW5jdGlvbigpe3RoaXMuZ1swXT0xNzMyNTg0MTkzO3RoaXMuZ1sxXT00MDIzMjMzNDE3O3RoaXMuZ1syXT0yNTYyMzgzMTAyO3RoaXMuZ1szXT0yNzE3MzM4Nzg7dGhpcy5vPXRoaXMuaD0wfTtcbmZ1bmN0aW9uIG4oZixhLGMpe2N8fChjPTApO3ZhciBkPUFycmF5KDE2KTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZm9yKHZhciBlPTA7MTY+ZTsrK2UpZFtlXT1hLmNoYXJDb2RlQXQoYysrKXxhLmNoYXJDb2RlQXQoYysrKTw8OHxhLmNoYXJDb2RlQXQoYysrKTw8MTZ8YS5jaGFyQ29kZUF0KGMrKyk8PDI0O2Vsc2UgZm9yKGU9MDsxNj5lOysrZSlkW2VdPWFbYysrXXxhW2MrK108PDh8YVtjKytdPDwxNnxhW2MrK108PDI0O2E9Zi5nWzBdO2M9Zi5nWzFdO2U9Zi5nWzJdO3ZhciBnPWYuZ1szXTt2YXIgYj1hKyhnXmMmKGVeZykpK2RbMF0rMzYxNDA5MDM2MCY0Mjk0OTY3Mjk1O2E9YysoYjw8NyY0Mjk0OTY3Mjk1fGI+Pj4yNSk7Yj1nKyhlXmEmKGNeZSkpK2RbMV0rMzkwNTQwMjcxMCY0Mjk0OTY3Mjk1O2c9YSsoYjw8MTImNDI5NDk2NzI5NXxiPj4+MjApO2I9ZSsoY15nJihhXmMpKStkWzJdKzYwNjEwNTgxOSY0Mjk0OTY3Mjk1O2U9ZysoYjw8MTcmNDI5NDk2NzI5NXxiPj4+MTUpO1xuYj1jKyhhXmUmKGdeYSkpK2RbM10rMzI1MDQ0MTk2NiY0Mjk0OTY3Mjk1O2M9ZSsoYjw8MjImNDI5NDk2NzI5NXxiPj4+MTApO2I9YSsoZ15jJihlXmcpKStkWzRdKzQxMTg1NDgzOTkmNDI5NDk2NzI5NTthPWMrKGI8PDcmNDI5NDk2NzI5NXxiPj4+MjUpO2I9ZysoZV5hJihjXmUpKStkWzVdKzEyMDAwODA0MjYmNDI5NDk2NzI5NTtnPWErKGI8PDEyJjQyOTQ5NjcyOTV8Yj4+PjIwKTtiPWUrKGNeZyYoYV5jKSkrZFs2XSsyODIxNzM1OTU1JjQyOTQ5NjcyOTU7ZT1nKyhiPDwxNyY0Mjk0OTY3Mjk1fGI+Pj4xNSk7Yj1jKyhhXmUmKGdeYSkpK2RbN10rNDI0OTI2MTMxMyY0Mjk0OTY3Mjk1O2M9ZSsoYjw8MjImNDI5NDk2NzI5NXxiPj4+MTApO2I9YSsoZ15jJihlXmcpKStkWzhdKzE3NzAwMzU0MTYmNDI5NDk2NzI5NTthPWMrKGI8PDcmNDI5NDk2NzI5NXxiPj4+MjUpO2I9ZysoZV5hJihjXmUpKStkWzldKzIzMzY1NTI4NzkmNDI5NDk2NzI5NTtnPWErKGI8PDEyJjQyOTQ5NjcyOTV8XG5iPj4+MjApO2I9ZSsoY15nJihhXmMpKStkWzEwXSs0Mjk0OTI1MjMzJjQyOTQ5NjcyOTU7ZT1nKyhiPDwxNyY0Mjk0OTY3Mjk1fGI+Pj4xNSk7Yj1jKyhhXmUmKGdeYSkpK2RbMTFdKzIzMDQ1NjMxMzQmNDI5NDk2NzI5NTtjPWUrKGI8PDIyJjQyOTQ5NjcyOTV8Yj4+PjEwKTtiPWErKGdeYyYoZV5nKSkrZFsxMl0rMTgwNDYwMzY4MiY0Mjk0OTY3Mjk1O2E9YysoYjw8NyY0Mjk0OTY3Mjk1fGI+Pj4yNSk7Yj1nKyhlXmEmKGNeZSkpK2RbMTNdKzQyNTQ2MjYxOTUmNDI5NDk2NzI5NTtnPWErKGI8PDEyJjQyOTQ5NjcyOTV8Yj4+PjIwKTtiPWUrKGNeZyYoYV5jKSkrZFsxNF0rMjc5Mjk2NTAwNiY0Mjk0OTY3Mjk1O2U9ZysoYjw8MTcmNDI5NDk2NzI5NXxiPj4+MTUpO2I9YysoYV5lJihnXmEpKStkWzE1XSsxMjM2NTM1MzI5JjQyOTQ5NjcyOTU7Yz1lKyhiPDwyMiY0Mjk0OTY3Mjk1fGI+Pj4xMCk7Yj1hKyhlXmcmKGNeZSkpK2RbMV0rNDEyOTE3MDc4NiY0Mjk0OTY3Mjk1O2E9YysoYjw8XG41JjQyOTQ5NjcyOTV8Yj4+PjI3KTtiPWcrKGNeZSYoYV5jKSkrZFs2XSszMjI1NDY1NjY0JjQyOTQ5NjcyOTU7Zz1hKyhiPDw5JjQyOTQ5NjcyOTV8Yj4+PjIzKTtiPWUrKGFeYyYoZ15hKSkrZFsxMV0rNjQzNzE3NzEzJjQyOTQ5NjcyOTU7ZT1nKyhiPDwxNCY0Mjk0OTY3Mjk1fGI+Pj4xOCk7Yj1jKyhnXmEmKGVeZykpK2RbMF0rMzkyMTA2OTk5NCY0Mjk0OTY3Mjk1O2M9ZSsoYjw8MjAmNDI5NDk2NzI5NXxiPj4+MTIpO2I9YSsoZV5nJihjXmUpKStkWzVdKzM1OTM0MDg2MDUmNDI5NDk2NzI5NTthPWMrKGI8PDUmNDI5NDk2NzI5NXxiPj4+MjcpO2I9ZysoY15lJihhXmMpKStkWzEwXSszODAxNjA4MyY0Mjk0OTY3Mjk1O2c9YSsoYjw8OSY0Mjk0OTY3Mjk1fGI+Pj4yMyk7Yj1lKyhhXmMmKGdeYSkpK2RbMTVdKzM2MzQ0ODg5NjEmNDI5NDk2NzI5NTtlPWcrKGI8PDE0JjQyOTQ5NjcyOTV8Yj4+PjE4KTtiPWMrKGdeYSYoZV5nKSkrZFs0XSszODg5NDI5NDQ4JjQyOTQ5NjcyOTU7Yz1cbmUrKGI8PDIwJjQyOTQ5NjcyOTV8Yj4+PjEyKTtiPWErKGVeZyYoY15lKSkrZFs5XSs1Njg0NDY0MzgmNDI5NDk2NzI5NTthPWMrKGI8PDUmNDI5NDk2NzI5NXxiPj4+MjcpO2I9ZysoY15lJihhXmMpKStkWzE0XSszMjc1MTYzNjA2JjQyOTQ5NjcyOTU7Zz1hKyhiPDw5JjQyOTQ5NjcyOTV8Yj4+PjIzKTtiPWUrKGFeYyYoZ15hKSkrZFszXSs0MTA3NjAzMzM1JjQyOTQ5NjcyOTU7ZT1nKyhiPDwxNCY0Mjk0OTY3Mjk1fGI+Pj4xOCk7Yj1jKyhnXmEmKGVeZykpK2RbOF0rMTE2MzUzMTUwMSY0Mjk0OTY3Mjk1O2M9ZSsoYjw8MjAmNDI5NDk2NzI5NXxiPj4+MTIpO2I9YSsoZV5nJihjXmUpKStkWzEzXSsyODUwMjg1ODI5JjQyOTQ5NjcyOTU7YT1jKyhiPDw1JjQyOTQ5NjcyOTV8Yj4+PjI3KTtiPWcrKGNeZSYoYV5jKSkrZFsyXSs0MjQzNTYzNTEyJjQyOTQ5NjcyOTU7Zz1hKyhiPDw5JjQyOTQ5NjcyOTV8Yj4+PjIzKTtiPWUrKGFeYyYoZ15hKSkrZFs3XSsxNzM1MzI4NDczJjQyOTQ5NjcyOTU7XG5lPWcrKGI8PDE0JjQyOTQ5NjcyOTV8Yj4+PjE4KTtiPWMrKGdeYSYoZV5nKSkrZFsxMl0rMjM2ODM1OTU2MiY0Mjk0OTY3Mjk1O2M9ZSsoYjw8MjAmNDI5NDk2NzI5NXxiPj4+MTIpO2I9YSsoY15lXmcpK2RbNV0rNDI5NDU4ODczOCY0Mjk0OTY3Mjk1O2E9YysoYjw8NCY0Mjk0OTY3Mjk1fGI+Pj4yOCk7Yj1nKyhhXmNeZSkrZFs4XSsyMjcyMzkyODMzJjQyOTQ5NjcyOTU7Zz1hKyhiPDwxMSY0Mjk0OTY3Mjk1fGI+Pj4yMSk7Yj1lKyhnXmFeYykrZFsxMV0rMTgzOTAzMDU2MiY0Mjk0OTY3Mjk1O2U9ZysoYjw8MTYmNDI5NDk2NzI5NXxiPj4+MTYpO2I9YysoZV5nXmEpK2RbMTRdKzQyNTk2NTc3NDAmNDI5NDk2NzI5NTtjPWUrKGI8PDIzJjQyOTQ5NjcyOTV8Yj4+PjkpO2I9YSsoY15lXmcpK2RbMV0rMjc2Mzk3NTIzNiY0Mjk0OTY3Mjk1O2E9YysoYjw8NCY0Mjk0OTY3Mjk1fGI+Pj4yOCk7Yj1nKyhhXmNeZSkrZFs0XSsxMjcyODkzMzUzJjQyOTQ5NjcyOTU7Zz1hKyhiPDwxMSY0Mjk0OTY3Mjk1fFxuYj4+PjIxKTtiPWUrKGdeYV5jKStkWzddKzQxMzk0Njk2NjQmNDI5NDk2NzI5NTtlPWcrKGI8PDE2JjQyOTQ5NjcyOTV8Yj4+PjE2KTtiPWMrKGVeZ15hKStkWzEwXSszMjAwMjM2NjU2JjQyOTQ5NjcyOTU7Yz1lKyhiPDwyMyY0Mjk0OTY3Mjk1fGI+Pj45KTtiPWErKGNeZV5nKStkWzEzXSs2ODEyNzkxNzQmNDI5NDk2NzI5NTthPWMrKGI8PDQmNDI5NDk2NzI5NXxiPj4+MjgpO2I9ZysoYV5jXmUpK2RbMF0rMzkzNjQzMDA3NCY0Mjk0OTY3Mjk1O2c9YSsoYjw8MTEmNDI5NDk2NzI5NXxiPj4+MjEpO2I9ZSsoZ15hXmMpK2RbM10rMzU3MjQ0NTMxNyY0Mjk0OTY3Mjk1O2U9ZysoYjw8MTYmNDI5NDk2NzI5NXxiPj4+MTYpO2I9YysoZV5nXmEpK2RbNl0rNzYwMjkxODkmNDI5NDk2NzI5NTtjPWUrKGI8PDIzJjQyOTQ5NjcyOTV8Yj4+PjkpO2I9YSsoY15lXmcpK2RbOV0rMzY1NDYwMjgwOSY0Mjk0OTY3Mjk1O2E9YysoYjw8NCY0Mjk0OTY3Mjk1fGI+Pj4yOCk7Yj1nKyhhXmNeZSkrZFsxMl0rXG4zODczMTUxNDYxJjQyOTQ5NjcyOTU7Zz1hKyhiPDwxMSY0Mjk0OTY3Mjk1fGI+Pj4yMSk7Yj1lKyhnXmFeYykrZFsxNV0rNTMwNzQyNTIwJjQyOTQ5NjcyOTU7ZT1nKyhiPDwxNiY0Mjk0OTY3Mjk1fGI+Pj4xNik7Yj1jKyhlXmdeYSkrZFsyXSszMjk5NjI4NjQ1JjQyOTQ5NjcyOTU7Yz1lKyhiPDwyMyY0Mjk0OTY3Mjk1fGI+Pj45KTtiPWErKGVeKGN8fmcpKStkWzBdKzQwOTYzMzY0NTImNDI5NDk2NzI5NTthPWMrKGI8PDYmNDI5NDk2NzI5NXxiPj4+MjYpO2I9ZysoY14oYXx+ZSkpK2RbN10rMTEyNjg5MTQxNSY0Mjk0OTY3Mjk1O2c9YSsoYjw8MTAmNDI5NDk2NzI5NXxiPj4+MjIpO2I9ZSsoYV4oZ3x+YykpK2RbMTRdKzI4Nzg2MTIzOTEmNDI5NDk2NzI5NTtlPWcrKGI8PDE1JjQyOTQ5NjcyOTV8Yj4+PjE3KTtiPWMrKGdeKGV8fmEpKStkWzVdKzQyMzc1MzMyNDEmNDI5NDk2NzI5NTtjPWUrKGI8PDIxJjQyOTQ5NjcyOTV8Yj4+PjExKTtiPWErKGVeKGN8fmcpKStkWzEyXSsxNzAwNDg1NTcxJlxuNDI5NDk2NzI5NTthPWMrKGI8PDYmNDI5NDk2NzI5NXxiPj4+MjYpO2I9ZysoY14oYXx+ZSkpK2RbM10rMjM5OTk4MDY5MCY0Mjk0OTY3Mjk1O2c9YSsoYjw8MTAmNDI5NDk2NzI5NXxiPj4+MjIpO2I9ZSsoYV4oZ3x+YykpK2RbMTBdKzQyOTM5MTU3NzMmNDI5NDk2NzI5NTtlPWcrKGI8PDE1JjQyOTQ5NjcyOTV8Yj4+PjE3KTtiPWMrKGdeKGV8fmEpKStkWzFdKzIyNDAwNDQ0OTcmNDI5NDk2NzI5NTtjPWUrKGI8PDIxJjQyOTQ5NjcyOTV8Yj4+PjExKTtiPWErKGVeKGN8fmcpKStkWzhdKzE4NzMzMTMzNTkmNDI5NDk2NzI5NTthPWMrKGI8PDYmNDI5NDk2NzI5NXxiPj4+MjYpO2I9ZysoY14oYXx+ZSkpK2RbMTVdKzQyNjQzNTU1NTImNDI5NDk2NzI5NTtnPWErKGI8PDEwJjQyOTQ5NjcyOTV8Yj4+PjIyKTtiPWUrKGFeKGd8fmMpKStkWzZdKzI3MzQ3Njg5MTYmNDI5NDk2NzI5NTtlPWcrKGI8PDE1JjQyOTQ5NjcyOTV8Yj4+PjE3KTtiPWMrKGdeKGV8fmEpKStkWzEzXSsxMzA5MTUxNjQ5JlxuNDI5NDk2NzI5NTtjPWUrKGI8PDIxJjQyOTQ5NjcyOTV8Yj4+PjExKTtiPWErKGVeKGN8fmcpKStkWzRdKzQxNDk0NDQyMjYmNDI5NDk2NzI5NTthPWMrKGI8PDYmNDI5NDk2NzI5NXxiPj4+MjYpO2I9ZysoY14oYXx+ZSkpK2RbMTFdKzMxNzQ3NTY5MTcmNDI5NDk2NzI5NTtnPWErKGI8PDEwJjQyOTQ5NjcyOTV8Yj4+PjIyKTtiPWUrKGFeKGd8fmMpKStkWzJdKzcxODc4NzI1OSY0Mjk0OTY3Mjk1O2U9ZysoYjw8MTUmNDI5NDk2NzI5NXxiPj4+MTcpO2I9YysoZ14oZXx+YSkpK2RbOV0rMzk1MTQ4MTc0NSY0Mjk0OTY3Mjk1O2YuZ1swXT1mLmdbMF0rYSY0Mjk0OTY3Mjk1O2YuZ1sxXT1mLmdbMV0rKGUrKGI8PDIxJjQyOTQ5NjcyOTV8Yj4+PjExKSkmNDI5NDk2NzI5NTtmLmdbMl09Zi5nWzJdK2UmNDI5NDk2NzI5NTtmLmdbM109Zi5nWzNdK2cmNDI5NDk2NzI5NX1cbm0ucHJvdG90eXBlLnU9ZnVuY3Rpb24oZixhKXt2b2lkIDA9PT1hJiYoYT1mLmxlbmd0aCk7Zm9yKHZhciBjPWEtdGhpcy5ibG9ja1NpemUsZD10aGlzLkIsZT10aGlzLmgsZz0wO2c8YTspe2lmKDA9PWUpZm9yKDtnPD1jOyluKHRoaXMsZixnKSxnKz10aGlzLmJsb2NrU2l6ZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGYpZm9yKDtnPGE7KXtpZihkW2UrK109Zi5jaGFyQ29kZUF0KGcrKyksZT09dGhpcy5ibG9ja1NpemUpe24odGhpcyxkKTtlPTA7YnJlYWt9fWVsc2UgZm9yKDtnPGE7KWlmKGRbZSsrXT1mW2crK10sZT09dGhpcy5ibG9ja1NpemUpe24odGhpcyxkKTtlPTA7YnJlYWt9fXRoaXMuaD1lO3RoaXMubys9YX07XG5tLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dmFyIGY9QXJyYXkoKDU2PnRoaXMuaD90aGlzLmJsb2NrU2l6ZToyKnRoaXMuYmxvY2tTaXplKS10aGlzLmgpO2ZbMF09MTI4O2Zvcih2YXIgYT0xO2E8Zi5sZW5ndGgtODsrK2EpZlthXT0wO3ZhciBjPTgqdGhpcy5vO2ZvcihhPWYubGVuZ3RoLTg7YTxmLmxlbmd0aDsrK2EpZlthXT1jJjI1NSxjLz0yNTY7dGhpcy51KGYpO2Y9QXJyYXkoMTYpO2ZvcihhPWM9MDs0PmE7KythKWZvcih2YXIgZD0wOzMyPmQ7ZCs9OClmW2MrK109dGhpcy5nW2FdPj4+ZCYyNTU7cmV0dXJuIGZ9O2Z1bmN0aW9uIHAoZixhKXt2YXIgYz1xO3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYyxmKT9jW2ZdOmNbZl09YShmKX07ZnVuY3Rpb24gdChmLGEpe3RoaXMuaD1hO2Zvcih2YXIgYz1bXSxkPSEwLGU9Zi5sZW5ndGgtMTswPD1lO2UtLSl7dmFyIGc9ZltlXXwwO2QmJmc9PWF8fChjW2VdPWcsZD0hMSl9dGhpcy5nPWN9dmFyIHE9e307ZnVuY3Rpb24gdShmKXtyZXR1cm4tMTI4PD1mJiYxMjg+Zj9wKGYsZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyB0KFthfDBdLDA+YT8tMTowKX0pOm5ldyB0KFtmfDBdLDA+Zj8tMTowKX1mdW5jdGlvbiB2KGYpe2lmKGlzTmFOKGYpfHwhaXNGaW5pdGUoZikpcmV0dXJuIHc7aWYoMD5mKXJldHVybiB4KHYoLWYpKTtmb3IodmFyIGE9W10sYz0xLGQ9MDtmPj1jO2QrKylhW2RdPWYvY3wwLGMqPTQyOTQ5NjcyOTY7cmV0dXJuIG5ldyB0KGEsMCl9XG5mdW5jdGlvbiB5KGYsYSl7aWYoMD09Zi5sZW5ndGgpdGhyb3cgRXJyb3IoXCJudW1iZXIgZm9ybWF0IGVycm9yOiBlbXB0eSBzdHJpbmdcIik7YT1hfHwxMDtpZigyPmF8fDM2PGEpdGhyb3cgRXJyb3IoXCJyYWRpeCBvdXQgb2YgcmFuZ2U6IFwiK2EpO2lmKFwiLVwiPT1mLmNoYXJBdCgwKSlyZXR1cm4geCh5KGYuc3Vic3RyaW5nKDEpLGEpKTtpZigwPD1mLmluZGV4T2YoXCItXCIpKXRocm93IEVycm9yKCdudW1iZXIgZm9ybWF0IGVycm9yOiBpbnRlcmlvciBcIi1cIiBjaGFyYWN0ZXInKTtmb3IodmFyIGM9dihNYXRoLnBvdyhhLDgpKSxkPXcsZT0wO2U8Zi5sZW5ndGg7ZSs9OCl7dmFyIGc9TWF0aC5taW4oOCxmLmxlbmd0aC1lKSxiPXBhcnNlSW50KGYuc3Vic3RyaW5nKGUsZStnKSxhKTs4Pmc/KGc9dihNYXRoLnBvdyhhLGcpKSxkPWQuaihnKS5hZGQodihiKSkpOihkPWQuaihjKSxkPWQuYWRkKHYoYikpKX1yZXR1cm4gZH12YXIgdz11KDApLHo9dSgxKSxBPXUoMTY3NzcyMTYpO2g9dC5wcm90b3R5cGU7XG5oLm09ZnVuY3Rpb24oKXtpZihCKHRoaXMpKXJldHVybi14KHRoaXMpLm0oKTtmb3IodmFyIGY9MCxhPTEsYz0wO2M8dGhpcy5nLmxlbmd0aDtjKyspe3ZhciBkPXRoaXMuaShjKTtmKz0oMDw9ZD9kOjQyOTQ5NjcyOTYrZCkqYTthKj00Mjk0OTY3Mjk2fXJldHVybiBmfTtoLnRvU3RyaW5nPWZ1bmN0aW9uKGYpe2Y9Znx8MTA7aWYoMj5mfHwzNjxmKXRocm93IEVycm9yKFwicmFkaXggb3V0IG9mIHJhbmdlOiBcIitmKTtpZihDKHRoaXMpKXJldHVyblwiMFwiO2lmKEIodGhpcykpcmV0dXJuXCItXCIreCh0aGlzKS50b1N0cmluZyhmKTtmb3IodmFyIGE9dihNYXRoLnBvdyhmLDYpKSxjPXRoaXMsZD1cIlwiOzspe3ZhciBlPUQoYyxhKS5nO2M9RihjLGUuaihhKSk7dmFyIGc9KCgwPGMuZy5sZW5ndGg/Yy5nWzBdOmMuaCk+Pj4wKS50b1N0cmluZyhmKTtjPWU7aWYoQyhjKSlyZXR1cm4gZytkO2Zvcig7Nj5nLmxlbmd0aDspZz1cIjBcIitnO2Q9ZytkfX07XG5oLmk9ZnVuY3Rpb24oZil7cmV0dXJuIDA+Zj8wOmY8dGhpcy5nLmxlbmd0aD90aGlzLmdbZl06dGhpcy5ofTtmdW5jdGlvbiBDKGYpe2lmKDAhPWYuaClyZXR1cm4hMTtmb3IodmFyIGE9MDthPGYuZy5sZW5ndGg7YSsrKWlmKDAhPWYuZ1thXSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBCKGYpe3JldHVybi0xPT1mLmh9aC5sPWZ1bmN0aW9uKGYpe2Y9Rih0aGlzLGYpO3JldHVybiBCKGYpPy0xOkMoZik/MDoxfTtmdW5jdGlvbiB4KGYpe2Zvcih2YXIgYT1mLmcubGVuZ3RoLGM9W10sZD0wO2Q8YTtkKyspY1tkXT1+Zi5nW2RdO3JldHVybihuZXcgdChjLH5mLmgpKS5hZGQoeil9aC5hYnM9ZnVuY3Rpb24oKXtyZXR1cm4gQih0aGlzKT94KHRoaXMpOnRoaXN9O1xuaC5hZGQ9ZnVuY3Rpb24oZil7Zm9yKHZhciBhPU1hdGgubWF4KHRoaXMuZy5sZW5ndGgsZi5nLmxlbmd0aCksYz1bXSxkPTAsZT0wO2U8PWE7ZSsrKXt2YXIgZz1kKyh0aGlzLmkoZSkmNjU1MzUpKyhmLmkoZSkmNjU1MzUpLGI9KGc+Pj4xNikrKHRoaXMuaShlKT4+PjE2KSsoZi5pKGUpPj4+MTYpO2Q9Yj4+PjE2O2cmPTY1NTM1O2ImPTY1NTM1O2NbZV09Yjw8MTZ8Z31yZXR1cm4gbmV3IHQoYyxjW2MubGVuZ3RoLTFdJi0yMTQ3NDgzNjQ4Py0xOjApfTtmdW5jdGlvbiBGKGYsYSl7cmV0dXJuIGYuYWRkKHgoYSkpfVxuaC5qPWZ1bmN0aW9uKGYpe2lmKEModGhpcyl8fEMoZikpcmV0dXJuIHc7aWYoQih0aGlzKSlyZXR1cm4gQihmKT94KHRoaXMpLmooeChmKSk6eCh4KHRoaXMpLmooZikpO2lmKEIoZikpcmV0dXJuIHgodGhpcy5qKHgoZikpKTtpZigwPnRoaXMubChBKSYmMD5mLmwoQSkpcmV0dXJuIHYodGhpcy5tKCkqZi5tKCkpO2Zvcih2YXIgYT10aGlzLmcubGVuZ3RoK2YuZy5sZW5ndGgsYz1bXSxkPTA7ZDwyKmE7ZCsrKWNbZF09MDtmb3IoZD0wO2Q8dGhpcy5nLmxlbmd0aDtkKyspZm9yKHZhciBlPTA7ZTxmLmcubGVuZ3RoO2UrKyl7dmFyIGc9dGhpcy5pKGQpPj4+MTYsYj10aGlzLmkoZCkmNjU1MzUscj1mLmkoZSk+Pj4xNixFPWYuaShlKSY2NTUzNTtjWzIqZCsyKmVdKz1iKkU7RyhjLDIqZCsyKmUpO2NbMipkKzIqZSsxXSs9ZypFO0coYywyKmQrMiplKzEpO2NbMipkKzIqZSsxXSs9YipyO0coYywyKmQrMiplKzEpO2NbMipkKzIqZSsyXSs9ZypyO0coYywyKmQrMiplKzIpfWZvcihkPTA7ZDxcbmE7ZCsrKWNbZF09Y1syKmQrMV08PDE2fGNbMipkXTtmb3IoZD1hO2Q8MiphO2QrKyljW2RdPTA7cmV0dXJuIG5ldyB0KGMsMCl9O2Z1bmN0aW9uIEcoZixhKXtmb3IoOyhmW2FdJjY1NTM1KSE9ZlthXTspZlthKzFdKz1mW2FdPj4+MTYsZlthXSY9NjU1MzUsYSsrfWZ1bmN0aW9uIEgoZixhKXt0aGlzLmc9Zjt0aGlzLmg9YX1cbmZ1bmN0aW9uIEQoZixhKXtpZihDKGEpKXRocm93IEVycm9yKFwiZGl2aXNpb24gYnkgemVyb1wiKTtpZihDKGYpKXJldHVybiBuZXcgSCh3LHcpO2lmKEIoZikpcmV0dXJuIGE9RCh4KGYpLGEpLG5ldyBIKHgoYS5nKSx4KGEuaCkpO2lmKEIoYSkpcmV0dXJuIGE9RChmLHgoYSkpLG5ldyBIKHgoYS5nKSxhLmgpO2lmKDMwPGYuZy5sZW5ndGgpe2lmKEIoZil8fEIoYSkpdGhyb3cgRXJyb3IoXCJzbG93RGl2aWRlXyBvbmx5IHdvcmtzIHdpdGggcG9zaXRpdmUgaW50ZWdlcnMuXCIpO2Zvcih2YXIgYz16LGQ9YTswPj1kLmwoZik7KWM9SShjKSxkPUkoZCk7dmFyIGU9SihjLDEpLGc9SihkLDEpO2Q9SihkLDIpO2ZvcihjPUooYywyKTshQyhkKTspe3ZhciBiPWcuYWRkKGQpOzA+PWIubChmKSYmKGU9ZS5hZGQoYyksZz1iKTtkPUooZCwxKTtjPUooYywxKX1hPUYoZixlLmooYSkpO3JldHVybiBuZXcgSChlLGEpfWZvcihlPXc7MDw9Zi5sKGEpOyl7Yz1NYXRoLm1heCgxLE1hdGguZmxvb3IoZi5tKCkvXG5hLm0oKSkpO2Q9TWF0aC5jZWlsKE1hdGgubG9nKGMpL01hdGguTE4yKTtkPTQ4Pj1kPzE6TWF0aC5wb3coMixkLTQ4KTtnPXYoYyk7Zm9yKGI9Zy5qKGEpO0IoYil8fDA8Yi5sKGYpOyljLT1kLGc9dihjKSxiPWcuaihhKTtDKGcpJiYoZz16KTtlPWUuYWRkKGcpO2Y9RihmLGIpfXJldHVybiBuZXcgSChlLGYpfWguQT1mdW5jdGlvbihmKXtyZXR1cm4gRCh0aGlzLGYpLmh9O2guYW5kPWZ1bmN0aW9uKGYpe2Zvcih2YXIgYT1NYXRoLm1heCh0aGlzLmcubGVuZ3RoLGYuZy5sZW5ndGgpLGM9W10sZD0wO2Q8YTtkKyspY1tkXT10aGlzLmkoZCkmZi5pKGQpO3JldHVybiBuZXcgdChjLHRoaXMuaCZmLmgpfTtoLm9yPWZ1bmN0aW9uKGYpe2Zvcih2YXIgYT1NYXRoLm1heCh0aGlzLmcubGVuZ3RoLGYuZy5sZW5ndGgpLGM9W10sZD0wO2Q8YTtkKyspY1tkXT10aGlzLmkoZCl8Zi5pKGQpO3JldHVybiBuZXcgdChjLHRoaXMuaHxmLmgpfTtcbmgueG9yPWZ1bmN0aW9uKGYpe2Zvcih2YXIgYT1NYXRoLm1heCh0aGlzLmcubGVuZ3RoLGYuZy5sZW5ndGgpLGM9W10sZD0wO2Q8YTtkKyspY1tkXT10aGlzLmkoZCleZi5pKGQpO3JldHVybiBuZXcgdChjLHRoaXMuaF5mLmgpfTtmdW5jdGlvbiBJKGYpe2Zvcih2YXIgYT1mLmcubGVuZ3RoKzEsYz1bXSxkPTA7ZDxhO2QrKyljW2RdPWYuaShkKTw8MXxmLmkoZC0xKT4+PjMxO3JldHVybiBuZXcgdChjLGYuaCl9ZnVuY3Rpb24gSihmLGEpe3ZhciBjPWE+PjU7YSU9MzI7Zm9yKHZhciBkPWYuZy5sZW5ndGgtYyxlPVtdLGc9MDtnPGQ7ZysrKWVbZ109MDxhP2YuaShnK2MpPj4+YXxmLmkoZytjKzEpPDwzMi1hOmYuaShnK2MpO3JldHVybiBuZXcgdChlLGYuaCl9O20ucHJvdG90eXBlLmRpZ2VzdD1tLnByb3RvdHlwZS52O20ucHJvdG90eXBlLnJlc2V0PW0ucHJvdG90eXBlLnM7bS5wcm90b3R5cGUudXBkYXRlPW0ucHJvdG90eXBlLnU7bW9kdWxlLmV4cG9ydHMuTWQ1PW07dC5wcm90b3R5cGUuYWRkPXQucHJvdG90eXBlLmFkZDt0LnByb3RvdHlwZS5tdWx0aXBseT10LnByb3RvdHlwZS5qO3QucHJvdG90eXBlLm1vZHVsbz10LnByb3RvdHlwZS5BO3QucHJvdG90eXBlLmNvbXBhcmU9dC5wcm90b3R5cGUubDt0LnByb3RvdHlwZS50b051bWJlcj10LnByb3RvdHlwZS5tO3QucHJvdG90eXBlLnRvU3RyaW5nPXQucHJvdG90eXBlLnRvU3RyaW5nO3QucHJvdG90eXBlLmdldEJpdHM9dC5wcm90b3R5cGUuaTt0LmZyb21OdW1iZXI9djt0LmZyb21TdHJpbmc9eTttb2R1bGUuZXhwb3J0cy5JbnRlZ2VyPXQ7fSkuYXBwbHkoIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyAgOiB7fSk7XG4iLCIvKiogQGxpY2Vuc2VcbkNvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG5TUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuKi9cbihmdW5jdGlvbigpIHsndXNlIHN0cmljdCc7dmFyIGgsYWE9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnRpZXM/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGEsYixjKXtpZihhPT1BcnJheS5wcm90b3R5cGV8fGE9PU9iamVjdC5wcm90b3R5cGUpcmV0dXJuIGE7YVtiXT1jLnZhbHVlO3JldHVybiBhfTtmdW5jdGlvbiBiYShhKXthPVtcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcyYmZ2xvYmFsVGhpcyxhLFwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyxcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZixcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWxdO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7KytiKXt2YXIgYz1hW2JdO2lmKGMmJmMuTWF0aD09TWF0aClyZXR1cm4gY310aHJvdyBFcnJvcihcIkNhbm5vdCBmaW5kIGdsb2JhbCBvYmplY3RcIik7fXZhciBjYT1iYSh0aGlzKTtcbmZ1bmN0aW9uIGRhKGEsYil7aWYoYilhOnt2YXIgYz1jYTthPWEuc3BsaXQoXCIuXCIpO2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGgtMTtkKyspe3ZhciBlPWFbZF07aWYoIShlIGluIGMpKWJyZWFrIGE7Yz1jW2VdfWE9YVthLmxlbmd0aC0xXTtkPWNbYV07Yj1iKGQpO2IhPWQmJm51bGwhPWImJmFhKGMsYSx7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmJ9KX19ZnVuY3Rpb24gZWEoYSxiKXthIGluc3RhbmNlb2YgU3RyaW5nJiYoYSs9XCJcIik7dmFyIGM9MCxkPSExLGU9e25leHQ6ZnVuY3Rpb24oKXtpZighZCYmYzxhLmxlbmd0aCl7dmFyIGY9YysrO3JldHVybnt2YWx1ZTpiKGYsYVtmXSksZG9uZTohMX19ZD0hMDtyZXR1cm57ZG9uZTohMCx2YWx1ZTp2b2lkIDB9fX07ZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBlfVxuZGEoXCJBcnJheS5wcm90b3R5cGUudmFsdWVzXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGE/YTpmdW5jdGlvbigpe3JldHVybiBlYSh0aGlzLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGN9KX19KTsvKiogQGxpY2Vuc2VcblxuIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiovXG52YXIgZmE9ZmF8fHt9LGs9dGhpc3x8c2VsZjtmdW5jdGlvbiBoYShhKXt2YXIgYj10eXBlb2YgYTtiPVwib2JqZWN0XCIhPWI/YjphP0FycmF5LmlzQXJyYXkoYSk/XCJhcnJheVwiOmI6XCJudWxsXCI7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9ZnVuY3Rpb24gbihhKXt2YXIgYj10eXBlb2YgYTtyZXR1cm5cIm9iamVjdFwiPT1iJiZudWxsIT1hfHxcImZ1bmN0aW9uXCI9PWJ9ZnVuY3Rpb24gaWEoYSxiLGMpe3JldHVybiBhLmNhbGwuYXBwbHkoYS5iaW5kLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBqYShhLGIsYyl7aWYoIWEpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGUsZCk7cmV0dXJuIGEuYXBwbHkoYixlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiBwKGEsYixjKXtwPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kJiYtMSE9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQudG9TdHJpbmcoKS5pbmRleE9mKFwibmF0aXZlIGNvZGVcIik/aWE6amE7cmV0dXJuIHAuYXBwbHkobnVsbCxhcmd1bWVudHMpfVxuZnVuY3Rpb24ga2EoYSxiKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGQ9Yy5zbGljZSgpO2QucHVzaC5hcHBseShkLGFyZ3VtZW50cyk7cmV0dXJuIGEuYXBwbHkodGhpcyxkKX19ZnVuY3Rpb24gcihhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9Yi5wcm90b3R5cGU7YS5hYT1iLnByb3RvdHlwZTthLnByb3RvdHlwZT1uZXcgYzthLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hO2EuUWI9ZnVuY3Rpb24oZCxlLGYpe2Zvcih2YXIgZz1BcnJheShhcmd1bWVudHMubGVuZ3RoLTIpLG09MjttPGFyZ3VtZW50cy5sZW5ndGg7bSsrKWdbbS0yXT1hcmd1bWVudHNbbV07cmV0dXJuIGIucHJvdG90eXBlW2VdLmFwcGx5KGQsZyl9fTtmdW5jdGlvbiBsYShhKXtjb25zdCBiPWEubGVuZ3RoO2lmKDA8Yil7Y29uc3QgYz1BcnJheShiKTtmb3IobGV0IGQ9MDtkPGI7ZCsrKWNbZF09YVtkXTtyZXR1cm4gY31yZXR1cm5bXX1mdW5jdGlvbiBtYShhLGIpe2ZvcihsZXQgYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspe2NvbnN0IGQ9YXJndW1lbnRzW2NdO2lmKGhhKGQpKXtjb25zdCBlPWEubGVuZ3RofHwwLGY9ZC5sZW5ndGh8fDA7YS5sZW5ndGg9ZStmO2ZvcihsZXQgZz0wO2c8ZjtnKyspYVtlK2ddPWRbZ119ZWxzZSBhLnB1c2goZCl9fTtjbGFzcyBuYXtjb25zdHJ1Y3RvcihhLGIpe3RoaXMuaT1hO3RoaXMuaj1iO3RoaXMuaD0wO3RoaXMuZz1udWxsfWdldCgpe2xldCBhOzA8dGhpcy5oPyh0aGlzLmgtLSxhPXRoaXMuZyx0aGlzLmc9YS5uZXh0LGEubmV4dD1udWxsKTphPXRoaXMuaSgpO3JldHVybiBhfX07ZnVuY3Rpb24gdChhKXtyZXR1cm4vXltcXHNcXHhhMF0qJC8udGVzdChhKX07ZnVuY3Rpb24gdSgpe3ZhciBhPWsubmF2aWdhdG9yO3JldHVybiBhJiYoYT1hLnVzZXJBZ2VudCk/YTpcIlwifTtmdW5jdGlvbiBvYShhKXtvYVtcIiBcIl0oYSk7cmV0dXJuIGF9b2FbXCIgXCJdPWZ1bmN0aW9uKCl7fTt2YXIgcGE9LTEhPXUoKS5pbmRleE9mKFwiR2Vja29cIikmJiEoLTEhPXUoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJ3ZWJraXRcIikmJi0xPT11KCkuaW5kZXhPZihcIkVkZ2VcIikpJiYhKC0xIT11KCkuaW5kZXhPZihcIlRyaWRlbnRcIil8fC0xIT11KCkuaW5kZXhPZihcIk1TSUVcIikpJiYtMT09dSgpLmluZGV4T2YoXCJFZGdlXCIpO2Z1bmN0aW9uIHFhKGEsYixjKXtmb3IoY29uc3QgZCBpbiBhKWIuY2FsbChjLGFbZF0sZCxhKX1mdW5jdGlvbiByYShhLGIpe2Zvcihjb25zdCBjIGluIGEpYi5jYWxsKHZvaWQgMCxhW2NdLGMsYSl9ZnVuY3Rpb24gc2EoYSl7Y29uc3QgYj17fTtmb3IoY29uc3QgYyBpbiBhKWJbY109YVtjXTtyZXR1cm4gYn1jb25zdCB0YT1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtmdW5jdGlvbiB1YShhLGIpe2xldCBjLGQ7Zm9yKGxldCBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7ZD1hcmd1bWVudHNbZV07Zm9yKGMgaW4gZClhW2NdPWRbY107Zm9yKGxldCBmPTA7Zjx0YS5sZW5ndGg7ZisrKWM9dGFbZl0sT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGQsYykmJihhW2NdPWRbY10pfX07ZnVuY3Rpb24gdmEoYSl7dmFyIGI9MTthPWEuc3BsaXQoXCI6XCIpO2NvbnN0IGM9W107Zm9yKDswPGImJmEubGVuZ3RoOyljLnB1c2goYS5zaGlmdCgpKSxiLS07YS5sZW5ndGgmJmMucHVzaChhLmpvaW4oXCI6XCIpKTtyZXR1cm4gY307ZnVuY3Rpb24gd2EoYSl7ay5zZXRUaW1lb3V0KCgpPT57dGhyb3cgYTt9LDApfTtmdW5jdGlvbiB4YSgpe3ZhciBhPXphO2xldCBiPW51bGw7YS5nJiYoYj1hLmcsYS5nPWEuZy5uZXh0LGEuZ3x8KGEuaD1udWxsKSxiLm5leHQ9bnVsbCk7cmV0dXJuIGJ9Y2xhc3MgQWF7Y29uc3RydWN0b3IoKXt0aGlzLmg9dGhpcy5nPW51bGx9YWRkKGEsYil7Y29uc3QgYz1CYS5nZXQoKTtjLnNldChhLGIpO3RoaXMuaD90aGlzLmgubmV4dD1jOnRoaXMuZz1jO3RoaXMuaD1jfX12YXIgQmE9bmV3IG5hKCgpPT5uZXcgQ2EsYT0+YS5yZXNldCgpKTtjbGFzcyBDYXtjb25zdHJ1Y3Rvcigpe3RoaXMubmV4dD10aGlzLmc9dGhpcy5oPW51bGx9c2V0KGEsYil7dGhpcy5oPWE7dGhpcy5nPWI7dGhpcy5uZXh0PW51bGx9cmVzZXQoKXt0aGlzLm5leHQ9dGhpcy5nPXRoaXMuaD1udWxsfX07bGV0IHgseT0hMSx6YT1uZXcgQWEsRWE9KCk9Pntjb25zdCBhPWsuUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7eD0oKT0+e2EudGhlbihEYSl9fTt2YXIgRGE9KCk9Pntmb3IodmFyIGE7YT14YSgpOyl7dHJ5e2EuaC5jYWxsKGEuZyl9Y2F0Y2goYyl7d2EoYyl9dmFyIGI9QmE7Yi5qKGEpOzEwMD5iLmgmJihiLmgrKyxhLm5leHQ9Yi5nLGIuZz1hKX15PSExfTtmdW5jdGlvbiB6KCl7dGhpcy5zPXRoaXMuczt0aGlzLkM9dGhpcy5DfXoucHJvdG90eXBlLnM9ITE7ei5wcm90b3R5cGUubWE9ZnVuY3Rpb24oKXt0aGlzLnN8fCh0aGlzLnM9ITAsdGhpcy5OKCkpfTt6LnByb3RvdHlwZS5OPWZ1bmN0aW9uKCl7aWYodGhpcy5DKWZvcig7dGhpcy5DLmxlbmd0aDspdGhpcy5DLnNoaWZ0KCkoKX07ZnVuY3Rpb24gQShhLGIpe3RoaXMudHlwZT1hO3RoaXMuZz10aGlzLnRhcmdldD1iO3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMX1BLnByb3RvdHlwZS5oPWZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwfTt2YXIgRmE9ZnVuY3Rpb24oKXtpZighay5hZGRFdmVudExpc3RlbmVyfHwhT2JqZWN0LmRlZmluZVByb3BlcnR5KXJldHVybiExO3ZhciBhPSExLGI9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXthPSEwfX0pO3RyeXtjb25zdCBjPSgpPT57fTtrLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsYyxiKTtrLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsYyxiKX1jYXRjaChjKXt9cmV0dXJuIGF9KCk7ZnVuY3Rpb24gQyhhLGIpe0EuY2FsbCh0aGlzLGE/YS50eXBlOlwiXCIpO3RoaXMucmVsYXRlZFRhcmdldD10aGlzLmc9dGhpcy50YXJnZXQ9bnVsbDt0aGlzLmJ1dHRvbj10aGlzLnNjcmVlblk9dGhpcy5zY3JlZW5YPXRoaXMuY2xpZW50WT10aGlzLmNsaWVudFg9MDt0aGlzLmtleT1cIlwiO3RoaXMubWV0YUtleT10aGlzLnNoaWZ0S2V5PXRoaXMuYWx0S2V5PXRoaXMuY3RybEtleT0hMTt0aGlzLnN0YXRlPW51bGw7dGhpcy5wb2ludGVySWQ9MDt0aGlzLnBvaW50ZXJUeXBlPVwiXCI7dGhpcy5pPW51bGw7aWYoYSl7dmFyIGM9dGhpcy50eXBlPWEudHlwZSxkPWEuY2hhbmdlZFRvdWNoZXMmJmEuY2hhbmdlZFRvdWNoZXMubGVuZ3RoP2EuY2hhbmdlZFRvdWNoZXNbMF06bnVsbDt0aGlzLnRhcmdldD1hLnRhcmdldHx8YS5zcmNFbGVtZW50O3RoaXMuZz1iO2lmKGI9YS5yZWxhdGVkVGFyZ2V0KXtpZihwYSl7YTp7dHJ5e29hKGIubm9kZU5hbWUpO3ZhciBlPSEwO2JyZWFrIGF9Y2F0Y2goZil7fWU9XG4hMX1lfHwoYj1udWxsKX19ZWxzZVwibW91c2VvdmVyXCI9PWM/Yj1hLmZyb21FbGVtZW50OlwibW91c2VvdXRcIj09YyYmKGI9YS50b0VsZW1lbnQpO3RoaXMucmVsYXRlZFRhcmdldD1iO2Q/KHRoaXMuY2xpZW50WD12b2lkIDAhPT1kLmNsaWVudFg/ZC5jbGllbnRYOmQucGFnZVgsdGhpcy5jbGllbnRZPXZvaWQgMCE9PWQuY2xpZW50WT9kLmNsaWVudFk6ZC5wYWdlWSx0aGlzLnNjcmVlblg9ZC5zY3JlZW5YfHwwLHRoaXMuc2NyZWVuWT1kLnNjcmVlbll8fDApOih0aGlzLmNsaWVudFg9dm9pZCAwIT09YS5jbGllbnRYP2EuY2xpZW50WDphLnBhZ2VYLHRoaXMuY2xpZW50WT12b2lkIDAhPT1hLmNsaWVudFk/YS5jbGllbnRZOmEucGFnZVksdGhpcy5zY3JlZW5YPWEuc2NyZWVuWHx8MCx0aGlzLnNjcmVlblk9YS5zY3JlZW5ZfHwwKTt0aGlzLmJ1dHRvbj1hLmJ1dHRvbjt0aGlzLmtleT1hLmtleXx8XCJcIjt0aGlzLmN0cmxLZXk9YS5jdHJsS2V5O3RoaXMuYWx0S2V5PWEuYWx0S2V5O3RoaXMuc2hpZnRLZXk9XG5hLnNoaWZ0S2V5O3RoaXMubWV0YUtleT1hLm1ldGFLZXk7dGhpcy5wb2ludGVySWQ9YS5wb2ludGVySWR8fDA7dGhpcy5wb2ludGVyVHlwZT1cInN0cmluZ1wiPT09dHlwZW9mIGEucG9pbnRlclR5cGU/YS5wb2ludGVyVHlwZTpHYVthLnBvaW50ZXJUeXBlXXx8XCJcIjt0aGlzLnN0YXRlPWEuc3RhdGU7dGhpcy5pPWE7YS5kZWZhdWx0UHJldmVudGVkJiZDLmFhLmguY2FsbCh0aGlzKX19cihDLEEpO3ZhciBHYT17MjpcInRvdWNoXCIsMzpcInBlblwiLDQ6XCJtb3VzZVwifTtDLnByb3RvdHlwZS5oPWZ1bmN0aW9uKCl7Qy5hYS5oLmNhbGwodGhpcyk7dmFyIGE9dGhpcy5pO2EucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOmEucmV0dXJuVmFsdWU9ITF9O3ZhciBEPVwiY2xvc3VyZV9saXN0ZW5hYmxlX1wiKygxRTYqTWF0aC5yYW5kb20oKXwwKTt2YXIgSGE9MDtmdW5jdGlvbiBJYShhLGIsYyxkLGUpe3RoaXMubGlzdGVuZXI9YTt0aGlzLnByb3h5PW51bGw7dGhpcy5zcmM9Yjt0aGlzLnR5cGU9Yzt0aGlzLmNhcHR1cmU9ISFkO3RoaXMuaGE9ZTt0aGlzLmtleT0rK0hhO3RoaXMuZGE9dGhpcy5mYT0hMX1mdW5jdGlvbiBKYShhKXthLmRhPSEwO2EubGlzdGVuZXI9bnVsbDthLnByb3h5PW51bGw7YS5zcmM9bnVsbDthLmhhPW51bGx9O2Z1bmN0aW9uIEthKGEpe3RoaXMuc3JjPWE7dGhpcy5nPXt9O3RoaXMuaD0wfUthLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLnRvU3RyaW5nKCk7YT10aGlzLmdbZl07YXx8KGE9dGhpcy5nW2ZdPVtdLHRoaXMuaCsrKTt2YXIgZz1MYShhLGIsZCxlKTstMTxnPyhiPWFbZ10sY3x8KGIuZmE9ITEpKTooYj1uZXcgSWEoYix0aGlzLnNyYyxmLCEhZCxlKSxiLmZhPWMsYS5wdXNoKGIpKTtyZXR1cm4gYn07ZnVuY3Rpb24gTWEoYSxiKXt2YXIgYz1iLnR5cGU7aWYoYyBpbiBhLmcpe3ZhciBkPWEuZ1tjXSxlPUFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoZCxiLHZvaWQgMCksZjsoZj0wPD1lKSYmQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGQsZSwxKTtmJiYoSmEoYiksMD09YS5nW2NdLmxlbmd0aCYmKGRlbGV0ZSBhLmdbY10sYS5oLS0pKX19XG5mdW5jdGlvbiBMYShhLGIsYyxkKXtmb3IodmFyIGU9MDtlPGEubGVuZ3RoOysrZSl7dmFyIGY9YVtlXTtpZighZi5kYSYmZi5saXN0ZW5lcj09YiYmZi5jYXB0dXJlPT0hIWMmJmYuaGE9PWQpcmV0dXJuIGV9cmV0dXJuLTF9O3ZhciBOYT1cImNsb3N1cmVfbG1fXCIrKDFFNipNYXRoLnJhbmRvbSgpfDApLE9hPXt9LFBhPTA7ZnVuY3Rpb24gUWEoYSxiLGMsZCxlKXtpZihkJiZkLm9uY2UpcmV0dXJuIFJhKGEsYixjLGQsZSk7aWYoQXJyYXkuaXNBcnJheShiKSl7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspUWEoYSxiW2ZdLGMsZCxlKTtyZXR1cm4gbnVsbH1jPVNhKGMpO3JldHVybiBhJiZhW0RdP2EuSyhiLGMsbihkKT8hIWQuY2FwdHVyZTohIWQsZSk6VGEoYSxiLGMsITEsZCxlKX1cbmZ1bmN0aW9uIFRhKGEsYixjLGQsZSxmKXtpZighYil0aHJvdyBFcnJvcihcIkludmFsaWQgZXZlbnQgdHlwZVwiKTt2YXIgZz1uKGUpPyEhZS5jYXB0dXJlOiEhZSxtPVVhKGEpO218fChhW05hXT1tPW5ldyBLYShhKSk7Yz1tLmFkZChiLGMsZCxnLGYpO2lmKGMucHJveHkpcmV0dXJuIGM7ZD1WYSgpO2MucHJveHk9ZDtkLnNyYz1hO2QubGlzdGVuZXI9YztpZihhLmFkZEV2ZW50TGlzdGVuZXIpRmF8fChlPWcpLHZvaWQgMD09PWUmJihlPSExKSxhLmFkZEV2ZW50TGlzdGVuZXIoYi50b1N0cmluZygpLGQsZSk7ZWxzZSBpZihhLmF0dGFjaEV2ZW50KWEuYXR0YWNoRXZlbnQoV2EoYi50b1N0cmluZygpKSxkKTtlbHNlIGlmKGEuYWRkTGlzdGVuZXImJmEucmVtb3ZlTGlzdGVuZXIpYS5hZGRMaXN0ZW5lcihkKTtlbHNlIHRocm93IEVycm9yKFwiYWRkRXZlbnRMaXN0ZW5lciBhbmQgYXR0YWNoRXZlbnQgYXJlIHVuYXZhaWxhYmxlLlwiKTtQYSsrO3JldHVybiBjfVxuZnVuY3Rpb24gVmEoKXtmdW5jdGlvbiBhKGMpe3JldHVybiBiLmNhbGwoYS5zcmMsYS5saXN0ZW5lcixjKX1jb25zdCBiPVhhO3JldHVybiBhfWZ1bmN0aW9uIFJhKGEsYixjLGQsZSl7aWYoQXJyYXkuaXNBcnJheShiKSl7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspUmEoYSxiW2ZdLGMsZCxlKTtyZXR1cm4gbnVsbH1jPVNhKGMpO3JldHVybiBhJiZhW0RdP2EuTChiLGMsbihkKT8hIWQuY2FwdHVyZTohIWQsZSk6VGEoYSxiLGMsITAsZCxlKX1cbmZ1bmN0aW9uIFlhKGEsYixjLGQsZSl7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrKylZYShhLGJbZl0sYyxkLGUpO2Vsc2UoZD1uKGQpPyEhZC5jYXB0dXJlOiEhZCxjPVNhKGMpLGEmJmFbRF0pPyhhPWEuaSxiPVN0cmluZyhiKS50b1N0cmluZygpLGIgaW4gYS5nJiYoZj1hLmdbYl0sYz1MYShmLGMsZCxlKSwtMTxjJiYoSmEoZltjXSksQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGYsYywxKSwwPT1mLmxlbmd0aCYmKGRlbGV0ZSBhLmdbYl0sYS5oLS0pKSkpOmEmJihhPVVhKGEpKSYmKGI9YS5nW2IudG9TdHJpbmcoKV0sYT0tMSxiJiYoYT1MYShiLGMsZCxlKSksKGM9LTE8YT9iW2FdOm51bGwpJiZaYShjKSl9XG5mdW5jdGlvbiBaYShhKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGEmJmEmJiFhLmRhKXt2YXIgYj1hLnNyYztpZihiJiZiW0RdKU1hKGIuaSxhKTtlbHNle3ZhciBjPWEudHlwZSxkPWEucHJveHk7Yi5yZW1vdmVFdmVudExpc3RlbmVyP2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihjLGQsYS5jYXB0dXJlKTpiLmRldGFjaEV2ZW50P2IuZGV0YWNoRXZlbnQoV2EoYyksZCk6Yi5hZGRMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lcihkKTtQYS0tOyhjPVVhKGIpKT8oTWEoYyxhKSwwPT1jLmgmJihjLnNyYz1udWxsLGJbTmFdPW51bGwpKTpKYShhKX19fWZ1bmN0aW9uIFdhKGEpe3JldHVybiBhIGluIE9hP09hW2FdOk9hW2FdPVwib25cIithfWZ1bmN0aW9uIFhhKGEsYil7aWYoYS5kYSlhPSEwO2Vsc2V7Yj1uZXcgQyhiLHRoaXMpO3ZhciBjPWEubGlzdGVuZXIsZD1hLmhhfHxhLnNyYzthLmZhJiZaYShhKTthPWMuY2FsbChkLGIpfXJldHVybiBhfVxuZnVuY3Rpb24gVWEoYSl7YT1hW05hXTtyZXR1cm4gYSBpbnN0YW5jZW9mIEthP2E6bnVsbH12YXIgJGE9XCJfX2Nsb3N1cmVfZXZlbnRzX2ZuX1wiKygxRTkqTWF0aC5yYW5kb20oKT4+PjApO2Z1bmN0aW9uIFNhKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhO2FbJGFdfHwoYVskYV09ZnVuY3Rpb24oYil7cmV0dXJuIGEuaGFuZGxlRXZlbnQoYil9KTtyZXR1cm4gYVskYV19O2Z1bmN0aW9uIEUoKXt6LmNhbGwodGhpcyk7dGhpcy5pPW5ldyBLYSh0aGlzKTt0aGlzLk09dGhpczt0aGlzLkY9bnVsbH1yKEUseik7RS5wcm90b3R5cGVbRF09ITA7RS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyxkKXtZYSh0aGlzLGEsYixjLGQpfTtcbmZ1bmN0aW9uIEYoYSxiKXt2YXIgYyxkPWEuRjtpZihkKWZvcihjPVtdO2Q7ZD1kLkYpYy5wdXNoKGQpO2E9YS5NO2Q9Yi50eXBlfHxiO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiliPW5ldyBBKGIsYSk7ZWxzZSBpZihiIGluc3RhbmNlb2YgQSliLnRhcmdldD1iLnRhcmdldHx8YTtlbHNle3ZhciBlPWI7Yj1uZXcgQShkLGEpO3VhKGIsZSl9ZT0hMDtpZihjKWZvcih2YXIgZj1jLmxlbmd0aC0xOzA8PWY7Zi0tKXt2YXIgZz1iLmc9Y1tmXTtlPWFiKGcsZCwhMCxiKSYmZX1nPWIuZz1hO2U9YWIoZyxkLCEwLGIpJiZlO2U9YWIoZyxkLCExLGIpJiZlO2lmKGMpZm9yKGY9MDtmPGMubGVuZ3RoO2YrKylnPWIuZz1jW2ZdLGU9YWIoZyxkLCExLGIpJiZlfVxuRS5wcm90b3R5cGUuTj1mdW5jdGlvbigpe0UuYWEuTi5jYWxsKHRoaXMpO2lmKHRoaXMuaSl7dmFyIGE9dGhpcy5pLGI9MCxjO2ZvcihjIGluIGEuZyl7Zm9yKHZhciBkPWEuZ1tjXSxlPTA7ZTxkLmxlbmd0aDtlKyspKytiLEphKGRbZV0pO2RlbGV0ZSBhLmdbY107YS5oLS19fXRoaXMuRj1udWxsfTtFLnByb3RvdHlwZS5LPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmkuYWRkKFN0cmluZyhhKSxiLCExLGMsZCl9O0UucHJvdG90eXBlLkw9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMuaS5hZGQoU3RyaW5nKGEpLGIsITAsYyxkKX07XG5mdW5jdGlvbiBhYihhLGIsYyxkKXtiPWEuaS5nW1N0cmluZyhiKV07aWYoIWIpcmV0dXJuITA7Yj1iLmNvbmNhdCgpO2Zvcih2YXIgZT0hMCxmPTA7ZjxiLmxlbmd0aDsrK2Ype3ZhciBnPWJbZl07aWYoZyYmIWcuZGEmJmcuY2FwdHVyZT09Yyl7dmFyIG09Zy5saXN0ZW5lcixxPWcuaGF8fGcuc3JjO2cuZmEmJk1hKGEuaSxnKTtlPSExIT09bS5jYWxsKHEsZCkmJmV9fXJldHVybiBlJiYhZC5kZWZhdWx0UHJldmVudGVkfTtmdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYyYmKGE9cChhLGMpKTtlbHNlIGlmKGEmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuaGFuZGxlRXZlbnQpYT1wKGEuaGFuZGxlRXZlbnQsYSk7ZWxzZSB0aHJvdyBFcnJvcihcIkludmFsaWQgbGlzdGVuZXIgYXJndW1lbnRcIik7cmV0dXJuIDIxNDc0ODM2NDc8TnVtYmVyKGIpPy0xOmsuc2V0VGltZW91dChhLGJ8fDApfTtmdW5jdGlvbiBjYihhKXthLmc9YmIoKCk9PnthLmc9bnVsbDthLmkmJihhLmk9ITEsY2IoYSkpfSxhLmwpO2NvbnN0IGI9YS5oO2EuaD1udWxsO2EubS5hcHBseShudWxsLGIpfWNsYXNzIGViIGV4dGVuZHMgentjb25zdHJ1Y3RvcihhLGIpe3N1cGVyKCk7dGhpcy5tPWE7dGhpcy5sPWI7dGhpcy5oPW51bGw7dGhpcy5pPSExO3RoaXMuZz1udWxsfWooYSl7dGhpcy5oPWFyZ3VtZW50czt0aGlzLmc/dGhpcy5pPSEwOmNiKHRoaXMpfU4oKXtzdXBlci5OKCk7dGhpcy5nJiYoay5jbGVhclRpbWVvdXQodGhpcy5nKSx0aGlzLmc9bnVsbCx0aGlzLmk9ITEsdGhpcy5oPW51bGwpfX07ZnVuY3Rpb24gRyhhKXt6LmNhbGwodGhpcyk7dGhpcy5oPWE7dGhpcy5nPXt9fXIoRyx6KTt2YXIgZmI9W107ZnVuY3Rpb24gZ2IoYSl7cWEoYS5nLGZ1bmN0aW9uKGIsYyl7dGhpcy5nLmhhc093blByb3BlcnR5KGMpJiZaYShiKX0sYSk7YS5nPXt9fUcucHJvdG90eXBlLk49ZnVuY3Rpb24oKXtHLmFhLk4uY2FsbCh0aGlzKTtnYih0aGlzKX07Ry5wcm90b3R5cGUuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcIkV2ZW50SGFuZGxlci5oYW5kbGVFdmVudCBub3QgaW1wbGVtZW50ZWRcIik7fTt2YXIgaGI9ay5KU09OLnN0cmluZ2lmeTt2YXIgaWI9ay5KU09OLnBhcnNlO3ZhciBqYj1jbGFzc3tzdHJpbmdpZnkoYSl7cmV0dXJuIGsuSlNPTi5zdHJpbmdpZnkoYSx2b2lkIDApfXBhcnNlKGEpe3JldHVybiBrLkpTT04ucGFyc2UoYSx2b2lkIDApfX07ZnVuY3Rpb24ga2IoKXt9a2IucHJvdG90eXBlLmg9bnVsbDtmdW5jdGlvbiBsYihhKXtyZXR1cm4gYS5ofHwoYS5oPWEuaSgpKX07ZnVuY3Rpb24gbWIoKXt9dmFyIEg9e09QRU46XCJhXCIsa2I6XCJiXCIsSmE6XCJjXCIsd2I6XCJkXCJ9O2Z1bmN0aW9uIG5iKCl7QS5jYWxsKHRoaXMsXCJkXCIpfXIobmIsQSk7ZnVuY3Rpb24gb2IoKXtBLmNhbGwodGhpcyxcImNcIil9cihvYixBKTt2YXIgST17fSxwYj1udWxsO2Z1bmN0aW9uIHFiKCl7cmV0dXJuIHBiPXBifHxuZXcgRX1JLkxhPVwic2VydmVycmVhY2hhYmlsaXR5XCI7ZnVuY3Rpb24gcmIoYSl7QS5jYWxsKHRoaXMsSS5MYSxhKX1yKHJiLEEpO2Z1bmN0aW9uIEooYSl7Y29uc3QgYj1xYigpO0YoYixuZXcgcmIoYixhKSl9SS5TVEFUX0VWRU5UPVwic3RhdGV2ZW50XCI7ZnVuY3Rpb24gc2IoYSxiKXtBLmNhbGwodGhpcyxJLlNUQVRfRVZFTlQsYSk7dGhpcy5zdGF0PWJ9cihzYixBKTtmdW5jdGlvbiBLKGEpe2NvbnN0IGI9cWIoKTtGKGIsbmV3IHNiKGIsYSkpfUkuTWE9XCJ0aW1pbmdldmVudFwiO2Z1bmN0aW9uIHRiKGEsYil7QS5jYWxsKHRoaXMsSS5NYSxhKTt0aGlzLnNpemU9Yn1yKHRiLEEpO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihcIkZuIG11c3Qgbm90IGJlIG51bGwgYW5kIG11c3QgYmUgYSBmdW5jdGlvblwiKTtyZXR1cm4gay5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSgpfSxiKX07ZnVuY3Rpb24gdmIoKXt0aGlzLmc9ITB9dmIucHJvdG90eXBlLnhhPWZ1bmN0aW9uKCl7dGhpcy5nPSExfTtmdW5jdGlvbiB3YihhLGIsYyxkLGUsZil7YS5pbmZvKGZ1bmN0aW9uKCl7aWYoYS5nKWlmKGYpe3ZhciBnPVwiXCI7Zm9yKHZhciBtPWYuc3BsaXQoXCImXCIpLHE9MDtxPG0ubGVuZ3RoO3ErKyl7dmFyIGw9bVtxXS5zcGxpdChcIj1cIik7aWYoMTxsLmxlbmd0aCl7dmFyIHY9bFswXTtsPWxbMV07dmFyIHc9di5zcGxpdChcIl9cIik7Zz0yPD13Lmxlbmd0aCYmXCJ0eXBlXCI9PXdbMV0/ZysoditcIj1cIitsK1wiJlwiKTpnKyh2K1wiPXJlZGFjdGVkJlwiKX19fWVsc2UgZz1udWxsO2Vsc2UgZz1mO3JldHVyblwiWE1MSFRUUCBSRVEgKFwiK2QrXCIpIFthdHRlbXB0IFwiK2UrXCJdOiBcIitiK1wiXFxuXCIrYytcIlxcblwiK2d9KX1cbmZ1bmN0aW9uIHhiKGEsYixjLGQsZSxmLGcpe2EuaW5mbyhmdW5jdGlvbigpe3JldHVyblwiWE1MSFRUUCBSRVNQIChcIitkK1wiKSBbIGF0dGVtcHQgXCIrZStcIl06IFwiK2IrXCJcXG5cIitjK1wiXFxuXCIrZitcIiBcIitnfSl9ZnVuY3Rpb24gTChhLGIsYyxkKXthLmluZm8oZnVuY3Rpb24oKXtyZXR1cm5cIlhNTEhUVFAgVEVYVCAoXCIrYitcIik6IFwiK3liKGEsYykrKGQ/XCIgXCIrZDpcIlwiKX0pfWZ1bmN0aW9uIHpiKGEsYil7YS5pbmZvKGZ1bmN0aW9uKCl7cmV0dXJuXCJUSU1FT1VUOiBcIitifSl9dmIucHJvdG90eXBlLmluZm89ZnVuY3Rpb24oKXt9O1xuZnVuY3Rpb24geWIoYSxiKXtpZighYS5nKXJldHVybiBiO2lmKCFiKXJldHVybiBudWxsO3RyeXt2YXIgYz1KU09OLnBhcnNlKGIpO2lmKGMpZm9yKGE9MDthPGMubGVuZ3RoO2ErKylpZihBcnJheS5pc0FycmF5KGNbYV0pKXt2YXIgZD1jW2FdO2lmKCEoMj5kLmxlbmd0aCkpe3ZhciBlPWRbMV07aWYoQXJyYXkuaXNBcnJheShlKSYmISgxPmUubGVuZ3RoKSl7dmFyIGY9ZVswXTtpZihcIm5vb3BcIiE9ZiYmXCJzdG9wXCIhPWYmJlwiY2xvc2VcIiE9Zilmb3IodmFyIGc9MTtnPGUubGVuZ3RoO2crKyllW2ddPVwiXCJ9fX1yZXR1cm4gaGIoYyl9Y2F0Y2gobSl7cmV0dXJuIGJ9fTt2YXIgQWI9e05PX0VSUk9SOjAsZ2I6MSx0YjoyLHNiOjMsbmI6NCxyYjo1LHViOjYsSWE6NyxUSU1FT1VUOjgseGI6OX07dmFyIEJiPXtsYjpcImNvbXBsZXRlXCIsSGI6XCJzdWNjZXNzXCIsSmE6XCJlcnJvclwiLElhOlwiYWJvcnRcIix6YjpcInJlYWR5XCIsQWI6XCJyZWFkeXN0YXRlY2hhbmdlXCIsVElNRU9VVDpcInRpbWVvdXRcIix2YjpcImluY3JlbWVudGFsZGF0YVwiLHliOlwicHJvZ3Jlc3NcIixvYjpcImRvd25sb2FkcHJvZ3Jlc3NcIixQYjpcInVwbG9hZHByb2dyZXNzXCJ9O3ZhciBDYjtmdW5jdGlvbiBEYigpe31yKERiLGtiKTtEYi5wcm90b3R5cGUuZz1mdW5jdGlvbigpe3JldHVybiBuZXcgWE1MSHR0cFJlcXVlc3R9O0RiLnByb3RvdHlwZS5pPWZ1bmN0aW9uKCl7cmV0dXJue319O0NiPW5ldyBEYjtmdW5jdGlvbiBNKGEsYixjLGQpe3RoaXMuaj1hO3RoaXMuaT1iO3RoaXMubD1jO3RoaXMuUj1kfHwxO3RoaXMuVT1uZXcgRyh0aGlzKTt0aGlzLkk9NDVFMzt0aGlzLkg9bnVsbDt0aGlzLm89ITE7dGhpcy5tPXRoaXMuQT10aGlzLnY9dGhpcy5MPXRoaXMuRj10aGlzLlM9dGhpcy5CPW51bGw7dGhpcy5EPVtdO3RoaXMuZz1udWxsO3RoaXMuQz0wO3RoaXMucz10aGlzLnU9bnVsbDt0aGlzLlg9LTE7dGhpcy5KPSExO3RoaXMuTz0wO3RoaXMuTT1udWxsO3RoaXMuVz10aGlzLks9dGhpcy5UPXRoaXMuUD0hMTt0aGlzLmg9bmV3IEVifWZ1bmN0aW9uIEViKCl7dGhpcy5pPW51bGw7dGhpcy5nPVwiXCI7dGhpcy5oPSExfXZhciBGYj17fSxHYj17fTtmdW5jdGlvbiBIYihhLGIsYyl7YS5MPTE7YS52PUliKE4oYikpO2EubT1jO2EuUD0hMDtKYihhLG51bGwpfVxuZnVuY3Rpb24gSmIoYSxiKXthLkY9RGF0ZS5ub3coKTtLYihhKTthLkE9TihhLnYpO3ZhciBjPWEuQSxkPWEuUjtBcnJheS5pc0FycmF5KGQpfHwoZD1bU3RyaW5nKGQpXSk7TGIoYy5pLFwidFwiLGQpO2EuQz0wO2M9YS5qLko7YS5oPW5ldyBFYjthLmc9TWIoYS5qLGM/YjpudWxsLCFhLm0pOzA8YS5PJiYoYS5NPW5ldyBlYihwKGEuWSxhLGEuZyksYS5PKSk7Yj1hLlU7Yz1hLmc7ZD1hLmNhO3ZhciBlPVwicmVhZHlzdGF0ZWNoYW5nZVwiO0FycmF5LmlzQXJyYXkoZSl8fChlJiYoZmJbMF09ZS50b1N0cmluZygpKSxlPWZiKTtmb3IodmFyIGY9MDtmPGUubGVuZ3RoO2YrKyl7dmFyIGc9UWEoYyxlW2ZdLGR8fGIuaGFuZGxlRXZlbnQsITEsYi5ofHxiKTtpZighZylicmVhaztiLmdbZy5rZXldPWd9Yj1hLkg/c2EoYS5IKTp7fTthLm0/KGEudXx8KGEudT1cIlBPU1RcIiksYltcIkNvbnRlbnQtVHlwZVwiXT1cImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLGEuZy5lYShhLkEsYS51LFxuYS5tLGIpKTooYS51PVwiR0VUXCIsYS5nLmVhKGEuQSxhLnUsbnVsbCxiKSk7SigxKTt3YihhLmksYS51LGEuQSxhLmwsYS5SLGEubSl9TS5wcm90b3R5cGUuY2E9ZnVuY3Rpb24oYSl7YT1hLnRhcmdldDtjb25zdCBiPXRoaXMuTTtiJiYzPT1QKGEpP2IuaigpOnRoaXMuWShhKX07XG5NLnByb3RvdHlwZS5ZPWZ1bmN0aW9uKGEpe3RyeXtpZihhPT10aGlzLmcpYTp7Y29uc3Qgdz1QKHRoaXMuZyk7dmFyIGI9dGhpcy5nLkJhKCk7Y29uc3QgTz10aGlzLmcuWigpO2lmKCEoMz53KSYmKDMhPXd8fHRoaXMuZyYmKHRoaXMuaC5ofHx0aGlzLmcub2EoKXx8TmIodGhpcy5nKSkpKXt0aGlzLkp8fDQhPXd8fDc9PWJ8fCg4PT1ifHwwPj1PP0ooMyk6SigyKSk7T2IodGhpcyk7dmFyIGM9dGhpcy5nLlooKTt0aGlzLlg9YztiOmlmKFBiKHRoaXMpKXt2YXIgZD1OYih0aGlzLmcpO2E9XCJcIjt2YXIgZT1kLmxlbmd0aCxmPTQ9PVAodGhpcy5nKTtpZighdGhpcy5oLmkpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgVGV4dERlY29kZXIpe1EodGhpcyk7UWIodGhpcyk7dmFyIGc9XCJcIjticmVhayBifXRoaXMuaC5pPW5ldyBrLlRleHREZWNvZGVyfWZvcihiPTA7YjxlO2IrKyl0aGlzLmguaD0hMCxhKz10aGlzLmguaS5kZWNvZGUoZFtiXSx7c3RyZWFtOiEoZiYmYj09ZS0xKX0pO2QubGVuZ3RoPVxuMDt0aGlzLmguZys9YTt0aGlzLkM9MDtnPXRoaXMuaC5nfWVsc2UgZz10aGlzLmcub2EoKTt0aGlzLm89MjAwPT1jO3hiKHRoaXMuaSx0aGlzLnUsdGhpcy5BLHRoaXMubCx0aGlzLlIsdyxjKTtpZih0aGlzLm8pe2lmKHRoaXMuVCYmIXRoaXMuSyl7Yjp7aWYodGhpcy5nKXt2YXIgbSxxPXRoaXMuZztpZigobT1xLmc/cS5nLmdldFJlc3BvbnNlSGVhZGVyKFwiWC1IVFRQLUluaXRpYWwtUmVzcG9uc2VcIik6bnVsbCkmJiF0KG0pKXt2YXIgbD1tO2JyZWFrIGJ9fWw9bnVsbH1pZihjPWwpTCh0aGlzLmksdGhpcy5sLGMsXCJJbml0aWFsIGhhbmRzaGFrZSByZXNwb25zZSB2aWEgWC1IVFRQLUluaXRpYWwtUmVzcG9uc2VcIiksdGhpcy5LPSEwLFJiKHRoaXMsYyk7ZWxzZXt0aGlzLm89ITE7dGhpcy5zPTM7SygxMik7USh0aGlzKTtRYih0aGlzKTticmVhayBhfX1pZih0aGlzLlApe2M9ITA7bGV0IEI7Zm9yKDshdGhpcy5KJiZ0aGlzLkM8Zy5sZW5ndGg7KWlmKEI9U2IodGhpcyxnKSxCPT1HYil7ND09XG53JiYodGhpcy5zPTQsSygxNCksYz0hMSk7TCh0aGlzLmksdGhpcy5sLG51bGwsXCJbSW5jb21wbGV0ZSBSZXNwb25zZV1cIik7YnJlYWt9ZWxzZSBpZihCPT1GYil7dGhpcy5zPTQ7SygxNSk7TCh0aGlzLmksdGhpcy5sLGcsXCJbSW52YWxpZCBDaHVua11cIik7Yz0hMTticmVha31lbHNlIEwodGhpcy5pLHRoaXMubCxCLG51bGwpLFJiKHRoaXMsQik7UGIodGhpcykmJjAhPXRoaXMuQyYmKHRoaXMuaC5nPXRoaXMuaC5nLnNsaWNlKHRoaXMuQyksdGhpcy5DPTApOzQhPXd8fDAhPWcubGVuZ3RofHx0aGlzLmguaHx8KHRoaXMucz0xLEsoMTYpLGM9ITEpO3RoaXMubz10aGlzLm8mJmM7aWYoIWMpTCh0aGlzLmksdGhpcy5sLGcsXCJbSW52YWxpZCBDaHVua2VkIFJlc3BvbnNlXVwiKSxRKHRoaXMpLFFiKHRoaXMpO2Vsc2UgaWYoMDxnLmxlbmd0aCYmIXRoaXMuVyl7dGhpcy5XPSEwO3ZhciB2PXRoaXMuajt2Lmc9PXRoaXMmJnYuYmEmJiF2Lk0mJih2LmouaW5mbyhcIkdyZWF0LCBubyBidWZmZXJpbmcgcHJveHkgZGV0ZWN0ZWQuIEJ5dGVzIHJlY2VpdmVkOiBcIitcbmcubGVuZ3RoKSxUYih2KSx2Lk09ITAsSygxMSkpfX1lbHNlIEwodGhpcy5pLHRoaXMubCxnLG51bGwpLFJiKHRoaXMsZyk7ND09dyYmUSh0aGlzKTt0aGlzLm8mJiF0aGlzLkomJig0PT13P1ViKHRoaXMuaix0aGlzKToodGhpcy5vPSExLEtiKHRoaXMpKSl9ZWxzZSBWYih0aGlzLmcpLDQwMD09YyYmMDxnLmluZGV4T2YoXCJVbmtub3duIFNJRFwiKT8odGhpcy5zPTMsSygxMikpOih0aGlzLnM9MCxLKDEzKSksUSh0aGlzKSxRYih0aGlzKX19fWNhdGNoKHcpe31maW5hbGx5e319O2Z1bmN0aW9uIFBiKGEpe3JldHVybiBhLmc/XCJHRVRcIj09YS51JiYyIT1hLkwmJmEuai5DYTohMX1cbmZ1bmN0aW9uIFNiKGEsYil7dmFyIGM9YS5DLGQ9Yi5pbmRleE9mKFwiXFxuXCIsYyk7aWYoLTE9PWQpcmV0dXJuIEdiO2M9TnVtYmVyKGIuc3Vic3RyaW5nKGMsZCkpO2lmKGlzTmFOKGMpKXJldHVybiBGYjtkKz0xO2lmKGQrYz5iLmxlbmd0aClyZXR1cm4gR2I7Yj1iLnNsaWNlKGQsZCtjKTthLkM9ZCtjO3JldHVybiBifU0ucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbigpe3RoaXMuSj0hMDtRKHRoaXMpfTtmdW5jdGlvbiBLYihhKXthLlM9RGF0ZS5ub3coKSthLkk7V2IoYSxhLkkpfWZ1bmN0aW9uIFdiKGEsYil7aWYobnVsbCE9YS5CKXRocm93IEVycm9yKFwiV2F0Y2hEb2cgdGltZXIgbm90IG51bGxcIik7YS5CPXViKHAoYS5iYSxhKSxiKX1mdW5jdGlvbiBPYihhKXthLkImJihrLmNsZWFyVGltZW91dChhLkIpLGEuQj1udWxsKX1cbk0ucHJvdG90eXBlLmJhPWZ1bmN0aW9uKCl7dGhpcy5CPW51bGw7Y29uc3QgYT1EYXRlLm5vdygpOzA8PWEtdGhpcy5TPyh6Yih0aGlzLmksdGhpcy5BKSwyIT10aGlzLkwmJihKKDMpLEsoMTcpKSxRKHRoaXMpLHRoaXMucz0yLFFiKHRoaXMpKTpXYih0aGlzLHRoaXMuUy1hKX07ZnVuY3Rpb24gUWIoYSl7MD09YS5qLkd8fGEuSnx8VWIoYS5qLGEpfWZ1bmN0aW9uIFEoYSl7T2IoYSk7dmFyIGI9YS5NO2ImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGIubWEmJmIubWEoKTthLk09bnVsbDtnYihhLlUpO2EuZyYmKGI9YS5nLGEuZz1udWxsLGIuYWJvcnQoKSxiLm1hKCkpfVxuZnVuY3Rpb24gUmIoYSxiKXt0cnl7dmFyIGM9YS5qO2lmKDAhPWMuRyYmKGMuZz09YXx8WGIoYy5oLGEpKSlpZighYS5LJiZYYihjLmgsYSkmJjM9PWMuRyl7dHJ5e3ZhciBkPWMuRGEuZy5wYXJzZShiKX1jYXRjaChsKXtkPW51bGx9aWYoQXJyYXkuaXNBcnJheShkKSYmMz09ZC5sZW5ndGgpe3ZhciBlPWQ7aWYoMD09ZVswXSlhOntpZighYy51KXtpZihjLmcpaWYoYy5nLkYrM0UzPGEuRilZYihjKSxaYihjKTtlbHNlIGJyZWFrIGE7JGIoYyk7SygxOCl9fWVsc2UgYy56YT1lWzFdLDA8Yy56YS1jLlQmJjM3NTAwPmVbMl0mJmMuRiYmMD09Yy52JiYhYy5DJiYoYy5DPXViKHAoYy5aYSxjKSw2RTMpKTtpZigxPj1hYyhjLmgpJiZjLmNhKXt0cnl7Yy5jYSgpfWNhdGNoKGwpe31jLmNhPXZvaWQgMH19ZWxzZSBSKGMsMTEpfWVsc2UgaWYoKGEuS3x8Yy5nPT1hKSYmWWIoYyksIXQoYikpZm9yKGU9Yy5EYS5nLnBhcnNlKGIpLGI9MDtiPGUubGVuZ3RoO2IrKyl7bGV0IGw9ZVtiXTtjLlQ9XG5sWzBdO2w9bFsxXTtpZigyPT1jLkcpaWYoXCJjXCI9PWxbMF0pe2MuSz1sWzFdO2MuaWE9bFsyXTtjb25zdCB2PWxbM107bnVsbCE9diYmKGMubGE9dixjLmouaW5mbyhcIlZFUj1cIitjLmxhKSk7Y29uc3Qgdz1sWzRdO251bGwhPXcmJihjLkFhPXcsYy5qLmluZm8oXCJTVkVSPVwiK2MuQWEpKTtjb25zdCBPPWxbNV07bnVsbCE9TyYmXCJudW1iZXJcIj09PXR5cGVvZiBPJiYwPE8mJihkPTEuNSpPLGMuTD1kLGMuai5pbmZvKFwiYmFja0NoYW5uZWxSZXF1ZXN0VGltZW91dE1zXz1cIitkKSk7ZD1jO2NvbnN0IEI9YS5nO2lmKEIpe2NvbnN0IHlhPUIuZz9CLmcuZ2V0UmVzcG9uc2VIZWFkZXIoXCJYLUNsaWVudC1XaXJlLVByb3RvY29sXCIpOm51bGw7aWYoeWEpe3ZhciBmPWQuaDtmLmd8fC0xPT15YS5pbmRleE9mKFwic3BkeVwiKSYmLTE9PXlhLmluZGV4T2YoXCJxdWljXCIpJiYtMT09eWEuaW5kZXhPZihcImgyXCIpfHwoZi5qPWYubCxmLmc9bmV3IFNldCxmLmgmJihiYyhmLGYuaCksZi5oPW51bGwpKX1pZihkLkQpe2NvbnN0IGRiPVxuQi5nP0IuZy5nZXRSZXNwb25zZUhlYWRlcihcIlgtSFRUUC1TZXNzaW9uLUlkXCIpOm51bGw7ZGImJihkLnlhPWRiLFMoZC5JLGQuRCxkYikpfX1jLkc9MztjLmwmJmMubC51YSgpO2MuYmEmJihjLlI9RGF0ZS5ub3coKS1hLkYsYy5qLmluZm8oXCJIYW5kc2hha2UgUlRUOiBcIitjLlIrXCJtc1wiKSk7ZD1jO3ZhciBnPWE7ZC5xYT1jYyhkLGQuSj9kLmlhOm51bGwsZC5XKTtpZihnLkspe2RjKGQuaCxnKTt2YXIgbT1nLHE9ZC5MO3EmJihtLkk9cSk7bS5CJiYoT2IobSksS2IobSkpO2QuZz1nfWVsc2UgZWMoZCk7MDxjLmkubGVuZ3RoJiZmYyhjKX1lbHNlXCJzdG9wXCIhPWxbMF0mJlwiY2xvc2VcIiE9bFswXXx8UihjLDcpO2Vsc2UgMz09Yy5HJiYoXCJzdG9wXCI9PWxbMF18fFwiY2xvc2VcIj09bFswXT9cInN0b3BcIj09bFswXT9SKGMsNyk6Z2MoYyk6XCJub29wXCIhPWxbMF0mJmMubCYmYy5sLnRhKGwpLGMudj0wKX1KKDQpfWNhdGNoKGwpe319O3ZhciBoYz1jbGFzc3tjb25zdHJ1Y3RvcihhLGIpe3RoaXMuZz1hO3RoaXMubWFwPWJ9fTtmdW5jdGlvbiBpYyhhKXt0aGlzLmw9YXx8MTA7ay5QZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmc/KGE9ay5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKFwibmF2aWdhdGlvblwiKSxhPTA8YS5sZW5ndGgmJihcImhxXCI9PWFbMF0ubmV4dEhvcFByb3RvY29sfHxcImgyXCI9PWFbMF0ubmV4dEhvcFByb3RvY29sKSk6YT0hIShrLmNocm9tZSYmay5jaHJvbWUubG9hZFRpbWVzJiZrLmNocm9tZS5sb2FkVGltZXMoKSYmay5jaHJvbWUubG9hZFRpbWVzKCkud2FzRmV0Y2hlZFZpYVNwZHkpO3RoaXMuaj1hP3RoaXMubDoxO3RoaXMuZz1udWxsOzE8dGhpcy5qJiYodGhpcy5nPW5ldyBTZXQpO3RoaXMuaD1udWxsO3RoaXMuaT1bXX1mdW5jdGlvbiBqYyhhKXtyZXR1cm4gYS5oPyEwOmEuZz9hLmcuc2l6ZT49YS5qOiExfWZ1bmN0aW9uIGFjKGEpe3JldHVybiBhLmg/MTphLmc/YS5nLnNpemU6MH1mdW5jdGlvbiBYYihhLGIpe3JldHVybiBhLmg/YS5oPT1iOmEuZz9hLmcuaGFzKGIpOiExfVxuZnVuY3Rpb24gYmMoYSxiKXthLmc/YS5nLmFkZChiKTphLmg9Yn1mdW5jdGlvbiBkYyhhLGIpe2EuaCYmYS5oPT1iP2EuaD1udWxsOmEuZyYmYS5nLmhhcyhiKSYmYS5nLmRlbGV0ZShiKX1pYy5wcm90b3R5cGUuY2FuY2VsPWZ1bmN0aW9uKCl7dGhpcy5pPWtjKHRoaXMpO2lmKHRoaXMuaCl0aGlzLmguY2FuY2VsKCksdGhpcy5oPW51bGw7ZWxzZSBpZih0aGlzLmcmJjAhPT10aGlzLmcuc2l6ZSl7Zm9yKGNvbnN0IGEgb2YgdGhpcy5nLnZhbHVlcygpKWEuY2FuY2VsKCk7dGhpcy5nLmNsZWFyKCl9fTtmdW5jdGlvbiBrYyhhKXtpZihudWxsIT1hLmgpcmV0dXJuIGEuaS5jb25jYXQoYS5oLkQpO2lmKG51bGwhPWEuZyYmMCE9PWEuZy5zaXplKXtsZXQgYj1hLmk7Zm9yKGNvbnN0IGMgb2YgYS5nLnZhbHVlcygpKWI9Yi5jb25jYXQoYy5EKTtyZXR1cm4gYn1yZXR1cm4gbGEoYS5pKX07ZnVuY3Rpb24gbGMoYSl7aWYoYS5WJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLlYpcmV0dXJuIGEuVigpO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWFwJiZhIGluc3RhbmNlb2YgTWFwfHxcInVuZGVmaW5lZFwiIT09dHlwZW9mIFNldCYmYSBpbnN0YW5jZW9mIFNldClyZXR1cm4gQXJyYXkuZnJvbShhLnZhbHVlcygpKTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGEuc3BsaXQoXCJcIik7aWYoaGEoYSkpe2Zvcih2YXIgYj1bXSxjPWEubGVuZ3RoLGQ9MDtkPGM7ZCsrKWIucHVzaChhW2RdKTtyZXR1cm4gYn1iPVtdO2M9MDtmb3IoZCBpbiBhKWJbYysrXT1hW2RdO3JldHVybiBifVxuZnVuY3Rpb24gbWMoYSl7aWYoYS5uYSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5uYSlyZXR1cm4gYS5uYSgpO2lmKCFhLlZ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGEuVil7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNYXAmJmEgaW5zdGFuY2VvZiBNYXApcmV0dXJuIEFycmF5LmZyb20oYS5rZXlzKCkpO2lmKCEoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBTZXQmJmEgaW5zdGFuY2VvZiBTZXQpKXtpZihoYShhKXx8XCJzdHJpbmdcIj09PXR5cGVvZiBhKXt2YXIgYj1bXTthPWEubGVuZ3RoO2Zvcih2YXIgYz0wO2M8YTtjKyspYi5wdXNoKGMpO3JldHVybiBifWI9W107Yz0wO2Zvcihjb25zdCBkIGluIGEpYltjKytdPWQ7cmV0dXJuIGJ9fX1cbmZ1bmN0aW9uIG5jKGEsYil7aWYoYS5mb3JFYWNoJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmZvckVhY2gpYS5mb3JFYWNoKGIsdm9pZCAwKTtlbHNlIGlmKGhhKGEpfHxcInN0cmluZ1wiPT09dHlwZW9mIGEpQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsdm9pZCAwKTtlbHNlIGZvcih2YXIgYz1tYyhhKSxkPWxjKGEpLGU9ZC5sZW5ndGgsZj0wO2Y8ZTtmKyspYi5jYWxsKHZvaWQgMCxkW2ZdLGMmJmNbZl0sYSl9O3ZhciBvYz1SZWdFeHAoXCJeKD86KFteOi8/Iy5dKyk6KT8oPzovLyg/OihbXlxcXFxcXFxcLz8jXSopQCk/KFteXFxcXFxcXFwvPyNdKj8pKD86OihbMC05XSspKT8oPz1bXFxcXFxcXFwvPyNdfCQpKT8oW14/I10rKT8oPzpcXFxcPyhbXiNdKikpPyg/OiMoW1xcXFxzXFxcXFNdKikpPyRcIik7ZnVuY3Rpb24gcGMoYSxiKXtpZihhKXthPWEuc3BsaXQoXCImXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLmluZGV4T2YoXCI9XCIpLGU9bnVsbDtpZigwPD1kKXt2YXIgZj1hW2NdLnN1YnN0cmluZygwLGQpO2U9YVtjXS5zdWJzdHJpbmcoZCsxKX1lbHNlIGY9YVtjXTtiKGYsZT9kZWNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpOlwiXCIpfX19O2Z1bmN0aW9uIFQoYSl7dGhpcy5nPXRoaXMubz10aGlzLmo9XCJcIjt0aGlzLnM9bnVsbDt0aGlzLm09dGhpcy5sPVwiXCI7dGhpcy5oPSExO2lmKGEgaW5zdGFuY2VvZiBUKXt0aGlzLmg9YS5oO3FjKHRoaXMsYS5qKTt0aGlzLm89YS5vO3RoaXMuZz1hLmc7cmModGhpcyxhLnMpO3RoaXMubD1hLmw7dmFyIGI9YS5pO3ZhciBjPW5ldyBzYztjLmk9Yi5pO2IuZyYmKGMuZz1uZXcgTWFwKGIuZyksYy5oPWIuaCk7dGModGhpcyxjKTt0aGlzLm09YS5tfWVsc2UgYSYmKGI9U3RyaW5nKGEpLm1hdGNoKG9jKSk/KHRoaXMuaD0hMSxxYyh0aGlzLGJbMV18fFwiXCIsITApLHRoaXMubz11YyhiWzJdfHxcIlwiKSx0aGlzLmc9dWMoYlszXXx8XCJcIiwhMCkscmModGhpcyxiWzRdKSx0aGlzLmw9dWMoYls1XXx8XCJcIiwhMCksdGModGhpcyxiWzZdfHxcIlwiLCEwKSx0aGlzLm09dWMoYls3XXx8XCJcIikpOih0aGlzLmg9ITEsdGhpcy5pPW5ldyBzYyhudWxsLHRoaXMuaCkpfVxuVC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXMuajtiJiZhLnB1c2godmMoYix3YywhMCksXCI6XCIpO3ZhciBjPXRoaXMuZztpZihjfHxcImZpbGVcIj09YilhLnB1c2goXCIvL1wiKSwoYj10aGlzLm8pJiZhLnB1c2godmMoYix3YywhMCksXCJAXCIpLGEucHVzaChlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGMpKS5yZXBsYWNlKC8lMjUoWzAtOWEtZkEtRl17Mn0pL2csXCIlJDFcIikpLGM9dGhpcy5zLG51bGwhPWMmJmEucHVzaChcIjpcIixTdHJpbmcoYykpO2lmKGM9dGhpcy5sKXRoaXMuZyYmXCIvXCIhPWMuY2hhckF0KDApJiZhLnB1c2goXCIvXCIpLGEucHVzaCh2YyhjLFwiL1wiPT1jLmNoYXJBdCgwKT94Yzp5YywhMCkpOyhjPXRoaXMuaS50b1N0cmluZygpKSYmYS5wdXNoKFwiP1wiLGMpOyhjPXRoaXMubSkmJmEucHVzaChcIiNcIix2YyhjLHpjKSk7cmV0dXJuIGEuam9pbihcIlwiKX07ZnVuY3Rpb24gTihhKXtyZXR1cm4gbmV3IFQoYSl9XG5mdW5jdGlvbiBxYyhhLGIsYyl7YS5qPWM/dWMoYiwhMCk6YjthLmomJihhLmo9YS5qLnJlcGxhY2UoLzokLyxcIlwiKSl9ZnVuY3Rpb24gcmMoYSxiKXtpZihiKXtiPU51bWJlcihiKTtpZihpc05hTihiKXx8MD5iKXRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiK2IpO2Eucz1ifWVsc2UgYS5zPW51bGx9ZnVuY3Rpb24gdGMoYSxiLGMpe2IgaW5zdGFuY2VvZiBzYz8oYS5pPWIsQWMoYS5pLGEuaCkpOihjfHwoYj12YyhiLEJjKSksYS5pPW5ldyBzYyhiLGEuaCkpfWZ1bmN0aW9uIFMoYSxiLGMpe2EuaS5zZXQoYixjKX1mdW5jdGlvbiBJYihhKXtTKGEsXCJ6eFwiLE1hdGguZmxvb3IoMjE0NzQ4MzY0OCpNYXRoLnJhbmRvbSgpKS50b1N0cmluZygzNikrTWF0aC5hYnMoTWF0aC5mbG9vcigyMTQ3NDgzNjQ4Kk1hdGgucmFuZG9tKCkpXkRhdGUubm93KCkpLnRvU3RyaW5nKDM2KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIpe3JldHVybiBhP2I/ZGVjb2RlVVJJKGEucmVwbGFjZSgvJTI1L2csXCIlMjUyNVwiKSk6ZGVjb2RlVVJJQ29tcG9uZW50KGEpOlwiXCJ9ZnVuY3Rpb24gdmMoYSxiLGMpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYT8oYT1lbmNvZGVVUkkoYSkucmVwbGFjZShiLENjKSxjJiYoYT1hLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSksYSk6bnVsbH1mdW5jdGlvbiBDYyhhKXthPWEuY2hhckNvZGVBdCgwKTtyZXR1cm5cIiVcIisoYT4+NCYxNSkudG9TdHJpbmcoMTYpKyhhJjE1KS50b1N0cmluZygxNil9dmFyIHdjPS9bI1xcL1xcP0BdL2cseWM9L1sjXFw/Ol0vZyx4Yz0vWyNcXD9dL2csQmM9L1sjXFw/QF0vZyx6Yz0vIy9nO2Z1bmN0aW9uIHNjKGEsYil7dGhpcy5oPXRoaXMuZz1udWxsO3RoaXMuaT1hfHxudWxsO3RoaXMuaj0hIWJ9XG5mdW5jdGlvbiBVKGEpe2EuZ3x8KGEuZz1uZXcgTWFwLGEuaD0wLGEuaSYmcGMoYS5pLGZ1bmN0aW9uKGIsYyl7YS5hZGQoZGVjb2RlVVJJQ29tcG9uZW50KGIucmVwbGFjZSgvXFwrL2csXCIgXCIpKSxjKX0pKX1oPXNjLnByb3RvdHlwZTtoLmFkZD1mdW5jdGlvbihhLGIpe1UodGhpcyk7dGhpcy5pPW51bGw7YT1WKHRoaXMsYSk7dmFyIGM9dGhpcy5nLmdldChhKTtjfHx0aGlzLmcuc2V0KGEsYz1bXSk7Yy5wdXNoKGIpO3RoaXMuaCs9MTtyZXR1cm4gdGhpc307ZnVuY3Rpb24gRGMoYSxiKXtVKGEpO2I9VihhLGIpO2EuZy5oYXMoYikmJihhLmk9bnVsbCxhLmgtPWEuZy5nZXQoYikubGVuZ3RoLGEuZy5kZWxldGUoYikpfWZ1bmN0aW9uIEVjKGEsYil7VShhKTtiPVYoYSxiKTtyZXR1cm4gYS5nLmhhcyhiKX1cbmguZm9yRWFjaD1mdW5jdGlvbihhLGIpe1UodGhpcyk7dGhpcy5nLmZvckVhY2goZnVuY3Rpb24oYyxkKXtjLmZvckVhY2goZnVuY3Rpb24oZSl7YS5jYWxsKGIsZSxkLHRoaXMpfSx0aGlzKX0sdGhpcyl9O2gubmE9ZnVuY3Rpb24oKXtVKHRoaXMpO2NvbnN0IGE9QXJyYXkuZnJvbSh0aGlzLmcudmFsdWVzKCkpLGI9QXJyYXkuZnJvbSh0aGlzLmcua2V5cygpKSxjPVtdO2ZvcihsZXQgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXtjb25zdCBlPWFbZF07Zm9yKGxldCBmPTA7ZjxlLmxlbmd0aDtmKyspYy5wdXNoKGJbZF0pfXJldHVybiBjfTtoLlY9ZnVuY3Rpb24oYSl7VSh0aGlzKTtsZXQgYj1bXTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpRWModGhpcyxhKSYmKGI9Yi5jb25jYXQodGhpcy5nLmdldChWKHRoaXMsYSkpKSk7ZWxzZXthPUFycmF5LmZyb20odGhpcy5nLnZhbHVlcygpKTtmb3IobGV0IGM9MDtjPGEubGVuZ3RoO2MrKyliPWIuY29uY2F0KGFbY10pfXJldHVybiBifTtcbmguc2V0PWZ1bmN0aW9uKGEsYil7VSh0aGlzKTt0aGlzLmk9bnVsbDthPVYodGhpcyxhKTtFYyh0aGlzLGEpJiYodGhpcy5oLT10aGlzLmcuZ2V0KGEpLmxlbmd0aCk7dGhpcy5nLnNldChhLFtiXSk7dGhpcy5oKz0xO3JldHVybiB0aGlzfTtoLmdldD1mdW5jdGlvbihhLGIpe2lmKCFhKXJldHVybiBiO2E9dGhpcy5WKGEpO3JldHVybiAwPGEubGVuZ3RoP1N0cmluZyhhWzBdKTpifTtmdW5jdGlvbiBMYihhLGIsYyl7RGMoYSxiKTswPGMubGVuZ3RoJiYoYS5pPW51bGwsYS5nLnNldChWKGEsYiksbGEoYykpLGEuaCs9Yy5sZW5ndGgpfVxuaC50b1N0cmluZz1mdW5jdGlvbigpe2lmKHRoaXMuaSlyZXR1cm4gdGhpcy5pO2lmKCF0aGlzLmcpcmV0dXJuXCJcIjtjb25zdCBhPVtdLGI9QXJyYXkuZnJvbSh0aGlzLmcua2V5cygpKTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YltjXTtjb25zdCBmPWVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZCkpLGc9dGhpcy5WKGQpO2ZvcihkPTA7ZDxnLmxlbmd0aDtkKyspe3ZhciBlPWY7XCJcIiE9PWdbZF0mJihlKz1cIj1cIitlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGdbZF0pKSk7YS5wdXNoKGUpfX1yZXR1cm4gdGhpcy5pPWEuam9pbihcIiZcIil9O2Z1bmN0aW9uIFYoYSxiKXtiPVN0cmluZyhiKTthLmomJihiPWIudG9Mb3dlckNhc2UoKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIpe2ImJiFhLmomJihVKGEpLGEuaT1udWxsLGEuZy5mb3JFYWNoKGZ1bmN0aW9uKGMsZCl7dmFyIGU9ZC50b0xvd2VyQ2FzZSgpO2QhPWUmJihEYyh0aGlzLGQpLExiKHRoaXMsZSxjKSl9LGEpKTthLmo9Yn07ZnVuY3Rpb24gRmMoYSxiKXtjb25zdCBjPW5ldyB2YjtpZihrLkltYWdlKXtjb25zdCBkPW5ldyBJbWFnZTtkLm9ubG9hZD1rYShXLGMsXCJUZXN0TG9hZEltYWdlOiBsb2FkZWRcIiwhMCxiLGQpO2Qub25lcnJvcj1rYShXLGMsXCJUZXN0TG9hZEltYWdlOiBlcnJvclwiLCExLGIsZCk7ZC5vbmFib3J0PWthKFcsYyxcIlRlc3RMb2FkSW1hZ2U6IGFib3J0XCIsITEsYixkKTtkLm9udGltZW91dD1rYShXLGMsXCJUZXN0TG9hZEltYWdlOiB0aW1lb3V0XCIsITEsYixkKTtrLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZihkLm9udGltZW91dClkLm9udGltZW91dCgpfSwxRTQpO2Quc3JjPWF9ZWxzZSBiKCExKX1cbmZ1bmN0aW9uIEdjKGEsYil7Y29uc3QgYz1uZXcgdmIsZD1uZXcgQWJvcnRDb250cm9sbGVyLGU9c2V0VGltZW91dCgoKT0+e2QuYWJvcnQoKTtXKGMsXCJUZXN0UGluZ1NlcnZlcjogdGltZW91dFwiLCExLGIpfSwxRTQpO2ZldGNoKGEse3NpZ25hbDpkLnNpZ25hbH0pLnRoZW4oZj0+e2NsZWFyVGltZW91dChlKTtmLm9rP1coYyxcIlRlc3RQaW5nU2VydmVyOiBva1wiLCEwLGIpOlcoYyxcIlRlc3RQaW5nU2VydmVyOiBzZXJ2ZXIgZXJyb3JcIiwhMSxiKX0pLmNhdGNoKCgpPT57Y2xlYXJUaW1lb3V0KGUpO1coYyxcIlRlc3RQaW5nU2VydmVyOiBlcnJvclwiLCExLGIpfSl9ZnVuY3Rpb24gVyhhLGIsYyxkLGUpe3RyeXtlJiYoZS5vbmxvYWQ9bnVsbCxlLm9uZXJyb3I9bnVsbCxlLm9uYWJvcnQ9bnVsbCxlLm9udGltZW91dD1udWxsKSxkKGMpfWNhdGNoKGYpe319O2Z1bmN0aW9uIEhjKCl7dGhpcy5nPW5ldyBqYn1mdW5jdGlvbiBJYyhhLGIsYyl7Y29uc3QgZD1jfHxcIlwiO3RyeXtuYyhhLGZ1bmN0aW9uKGUsZil7bGV0IGc9ZTtuKGUpJiYoZz1oYihlKSk7Yi5wdXNoKGQrZitcIj1cIitlbmNvZGVVUklDb21wb25lbnQoZykpfSl9Y2F0Y2goZSl7dGhyb3cgYi5wdXNoKGQrXCJ0eXBlPVwiK2VuY29kZVVSSUNvbXBvbmVudChcIl9iYWRtYXBcIikpLGU7fX07ZnVuY3Rpb24gSmMoYSl7dGhpcy5sPWEuVWJ8fG51bGw7dGhpcy5qPWEuZWJ8fCExfXIoSmMsa2IpO0pjLnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBLYyh0aGlzLmwsdGhpcy5qKX07SmMucHJvdG90eXBlLmk9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGF9fSh7fSk7ZnVuY3Rpb24gS2MoYSxiKXtFLmNhbGwodGhpcyk7dGhpcy5EPWE7dGhpcy5vPWI7dGhpcy5tPXZvaWQgMDt0aGlzLnN0YXR1cz10aGlzLnJlYWR5U3RhdGU9MDt0aGlzLnJlc3BvbnNlVHlwZT10aGlzLnJlc3BvbnNlVGV4dD10aGlzLnJlc3BvbnNlPXRoaXMuc3RhdHVzVGV4dD1cIlwiO3RoaXMub25yZWFkeXN0YXRlY2hhbmdlPW51bGw7dGhpcy51PW5ldyBIZWFkZXJzO3RoaXMuaD1udWxsO3RoaXMuQj1cIkdFVFwiO3RoaXMuQT1cIlwiO3RoaXMuZz0hMTt0aGlzLnY9dGhpcy5qPXRoaXMubD1udWxsfXIoS2MsRSk7aD1LYy5wcm90b3R5cGU7XG5oLm9wZW49ZnVuY3Rpb24oYSxiKXtpZigwIT10aGlzLnJlYWR5U3RhdGUpdGhyb3cgdGhpcy5hYm9ydCgpLEVycm9yKFwiRXJyb3IgcmVvcGVuaW5nIGEgY29ubmVjdGlvblwiKTt0aGlzLkI9YTt0aGlzLkE9Yjt0aGlzLnJlYWR5U3RhdGU9MTtMYyh0aGlzKX07aC5zZW5kPWZ1bmN0aW9uKGEpe2lmKDEhPXRoaXMucmVhZHlTdGF0ZSl0aHJvdyB0aGlzLmFib3J0KCksRXJyb3IoXCJuZWVkIHRvIGNhbGwgb3BlbigpIGZpcnN0LiBcIik7dGhpcy5nPSEwO2NvbnN0IGI9e2hlYWRlcnM6dGhpcy51LG1ldGhvZDp0aGlzLkIsY3JlZGVudGlhbHM6dGhpcy5tLGNhY2hlOnZvaWQgMH07YSYmKGIuYm9keT1hKTsodGhpcy5EfHxrKS5mZXRjaChuZXcgUmVxdWVzdCh0aGlzLkEsYikpLnRoZW4odGhpcy5TYS5iaW5kKHRoaXMpLHRoaXMuZ2EuYmluZCh0aGlzKSl9O1xuaC5hYm9ydD1mdW5jdGlvbigpe3RoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQ9XCJcIjt0aGlzLnU9bmV3IEhlYWRlcnM7dGhpcy5zdGF0dXM9MDt0aGlzLmomJnRoaXMuai5jYW5jZWwoXCJSZXF1ZXN0IHdhcyBhYm9ydGVkLlwiKS5jYXRjaCgoKT0+e30pOzE8PXRoaXMucmVhZHlTdGF0ZSYmdGhpcy5nJiY0IT10aGlzLnJlYWR5U3RhdGUmJih0aGlzLmc9ITEsTWModGhpcykpO3RoaXMucmVhZHlTdGF0ZT0wfTtcbmguU2E9ZnVuY3Rpb24oYSl7aWYodGhpcy5nJiYodGhpcy5sPWEsdGhpcy5ofHwodGhpcy5zdGF0dXM9dGhpcy5sLnN0YXR1cyx0aGlzLnN0YXR1c1RleHQ9dGhpcy5sLnN0YXR1c1RleHQsdGhpcy5oPWEuaGVhZGVycyx0aGlzLnJlYWR5U3RhdGU9MixMYyh0aGlzKSksdGhpcy5nJiYodGhpcy5yZWFkeVN0YXRlPTMsTGModGhpcyksdGhpcy5nKSkpaWYoXCJhcnJheWJ1ZmZlclwiPT09dGhpcy5yZXNwb25zZVR5cGUpYS5hcnJheUJ1ZmZlcigpLnRoZW4odGhpcy5RYS5iaW5kKHRoaXMpLHRoaXMuZ2EuYmluZCh0aGlzKSk7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGsuUmVhZGFibGVTdHJlYW0mJlwiYm9keVwiaW4gYSl7dGhpcy5qPWEuYm9keS5nZXRSZWFkZXIoKTtpZih0aGlzLm8pe2lmKHRoaXMucmVzcG9uc2VUeXBlKXRocm93IEVycm9yKCdyZXNwb25zZVR5cGUgbXVzdCBiZSBlbXB0eSBmb3IgXCJzdHJlYW1CaW5hcnlDaHVua3NcIiBtb2RlIHJlc3BvbnNlcy4nKTt0aGlzLnJlc3BvbnNlPVxuW119ZWxzZSB0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PVwiXCIsdGhpcy52PW5ldyBUZXh0RGVjb2RlcjtOYyh0aGlzKX1lbHNlIGEudGV4dCgpLnRoZW4odGhpcy5SYS5iaW5kKHRoaXMpLHRoaXMuZ2EuYmluZCh0aGlzKSl9O2Z1bmN0aW9uIE5jKGEpe2Euai5yZWFkKCkudGhlbihhLlBhLmJpbmQoYSkpLmNhdGNoKGEuZ2EuYmluZChhKSl9aC5QYT1mdW5jdGlvbihhKXtpZih0aGlzLmcpe2lmKHRoaXMubyYmYS52YWx1ZSl0aGlzLnJlc3BvbnNlLnB1c2goYS52YWx1ZSk7ZWxzZSBpZighdGhpcy5vKXt2YXIgYj1hLnZhbHVlP2EudmFsdWU6bmV3IFVpbnQ4QXJyYXkoMCk7aWYoYj10aGlzLnYuZGVjb2RlKGIse3N0cmVhbTohYS5kb25lfSkpdGhpcy5yZXNwb25zZT10aGlzLnJlc3BvbnNlVGV4dCs9Yn1hLmRvbmU/TWModGhpcyk6TGModGhpcyk7Mz09dGhpcy5yZWFkeVN0YXRlJiZOYyh0aGlzKX19O1xuaC5SYT1mdW5jdGlvbihhKXt0aGlzLmcmJih0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PWEsTWModGhpcykpfTtoLlFhPWZ1bmN0aW9uKGEpe3RoaXMuZyYmKHRoaXMucmVzcG9uc2U9YSxNYyh0aGlzKSl9O2guZ2E9ZnVuY3Rpb24oKXt0aGlzLmcmJk1jKHRoaXMpfTtmdW5jdGlvbiBNYyhhKXthLnJlYWR5U3RhdGU9NDthLmw9bnVsbDthLmo9bnVsbDthLnY9bnVsbDtMYyhhKX1oLnNldFJlcXVlc3RIZWFkZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLnUuYXBwZW5kKGEsYil9O2guZ2V0UmVzcG9uc2VIZWFkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaD90aGlzLmguZ2V0KGEudG9Mb3dlckNhc2UoKSl8fFwiXCI6XCJcIn07XG5oLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe2lmKCF0aGlzLmgpcmV0dXJuXCJcIjtjb25zdCBhPVtdLGI9dGhpcy5oLmVudHJpZXMoKTtmb3IodmFyIGM9Yi5uZXh0KCk7IWMuZG9uZTspYz1jLnZhbHVlLGEucHVzaChjWzBdK1wiOiBcIitjWzFdKSxjPWIubmV4dCgpO3JldHVybiBhLmpvaW4oXCJcXHJcXG5cIil9O2Z1bmN0aW9uIExjKGEpe2Eub25yZWFkeXN0YXRlY2hhbmdlJiZhLm9ucmVhZHlzdGF0ZWNoYW5nZS5jYWxsKGEpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShLYy5wcm90b3R5cGUsXCJ3aXRoQ3JlZGVudGlhbHNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJpbmNsdWRlXCI9PT10aGlzLm19LHNldDpmdW5jdGlvbihhKXt0aGlzLm09YT9cImluY2x1ZGVcIjpcInNhbWUtb3JpZ2luXCJ9fSk7ZnVuY3Rpb24gT2MoYSl7bGV0IGI9XCJcIjtxYShhLGZ1bmN0aW9uKGMsZCl7Yis9ZDtiKz1cIjpcIjtiKz1jO2IrPVwiXFxyXFxuXCJ9KTtyZXR1cm4gYn1mdW5jdGlvbiBQYyhhLGIsYyl7YTp7Zm9yKGQgaW4gYyl7dmFyIGQ9ITE7YnJlYWsgYX1kPSEwfWR8fChjPU9jKGMpLFwic3RyaW5nXCI9PT10eXBlb2YgYT8oZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhiKSksbnVsbCE9YyYmZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjKSkpOlMoYSxiLGMpKX07ZnVuY3Rpb24gWChhKXtFLmNhbGwodGhpcyk7dGhpcy5oZWFkZXJzPW5ldyBNYXA7dGhpcy5vPWF8fG51bGw7dGhpcy5oPSExO3RoaXMudj10aGlzLmc9bnVsbDt0aGlzLkQ9XCJcIjt0aGlzLm09MDt0aGlzLmw9XCJcIjt0aGlzLmo9dGhpcy5CPXRoaXMudT10aGlzLkE9ITE7dGhpcy5JPW51bGw7dGhpcy5IPVwiXCI7dGhpcy5KPSExfXIoWCxFKTt2YXIgUWM9L15odHRwcz8kL2ksUmM9W1wiUE9TVFwiLFwiUFVUXCJdO2g9WC5wcm90b3R5cGU7aC5IYT1mdW5jdGlvbihhKXt0aGlzLko9YX07XG5oLmVhPWZ1bmN0aW9uKGEsYixjLGQpe2lmKHRoaXMuZyl0aHJvdyBFcnJvcihcIltnb29nLm5ldC5YaHJJb10gT2JqZWN0IGlzIGFjdGl2ZSB3aXRoIGFub3RoZXIgcmVxdWVzdD1cIit0aGlzLkQrXCI7IG5ld1VyaT1cIithKTtiPWI/Yi50b1VwcGVyQ2FzZSgpOlwiR0VUXCI7dGhpcy5EPWE7dGhpcy5sPVwiXCI7dGhpcy5tPTA7dGhpcy5BPSExO3RoaXMuaD0hMDt0aGlzLmc9dGhpcy5vP3RoaXMuby5nKCk6Q2IuZygpO3RoaXMudj10aGlzLm8/bGIodGhpcy5vKTpsYihDYik7dGhpcy5nLm9ucmVhZHlzdGF0ZWNoYW5nZT1wKHRoaXMuRWEsdGhpcyk7dHJ5e3RoaXMuQj0hMCx0aGlzLmcub3BlbihiLFN0cmluZyhhKSwhMCksdGhpcy5CPSExfWNhdGNoKGYpe1NjKHRoaXMsZik7cmV0dXJufWE9Y3x8XCJcIjtjPW5ldyBNYXAodGhpcy5oZWFkZXJzKTtpZihkKWlmKE9iamVjdC5nZXRQcm90b3R5cGVPZihkKT09PU9iamVjdC5wcm90b3R5cGUpZm9yKHZhciBlIGluIGQpYy5zZXQoZSxkW2VdKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGQua2V5cyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0KWZvcihjb25zdCBmIG9mIGQua2V5cygpKWMuc2V0KGYsZC5nZXQoZikpO2Vsc2UgdGhyb3cgRXJyb3IoXCJVbmtub3duIGlucHV0IHR5cGUgZm9yIG9wdF9oZWFkZXJzOiBcIitTdHJpbmcoZCkpO2Q9QXJyYXkuZnJvbShjLmtleXMoKSkuZmluZChmPT5cImNvbnRlbnQtdHlwZVwiPT1mLnRvTG93ZXJDYXNlKCkpO2U9ay5Gb3JtRGF0YSYmYSBpbnN0YW5jZW9mIGsuRm9ybURhdGE7ISgwPD1BcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKFJjLGIsdm9pZCAwKSl8fGR8fGV8fGMuc2V0KFwiQ29udGVudC1UeXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOFwiKTtmb3IoY29uc3QgW2YsZ11vZiBjKXRoaXMuZy5zZXRSZXF1ZXN0SGVhZGVyKGYsZyk7dGhpcy5IJiYodGhpcy5nLnJlc3BvbnNlVHlwZT10aGlzLkgpO1wid2l0aENyZWRlbnRpYWxzXCJpbiB0aGlzLmcmJnRoaXMuZy53aXRoQ3JlZGVudGlhbHMhPT1cbnRoaXMuSiYmKHRoaXMuZy53aXRoQ3JlZGVudGlhbHM9dGhpcy5KKTt0cnl7VGModGhpcyksdGhpcy51PSEwLHRoaXMuZy5zZW5kKGEpLHRoaXMudT0hMX1jYXRjaChmKXtTYyh0aGlzLGYpfX07ZnVuY3Rpb24gU2MoYSxiKXthLmg9ITE7YS5nJiYoYS5qPSEwLGEuZy5hYm9ydCgpLGEuaj0hMSk7YS5sPWI7YS5tPTU7VWMoYSk7VmMoYSl9ZnVuY3Rpb24gVWMoYSl7YS5BfHwoYS5BPSEwLEYoYSxcImNvbXBsZXRlXCIpLEYoYSxcImVycm9yXCIpKX1oLmFib3J0PWZ1bmN0aW9uKGEpe3RoaXMuZyYmdGhpcy5oJiYodGhpcy5oPSExLHRoaXMuaj0hMCx0aGlzLmcuYWJvcnQoKSx0aGlzLmo9ITEsdGhpcy5tPWF8fDcsRih0aGlzLFwiY29tcGxldGVcIiksRih0aGlzLFwiYWJvcnRcIiksVmModGhpcykpfTtoLk49ZnVuY3Rpb24oKXt0aGlzLmcmJih0aGlzLmgmJih0aGlzLmg9ITEsdGhpcy5qPSEwLHRoaXMuZy5hYm9ydCgpLHRoaXMuaj0hMSksVmModGhpcywhMCkpO1guYWEuTi5jYWxsKHRoaXMpfTtcbmguRWE9ZnVuY3Rpb24oKXt0aGlzLnN8fCh0aGlzLkJ8fHRoaXMudXx8dGhpcy5qP1djKHRoaXMpOnRoaXMuYmIoKSl9O2guYmI9ZnVuY3Rpb24oKXtXYyh0aGlzKX07XG5mdW5jdGlvbiBXYyhhKXtpZihhLmgmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBmYSYmKCFhLnZbMV18fDQhPVAoYSl8fDIhPWEuWigpKSlpZihhLnUmJjQ9PVAoYSkpYmIoYS5FYSwwLGEpO2Vsc2UgaWYoRihhLFwicmVhZHlzdGF0ZWNoYW5nZVwiKSw0PT1QKGEpKXthLmg9ITE7dHJ5e2NvbnN0IGc9YS5aKCk7YTpzd2l0Y2goZyl7Y2FzZSAyMDA6Y2FzZSAyMDE6Y2FzZSAyMDI6Y2FzZSAyMDQ6Y2FzZSAyMDY6Y2FzZSAzMDQ6Y2FzZSAxMjIzOnZhciBiPSEwO2JyZWFrIGE7ZGVmYXVsdDpiPSExfXZhciBjO2lmKCEoYz1iKSl7dmFyIGQ7aWYoZD0wPT09Zyl7dmFyIGU9U3RyaW5nKGEuRCkubWF0Y2gob2MpWzFdfHxudWxsOyFlJiZrLnNlbGYmJmsuc2VsZi5sb2NhdGlvbiYmKGU9ay5zZWxmLmxvY2F0aW9uLnByb3RvY29sLnNsaWNlKDAsLTEpKTtkPSFRYy50ZXN0KGU/ZS50b0xvd2VyQ2FzZSgpOlwiXCIpfWM9ZH1pZihjKUYoYSxcImNvbXBsZXRlXCIpLEYoYSxcInN1Y2Nlc3NcIik7ZWxzZXthLm09XG42O3RyeXt2YXIgZj0yPFAoYSk/YS5nLnN0YXR1c1RleHQ6XCJcIn1jYXRjaChtKXtmPVwiXCJ9YS5sPWYrXCIgW1wiK2EuWigpK1wiXVwiO1VjKGEpfX1maW5hbGx5e1ZjKGEpfX19ZnVuY3Rpb24gVmMoYSxiKXtpZihhLmcpe1RjKGEpO2NvbnN0IGM9YS5nLGQ9YS52WzBdPygpPT57fTpudWxsO2EuZz1udWxsO2Eudj1udWxsO2J8fEYoYSxcInJlYWR5XCIpO3RyeXtjLm9ucmVhZHlzdGF0ZWNoYW5nZT1kfWNhdGNoKGUpe319fWZ1bmN0aW9uIFRjKGEpe2EuSSYmKGsuY2xlYXJUaW1lb3V0KGEuSSksYS5JPW51bGwpfWguaXNBY3RpdmU9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuZ307ZnVuY3Rpb24gUChhKXtyZXR1cm4gYS5nP2EuZy5yZWFkeVN0YXRlOjB9aC5aPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiAyPFAodGhpcyk/dGhpcy5nLnN0YXR1czotMX1jYXRjaChhKXtyZXR1cm4tMX19O2gub2E9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIHRoaXMuZz90aGlzLmcucmVzcG9uc2VUZXh0OlwiXCJ9Y2F0Y2goYSl7cmV0dXJuXCJcIn19O1xuaC5PYT1mdW5jdGlvbihhKXtpZih0aGlzLmcpe3ZhciBiPXRoaXMuZy5yZXNwb25zZVRleHQ7YSYmMD09Yi5pbmRleE9mKGEpJiYoYj1iLnN1YnN0cmluZyhhLmxlbmd0aCkpO3JldHVybiBpYihiKX19O2Z1bmN0aW9uIE5iKGEpe3RyeXtpZighYS5nKXJldHVybiBudWxsO2lmKFwicmVzcG9uc2VcImluIGEuZylyZXR1cm4gYS5nLnJlc3BvbnNlO3N3aXRjaChhLkgpe2Nhc2UgXCJcIjpjYXNlIFwidGV4dFwiOnJldHVybiBhLmcucmVzcG9uc2VUZXh0O2Nhc2UgXCJhcnJheWJ1ZmZlclwiOmlmKFwibW96UmVzcG9uc2VBcnJheUJ1ZmZlclwiaW4gYS5nKXJldHVybiBhLmcubW96UmVzcG9uc2VBcnJheUJ1ZmZlcn1yZXR1cm4gbnVsbH1jYXRjaChiKXtyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBWYihhKXtjb25zdCBiPXt9O2E9KGEuZyYmMjw9UChhKT9hLmcuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCl8fFwiXCI6XCJcIikuc3BsaXQoXCJcXHJcXG5cIik7Zm9yKGxldCBkPTA7ZDxhLmxlbmd0aDtkKyspe2lmKHQoYVtkXSkpY29udGludWU7dmFyIGM9dmEoYVtkXSk7Y29uc3QgZT1jWzBdO2M9Y1sxXTtpZihcInN0cmluZ1wiIT09dHlwZW9mIGMpY29udGludWU7Yz1jLnRyaW0oKTtjb25zdCBmPWJbZV18fFtdO2JbZV09ZjtmLnB1c2goYyl9cmEoYixmdW5jdGlvbihkKXtyZXR1cm4gZC5qb2luKFwiLCBcIil9KX1oLkJhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubX07aC5LYT1mdW5jdGlvbigpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgdGhpcy5sP3RoaXMubDpTdHJpbmcodGhpcy5sKX07ZnVuY3Rpb24gWGMoYSxiLGMpe3JldHVybiBjJiZjLmludGVybmFsQ2hhbm5lbFBhcmFtcz9jLmludGVybmFsQ2hhbm5lbFBhcmFtc1thXXx8YjpifVxuZnVuY3Rpb24gWWMoYSl7dGhpcy5BYT0wO3RoaXMuaT1bXTt0aGlzLmo9bmV3IHZiO3RoaXMuaWE9dGhpcy5xYT10aGlzLkk9dGhpcy5XPXRoaXMuZz10aGlzLnlhPXRoaXMuRD10aGlzLkg9dGhpcy5tPXRoaXMuUz10aGlzLm89bnVsbDt0aGlzLllhPXRoaXMuVT0wO3RoaXMuVmE9WGMoXCJmYWlsRmFzdFwiLCExLGEpO3RoaXMuRj10aGlzLkM9dGhpcy51PXRoaXMucz10aGlzLmw9bnVsbDt0aGlzLlg9ITA7dGhpcy56YT10aGlzLlQ9LTE7dGhpcy5ZPXRoaXMudj10aGlzLkI9MDt0aGlzLlRhPVhjKFwiYmFzZVJldHJ5RGVsYXlNc1wiLDVFMyxhKTt0aGlzLmNiPVhjKFwicmV0cnlEZWxheVNlZWRNc1wiLDFFNCxhKTt0aGlzLldhPVhjKFwiZm9yd2FyZENoYW5uZWxNYXhSZXRyaWVzXCIsMixhKTt0aGlzLndhPVhjKFwiZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zXCIsMkU0LGEpO3RoaXMucGE9YSYmYS54bWxIdHRwRmFjdG9yeXx8dm9pZCAwO3RoaXMuWGE9YSYmYS5UYnx8dm9pZCAwO3RoaXMuQ2E9XG5hJiZhLnVzZUZldGNoU3RyZWFtc3x8ITE7dGhpcy5MPXZvaWQgMDt0aGlzLko9YSYmYS5zdXBwb3J0c0Nyb3NzRG9tYWluWGhyfHwhMTt0aGlzLks9XCJcIjt0aGlzLmg9bmV3IGljKGEmJmEuY29uY3VycmVudFJlcXVlc3RMaW1pdCk7dGhpcy5EYT1uZXcgSGM7dGhpcy5QPWEmJmEuZmFzdEhhbmRzaGFrZXx8ITE7dGhpcy5PPWEmJmEuZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzfHwhMTt0aGlzLlAmJnRoaXMuTyYmKHRoaXMuTz0hMSk7dGhpcy5VYT1hJiZhLlJifHwhMTthJiZhLnhhJiZ0aGlzLmoueGEoKTthJiZhLmZvcmNlTG9uZ1BvbGxpbmcmJih0aGlzLlg9ITEpO3RoaXMuYmE9IXRoaXMuUCYmdGhpcy5YJiZhJiZhLmRldGVjdEJ1ZmZlcmluZ1Byb3h5fHwhMTt0aGlzLmphPXZvaWQgMDthJiZhLmxvbmdQb2xsaW5nVGltZW91dCYmMDxhLmxvbmdQb2xsaW5nVGltZW91dCYmKHRoaXMuamE9YS5sb25nUG9sbGluZ1RpbWVvdXQpO3RoaXMuY2E9dm9pZCAwO3RoaXMuUj0wO3RoaXMuTT1cbiExO3RoaXMua2E9dGhpcy5BPW51bGx9aD1ZYy5wcm90b3R5cGU7aC5sYT04O2guRz0xO2guY29ubmVjdD1mdW5jdGlvbihhLGIsYyxkKXtLKDApO3RoaXMuVz1hO3RoaXMuSD1ifHx7fTtjJiZ2b2lkIDAhPT1kJiYodGhpcy5ILk9TSUQ9Yyx0aGlzLkguT0FJRD1kKTt0aGlzLkY9dGhpcy5YO3RoaXMuST1jYyh0aGlzLG51bGwsdGhpcy5XKTtmYyh0aGlzKX07XG5mdW5jdGlvbiBnYyhhKXtaYyhhKTtpZigzPT1hLkcpe3ZhciBiPWEuVSsrLGM9TihhLkkpO1MoYyxcIlNJRFwiLGEuSyk7UyhjLFwiUklEXCIsYik7UyhjLFwiVFlQRVwiLFwidGVybWluYXRlXCIpOyRjKGEsYyk7Yj1uZXcgTShhLGEuaixiKTtiLkw9MjtiLnY9SWIoTihjKSk7Yz0hMTtpZihrLm5hdmlnYXRvciYmay5uYXZpZ2F0b3Iuc2VuZEJlYWNvbil0cnl7Yz1rLm5hdmlnYXRvci5zZW5kQmVhY29uKGIudi50b1N0cmluZygpLFwiXCIpfWNhdGNoKGQpe30hYyYmay5JbWFnZSYmKChuZXcgSW1hZ2UpLnNyYz1iLnYsYz0hMCk7Y3x8KGIuZz1NYihiLmosbnVsbCksYi5nLmVhKGIudikpO2IuRj1EYXRlLm5vdygpO0tiKGIpfWFkKGEpfWZ1bmN0aW9uIFpiKGEpe2EuZyYmKFRiKGEpLGEuZy5jYW5jZWwoKSxhLmc9bnVsbCl9XG5mdW5jdGlvbiBaYyhhKXtaYihhKTthLnUmJihrLmNsZWFyVGltZW91dChhLnUpLGEudT1udWxsKTtZYihhKTthLmguY2FuY2VsKCk7YS5zJiYoXCJudW1iZXJcIj09PXR5cGVvZiBhLnMmJmsuY2xlYXJUaW1lb3V0KGEucyksYS5zPW51bGwpfWZ1bmN0aW9uIGZjKGEpe2lmKCFqYyhhLmgpJiYhYS5zKXthLnM9ITA7dmFyIGI9YS5HYTt4fHxFYSgpO3l8fCh4KCkseT0hMCk7emEuYWRkKGIsYSk7YS5CPTB9fWZ1bmN0aW9uIGJkKGEsYil7aWYoYWMoYS5oKT49YS5oLmotKGEucz8xOjApKXJldHVybiExO2lmKGEucylyZXR1cm4gYS5pPWIuRC5jb25jYXQoYS5pKSwhMDtpZigxPT1hLkd8fDI9PWEuR3x8YS5CPj0oYS5WYT8wOmEuV2EpKXJldHVybiExO2Eucz11YihwKGEuR2EsYSxiKSxjZChhLGEuQikpO2EuQisrO3JldHVybiEwfVxuaC5HYT1mdW5jdGlvbihhKXtpZih0aGlzLnMpaWYodGhpcy5zPW51bGwsMT09dGhpcy5HKXtpZighYSl7dGhpcy5VPU1hdGguZmxvb3IoMUU1Kk1hdGgucmFuZG9tKCkpO2E9dGhpcy5VKys7Y29uc3QgZT1uZXcgTSh0aGlzLHRoaXMuaixhKTtsZXQgZj10aGlzLm87dGhpcy5TJiYoZj8oZj1zYShmKSx1YShmLHRoaXMuUykpOmY9dGhpcy5TKTtudWxsIT09dGhpcy5tfHx0aGlzLk98fChlLkg9ZixmPW51bGwpO2lmKHRoaXMuUClhOnt2YXIgYj0wO2Zvcih2YXIgYz0wO2M8dGhpcy5pLmxlbmd0aDtjKyspe2I6e3ZhciBkPXRoaXMuaVtjXTtpZihcIl9fZGF0YV9fXCJpbiBkLm1hcCYmKGQ9ZC5tYXAuX19kYXRhX18sXCJzdHJpbmdcIj09PXR5cGVvZiBkKSl7ZD1kLmxlbmd0aDticmVhayBifWQ9dm9pZCAwfWlmKHZvaWQgMD09PWQpYnJlYWs7Yis9ZDtpZig0MDk2PGIpe2I9YzticmVhayBhfWlmKDQwOTY9PT1ifHxjPT09dGhpcy5pLmxlbmd0aC0xKXtiPWMrMTticmVhayBhfX1iPTFFM31lbHNlIGI9XG4xRTM7Yj1kZCh0aGlzLGUsYik7Yz1OKHRoaXMuSSk7UyhjLFwiUklEXCIsYSk7UyhjLFwiQ1ZFUlwiLDIyKTt0aGlzLkQmJlMoYyxcIlgtSFRUUC1TZXNzaW9uLUlkXCIsdGhpcy5EKTskYyh0aGlzLGMpO2YmJih0aGlzLk8/Yj1cImhlYWRlcnM9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhPYyhmKSkpK1wiJlwiK2I6dGhpcy5tJiZQYyhjLHRoaXMubSxmKSk7YmModGhpcy5oLGUpO3RoaXMuVWEmJlMoYyxcIlRZUEVcIixcImluaXRcIik7dGhpcy5QPyhTKGMsXCIkcmVxXCIsYiksUyhjLFwiU0lEXCIsXCJudWxsXCIpLGUuVD0hMCxIYihlLGMsbnVsbCkpOkhiKGUsYyxiKTt0aGlzLkc9Mn19ZWxzZSAzPT10aGlzLkcmJihhP2VkKHRoaXMsYSk6MD09dGhpcy5pLmxlbmd0aHx8amModGhpcy5oKXx8ZWQodGhpcykpfTtcbmZ1bmN0aW9uIGVkKGEsYil7dmFyIGM7Yj9jPWIubDpjPWEuVSsrO2NvbnN0IGQ9TihhLkkpO1MoZCxcIlNJRFwiLGEuSyk7UyhkLFwiUklEXCIsYyk7UyhkLFwiQUlEXCIsYS5UKTskYyhhLGQpO2EubSYmYS5vJiZQYyhkLGEubSxhLm8pO2M9bmV3IE0oYSxhLmosYyxhLkIrMSk7bnVsbD09PWEubSYmKGMuSD1hLm8pO2ImJihhLmk9Yi5ELmNvbmNhdChhLmkpKTtiPWRkKGEsYywxRTMpO2MuST1NYXRoLnJvdW5kKC41KmEud2EpK01hdGgucm91bmQoLjUqYS53YSpNYXRoLnJhbmRvbSgpKTtiYyhhLmgsYyk7SGIoYyxkLGIpfWZ1bmN0aW9uICRjKGEsYil7YS5IJiZxYShhLkgsZnVuY3Rpb24oYyxkKXtTKGIsZCxjKX0pO2EubCYmbmMoe30sZnVuY3Rpb24oYyxkKXtTKGIsZCxjKX0pfVxuZnVuY3Rpb24gZGQoYSxiLGMpe2M9TWF0aC5taW4oYS5pLmxlbmd0aCxjKTt2YXIgZD1hLmw/cChhLmwuTmEsYS5sLGEpOm51bGw7YTp7dmFyIGU9YS5pO2xldCBmPS0xO2Zvcig7Oyl7Y29uc3QgZz1bXCJjb3VudD1cIitjXTstMT09Zj8wPGM/KGY9ZVswXS5nLGcucHVzaChcIm9mcz1cIitmKSk6Zj0wOmcucHVzaChcIm9mcz1cIitmKTtsZXQgbT0hMDtmb3IobGV0IHE9MDtxPGM7cSsrKXtsZXQgbD1lW3FdLmc7Y29uc3Qgdj1lW3FdLm1hcDtsLT1mO2lmKDA+bClmPU1hdGgubWF4KDAsZVtxXS5nLTEwMCksbT0hMTtlbHNlIHRyeXtJYyh2LGcsXCJyZXFcIitsK1wiX1wiKX1jYXRjaCh3KXtkJiZkKHYpfX1pZihtKXtkPWcuam9pbihcIiZcIik7YnJlYWsgYX19fWE9YS5pLnNwbGljZSgwLGMpO2IuRD1hO3JldHVybiBkfWZ1bmN0aW9uIGVjKGEpe2lmKCFhLmcmJiFhLnUpe2EuWT0xO3ZhciBiPWEuRmE7eHx8RWEoKTt5fHwoeCgpLHk9ITApO3phLmFkZChiLGEpO2Eudj0wfX1cbmZ1bmN0aW9uICRiKGEpe2lmKGEuZ3x8YS51fHwzPD1hLnYpcmV0dXJuITE7YS5ZKys7YS51PXViKHAoYS5GYSxhKSxjZChhLGEudikpO2EudisrO3JldHVybiEwfWguRmE9ZnVuY3Rpb24oKXt0aGlzLnU9bnVsbDtmZCh0aGlzKTtpZih0aGlzLmJhJiYhKHRoaXMuTXx8bnVsbD09dGhpcy5nfHwwPj10aGlzLlIpKXt2YXIgYT0yKnRoaXMuUjt0aGlzLmouaW5mbyhcIkJQIGRldGVjdGlvbiB0aW1lciBlbmFibGVkOiBcIithKTt0aGlzLkE9dWIocCh0aGlzLmFiLHRoaXMpLGEpfX07aC5hYj1mdW5jdGlvbigpe3RoaXMuQSYmKHRoaXMuQT1udWxsLHRoaXMuai5pbmZvKFwiQlAgZGV0ZWN0aW9uIHRpbWVvdXQgcmVhY2hlZC5cIiksdGhpcy5qLmluZm8oXCJCdWZmZXJpbmcgcHJveHkgZGV0ZWN0ZWQgYW5kIHN3aXRjaCB0byBsb25nLXBvbGxpbmchXCIpLHRoaXMuRj0hMSx0aGlzLk09ITAsSygxMCksWmIodGhpcyksZmQodGhpcykpfTtcbmZ1bmN0aW9uIFRiKGEpe251bGwhPWEuQSYmKGsuY2xlYXJUaW1lb3V0KGEuQSksYS5BPW51bGwpfWZ1bmN0aW9uIGZkKGEpe2EuZz1uZXcgTShhLGEuaixcInJwY1wiLGEuWSk7bnVsbD09PWEubSYmKGEuZy5IPWEubyk7YS5nLk89MDt2YXIgYj1OKGEucWEpO1MoYixcIlJJRFwiLFwicnBjXCIpO1MoYixcIlNJRFwiLGEuSyk7UyhiLFwiQUlEXCIsYS5UKTtTKGIsXCJDSVwiLGEuRj9cIjBcIjpcIjFcIik7IWEuRiYmYS5qYSYmUyhiLFwiVE9cIixhLmphKTtTKGIsXCJUWVBFXCIsXCJ4bWxodHRwXCIpOyRjKGEsYik7YS5tJiZhLm8mJlBjKGIsYS5tLGEubyk7YS5MJiYoYS5nLkk9YS5MKTt2YXIgYz1hLmc7YT1hLmlhO2MuTD0xO2Mudj1JYihOKGIpKTtjLm09bnVsbDtjLlA9ITA7SmIoYyxhKX1oLlphPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5DJiYodGhpcy5DPW51bGwsWmIodGhpcyksJGIodGhpcyksSygxOSkpfTtmdW5jdGlvbiBZYihhKXtudWxsIT1hLkMmJihrLmNsZWFyVGltZW91dChhLkMpLGEuQz1udWxsKX1cbmZ1bmN0aW9uIFViKGEsYil7dmFyIGM9bnVsbDtpZihhLmc9PWIpe1liKGEpO1RiKGEpO2EuZz1udWxsO3ZhciBkPTJ9ZWxzZSBpZihYYihhLmgsYikpYz1iLkQsZGMoYS5oLGIpLGQ9MTtlbHNlIHJldHVybjtpZigwIT1hLkcpaWYoYi5vKWlmKDE9PWQpe2M9Yi5tP2IubS5sZW5ndGg6MDtiPURhdGUubm93KCktYi5GO3ZhciBlPWEuQjtkPXFiKCk7RihkLG5ldyB0YihkLGMsYixlKSk7ZmMoYSl9ZWxzZSBlYyhhKTtlbHNlIGlmKGU9Yi5zLDM9PWV8fDA9PWUmJjA8Yi5YfHwhKDE9PWQmJmJkKGEsYil8fDI9PWQmJiRiKGEpKSlzd2l0Y2goYyYmMDxjLmxlbmd0aCYmKGI9YS5oLGIuaT1iLmkuY29uY2F0KGMpKSxlKXtjYXNlIDE6UihhLDUpO2JyZWFrO2Nhc2UgNDpSKGEsMTApO2JyZWFrO2Nhc2UgMzpSKGEsNik7YnJlYWs7ZGVmYXVsdDpSKGEsMil9fVxuZnVuY3Rpb24gY2QoYSxiKXtsZXQgYz1hLlRhK01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSphLmNiKTthLmlzQWN0aXZlKCl8fChjKj0yKTtyZXR1cm4gYypifWZ1bmN0aW9uIFIoYSxiKXthLmouaW5mbyhcIkVycm9yIGNvZGUgXCIrYik7aWYoMj09Yil7dmFyIGM9cChhLmZiLGEpLGQ9YS5YYTtjb25zdCBlPSFkO2Q9bmV3IFQoZHx8XCIvL3d3dy5nb29nbGUuY29tL2ltYWdlcy9jbGVhcmRvdC5naWZcIik7ay5sb2NhdGlvbiYmXCJodHRwXCI9PWsubG9jYXRpb24ucHJvdG9jb2x8fHFjKGQsXCJodHRwc1wiKTtJYihkKTtlP0ZjKGQudG9TdHJpbmcoKSxjKTpHYyhkLnRvU3RyaW5nKCksYyl9ZWxzZSBLKDIpO2EuRz0wO2EubCYmYS5sLnNhKGIpO2FkKGEpO1pjKGEpfWguZmI9ZnVuY3Rpb24oYSl7YT8odGhpcy5qLmluZm8oXCJTdWNjZXNzZnVsbHkgcGluZ2VkIGdvb2dsZS5jb21cIiksSygyKSk6KHRoaXMuai5pbmZvKFwiRmFpbGVkIHRvIHBpbmcgZ29vZ2xlLmNvbVwiKSxLKDEpKX07XG5mdW5jdGlvbiBhZChhKXthLkc9MDthLmthPVtdO2lmKGEubCl7Y29uc3QgYj1rYyhhLmgpO2lmKDAhPWIubGVuZ3RofHwwIT1hLmkubGVuZ3RoKW1hKGEua2EsYiksbWEoYS5rYSxhLmkpLGEuaC5pLmxlbmd0aD0wLGxhKGEuaSksYS5pLmxlbmd0aD0wO2EubC5yYSgpfX1mdW5jdGlvbiBjYyhhLGIsYyl7dmFyIGQ9YyBpbnN0YW5jZW9mIFQ/TihjKTpuZXcgVChjKTtpZihcIlwiIT1kLmcpYiYmKGQuZz1iK1wiLlwiK2QuZykscmMoZCxkLnMpO2Vsc2V7dmFyIGU9ay5sb2NhdGlvbjtkPWUucHJvdG9jb2w7Yj1iP2IrXCIuXCIrZS5ob3N0bmFtZTplLmhvc3RuYW1lO2U9K2UucG9ydDt2YXIgZj1uZXcgVChudWxsKTtkJiZxYyhmLGQpO2ImJihmLmc9Yik7ZSYmcmMoZixlKTtjJiYoZi5sPWMpO2Q9Zn1jPWEuRDtiPWEueWE7YyYmYiYmUyhkLGMsYik7UyhkLFwiVkVSXCIsYS5sYSk7JGMoYSxkKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIE1iKGEsYixjKXtpZihiJiYhYS5KKXRocm93IEVycm9yKFwiQ2FuJ3QgY3JlYXRlIHNlY29uZGFyeSBkb21haW4gY2FwYWJsZSBYaHJJbyBvYmplY3QuXCIpO2I9YS5DYSYmIWEucGE/bmV3IFgobmV3IEpjKHtlYjpjfSkpOm5ldyBYKGEucGEpO2IuSGEoYS5KKTtyZXR1cm4gYn1oLmlzQWN0aXZlPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmwmJnRoaXMubC5pc0FjdGl2ZSh0aGlzKX07ZnVuY3Rpb24gZ2QoKXt9aD1nZC5wcm90b3R5cGU7aC51YT1mdW5jdGlvbigpe307aC50YT1mdW5jdGlvbigpe307aC5zYT1mdW5jdGlvbigpe307aC5yYT1mdW5jdGlvbigpe307aC5pc0FjdGl2ZT1mdW5jdGlvbigpe3JldHVybiEwfTtoLk5hPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBoZCgpe31oZC5wcm90b3R5cGUuZz1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgWShhLGIpfTtcbmZ1bmN0aW9uIFkoYSxiKXtFLmNhbGwodGhpcyk7dGhpcy5nPW5ldyBZYyhiKTt0aGlzLmw9YTt0aGlzLmg9YiYmYi5tZXNzYWdlVXJsUGFyYW1zfHxudWxsO2E9YiYmYi5tZXNzYWdlSGVhZGVyc3x8bnVsbDtiJiZiLmNsaWVudFByb3RvY29sSGVhZGVyUmVxdWlyZWQmJihhP2FbXCJYLUNsaWVudC1Qcm90b2NvbFwiXT1cIndlYmNoYW5uZWxcIjphPXtcIlgtQ2xpZW50LVByb3RvY29sXCI6XCJ3ZWJjaGFubmVsXCJ9KTt0aGlzLmcubz1hO2E9YiYmYi5pbml0TWVzc2FnZUhlYWRlcnN8fG51bGw7YiYmYi5tZXNzYWdlQ29udGVudFR5cGUmJihhP2FbXCJYLVdlYkNoYW5uZWwtQ29udGVudC1UeXBlXCJdPWIubWVzc2FnZUNvbnRlbnRUeXBlOmE9e1wiWC1XZWJDaGFubmVsLUNvbnRlbnQtVHlwZVwiOmIubWVzc2FnZUNvbnRlbnRUeXBlfSk7YiYmYi52YSYmKGE/YVtcIlgtV2ViQ2hhbm5lbC1DbGllbnQtUHJvZmlsZVwiXT1iLnZhOmE9e1wiWC1XZWJDaGFubmVsLUNsaWVudC1Qcm9maWxlXCI6Yi52YX0pO3RoaXMuZy5TPVxuYTsoYT1iJiZiLlNiKSYmIXQoYSkmJih0aGlzLmcubT1hKTt0aGlzLnY9YiYmYi5zdXBwb3J0c0Nyb3NzRG9tYWluWGhyfHwhMTt0aGlzLnU9YiYmYi5zZW5kUmF3SnNvbnx8ITE7KGI9YiYmYi5odHRwU2Vzc2lvbklkUGFyYW0pJiYhdChiKSYmKHRoaXMuZy5EPWIsYT10aGlzLmgsbnVsbCE9PWEmJmIgaW4gYSYmKGE9dGhpcy5oLGIgaW4gYSYmZGVsZXRlIGFbYl0pKTt0aGlzLmo9bmV3IFoodGhpcyl9cihZLEUpO1kucHJvdG90eXBlLm09ZnVuY3Rpb24oKXt0aGlzLmcubD10aGlzLmo7dGhpcy52JiYodGhpcy5nLko9ITApO3RoaXMuZy5jb25uZWN0KHRoaXMubCx0aGlzLmh8fHZvaWQgMCl9O1kucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7Z2ModGhpcy5nKX07XG5ZLnByb3RvdHlwZS5vPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZztpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpe3ZhciBjPXt9O2MuX19kYXRhX189YTthPWN9ZWxzZSB0aGlzLnUmJihjPXt9LGMuX19kYXRhX189aGIoYSksYT1jKTtiLmkucHVzaChuZXcgaGMoYi5ZYSsrLGEpKTszPT1iLkcmJmZjKGIpfTtZLnByb3RvdHlwZS5OPWZ1bmN0aW9uKCl7dGhpcy5nLmw9bnVsbDtkZWxldGUgdGhpcy5qO2djKHRoaXMuZyk7ZGVsZXRlIHRoaXMuZztZLmFhLk4uY2FsbCh0aGlzKX07XG5mdW5jdGlvbiBpZChhKXtuYi5jYWxsKHRoaXMpO2EuX19oZWFkZXJzX18mJih0aGlzLmhlYWRlcnM9YS5fX2hlYWRlcnNfXyx0aGlzLnN0YXR1c0NvZGU9YS5fX3N0YXR1c19fLGRlbGV0ZSBhLl9faGVhZGVyc19fLGRlbGV0ZSBhLl9fc3RhdHVzX18pO3ZhciBiPWEuX19zbV9fO2lmKGIpe2E6e2Zvcihjb25zdCBjIGluIGIpe2E9YzticmVhayBhfWE9dm9pZCAwfWlmKHRoaXMuaT1hKWE9dGhpcy5pLGI9bnVsbCE9PWImJmEgaW4gYj9iW2FdOnZvaWQgMDt0aGlzLmRhdGE9Yn1lbHNlIHRoaXMuZGF0YT1hfXIoaWQsbmIpO2Z1bmN0aW9uIGpkKCl7b2IuY2FsbCh0aGlzKTt0aGlzLnN0YXR1cz0xfXIoamQsb2IpO2Z1bmN0aW9uIFooYSl7dGhpcy5nPWF9cihaLGdkKTtaLnByb3RvdHlwZS51YT1mdW5jdGlvbigpe0YodGhpcy5nLFwiYVwiKX07Wi5wcm90b3R5cGUudGE9ZnVuY3Rpb24oYSl7Rih0aGlzLmcsbmV3IGlkKGEpKX07XG5aLnByb3RvdHlwZS5zYT1mdW5jdGlvbihhKXtGKHRoaXMuZyxuZXcgamQoYSkpfTtaLnByb3RvdHlwZS5yYT1mdW5jdGlvbigpe0YodGhpcy5nLFwiYlwiKX07aGQucHJvdG90eXBlLmNyZWF0ZVdlYkNoYW5uZWw9aGQucHJvdG90eXBlLmc7WS5wcm90b3R5cGUuc2VuZD1ZLnByb3RvdHlwZS5vO1kucHJvdG90eXBlLm9wZW49WS5wcm90b3R5cGUubTtZLnByb3RvdHlwZS5jbG9zZT1ZLnByb3RvdHlwZS5jbG9zZTttb2R1bGUuZXhwb3J0cy5jcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBoZH07bW9kdWxlLmV4cG9ydHMuZ2V0U3RhdEV2ZW50VGFyZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHFiKCl9O21vZHVsZS5leHBvcnRzLkV2ZW50PUk7bW9kdWxlLmV4cG9ydHMuU3RhdD17bWI6MCxwYjoxLHFiOjIsSmI6MyxPYjo0LExiOjUsTWI6NixLYjo3LEliOjgsTmI6OSxQUk9YWToxMCxOT1BST1hZOjExLEdiOjEyLENiOjEzLERiOjE0LEJiOjE1LEViOjE2LEZiOjE3LGliOjE4LGhiOjE5LGpiOjIwfTtBYi5OT19FUlJPUj0wO0FiLlRJTUVPVVQ9ODtBYi5IVFRQX0VSUk9SPTY7XG5tb2R1bGUuZXhwb3J0cy5FcnJvckNvZGU9QWI7QmIuQ09NUExFVEU9XCJjb21wbGV0ZVwiO21vZHVsZS5leHBvcnRzLkV2ZW50VHlwZT1CYjttYi5FdmVudFR5cGU9SDtILk9QRU49XCJhXCI7SC5DTE9TRT1cImJcIjtILkVSUk9SPVwiY1wiO0guTUVTU0FHRT1cImRcIjtFLnByb3RvdHlwZS5saXN0ZW49RS5wcm90b3R5cGUuSzttb2R1bGUuZXhwb3J0cy5XZWJDaGFubmVsPW1iO21vZHVsZS5leHBvcnRzLkZldGNoWG1sSHR0cEZhY3Rvcnk9SmM7WC5wcm90b3R5cGUubGlzdGVuT25jZT1YLnByb3RvdHlwZS5MO1gucHJvdG90eXBlLmdldExhc3RFcnJvcj1YLnByb3RvdHlwZS5LYTtYLnByb3RvdHlwZS5nZXRMYXN0RXJyb3JDb2RlPVgucHJvdG90eXBlLkJhO1gucHJvdG90eXBlLmdldFN0YXR1cz1YLnByb3RvdHlwZS5aO1gucHJvdG90eXBlLmdldFJlc3BvbnNlSnNvbj1YLnByb3RvdHlwZS5PYTtYLnByb3RvdHlwZS5nZXRSZXNwb25zZVRleHQ9WC5wcm90b3R5cGUub2E7XG5YLnByb3RvdHlwZS5zZW5kPVgucHJvdG90eXBlLmVhO1gucHJvdG90eXBlLnNldFdpdGhDcmVkZW50aWFscz1YLnByb3RvdHlwZS5IYTttb2R1bGUuZXhwb3J0cy5YaHJJbz1YO30pLmFwcGx5KCB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgIDoge30pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgYXBwID0gcmVxdWlyZSgnQGZpcmViYXNlL2FwcCcpO1xuXG52YXIgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbnZhciB2ZXJzaW9uID0gXCIxMC4xMi4zXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmFwcC5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ2FwcCcpO1xuXG5PYmplY3Qua2V5cyhhcHApLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgaWYgKGsgIT09ICdkZWZhdWx0JyAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShrKSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGssIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXBwW2tdOyB9XG4gIH0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5janMuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBmaXJlc3RvcmUgPSByZXF1aXJlKCdAZmlyZWJhc2UvZmlyZXN0b3JlJyk7XG5cblxuXG5PYmplY3Qua2V5cyhmaXJlc3RvcmUpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0aWYgKGsgIT09ICdkZWZhdWx0JyAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShrKSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGssIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmlyZXN0b3JlW2tdOyB9XG5cdH0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5janMuanMubWFwXG4iLCJjb25zdCBpbnN0YW5jZU9mQW55ID0gKG9iamVjdCwgY29uc3RydWN0b3JzKSA9PiBjb25zdHJ1Y3RvcnMuc29tZSgoYykgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcbmxldCBjdXJzb3JBZHZhbmNlTWV0aG9kcztcbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XG4gICAgcmV0dXJuIChpZGJQcm94eWFibGVUeXBlcyB8fFxuICAgICAgICAoaWRiUHJveHlhYmxlVHlwZXMgPSBbXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcbiAgICAgICAgICAgIElEQk9iamVjdFN0b3JlLFxuICAgICAgICAgICAgSURCSW5kZXgsXG4gICAgICAgICAgICBJREJDdXJzb3IsXG4gICAgICAgICAgICBJREJUcmFuc2FjdGlvbixcbiAgICAgICAgXSkpO1xufVxuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpIHtcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XG4gICAgICAgIChjdXJzb3JBZHZhbmNlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuYWR2YW5jZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlUHJpbWFyeUtleSxcbiAgICAgICAgXSkpO1xufVxuY29uc3QgY3Vyc29yUmVxdWVzdE1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvbkRvbmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcChyZXF1ZXN0LnJlc3VsdCkpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICB9KTtcbiAgICBwcm9taXNlXG4gICAgICAgIC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAvLyBTaW5jZSBjdXJzb3JpbmcgcmV1c2VzIHRoZSBJREJSZXF1ZXN0ICgqc2lnaCopLCB3ZSBjYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsXG4gICAgICAgIC8vIChzZWUgd3JhcEZ1bmN0aW9uKS5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCQ3Vyc29yKSB7XG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0TWFwLnNldCh2YWx1ZSwgcmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2hpbmcgdG8gYXZvaWQgXCJVbmNhdWdodCBQcm9taXNlIGV4Y2VwdGlvbnNcIlxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIC8vIFRoaXMgbWFwcGluZyBleGlzdHMgaW4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGJ1dCBkb2Vzbid0IGRvZXNuJ3QgZXhpc3QgaW4gdHJhbnNmb3JtQ2FjaGUuIFRoaXNcbiAgICAvLyBpcyBiZWNhdXNlIHdlIGNyZWF0ZSBtYW55IHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdC5cbiAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KHByb21pc2UsIHJlcXVlc3QpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHR4KSB7XG4gICAgLy8gRWFybHkgYmFpbCBpZiB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgYSBkb25lIHByb21pc2UgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgaWYgKHRyYW5zYWN0aW9uRG9uZU1hcC5oYXModHgpKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgZG9uZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QodHguZXJyb3IgfHwgbmV3IERPTUV4Y2VwdGlvbignQWJvcnRFcnJvcicsICdBYm9ydEVycm9yJykpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICB9KTtcbiAgICAvLyBDYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsLlxuICAgIHRyYW5zYWN0aW9uRG9uZU1hcC5zZXQodHgsIGRvbmUpO1xufVxubGV0IGlkYlByb3h5VHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciB0cmFuc2FjdGlvbi5kb25lLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdkb25lJylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25Eb25lTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgLy8gUG9seWZpbGwgZm9yIG9iamVjdFN0b3JlTmFtZXMgYmVjYXVzZSBvZiBFZGdlLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvYmplY3RTdG9yZU5hbWVzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQub2JqZWN0U3RvcmVOYW1lcyB8fCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYWtlIHR4LnN0b3JlIHJldHVybiB0aGUgb25seSBzdG9yZSBpbiB0aGUgdHJhbnNhY3Rpb24sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbWFueS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3RvcmUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMV1cbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiByZWNlaXZlci5vYmplY3RTdG9yZShyZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlIHRyYW5zZm9ybSB3aGF0ZXZlciB3ZSBnZXQgYmFjay5cbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0W3Byb3BdKTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uICYmXG4gICAgICAgICAgICAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XG4gICAgfSxcbn07XG5mdW5jdGlvbiByZXBsYWNlVHJhcHMoY2FsbGJhY2spIHtcbiAgICBpZGJQcm94eVRyYXBzID0gY2FsbGJhY2soaWRiUHJveHlUcmFwcyk7XG59XG5mdW5jdGlvbiB3cmFwRnVuY3Rpb24oZnVuYykge1xuICAgIC8vIER1ZSB0byBleHBlY3RlZCBvYmplY3QgZXF1YWxpdHkgKHdoaWNoIGlzIGVuZm9yY2VkIGJ5IHRoZSBjYWNoaW5nIGluIGB3cmFwYCksIHdlXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxuICAgIC8vIEVkZ2UgZG9lc24ndCBzdXBwb3J0IG9iamVjdFN0b3JlTmFtZXMgKGJvb28pLCBzbyB3ZSBwb2x5ZmlsbCBpdCBoZXJlLlxuICAgIGlmIChmdW5jID09PSBJREJEYXRhYmFzZS5wcm90b3R5cGUudHJhbnNhY3Rpb24gJiZcbiAgICAgICAgISgnb2JqZWN0U3RvcmVOYW1lcycgaW4gSURCVHJhbnNhY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlTmFtZXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gZnVuYy5jYWxsKHVud3JhcCh0aGlzKSwgc3RvcmVOYW1lcywgLi4uYXJncyk7XG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuc2V0KHR4LCBzdG9yZU5hbWVzLnNvcnQgPyBzdG9yZU5hbWVzLnNvcnQoKSA6IFtzdG9yZU5hbWVzXSk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcCh0eCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEN1cnNvciBtZXRob2RzIGFyZSBzcGVjaWFsLCBhcyB0aGUgYmVoYXZpb3VyIGlzIGEgbGl0dGxlIG1vcmUgZGlmZmVyZW50IHRvIHN0YW5kYXJkIElEQi4gSW5cbiAgICAvLyBJREIsIHlvdSBhZHZhbmNlIHRoZSBjdXJzb3IgYW5kIHdhaXQgZm9yIGEgbmV3ICdzdWNjZXNzJyBvbiB0aGUgSURCUmVxdWVzdCB0aGF0IGdhdmUgeW91IHRoZVxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXG4gICAgLy8gd2l0aCByZWFsIHByb21pc2VzLCBzbyBlYWNoIGFkdmFuY2UgbWV0aG9kcyByZXR1cm5zIGEgbmV3IHByb21pc2UgZm9yIHRoZSBjdXJzb3Igb2JqZWN0LCBvclxuICAgIC8vIHVuZGVmaW5lZCBpZiB0aGUgZW5kIG9mIHRoZSBjdXJzb3IgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgICAgICBmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcChjdXJzb3JSZXF1ZXN0TWFwLmdldCh0aGlzKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgIHJldHVybiB3cmFwKGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gd3JhcEZ1bmN0aW9uKHZhbHVlKTtcbiAgICAvLyBUaGlzIGRvZXNuJ3QgcmV0dXJuLCBpdCBqdXN0IGNyZWF0ZXMgYSAnZG9uZScgcHJvbWlzZSBmb3IgdGhlIHRyYW5zYWN0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pXG4gICAgICAgIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih2YWx1ZSk7XG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHZhbHVlLCBpZGJQcm94eVRyYXBzKTtcbiAgICAvLyBSZXR1cm4gdGhlIHNhbWUgdmFsdWUgYmFjayBpZiB3ZSdyZSBub3QgZ29pbmcgdG8gdHJhbnNmb3JtIGl0LlxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHdyYXAodmFsdWUpIHtcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcbiAgICAvLyBJREIgaXMgd2VpcmQgYW5kIGEgc2luZ2xlIElEQlJlcXVlc3QgY2FuIHlpZWxkIG1hbnkgcmVzcG9uc2VzLCBzbyB0aGVzZSBjYW4ndCBiZSBjYWNoZWQuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCUmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgdHJhbnNmb3JtZWQgdGhpcyB2YWx1ZSBiZWZvcmUsIHJldXNlIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICAvLyBUaGlzIGlzIGZhc3RlciwgYnV0IGl0IGFsc28gcHJvdmlkZXMgb2JqZWN0IGVxdWFsaXR5LlxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpO1xuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxuICAgIC8vIFRoZXNlIG1heSBiZSBwcmltaXRpdmUgdHlwZXMsIHNvIHRoZXkgY2FuJ3QgYmUgV2Vha01hcCBrZXlzLlxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQobmV3VmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuY29uc3QgdW53cmFwID0gKHZhbHVlKSA9PiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcblxuZXhwb3J0IHsgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGFzIGEsIGluc3RhbmNlT2ZBbnkgYXMgaSwgcmVwbGFjZVRyYXBzIGFzIHIsIHVud3JhcCBhcyB1LCB3cmFwIGFzIHcgfTtcbiIsImltcG9ydCB7IHcgYXMgd3JhcCwgciBhcyByZXBsYWNlVHJhcHMgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcbmV4cG9ydCB7IHUgYXMgdW53cmFwLCB3IGFzIHdyYXAgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcblxuLyoqXG4gKiBPcGVuIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0gdmVyc2lvbiBTY2hlbWEgdmVyc2lvbi5cbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9wZW5EQihuYW1lLCB2ZXJzaW9uLCB7IGJsb2NrZWQsIHVwZ3JhZGUsIGJsb2NraW5nLCB0ZXJtaW5hdGVkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICBjb25zdCBvcGVuUHJvbWlzZSA9IHdyYXAocmVxdWVzdCk7XG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pLCBldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgb3BlblByb21pc2VcbiAgICAgICAgLnRoZW4oKGRiKSA9PiB7XG4gICAgICAgIGlmICh0ZXJtaW5hdGVkKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB0ZXJtaW5hdGVkKCkpO1xuICAgICAgICBpZiAoYmxvY2tpbmcpIHtcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoZXZlbnQpID0+IGJsb2NraW5nKGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIGV2ZW50KSk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXAocmVxdWVzdCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xufVxuXG5jb25zdCByZWFkTWV0aG9kcyA9IFsnZ2V0JywgJ2dldEtleScsICdnZXRBbGwnLCAnZ2V0QWxsS2V5cycsICdjb3VudCddO1xuY29uc3Qgd3JpdGVNZXRob2RzID0gWydwdXQnLCAnYWRkJywgJ2RlbGV0ZScsICdjbGVhciddO1xuY29uc3QgY2FjaGVkTWV0aG9kcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHtcbiAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBJREJEYXRhYmFzZSAmJlxuICAgICAgICAhKHByb3AgaW4gdGFyZ2V0KSAmJlxuICAgICAgICB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApKVxuICAgICAgICByZXR1cm4gY2FjaGVkTWV0aG9kcy5nZXQocHJvcCk7XG4gICAgY29uc3QgdGFyZ2V0RnVuY05hbWUgPSBwcm9wLnJlcGxhY2UoL0Zyb21JbmRleCQvLCAnJyk7XG4gICAgY29uc3QgdXNlSW5kZXggPSBwcm9wICE9PSB0YXJnZXRGdW5jTmFtZTtcbiAgICBjb25zdCBpc1dyaXRlID0gd3JpdGVNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKTtcbiAgICBpZiAoXG4gICAgLy8gQmFpbCBpZiB0aGUgdGFyZ2V0IGRvZXNuJ3QgZXhpc3Qgb24gdGhlIHRhcmdldC4gRWcsIGdldEFsbCBpc24ndCBpbiBFZGdlLlxuICAgICEodGFyZ2V0RnVuY05hbWUgaW4gKHVzZUluZGV4ID8gSURCSW5kZXggOiBJREJPYmplY3RTdG9yZSkucHJvdG90eXBlKSB8fFxuICAgICAgICAhKGlzV3JpdGUgfHwgcmVhZE1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uIChzdG9yZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogdW5kZWZpbmVkIGd6aXBwcyBiZXR0ZXIsIGJ1dCBmYWlscyBpbiBFZGdlIDooXG4gICAgICAgIGNvbnN0IHR4ID0gdGhpcy50cmFuc2FjdGlvbihzdG9yZU5hbWUsIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6ICdyZWFkb25seScpO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gdHguc3RvcmU7XG4gICAgICAgIGlmICh1c2VJbmRleClcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5pbmRleChhcmdzLnNoaWZ0KCkpO1xuICAgICAgICAvLyBNdXN0IHJlamVjdCBpZiBvcCByZWplY3RzLlxuICAgICAgICAvLyBJZiBpdCdzIGEgd3JpdGUgb3BlcmF0aW9uLCBtdXN0IHJlamVjdCBpZiB0eC5kb25lIHJlamVjdHMuXG4gICAgICAgIC8vIE11c3QgcmVqZWN0IHdpdGggb3AgcmVqZWN0aW9uIGZpcnN0LlxuICAgICAgICAvLyBNdXN0IHJlc29sdmUgd2l0aCBvcCB2YWx1ZS5cbiAgICAgICAgLy8gTXVzdCBoYW5kbGUgYm90aCBwcm9taXNlcyAobm8gdW5oYW5kbGVkIHJlamVjdGlvbnMpXG4gICAgICAgIHJldHVybiAoYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGFyZ2V0W3RhcmdldEZ1bmNOYW1lXSguLi5hcmdzKSxcbiAgICAgICAgICAgIGlzV3JpdGUgJiYgdHguZG9uZSxcbiAgICAgICAgXSkpWzBdO1xuICAgIH07XG4gICAgY2FjaGVkTWV0aG9kcy5zZXQocHJvcCwgbWV0aG9kKTtcbiAgICByZXR1cm4gbWV0aG9kO1xufVxucmVwbGFjZVRyYXBzKChvbGRUcmFwcykgPT4gKHtcbiAgICAuLi5vbGRUcmFwcyxcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlciksXG4gICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiAhIWdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmhhcyh0YXJnZXQsIHByb3ApLFxufSkpO1xuXG5leHBvcnQgeyBkZWxldGVEQiwgb3BlbkRCIH07XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIsIGF3YWl0UmV0dXJuKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiBhd2FpdFJldHVybihmKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZiwgcmVqZWN0KTsgfTsgfVxuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xuICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XG4gIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xuICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hZGREaXNwb3NhYmxlUmVzb3VyY2UoZW52LCB2YWx1ZSwgYXN5bmMpIHtcbiAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkLlwiKTtcbiAgICB2YXIgZGlzcG9zZSwgaW5uZXI7XG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICBpZiAoIVN5bWJvbC5hc3luY0Rpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNEaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuYXN5bmNEaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKGRpc3Bvc2UgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuZGlzcG9zZV07XG4gICAgICBpZiAoYXN5bmMpIGlubmVyID0gZGlzcG9zZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xuICAgIGlmIChpbm5lcikgZGlzcG9zZSA9IGZ1bmN0aW9uKCkgeyB0cnkgeyBpbm5lci5jYWxsKHRoaXMpOyB9IGNhdGNoIChlKSB7IHJldHVybiBQcm9taXNlLnJlamVjdChlKTsgfSB9O1xuICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XG4gIH1cbiAgZWxzZSBpZiAoYXN5bmMpIHtcbiAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xuICBmdW5jdGlvbiBmYWlsKGUpIHtcbiAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XG4gICAgICB2YXIgcmVjID0gZW52LnN0YWNrLnBvcCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlYy5kaXNwb3NlICYmIHJlYy5kaXNwb3NlLmNhbGwocmVjLnZhbHVlKTtcbiAgICAgICAgaWYgKHJlYy5hc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1Nik7XG4iXSwibmFtZXMiOlsiYXBwIiwiaW5pdGlhbGl6ZUFwcCIsImFwaUtleSIsImF1dGhEb21haW4iLCJwcm9qZWN0SWQiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJkYiIsImdldEZpcmVzdG9yZSIsImNvY2t0YWlsc0RhdGEiLCJsdXh1cnlEYXRhIiwiYmVlckRhdGEiLCJ1cGRhdGVEcmlua0NvdW50IiwiZHJpbmsiLCJjYXRlZ29yeSIsImRyaW5rUmVmIiwiZG9jIiwicmVwbGFjZSIsImRvY1NuYXAiLCJnZXREb2MiLCJleGlzdHMiLCJjdXJyZW50Q291bnQiLCJkYXRhIiwiY291bnQiLCJ1cGRhdGVEb2MiLCJjb25zb2xlIiwibG9nIiwic2V0RG9jIiwiZXJyb3IiLCJpbml0aWFsaXplUmVzdWx0cyIsImNhdGVnb3JpZXMiLCJkcmlua3MiLCJjb3VudEVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidG9Mb3dlckNhc2UiLCJpbm5lclRleHQiLCJhZGRFdmVudExpc3RlbmVyIiwibGFzdE5hbWUiLCJ2YWx1ZSIsImZpcnN0TmFtZSIsImd1ZXN0UmVmIiwiYWRkR3Vlc3QiLCJhbGVydCIsImd1ZXN0c0NvbGxlY3Rpb24iLCJjb2xsZWN0aW9uIiwib25TbmFwc2hvdCIsInNuYXBzaG90IiwiZ3Vlc3RMaXN0IiwiaW5uZXJIVE1MIiwiZm9yRWFjaCIsImd1ZXN0Iiwicm93IiwiY3JlYXRlRWxlbWVudCIsImxhc3ROYW1lQ2VsbCIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJmaXJzdE5hbWVDZWxsIiwidXBkYXRlR3Vlc3RMaXN0SW5IVE1MIiwiaW5pdGlhbGl6ZUd1ZXN0TGlzdCIsImNvY2t0YWlscyIsImx1eHVyeSIsImJlZXIiLCJPYmplY3QiLCJlbnRyaWVzIiwiaW5pdGlhbGl6ZUZpcmVzdG9yZURhdGEiLCJzdXJ2ZXlGb3JtIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJ0YXJnZXQiLCJjb2NrdGFpbERyaW5rcyIsImdldEFsbCIsInRvU3RyaW5nIiwibHV4dXJ5RHJpbmtzIiwiYmVlckRyaW5rcyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJkaXNwbGF5IiwiZG9jU25hcHNob3QiLCJ1cGRhdGVSZXN1bHRJbkhUTUwiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJfYSQxIiwiX2EiLCJjb21wb25lbnQiLCJ0c2xpYiIsImxvZ2dlciQxIiwidXRpbCIsImlkYiIsIlBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGwiLCJjb250YWluZXIiLCJ0aGlzIiwicHJvdG90eXBlIiwiZ2V0UGxhdGZvcm1JbmZvU3RyaW5nIiwiZ2V0UHJvdmlkZXJzIiwibWFwIiwicHJvdmlkZXIiLCJnZXRDb21wb25lbnQiLCJ0eXBlIiwiaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyIiwic2VydmljZSIsImdldEltbWVkaWF0ZSIsImNvbmNhdCIsImxpYnJhcnkiLCJ2ZXJzaW9uIiwiZmlsdGVyIiwibG9nU3RyaW5nIiwiam9pbiIsIm5hbWUkcCIsInZlcnNpb24kMSIsImxvZ2dlciIsIkxvZ2dlciIsIkRFRkFVTFRfRU5UUllfTkFNRSIsIlBMQVRGT1JNX0xPR19TVFJJTkciLCJfYXBwcyIsIk1hcCIsIl9zZXJ2ZXJBcHBzIiwiX2NvbXBvbmVudHMiLCJfYWRkQ29tcG9uZW50IiwiYWRkQ29tcG9uZW50IiwiZSIsImRlYnVnIiwibmFtZSIsIl9yZWdpc3RlckNvbXBvbmVudCIsImVfMSIsImVfMiIsIl9iIiwiY29tcG9uZW50TmFtZSIsImhhcyIsInNldCIsIl9jIiwiX192YWx1ZXMiLCJ2YWx1ZXMiLCJfZCIsIm5leHQiLCJkb25lIiwiZV8xXzEiLCJyZXR1cm4iLCJjYWxsIiwiX2UiLCJfZiIsImVfMl8xIiwiX2dldFByb3ZpZGVyIiwiaGVhcnRiZWF0Q29udHJvbGxlciIsImdldFByb3ZpZGVyIiwib3B0aW9uYWwiLCJ0cmlnZ2VySGVhcnRiZWF0IiwiX2lzRmlyZWJhc2VBcHAiLCJvYmoiLCJ1bmRlZmluZWQiLCJvcHRpb25zIiwiRVJST1JTIiwiRVJST1JfRkFDVE9SWSIsIkVycm9yRmFjdG9yeSIsIkZpcmViYXNlQXBwSW1wbCIsImNvbmZpZyIsIl90aGlzIiwiX2lzRGVsZXRlZCIsIl9vcHRpb25zIiwiX19hc3NpZ24iLCJfY29uZmlnIiwiX25hbWUiLCJfYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIiwiYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIiwiX2NvbnRhaW5lciIsIkNvbXBvbmVudCIsImdldCIsImNoZWNrRGVzdHJveWVkIiwidmFsIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImlzRGVsZXRlZCIsImNyZWF0ZSIsImFwcE5hbWUiLCJGaXJlYmFzZVNlcnZlckFwcEltcGwiLCJfc3VwZXIiLCJzZXJ2ZXJDb25maWciLCJhcHBJbXBsIiwiX3NlcnZlckNvbmZpZyIsIl9maW5hbGl6YXRpb25SZWdpc3RyeSIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiYXV0b21hdGljQ2xlYW51cCIsIl9yZWZDb3VudCIsImluY1JlZkNvdW50IiwicmVsZWFzZU9uRGVyZWYiLCJyZWdpc3RlclZlcnNpb24iLCJfX2V4dGVuZHMiLCJ0b0pTT04iLCJyZWdpc3RlciIsImRlY1JlZkNvdW50IiwiZGVsZXRlQXBwIiwicmF3Q29uZmlnIiwiU3RyaW5nIiwiZ2V0RGVmYXVsdEFwcENvbmZpZyIsImV4aXN0aW5nQXBwIiwiZGVlcEVxdWFsIiwiQ29tcG9uZW50Q29udGFpbmVyIiwiY29tcG9uZW50JDEiLCJuZXdBcHAiLCJfX2F3YWl0ZXIiLCJjbGVhbnVwUHJvdmlkZXJzIiwiX19nZW5lcmF0b3IiLCJsYWJlbCIsImRlbGV0ZSIsIlByb21pc2UiLCJhbGwiLCJzZW50IiwibGlicmFyeUtleU9yTmFtZSIsInZhcmlhbnQiLCJsaWJyYXJ5TWlzbWF0Y2giLCJtYXRjaCIsInZlcnNpb25NaXNtYXRjaCIsIndhcm5pbmciLCJwdXNoIiwid2FybiIsIkRCX05BTUUiLCJEQl9WRVJTSU9OIiwiU1RPUkVfTkFNRSIsImRiUHJvbWlzZSIsImdldERiUHJvbWlzZSIsIm9wZW5EQiIsInVwZ3JhZGUiLCJvbGRWZXJzaW9uIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJjYXRjaCIsIm9yaWdpbmFsRXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsInJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQiIsInR4IiwicmVzdWx0IiwiaWRiR2V0RXJyb3IiLCJ0cnlzIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsImNvbXB1dGVLZXkiLCJGaXJlYmFzZUVycm9yIiwid3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIiLCJoZWFydGJlYXRPYmplY3QiLCJwdXQiLCJIZWFydGJlYXRTZXJ2aWNlSW1wbCIsIl9oZWFydGJlYXRzQ2FjaGUiLCJfc3RvcmFnZSIsIkhlYXJ0YmVhdFN0b3JhZ2VJbXBsIiwiX2hlYXJ0YmVhdHNDYWNoZVByb21pc2UiLCJyZWFkIiwidGhlbiIsInBsYXRmb3JtTG9nZ2VyIiwiYWdlbnQiLCJkYXRlIiwiZ2V0VVRDRGF0ZVN0cmluZyIsImhlYXJ0YmVhdHMiLCJsYXN0U2VudEhlYXJ0YmVhdERhdGUiLCJzb21lIiwic2luZ2xlRGF0ZUhlYXJ0YmVhdCIsImhiVGltZXN0YW1wIiwiRGF0ZSIsInZhbHVlT2YiLCJub3ciLCJvdmVyd3JpdGUiLCJnZXRIZWFydGJlYXRzSGVhZGVyIiwiaGVhcnRiZWF0c1RvU2VuZCIsInVuc2VudEVudHJpZXMiLCJoZWFkZXJTdHJpbmciLCJsZW5ndGgiLCJoZWFydGJlYXRzQ2FjaGUiLCJtYXhTaXplIiwic2xpY2UiLCJfbG9vcF8xIiwiaGVhcnRiZWF0RW50cnkiLCJmaW5kIiwiaGIiLCJkYXRlcyIsImNvdW50Qnl0ZXMiLCJwb3AiLCJoZWFydGJlYXRzQ2FjaGVfMSIsImhlYXJ0YmVhdHNDYWNoZV8xXzEiLCJleHRyYWN0SGVhcnRiZWF0c0ZvckhlYWRlciIsImJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvSVNPU3RyaW5nIiwic3Vic3RyaW5nIiwiX2NhblVzZUluZGV4ZWREQlByb21pc2UiLCJydW5JbmRleGVkREJFbnZpcm9ubWVudENoZWNrIiwiaXNJbmRleGVkREJBdmFpbGFibGUiLCJ2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlIiwiaWRiSGVhcnRiZWF0T2JqZWN0IiwiaGVhcnRiZWF0c09iamVjdCIsImV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCIsImFkZCIsIl9fc3ByZWFkQXJyYXkiLCJfX3JlYWQiLCJTREtfVkVSU0lPTiIsIl9ERUZBVUxUX0VOVFJZX05BTUUiLCJfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQiLCJhZGRPck92ZXJ3cml0ZUNvbXBvbmVudCIsIl9jbGVhckNvbXBvbmVudHMiLCJjbGVhciIsIl9pc0ZpcmViYXNlU2VydmVyQXBwIiwic2V0dGluZ3MiLCJfcmVtb3ZlU2VydmljZUluc3RhbmNlIiwiaW5zdGFuY2VJZGVudGlmaWVyIiwiY2xlYXJJbnN0YW5jZSIsImdldEFwcCIsImdldEFwcHMiLCJBcnJheSIsImZyb20iLCJpbml0aWFsaXplU2VydmVyQXBwIiwiX3NlcnZlckFwcENvbmZpZyIsImFwcE9wdGlvbnMiLCJpc0Jyb3dzZXIiLCJpc1dlYldvcmtlciIsIm5hbWVPYmoiLCJzIiwibmFtZVN0cmluZyIsInJlZHVjZSIsImhhc2giLCJjIiwiTWF0aCIsImltdWwiLCJjaGFyQ29kZUF0Iiwib25Mb2ciLCJsb2dDYWxsYmFjayIsInNldFVzZXJMb2dIYW5kbGVyIiwic2V0TG9nTGV2ZWwiLCJsb2dMZXZlbCIsImluc3RhbmNlRmFjdG9yeSIsIm11bHRpcGxlSW5zdGFuY2VzIiwic2VydmljZVByb3BzIiwiaW5zdGFudGlhdGlvbk1vZGUiLCJvbkluc3RhbmNlQ3JlYXRlZCIsInNldEluc3RhbnRpYXRpb25Nb2RlIiwibW9kZSIsInNldE11bHRpcGxlSW5zdGFuY2VzIiwic2V0U2VydmljZVByb3BzIiwicHJvcHMiLCJzZXRJbnN0YW5jZUNyZWF0ZWRDYWxsYmFjayIsImNhbGxiYWNrIiwiUHJvdmlkZXIiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZXNEZWZlcnJlZCIsImluc3RhbmNlc09wdGlvbnMiLCJvbkluaXRDYWxsYmFja3MiLCJpZGVudGlmaWVyIiwibm9ybWFsaXplZElkZW50aWZpZXIiLCJub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIiLCJkZWZlcnJlZCIsIkRlZmVycmVkIiwiaXNJbml0aWFsaXplZCIsInNob3VsZEF1dG9Jbml0aWFsaXplIiwiaW5zdGFuY2UiLCJnZXRPckluaXRpYWxpemVTZXJ2aWNlIiwicmVzb2x2ZSIsInByb21pc2UiLCJFcnJvciIsInNldENvbXBvbmVudCIsImlzQ29tcG9uZW50RWFnZXIiLCJpbnN0YW5jZURlZmVycmVkIiwic2VydmljZXMiLCJJTlRFUk5BTCIsIl9kZWxldGUiLCJpc0NvbXBvbmVudFNldCIsImdldE9wdGlvbnMiLCJpbml0aWFsaXplIiwib3B0cyIsIm9uSW5pdCIsImV4aXN0aW5nQ2FsbGJhY2tzIiwiU2V0IiwiZXhpc3RpbmdJbnN0YW5jZSIsImludm9rZU9uSW5pdENhbGxiYWNrcyIsImVfMyIsImNhbGxiYWNrcyIsImNhbGxiYWNrc18xIiwiY2FsbGJhY2tzXzFfMSIsImVfM18xIiwicHJvdmlkZXJzIiwiYmxvb21CbG9iIiwid2ViY2hhbm5lbEJsb2IiLCJTIiwiVXNlciIsImNvbnN0cnVjdG9yIiwidWlkIiwiaXNBdXRoZW50aWNhdGVkIiwidG9LZXkiLCJpc0VxdWFsIiwiVU5BVVRIRU5USUNBVEVEIiwiR09PR0xFX0NSRURFTlRJQUxTIiwiRklSU1RfUEFSVFkiLCJNT0NLX1VTRVIiLCJiIiwiRCIsIl9fUFJJVkFURV9nZXRMb2dMZXZlbCIsIl9fUFJJVkFURV9sb2dEZWJ1ZyIsInQiLCJMb2dMZXZlbCIsIkRFQlVHIiwibiIsIl9fUFJJVkFURV9hcmdUb1N0cmluZyIsIl9fUFJJVkFURV9sb2dFcnJvciIsIkVSUk9SIiwiX19QUklWQVRFX2xvZ1dhcm4iLCJXQVJOIiwiZmFpbCIsIl9fUFJJVkFURV9oYXJkQXNzZXJ0IiwiX19QUklWQVRFX2RlYnVnQ2FzdCIsIkMiLCJPSyIsIkNBTkNFTExFRCIsIlVOS05PV04iLCJJTlZBTElEX0FSR1VNRU5UIiwiREVBRExJTkVfRVhDRUVERUQiLCJOT1RfRk9VTkQiLCJBTFJFQURZX0VYSVNUUyIsIlBFUk1JU1NJT05fREVOSUVEIiwiUkVTT1VSQ0VfRVhIQVVTVEVEIiwiRkFJTEVEX1BSRUNPTkRJVElPTiIsIkFCT1JURUQiLCJPVVRfT0ZfUkFOR0UiLCJVTklNUExFTUVOVEVEIiwiVU5BVkFJTEFCTEUiLCJEQVRBX0xPU1MiLCJGaXJlc3RvcmVFcnJvciIsInN1cGVyIiwiY29kZSIsIl9fUFJJVkFURV9EZWZlcnJlZCIsInJlamVjdCIsIl9fUFJJVkFURV9PQXV0aFRva2VuIiwidXNlciIsImhlYWRlcnMiLCJfX1BSSVZBVEVfRW1wdHlBdXRoQ3JlZGVudGlhbHNQcm92aWRlciIsImdldFRva2VuIiwiaW52YWxpZGF0ZVRva2VuIiwic3RhcnQiLCJlbnF1ZXVlUmV0cnlhYmxlIiwic2h1dGRvd24iLCJfX1BSSVZBVEVfRW11bGF0b3JBdXRoQ3JlZGVudGlhbHNQcm92aWRlciIsInRva2VuIiwiY2hhbmdlTGlzdGVuZXIiLCJfX1BSSVZBVEVfRmlyZWJhc2VBdXRoQ3JlZGVudGlhbHNQcm92aWRlciIsImN1cnJlbnRVc2VyIiwiaSIsImZvcmNlUmVmcmVzaCIsImF1dGgiLCJfX1BSSVZBVEVfZ3VhcmRlZENoYW5nZUxpc3RlbmVyIiwiciIsIm8iLCJ1IiwiX19QUklWQVRFX2F3YWl0TmV4dFRva2VuIiwiX19QUklWQVRFX3JlZ2lzdGVyQXV0aCIsImFkZEF1dGhUb2tlbkxpc3RlbmVyIiwic2V0VGltZW91dCIsImFjY2Vzc1Rva2VuIiwicmVtb3ZlQXV0aFRva2VuTGlzdGVuZXIiLCJnZXRVaWQiLCJfX1BSSVZBVEVfRmlyc3RQYXJ0eVRva2VuIiwibCIsImgiLCJQIiwiSSIsIlQiLCJfX1BSSVZBVEVfRmlyc3RQYXJ0eUF1dGhDcmVkZW50aWFsc1Byb3ZpZGVyIiwiQXBwQ2hlY2tUb2tlbiIsIl9fUFJJVkFURV9GaXJlYmFzZUFwcENoZWNrVG9rZW5Qcm92aWRlciIsIkEiLCJhcHBDaGVjayIsIlIiLCJvblRva2VuQ2hhbmdlZCIsIl9fUFJJVkFURV9yZWdpc3RlckFwcENoZWNrIiwiYWRkVG9rZW5MaXN0ZW5lciIsInJlbW92ZVRva2VuTGlzdGVuZXIiLCJfX1BSSVZBVEVfcmFuZG9tQnl0ZXMiLCJzZWxmIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJVaW50OEFycmF5IiwiZ2V0UmFuZG9tVmFsdWVzIiwiZmxvb3IiLCJyYW5kb20iLCJfX1BSSVZBVEVfQXV0b0lkIiwibmV3SWQiLCJjaGFyQXQiLCJfX1BSSVZBVEVfcHJpbWl0aXZlQ29tcGFyYXRvciIsIl9fUFJJVkFURV9hcnJheUVxdWFscyIsImV2ZXJ5IiwiX19QUklWQVRFX2ltbWVkaWF0ZVN1Y2Nlc3NvciIsIlRpbWVzdGFtcCIsInNlY29uZHMiLCJuYW5vc2Vjb25kcyIsImZyb21NaWxsaXMiLCJmcm9tRGF0ZSIsImdldFRpbWUiLCJ0b0RhdGUiLCJ0b01pbGxpcyIsIl9jb21wYXJlVG8iLCJwYWRTdGFydCIsIlNuYXBzaG90VmVyc2lvbiIsInRpbWVzdGFtcCIsImZyb21UaW1lc3RhbXAiLCJtaW4iLCJtYXgiLCJjb21wYXJlVG8iLCJ0b01pY3Jvc2Vjb25kcyIsInRvVGltZXN0YW1wIiwiQmFzZVBhdGgiLCJzZWdtZW50cyIsIm9mZnNldCIsImxlbiIsImNvbXBhcmF0b3IiLCJjaGlsZCIsImxpbWl0IiwiY29uc3RydWN0IiwicG9wRmlyc3QiLCJwb3BMYXN0IiwiZmlyc3RTZWdtZW50IiwibGFzdFNlZ21lbnQiLCJpc0VtcHR5IiwiaXNQcmVmaXhPZiIsImlzSW1tZWRpYXRlUGFyZW50T2YiLCJ0b0FycmF5IiwiUmVzb3VyY2VQYXRoIiwiY2Fub25pY2FsU3RyaW5nIiwidG9VcmlFbmNvZGVkU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZnJvbVN0cmluZyIsImluZGV4T2YiLCJzcGxpdCIsImVtcHR5UGF0aCIsInYiLCJGaWVsZFBhdGgkMSIsImlzVmFsaWRJZGVudGlmaWVyIiwidGVzdCIsImlzS2V5RmllbGQiLCJrZXlGaWVsZCIsImZyb21TZXJ2ZXJGb3JtYXQiLCJfX1BSSVZBVEVfYWRkQ3VycmVudFNlZ21lbnQiLCJEb2N1bWVudEtleSIsInBhdGgiLCJmcm9tUGF0aCIsImZyb21OYW1lIiwiZW1wdHkiLCJjb2xsZWN0aW9uR3JvdXAiLCJoYXNDb2xsZWN0aW9uSWQiLCJnZXRDb2xsZWN0aW9uR3JvdXAiLCJnZXRDb2xsZWN0aW9uUGF0aCIsImlzRG9jdW1lbnRLZXkiLCJmcm9tU2VnbWVudHMiLCJGaWVsZEluZGV4IiwiaW5kZXhJZCIsImZpZWxkcyIsImluZGV4U3RhdGUiLCJfX1BSSVZBVEVfZmllbGRJbmRleEdldEFycmF5U2VnbWVudCIsImtpbmQiLCJfX1BSSVZBVEVfZmllbGRJbmRleEdldERpcmVjdGlvbmFsU2VnbWVudHMiLCJfX1BSSVZBVEVfZmllbGRJbmRleFNlbWFudGljQ29tcGFyYXRvciIsIl9fUFJJVkFURV9pbmRleFNlZ21lbnRDb21wYXJhdG9yIiwiVU5LTk9XTl9JRCIsIkluZGV4U2VnbWVudCIsImZpZWxkUGF0aCIsIkluZGV4U3RhdGUiLCJzZXF1ZW5jZU51bWJlciIsIkluZGV4T2Zmc2V0IiwiX19QUklWQVRFX25ld0luZGV4T2Zmc2V0U3VjY2Vzc29yRnJvbVJlYWRUaW1lIiwiX19QUklWQVRFX25ld0luZGV4T2Zmc2V0RnJvbURvY3VtZW50IiwicmVhZFRpbWUiLCJrZXkiLCJkb2N1bWVudEtleSIsImxhcmdlc3RCYXRjaElkIiwiX19QUklWQVRFX2luZGV4T2Zmc2V0Q29tcGFyYXRvciIsIkYiLCJQZXJzaXN0ZW5jZVRyYW5zYWN0aW9uIiwib25Db21taXR0ZWRMaXN0ZW5lcnMiLCJhZGRPbkNvbW1pdHRlZExpc3RlbmVyIiwicmFpc2VPbkNvbW1pdHRlZEV2ZW50IiwiYXN5bmMiLCJfX1BSSVZBVEVfaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzIiwiUGVyc2lzdGVuY2VQcm9taXNlIiwibmV4dENhbGxiYWNrIiwiY2F0Y2hDYWxsYmFjayIsImlzRG9uZSIsImNhbGxiYWNrQXR0YWNoZWQiLCJ3cmFwRmFpbHVyZSIsIndyYXBTdWNjZXNzIiwidG9Qcm9taXNlIiwid3JhcFVzZXJGdW5jdGlvbiIsIndhaXRGb3IiLCJvciIsIm1hcEFycmF5IiwiXyIsImEiLCJkb1doaWxlIiwicHJvY2VzcyIsIl9fUFJJVkFURV9TaW1wbGVEYlRyYW5zYWN0aW9uIiwiYWN0aW9uIiwiYWJvcnRlZCIsIlYiLCJvbmNvbXBsZXRlIiwib25hYm9ydCIsIl9fUFJJVkFURV9JbmRleGVkRGJUcmFuc2FjdGlvbkVycm9yIiwib25lcnJvciIsIl9fUFJJVkFURV9jaGVja0ZvckFuZFJlcG9ydGlPU0Vycm9yIiwib3BlbiIsIm0iLCJhYm9ydCIsImciLCJjb21taXQiLCJzdG9yZSIsIl9fUFJJVkFURV9TaW1wbGVEYlN0b3JlIiwiX19QUklWQVRFX1NpbXBsZURiIiwicCIsImdldFVBIiwiX19QUklWQVRFX3dyYXBSZXF1ZXN0Iiwid2luZG93IiwiaW5kZXhlZERCIiwiZGVsZXRlRGF0YWJhc2UiLCJfX1BSSVZBVEVfZ2V0QW5kcm9pZFZlcnNpb24iLCJfX1BSSVZBVEVfZW52IiwiTnVtYmVyIiwiTSIsIm9uc3VjY2VzcyIsIm9uYmxvY2tlZCIsIm9udXBncmFkZW5lZWRlZCIsIk8iLCJOIiwib252ZXJzaW9uY2hhbmdlIiwiTCIsInJ1blRyYW5zYWN0aW9uIiwiY2xvc2UiLCJfX1BSSVZBVEVfSXRlcmF0aW9uQ29udHJvbGxlciIsIkIiLCJrIiwicSIsIksiLCJjdXJzb3IiLCIkIiwiX19QUklWQVRFX2lzSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvciIsIlUiLCJpbmRleCIsInJhbmdlIiwiVyIsIkciLCJqIiwiSCIsIkoiLCJZIiwicHJpbWFyeUtleSIsImNvbnRpbnVlIiwicmV2ZXJzZSIsIm9wZW5LZXlDdXJzb3IiLCJvcGVuQ3Vyc29yIiwiX19QUklWQVRFX0luZGV4QmFja2ZpbGxlclNjaGVkdWxlciIsImFzeW5jUXVldWUiLCJaIiwidGFzayIsIlgiLCJzdG9wIiwiY2FuY2VsIiwic3RhcnRlZCIsImVucXVldWVBZnRlckRlbGF5IiwiZWUiLCJfX1BSSVZBVEVfSW5kZXhCYWNrZmlsbGVyIiwibG9jYWxTdG9yZSIsInBlcnNpc3RlbmNlIiwidGUiLCJpbmRleE1hbmFnZXIiLCJnZXROZXh0Q29sbGVjdGlvbkdyb3VwVG9VcGRhdGUiLCJuZSIsImdldE1pbk9mZnNldEZyb21Db2xsZWN0aW9uR3JvdXAiLCJsb2NhbERvY3VtZW50cyIsImdldE5leHREb2N1bWVudHMiLCJjaGFuZ2VzIiwidXBkYXRlSW5kZXhFbnRyaWVzIiwicmUiLCJ1cGRhdGVDb2xsZWN0aW9uR3JvdXAiLCJzaXplIiwiYmF0Y2hJZCIsIl9fUFJJVkFURV9MaXN0ZW5TZXF1ZW5jZSIsInByZXZpb3VzVmFsdWUiLCJzZXF1ZW5jZU51bWJlckhhbmRsZXIiLCJpZSIsInNlIiwid3JpdGVTZXF1ZW5jZU51bWJlciIsIl9fUFJJVkFURV9pc051bGxPclVuZGVmaW5lZCIsIl9fUFJJVkFURV9pc05lZ2F0aXZlWmVybyIsImlzU2FmZUludGVnZXIiLCJpc0ludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIl9fUFJJVkFURV9lbmNvZGVSZXNvdXJjZVBhdGgiLCJfX1BSSVZBVEVfZW5jb2RlU2VwYXJhdG9yIiwiX19QUklWQVRFX2VuY29kZVNlZ21lbnQiLCJfX1BSSVZBVEVfZGVjb2RlUmVzb3VyY2VQYXRoIiwiX19QUklWQVRFX2xhc3RSZWFzb25hYmxlRXNjYXBlSW5kZXgiLCJvZSIsIngiLCJfX1BSSVZBVEVfbmV3RGJEb2N1bWVudE11dGF0aW9uUHJlZml4Rm9yUGF0aCIsIl9fUFJJVkFURV9uZXdEYkRvY3VtZW50TXV0YXRpb25LZXkiLCJRIiwieiIsIl9fUFJJVkFURV9JbmRleGVkRGJUcmFuc2FjdGlvbiIsImN1cnJlbnRTZXF1ZW5jZU51bWJlciIsIl9fUFJJVkFURV9nZXRTdG9yZSIsIl9fUFJJVkFURV9vYmplY3RTaXplIiwiaGFzT3duUHJvcGVydHkiLCJfX1BSSVZBVEVfbWFwVG9BcnJheSIsIlNvcnRlZE1hcCIsInJvb3QiLCJMTFJCTm9kZSIsIkVNUFRZIiwiaW5zZXJ0IiwiY29weSIsIkJMQUNLIiwibGVmdCIsInJpZ2h0IiwibWluS2V5IiwibWF4S2V5IiwiaW5vcmRlclRyYXZlcnNhbCIsInJldmVyc2VUcmF2ZXJzYWwiLCJnZXRJdGVyYXRvciIsIlNvcnRlZE1hcEl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JGcm9tIiwiZ2V0UmV2ZXJzZUl0ZXJhdG9yIiwiZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbSIsImlzUmV2ZXJzZSIsIm5vZGVTdGFjayIsImdldE5leHQiLCJoYXNOZXh0IiwicGVlayIsImNvbG9yIiwiUkVEIiwiZml4VXAiLCJyZW1vdmVNaW4iLCJpc1JlZCIsIm1vdmVSZWRMZWZ0Iiwicm90YXRlUmlnaHQiLCJtb3ZlUmVkUmlnaHQiLCJyb3RhdGVMZWZ0IiwiY29sb3JGbGlwIiwiY2hlY2tNYXhEZXB0aCIsImNoZWNrIiwicG93IiwiU29ydGVkU2V0IiwiZmlyc3QiLCJsYXN0IiwiZm9yRWFjaEluUmFuZ2UiLCJmb3JFYWNoV2hpbGUiLCJmaXJzdEFmdGVyT3JFcXVhbCIsIlNvcnRlZFNldEl0ZXJhdG9yIiwidW5pb25XaXRoIiwiaXRlciIsIl9fUFJJVkFURV9hZHZhbmNlSXRlcmF0b3IiLCJGaWVsZE1hc2siLCJzb3J0IiwiY292ZXJzIiwiX19QUklWQVRFX0Jhc2U2NERlY29kZUVycm9yIiwiYXJndW1lbnRzIiwiQnl0ZVN0cmluZyIsImJpbmFyeVN0cmluZyIsImZyb21CYXNlNjRTdHJpbmciLCJhdG9iIiwiRE9NRXhjZXB0aW9uIiwiZnJvbVVpbnQ4QXJyYXkiLCJmcm9tQ2hhckNvZGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsInRvQmFzZTY0IiwiYnRvYSIsInRvVWludDhBcnJheSIsImFwcHJveGltYXRlQnl0ZVNpemUiLCJFTVBUWV9CWVRFX1NUUklORyIsIlJlZ0V4cCIsIl9fUFJJVkFURV9ub3JtYWxpemVUaW1lc3RhbXAiLCJleGVjIiwic3Vic3RyIiwibmFub3MiLCJfX1BSSVZBVEVfbm9ybWFsaXplTnVtYmVyIiwiX19QUklWQVRFX25vcm1hbGl6ZUJ5dGVTdHJpbmciLCJfX1BSSVZBVEVfaXNTZXJ2ZXJUaW1lc3RhbXAiLCJtYXBWYWx1ZSIsIl9fdHlwZV9fIiwic3RyaW5nVmFsdWUiLCJfX1BSSVZBVEVfZ2V0UHJldmlvdXNWYWx1ZSIsIl9fcHJldmlvdXNfdmFsdWVfXyIsIl9fUFJJVkFURV9nZXRMb2NhbFdyaXRlVGltZSIsIl9fbG9jYWxfd3JpdGVfdGltZV9fIiwidGltZXN0YW1wVmFsdWUiLCJEYXRhYmFzZUluZm8iLCJkYXRhYmFzZUlkIiwicGVyc2lzdGVuY2VLZXkiLCJob3N0Iiwic3NsIiwiZm9yY2VMb25nUG9sbGluZyIsImF1dG9EZXRlY3RMb25nUG9sbGluZyIsImxvbmdQb2xsaW5nT3B0aW9ucyIsInVzZUZldGNoU3RyZWFtcyIsIkRhdGFiYXNlSWQiLCJkYXRhYmFzZSIsImlzRGVmYXVsdERhdGFiYXNlIiwibnVsbFZhbHVlIiwiX19QUklWQVRFX3R5cGVPcmRlciIsIl9fUFJJVkFURV9pc01heFZhbHVlIiwiX19QUklWQVRFX3ZhbHVlRXF1YWxzIiwiYm9vbGVhblZhbHVlIiwiYnl0ZXNWYWx1ZSIsInJlZmVyZW5jZVZhbHVlIiwiZ2VvUG9pbnRWYWx1ZSIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiaW50ZWdlclZhbHVlIiwiZG91YmxlVmFsdWUiLCJpc05hTiIsImFycmF5VmFsdWUiLCJfX1BSSVZBVEVfYXJyYXlWYWx1ZUNvbnRhaW5zIiwiX19QUklWQVRFX3ZhbHVlQ29tcGFyZSIsIl9fUFJJVkFURV9jb21wYXJlVGltZXN0YW1wcyIsImtleXMiLCJjYW5vbmljYWxJZCIsIl9fUFJJVkFURV9jYW5vbmlmeVZhbHVlIiwiX19QUklWQVRFX2VzdGltYXRlQnl0ZVNpemUiLCJfX1BSSVZBVEVfcmVmVmFsdWUiLCJpc0FycmF5IiwiX19QUklWQVRFX2lzTnVsbFZhbHVlIiwiX19QUklWQVRFX2lzTmFuVmFsdWUiLCJfX1BSSVZBVEVfaXNNYXBWYWx1ZSIsIl9fUFJJVkFURV9kZWVwQ2xvbmUiLCJhc3NpZ24iLCJfX1BSSVZBVEVfdmFsdWVzR2V0TG93ZXJCb3VuZCIsIk5hTiIsIl9fUFJJVkFURV92YWx1ZXNHZXRVcHBlckJvdW5kIiwiX19QUklWQVRFX2xvd2VyQm91bmRDb21wYXJlIiwiaW5jbHVzaXZlIiwiX19QUklWQVRFX3VwcGVyQm91bmRDb21wYXJlIiwiT2JqZWN0VmFsdWUiLCJmaWVsZCIsImdldEZpZWxkc01hcCIsInNldEFsbCIsImFwcGx5Q2hhbmdlcyIsImNsb25lIiwiX19QUklWQVRFX2V4dHJhY3RGaWVsZE1hc2siLCJNdXRhYmxlRG9jdW1lbnQiLCJkb2N1bWVudFR5cGUiLCJjcmVhdGVUaW1lIiwiZG9jdW1lbnRTdGF0ZSIsIm5ld0ludmFsaWREb2N1bWVudCIsIm5ld0ZvdW5kRG9jdW1lbnQiLCJuZXdOb0RvY3VtZW50IiwibmV3VW5rbm93bkRvY3VtZW50IiwiY29udmVydFRvRm91bmREb2N1bWVudCIsImNvbnZlcnRUb05vRG9jdW1lbnQiLCJjb252ZXJ0VG9Vbmtub3duRG9jdW1lbnQiLCJzZXRIYXNDb21taXR0ZWRNdXRhdGlvbnMiLCJzZXRIYXNMb2NhbE11dGF0aW9ucyIsInNldFJlYWRUaW1lIiwiaGFzTG9jYWxNdXRhdGlvbnMiLCJoYXNDb21taXR0ZWRNdXRhdGlvbnMiLCJoYXNQZW5kaW5nV3JpdGVzIiwiaXNWYWxpZERvY3VtZW50IiwiaXNGb3VuZERvY3VtZW50IiwiaXNOb0RvY3VtZW50IiwiaXNVbmtub3duRG9jdW1lbnQiLCJtdXRhYmxlQ29weSIsIkJvdW5kIiwicG9zaXRpb24iLCJfX1BSSVZBVEVfYm91bmRDb21wYXJlVG9Eb2N1bWVudCIsImRpciIsIl9fUFJJVkFURV9ib3VuZEVxdWFscyIsIk9yZGVyQnkiLCJfX1BSSVZBVEVfb3JkZXJCeUVxdWFscyIsIkZpbHRlciIsIkZpZWxkRmlsdGVyIiwib3AiLCJjcmVhdGVLZXlGaWVsZEluRmlsdGVyIiwiX19QUklWQVRFX0tleUZpZWxkRmlsdGVyIiwiX19QUklWQVRFX0FycmF5Q29udGFpbnNGaWx0ZXIiLCJfX1BSSVZBVEVfSW5GaWx0ZXIiLCJfX1BSSVZBVEVfTm90SW5GaWx0ZXIiLCJfX1BSSVZBVEVfQXJyYXlDb250YWluc0FueUZpbHRlciIsIl9fUFJJVkFURV9LZXlGaWVsZEluRmlsdGVyIiwiX19QUklWQVRFX0tleUZpZWxkTm90SW5GaWx0ZXIiLCJtYXRjaGVzIiwibWF0Y2hlc0NvbXBhcmlzb24iLCJpc0luZXF1YWxpdHkiLCJnZXRGbGF0dGVuZWRGaWx0ZXJzIiwiZ2V0RmlsdGVycyIsIkNvbXBvc2l0ZUZpbHRlciIsImZpbHRlcnMiLCJhZSIsIl9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJJc0Nvbmp1bmN0aW9uIiwiX19QUklWQVRFX2NvbXBvc2l0ZUZpbHRlcklzRGlzanVuY3Rpb24iLCJfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNGbGF0Q29uanVuY3Rpb24iLCJfX1BSSVZBVEVfY29tcG9zaXRlRmlsdGVySXNGbGF0IiwiX19QUklWQVRFX2Nhbm9uaWZ5RmlsdGVyIiwiX19QUklWQVRFX2ZpbHRlckVxdWFscyIsIl9fUFJJVkFURV9jb21wb3NpdGVGaWx0ZXJXaXRoQWRkZWRGaWx0ZXJzIiwiX19QUklWQVRFX3N0cmluZ2lmeUZpbHRlciIsIl9fUFJJVkFURV9leHRyYWN0RG9jdW1lbnRLZXlzRnJvbUFycmF5VmFsdWUiLCJfX1BSSVZBVEVfVGFyZ2V0SW1wbCIsIm9yZGVyQnkiLCJzdGFydEF0IiwiZW5kQXQiLCJ1ZSIsIl9fUFJJVkFURV9uZXdUYXJnZXQiLCJfX1BSSVZBVEVfY2Fub25pZnlUYXJnZXQiLCJfX1BSSVZBVEVfdGFyZ2V0RXF1YWxzIiwiX19QUklWQVRFX3RhcmdldElzRG9jdW1lbnRUYXJnZXQiLCJfX1BSSVZBVEVfdGFyZ2V0R2V0RmllbGRGaWx0ZXJzRm9yUGF0aCIsIl9fUFJJVkFURV90YXJnZXRHZXRBc2NlbmRpbmdCb3VuZCIsIl9fUFJJVkFURV90YXJnZXRHZXREZXNjZW5kaW5nQm91bmQiLCJfX1BSSVZBVEVfUXVlcnlJbXBsIiwiZXhwbGljaXRPcmRlckJ5IiwibGltaXRUeXBlIiwiY2UiLCJsZSIsImhlIiwiX19QUklWQVRFX25ld1F1ZXJ5IiwiX19QUklWQVRFX25ld1F1ZXJ5Rm9yUGF0aCIsIl9fUFJJVkFURV9xdWVyeU1hdGNoZXNBbGxEb2N1bWVudHMiLCJfX1BSSVZBVEVfaXNDb2xsZWN0aW9uR3JvdXBRdWVyeSIsIl9fUFJJVkFURV9xdWVyeU5vcm1hbGl6ZWRPcmRlckJ5IiwiX19QUklWQVRFX3F1ZXJ5VG9UYXJnZXQiLCJfX1BSSVZBVEVfX3F1ZXJ5VG9UYXJnZXQiLCJfX1BSSVZBVEVfcXVlcnlUb0FnZ3JlZ2F0ZVRhcmdldCIsIl9fUFJJVkFURV9xdWVyeVdpdGhBZGRlZEZpbHRlciIsIl9fUFJJVkFURV9xdWVyeVdpdGhMaW1pdCIsIl9fUFJJVkFURV9xdWVyeUVxdWFscyIsIl9fUFJJVkFURV9jYW5vbmlmeVF1ZXJ5IiwiX19QUklWQVRFX3N0cmluZ2lmeVF1ZXJ5IiwiX19QUklWQVRFX3F1ZXJ5TWF0Y2hlcyIsIl9fUFJJVkFURV9xdWVyeUNvbGxlY3Rpb25Hcm91cCIsIl9fUFJJVkFURV9uZXdRdWVyeUNvbXBhcmF0b3IiLCJfX1BSSVZBVEVfY29tcGFyZURvY3MiLCJPYmplY3RNYXAiLCJtYXBLZXlGbiIsImVxdWFsc0ZuIiwiaW5uZXIiLCJpbm5lclNpemUiLCJzcGxpY2UiLCJfX1BSSVZBVEVfbXV0YWJsZURvY3VtZW50TWFwIiwiZG9jdW1lbnRNYXAiLCJfX1BSSVZBVEVfY29udmVydE92ZXJsYXllZERvY3VtZW50TWFwVG9Eb2N1bWVudE1hcCIsIm92ZXJsYXllZERvY3VtZW50IiwiX19QUklWQVRFX25ld092ZXJsYXlNYXAiLCJfX1BSSVZBVEVfbmV3RG9jdW1lbnRLZXlNYXAiLCJfX1BSSVZBVEVfbmV3TXV0YXRpb25NYXAiLCJfX1BSSVZBVEVfZG9jdW1lbnRLZXlTZXQiLCJfX1BSSVZBVEVfdGFyZ2V0SWRTZXQiLCJfX1BSSVZBVEVfdG9Eb3VibGUiLCJ1c2VQcm90bzNKc29uIiwiX19QUklWQVRFX3RvSW50ZWdlciIsInRvTnVtYmVyIiwiVHJhbnNmb3JtT3BlcmF0aW9uIiwiX19QUklWQVRFX2FwcGx5VHJhbnNmb3JtT3BlcmF0aW9uVG9Mb2NhbFZpZXciLCJfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtIiwiX19QUklWQVRFX0FycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24iLCJfX1BSSVZBVEVfYXBwbHlBcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uIiwiX19QUklWQVRFX0FycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uIiwiX19QUklWQVRFX2FwcGx5QXJyYXlSZW1vdmVUcmFuc2Zvcm1PcGVyYXRpb24iLCJfX1BSSVZBVEVfY29tcHV0ZVRyYW5zZm9ybU9wZXJhdGlvbkJhc2VWYWx1ZSIsImFzTnVtYmVyIiwiUGUiLCJzZXJpYWxpemVyIiwiX19QUklWQVRFX2FwcGx5VHJhbnNmb3JtT3BlcmF0aW9uVG9SZW1vdGVEb2N1bWVudCIsIl9fUFJJVkFURV9OdW1lcmljSW5jcmVtZW50VHJhbnNmb3JtT3BlcmF0aW9uIiwiZWxlbWVudHMiLCJfX1BSSVZBVEVfY29lcmNlZEZpZWxkVmFsdWVzQXJyYXkiLCJGaWVsZFRyYW5zZm9ybSIsInRyYW5zZm9ybSIsIk11dGF0aW9uUmVzdWx0IiwidHJhbnNmb3JtUmVzdWx0cyIsIlByZWNvbmRpdGlvbiIsInVwZGF0ZVRpbWUiLCJub25lIiwiaXNOb25lIiwiX19QUklWQVRFX3ByZWNvbmRpdGlvbklzVmFsaWRGb3JEb2N1bWVudCIsIk11dGF0aW9uIiwiX19QUklWQVRFX2NhbGN1bGF0ZU92ZXJsYXlNdXRhdGlvbiIsIl9fUFJJVkFURV9EZWxldGVNdXRhdGlvbiIsIl9fUFJJVkFURV9TZXRNdXRhdGlvbiIsIl9fUFJJVkFURV9QYXRjaE11dGF0aW9uIiwiX19QUklWQVRFX211dGF0aW9uQXBwbHlUb1JlbW90ZURvY3VtZW50IiwiX19QUklWQVRFX3NlcnZlclRyYW5zZm9ybVJlc3VsdHMiLCJmaWVsZFRyYW5zZm9ybXMiLCJwcmVjb25kaXRpb24iLCJfX1BSSVZBVEVfZ2V0UGF0Y2giLCJfX1BSSVZBVEVfbXV0YXRpb25BcHBseVRvTG9jYWxWaWV3IiwiX19QUklWQVRFX2xvY2FsVHJhbnNmb3JtUmVzdWx0cyIsImZpZWxkTWFzayIsIl9fUFJJVkFURV9tdXRhdGlvbkV4dHJhY3RCYXNlVmFsdWUiLCJfX1BSSVZBVEVfbXV0YXRpb25FcXVhbHMiLCJfX1BSSVZBVEVfZmllbGRUcmFuc2Zvcm1FcXVhbHMiLCJnZXRGaWVsZE1hc2siLCJfX1BSSVZBVEVfVmVyaWZ5TXV0YXRpb24iLCJNdXRhdGlvbkJhdGNoIiwibG9jYWxXcml0ZVRpbWUiLCJiYXNlTXV0YXRpb25zIiwibXV0YXRpb25zIiwiYXBwbHlUb1JlbW90ZURvY3VtZW50IiwibXV0YXRpb25SZXN1bHRzIiwiYXBwbHlUb0xvY2FsVmlldyIsImFwcGx5VG9Mb2NhbERvY3VtZW50U2V0IiwibXV0YXRlZEZpZWxkcyIsIk11dGF0aW9uQmF0Y2hSZXN1bHQiLCJiYXRjaCIsImNvbW1pdFZlcnNpb24iLCJkb2NWZXJzaW9ucyIsIk92ZXJsYXkiLCJtdXRhdGlvbiIsImdldEtleSIsIl9fUFJJVkFURV9BZ2dyZWdhdGVJbXBsIiwiYWxpYXMiLCJhZ2dyZWdhdGVUeXBlIiwiRXhpc3RlbmNlRmlsdGVyIiwidW5jaGFuZ2VkTmFtZXMiLCJfX1BSSVZBVEVfaXNQZXJtYW5lbnRFcnJvciIsIl9fUFJJVkFURV9tYXBDb2RlRnJvbVJwY0NvZGUiLCJfX1BSSVZBVEVfbmV3VGV4dEVuY29kZXIiLCJUZXh0RW5jb2RlciIsIkludGVnZXIiLCJfX1BSSVZBVEVfZ2V0TWQ1SGFzaFZhbHVlIiwiZW5jb2RlIiwiTWQ1IiwidXBkYXRlIiwiZGlnZXN0IiwiX19QUklWQVRFX2dldDY0Qml0VWludHMiLCJEYXRhVmlldyIsImJ1ZmZlciIsImdldFVpbnQzMiIsIkJsb29tRmlsdGVyIiwiYml0bWFwIiwicGFkZGluZyIsImhhc2hDb3VudCIsIl9fUFJJVkFURV9CbG9vbUZpbHRlckVycm9yIiwiSWUiLCJUZSIsImZyb21OdW1iZXIiLCJFZSIsIm11bHRpcGx5IiwiY29tcGFyZSIsImdldEJpdHMiLCJtb2R1bG8iLCJkZSIsIm1pZ2h0Q29udGFpbiIsImNlaWwiLCJBZSIsIlJlbW90ZUV2ZW50Iiwic25hcHNob3RWZXJzaW9uIiwidGFyZ2V0Q2hhbmdlcyIsInRhcmdldE1pc21hdGNoZXMiLCJkb2N1bWVudFVwZGF0ZXMiLCJyZXNvbHZlZExpbWJvRG9jdW1lbnRzIiwiY3JlYXRlU3ludGhlc2l6ZWRSZW1vdGVFdmVudEZvckN1cnJlbnRDaGFuZ2UiLCJUYXJnZXRDaGFuZ2UiLCJjcmVhdGVTeW50aGVzaXplZFRhcmdldENoYW5nZUZvckN1cnJlbnRDaGFuZ2UiLCJyZXN1bWVUb2tlbiIsImN1cnJlbnQiLCJhZGRlZERvY3VtZW50cyIsIm1vZGlmaWVkRG9jdW1lbnRzIiwicmVtb3ZlZERvY3VtZW50cyIsIl9fUFJJVkFURV9Eb2N1bWVudFdhdGNoQ2hhbmdlIiwiUmUiLCJyZW1vdmVkVGFyZ2V0SWRzIiwiVmUiLCJfX1BSSVZBVEVfRXhpc3RlbmNlRmlsdGVyQ2hhbmdlIiwidGFyZ2V0SWQiLCJtZSIsIl9fUFJJVkFURV9XYXRjaFRhcmdldENoYW5nZSIsInN0YXRlIiwidGFyZ2V0SWRzIiwiY2F1c2UiLCJfX1BSSVZBVEVfVGFyZ2V0U3RhdGUiLCJmZSIsImdlIiwiX19QUklWQVRFX3NuYXBzaG90Q2hhbmdlc01hcCIsInBlIiwieWUiLCJ3ZSIsIlNlIiwiYmUiLCJEZSIsIkNlIiwidmUiLCJGZSIsIk1lIiwieGUiLCJPZSIsIk5lIiwiX19QUklWQVRFX1dhdGNoQ2hhbmdlQWdncmVnYXRvciIsIkxlIiwiQmUiLCJrZSIsInFlIiwiX19QUklWQVRFX2RvY3VtZW50VGFyZ2V0TWFwIiwiUWUiLCJLZSIsIiRlIiwiVWUiLCJXZSIsImZvckVhY2hUYXJnZXQiLCJHZSIsInplIiwicmVtb3ZlVGFyZ2V0IiwiamUiLCJIZSIsIkplIiwiWWUiLCJaZSIsIlhlIiwiZXQiLCJsb2NhbENhY2hlQ291bnQiLCJleGlzdGVuY2VGaWx0ZXJDb3VudCIsImJsb29tRmlsdGVyIiwiYXBwbGllZCIsImJpdG1hcExlbmd0aCIsImJpdHMiLCJ0dCIsIm50IiwiZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCIsInJ0IiwiaXQiLCJwdXJwb3NlIiwic3QiLCJvdCIsImFzYyIsImRlc2MiLCJpbiIsImFuZCIsIkpzb25Qcm90b1NlcmlhbGl6ZXIiLCJfX1BSSVZBVEVfdG9JbnQzMlByb3RvIiwiX19QUklWQVRFX3RvQnl0ZXMiLCJfX1BSSVZBVEVfdG9WZXJzaW9uIiwiX19QUklWQVRFX2Zyb21WZXJzaW9uIiwiX19QUklWQVRFX3RvUmVzb3VyY2VOYW1lIiwiX19QUklWQVRFX3RvUmVzb3VyY2VQYXRoIiwiX19QUklWQVRFX2Zyb21SZXNvdXJjZU5hbWUiLCJfX1BSSVZBVEVfaXNWYWxpZFJlc291cmNlTmFtZSIsIl9fUFJJVkFURV90b05hbWUiLCJfX1BSSVZBVEVfZXh0cmFjdExvY2FsUGF0aEZyb21SZXNvdXJjZU5hbWUiLCJfX1BSSVZBVEVfdG9RdWVyeVBhdGgiLCJfX1BSSVZBVEVfZnJvbVF1ZXJ5UGF0aCIsIl9fUFJJVkFURV9nZXRFbmNvZGVkRGF0YWJhc2VJZCIsIl9fUFJJVkFURV90b011dGF0aW9uRG9jdW1lbnQiLCJfX1BSSVZBVEVfZnJvbURvY3VtZW50IiwidG9NdXRhdGlvbiIsInVwZGF0ZU1hc2siLCJfX1BSSVZBVEVfdG9Eb2N1bWVudE1hc2siLCJ2ZXJpZnkiLCJ1cGRhdGVUcmFuc2Zvcm1zIiwic2V0VG9TZXJ2ZXJWYWx1ZSIsImFwcGVuZE1pc3NpbmdFbGVtZW50cyIsInJlbW92ZUFsbEZyb21BcnJheSIsImluY3JlbWVudCIsImN1cnJlbnREb2N1bWVudCIsIl9fUFJJVkFURV9mcm9tTXV0YXRpb24iLCJmaWVsZFBhdGhzIiwiX19QUklWQVRFX3RvRG9jdW1lbnRzVGFyZ2V0IiwiZG9jdW1lbnRzIiwiX19QUklWQVRFX3RvUXVlcnlUYXJnZXQiLCJzdHJ1Y3R1cmVkUXVlcnkiLCJjb2xsZWN0aW9uSWQiLCJhbGxEZXNjZW5kYW50cyIsInBhcmVudCIsIl9fUFJJVkFURV90b0ZpbHRlciIsIndoZXJlIiwiX19QUklWQVRFX3RvRmllbGRQYXRoUmVmZXJlbmNlIiwiZGlyZWN0aW9uIiwiX19QUklWQVRFX3RvRGlyZWN0aW9uIiwiYmVmb3JlIiwiX3QiLCJfX1BSSVZBVEVfdG9SdW5BZ2dyZWdhdGlvblF1ZXJ5UmVxdWVzdCIsImF2ZyIsInN1bSIsInJlcXVlc3QiLCJzdHJ1Y3R1cmVkQWdncmVnYXRpb25RdWVyeSIsImFnZ3JlZ2F0aW9ucyIsInV0IiwiX19QUklWQVRFX2NvbnZlcnRRdWVyeVRhcmdldFRvUXVlcnkiLCJfX1BSSVZBVEVfZnJvbUZpbHRlciIsIl9fUFJJVkFURV9mcm9tRmllbGRQYXRoUmVmZXJlbmNlIiwidW5hcnlGaWx0ZXIiLCJmaWVsZEZpbHRlciIsImNvbXBvc2l0ZUZpbHRlciIsIl9fUFJJVkFURV90b09wZXJhdG9yTmFtZSIsIl9fUFJJVkFURV90b0NvbXBvc2l0ZU9wZXJhdG9yTmFtZSIsIlRhcmdldERhdGEiLCJsYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uIiwiZXhwZWN0ZWRDb3VudCIsIndpdGhTZXF1ZW5jZU51bWJlciIsIndpdGhSZXN1bWVUb2tlbiIsIndpdGhFeHBlY3RlZENvdW50Iiwid2l0aExhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24iLCJfX1BSSVZBVEVfTG9jYWxTZXJpYWxpemVyIiwiY3QiLCJfX1BSSVZBVEVfdG9EYlJlbW90ZURvY3VtZW50IiwicHJlZml4UGF0aCIsImRvY3VtZW50SWQiLCJfX1BSSVZBVEVfdG9EYlRpbWVzdGFtcEtleSIsIm5vRG9jdW1lbnQiLCJfX1BSSVZBVEVfdG9EYlRpbWVzdGFtcCIsInVua25vd25Eb2N1bWVudCIsIl9fUFJJVkFURV9mcm9tRGJUaW1lc3RhbXAiLCJfX1BSSVZBVEVfZnJvbURiTXV0YXRpb25CYXRjaCIsImxvY2FsV3JpdGVUaW1lTXMiLCJfX1BSSVZBVEVfZnJvbURiVGFyZ2V0IiwicXVlcnkiLCJsYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIiLCJfX1BSSVZBVEVfdG9EYlRhcmdldCIsIl9fUFJJVkFURV9mcm9tQnVuZGxlZFF1ZXJ5IiwiX19QUklWQVRFX2Zyb21EYkRvY3VtZW50T3ZlcmxheSIsIm92ZXJsYXlNdXRhdGlvbiIsIl9fUFJJVkFURV90b0RiRG9jdW1lbnRPdmVybGF5S2V5IiwiX19QUklWQVRFX3RvRGJJbmRleFN0YXRlIiwiX19QUklWQVRFX0luZGV4ZWREYkJ1bmRsZUNhY2hlIiwiZ2V0QnVuZGxlTWV0YWRhdGEiLCJfX1BSSVZBVEVfYnVuZGxlc1N0b3JlIiwiaWQiLCJidW5kbGVJZCIsInNhdmVCdW5kbGVNZXRhZGF0YSIsImdldE5hbWVkUXVlcnkiLCJfX1BSSVZBVEVfbmFtZWRRdWVyaWVzU3RvcmUiLCJidW5kbGVkUXVlcnkiLCJzYXZlTmFtZWRRdWVyeSIsIl9fUFJJVkFURV9JbmRleGVkRGJEb2N1bWVudE92ZXJsYXlDYWNoZSIsInVzZXJJZCIsImx0IiwiZ2V0T3ZlcmxheSIsIl9fUFJJVkFURV9kb2N1bWVudE92ZXJsYXlTdG9yZSIsImdldE92ZXJsYXlzIiwic2F2ZU92ZXJsYXlzIiwiaHQiLCJyZW1vdmVPdmVybGF5c0ZvckJhdGNoSWQiLCJJREJLZXlSYW5nZSIsImJvdW5kIiwiZ2V0T3ZlcmxheXNGb3JDb2xsZWN0aW9uIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJnZXRPdmVybGF5c0ZvckNvbGxlY3Rpb25Hcm91cCIsImNvbGxlY3Rpb25QYXRoIiwiX19QUklWQVRFX0ZpcmVzdG9yZUluZGV4VmFsdWVXcml0ZXIiLCJQdCIsIkl0IiwiVHQiLCJFdCIsImR0IiwiQXQiLCJSdCIsIlZ0IiwiZnQiLCJndCIsInl0Iiwid3QiLCJTdCIsIl9fUFJJVkFURV9udW1iZXJPZkxlYWRpbmdaZXJvc0luQnl0ZSIsIl9fUFJJVkFURV91bnNpZ25lZE51bUxlbmd0aCIsImJ0IiwiX19QUklWQVRFX09yZGVyZWRDb2RlV3JpdGVyIiwiRHQiLCJDdCIsInZ0IiwiRnQiLCJNdCIsInh0IiwiT3QiLCJjb2RlUG9pbnRBdCIsIk50IiwiTHQiLCJCdCIsImt0IiwicXQiLCJRdCIsIkt0IiwiJHQiLCJVdCIsInJlc2V0Iiwic2VlZCIsIld0IiwiQXJyYXlCdWZmZXIiLCJzZXRGbG9hdDY0IiwiX19QUklWQVRFX0FzY2VuZGluZ0luZGV4Qnl0ZUVuY29kZXIiLCJHdCIsIl9fUFJJVkFURV9EZXNjZW5kaW5nSW5kZXhCeXRlRW5jb2RlciIsIl9fUFJJVkFURV9JbmRleEJ5dGVFbmNvZGVyIiwienQiLCJqdCIsIkh0IiwiX19QUklWQVRFX0luZGV4RW50cnkiLCJkaXJlY3Rpb25hbFZhbHVlIiwiSnQiLCJfX1BSSVZBVEVfaW5kZXhFbnRyeUNvbXBhcmF0b3IiLCJfX1BSSVZBVEVfY29tcGFyZUJ5dGVBcnJheXMiLCJfX1BSSVZBVEVfVGFyZ2V0SW5kZXhNYXRjaGVyIiwiWXQiLCJadCIsIlh0IiwiZW4iLCJ0biIsIm5uIiwicm4iLCJzbiIsIm9uIiwiX19QUklWQVRFX2NvbXB1dGVJbkV4cGFuc2lvbiIsIl9fUFJJVkFURV9nZXREbmZUZXJtcyIsIl9fUFJJVkFURV9jb21wdXRlRGlzdHJpYnV0ZWROb3JtYWxGb3JtIiwiX19QUklWQVRFX2lzRGlzanVuY3RpdmVOb3JtYWxGb3JtIiwiX19QUklWQVRFX2lzU2luZ2xlRmllbGRGaWx0ZXIiLCJfX1BSSVZBVEVfaXNGbGF0Q29uanVuY3Rpb24iLCJfX1BSSVZBVEVfYXBwbHlBc3NvY2lhdGlvbiIsIl9fUFJJVkFURV9hcHBseURpc3RyaWJ1dGlvbiIsIl9fUFJJVkFURV9hcHBseURpc3RyaWJ1dGlvbkZpZWxkQW5kQ29tcG9zaXRlRmlsdGVycyIsIl9fUFJJVkFURV9NZW1vcnlJbmRleE1hbmFnZXIiLCJfbiIsIl9fUFJJVkFURV9NZW1vcnlDb2xsZWN0aW9uUGFyZW50SW5kZXgiLCJhZGRUb0NvbGxlY3Rpb25QYXJlbnRJbmRleCIsImdldENvbGxlY3Rpb25QYXJlbnRzIiwiZ2V0RW50cmllcyIsImFkZEZpZWxkSW5kZXgiLCJkZWxldGVGaWVsZEluZGV4IiwiZGVsZXRlQWxsRmllbGRJbmRleGVzIiwiY3JlYXRlVGFyZ2V0SW5kZXhlcyIsImdldERvY3VtZW50c01hdGNoaW5nVGFyZ2V0IiwiZ2V0SW5kZXhUeXBlIiwiZ2V0RmllbGRJbmRleGVzIiwiZ2V0TWluT2Zmc2V0IiwiX19QUklWQVRFX0luZGV4ZWREYkluZGV4TWFuYWdlciIsImFuIiwidW4iLCJfX1BSSVZBVEVfY29sbGVjdGlvblBhcmVudHNTdG9yZSIsIl9fUFJJVkFURV9pbmRleENvbmZpZ3VyYXRpb25TdG9yZSIsIl9fUFJJVkFURV9pbmRleFN0YXRlU3RvcmUiLCJfX1BSSVZBVEVfaW5kZXhFbnRyaWVzU3RvcmUiLCJjbiIsImxuIiwiaG4iLCJQbiIsIkluIiwiVG4iLCJFbiIsImRuIiwiY3JlYXRlUmFuZ2UiLCJBbiIsIlJuIiwiVm4iLCJtbiIsImZuIiwiZ24iLCJwbiIsInluIiwid24iLCJTbiIsIm9yZGVyZWREb2N1bWVudEtleSIsImJuIiwib25seSIsInVwcGVyQm91bmQiLCJEbiIsIl9fUFJJVkFURV9nZXRNaW5PZmZzZXRGcm9tRmllbGRJbmRleGVzIiwiZGlkUnVuIiwic2VxdWVuY2VOdW1iZXJzQ29sbGVjdGVkIiwidGFyZ2V0c1JlbW92ZWQiLCJkb2N1bWVudHNSZW1vdmVkIiwiTHJ1UGFyYW1zIiwiY2FjaGVTaXplQ29sbGVjdGlvblRocmVzaG9sZCIsInBlcmNlbnRpbGVUb0NvbGxlY3QiLCJtYXhpbXVtU2VxdWVuY2VOdW1iZXJzVG9Db2xsZWN0Iiwid2l0aENhY2hlU2l6ZSIsIkRFRkFVTFRfQ09MTEVDVElPTl9QRVJDRU5USUxFIiwiREVGQVVMVF9NQVhfU0VRVUVOQ0VfTlVNQkVSU19UT19DT0xMRUNUIiwicmVtb3ZlTXV0YXRpb25CYXRjaCIsIl9fUFJJVkFURV9kYkRvY3VtZW50U2l6ZSIsIkRFRkFVTFQiLCJESVNBQkxFRCIsIl9fUFJJVkFURV9JbmRleGVkRGJNdXRhdGlvblF1ZXVlIiwicmVmZXJlbmNlRGVsZWdhdGUiLCJDbiIsImNoZWNrRW1wdHkiLCJORUdBVElWRV9JTkZJTklUWSIsIl9fUFJJVkFURV9tdXRhdGlvbnNTdG9yZSIsImFkZE11dGF0aW9uQmF0Y2giLCJfX1BSSVZBVEVfZG9jdW1lbnRNdXRhdGlvbnNTdG9yZSIsImxvb2t1cE11dGF0aW9uQmF0Y2giLCJ2biIsImdldE5leHRNdXRhdGlvbkJhdGNoQWZ0ZXJCYXRjaElkIiwibG93ZXJCb3VuZCIsImdldEhpZ2hlc3RVbmFja25vd2xlZGdlZEJhdGNoSWQiLCJnZXRBbGxNdXRhdGlvbkJhdGNoZXMiLCJnZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdEb2N1bWVudEtleSIsImdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyIsIkZuIiwiZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nUXVlcnkiLCJNbiIsIm1hcmtQb3RlbnRpYWxseU9ycGhhbmVkIiwicGVyZm9ybUNvbnNpc3RlbmN5Q2hlY2siLCJjb250YWluc0tleSIsIl9fUFJJVkFURV9tdXRhdGlvblF1ZXVlQ29udGFpbnNLZXkiLCJ4biIsIl9fUFJJVkFURV9tdXRhdGlvblF1ZXVlc1N0b3JlIiwibGFzdEFja25vd2xlZGdlZEJhdGNoSWQiLCJsYXN0U3RyZWFtVG9rZW4iLCJfX1BSSVZBVEVfVGFyZ2V0SWRHZW5lcmF0b3IiLCJPbiIsIk5uIiwiTG4iLCJfX1BSSVZBVEVfSW5kZXhlZERiVGFyZ2V0Q2FjaGUiLCJhbGxvY2F0ZVRhcmdldElkIiwiQm4iLCJoaWdoZXN0VGFyZ2V0SWQiLCJrbiIsImdldExhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24iLCJsYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uIiwiZ2V0SGlnaGVzdFNlcXVlbmNlTnVtYmVyIiwiaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyIiwic2V0VGFyZ2V0c01ldGFkYXRhIiwiYWRkVGFyZ2V0RGF0YSIsInFuIiwidGFyZ2V0Q291bnQiLCJRbiIsInVwZGF0ZVRhcmdldERhdGEiLCJyZW1vdmVUYXJnZXREYXRhIiwicmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQiLCJfX1BSSVZBVEVfdGFyZ2V0c1N0b3JlIiwicmVtb3ZlVGFyZ2V0cyIsIl9fUFJJVkFURV9nbG9iYWxUYXJnZXRTdG9yZSIsImdldFRhcmdldENvdW50IiwiZ2V0VGFyZ2V0RGF0YSIsImFkZE1hdGNoaW5nS2V5cyIsIl9fUFJJVkFURV9kb2N1bWVudFRhcmdldFN0b3JlIiwiYWRkUmVmZXJlbmNlIiwicmVtb3ZlTWF0Y2hpbmdLZXlzIiwicmVtb3ZlUmVmZXJlbmNlIiwiZ2V0TWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQiLCJfX1BSSVZBVEVfYnVmZmVyRW50cnlDb21wYXJhdG9yIiwiX19QUklWQVRFX1JvbGxpbmdTZXF1ZW5jZU51bWJlckJ1ZmZlciIsIktuIiwiJG4iLCJVbiIsIlduIiwibWF4VmFsdWUiLCJfX1BSSVZBVEVfTHJ1U2NoZWR1bGVyIiwiZ2FyYmFnZUNvbGxlY3RvciIsIkduIiwicGFyYW1zIiwiem4iLCJjb2xsZWN0R2FyYmFnZSIsIl9fUFJJVkFURV9McnVHYXJiYWdlQ29sbGVjdG9ySW1wbCIsImpuIiwiY2FsY3VsYXRlVGFyZ2V0Q291bnQiLCJIbiIsIm50aFNlcXVlbmNlTnVtYmVyIiwiSm4iLCJyZW1vdmVPcnBoYW5lZERvY3VtZW50cyIsImNvbGxlY3QiLCJnZXRDYWNoZVNpemUiLCJZbiIsIl9fUFJJVkFURV9uZXdMcnVHYXJiYWdlQ29sbGVjdG9yIiwiX19QUklWQVRFX0luZGV4ZWREYkxydURlbGVnYXRlSW1wbCIsIlpuIiwiZ2V0VGFyZ2V0Q2FjaGUiLCJYbiIsIl9fUFJJVkFURV93cml0ZVNlbnRpbmVsS2V5IiwiZXIiLCJnZXRSZW1vdGVEb2N1bWVudENhY2hlIiwibmV3Q2hhbmdlQnVmZmVyIiwiZ2V0RW50cnkiLCJyZW1vdmVFbnRyeSIsImFwcGx5IiwidXBkYXRlTGltYm9Eb2N1bWVudCIsImdldFNpemUiLCJSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlciIsImNoYW5nZXNBcHBsaWVkIiwiYWRkRW50cnkiLCJhc3NlcnROb3RBcHBsaWVkIiwiZ2V0RnJvbUNhY2hlIiwiZ2V0QWxsRnJvbUNhY2hlIiwiX19QUklWQVRFX0luZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGVJbXBsIiwic2V0SW5kZXhNYW5hZ2VyIiwiX19QUklWQVRFX3JlbW90ZURvY3VtZW50c1N0b3JlIiwidXBkYXRlTWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsImJ5dGVTaXplIiwidHIiLCJfX1BSSVZBVEVfZGJLZXkiLCJuciIsInJyIiwiaXIiLCJzciIsIl9yIiwiX19QUklWQVRFX2RiS2V5Q29tcGFyYXRvciIsImdldERvY3VtZW50c01hdGNoaW5nUXVlcnkiLCJpbmNyZW1lbnREb2N1bWVudFJlYWRDb3VudCIsImdldEFsbEZyb21Db2xsZWN0aW9uR3JvdXAiLCJfX1BSSVZBVEVfZGJDb2xsZWN0aW9uR3JvdXBLZXkiLCJfX1BSSVZBVEVfSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIiLCJ0cmFja1JlbW92YWxzIiwiX19QUklWQVRFX2RvY3VtZW50R2xvYmFsU3RvcmUiLCJfX1BSSVZBVEVfZnJvbURiUmVtb3RlRG9jdW1lbnQiLCJfX1BSSVZBVEVfbmV3SW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZSIsImFyIiwidXIiLCJPdmVybGF5ZWREb2N1bWVudCIsIkxvY2FsRG9jdW1lbnRzVmlldyIsInJlbW90ZURvY3VtZW50Q2FjaGUiLCJtdXRhdGlvblF1ZXVlIiwiZG9jdW1lbnRPdmVybGF5Q2FjaGUiLCJnZXREb2N1bWVudCIsImdldERvY3VtZW50cyIsImdldExvY2FsVmlld09mRG9jdW1lbnRzIiwicG9wdWxhdGVPdmVybGF5cyIsImNvbXB1dGVWaWV3cyIsImdldE92ZXJsYXllZERvY3VtZW50cyIsInJlY2FsY3VsYXRlQW5kU2F2ZU92ZXJsYXlzIiwicmVjYWxjdWxhdGVBbmRTYXZlT3ZlcmxheXNGb3JEb2N1bWVudEtleXMiLCJnZXREb2N1bWVudHNNYXRjaGluZ0RvY3VtZW50UXVlcnkiLCJnZXREb2N1bWVudHNNYXRjaGluZ0NvbGxlY3Rpb25Hcm91cFF1ZXJ5IiwiZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uUXVlcnkiLCJfX1BSSVZBVEVfTWVtb3J5QnVuZGxlQ2FjaGUiLCJjciIsImxyIiwiX19QUklWQVRFX01lbW9yeURvY3VtZW50T3ZlcmxheUNhY2hlIiwib3ZlcmxheXMiLCJociIsIl9fUFJJVkFURV9SZWZlcmVuY2VTZXQiLCJQciIsIl9fUFJJVkFURV9Eb2NSZWZlcmVuY2UiLCJJciIsIlRyIiwiRXIiLCJkciIsIkFyIiwiUnIiLCJWciIsIm1yIiwiZ3IiLCJwciIsIl9fUFJJVkFURV9NZW1vcnlNdXRhdGlvblF1ZXVlIiwieXIiLCJ3ciIsIlNyIiwiYnIiLCJEciIsIkNyIiwic2hpZnQiLCJfX1BSSVZBVEVfTWVtb3J5UmVtb3RlRG9jdW1lbnRDYWNoZUltcGwiLCJ2ciIsImRvY3MiLCJGciIsIl9fUFJJVkFURV9NZW1vcnlSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlciIsIl9fUFJJVkFURV9NZW1vcnlUYXJnZXRDYWNoZSIsIk1yIiwiT3IiLCJOciIsIkxyIiwiX19QUklWQVRFX01lbW9yeVBlcnNpc3RlbmNlIiwiQnIiLCJrciIsInFyIiwiUXIiLCJLciIsIiRyIiwic2V0RGF0YWJhc2VEZWxldGVkTGlzdGVuZXIiLCJzZXROZXR3b3JrRW5hYmxlZCIsImdldEluZGV4TWFuYWdlciIsImdldERvY3VtZW50T3ZlcmxheUNhY2hlIiwiZ2V0TXV0YXRpb25RdWV1ZSIsImdldEJ1bmRsZUNhY2hlIiwiX19QUklWQVRFX01lbW9yeVRyYW5zYWN0aW9uIiwiVXIiLCJXciIsIkdyIiwiX19QUklWQVRFX01lbW9yeUVhZ2VyRGVsZWdhdGUiLCJ6ciIsImpyIiwiSHIiLCJKciIsIllyIiwiX19QUklWQVRFX01lbW9yeUxydURlbGVnYXRlIiwiWnIiLCJfX1BSSVZBVEVfU2NoZW1hQ29udmVydGVyIiwia2V5UGF0aCIsImF1dG9JbmNyZW1lbnQiLCJjcmVhdGVJbmRleCIsInVuaXF1ZSIsIl9fUFJJVkFURV9jcmVhdGVRdWVyeUNhY2hlIiwiZGVsZXRlT2JqZWN0U3RvcmUiLCJYciIsImVpIiwidGkiLCJuaSIsIm9iamVjdFN0b3JlTmFtZXMiLCJjb250YWlucyIsInJpIiwiaWkiLCJzaSIsIl9fUFJJVkFURV9JbmRleGVkRGJQZXJzaXN0ZW5jZSIsImFsbG93VGFiU3luY2hyb25pemF0aW9uIiwiY2xpZW50SWQiLCJvaSIsIl9pIiwiYWkiLCJ1aSIsImlzUHJpbWFyeSIsIm5ldHdvcmtFbmFibGVkIiwiY2kiLCJpbkZvcmVncm91bmQiLCJsaSIsImhpIiwiUGkiLCJJaSIsIlRpIiwiRWkiLCJkaSIsIkFpIiwiUmkiLCJWaSIsIm1pIiwiZmkiLCJuZXdWZXJzaW9uIiwiZW5xdWV1ZUFuZEZvcmdldCIsIl9fUFJJVkFURV9jbGllbnRNZXRhZGF0YVN0b3JlIiwidXBkYXRlVGltZU1zIiwiZ2kiLCJwaSIsInlpIiwid2kiLCJfX1BSSVZBVEVfcHJpbWFyeUNsaWVudFN0b3JlIiwiU2kiLCJiaSIsIkRpIiwiQ2kiLCJ2aSIsInJlbW92ZUl0ZW0iLCJGaSIsIm93bmVySWQiLCJsZWFzZVRpbWVzdGFtcE1zIiwiTWkiLCJ4aSIsIk9pIiwiTmkiLCJMaSIsIkJpIiwia2kiLCJ2aXNpYmlsaXR5U3RhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNTYWZhcmkiLCJuYXZpZ2F0b3IiLCJhcHBWZXJzaW9uIiwidXNlckFnZW50IiwiZW50ZXJSZXN0cmljdGVkTW9kZSIsImdldEl0ZW0iLCJfX1BSSVZBVEVfaW5kZXhlZERiU3RvcmFnZVByZWZpeCIsIl9fUFJJVkFURV9Mb2NhbFZpZXdDaGFuZ2VzIiwiZnJvbUNhY2hlIiwicWkiLCJRaSIsIktpIiwiZG9jQ2hhbmdlcyIsIlF1ZXJ5Q29udGV4dCIsIl9kb2N1bWVudFJlYWRDb3VudCIsImRvY3VtZW50UmVhZENvdW50IiwiX19QUklWQVRFX1F1ZXJ5RW5naW5lIiwiJGkiLCJVaSIsIldpIiwiR2kiLCJ6aSIsImppIiwiSGkiLCJKaSIsIllpIiwiWmkiLCJYaSIsImVzIiwiX19QUklWQVRFX0xvY2FsU3RvcmVJbXBsIiwidHMiLCJucyIsInJzIiwic3MiLCJvcyIsIl9zIiwiX19QUklWQVRFX25ld0xvY2FsU3RvcmUiLCJfX1BSSVZBVEVfbG9jYWxTdG9yZUhhbmRsZVVzZXJDaGFuZ2UiLCJ1cyIsInJlbW92ZWRCYXRjaElkcyIsImFkZGVkQmF0Y2hJZHMiLCJfX1BSSVZBVEVfbG9jYWxTdG9yZUdldExhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24iLCJfX1BSSVZBVEVfcG9wdWxhdGVEb2N1bWVudENoYW5nZUJ1ZmZlciIsImNzIiwibHMiLCJfX1BSSVZBVEVfbG9jYWxTdG9yZUdldE5leHRNdXRhdGlvbkJhdGNoIiwiX19QUklWQVRFX2xvY2FsU3RvcmVBbGxvY2F0ZVRhcmdldCIsIl9fUFJJVkFURV9sb2NhbFN0b3JlUmVsZWFzZVRhcmdldCIsIl9fUFJJVkFURV9sb2NhbFN0b3JlRXhlY3V0ZVF1ZXJ5IiwiX19QUklWQVRFX3NldE1heFJlYWRUaW1lIiwiaHMiLCJfX1BSSVZBVEVfbG9jYWxTdG9yZUdldENhY2hlZFRhcmdldCIsIl9fUFJJVkFURV9sb2NhbFN0b3JlR2V0TmV3RG9jdW1lbnRDaGFuZ2VzIiwiX19QUklWQVRFX2xvY2FsU3RvcmVTYXZlTmFtZWRRdWVyeSIsImNyZWF0ZVdlYlN0b3JhZ2VDbGllbnRTdGF0ZUtleSIsImNyZWF0ZVdlYlN0b3JhZ2VNdXRhdGlvbkJhdGNoS2V5IiwiY3JlYXRlV2ViU3RvcmFnZVF1ZXJ5VGFyZ2V0TWV0YWRhdGFLZXkiLCJfX1BSSVZBVEVfTXV0YXRpb25NZXRhZGF0YSIsIkVzIiwicGFyc2UiLCJkcyIsIl9fUFJJVkFURV9RdWVyeVRhcmdldE1ldGFkYXRhIiwiX19QUklWQVRFX1JlbW90ZUNsaWVudFN0YXRlIiwiYWN0aXZlVGFyZ2V0SWRzIiwiX19QUklWQVRFX1NoYXJlZE9ubGluZVN0YXRlIiwib25saW5lU3RhdGUiLCJfX1BSSVZBVEVfTG9jYWxDbGllbnRTdGF0ZSIsIkFzIiwiUnMiLCJfX1BSSVZBVEVfV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlIiwiVnMiLCJzeW5jRW5naW5lIiwib25saW5lU3RhdGVIYW5kbGVyIiwiZnMiLCJncyIsImJpbmQiLCJwcyIsInlzIiwic3RvcmFnZSIsIndzIiwiU3MiLCJicyIsIkRzIiwiQ3MiLCJ2cyIsIkZzIiwiTXMiLCJ4cyIsIk9zIiwiZ2V0QWxsQWN0aXZlUXVlcnlUYXJnZXRzIiwiTnMiLCJpc0FjdGl2ZVF1ZXJ5VGFyZ2V0IiwiYWRkUGVuZGluZ011dGF0aW9uIiwiTHMiLCJ1cGRhdGVNdXRhdGlvblN0YXRlIiwiQnMiLCJhZGRMb2NhbFF1ZXJ5VGFyZ2V0Iiwia3MiLCJyZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0IiwiaXNMb2NhbFF1ZXJ5VGFyZ2V0IiwiY2xlYXJRdWVyeVN0YXRlIiwidXBkYXRlUXVlcnlTdGF0ZSIsInFzIiwiaGFuZGxlVXNlckNoYW5nZSIsInNldE9ubGluZVN0YXRlIiwiUXMiLCJub3RpZnlCdW5kbGVMb2FkZWQiLCJLcyIsInN0b3JhZ2VBcmVhIiwibmV3VmFsdWUiLCIkcyIsIlVzIiwiV3MiLCJHcyIsInpzIiwianMiLCJIcyIsIkpzIiwiWXMiLCJacyIsIlhzIiwiZW8iLCJfX1BSSVZBVEVfTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUiLCJubyIsInJvIiwiX19QUklWQVRFX05vb3BDb25uZWN0aXZpdHlNb25pdG9yIiwiaW8iLCJfX1BSSVZBVEVfQnJvd3NlckNvbm5lY3Rpdml0eU1vbml0b3IiLCJzbyIsIm9vIiwiX28iLCJhbyIsInVvIiwiY28iLCJfX1BSSVZBVEVfZ2VuZXJhdGVVbmlxdWVEZWJ1Z0lkIiwicm91bmQiLCJCYXRjaEdldERvY3VtZW50cyIsIkNvbW1pdCIsIlJ1blF1ZXJ5IiwiUnVuQWdncmVnYXRpb25RdWVyeSIsIl9fUFJJVkFURV9TdHJlYW1CcmlkZ2UiLCJsbyIsImhvIiwiUG8iLCJJbyIsIlRvIiwiRW8iLCJBbyIsIlJvIiwib25NZXNzYWdlIiwiVm8iLCJzZW5kIiwibW8iLCJmbyIsInBvIiwieW8iLCJfX1BSSVZBVEVfV2ViQ2hhbm5lbENvbm5lY3Rpb24iLCJkYXRhYmFzZUluZm8iLCJ3byIsIlNvIiwiYm8iLCJEbyIsIkNvIiwidm8iLCJGbyIsIk1vIiwieG8iLCJ0ZXJtaW5hdGUiLCJYaHJJbyIsInNldFdpdGhDcmVkZW50aWFscyIsImxpc3Rlbk9uY2UiLCJFdmVudFR5cGUiLCJDT01QTEVURSIsImdldExhc3RFcnJvckNvZGUiLCJFcnJvckNvZGUiLCJOT19FUlJPUiIsImdldFJlc3BvbnNlSnNvbiIsIlRJTUVPVVQiLCJIVFRQX0VSUk9SIiwiZ2V0U3RhdHVzIiwiZ2V0UmVzcG9uc2VUZXh0Iiwic3RhdHVzIiwiT28iLCJjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0IiwiZ2V0U3RhdEV2ZW50VGFyZ2V0IiwiaHR0cFNlc3Npb25JZFBhcmFtIiwiaW5pdE1lc3NhZ2VIZWFkZXJzIiwibWVzc2FnZVVybFBhcmFtcyIsInNlbmRSYXdKc29uIiwic3VwcG9ydHNDcm9zc0RvbWFpblhociIsImludGVybmFsQ2hhbm5lbFBhcmFtcyIsImZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNcyIsImRldGVjdEJ1ZmZlcmluZ1Byb3h5IiwidGltZW91dFNlY29uZHMiLCJsb25nUG9sbGluZ1RpbWVvdXQiLCJ4bWxIdHRwRmFjdG9yeSIsIkZldGNoWG1sSHR0cEZhY3RvcnkiLCJlbmNvZGVJbml0TWVzc2FnZUhlYWRlcnMiLCJjcmVhdGVXZWJDaGFubmVsIiwiX19QUklWQVRFX3VuZ3VhcmRlZEV2ZW50TGlzdGVuIiwibGlzdGVuIiwiV2ViQ2hhbm5lbCIsIk9QRU4iLCJDTE9TRSIsIk1FU1NBR0UiLCJFdmVudCIsIlNUQVRfRVZFTlQiLCJzdGF0IiwiU3RhdCIsIlBST1hZIiwiTk9QUk9YWSIsIl9fUFJJVkFURV9nZXRXaW5kb3ciLCJfX1BSSVZBVEVfbmV3U2VyaWFsaXplciIsIl9fUFJJVkFURV9FeHBvbmVudGlhbEJhY2tvZmYiLCJ0aW1lcklkIiwiTm8iLCJMbyIsIkJvIiwia28iLCJxbyIsIlFvIiwiS28iLCIkbyIsIlVvIiwiV28iLCJza2lwRGVsYXkiLCJfX1BSSVZBVEVfUGVyc2lzdGVudFN0cmVhbSIsIkdvIiwiem8iLCJjb25uZWN0aW9uIiwiYXV0aENyZWRlbnRpYWxzUHJvdmlkZXIiLCJhcHBDaGVja0NyZWRlbnRpYWxzUHJvdmlkZXIiLCJsaXN0ZW5lciIsImpvIiwiSG8iLCJKbyIsInN0cmVhbSIsIllvIiwiWm8iLCJYbyIsImVfIiwidF8iLCJuXyIsInJfIiwiaV8iLCJzXyIsIm9fIiwiX18iLCJhXyIsInVfIiwiY18iLCJsXyIsIl9fUFJJVkFURV9QZXJzaXN0ZW50TGlzdGVuU3RyZWFtIiwidGFyZ2V0Q2hhbmdlIiwidGFyZ2V0Q2hhbmdlVHlwZSIsIkJ1ZmZlciIsImRvY3VtZW50Q2hhbmdlIiwiZG9jdW1lbnREZWxldGUiLCJkb2N1bWVudFJlbW92ZSIsIl9fUFJJVkFURV9mcm9tV2F0Y2hDaGFuZ2UiLCJoXyIsIlBfIiwiYWRkVGFyZ2V0IiwiX19QUklWQVRFX3RvTGlzdGVuUmVxdWVzdExhYmVscyIsImxhYmVscyIsIklfIiwiX19QUklWQVRFX1BlcnNpc3RlbnRXcml0ZVN0cmVhbSIsIlRfIiwiRV8iLCJkXyIsInN0cmVhbVRva2VuIiwiX19QUklWQVRFX2Zyb21Xcml0ZVJlc3VsdHMiLCJ3cml0ZVJlc3VsdHMiLCJjb21taXRUaW1lIiwiQV8iLCJSXyIsIlZfIiwid3JpdGVzIiwiX19QUklWQVRFX0RhdGFzdG9yZUltcGwiLCJhdXRoQ3JlZGVudGlhbHMiLCJhcHBDaGVja0NyZWRlbnRpYWxzIiwibV8iLCJmXyIsIl9fUFJJVkFURV9PbmxpbmVTdGF0ZVRyYWNrZXIiLCJnXyIsInBfIiwieV8iLCJ3XyIsIlNfIiwiYl8iLCJEXyIsIkNfIiwiX19QUklWQVRFX1JlbW90ZVN0b3JlSW1wbCIsImRhdGFzdG9yZSIsInJlbW90ZVN5bmNlciIsInZfIiwiRl8iLCJNXyIsInhfIiwiT18iLCJfX1BSSVZBVEVfY2FuVXNlTmV0d29yayIsIl9fUFJJVkFURV9kaXNhYmxlTmV0d29ya0ludGVybmFsIiwiTl8iLCJfX1BSSVZBVEVfZW5hYmxlTmV0d29ya0ludGVybmFsIiwiX19QUklWQVRFX3JlbW90ZVN0b3JlTGlzdGVuIiwiX19QUklWQVRFX3Nob3VsZFN0YXJ0V2F0Y2hTdHJlYW0iLCJfX1BSSVZBVEVfc3RhcnRXYXRjaFN0cmVhbSIsIl9fUFJJVkFURV9lbnN1cmVXYXRjaFN0cmVhbSIsIl9fUFJJVkFURV9zZW5kV2F0Y2hSZXF1ZXN0IiwiX19QUklWQVRFX3JlbW90ZVN0b3JlVW5saXN0ZW4iLCJfX1BSSVZBVEVfc2VuZFVud2F0Y2hSZXF1ZXN0IiwiTF8iLCJfX1BSSVZBVEVfY2xlYW5VcFdhdGNoU3RyZWFtU3RhdGUiLCJfX1BSSVZBVEVfb25XYXRjaFN0cmVhbUNvbm5lY3RlZCIsIl9fUFJJVkFURV9vbldhdGNoU3RyZWFtT3BlbiIsIl9fUFJJVkFURV9vbldhdGNoU3RyZWFtQ2xvc2UiLCJfX1BSSVZBVEVfb25XYXRjaFN0cmVhbUNoYW5nZSIsInJlamVjdExpc3RlbiIsIl9fUFJJVkFURV9kaXNhYmxlTmV0d29ya1VudGlsUmVjb3ZlcnkiLCJhcHBseVJlbW90ZUV2ZW50IiwiX19QUklWQVRFX2V4ZWN1dGVXaXRoUmVjb3ZlcnkiLCJfX1BSSVZBVEVfZmlsbFdyaXRlUGlwZWxpbmUiLCJfX1BSSVZBVEVfZW5zdXJlV3JpdGVTdHJlYW0iLCJfX1BSSVZBVEVfY2FuQWRkVG9Xcml0ZVBpcGVsaW5lIiwiX19QUklWQVRFX2FkZFRvV3JpdGVQaXBlbGluZSIsIl9fUFJJVkFURV9zaG91bGRTdGFydFdyaXRlU3RyZWFtIiwiX19QUklWQVRFX3N0YXJ0V3JpdGVTdHJlYW0iLCJfX1BSSVZBVEVfb25Xcml0ZVN0cmVhbU9wZW4iLCJfX1BSSVZBVEVfb25Xcml0ZUhhbmRzaGFrZUNvbXBsZXRlIiwiX19QUklWQVRFX29uTXV0YXRpb25SZXN1bHQiLCJhcHBseVN1Y2Nlc3NmdWxXcml0ZSIsIl9fUFJJVkFURV9vbldyaXRlU3RyZWFtQ2xvc2UiLCJyZWplY3RGYWlsZWRXcml0ZSIsIl9fUFJJVkFURV9yZW1vdGVTdG9yZUhhbmRsZUNyZWRlbnRpYWxDaGFuZ2UiLCJ2ZXJpZnlPcGVyYXRpb25JblByb2dyZXNzIiwiaGFuZGxlQ3JlZGVudGlhbENoYW5nZSIsIl9fUFJJVkFURV9yZW1vdGVTdG9yZUFwcGx5UHJpbWFyeVN0YXRlIiwiQl8iLCJrXyIsIkRlbGF5ZWRPcGVyYXRpb24iLCJ0YXJnZXRUaW1lTXMiLCJyZW1vdmFsQ2FsbGJhY2siLCJjcmVhdGVBbmRTY2hlZHVsZSIsInRpbWVySGFuZGxlIiwiaGFuZGxlRGVsYXlFbGFwc2VkIiwiY2xlYXJUaW1lb3V0IiwiX19QUklWQVRFX3dyYXBJblVzZXJFcnJvcklmUmVjb3ZlcmFibGUiLCJEb2N1bWVudFNldCIsImtleWVkTWFwIiwic29ydGVkU2V0IiwiZW1wdHlTZXQiLCJfX1BSSVZBVEVfRG9jdW1lbnRDaGFuZ2VTZXQiLCJxXyIsInRyYWNrIiwiUV8iLCJWaWV3U25hcHNob3QiLCJvbGREb2NzIiwibXV0YXRlZEtleXMiLCJzeW5jU3RhdGVDaGFuZ2VkIiwiZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXMiLCJoYXNDYWNoZWRSZXN1bHRzIiwiZnJvbUluaXRpYWxEb2N1bWVudHMiLCJfX1BSSVZBVEVfUXVlcnlMaXN0ZW5lcnNJbmZvIiwiS18iLCJVXyIsIldfIiwiR18iLCJfX1BSSVZBVEVfRXZlbnRNYW5hZ2VySW1wbCIsInF1ZXJpZXMiLCJ6XyIsIl9fUFJJVkFURV9ldmVudE1hbmFnZXJMaXN0ZW4iLCJvbkxpc3RlbiIsIm9uRmlyc3RSZW1vdGVTdG9yZUxpc3RlbiIsIm9uRXJyb3IiLCJqXyIsIkhfIiwiX19QUklWQVRFX3JhaXNlU25hcHNob3RzSW5TeW5jRXZlbnQiLCJfX1BSSVZBVEVfZXZlbnRNYW5hZ2VyVW5saXN0ZW4iLCJvblVubGlzdGVuIiwib25MYXN0UmVtb3RlU3RvcmVVbmxpc3RlbiIsIl9fUFJJVkFURV9ldmVudE1hbmFnZXJPbldhdGNoQ2hhbmdlIiwiX19QUklWQVRFX2V2ZW50TWFuYWdlck9uV2F0Y2hFcnJvciIsIkpfIiwiQ2FjaGUiLCJfX1BSSVZBVEVfUXVlcnlMaXN0ZW5lciIsIllfIiwiWl8iLCJYXyIsImluY2x1ZGVNZXRhZGF0YUNoYW5nZXMiLCJlYSIsInRhIiwibmEiLCJyYSIsInNvdXJjZSIsIl9fUFJJVkFURV9TaXplZEJ1bmRsZUVsZW1lbnQiLCJpYSIsImJ5dGVMZW5ndGgiLCJzYSIsIl9fUFJJVkFURV9CdW5kbGVDb252ZXJ0ZXJJbXBsIiwiUHMiLCJJcyIsIm1ldGFkYXRhIiwiVHMiLCJfX1BSSVZBVEVfQnVuZGxlTG9hZGVyIiwib2EiLCJjb2xsZWN0aW9uR3JvdXBzIiwicHJvZ3Jlc3MiLCJfX1BSSVZBVEVfYnVuZGxlSW5pdGlhbFByb2dyZXNzIiwiYnl0ZXNMb2FkZWQiLCJkb2N1bWVudHNMb2FkZWQiLCJuYW1lZFF1ZXJ5IiwiZG9jdW1lbnRNZXRhZGF0YSIsImFhIiwiY29tcGxldGUiLCJfX1BSSVZBVEVfbG9jYWxTdG9yZUFwcGx5QnVuZGxlZERvY3VtZW50cyIsInRhc2tTdGF0ZSIsInVhIiwiY2EiLCJ0b3RhbERvY3VtZW50cyIsInRvdGFsQnl0ZXMiLCJfX1BSSVZBVEVfQWRkZWRMaW1ib0RvY3VtZW50IiwiX19QUklWQVRFX1JlbW92ZWRMaW1ib0RvY3VtZW50IiwiX19QUklWQVRFX1ZpZXciLCJsYSIsImhhIiwiUGEiLCJJYSIsIlRhIiwiRWEiLCJkYSIsIkFhIiwiUmEiLCJvcmRlciIsIlZhIiwibWEiLCJmYSIsImdhIiwicGEiLCJ5YSIsIl9fUFJJVkFURV9RdWVyeVZpZXciLCJ2aWV3IiwiTGltYm9SZXNvbHV0aW9uIiwid2EiLCJfX1BSSVZBVEVfU3luY0VuZ2luZUltcGwiLCJyZW1vdGVTdG9yZSIsImV2ZW50TWFuYWdlciIsInNoYXJlZENsaWVudFN0YXRlIiwibWF4Q29uY3VycmVudExpbWJvUmVzb2x1dGlvbnMiLCJTYSIsImJhIiwiRGEiLCJDYSIsInZhIiwiRmEiLCJNYSIsInhhIiwiT2EiLCJOYSIsIkxhIiwiaXNQcmltYXJ5Q2xpZW50IiwiX19QUklWQVRFX3N5bmNFbmdpbmVMaXN0ZW4iLCJfX1BSSVZBVEVfZW5zdXJlV2F0Y2hDYWxsYmFja3MiLCJfX1BSSVZBVEVfYWxsb2NhdGVUYXJnZXRBbmRNYXliZUxpc3RlbiIsIl9fUFJJVkFURV90cmlnZ2VyUmVtb3RlU3RvcmVMaXN0ZW4iLCJfX1BSSVZBVEVfaW5pdGlhbGl6ZVZpZXdBbmRDb21wdXRlU25hcHNob3QiLCJCYSIsIl9fUFJJVkFURV91cGRhdGVUcmFja2VkTGltYm9zIiwiX19QUklWQVRFX3N5bmNFbmdpbmVVbmxpc3RlbiIsIl9fUFJJVkFURV9yZW1vdmVBbmRDbGVhbnVwVGFyZ2V0IiwiX19QUklWQVRFX3RyaWdnZXJSZW1vdGVTdG9yZVVubGlzdGVuIiwiX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseVJlbW90ZUV2ZW50IiwiX19QUklWQVRFX2xvY2FsU3RvcmVBcHBseVJlbW90ZUV2ZW50VG9Mb2NhbENhY2hlIiwiX19QUklWQVRFX3N5bmNFbmdpbmVFbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlIiwiX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseU9ubGluZVN0YXRlQ2hhbmdlIiwiX19QUklWQVRFX3N5bmNFbmdpbmVSZWplY3RMaXN0ZW4iLCJfX1BSSVZBVEVfcHVtcEVucXVldWVkTGltYm9SZXNvbHV0aW9ucyIsIl9fUFJJVkFURV9zeW5jRW5naW5lQXBwbHlTdWNjZXNzZnVsV3JpdGUiLCJfX1BSSVZBVEVfbG9jYWxTdG9yZUFja25vd2xlZGdlQmF0Y2giLCJfX1BSSVZBVEVfcHJvY2Vzc1VzZXJDYWxsYmFjayIsIl9fUFJJVkFURV90cmlnZ2VyUGVuZGluZ1dyaXRlc0NhbGxiYWNrcyIsIl9fUFJJVkFURV9zeW5jRW5naW5lUmVqZWN0RmFpbGVkV3JpdGUiLCJrYSIsIl9fUFJJVkFURV9yZW1vdmVMaW1ib1RhcmdldCIsIl9fUFJJVkFURV90cmFja0xpbWJvQ2hhbmdlIiwiX19QUklWQVRFX3N5bmNFbmdpbmVIYW5kbGVDcmVkZW50aWFsQ2hhbmdlIiwiX19QUklWQVRFX3N5bmNFbmdpbmVHZXRSZW1vdGVLZXlzRm9yVGFyZ2V0IiwiX19QUklWQVRFX3N5bmNocm9uaXplVmlld0FuZENvbXB1dGVTbmFwc2hvdCIsIl9fUFJJVkFURV9zeW5jRW5naW5lU3luY2hyb25pemVXaXRoQ2hhbmdlZERvY3VtZW50cyIsIl9fUFJJVkFURV9zeW5jRW5naW5lQXBwbHlCYXRjaFN0YXRlIiwiX19QUklWQVRFX3N5bmNocm9uaXplUXVlcnlWaWV3c0FuZFJhaXNlU25hcHNob3RzIiwiX19QUklWQVRFX3N5bnRoZXNpemVUYXJnZXRUb1F1ZXJ5IiwiX19QUklWQVRFX3N5bmNFbmdpbmVHZXRBY3RpdmVDbGllbnRzIiwiX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseVRhcmdldFN0YXRlIiwiX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseUFjdGl2ZVRhcmdldHNDaGFuZ2UiLCJfX1BSSVZBVEVfc3luY0VuZ2luZUVuc3VyZVdyaXRlQ2FsbGJhY2tzIiwiTWVtb3J5T2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyIiwic3luY2hyb25pemVUYWJzIiwiY3JlYXRlU2hhcmVkQ2xpZW50U3RhdGUiLCJjcmVhdGVQZXJzaXN0ZW5jZSIsImNyZWF0ZUxvY2FsU3RvcmUiLCJnY1NjaGVkdWxlciIsImNyZWF0ZUdhcmJhZ2VDb2xsZWN0aW9uU2NoZWR1bGVyIiwiaW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyIiwiY3JlYXRlSW5kZXhCYWNrZmlsbGVyU2NoZWR1bGVyIiwiaW5pdGlhbFVzZXIiLCJfX1BSSVZBVEVfTHJ1R2NNZW1vcnlPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIiLCJjYWNoZVNpemVCeXRlcyIsIl9fUFJJVkFURV9JbmRleGVkRGJPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIiLCJRYSIsImZvcmNlT3duZXJzaGlwIiwiX19QUklWQVRFX011bHRpVGFiT2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyIiwiX19QUklWQVRFX3N5bmNFbmdpbmVBcHBseVByaW1hcnlTdGF0ZSIsIk9ubGluZUNvbXBvbmVudFByb3ZpZGVyIiwiY3JlYXRlRGF0YXN0b3JlIiwiY3JlYXRlUmVtb3RlU3RvcmUiLCJjcmVhdGVFdmVudE1hbmFnZXIiLCJjcmVhdGVTeW5jRW5naW5lIiwiX19QUklWQVRFX3RvQnl0ZVN0cmVhbVJlYWRlckhlbHBlciIsInJlbGVhc2VMb2NrIiwiY2xvc2VkIiwiX19QUklWQVRFX0FzeW5jT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIm11dGVkIiwiS2EiLCIkYSIsIl9fUFJJVkFURV9CdW5kbGVSZWFkZXJJbXBsIiwiVWEiLCJXYSIsIlRleHREZWNvZGVyIiwiR2EiLCJxYSIsInphIiwiZGVjb2RlIiwiamEiLCJIYSIsIkphIiwiZmluZEluZGV4IiwiWWEiLCJUcmFuc2FjdGlvbiQyIiwicmVhZFZlcnNpb25zIiwiY29tbWl0dGVkIiwibGFzdFRyYW5zYWN0aW9uRXJyb3IiLCJ3cml0dGVuRG9jcyIsImxvb2t1cCIsImVuc3VyZUNvbW1pdE5vdENhbGxlZCIsImZvdW5kIiwibWlzc2luZyIsIl9fUFJJVkFURV9mcm9tQmF0Y2hHZXREb2N1bWVudHNSZXNwb25zZSIsInJlY29yZFZlcnNpb24iLCJ3cml0ZSIsInByZWNvbmRpdGlvbkZvclVwZGF0ZSIsIl9fUFJJVkFURV9UcmFuc2FjdGlvblJ1bm5lciIsInVwZGF0ZUZ1bmN0aW9uIiwiWmEiLCJtYXhBdHRlbXB0cyIsIlhhIiwiZXUiLCJ0dSIsIm51IiwicnUiLCJGaXJlc3RvcmVDbGllbnQiLCJhdXRoQ3JlZGVudGlhbExpc3RlbmVyIiwiYXBwQ2hlY2tDcmVkZW50aWFsTGlzdGVuZXIiLCJjb25maWd1cmF0aW9uIiwic2V0Q3JlZGVudGlhbENoYW5nZUxpc3RlbmVyIiwic2V0QXBwQ2hlY2tUb2tlbkNoYW5nZUxpc3RlbmVyIiwidmVyaWZ5Tm90VGVybWluYXRlZCIsImlzU2h1dHRpbmdEb3duIiwiZW5xdWV1ZUFuZEZvcmdldEV2ZW5XaGlsZVJlc3RyaWN0ZWQiLCJfb25saW5lQ29tcG9uZW50cyIsIl9vZmZsaW5lQ29tcG9uZW50cyIsIl9fUFJJVkFURV9zZXRPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXIiLCJfX1BSSVZBVEVfc2V0T25saW5lQ29tcG9uZW50UHJvdmlkZXIiLCJfX1BSSVZBVEVfZW5zdXJlT2ZmbGluZUNvbXBvbmVudHMiLCJfX1BSSVZBVEVfY2FuRmFsbGJhY2tGcm9tSW5kZXhlZERiRXJyb3IiLCJfdW5pbml0aWFsaXplZENvbXBvbmVudHNQcm92aWRlciIsIl9vZmZsaW5lIiwiX19QUklWQVRFX2Vuc3VyZU9ubGluZUNvbXBvbmVudHMiLCJfb25saW5lIiwiX19QUklWQVRFX2dldFBlcnNpc3RlbmNlIiwiX19QUklWQVRFX2dldExvY2FsU3RvcmUiLCJfX1BSSVZBVEVfZ2V0UmVtb3RlU3RvcmUiLCJfX1BSSVZBVEVfZ2V0U3luY0VuZ2luZSIsIl9fUFJJVkFURV9nZXREYXRhc3RvcmUiLCJfX1BSSVZBVEVfZ2V0RXZlbnRNYW5hZ2VyIiwiX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudEdldERvY3VtZW50VmlhU25hcHNob3RMaXN0ZW5lciIsIl9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRHZXREb2N1bWVudHNWaWFTbmFwc2hvdExpc3RlbmVyIiwiX19QUklWQVRFX2Nsb25lTG9uZ1BvbGxpbmdPcHRpb25zIiwiX19QUklWQVRFX3ZhbGlkYXRlTm9uRW1wdHlBcmd1bWVudCIsIl9fUFJJVkFURV92YWxpZGF0ZUlzTm90VXNlZFRvZ2V0aGVyIiwiX19QUklWQVRFX3ZhbGlkYXRlRG9jdW1lbnRQYXRoIiwiX19QUklWQVRFX3ZhbGlkYXRlQ29sbGVjdGlvblBhdGgiLCJfX1BSSVZBVEVfdmFsdWVEZXNjcmlwdGlvbiIsIl9fUFJJVkFURV9jYXN0IiwiX2RlbGVnYXRlIiwiX19QUklWQVRFX3ZhbGlkYXRlUG9zaXRpdmVOdW1iZXIiLCJGaXJlc3RvcmVTZXR0aW5nc0ltcGwiLCJjcmVkZW50aWFscyIsImlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMiLCJsb2NhbENhY2hlIiwiZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZyIsImV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyIsImV4cGVyaW1lbnRhbExvbmdQb2xsaW5nT3B0aW9ucyIsIkZpcmVzdG9yZSQxIiwiX2F1dGhDcmVkZW50aWFscyIsIl9hcHBDaGVja0NyZWRlbnRpYWxzIiwiX2RhdGFiYXNlSWQiLCJfYXBwIiwiX3BlcnNpc3RlbmNlS2V5IiwiX3NldHRpbmdzIiwiX3NldHRpbmdzRnJvemVuIiwiX2luaXRpYWxpemVkIiwiX3Rlcm1pbmF0ZWQiLCJfdGVybWluYXRlVGFzayIsIl9zZXRTZXR0aW5ncyIsInNlc3Npb25JbmRleCIsImlhbVRva2VuIiwiYXV0aFRva2VuRmFjdG9yeSIsImNsaWVudCIsIl9nZXRTZXR0aW5ncyIsIl9mcmVlemVTZXR0aW5ncyIsIl90ZXJtaW5hdGUiLCJjb25uZWN0RmlyZXN0b3JlRW11bGF0b3IiLCJtb2NrVXNlclRva2VuIiwiY3JlYXRlTW9ja1VzZXJUb2tlbiIsInN1YiIsInVzZXJfaWQiLCJRdWVyeSIsImNvbnZlcnRlciIsIl9xdWVyeSIsImZpcmVzdG9yZSIsIndpdGhDb252ZXJ0ZXIiLCJEb2N1bWVudFJlZmVyZW5jZSIsIl9rZXkiLCJfcGF0aCIsIkNvbGxlY3Rpb25SZWZlcmVuY2UiLCJnZXRNb2R1bGFySW5zdGFuY2UiLCJxdWVyeUVxdWFsIiwiX19QUklWQVRFX0FzeW5jUXVldWVJbXBsIiwiaXUiLCJzdSIsIm91IiwiX3UiLCJhdSIsInV1IiwiY3UiLCJsdSIsImh1IiwiZW5xdWV1ZSIsIlB1IiwiSXUiLCJUdSIsInN0YWNrIiwiaW5jbHVkZXMiLCJFdSIsImR1IiwiQXUiLCJSdSIsIlZ1IiwiX19QUklWQVRFX2lzUGFydGlhbE9ic2VydmVyIiwiTG9hZEJ1bmRsZVRhc2siLCJfcHJvZ3Jlc3NPYnNlcnZlciIsIl90YXNrQ29tcGxldGlvblJlc29sdmVyIiwiX2xhc3RQcm9ncmVzcyIsIm9uUHJvZ3Jlc3MiLCJfY29tcGxldGVXaXRoIiwiX3VwZGF0ZVByb2dyZXNzIiwiX2ZhaWxXaXRoIiwiRmlyZXN0b3JlIiwiX3F1ZXVlIiwiX2ZpcmVzdG9yZUNsaWVudCIsIl9fUFJJVkFURV9jb25maWd1cmVGaXJlc3RvcmUiLCJlbnN1cmVGaXJlc3RvcmVDb25maWd1cmVkIiwiX29mZmxpbmVDb21wb25lbnRQcm92aWRlciIsIl9vbmxpbmVDb21wb25lbnRQcm92aWRlciIsIl9vZmZsaW5lS2luZCIsIl9fUFJJVkFURV9zZXRQZXJzaXN0ZW5jZVByb3ZpZGVycyIsIl9fUFJJVkFURV92ZXJpZnlOb3RJbml0aWFsaXplZCIsIkFnZ3JlZ2F0ZUZpZWxkIiwiX2ludGVybmFsRmllbGRQYXRoIiwiQWdncmVnYXRlUXVlcnlTbmFwc2hvdCIsIl91c2VyRGF0YVdyaXRlciIsIl9kYXRhIiwiY29udmVydE9iamVjdE1hcCIsIkJ5dGVzIiwiX2J5dGVTdHJpbmciLCJGaWVsZFBhdGgiLCJfaW50ZXJuYWxQYXRoIiwiRmllbGRWYWx1ZSIsIl9tZXRob2ROYW1lIiwiR2VvUG9pbnQiLCJpc0Zpbml0ZSIsIl9sYXQiLCJfbG9uZyIsIlBhcnNlZFNldERhdGEiLCJQYXJzZWRVcGRhdGVEYXRhIiwiX19QUklWQVRFX2lzV3JpdGUiLCJfX1BSSVZBVEVfUGFyc2VDb250ZXh0SW1wbCIsIm11IiwiZnUiLCJndSIsInB1IiwieXUiLCJ3dSIsIlN1IiwiYnUiLCJEdSIsIl9fUFJJVkFURV9jcmVhdGVFcnJvciIsIm1ldGhvZE5hbWUiLCJDdSIsInZ1IiwiX19QUklWQVRFX1VzZXJEYXRhUmVhZGVyIiwiRnUiLCJfX1BSSVZBVEVfbmV3VXNlckRhdGFSZWFkZXIiLCJfX1BSSVZBVEVfcGFyc2VTZXREYXRhIiwibWVyZ2UiLCJtZXJnZUZpZWxkcyIsIl9fUFJJVkFURV92YWxpZGF0ZVBsYWluT2JqZWN0IiwiX19QUklWQVRFX3BhcnNlT2JqZWN0IiwiX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Bcmd1bWVudCQxIiwiX19QUklWQVRFX2ZpZWxkTWFza0NvbnRhaW5zIiwiX19QUklWQVRFX0RlbGV0ZUZpZWxkVmFsdWVJbXBsIiwiX3RvRmllbGRUcmFuc2Zvcm0iLCJfX1BSSVZBVEVfY3JlYXRlU2VudGluZWxDaGlsZENvbnRleHQiLCJfX1BSSVZBVEVfU2VydmVyVGltZXN0YW1wRmllbGRWYWx1ZUltcGwiLCJfX1BSSVZBVEVfQXJyYXlVbmlvbkZpZWxkVmFsdWVJbXBsIiwiTXUiLCJfX1BSSVZBVEVfcGFyc2VEYXRhIiwiX19QUklWQVRFX0FycmF5UmVtb3ZlRmllbGRWYWx1ZUltcGwiLCJfX1BSSVZBVEVfTnVtZXJpY0luY3JlbWVudEZpZWxkVmFsdWVJbXBsIiwieHUiLCJfX1BSSVZBVEVfcGFyc2VVcGRhdGVEYXRhIiwiX19QUklWQVRFX2ZpZWxkUGF0aEZyb21Eb3RTZXBhcmF0ZWRTdHJpbmciLCJfX1BSSVZBVEVfcGFyc2VVcGRhdGVWYXJhcmdzIiwiX19QUklWQVRFX3BhcnNlUXVlcnlWYWx1ZSIsIl9fUFJJVkFURV9sb29rc0xpa2VKc29uT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzZWFyY2giLCJEb2N1bWVudFNuYXBzaG90JDEiLCJfZmlyZXN0b3JlIiwiX2RvY3VtZW50IiwiX2NvbnZlcnRlciIsInJlZiIsIlF1ZXJ5RG9jdW1lbnRTbmFwc2hvdCQxIiwiZnJvbUZpcmVzdG9yZSIsImNvbnZlcnRWYWx1ZSIsIl9fUFJJVkFURV9maWVsZFBhdGhGcm9tQXJndW1lbnQiLCJfX1BSSVZBVEVfdmFsaWRhdGVIYXNFeHBsaWNpdE9yZGVyQnlGb3JMaW1pdFRvTGFzdCIsIkFwcGxpYWJsZUNvbnN0cmFpbnQiLCJRdWVyeUNvbnN0cmFpbnQiLCJRdWVyeUZpZWxkRmlsdGVyQ29uc3RyYWludCIsIl9maWVsZCIsIl9vcCIsIl92YWx1ZSIsIl9jcmVhdGUiLCJfYXBwbHkiLCJfcGFyc2UiLCJfX1BSSVZBVEVfdmFsaWRhdGVOZXdGaWVsZEZpbHRlciIsIl9fUFJJVkFURV92YWxpZGF0ZURpc2p1bmN0aXZlRmlsdGVyRWxlbWVudHMiLCJfX1BSSVZBVEVfcGFyc2VEb2N1bWVudElkVmFsdWUiLCJRdWVyeUNvbXBvc2l0ZUZpbHRlckNvbnN0cmFpbnQiLCJfcXVlcnlDb25zdHJhaW50cyIsIl9nZXRPcGVyYXRvciIsIl9nZXRRdWVyeUNvbnN0cmFpbnRzIiwiUXVlcnlPcmRlckJ5Q29uc3RyYWludCIsIl9kaXJlY3Rpb24iLCJRdWVyeUxpbWl0Q29uc3RyYWludCIsIl9saW1pdCIsIl9saW1pdFR5cGUiLCJRdWVyeVN0YXJ0QXRDb25zdHJhaW50IiwiX2RvY09yRmllbGRzIiwiX2luY2x1c2l2ZSIsIl9fUFJJVkFURV9uZXdRdWVyeUJvdW5kRnJvbURvY09yRmllbGRzIiwiUXVlcnlFbmRBdENvbnN0cmFpbnQiLCJfX1BSSVZBVEVfdmFsaWRhdGVRdWVyeUZpbHRlckNvbnN0cmFpbnQiLCJBYnN0cmFjdFVzZXJEYXRhV3JpdGVyIiwiY29udmVydFRpbWVzdGFtcCIsImNvbnZlcnRTZXJ2ZXJUaW1lc3RhbXAiLCJjb252ZXJ0Qnl0ZXMiLCJjb252ZXJ0UmVmZXJlbmNlIiwiY29udmVydEdlb1BvaW50IiwiY29udmVydEFycmF5IiwiY29udmVydE9iamVjdCIsImNvbnZlcnREb2N1bWVudEtleSIsIl9fUFJJVkFURV9hcHBseUZpcmVzdG9yZURhdGFDb252ZXJ0ZXIiLCJ0b0ZpcmVzdG9yZSIsIl9fUFJJVkFURV9MaXRlVXNlckRhdGFXcml0ZXIiLCJTbmFwc2hvdE1ldGFkYXRhIiwiRG9jdW1lbnRTbmFwc2hvdCIsIl9maXJlc3RvcmVJbXBsIiwiUXVlcnlEb2N1bWVudFNuYXBzaG90Iiwic2VydmVyVGltZXN0YW1wcyIsIlF1ZXJ5U25hcHNob3QiLCJfc25hcHNob3QiLCJfY2FjaGVkQ2hhbmdlcyIsIl9jYWNoZWRDaGFuZ2VzSW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJfX1BSSVZBVEVfcmVzdWx0Q2hhbmdlVHlwZSIsIl9fUFJJVkFURV9FeHBVc2VyRGF0YVdyaXRlciIsImV4ZWN1dGVXcml0ZSIsIl9fUFJJVkFURV9zeW5jRW5naW5lV3JpdGUiLCJfX1BSSVZBVEVfY29udmVydFRvRG9jU25hcHNob3QiLCJnZXRBZ2dyZWdhdGVGcm9tU2VydmVyIiwiYWdncmVnYXRlRmllbGRzIiwiX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudFJ1bkFnZ3JlZ2F0ZVF1ZXJ5IiwiX19QUklWQVRFX01lbW9yeUxvY2FsQ2FjaGVJbXBsIiwiX19QUklWQVRFX1BlcnNpc3RlbnRMb2NhbENhY2hlSW1wbCIsInRhYk1hbmFnZXIiLCJfaW5pdGlhbGl6ZSIsInBlcnNpc3RlbnRTaW5nbGVUYWJNYW5hZ2VyIiwiX19QUklWQVRFX01lbW9yeUVhZ2VyR2FiYWdlQ29sbGVjdG9ySW1wbCIsIl9fUFJJVkFURV9NZW1vcnlMcnVHYWJhZ2VDb2xsZWN0b3JJbXBsIiwiX19QUklWQVRFX1NpbmdsZVRhYk1hbmFnZXJJbXBsIiwiX19QUklWQVRFX011bHRpVGFiTWFuYWdlckltcGwiLCJXcml0ZUJhdGNoIiwiX2NvbW1pdEhhbmRsZXIiLCJfbXV0YXRpb25zIiwiX2NvbW1pdHRlZCIsIl9kYXRhUmVhZGVyIiwiX3ZlcmlmeU5vdENvbW1pdHRlZCIsIl9fUFJJVkFURV92YWxpZGF0ZVJlZmVyZW5jZSIsIlRyYW5zYWN0aW9uIiwiX3RyYW5zYWN0aW9uIiwiX19QUklWQVRFX3RyeUdldFN0cmluZyIsIlBlcnNpc3RlbnRDYWNoZUluZGV4TWFuYWdlciIsIl9jbGllbnQiLCJfX1BSSVZBVEVfc2V0UGVyc2lzdGVudENhY2hlSW5kZXhBdXRvQ3JlYXRpb25FbmFibGVkIiwiX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudFNldFBlcnNpc3RlbnRDYWNoZUluZGV4QXV0b0NyZWF0aW9uRW5hYmxlZCIsIldlYWtNYXAiLCJfX1BSSVZBVEVfVGVzdGluZ0hvb2tzU3BpSW1wbCIsIk91Iiwib25FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCIsIkNBQ0hFX1NJWkVfVU5MSU1JVEVEIiwiX0F1dG9JZCIsIl9CeXRlU3RyaW5nIiwiX0RhdGFiYXNlSWQiLCJfRG9jdW1lbnRLZXkiLCJfRW1wdHlBcHBDaGVja1Rva2VuUHJvdmlkZXIiLCJfRW1wdHlBdXRoQ3JlZGVudGlhbHNQcm92aWRlciIsIl9GaWVsZFBhdGgiLCJfVGVzdGluZ0hvb2tzIiwiX2Nhc3QiLCJfZGVidWdBc3NlcnQiLCJfaW50ZXJuYWxBZ2dyZWdhdGlvblF1ZXJ5VG9Qcm90b1J1bkFnZ3JlZ2F0aW9uUXVlcnlSZXF1ZXN0IiwiX2ludGVybmFsUXVlcnlUb1Byb3RvUXVlcnlUYXJnZXQiLCJfaXNCYXNlNjRBdmFpbGFibGUiLCJfbG9nV2FybiIsIl92YWxpZGF0ZUlzTm90VXNlZFRvZ2V0aGVyIiwiYWRkRG9jIiwiYWdncmVnYXRlRmllbGRFcXVhbCIsImFnZ3JlZ2F0ZVF1ZXJ5U25hcHNob3RFcXVhbCIsImFycmF5UmVtb3ZlIiwiYXJyYXlVbmlvbiIsImF2ZXJhZ2UiLCJjbGVhckluZGV4ZWREYlBlcnNpc3RlbmNlIiwiZGVsZXRlQWxsUGVyc2lzdGVudENhY2hlSW5kZXhlcyIsIl9fUFJJVkFURV9maXJlc3RvcmVDbGllbnREZWxldGVBbGxGaWVsZEluZGV4ZXMiLCJkZWxldGVEb2MiLCJkZWxldGVGaWVsZCIsImRpc2FibGVOZXR3b3JrIiwiX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudERpc2FibGVOZXR3b3JrIiwiZGlzYWJsZVBlcnNpc3RlbnRDYWNoZUluZGV4QXV0b0NyZWF0aW9uIiwiZW5hYmxlSW5kZXhlZERiUGVyc2lzdGVuY2UiLCJlbmFibGVNdWx0aVRhYkluZGV4ZWREYlBlcnNpc3RlbmNlIiwiZW5hYmxlTmV0d29yayIsIl9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRFbmFibGVOZXR3b3JrIiwiZW5hYmxlUGVyc2lzdGVudENhY2hlSW5kZXhBdXRvQ3JlYXRpb24iLCJlbmRCZWZvcmUiLCJnZXRDb3VudEZyb21TZXJ2ZXIiLCJnZXREb2NGcm9tQ2FjaGUiLCJfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50R2V0RG9jdW1lbnRGcm9tTG9jYWxDYWNoZSIsImdldERvY0Zyb21TZXJ2ZXIiLCJnZXREb2NzIiwiZ2V0RG9jc0Zyb21DYWNoZSIsIl9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRHZXREb2N1bWVudHNGcm9tTG9jYWxDYWNoZSIsImdldERvY3NGcm9tU2VydmVyIiwiZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0IiwiZ2V0UGVyc2lzdGVudENhY2hlSW5kZXhNYW5hZ2VyIiwiaW5pdGlhbGl6ZUZpcmVzdG9yZSIsImxpbWl0VG9MYXN0IiwibG9hZEJ1bmRsZSIsIlJlYWRhYmxlU3RyZWFtIiwiZ2V0UmVhZGVyIiwiX19QUklWQVRFX3N5bmNFbmdpbmVMb2FkQnVuZGxlIiwiX19QUklWQVRFX2ZpcmVzdG9yZUNsaWVudExvYWRCdW5kbGUiLCJtZW1vcnlFYWdlckdhcmJhZ2VDb2xsZWN0b3IiLCJtZW1vcnlMb2NhbENhY2hlIiwibWVtb3J5THJ1R2FyYmFnZUNvbGxlY3RvciIsIl9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRHZXROYW1lZFF1ZXJ5Iiwib25TbmFwc2hvdHNJblN5bmMiLCJfX1BSSVZBVEVfZmlyZXN0b3JlQ2xpZW50QWRkU25hcHNob3RzSW5TeW5jTGlzdGVuZXIiLCJwZXJzaXN0ZW50TG9jYWxDYWNoZSIsInBlcnNpc3RlbnRNdWx0aXBsZVRhYk1hbmFnZXIiLCJyZWZFcXVhbCIsInNlcnZlclRpbWVzdGFtcCIsInNldEluZGV4Q29uZmlndXJhdGlvbiIsImluZGV4ZXMiLCJhcnJheUNvbmZpZyIsIl9fUFJJVkFURV9maXJlc3RvcmVDbGllbnRTZXRJbmRleENvbmZpZ3VyYXRpb24iLCJzbmFwc2hvdEVxdWFsIiwic3RhcnRBZnRlciIsIndhaXRGb3JQZW5kaW5nV3JpdGVzIiwiX19QUklWQVRFX3N5bmNFbmdpbmVSZWdpc3RlclBlbmRpbmdXcml0ZXNDYWxsYmFjayIsIndyaXRlQmF0Y2giLCJsZXZlbFN0cmluZ1RvRW51bSIsIlZFUkJPU0UiLCJJTkZPIiwiU0lMRU5UIiwiZGVmYXVsdExvZ0xldmVsIiwiQ29uc29sZU1ldGhvZCIsImRlZmF1bHRMb2dIYW5kbGVyIiwibG9nVHlwZSIsImFyZ3MiLCJtZXRob2QiLCJfbG9nTGV2ZWwiLCJfbG9nSGFuZGxlciIsIl91c2VyTG9nSGFuZGxlciIsIlR5cGVFcnJvciIsImluZm8iLCJsZXZlbCIsImluc3QiLCJjdXN0b21Mb2dMZXZlbCIsInVzZXJMb2dIYW5kbGVyIiwiYXJnIiwiaWdub3JlZCIsImluc3RhbmNlc18xIiwiQ09OU1RBTlRTIiwiTk9ERV9DTElFTlQiLCJOT0RFX0FETUlOIiwiYXNzZXJ0IiwiYXNzZXJ0aW9uIiwiYXNzZXJ0aW9uRXJyb3IiLCJzdHJpbmdUb0J5dGVBcnJheSQxIiwic3RyIiwib3V0IiwiYmFzZTY0IiwiYnl0ZVRvQ2hhck1hcF8iLCJjaGFyVG9CeXRlTWFwXyIsImJ5dGVUb0NoYXJNYXBXZWJTYWZlXyIsImNoYXJUb0J5dGVNYXBXZWJTYWZlXyIsIkVOQ09ERURfVkFMU19CQVNFIiwiRU5DT0RFRF9WQUxTIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJlbmNvZGVCeXRlQXJyYXkiLCJpbnB1dCIsIndlYlNhZmUiLCJpbml0XyIsImJ5dGVUb0NoYXJNYXAiLCJvdXRwdXQiLCJieXRlMSIsImhhdmVCeXRlMiIsImJ5dGUyIiwiaGF2ZUJ5dGUzIiwiYnl0ZTMiLCJvdXRCeXRlMSIsIm91dEJ5dGUyIiwib3V0Qnl0ZTMiLCJvdXRCeXRlNCIsImVuY29kZVN0cmluZyIsImRlY29kZVN0cmluZyIsImJ5dGVzIiwicG9zIiwiYzEiLCJjMiIsImMzIiwiYnl0ZUFycmF5VG9TdHJpbmciLCJkZWNvZGVTdHJpbmdUb0J5dGVBcnJheSIsImNoYXJUb0J5dGVNYXAiLCJieXRlNCIsIkRlY29kZUJhc2U2NFN0cmluZ0Vycm9yIiwiYmFzZTY0RW5jb2RlIiwidXRmOEJ5dGVzIiwiYmFzZTY0RGVjb2RlIiwiZGVlcEV4dGVuZCIsInByb3AiLCJnZXRHbG9iYWwiLCJnZXREZWZhdWx0cyIsIl9fRklSRUJBU0VfREVGQVVMVFNfXyIsImRlZmF1bHRzSnNvblN0cmluZyIsImdldERlZmF1bHRzRnJvbUVudlZhcmlhYmxlIiwiY29va2llIiwiZGVjb2RlZCIsImdldERlZmF1bHRzRnJvbUNvb2tpZSIsImdldERlZmF1bHRFbXVsYXRvckhvc3QiLCJwcm9kdWN0TmFtZSIsImVtdWxhdG9ySG9zdHMiLCJ3cmFwQ2FsbGJhY2siLCJpc05vZGUiLCJmb3JjZUVudmlyb25tZW50IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJjdXN0b21EYXRhIiwic2V0UHJvdG90eXBlT2YiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInNlcnZpY2VOYW1lIiwiZXJyb3JzIiwiZnVsbENvZGUiLCJ0ZW1wbGF0ZSIsIlBBVFRFUk4iLCJyZXBsYWNlVGVtcGxhdGUiLCJmdWxsTWVzc2FnZSIsImpzb25FdmFsIiwiaGVhZGVyIiwiY2xhaW1zIiwic2lnbmF0dXJlIiwicGFydHMiLCJpc09iamVjdCIsInRoaW5nIiwiT2JzZXJ2ZXJQcm94eSIsImV4ZWN1dG9yIiwib25Ob09ic2VydmVycyIsIm9ic2VydmVycyIsInVuc3Vic2NyaWJlcyIsIm9ic2VydmVyQ291bnQiLCJmaW5hbGl6ZWQiLCJmb3JFYWNoT2JzZXJ2ZXIiLCJzdWJzY3JpYmUiLCJuZXh0T3JPYnNlcnZlciIsIm1ldGhvZHMiLCJpbXBsZW1lbnRzQW55TWV0aG9kcyIsIm5vb3AiLCJ1bnN1YiIsInVuc3Vic2NyaWJlT25lIiwiZmluYWxFcnJvciIsInNlbmRPbmUiLCJlcnIiLCJlcnJvclByZWZpeCIsImZuTmFtZSIsImFyZ05hbWUiLCJNQVhfVkFMVUVfTUlMTElTIiwiUkFORE9NX0ZBQ1RPUiIsIlNoYTEiLCJjaGFpbl8iLCJidWZfIiwicGFkXyIsImluYnVmXyIsInRvdGFsXyIsImJsb2NrU2l6ZSIsImNvbXByZXNzXyIsImJ1ZiIsImYiLCJkIiwibGVuZ3RoTWludXNCbG9jayIsImluYnVmIiwidG90YWxCaXRzIiwiYXJlQ29va2llc0VuYWJsZWQiLCJjb29raWVFbmFibGVkIiwiY2FsY3VsYXRlQmFja29mZk1pbGxpcyIsImJhY2tvZmZDb3VudCIsImludGVydmFsTWlsbGlzIiwiYmFja29mZkZhY3RvciIsImN1cnJCYXNlVmFsdWUiLCJyYW5kb21XYWl0IiwicHJvamVjdCIsImlhdCIsInBheWxvYWQiLCJpc3MiLCJhdWQiLCJleHAiLCJhdXRoX3RpbWUiLCJmaXJlYmFzZSIsInNpZ25faW5fcHJvdmlkZXIiLCJpZGVudGl0aWVzIiwiYWxnIiwiY3JlYXRlU3Vic2NyaWJlIiwicHJveHkiLCJkZWVwQ29weSIsImFLZXlzIiwiYktleXMiLCJhUHJvcCIsImJQcm9wIiwiZXh0cmFjdFF1ZXJ5c3RyaW5nIiwidXJsIiwicXVlcnlTdGFydCIsImZyYWdtZW50U3RhcnQiLCJzZXBhcmF0b3JJbmRleCIsImxhc3RJbmRleE9mIiwicG9ydCIsInBhcnNlSW50IiwiZ2V0RXhwZXJpbWVudGFsU2V0dGluZyIsImlzQWRtaW4iLCJpc0Jyb3dzZXJFeHRlbnNpb24iLCJydW50aW1lIiwiY2hyb21lIiwiYnJvd3NlciIsImlzRWxlY3Ryb24iLCJpc0lFIiwiaXNNb2JpbGVDb3Jkb3ZhIiwiaXNOb2RlU2RrIiwiaXNSZWFjdE5hdGl2ZSIsImlzVVdQIiwiaXNWYWxpZEZvcm1hdCIsImlzVmFsaWRUaW1lc3RhbXAiLCJ2YWxpZFNpbmNlIiwidmFsaWRVbnRpbCIsImlzc3VlZEF0VGltZSIsImNvbnRleHRPYmoiLCJyZXMiLCJvcmRpbmFsIiwiY2VudCIsImFicyIsImRlYyIsImluZGljYXRvciIsInByb21pc2VXaXRoVGltZW91dCIsInRpbWVJbk1TIiwiZGVmZXJyZWRQcm9taXNlIiwicXVlcnlzdHJpbmciLCJxdWVyeXN0cmluZ1BhcmFtcyIsImFycmF5VmFsIiwicXVlcnlzdHJpbmdEZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzYWZlR2V0Iiwic3RyaW5nTGVuZ3RoIiwic3RyaW5nVG9CeXRlQXJyYXkiLCJoaWdoIiwidXVpZHY0IiwidmFsaWRhdGVBcmdDb3VudCIsIm1pbkNvdW50IiwibWF4Q291bnQiLCJhcmdDb3VudCIsImFyZ0Vycm9yIiwidmFsaWRhdGVDYWxsYmFjayIsImFyZ3VtZW50TmFtZSIsInZhbGlkYXRlQ29udGV4dE9iamVjdCIsImNvbnRleHQiLCJwcmVFeGlzdCIsIkRCX0NIRUNLX05BTUUiLCJ2YWxpZGF0ZU5hbWVzcGFjZSIsIm5hbWVzcGFjZSIsInciLCJMTjIiLCJFIiwieG9yIiwibW9kdWxlIiwieSIsImRlZmluZVByb3BlcnRpZXMiLCJnbG9iYWxUaGlzIiwid3JpdGFibGUiLCJ1bnNoaWZ0IiwiRnVuY3Rpb24iLCJRYiIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiYnV0dG9uIiwic2NyZWVuWSIsInNjcmVlblgiLCJjbGllbnRZIiwiY2xpZW50WCIsIm1ldGFLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsImN0cmxLZXkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsImNoYW5nZWRUb3VjaGVzIiwic3JjRWxlbWVudCIsIm5vZGVOYW1lIiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJwYWdlWCIsInBhZ2VZIiwicmV0dXJuVmFsdWUiLCJzcmMiLCJjYXB0dXJlIiwib25jZSIsImF0dGFjaEV2ZW50IiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiaGFuZGxlRXZlbnQiLCJhYiIsImJiIiwiY2IiLCJlYiIsImZiIiwiZ2IiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwid2IiLCJuYiIsIm9iIiwicGIiLCJxYiIsInJiIiwic2IiLCJ0YiIsInViIiwidmIiLCJ5YiIsIkNiIiwiQWIiLCJ4YiIsIkJiIiwiSGIiLCJ6YiIsIlBiIiwiRGIiLCJFYiIsIlhNTEh0dHBSZXF1ZXN0IiwiRmIiLCJHYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJTYiIsIldiIiwiT2IiLCJVYiIsIlJiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImdldFJlc3BvbnNlSGVhZGVyIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiTmIiLCJUYiIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInRyaW0iLCJWYiIsImhjIiwiaWMiLCJQZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmciLCJwZXJmb3JtYW5jZSIsImdldEVudHJpZXNCeVR5cGUiLCJuZXh0SG9wUHJvdG9jb2wiLCJsb2FkVGltZXMiLCJ3YXNGZXRjaGVkVmlhU3BkeSIsImpjIiwia2MiLCJuYyIsIm1jIiwibGMiLCJvYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJEYyIsIkFjIiwidmMiLCJCYyIsImRlY29kZVVSSSIsImVuY29kZVVSSSIsIkNjIiwid2MiLCJ4YyIsInljIiwiemMiLCJwYyIsIkVjIiwib25sb2FkIiwib250aW1lb3V0IiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiSGVhZGVycyIsIk5jIiwiTWMiLCJMYyIsIk9jIiwiUGMiLCJjYWNoZSIsImJvZHkiLCJmZXRjaCIsIlJlcXVlc3QiLCJhcnJheUJ1ZmZlciIsInRleHQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiYXBwZW5kIiwiUWMiLCJSYyIsIlNjIiwiVWMiLCJWYyIsIldjIiwibG9jYXRpb24iLCJwcm90b2NvbCIsIlRjIiwibW96UmVzcG9uc2VBcnJheUJ1ZmZlciIsIlhjIiwiWWMiLCJjb25jdXJyZW50UmVxdWVzdExpbWl0IiwiZmFzdEhhbmRzaGFrZSIsIlpjIiwiJGMiLCJzZW5kQmVhY29uIiwiSW1hZ2UiLCJhZCIsImVkIiwiZGQiLCJjZCIsImZkIiwiYmQiLCJpc0FjdGl2ZSIsIkZjIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwib2siLCJHYyIsImhvc3RuYW1lIiwiZ2QiLCJoZCIsIm1lc3NhZ2VIZWFkZXJzIiwiY2xpZW50UHJvdG9jb2xIZWFkZXJSZXF1aXJlZCIsIm1lc3NhZ2VDb250ZW50VHlwZSIsIl9faGVhZGVyc19fIiwic3RhdHVzQ29kZSIsIl9fc3RhdHVzX18iLCJfX3NtX18iLCJqZCIsInRvVXBwZXJDYXNlIiwid2l0aENyZWRlbnRpYWxzIiwiY29ubmVjdCIsIk9TSUQiLCJPQUlEIiwiX19kYXRhX18iLCJnZXRMYXN0RXJyb3IiLCJpbnN0YW5jZU9mQW55Iiwib2JqZWN0IiwiY29uc3RydWN0b3JzIiwiaWRiUHJveHlhYmxlVHlwZXMiLCJjdXJzb3JBZHZhbmNlTWV0aG9kcyIsImN1cnNvclJlcXVlc3RNYXAiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJ0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsImlkYlByb3h5VHJhcHMiLCJyZWNlaXZlciIsIklEQlRyYW5zYWN0aW9uIiwid3JhcCIsInRyYW5zZm9ybUNhY2hhYmxlVmFsdWUiLCJmdW5jIiwiSURCRGF0YWJhc2UiLCJJREJDdXJzb3IiLCJhZHZhbmNlIiwiY29udGludWVQcmltYXJ5S2V5IiwidW53cmFwIiwic3RvcmVOYW1lcyIsInVubGlzdGVuIiwiY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uIiwiSURCT2JqZWN0U3RvcmUiLCJJREJJbmRleCIsIlByb3h5IiwiSURCUmVxdWVzdCIsInN1Y2Nlc3MiLCJwcm9taXNpZnlSZXF1ZXN0IiwiYmxvY2tlZCIsImJsb2NraW5nIiwidGVybWluYXRlZCIsIm9wZW5Qcm9taXNlIiwiZGVsZXRlREIiLCJyZWFkTWV0aG9kcyIsIndyaXRlTWV0aG9kcyIsImNhY2hlZE1ldGhvZHMiLCJnZXRNZXRob2QiLCJ0YXJnZXRGdW5jTmFtZSIsInVzZUluZGV4IiwiaXNXcml0ZSIsInN0b3JlTmFtZSIsIm9sZFRyYXBzIiwiZXh0ZW5kU3RhdGljcyIsIl9fcHJvdG9fXyIsIl9fcmVzdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsIl9fZXNEZWNvcmF0ZSIsImN0b3IiLCJkZXNjcmlwdG9ySW4iLCJjb250ZXh0SW4iLCJpbml0aWFsaXplcnMiLCJleHRyYUluaXRpYWxpemVycyIsImFjY2VwdCIsImRlc2NyaXB0b3IiLCJhY2Nlc3MiLCJhZGRJbml0aWFsaXplciIsImluaXQiLCJfX3J1bkluaXRpYWxpemVycyIsInRoaXNBcmciLCJ1c2VWYWx1ZSIsIl9fcHJvcEtleSIsIl9fc2V0RnVuY3Rpb25OYW1lIiwicHJlZml4IiwiZGVzY3JpcHRpb24iLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsIm9wcyIsInZlcmIiLCJfX2NyZWF0ZUJpbmRpbmciLCJrMiIsIl9fZXNNb2R1bGUiLCJfX2V4cG9ydFN0YXIiLCJfX3NwcmVhZCIsIl9fc3ByZWFkQXJyYXlzIiwiaWwiLCJqbCIsInRvIiwicGFjayIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwiYXN5bmNJdGVyYXRvciIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fbWFrZVRlbXBsYXRlT2JqZWN0IiwiY29va2VkIiwicmF3IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwibW9kIiwiX19pbXBvcnREZWZhdWx0IiwiZGVmYXVsdCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEluIiwiX19hZGREaXNwb3NhYmxlUmVzb3VyY2UiLCJlbnYiLCJkaXNwb3NlIiwiYXN5bmNEaXNwb3NlIiwiX1N1cHByZXNzZWRFcnJvciIsIlN1cHByZXNzZWRFcnJvciIsInN1cHByZXNzZWQiLCJfX2Rpc3Bvc2VSZXNvdXJjZXMiLCJoYXNFcnJvciIsInJlYyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9